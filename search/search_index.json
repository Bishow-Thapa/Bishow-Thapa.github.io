{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SSH","text":""},{"location":"#ssh","title":"SSH","text":""},{"location":"#how-is-ssh-implemented-in-windows","title":"How is SSH implemented in Windows?","text":"<p>There are two separate components of OpenSSH in Windows.</p> <ul> <li>an SSH client &amp;</li> <li>an SSH server.</li> </ul> <p>Microsoft implemented both in Windows using <code>OpenSSH Client</code> and <code>OpenSSH Server</code> respectively. And there are also two main methods to install and uninstall these components in Windows. The OpenSSH Client feature is installed by default in higher-end versions of Windows. The Client is like the functionality of Putty. It allows you to make \u2018client\u2019 connections to other servers and devices using various secure protocols.</p> <p>You can confirm if you have the client installed by opening a command prompt or PowerShell prompt and typing \u2018ssh\u2019 and hitting Enter.</p> <p></p> <p>for more information about ssh &amp; OpenSSH using PowerShell...</p> <p>If you dont find the optional feature, then go to</p> <pre><code>1. Setting\n2. App\n3. App &amp; Feature\n3. search for optional feature\n</code></pre>"},{"location":"#reference","title":"Reference","text":"<ul> <li>What is a Git SSH Key? </li> <li>SSH Essentials: Working with SSH Servers, Clients, and Keys</li> <li>Connecting to GitHub with SSH</li> <li>The Ultimate Guide to Installing OpenSSH on Windows</li> <li>jenkins guide</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/01/05/viewset-vs-apiview/","title":"Viewset vs APIView","text":""},{"location":"blog/2024/01/05/viewset-vs-apiview/#viewset-vs-apiview","title":"Viewset vs APIView","text":"<p>The differences between APIView and Viewset vary depending on the particular needs and requirements. Therefore, we can provide a code-based example to decide which method should be used:</p> <p></p> <p>Now let\u2019s do the same operations using Viewset:</p> <pre><code>class BlogPostViewSet(viewsets.ModelViewSet):\n    queryset = BlogPost.objects.all()\n    serializer_class = BlogPostSerializer\n</code></pre> <p>At this point, we wrote less code using Viewset compared to the previous example created with APIView. Viewset contains several predefined methods that can be used for multiple operations, making model operations easier. Also, for customized operations, Viewset can be easily extended with extra methods provided by the Django Rest Framework.</p> <p>In addition, routers combined with Viewset can automatically match URLs and associate them with the view class, allowing us to easily perform URL routing. This is especially useful in large-scale projects or projects that work with many models.</p> <pre><code>router = routers.DefaultRouter()\nrouter.register(r'blog-posts', BlogPostViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n</code></pre> <p>In this example, the router element registers our Viewset class and automatically generates the URLs required for the predefined CRUD operations. Thus, you can perform basic CRUD operations by sending GET, POST, PUT, PATCH and DELETE requests to the URL \u201c/blog-posts/\u201d.</p> <p>Conclusion</p> <ul> <li><code>APIView</code> is derived from Django\u2019s base View class, while <code>Viewset</code> is derived from a special <code>ViewSet class</code> of the Django Rest Framework.</li> </ul>"},{"location":"blog/2024/01/05/viewset-vs-apiview/#reference","title":"Reference","text":"<ul> <li>Django APIView vs Viewsets Which one to Choose?</li> <li>APIView vs Viewsets</li> <li>Views vs Generic Views vs ViewSets</li> <li>GenericAPIView and Mixins</li> <li>More views and viewsets: offical docs</li> <li>Generic, Functional Based and Class Based Views in Django REST Framework</li> <li> <p>Difference between views and viewsets</p> </li> <li> <p>Customizing token claims</p> </li> <li> <p>JWT Decoder</p> </li> <li> <p>Viewsets vs Generic Views vs APIView vs Function Based Views: reddit</p> </li> <li>Comprehensive guide to GenericAPIViews in Django REST Framework</li> <li>Django REST Framework: Generics or ModelViewSets?: stackoverflow</li> </ul>"},{"location":"blog/2024/01/05/django-cors/","title":"Django cors","text":""},{"location":"blog/2024/01/05/django-cors/#django-cors","title":"Django cors","text":"<p>django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS). Adding CORS headers allows your resources to be accessed on other domains.</p> <p>CORS is a mechanism to allow interaction with resources hosted on different domains.</p> <pre><code>$ pip install django-cors-headers\n\n$ pip install django djangorestframework django-cors-headers\n</code></pre> <p>and then add it to your installed apps:</p> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"corsheaders\",\n    ...,\n]\n</code></pre> <p>You will also need to add a middleware class to listen in on responses:</p> <pre><code>MIDDLEWARE = [\n    ...,\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    ...,\n]\n</code></pre> <p><code>CorsMiddleware</code> should be placed as high as possible, especially before any middleware that can generate responses such as Django\u2019s <code>CommonMiddleware</code> or Whitenoise\u2019s <code>WhiteNoiseMiddleware</code>. If it is not before, it will not be able to add the CORS headers to these responses.</p> <p>Configuration</p> <p>Configure the middleware\u2019s behaviour in your Django settings. You must set at least one of three following settings:</p> <ul> <li><code>CORS_ALLOWED_ORIGINS</code></li> <li><code>CORS_ALLOWED_ORIGIN_REGEXES</code></li> <li><code>CORS_ALLOW_ALL_ORIGINS</code></li> </ul> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n    \"https://example.com\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n    \"http://127.0.0.1:9000\",\n]\n</code></pre> <p>CORS_ORIGIN_WHITELIST <code>Deprecated</code> VS CORS_ALLOWED_ORIGINS</p> <ul> <li>before version <code>3.0.0</code> he setting used to whitelist allowed origins was <code>CORS_ORIGIN_WHITELIST</code>.</li> <li>In version <code>3.0.0</code> and later, the naming convention was changed to <code>CORS_ALLOWED_ORIGINS</code> for consistency with other Django settings.</li> <li>You should use <code>CORS_ALLOWED_ORIGINS</code> in more recent versions of <code>django-cors-headers</code>:</li> </ul>"},{"location":"blog/2024/01/05/django-cors/#reference","title":"Reference","text":"<ul> <li>django-cors-headers</li> <li>Django CORS Guide</li> <li> <p>whitelist cors</p> </li> <li> <p>How to Integrate ReactJS with Django Framework</p> </li> <li>Using React with Django to create an app</li> <li>How to Integrate React and Django framework, in a simpler way</li> <li>what are the possible ways to integrate react: reddit</li> <li>How to build a React application in a Django project </li> <li>Integrating Django with Reactjs using Django REST Framework</li> </ul>"},{"location":"blog/2024/01/01/managing-development-env-in-django/","title":"Managing development .env in Django","text":""},{"location":"blog/2024/01/01/managing-development-env-in-django/#managing-development-env-in-django","title":"Managing development <code>.env</code> in Django","text":"<p>Python-dotenv reads key-value pairs from a <code>.env</code> file and can set them as environment variables. It helps in the development of applications following the 12-factor principles.</p> <pre><code>$ pip install python-dotenv\n</code></pre> <p>Create a <code>.env.example</code> file in the root file.</p> <p>.env.example</p> <pre><code>SECRET_KEY=\nDB_NAME=\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>while in development, copy and paste <code>.env.example</code>, new file called <code>.env</code></p> <p>.env</p> <pre><code>SECRET_KEY=\"your secret key inside quotes\"\nDB_NAME=db-name\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>Update the <code>settings.py</code> file in project</p> <p>settings.py</p> <pre><code>from dotenv import load_dotenv\nfrom datetime import timedelta\nimport os\n\n# load environment variables from a file named .env into the environment of your application.\nload_dotenv()\n\n# added\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n\n# updated the databse\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS'),\n        'HOST': os.environ.get('DB_HOST'),\n        'PORT': os.environ.get('DB_PORT'),\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n</code></pre> <p>That's it now you're good to go ;)</p>"},{"location":"blog/2024/01/01/managing-development-env-in-django/#reference","title":"Reference","text":"<ul> <li>python-dotenv</li> <li>django key generator online</li> </ul>"},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":""},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#blog-crud-application-using-drf-viewsets","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":"<p>Django Rest Framework is a powerful tool that allows you to easily build RESTful APIs using Django. By defining your models, serializers, views, and URLs, you can quickly create a blog post application that allows users to create, read, update, and delete blog posts via a web API.</p> <pre><code># Installing Django and Django REST framework at once\n\n$ pip install django djangorestframework\n</code></pre> <p>In Django Rest Framework, a ViewSet is a class-based view that provides a set of common actions (i.e., CRUD operations) for a specific model or queryset.</p> <p>ViewSets allow you to define your API endpoints in a more concise and structured way, as they provide a set of default methods that handle common HTTP operations, such as GET, POST, PUT, PATCH, and DELETE.</p> <p>There are two main types of ViewSets in Django Rest Framework: ModelViewSet and ReadOnlyModelViewSet.</p> <p>The ModelViewSet is the most commonly used ViewSet, as it provides all the actions that are required to implement a full CRUD API. It includes methods such as list, create, retrieve, update, and destroy, which correspond to the HTTP GET, POST, GET (single object), PUT/PATCH, and DELETE methods, respectively.</p> <p>You can also override these default methods to add custom behavior, such as filtering or authentication.</p> <p>Today, We are going to check ModelViewSets</p>"},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#create-a-django-project","title":"Create a django-project","text":"<p>I have create a project named \"api\".</p> <pre><code>$ django-admin startproject api\n</code></pre> <p>Now, let create a new app called \"books\".</p> <pre><code>$ cd api\n\n$ py manage.py startapp books\n</code></pre>"},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#books-app","title":"books <code>app</code>","text":"<pre><code># models.py\n\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=150)\n\n    class Meta:\n        db_table = \"Book\"\n\n    def __str__(self):\n        return self.title\n</code></pre> <pre><code># serializers.py\n\nfrom rest_framework import serializers\nfrom .models import Book\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n</code></pre> <pre><code># views.py\n\nfrom rest_framework import viewsets\nfrom .models import Book\nfrom .serializers import BookSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n</code></pre> <pre><code># urls.py\n\nfrom rest_framework.routers import DefaultRouter\nfrom django.urls import include, path\nfrom .views import BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'book_post', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls))\n]\n</code></pre>"},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#api-project","title":"api <code>project</code>","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n    # apps\n    path('api/blog/', include('apps.blogs.urls')),\n    path('api/member/', include('apps.privateapi.urls')),\n    path('api/books/', include('apps.books.urls')),\n]\n\n</code></pre>"},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>"},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":""},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>"},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n\n  # pathname is after your top-level domain url.\n  # Example: bishow-thapa.github.io/blog\n  # your data-mapping should be blog\n\n  data-mapping=\"blog\"\n\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n&lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":""},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>"},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Foo","Bar"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Foo","Bar"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/","title":"Automatically set Bearer Token in global variable postman after Login api","text":""},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#automatically-set-bearer-token-in-global-variable-postman-after-login-api","title":"Automatically set Bearer Token in global variable postman after Login api","text":"<p>In Postman, <code>pm</code> is a built-in JavaScript object that provides access to the Postman API. It allows you to interact with and manipulate the data and features within the Postman environment during the execution of pre-request scripts and tests.</p> <p>ALL YOU NEED 2 lines of code</p> <pre><code># Stores the access token in an environment or global variable\nvar accessToken = pm.response.json().access;\n\n# It set in the global enviroment variable named `accessToken`\npm.globals.set(\"accessToken\", accessToken);\n\n# if you want to set in local enviroment variable named `TOKEN`\npm.environment.set(\"TOKEN\", token)\n</code></pre> <p>Here are some common uses of <code>pm</code> in Postman:</p> <ul> <li> <p><code>pm.environment</code>: This property allows you to access and manipulate environment variables. For example, you can use pm.environment.get(\"variableName\") to retrieve the value of an environment variable.</p> </li> <li> <p><code>pm.globals</code>: This property is similar to pm.environment, but it deals with global variables.</p> </li> <li> <p><code>pm.request</code>: This property provides information about the current request being sent, allowing you to modify request details dynamically.</p> </li> <li> <p><code>pm.response</code>: This property provides information about the response received after sending a request, allowing you to extract data or perform tests on the response.</p> </li> <li> <p><code>pm.sendRequest</code>: This method allows you to send additional HTTP requests from within your scripts.</p> </li> </ul> <p>Here's a simple example using pm.environment:</p> <pre><code># Get the value of the \"TOKEN\" variable in the current environment\nvar token = pm.environment.get(\"TOKEN\");\n\n# Log the token to the console\nconsole.log(\"Token:\", token);\n</code></pre> <p>In this example, <code>pm.environment.get(\"TOKEN\")</code> is used to retrieve the value of the \"TOKEN\" variable in the current environment. The retrieved value is then logged to the console using <code>console.log</code>.</p> <p>Testing in Postman</p> <p>The Tests tab allows for any post-processing after a request is sent and includes the ability to write tests for assessing response data. The Test tab sandbox has the Chai.js library built in, so you can use Chai's behavior-driven development (BDD) syntax to create readable test assertions.</p> <pre><code>pm.test(\"Response status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.test(\"Response has access and refresh properties\", function () {\n    var res = pm.response.json();\n    pm.expect(res).to.have.property(\"access\");\n    pm.expect(res).to.have.property(\"refresh\");\n});\n\npm.test(\"Access property has a length greater than 0\", function () {\n    var res = pm.response.json();\n    pm.expect(res.access).to.have.lengthOf.above(0);\n});\n</code></pre>"},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#reference","title":"Reference","text":"<ul> <li>Set Bearer Token as Environment Variable in Postman for All APIs</li> <li>How do i set up a bearer token in postman from an environment variable?</li> <li> <p>How to automatically set a Bearer Token for your Postman requests?</p> </li> <li> <p>Write API test scripts in Postman</p> </li> <li>Postman Test script examples</li> <li>Api Testing in postmen </li> </ul>"},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/","title":"How to Implement Tokenization using JWT and Django","text":""},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#how-to-implement-tokenization-using-jwt-and-django","title":"How to Implement Tokenization using JWT and Django","text":"<p>A JSON Web Token authentication plugin for the Django REST Framework.</p> <p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. It aims to cover the most common use cases of JWTs by offering a conservative set of default features. It also aims to be easily extensible in case a desired feature is not present.</p> <pre><code>$ pip install djangorestframework-simplejwt\n</code></pre>"},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#project","title":"project","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n]\n</code></pre> <pre><code># settings.py\n\nINSTALLED_APPS = [\n  'django.contrib.admin',\n  'django.contrib.auth',\n  'django.contrib.contenttypes',\n  'django.contrib.sessions',\n  'django.contrib.messages',\n  'django.contrib.staticfiles',\n\n  # packages\n  'rest_framework',\n  'rest_framework_simplejwt',\n\n  # apps\n  'apps.accounts',\n  'apps.blogs',\n  'apps.privateapi',\n  'apps.books',\n]\n\n# add this\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\n\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n}\n\n</code></pre> <ul> <li>simplejwt</li> </ul>"},{"location":"office/01-credentials/","title":"Introduction","text":""},{"location":"office/01-credentials/#domain","title":"Domain","text":"<ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - local</li> <li>cqweb.ictc.com.np - main</li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/01-credentials/#folder-structure","title":"Folder Structure","text":"<p><code>cqnovelweb-develop</code></p> <p><code>src</code></p> <p><code>assets</code> : contains the image and svg files.</p> <p><code>components</code> : list of all the resuable components.</p> <p><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</p> <p><code>json</code> : has the caleder filter data.</p> <p><code>layouts</code> : contains the base layout of cqweb.</p> <p><code>services</code> : core redux - action, reducer, store</p> <p><code>styles</code> : contains the sass styles.</p> <p><code>utils</code> : list of reusable functions.</p>"},{"location":"office/01-credentials/#installation","title":"Installation","text":"<pre><code>$ npm i --legacy-peer-deps\n\n$ npm run product\n</code></pre>"},{"location":"office/01-credentials/#reference","title":"Reference","text":""},{"location":"office/clickup/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/clickup/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"<pre><code># changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n\n</code></pre>"},{"location":"office/clickup/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/clickup/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/clickup/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"<pre><code># Budget.js\n# line number: 104\n\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/clickup/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p>views/Home/todolist.js</p> <p>line number: 318</p> <pre><code>const onFinish = async (values) =&gt; {\nlet newValues = {\nstartDate: moment(values.startDate),\nprivateUserId: participantFrom,\norganizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\nnormalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\nisToday: 1,\n...values,\n};\n\n# Comment old code\n# await dispatch(addToDoEvent(newValues));\n\n# Structure\n# addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n# finally add this\nawait dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n# Remove this\n// await fetchMoreData();\n\nawait setCalls(false);\nawait setVisit(false);\n};\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/#reducer","title":"Reducer","text":"<p>services/redux/organizer/todoLists/action.js</p> <p>line Number: 69</p> <pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/clickup/redux-actions/","title":"Action","text":""},{"location":"office/clickup/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/clickup/redux-actions/#actions","title":"ACTIONS","text":"<pre><code># ACTION:  services/redux/Reference/action.js\n# Line number: 180\n\n\n// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        if (response.isSuccess) {\n        message.success(\"Successfully updated company\");\n        dispatch(\n            success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n        );\n        # added here\n        await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/clickup/redux-actions/#reducer","title":"REDUCER","text":"<pre><code># Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/clickup/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/clickup/redux-add-upate/#reducer","title":"REDUCER","text":"<pre><code># services/redux/admin/Tutorial/reducer\n# line number: 73\n# update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n\n</code></pre>"},{"location":"office/documentation/01-doc/","title":"Dashboad","text":""},{"location":"office/documentation/01-doc/#doc-1","title":"Doc 1","text":""},{"location":"office/documentation/02-doc/","title":"02 doc","text":""},{"location":"office/documentation/02-doc/#doc-2","title":"Doc 2","text":""},{"location":"research/tricks/","title":"Tips & Tricks","text":""},{"location":"research/tricks/#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"research/tricks/#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"research/tricks/#git","title":"Git","text":"<pre><code># used to make changes to the last commit\n$ git commit --amend -m \"Add\"\n\n# restore all files to the state of the last commit.\n$ git restore *\n\n# displaying very-verbose information\n$ git branch -vv\n\n# showing each commit as a single line\n$ git log --oneline\n\n# The primary difference is that --pretty=oneline explicitly specifies the format to be \"oneline.\"\n$ git log --pretty=oneline\n\n# Managing remote repositories\n$ git remote -v\n</code></pre> <p>ASAP</p> <pre><code>\n\n# Stashing is helpful when you want to save changes in your working directory without committing them\n# This is useful when you need to switch branches or perform other operations without committing incomplete work.\n$ git stash save \"your message\"\n\n# Lists all stashes\n$ git stash list\n\n# Removes all stashes.\n$ git stash clear\n\n# Applies the changes from the most recent stash and removes it from the stash list.\n$ git stash pop\n\n# Applies the changes from the most recent stash to your working directory.\n$ git stash apply\n\n# Creates a new branch and applies the changes from the most recent stash to it.\n$ git stash branch feature-branch\n\n</code></pre> <p>Top 5</p> <pre><code># allows you to apply a specific commit from one branch onto another. This is useful when you want to selectively bring changes from one branch to another without merging the entire branch.\n$ git cherry-pick &lt;commit&gt;\n</code></pre>"},{"location":"research/tricks/#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"research/tricks/#deployment","title":"Deployment","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;project-name&gt;/mkdocs.yml --remote-branch &lt;branch-name&gt;\n</code></pre>"},{"location":"research/tricks/#reference","title":"Reference","text":"<ul> <li>git log graph</li> <li>pretty graph dog</li> <li> <p>Git Bisect | How to use Git Bisect: video</p> </li> <li> <p>mkdocs plugins</p> </li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""}]}