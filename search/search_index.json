{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> Let's collaborate and turn visions into reality! <ul> <li>Front-End Expert: Three years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul> <p>TS and Testing is non-negotiable for dev now.</p> <pre><code>const testCount = useRef(0);\nconst renderCount = useRef(0);\nrenderCount.current += 1;\nconsole.log(\"Component Render count:\", renderCount.current);\n</code></pre> <pre><code># Open the app.ts file and use the Ctrl+I keyboard shortcut to bring up editor inline chat.\n\nCtrl + I\n</code></pre> <ul> <li>Getting started with Copilot Chat in VS Code</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"#antd-dashboard-preview","title":"ANTD Dashboard PREVIEW","text":""},{"location":"#share-workspace-in-vscode","title":"Share workspace in vscode","text":".gitignore<pre><code>.vscode/*\n!.vscode/settings.json\n!.vscode/extensions.json\n</code></pre> <p>To share workspace and VS Code settings for other developers in a React repository, you can use a combination of <code>settings.json</code>, <code>.vscode</code> folder, and perhaps some configuration files like <code>.editorconfig</code> or <code>.eslint.json</code> to standardize your development environment across your team. Here's a step-by-step guide:</p> <ol> <li> <p>Create a <code>.vscode</code> folder</p> <p>In the root of your React repository, create a <code>.vscode</code> folder. This folder will contain project-specific settings that can be shared with your team.</p> <pre><code>/your-project\n\u251c\u2500\u2500 .vscode/\n\u2514\u2500\u2500 ...\n</code></pre> </li> <li> <p>Create or modify <code>settings.json</code></p> <p>Inside the <code>.vscode</code> folder, create a <code>settings.json</code> file. This file will hold VS Code settings that should be shared with all developers. Here are some common settings you might want to include:</p> <pre><code>// .vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"eslint.alwaysShowStatus\": true,\n  \"editor.tabSize\": 2,\n  \"editor.insertSpaces\": true,\n  \"files.autoSave\": \"onWindowChange\",\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\", // Assuming you're using Prettier\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ],\n  \"prettier.requireConfig\": true\n}\n</code></pre> </li> <li> <p>Share extensions via <code>extensions.json</code></p> <p>If you want to recommend extensions for all developers working on this project (e.g., ESLint, Prettier, etc.), you can create an <code>extensions.json</code> file inside the <code>.vscode</code> folder as well.</p> <pre><code>// .vscode/extensions.json\n{\n  \"recommendations\": [\n    \"dbaeumer.vscode-eslint\",\n    \"esbenp.prettier-vscode\",\n    \"graphql.vscode-graphql\",\n    \"formulahendry.auto-rename-tag\"\n  ]\n}\n</code></pre> <p>This ensures that other developers working on the project are prompted to install the recommended extensions.</p> </li> </ol> <p>Share ESLint and Prettier configs (optional but recommended)</p> <p>For further consistency across team members, you should also share ESLint and Prettier configurations in your repository. If your project doesn't already include them, you can set up:</p> <ul> <li>ESLint: Create a <code>.eslintrc.js</code> file or <code>.eslint.json</code>.</li> <li>Prettier: Add a <code>.prettierrc</code> or <code>.prettierconfig</code> file.</li> </ul> .eslintrc.js.prettierrc <pre><code>module.exports = {\n    extends: [\n        'eslint:recommended',\n        'plugin:react/recommended',\n        'plugin:prettier/recommended',\n    ],\n    parserOptions: {\n        ecmaVersion: 2020,\n        sourceType: 'module',\n    },\n    rules: {\n        'react/prop-types': 'off',\n        'prettier/prettier': ['error'],\n    },\n};\n</code></pre> <pre><code>{\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"all\",\n    \"tabWidth\": 2\n}\n</code></pre> <p>By including these configurations in the repository, all developers will have the same code style and linting rules enforced.</p> <p>Final Structure Example:</p> <pre><code>/your-project\n  \u251c\u2500\u2500 .vscode/\n  \u2502   \u251c\u2500\u2500 settings.json\n  \u2502   \u2514\u2500\u2500 extensions.json\n  \u251c\u2500\u2500 .editorconfig\n  \u251c\u2500\u2500 .eslintrc.js\n  \u251c\u2500\u2500 .prettierrc\n  \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"#host-on-network","title":"HOST ON NETWORK","text":"<pre><code>pnpm run dev --host 0.0.0.0\n</code></pre>"},{"location":"#understanding-the-100vh-issue-on-mobile-browsers-why-it-doesnt-work-as-expected-and-how-to-fix-it","title":"Understanding the <code>100vh</code> Issue on Mobile Browsers: Why It Doesn't Work as Expected and How to Fix It","text":"<p>The issue with using <code>100vh</code> on mobile browsers lies in how mobile browsers handle the viewport height, especially when dynamic UI elements like the address bar, toolbars, or tabs appear and disappear.</p> Here's a step-by-step explanation of the problem <ol> <li> <p>What is 100vh?</p> <ul> <li><code>100vh</code> refers to 100% of the viewport height. It's a CSS unit that means \"the full height of the screen or browser window.\"</li> </ul> </li> <li> <p>How mobile browsers handle the viewport:</p> <ul> <li>On desktop browsers, <code>100vh</code> simply means the visible part of the browser window (the area that excludes the window border, scrollbars, etc.).</li> <li> <p>On mobile browsers, the viewport height (<code>100vh</code>) is calculated based on the entire height of the browser window, including any space taken up by UI elements like:</p> <ul> <li>The address bar (the URL bar at the top of the screen)</li> <li>The browser toolbar</li> <li>The tabs bar</li> </ul> </li> </ul> <p>The mobile browser will initially consider the height of the screen as 100vh to include these UI elements.</p> </li> <li> <p>Dynamic UI Elements in Mobile Browsers:</p> <ul> <li>On mobile browsers, the address bar and toolbar often hide or show as you scroll up or down the page. This behavior is common on browsers like Safari (iOS) and Chrome (Android).</li> <li>When you first load a page on mobile, the address bar is usually visible, and it takes up space, making the 100vh taller than the actual visible area.</li> </ul> </li> <li> <p>Problem with 100vh:</p> <ul> <li>Initial Load: When a page first loads, the browser will measure the 100vh including the address bar (which is visible at the top). As a result, the height is larger than the visible area of the screen.<ul> <li>Example: The browser will try to display your element at 100vh, but the visible height of the screen is less because the address bar is taking up space at the top.</li> </ul> </li> <li>After Scrolling: When you scroll, the address bar or toolbar may hide or shrink, and the visible height of the screen increases. But, 100vh does not automatically adjust; it still considers the initial calculation, causing the page to look like it has extra space at the bottom or the content might overflow the screen.</li> </ul> </li> <li> <p>Example:</p> <p>Imagine a simple page with a div that has height: 100vh.</p> <ul> <li> <p>On a mobile device:</p> <ul> <li>When the page loads, the height is measured including the address bar at the top of the screen.</li> <li>The <code>div</code> is shown taller than the actual visible area because of the address bar.</li> <li>If you scroll down, the address bar hides, and the height of the screen increases, but the <code>div</code> height still doesn\u2019t adjust, leaving extra space at the bottom.</li> </ul> </li> </ul> </li> </ol> <p>How Does This Affect Your Layout?</p> <ul> <li>Overflow Issues: Your layout may overflow, causing unwanted scrolling or hidden content, since the 100vh height is calculated including the hidden browser UI.</li> <li>Visible Space Mismatch: The <code>div</code> with <code>height: 100vh</code> might look taller than the actual visible area on initial load, and after scrolling, there may be excess space at the bottom.</li> </ul> <p>Solution</p> <p>How to Fix This:</p> <p>You can solve this problem by using a dynamic height calculation (using JavaScript) that measures the actual visible height excluding the address bar and other UI elements.</p> <p>Here\u2019s how you can handle it:</p> <ol> <li> <p>Dynamically Adjust Height with JavaScript:</p> <ul> <li>Using JavaScript, you can calculate the actual visible height of the screen and apply that dynamically to your element.</li> </ul> </li> <li> <p>Use <code>100%</code> on Parent Elements:</p> <ul> <li>Another approach is to set height: <code>100%</code> on the parent elements (<code>html</code>, <code>body</code>, etc.) to ensure a consistent height across devices.</li> </ul> </li> </ol> In Summary <p>The issue with <code>100vh</code> on mobile browsers arises from how the viewport height is calculated, especially considering dynamic UI elements like the address bar and toolbar. On mobile, <code>100vh</code> includes these UI elements, causing the element to appear too tall initially, and after scrolling, it may leave extra space at the bottom. Using JavaScript to dynamically calculate the actual visible height can solve this problem.</p>"},{"location":"#display-different-title-on-development-mode-in-react","title":"Display Different title on <code>development</code> mode in react","text":"index.htmlApp.jsx <pre><code>&lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Bank App&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"root\"&gt;&lt;/div&gt;\n        &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { ConfigProvider } from \"antd\";\nimport { store, persistor } from \"@shared/store/store\";\nimport { lightTheme } from \"@shared/utils/theme\";\nimport ErrorBoundaryWrapper from \"@shared/components/ErrorBoundary/ErrorBoundaryWrapper.jsx\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport logger from \"@shared/utils/logger\";\n\nimport App from \"./App.jsx\";\nimport \"./shared/styles/main.scss\";\n\nasync function enableMocking() {\n    if (CONFIG.MODE !== \"development\") {\n        return;\n    }\n\n    const { worker } = await import(\"./mocks/browser\");\n\n    return worker.start();\n    }\n\n    if (import.meta.env.MODE === \"development\") {\n    document.title = \"\ud83d\udea7 Bank App\";\n    }\n\n    enableMocking().then(() =&gt; {\n    createRoot(document.getElementById(\"root\")).render(\n        &lt;StrictMode&gt;\n            &lt;Provider store={store}&gt;\n                &lt;PersistGate loading={null} persistor={persistor}&gt;\n                    &lt;ConfigProvider theme={lightTheme}&gt;\n                        &lt;ErrorBoundaryWrapper&gt;\n                            &lt;App /&gt;\n                        &lt;/ErrorBoundaryWrapper&gt;\n                    &lt;/ConfigProvider&gt;\n                &lt;/PersistGate&gt;\n            &lt;/Provider&gt;\n        &lt;/StrictMode&gt;\n    );\n});\n</code></pre>"},{"location":"#football-highlights","title":"Football Highlights","text":"<ul> <li>Hoofoot.com</li> <li>vipbox.lc</li> </ul>"},{"location":"#jsdocs","title":"JSDocs","text":""},{"location":"#youtube","title":"YOUTUBE","text":""},{"location":"#general","title":"GENERAL","text":"<p>MUSCLE GROWTH</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"#javascript","title":"JavaScript","text":""},{"location":"#react","title":"REACT","text":"<p>IMP</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"#api","title":"API","text":""},{"location":"#architect","title":"ARCHITECT","text":""},{"location":"#vvip-you-cant-ignore-this","title":"VVIP || YOU CANT IGNORE THIS","text":"<p>Here's a memory trick and some code examples to help you remember the 7 falsy values in JavaScript.</p> <p>The 7 falsy values in JavaScript are:</p> <ol> <li><code>false</code> \u2013 The Boolean value <code>false</code>.</li> <li><code>0</code> \u2013 The number zero.</li> <li><code>-0</code> \u2013 Negative zero (distinct from <code>0</code>, but also falsy).</li> <li><code>0n</code> \u2013 The BigInt version of zero.</li> <li><code>\"\"</code> \u2013 An empty string (also <code>''</code> or ````).</li> <li><code>null</code> \u2013 Represents the intentional absence of any object value.</li> <li><code>undefined</code> \u2013 A variable that hasn't been assigned a value.</li> <li><code>NaN</code> \u2013 Stands for \"Not-a-Number\", result of invalid math operations.</li> </ol> <p>\ud83d\udd0e Technically, that\u2019s 8 values \u2014 <code>-0</code> and <code>0</code> are distinct but often grouped together. In most cases, people refer to 7 categories of falsy values.</p> <p>Let me know if you\u2019d like a memory trick or code examples for these.</p> <p>\ud83e\udde0 Memory Trick: \"<code>0 FUNNSY</code>\"</p> <p>Think of the phrase \"<code>0 FUNNSY</code>\" \u2014 it's not a real word, but it helps you recall each falsy value:</p> Letter Represents Value 0 <code>0</code> The number zero. F <code>false</code> Boolean false. U <code>undefined</code> Variable not assigned. N <code>null</code> No object value. N <code>NaN</code> Not-a-Number. S <code>\"\"</code> (String) Empty string. Y <code>0n</code> (bYgInt) BigInt zero. \u2705 Code Examples <pre><code>const falsyValues = [false, 0, -0, 0n, \"\", null, undefined, NaN];\n\nfalsyValues.forEach((value) =&gt; {\nif (!value) {\n    console.log(`${String(value)} is falsy`);\n}\n});\n</code></pre> <p>Output:</p> <pre><code>false is falsy\n0 is falsy\n0 is falsy\n0 is falsy\nis falsy\nnull is falsy\nundefined is falsy\nNaN is falsy\n</code></pre> <p>Here\u2019s a quick demo of each falsy value in action:</p> <p>\ud83d\udd04 Why This Matters</p> <p>These values are used in many places like:</p> <pre><code>if (userInput) {\n  // Will only run if userInput is truthy\n}\n</code></pre> <p>Knowing what\u2019s falsy helps you avoid bugs when checking if a variable \u201chas a value.\u201d</p>"},{"location":"#never-miss-this-react","title":"NEVER MISS THIS REACT","text":"REACT BASIC 101 <p>These are fundamental concepts in React but can be a bit confusing because the terminology sounds similar. Let's break down the differences between React Elements, React Components, and React Component Instances, with simple definitions and examples.</p> <p>\ud83d\udce6 1. React Elements</p> <p>A React Element is a plain JavaScript object that describes what you want to see on the screen.</p> <ul> <li>It\u2019s the output of calling <code>React.createElement(...)</code> or using JSX like <code>&lt;div&gt;Hello&lt;/div&gt;</code>.</li> <li>React elements are immutable and lightweight.</li> <li>They describe the structure, not behavior.</li> </ul> <pre><code>const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;\n// or equivalently:\nconst element = React.createElement('h1', null, 'Hello, world!');\n</code></pre> <p>\ud83d\udc49 This does not render anything by itself. It\u2019s just a description of what should be rendered.</p> <p>\ud83e\uddf1 2. React Components</p> <p>A React Component is a function or class that returns React Elements.</p> <ul> <li>Components are reusable building blocks.</li> <li>They can have logic, state, and lifecycle methods (in class components) or hooks (in function components).</li> </ul> <p>Function Component Example:</p> <pre><code>function Welcome(props) {\n    return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n</code></pre> <p>Class Component Example:</p> <pre><code>class Welcome extends React.Component {\n    render() {\n        return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n    }\n}\n</code></pre> <p>\ud83d\udc49 When you use <code>&lt;Welcome name=\"Alice\" /&gt;</code>, React calls the component and expects it to return a React Element.</p> <p>\ud83e\uddcd\u200d\u2642\ufe0f 3. React Component Instances</p> <p>A component instance is what React creates when it renders a component into the DOM.</p> <ul> <li>For function components, the instance is just the execution of the function.</li> <li>For class components, React creates an instance of the class, and this instance persists between renders.</li> <li>Component instances can hold state, trigger side effects, and interact with the DOM via refs or lifecycle methods.</li> </ul> <p>Example with a class:</p> <pre><code>class Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { count: 0 };\n    }\n\n    render() {\n        return &lt;button&gt;{this.state.count}&lt;/button&gt;;\n    }\n}\n</code></pre> <ul> <li> <p>When <code>&lt;Counter /&gt;</code> is rendered, React creates an instance of <code>Counter</code>, which:</p> <ul> <li>Calls the <code>constructor</code></li> <li>Tracks <code>this.state</code></li> <li>Calls <code>render()</code> on re-renders</li> </ul> </li> </ul> <p>\ud83d\udc49 This is the component instance \u2014 it\u2019s what holds the state and lifecycle.</p> <p>\u2696\ufe0f Quick Summary Table</p> Term Is it Code? What is it? Example Code React Element \u2705 Description of what to render <code>&lt;div&gt;Hello&lt;/div&gt;</code> React Component \u2705 Function or class that returns elements <code>function MyComponent() { ... }</code> React Component Instance \ud83d\udeab (Created by React) Live object created during rendering Instance of <code>MyComponent</code> at runtime <p>\ud83d\udccc In Short:</p> <ul> <li>React Element \u2192 a plain object describing the UI.</li> <li>React Component \u2192 a function or class that returns elements.</li> <li>Component Instance \u2192 what React creates from a component to manage state/lifecycle.</li> </ul>"},{"location":"#statex","title":"StateX","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":""},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/","title":"\ud83e\udd14 Why Returning 201 on a GET API is a Bad Idea (Especially in RTK Query)","text":"","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query","title":"\ud83e\udd14 Why Returning 201 on a GET API is a Bad Idea (Especially in RTK Query)","text":"<p>When working with modern frontend tools like Redux Toolkit Query (RTK Query), it's important to follow RESTful API conventions\u2014not just for best practices, but to avoid subtle bugs and unexpected behavior. One such easy-to-miss issue? Returning a <code>201 Created</code> status code from a <code>GET</code> request.</p> <p>Let\u2019s break down why this is a problem, how it affects RTK Query, and what you should do instead.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#quick-recap-http-status-codes","title":"\ud83d\udd0d Quick Recap: HTTP Status Codes","text":"<p>In the world of REST APIs, different status codes signal different things:</p> <p>So far, so good. But here\u2019s where things go wrong...</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#the-problem-get-api-returns-201","title":"\ud83d\udea8 The Problem: GET API Returns 201","text":"<p>A <code>GET</code> request is supposed to be read-only. It retrieves data. It shouldn't create anything, and it definitely shouldn't return a <code>201 Created</code> status.</p> <p>But what happens if it does?</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#how-this-affects-rtk-query","title":"\ud83e\udde9 How This Affects RTK Query","text":"<p>RTK Query is built on top of RESTful assumptions. When you define a query like this:</p> <pre><code>getUser: builder.query({\n  query: (id) =&gt; `users/${id}`,\n}),\n</code></pre> <p>RTK Query expects the <code>GET</code> request to return a <code>200 OK</code>. If it gets a <code>201 Created</code>, a few things might go wrong:</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#1-confusion-between-query-and-mutation","title":"1. Confusion Between Query and Mutation","text":"<p>RTK Query internally treats different status codes differently. <code>201</code> is normally tied to mutations (<code>POST</code>, <code>PUT</code>). If a <code>GET</code> returns <code>201</code>, RTK Query might interpret it as if something was created \u2014 which breaks the mental model.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#2-cache-invalidation-might-fail","title":"2. Cache Invalidation Might Fail","text":"<p>RTK Query uses response metadata (like status codes) to manage caching. If it doesn\u2019t recognize the response as a standard query response, caching, invalidation, and automatic refetching may misbehave.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#3-error-handling-may-trigger","title":"3. Error Handling May Trigger","text":"<p>Depending on how your <code>baseQuery</code> is configured, a <code>201</code> might be treated as an unexpected status. This could cause your query to be flagged as failed, even though the request technically succeeded.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#workarounds-temporary-only","title":"\ud83d\udee0\ufe0f Workarounds (Temporary Only!)","text":"<p>If you absolutely must work with an API that returns <code>201</code> from a <code>GET</code> (say, you\u2019re consuming a legacy or third-party API), you can override RTK Query's validation logic like so:</p> <pre><code>const customBaseQuery = fetchBaseQuery({\n  baseUrl: \"/api\",\n  validateStatus: (response) =&gt;\n    response.status === 200 || response.status === 201,\n});\n</code></pre> <p>This will treat both <code>200</code> and <code>201</code> as valid. But be careful \u2014 this is just a band-aid, not a real fix.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#the-right-solution-fix-the-api","title":"\u2705 The Right Solution: Fix the API","text":"<p>The real solution is simple: make sure your <code>GET</code> endpoints return <code>200 OK</code>, not <code>201 Created</code>.</p> <p>If your <code>GET</code> endpoint is doing something that results in the creation of a resource, that\u2019s a bigger design issue. You should either:</p> <ul> <li>Change it to a <code>POST</code>, if it\u2019s creating something</li> <li>Separate the creation logic from the retrieval logic</li> </ul> <p>Clean API design = happy frontend developers.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/-why-returning-201-on-a-get-api-is-a-bad-idea-especially-in-rtk-query/#final-thoughts","title":"\ud83e\udde0 Final Thoughts","text":"<p>It\u2019s easy to overlook small things like HTTP status codes, but they matter \u2014 especially in modern frontend stacks like RTK Query that rely on them.</p> <p>Returning a <code>201</code> from a <code>GET</code> endpoint breaks REST principles and can lead to caching issues, unexpected behavior, and even outright bugs.</p> <p>So, next time you\u2019re working with APIs, make sure your status codes are telling the right story.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/","title":"Gotchas in RTK Query","text":"","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#gotchas-in-rtk-query","title":"Gotchas in RTK Query","text":"<p>RTK Query is an awesome tool for managing API state in Redux, but like any abstraction, there are some \"gotchas\" or pitfalls that can trip you up if you're not careful \u2014 especially when APIs don\u2019t follow standard conventions.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#common","title":"Common","text":"<p>Here are some of the most common issues developers run into, besides the one you already found (i.e., incorrect status codes like <code>201</code> for <code>GET</code>):</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#1-non-standard-http-status-codes-error-responses","title":"\ud83e\uddf1 1. Non-Standard HTTP Status Codes / Error Responses","text":"<ul> <li>RTK Query expects errors to come with proper HTTP status codes (<code>4xx</code>, <code>5xx</code>) and a body.</li> <li>If your backend returns <code>200</code> OK with an error inside the body, RTK Query won\u2019t treat it as a failure.</li> <li>Similarly, if your errors aren\u2019t consistently structured (e.g. no <code>message</code>, <code>title</code>, or <code>meaningful</code> status), handling them becomes painful.</li> </ul> <p>\u2705 Fix: Make sure all errors return with proper HTTP codes and consistent structure.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#2-missing-cache-tags-or-invalidation","title":"\u267b\ufe0f 2. Missing Cache Tags or Invalidation","text":"<ul> <li> <p>You need to manually tag your queries and mutations for caching/invalidation to work:</p> <pre><code>providesTags: [\"User\"];\ninvalidatesTags: [\"User\"];\n</code></pre> </li> <li> <p>If you forget to do this, mutations won't trigger refetches of relevant queries \u2014 stale data!</p> </li> </ul> <p>\u2705 Fix: Always define <code>providesTags</code> on queries and <code>invalidatesTags</code> on mutations.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#3-forgetting-refetchonmountorargchange","title":"\ud83d\udd04 3. Forgetting <code>refetchOnMountOrArgChange</code>","text":"<ul> <li> <p>By default, RTK Query only fetches once per component mount and caches it.</p> </li> <li> <p>If you want it to refetch when args change, or when the component remounts, you need:</p> <pre><code>useMyQuery(arg, {\n  refetchOnMountOrArgChange: true,\n});\n</code></pre> </li> </ul> <p>\u2705 Fix: Add this option when you want more dynamic or up-to-date data.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#4-stale-or-unused-data-not-being-cleared","title":"\ud83d\udd50 4. Stale or Unused Data Not Being Cleared","text":"<ul> <li>RTK Query caches data by default for 60 seconds.</li> <li> <p>If you want immediate cleanup when a component unmounts:</p> <pre><code>keepUnusedDataFor: 0;\n</code></pre> </li> </ul> <p>\u2705 Use wisely \u2014 setting it too low can cause excessive re-fetching.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#5-using-mutations-as-queries-or-vice-versa","title":"\ud83c\udfa3 5. Using Mutations as Queries (or vice versa)","text":"<ul> <li> <p>Queries = read, Mutations = write.</p> </li> <li> <p>Sometimes devs use a mutation to trigger a data fetch just to force a refetch. This breaks RTK Query's mental model and can mess with cache behavior.</p> </li> </ul> <p>\u2705 Use <code>refetch()</code> or <code>invalidateTags()</code> instead of using mutations for data fetching.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#6-not-handling-onquerystarted-properly","title":"\ud83d\udd01 6. Not Handling <code>onQueryStarted</code> Properly","text":"<p>This hook is powerful (for optimistic updates, side effects, etc.) but many devs:</p> <ul> <li>Forget to <code>await queryFulfilled</code></li> <li>Don't wrap it in a <code>try/catch</code>, leading to silent failures</li> </ul> <p>\u2705 Always handle it like this:</p> <pre><code>onQueryStarted: async (arg, { queryFulfilled }) =&gt; {\n  try {\n    await queryFulfilled;\n  } catch (error) {\n    // handle error here\n  }\n};\n</code></pre>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#7-incorrect-use-of-selectfromresult","title":"\ud83e\uddea 7. Incorrect Use of selectFromResult","text":"<ul> <li>This is a powerful performance optimization to derive data from cache.</li> <li>But misusing it (e.g. not memoizing selectors, or extracting deeply nested props) can lead to unnecessary re-renders or stale UI.</li> </ul> <p>\u2705 Fix: Memoize and only select what's needed.</p>","tags":["RTK"]},{"location":"blog/2025/04/28/gotchas-in-rtk-query/#8-using-axiosfirebase-without-adapting-the-base-query","title":"\ud83e\udde8 8. Using Axios/Firebase Without Adapting the Base Query","text":"<ul> <li>RTK Query is built for <code>fetchBaseQuery</code> but can work with anything.</li> <li>If you're using <code>axios</code>, make sure your baseQuery converts errors and responses to RTK's expected shape.</li> </ul> <p>\u2705 Final Advice</p> <p>To avoid these issues:</p> <ul> <li>Stick to RESTful conventions: proper status codes, consistent responses</li> <li>Read RTK Query\u2019s caching and invalidation docs</li> <li>Log and monitor query state (<code>isLoading</code>, <code>isError</code>, <code>data</code>) \u2014 it helps catch issues early</li> </ul>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/","title":"Feature-Based Folder Structure (React + TypeScript Dashboard)","text":"","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#feature-based-folder-structure-react-typescript-dashboard","title":"Feature-Based Folder Structure (React + TypeScript Dashboard)","text":"<p>In a feature-based structure, each feature (e.g., <code>dashboard</code>, <code>widgets</code>, <code>auth</code>) is a self-contained module with its own <code>components</code>, <code>styles</code>, <code>types</code>, <code>hooks</code>, and <code>utilities</code>. Shared resources (e.g., common <code>components</code>, global <code>styles</code>) are kept in a separate shared or common folder. This structure promotes modularity and makes it easier to navigate as your dashboard grows.</p> Folder StructureExplanationConfiguration Files <pre><code>/personal-dashboard\n\u251c\u2500\u2500 /public\n\u2502   \u251c\u2500\u2500 index.html          # Main HTML file\n\u2502   \u251c\u2500\u2500 favicon.ico         # Favicon\n\u2502   \u2514\u2500\u2500 manifest.json       # Web app manifest\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /features           # Feature-specific modules\n\u2502   \u2502   \u251c\u2500\u2500 /dashboard      # Dashboard overview feature\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components  # Feature-specific components\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Dashboard.tsx  # Main dashboard component\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 DashboardHeader.tsx  # Dashboard header\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 styles      # Feature-specific styles\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 dashboard.css  # Dashboard-specific CSS\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types       # Feature-specific TypeScript types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Interfaces (e.g., DashboardData)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks       # Feature-specific hooks\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 useDashboardData.ts  # Hook for fetching dashboard data\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api         # Feature-specific API calls\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 dashboardApi.ts  # API functions for dashboard\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file to export feature\n\u2502   \u2502   \u251c\u2500\u2500 /widgets        # Widgets feature (e.g., charts, cards)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Widget.tsx  # Widget component\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 WidgetSettings.tsx  # Widget settings panel\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 styles\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 widget.css  # Widget-specific styles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Widget-related types\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 useWidgetData.ts  # Hook for widget data\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 widgetApi.ts  # Widget API calls\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file\n\u2502   \u2502   \u251c\u2500\u2500 /auth           # Authentication feature\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Login.tsx  # Login form\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 LogoutButton.tsx  # Logout button\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 context     # Auth context for user state\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 AuthContext.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Auth-related types\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 authApi.ts  # Auth API calls\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file\n\u2502   \u251c\u2500\u2500 /shared             # Shared resources across features\n\u2502   \u2502   \u251c\u2500\u2500 components      # Reusable components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.tsx  # Shared button component\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Card.tsx    # Shared card component\n\u2502   \u2502   \u251c\u2500\u2500 styles          # Shared styles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 globals.css  # Global CSS (resets, typography)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tailwind.css  # Tailwind CSS output\n\u2502   \u2502   \u251c\u2500\u2500 utils           # Shared utilities\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 formatters.ts  # Date, currency formatters\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 http.ts     # HTTP client (e.g., Axios instance)\n\u2502   \u2502   \u251c\u2500\u2500 types           # Shared TypeScript types\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Common interfaces\n\u2502   \u2502   \u2514\u2500\u2500 hooks           # Shared hooks\n\u2502   \u2502       \u2514\u2500\u2500 useMediaQuery.ts  # Example shared hook\n\u2502   \u251c\u2500\u2500 /routes             # Route definitions\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx       # React Router configuration\n\u2502   \u251c\u2500\u2500 App.tsx             # Main App component\n\u2502   \u251c\u2500\u2500 index.tsx           # ReactDOM render entry\n\u2502   \u2514\u2500\u2500 main.tsx            # Alternative entry for Pyodide\n\u251c\u2500\u2500 package.json            # Project dependencies and scripts\n\u251c\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u251c\u2500\u2500 tailwind.config.js      # Tailwind CSS configuration (if using)\n\u2514\u2500\u2500 README.md               # Project documentation\n</code></pre> <ul> <li><code>/public</code>: Static files (e.g., <code>index.html</code>, favicon) served as-is.</li> <li> <p><code>/src</code>: Main source code directory.</p> <ul> <li> <p><code>/features</code>: Contains feature-specific modules. Each feature has:</p> <ul> <li><code>components</code>: UI components specific to the feature (e.g., <code>Widget.tsx</code> for the widgets feature).</li> <li><code>styles</code>: Feature-specific CSS or Tailwind classes.</li> <li><code>types</code>: TypeScript interfaces/types for the feature (e.g., <code>WidgetProps</code>).</li> <li><code>hooks</code>: Custom hooks for feature logic (e.g., useWidgetData).</li> <li><code>api</code>: API calls related to the feature (e.g., fetching widget data).</li> <li><code>index.ts</code>: Barrel file to export all feature-related modules for cleaner imports.</li> </ul> </li> <li> <p><code>/shared</code>: Resources used across multiple features:</p> <ul> <li><code>components</code>: Generic components like <code>Button</code> or <code>Card</code>.</li> <li><code>styles</code>: Global CSS and Tailwind output.</li> <li><code>utils</code>: Shared utilities (e.g., date formatting, HTTP client).</li> <li><code>types</code>: Common TypeScript types.</li> <li><code>hooks</code>: Reusable hooks (e.g., <code>useMediaQuery</code> for responsive design).</li> </ul> </li> <li> <p><code>/routes</code>: Route definitions using React Router.</p> </li> <li> <p><code>App.tsx</code>: Root component for layout and routing.</p> </li> <li> <p><code>index.tsx</code>: Entry point for rendering the app.</p> </li> <li> <p><code>main.tsx</code>: Alternative entry for Pyodide (browser-based execution).</p> </li> </ul> </li> </ul> <ul> <li><code>package.json</code>: Manages dependencies.</li> <li><code>tsconfig.json</code>: Configures TypeScript.</li> <li><code>tailwind.config.js</code>: Tailwind CSS setup (optional).</li> <li><code>README.md</code>: Project documentation.</li> </ul>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#typescript-for-beginners","title":"TypeScript for Beginners","text":"<p>As a TypeScript newbie, focus on these concepts from the example:</p> <ul> <li>Interfaces: <code>WidgetData</code> defines the shape of widget data (e.g., <code>id: string</code>). Used in components and hooks for type safety.</li> <li>React.FC: Used in <code>Widget</code> to type the component and its props (<code>WidgetProps</code>).</li> <li>Hooks with Types: <code>useWidgetData</code> uses TypeScript to type the state (<code>WidgetData | null</code>) and async functions (<code>Promise&lt;WidgetData&gt;</code>).</li> <li>Barrel Files: <code>index.ts</code> simplifies imports (e.g., <code>import { Widget } from 'features/widgets'</code>).1.</li> </ul>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#tips-for-maintaining-a-feature-based-structure","title":"Tips for Maintaining a Feature-Based Structure","text":"<ol> <li>Keep Features Independent: Each feature should have minimal dependencies on others, using <code>/shared</code> for common utilities.</li> <li>Use Barrel Files: Export all feature modules in <code>index.ts</code> for cleaner imports.</li> <li>Organize by Feature Size: For small features, you might skip subfolders like <code>hooks</code> or <code>api</code> and keep files directly in the feature folder.</li> <li>Absolute Imports: Configure <code>tsconfig.json</code> to use paths like <code>features/widgets</code> (add <code>\"baseUrl\": \"src\"</code> and <code>\"paths\"</code> in <code>tsconfig.json</code>).</li> <li>Leverage Tailwind: Use Tailwind CSS for styling within features to reduce CSS files (included in the example).</li> <li>Testing: Add a <code>tests</code> folder per feature (e.g., <code>/features/widgets/tests/Widget.test.tsx</code>) for unit tests.</li> </ol>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#folder-structure","title":"Folder Structure","text":"<pre><code>/personal-dashboard\n\u251c\u2500\u2500 /public\n\u2502   \u251c\u2500\u2500 index.html          # Main HTML file\n\u2502   \u251c\u2500\u2500 favicon.ico         # Favicon\n\u2502   \u2514\u2500\u2500 manifest.json       # Web app manifest\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /features           # Feature-specific modules\n\u2502   \u2502   \u251c\u2500\u2500 /dashboard      # Dashboard feature (includes main dashboard page)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components  # Feature-specific components, including pages\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Dashboard.tsx  # Main dashboard page component\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 DashboardHeader.tsx  # Sub-component for dashboard\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 styles      # Feature-specific styles\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 dashboard.css  # Dashboard-specific CSS\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types       # Feature-specific TypeScript types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Interfaces (e.g., DashboardData)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks       # Feature-specific hooks\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 useDashboardData.ts  # Hook for dashboard data\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api         # Feature-specific API calls\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 dashboardApi.ts  # API functions for dashboard\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file to export feature\n\u2502   \u2502   \u251c\u2500\u2500 /widgets        # Widgets feature (e.g., charts, cards)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Widget.tsx  # Widget component\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 WidgetSettings.tsx  # Widget settings panel\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 styles\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 widget.css  # Widget-specific styles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Widget-related types\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 hooks\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 useWidgetData.ts  # Hook for widget data\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 widgetApi.ts  # Widget API calls\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file\n\u2502   \u2502   \u251c\u2500\u2500 /auth           # Authentication feature (includes login page)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 components\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 Login.tsx  # Login page component\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 LogoutButton.tsx  # Logout button component\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 context     # Auth context for user state\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 AuthContext.ts\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 types\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts  # Auth-related types\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 authApi.ts  # Auth API calls\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Barrel file\n\u2502   \u251c\u2500\u2500 /shared             # Shared resources across features\n\u2502   \u2502   \u251c\u2500\u2500 components      # Reusable components\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Button.tsx  # Shared button component\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Card.tsx    # Shared card component\n\u2502   \u2502   \u251c\u2500\u2500 styles          # Shared styles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 globals.css  # Global CSS (resets, typography)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tailwind.css  # Tailwind CSS output\n\u2502   \u2502   \u251c\u2500\u2500 utils           # Shared utilities\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 formatters.ts  # Date, currency formatters\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 http.ts     # HTTP client (e.g., Axios instance)\n\u2502   \u2502   \u251c\u2500\u2500 types           # Shared TypeScript types\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 index.ts    # Common interfaces\n\u2502   \u2502   \u2514\u2500\u2500 hooks           # Shared hooks\n\u2502   \u2502       \u2514\u2500\u2500 useMediaQuery.ts  # Example shared hook\n\u2502   \u251c\u2500\u2500 /routes             # Route definitions\n\u2502   \u2502   \u2514\u2500\u2500 index.tsx       # React Router configuration\n\u2502   \u251c\u2500\u2500 App.tsx             # Main App component\n\u2502   \u251c\u2500\u2500 index.tsx           # ReactDOM render entry\n\u2502   \u2514\u2500\u2500 main.tsx            # Alternative entry for Pyodide\n\u251c\u2500\u2500 package.json            # Project dependencies and scripts\n\u251c\u2500\u2500 tsconfig.json           # TypeScript configuration\n\u251c\u2500\u2500 tailwind.config.js      # Tailwind CSS configuration (if using)\n\u2514\u2500\u2500 README.md               # Project documentation\n</code></pre>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#how-pages-are-handled","title":"How Pages Are Handled","text":"<ul> <li> <p>Page-Level Components in Features: Instead of a <code>/pages</code> folder, components that represent full pages are placed in the components subfolder of their respective feature. For example:</p> <ul> <li><code>Dashboard.tsx</code> in <code>/features/dashboard/components</code> is the main dashboard page.</li> <li><code>Login.tsx</code> in <code>/features/auth/components</code> is the login page.</li> </ul> </li> <li> <p>Routing: The <code>/routes</code> folder defines how these page-level components map to URLs using React Router. For instance, <code>/dashboard</code> routes to <code>Dashboard.tsx</code>.</p> </li> <li>Why No <code>/pages</code> Folder?: In a feature-based structure, grouping page components with their feature keeps related logic together. A separate <code>/pages</code> folder would fragment the feature\u2019s codebase, reducing modularity.</li> </ul>","tags":["RTK"]},{"location":"blog/2025/04/28/feature-based-folder-structure-react--typescript-dashboard/#installation","title":"Installation","text":"bash<pre><code>npm install react react-dom antd @ant-design/icons react-router-dom\nnpm install --save-dev @types/react @types/react-dom @types/react-router-dom\n</code></pre> <ul> <li>react, react-dom: Required for React apps.</li> <li>antd, @ant-design/icons: For AntD components and icons.</li> <li>react-router-dom: For routing.</li> <li>@types/*: TypeScript type definitions for the above.</li> </ul>","tags":["RTK"]},{"location":"blog/2025/05/08/advanced-react-topics/","title":"Advanced React Topics","text":"","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#advanced-react-topics","title":"Advanced React Topics","text":"<p>Each topic is inspired by current best practices and advanced patterns discussed in the React community.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#1-structuring-react-components-best-practices-for-code-organization","title":"1. Structuring React Components: Best Practices for Code Organization","text":"<p>Explore optimal strategies for structuring React components, including grouping by feature, using atomic design principles (atoms, molecules, organisms), and balancing locality with type-based organization. Learn how these approaches improve scalability and maintainability in large codebases</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#2-advanced-react-component-composition","title":"2. Advanced React Component Composition","text":"<p>A deep dive into advanced composition patterns: compound components, render props, and the provider pattern. Understand how to build highly reusable and flexible UI components for complex applications.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#3-leveraging-higher-order-components-hocs-and-custom-hooks","title":"3. Leveraging Higher-Order Components (HOCs) and Custom Hooks","text":"<p>Master the art of code reuse in React by creating Higher-Order Components and custom hooks. See real-world examples of encapsulating shared logic, enhancing components, and organizing reusable utilities for large teams.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#4-feature-based-project-structure-in-react","title":"4. Feature-Based Project Structure in React","text":"<p>Learn how to organize your React project by feature or domain instead of type, making it easier to scale, collaborate, and maintain. See folder structures and naming conventions used in enterprise-level apps.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#5-separating-business-logic-from-ui-in-react","title":"5. Separating Business Logic from UI in React","text":"<p>Discover the benefits of keeping business logic (API calls, state management) separate from presentation components. Explore container/presentational component patterns and how to structure services, hooks, and API layers.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#6-best-practices-for-state-management-in-large-react-applications","title":"6. Best Practices for State Management in Large React Applications","text":"<p>Compare Context API, Redux, Zustand, and other state management solutions. Learn when to use each, how to structure your state, and how to avoid common pitfalls in large-scale apps.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#7-organizing-and-testing-custom-hooks","title":"7. Organizing and Testing Custom Hooks","text":"<p>Guidelines for creating a dedicated hooks/ folder, naming conventions, and strategies for testing and reusing hooks across your codebase. Includes examples of hooks for data fetching, authentication, and more.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#8-react-folder-structure-patterns-for-enterprise-projects","title":"8. React Folder Structure Patterns for Enterprise Projects","text":"<p>A practical guide to folder structures: feature-based, domain-driven, and scalable hierarchies. See pros and cons of each approach, with diagrams and code samples for real-world use.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#9-environment-configuration-and-security-in-react","title":"9. Environment Configuration and Security in React","text":"<p>How to use environment variables for configuration, manage sensitive data, and set up different environments (development, staging, production) securely in React projects.</p>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#10-performance-optimization-techniques-for-react-apps","title":"10. Performance Optimization Techniques for React Apps","text":"<p>Advanced tips for optimizing rendering, code-splitting, lazy loading, and memoization. Learn how to profile your app and address performance bottlenecks in large-scale React projects.</p> <p>Would you like a full sample blog post on any of these topics, or a guide on how to implement one of these best practices?</p> Blog Title for Senior React Dev <p>Here are blog title ideas for senior React developers, inspired by advanced organization, architecture, and best practices:</p> <ul> <li> <p>Mastering Component Organization: Advanced Patterns for Scalable React Apps</p> </li> <li> <p>Atomic Design in Practice: Structuring React Components for Reusability</p> </li> <li> <p>Feature-Based Folder Structures: Scaling React Projects with Confidence</p> </li> <li> <p>Separation of Concerns in React: Keeping Logic and UI Cleanly Divided</p> </li> <li> <p>Reusable Logic in React: Hooks, HOCs, and Render Props Explained</p> </li> <li> <p>Optimizing State Management in Large React Applications</p> </li> <li> <p>Testing Strategies for Custom Hooks and Complex Components</p> </li> <li> <p>Performance Optimization Techniques for Enterprise React Projects</p> </li> <li> <p>Environment Configuration and Security Best Practices in React</p> </li> <li> <p>Building Modular, Maintainable Blogs with React: A Real-World Guide</p> </li> <li> <p>From Monolith to Modular: Refactoring Large React Codebases</p> </li> <li> <p>Routing and Navigation Patterns for Complex React Applications</p> </li> <li> <p>Managing Page Metadata and SEO in React Apps</p> </li> </ul>","tags":["React"]},{"location":"blog/2025/05/08/advanced-react-topics/#reference","title":"Reference","text":"","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/","title":"Separating Business Logic from UI in React: An In-Depth Guide","text":"","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#separating-business-logic-from-ui-in-react-an-in-depth-guide","title":"Separating Business Logic from UI in React: An In-Depth Guide","text":"<p>Separation of concerns is a foundational principle in software engineering-and in React, it\u2019s especially crucial for building robust, maintainable, and scalable applications. By decoupling business logic from UI, you make your codebase easier to test, reuse, and extend as your application grows.</p> <p> </p>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#what-is-separation-of-concerns","title":"What Is Separation of Concerns?","text":"<p>At its core, separation of concerns means dividing your code into distinct sections, each responsible for a specific aspect of functionality. In React, this often involves splitting the user interface (UI) from the business logic (data fetching, state management, calculations, etc.).</p> <ul> <li>UI Components: Focus on rendering visuals and handling user interactions.</li> <li>Business Logic: Handles data manipulation, API calls, and core application rules.</li> </ul>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#why-separate-business-logic-from-ui","title":"Why Separate Business Logic from UI?","text":"<ul> <li>Maintainability: Cleaner, more organized code that\u2019s easier to update and debug.</li> <li>Reusability: Logic can be reused across multiple components, reducing duplication.</li> <li>Testability: Business logic can be tested in isolation, leading to more reliable code.</li> <li>Scalability: Easier to scale and refactor as requirements change.</li> <li>Reduced Coupling: Changes in one area are less likely to break others, making your app more robust.</li> </ul>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#common-patterns-for-separation-in-react","title":"Common Patterns for Separation in React","text":"","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#1-custom-hooks","title":"1. Custom Hooks","text":"<p>Custom hooks are a powerful way to extract and reuse business logic across components.</p> useTodos.js<pre><code>import { useState, useEffect } from \"react\";\n\nexport function useTodos() {\n  const [todos, setTodos] = useState([]);\n  useEffect(() =&gt; {\n    fetch(\"/api/todos\")\n      .then((res) =&gt; res.json())\n      .then(setTodos);\n  }, []);\n  return todos;\n}\n\n// TodoList.js\nimport { useTodos } from \"./useTodos\";\n\nfunction TodoList() {\n  const todos = useTodos();\n  return (\n    &lt;ul&gt;\n      {todos.map((todo) =&gt; (\n        &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Here, the <code>useTodos</code> hook encapsulates the data-fetching logic, while <code>TodoList</code> focuses purely on rendering.</p>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#2-container-and-presentational-components","title":"2. Container and Presentational Components","text":"<ul> <li>Container components handle logic and data fetching.</li> <li>Presentational components focus on displaying data.</li> </ul> TodoContainer.js<pre><code>import TodoList from \"./TodoList\";\nimport { useTodos } from \"./useTodos\";\n\nfunction TodoContainer() {\n  const todos = useTodos();\n  return &lt;TodoList todos={todos} /&gt;;\n}\n\n// TodoList.js\nfunction TodoList({ todos }) {\n  return (\n    &lt;ul&gt;\n      {todos.map((todo) =&gt; (\n        &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>This pattern keeps your UI components simple and focused on presentation.</p>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#3-helper-functions-and-utilities","title":"3. Helper Functions and Utilities","text":"<p>Move pure business logic (like calculations or data formatting) into separate utility files.</p> utils/formatDate.js<pre><code>export function formatDate(date) {\n  return new Date(date).toLocaleDateString();\n}\n\n// In your component\nimport { formatDate } from \"./utils/formatDate\";\n</code></pre> <p>This makes the logic reusable and easy to test[3].</p>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#best-practices","title":"Best Practices","text":"<ul> <li>Single Responsibility Principle: Each component or function should do one thing well.</li> <li>Keep UI and Logic Separate: Use custom hooks, helpers, and container components to decouple concerns.</li> <li>Use Clear Naming and Structure: Name files and functions by their purpose (e.g., <code>useUser</code>, <code>UserProfile</code>).</li> <li>Test Logic in Isolation: Write unit tests for your hooks and helper functions without involving the UI.</li> </ul>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#conclusion","title":"Conclusion","text":"<p>Separating business logic from UI in React isn\u2019t just a best practice-it\u2019s essential for building apps that are easy to maintain, test, and scale. By leveraging patterns like custom hooks, <code>container/presentational</code> components, and utility functions, you\u2019ll keep your codebase clean and your team productive.</p> <p>Want to see real-world examples or learn more about advanced React patterns? Let me know!</p>","tags":["React"]},{"location":"blog/2025/05/08/separating-business-logic-from-ui-in-react-an-in-depth-guide/#reference","title":"Reference","text":"<ul> <li>Separation of concerns in React and React Native.</li> <li>Mastering the Art of Separating UI and Logic in React: A Comprehensive Guid</li> <li>Attention Software Architects: React JS + Best Practices for Separating Logic and Data </li> <li>How To Main Separation of Concerns in React </li> <li>Separations of concerns in react</li> <li>React: Best Practices</li> <li>Separation of Concerns in React</li> <li>Modular, Maintainable Front-end React Code With Separation of Concerns</li> </ul>","tags":["React"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/","title":"Where to Define Variables and Hooks in React Functional Components","text":"","tags":["RTK"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/#where-to-define-variables-and-hooks-in-react-functional-components","title":"Where to Define Variables and Hooks in React Functional Components","text":"<p>When writing React functional components, understanding where to define variables and hooks is crucial for clean, efficient, and bug-free code. Let\u2019s clarify the best practices using examples from Redux, React Router, and Ant Design.</p>","tags":["RTK"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/#defining-static-constants-outside-the-component","title":"Defining Static Constants Outside the Component","text":"<p>Consider destructuring components or constants from libraries:</p> <pre><code>const { Option } = Select;\nconst { Text } = Typography;\n</code></pre> <p>These are static references that don\u2019t depend on component state or props. Defining them outside the component function:</p> <ul> <li>Avoids recreating them on every render</li> <li>Improves performance</li> <li>Keeps your code clean and readable</li> </ul>","tags":["RTK"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/#defining-hooks-inside-the-component","title":"Defining Hooks Inside the Component","text":"<p>Hooks like <code>useDispatch</code>, <code>useNavigate</code>, and <code>Form.useForm()</code> must be called inside the component function:</p> <pre><code>export default function MMDTabIndex() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [freshForm] = Form.useForm();\n  const [rollForm] = Form.useForm();\n\n  // Component logic here\n}\n</code></pre>","tags":["RTK"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/#why-inside","title":"Why inside?","text":"<ul> <li>Hooks rely on React\u2019s internal state and lifecycle</li> <li>They must be called in the same order on every render (Rules of Hooks)</li> <li>Calling them outside breaks React\u2019s hook rules and causes errors</li> </ul>","tags":["RTK"]},{"location":"blog/2025/05/08/where-to-define-variables-and-hooks-in-react-functional-components/#summary","title":"Summary","text":"Variable Type Where to Define Reason Static components/constants Outside the component Avoid unnecessary re-creation on renders React hooks (<code>useDispatch</code>, <code>useNavigate</code>, <code>useForm</code>) Inside the component Must follow React\u2019s Rules of Hooks <p>Following these simple guidelines will keep your React code efficient, maintainable, and error-free.</p> <p>Happy coding! \ud83d\ude80</p>","tags":["RTK"]},{"location":"blog/2025/05/09/react-component-code-order-where-to-place-state-effects-api-calls-and-handlers/","title":"React Component Code Order: Where to Place State, Effects, API Calls, and Handlers","text":"","tags":["React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/09/react-component-code-order-where-to-place-state-effects-api-calls-and-handlers/#react-component-code-order-where-to-place-state-effects-api-calls-and-handlers","title":"React Component Code Order: Where to Place State, Effects, API Calls, and Handlers","text":"<pre><code>function MyComponent(props) {\n  // 1. Top-level variables\n  const { someProp } = props;\n\n  // 2. State and refs\n  const [count, setCount] = useState(0);\n  const inputRef = useRef();\n\n  // 3. Redux/context/router hooks\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // 4. Custom hooks and API hooks\n  const { data } = useGetSomethingQuery();\n  const [postSomething, { isLoading }] = usePostSomethingMutation();\n\n  // 5. useEffect hooks\n  useEffect(() =&gt; {\n    // Side effects here\n  }, [count, data]);\n\n  // 6. Derived values and memoized functions\n  const doubled = useMemo(() =&gt; count * 2, [count]);\n  const handleSomething = useCallback(() =&gt; {\n    /* ... */\n  }, [count]);\n\n  // 7. Event handlers (call mutations here)\n  const handleSubmit = async () =&gt; {\n    await postSomething({ value: count });\n  };\n\n  // 8. Inline subcomponents (if needed)\n  const InlineComponent = () =&gt; &lt;div&gt;Inline&lt;/div&gt;;\n\n  // 9. JSX return\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleSubmit}&gt;Submit&lt;/button&gt;\n      &lt;InlineComponent /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>","tags":["React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/09/react-component-code-order-where-to-place-state-effects-api-calls-and-handlers/#recommended-order-inside-a-react-component","title":"Recommended Order Inside a React Component","text":"<ol> <li> <p>Top-level variable declarations</p> <p>(constants, config, or props destructuring)</p> </li> <li> <p>State and ref hooks</p> <p>(<code>useState</code>, <code>useReducer</code>, <code>useRef</code>, etc.)</p> </li> <li> <p>Redux/context/router hooks</p> <p>(<code>useDispatch</code>, <code>useSelector</code>, <code>useNavigate</code>, etc.)</p> </li> <li> <p>Custom hooks and API hooks</p> <p>(your own hooks, RTK Query hooks for fetching or mutations)</p> </li> <li> <p>Effect hooks</p> <p>(<code>useEffect</code>, <code>useLayoutEffect</code>)</p> </li> <li> <p>Derived values and memoized functions</p> <p>(<code>useMemo</code>, <code>useCallback</code>, derived/calculated variables)</p> </li> <li> <p>Event handlers and callbacks</p> <p>(functions for user actions, including calling API mutations)</p> </li> <li> <p>Inline subcomponents (if any)</p> <p>(components defined only for use inside this component)</p> </li> <li> <p>JSX return statement</p> </li> </ol>","tags":["React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/09/react-component-code-order-where-to-place-state-effects-api-calls-and-handlers/#why-this-order","title":"Why This Order?","text":"<ul> <li> <p>Hooks must be at the top level and always in the same order for every render.</p> </li> <li> <p>API mutations should be called inside event handlers, not effects or render, to avoid repeated or unintended calls.</p> </li> <li> <p>Effects come after all state/hooks so they can react to changes.</p> </li> <li> <p>Handlers and subcomponents come after hooks for clarity and to ensure they have access to all needed state and hooks.</p> </li> </ul> <pre><code>export default function MMDTabIndex() {\n  // 1. Hooks &amp; State\n  const [freshForm] = Form.useForm();\n  const [rollForm] = Form.useForm();\n  const [activeTab, setActiveTab] = useState(\"1\");\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n\n  // 2. Redux / Router Hooks\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // 3. Custom Hooks &amp; API Queries\n  const freshFormWatches = useDealFormWatches(freshForm);\n  const rollFormWatches = useDealFormWatches(rollForm);\n  const { selectedIds, handleSelect } = useFormSelectIds();\n\n  const { data: currency, isLoading: currencyLoading } = useGetCurrencyQuery();\n  // ... other API hooks\n\n  // 4. Derived Data / Memoized Values\n  // e.g., const calculatedValue = useMemo(() =&gt; ..., [dependencies]);\n\n  // 5. Event Handlers / Callbacks\n  // e.g.,\n  // const handleSubmit = useCallback(() =&gt; { ... }, [dependencies]);\n\n  // 6. Subcomponents (inline or imported)\n  const FreshForm = ({ form, activeTab, isLoadingButton }) =&gt; {\n    // form UI and logic here\n    return &lt;div&gt;Fresh Form UI&lt;/div&gt;;\n  };\n\n  const RollForm = ({ form, activeTab, isLoadingButton }) =&gt; {\n    // form UI and logic here\n    return &lt;div&gt;Roll Form UI&lt;/div&gt;;\n  };\n\n  // 7. Render JSX\n  return (\n    &lt;Tabs\n      defaultActiveKey=\"1\"\n      items={[\n        {\n          key: \"1\",\n          label: \"Fresh\",\n          children: (\n            &lt;FreshForm\n              form={freshForm}\n              activeTab={activeTab}\n              isLoadingButton={isLoadingButton}\n            /&gt;\n          ),\n        },\n        {\n          key: \"2\",\n          label: \"Roll\",\n          children: (\n            &lt;RollForm\n              form={rollForm} // Note: you had freshForm here, probably a typo\n              activeTab={activeTab}\n              isLoadingButton={isLoadingButton}\n            /&gt;\n          ),\n        },\n      ]}\n    /&gt;\n  );\n}\n</code></pre>","tags":["React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/","title":"antd: deafultValues will not work in controlled field","text":"","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#antd-deafultvalues-will-not-work-in-controlled-field","title":"antd: <code>deafultValues</code> will not work in controlled field","text":"<p>it occurs because in Ant Design Forms, you should not use <code>defaultValue</code> on inputs inside a controlled <code>Form.Item</code>. Instead, the correct way to set initial form field values is to use the <code>initialValues</code> prop on the parent <code>&lt;Form&gt;</code> component or the initialValue prop on the individual <code>&lt;Form.Item&gt;</code> (though the recommended approach is to use <code>initialValues</code> on <code>&lt;Form&gt;</code> for consistency).</p> <p>Warning: [antd: Form.Item] <code>defaultValue</code> will not work on controlled Field. You should use <code>initialValues</code> of Form instead. Component Stack: </p> TabRollForm.jsx<pre><code>&lt;Form.Item\n  label=\"Fresh/Roll\"\n  name={DealFormEnum?.FRESH_ROLL}\n  rules={[\n    {\n      required: isDevelopmentMode,\n      message: \"Please Select Fresh/Roll Type\",\n    },\n  ]}\n&gt;\n  &lt;Select\n    disabled\n    allowClear\n    showSearch\n    filterOption={(input, option) =&gt;\n      option.children.toLowerCase().includes(input.toLowerCase())\n    }\n    placeholder=\"Select Fresh/Roll Type\"\n    // ISSUE HERE\n    defaultValue={MoneyMarketDealTypeEnum?.ROLL}\n  &gt;\n    &lt;Option value={MoneyMarketDealTypeEnum?.FRESH}&gt;Fresh&lt;/Option&gt;\n    &lt;Option value={MoneyMarketDealTypeEnum?.ROLL}&gt;Roll&lt;/Option&gt;\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#explanation-and-best-practice","title":"Explanation and Best Practice","text":"<ul> <li> <p>Ant Design Forms are controlled components that internally manage form state.</p> </li> <li> <p>Using <code>defaultValue</code> on input components inside <code>Form.Item</code> conflicts with this controlled behavior, causing the warning.</p> </li> <li> <p>The correct way is to provide initial values via the <code>initialValues</code> prop on the <code>&lt;Form&gt;</code> component, which sets the default values for all fields at once.</p> </li> <li> <p>Alternatively, you can use <code>initialValue</code> on individual <code>&lt;Form.Item&gt;</code>, but this is less recommended if you already use <code>initialValues</code> on </p>. </li> <li> <p>This ensures the form state is properly initialized and managed by Ant Design's form system.</p> </li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#how-to-fix","title":"How to Fix","text":"<p>Instead of this (causes warning):</p> <pre><code>&lt;Form.Item name=\"username\" label=\"Username\" rules={[{ required: true }]}&gt;\n  &lt;Input defaultValue=\"John\" /&gt;\n&lt;/Form.Item&gt;\n</code></pre> <p>Do this:</p> <pre><code>&lt;Form initialValues={{ username: \"John\" }}&gt;\n  &lt;Form.Item name=\"username\" label=\"Username\" rules={[{ required: true }]}&gt;\n    &lt;Input /&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;\n</code></pre> <p>Or if you want to set initial value on a single field (less common):</p> <pre><code>&lt;Form.Item\n  name=\"username\"\n  label=\"Username\"\n  initialValue=\"John\"\n  rules={[{ required: true }]}\n&gt;\n  &lt;Input /&gt;\n&lt;/Form.Item&gt;\n</code></pre>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#why","title":"Why?","text":"<ul> <li><code>defaultValue</code> is for uncontrolled components - React sets the initial value but does not control it afterward.</li> <li>Ant Design Form fields are controlled components - the form manages the value internally, so <code>defaultValue</code> is ignored and causes warnings.</li> <li>Using <code>initialValues</code> or <code>initialValue</code> lets Ant Design initialize the form state correctly and keep it in sync.</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#additional-notes","title":"Additional Notes","text":"<ul> <li>If you load data asynchronously (e.g., from an API), you can update form values dynamically using <code>form.setFieldsValue</code> or by resetting the form with new <code>initialValues</code>.</li> <li>Avoid mixing <code>defaultValue</code> with controlled form fields to prevent inconsistent UI and warnings.</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#references-from-your-search-results","title":"References from your search results","text":"<ul> <li>Ant Design official docs and examples recommend using <code>initialValues</code> on <code>&lt;Form&gt;</code> rather than <code>defaultValue</code> on inputs.</li> <li>Stack Overflow and community articles emphasize that <code>defaultValue</code> on controlled fields causes warnings and does not behave as expected.</li> <li>Using <code>initialValues</code> on <code>&lt;Form&gt;</code> or <code>initialValue</code> on <code>&lt;Form.Item&gt;</code> is the correct way to set initial data for controlled fields.</li> </ul> Quote <ul> <li>Stackoverflow: how to use ant design form initialValue</li> <li>Official antd form</li> <li>Stackoverflow: defaultValue of Input not working correctly on ant design</li> <li>Ant Design Form \u5b57\u6bb5\u8bbe\u7f6e\u9ed8\u8ba4\u503c, \u4f8b\u5982\u8fd9\u79cd\uff0c\u5728 form \u7684 initialValues \u91cc\u8bbe\u7f6e\u5404\u4e2a\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#summary","title":"Summary","text":"<p>To resolve the warning:</p> <ul> <li>Remove <code>defaultValue</code> from input components inside Form.Item.</li> <li>Set initial form values using the <code>initialValues</code> prop on the <code>&lt;Form&gt;</code> component.</li> <li>Optionally use <code>initialValue</code> on individual <code>&lt;Form.Item&gt;</code>, but prefer initialValues on <code>&lt;Form&gt;</code> for consistency.</li> <li>Manage dynamic updates with <code>form.setFieldsValue</code> if needed.</li> </ul> <p>This aligns with Ant Design\u2019s controlled form design and avoids the warning.</p>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-deafultvalues-will-not-work-in-controlled-field/#reference","title":"Reference","text":"<ul> <li>Stackoverflow: how to use ant design form initialValue</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/","title":"antd: The value prop of a select item should not be null","text":"","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#antd-the-value-prop-of-a-select-item-should-not-be-null","title":"antd: The <code>value</code> prop of a select item should not be <code>null</code>","text":"<p>The error comes from React <code>Select</code> trying to render a <code>null</code> value option because the value prop contains <code>null</code> or invalid entries not present in the <code>options</code> array. This usually happens when auto-populating forms, asynchronously loading data, or when the selected value state is not properly synchronized with options.</p> <p>Fixing it requires ensuring that the <code>value</code> prop always matches valid option objects and never contains <code>null</code>.</p> <p>Warning: <code>value</code> in Select options should not be <code>null</code>. Component Stack: but where this error comes from</p> Issue jsx<pre><code>&lt;Form.Item label={label} name={name}&gt;\n    &lt;Select\n        mode=\"multiple\"\n        placeholder={placeholder}\n        loading={loading}\n        value={selectedValues}\n        onChange={onChange}\n        disabled={isEnabled}\n    &gt;\n        {options?.length &gt; 0 ? (\n            options.map((item) =&gt; (\n                &lt;Select.Option key={item.aspNetUserId} value={item.aspNetUserId}&gt;\n                {item.fullName} ({item.emailAddress})\n                &lt;/Select.Option&gt;\n            ))\n        ) : (\n        &lt;Select.Option value={null} disabled&gt;\n            {loading ? \"Loading...\" : \"No options available\"}\n        &lt;/Select.Option&gt;\n        )}\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <p>The warning \"<code>value</code> in Select options should not be <code>null</code>\" is caused by this part of your code:</p> <pre><code>&lt;Select.Option value={null} disabled&gt;\n  {loading ? \"Loading...\" : \"No options available\"}\n&lt;/Select.Option&gt;\n</code></pre>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#why","title":"Why?","text":"<ul> <li> <p>The <code>value</code> prop of a <code>&lt;Select.Option&gt;</code> should never be <code>null</code>.</p> </li> <li> <p>When you pass <code>value={null}</code>, and if your <code>Select</code>'s <code>value</code> prop contains <code>null</code> or tries to match it, React Select throws a warning because it expects value to be a valid, non-null identifier.</p> </li> <li> <p>Also, if your <code>selectedValues</code> state contains <code>null</code> or <code>undefined</code>, React Select tries to match that to an option and fails.</p> </li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#how-to-fix-this","title":"How to Fix This","text":"","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#1-remove-the-selectoption-with-valuenull","title":"1. Remove the <code>&lt;Select.Option&gt;</code> with <code>value={null}</code>","text":"<p>Instead of rendering a disabled option with <code>value={null}</code>, you can:</p> <ul> <li>Render no options when the list is empty (React Select will show an empty dropdown).</li> <li>Or show a message outside the options list (e.g., a small text below the Select or a custom dropdown message).</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#2-use-notfoundcontent-or-similar-props-if-using-ant-design-select","title":"2. Use <code>notFoundContent</code> or similar props (if using Ant Design Select)","text":"<p>If you are using Ant Design's <code>Select</code> component (which it looks like), it supports a <code>notFoundContent</code> prop that displays a message when there are no options:</p> <pre><code>&lt;Select\n  mode=\"multiple\"\n  placeholder={placeholder}\n  loading={loading}\n  value={selectedValues}\n  onChange={onChange}\n  disabled={isEnabled}\n  notFoundContent={loading ? \"Loading...\" : \"No options available\"}\n&gt;\n  {options?.map((item) =&gt; (\n    &lt;Select.Option key={item.aspNetUserId} value={item.aspNetUserId}&gt;\n      {item.fullName} ({item.emailAddress})\n    &lt;/Select.Option&gt;\n  ))}\n&lt;/Select&gt;\n</code></pre>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#3-make-sure-selectedvalues-does-not-contain-null","title":"3. Make sure <code>selectedValues</code> does not contain null","text":"<p>Check your <code>selectedValues</code> state and ensure it never contains <code>null</code> or <code>undefined</code>. It should be an array of valid values matching the options:</p> <pre><code>// Example sanitization before setting state\nconst sanitizedValues = selectedValues.filter((v) =&gt; v != null);\nsetSelectedValues(sanitizedValues);\n</code></pre> Final corrected example<pre><code>&lt;Form.Item label={label} name={name}&gt;\n  &lt;Select\n    mode=\"multiple\"\n    placeholder={placeholder}\n    loading={loading}\n    value={selectedValues}\n    onChange={onChange}\n    disabled={isEnabled}\n    notFoundContent={loading ? \"Loading...\" : \"No options available\"}\n  &gt;\n    {options?.map((item) =&gt; (\n      &lt;Select.Option key={item.aspNetUserId} value={item.aspNetUserId}&gt;\n        {item.fullName} ({item.emailAddress})\n      &lt;/Select.Option&gt;\n    ))}\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#summary","title":"Summary","text":"<ul> <li> <p>Do not use <code>value={null}</code> in <code>&lt;Select.Option&gt;</code> - it causes warnings.</p> </li> <li> <p>Use <code>notFoundContent</code> to display messages when no options exist.</p> </li> <li> <p>Ensure your value prop (<code>selectedValues</code>) never contains <code>null</code> or invalid <code>values</code>.</p> </li> <li> <p>This will remove the warning and keep your <code>Select</code> component working smoothly.</p> </li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/05/13/antd-the-value-prop-of-a-select-item-should-not-be-null/#reference","title":"Reference","text":"<ul> <li>React-select fills an null value option when I try to update a created object</li> <li>React is not giving me right value on my select &gt; option value</li> <li>react-select: Selected value doesn't update on options update #4248</li> <li>react-select and typescript: Type 'string' is not assignable to type 'ValueType'</li> <li>React Select: A comprehensive guide</li> </ul>","tags":["Antd","React","JavaScript","Frontend","Hooks","Best Practices"]},{"location":"blog/2025/06/11/i-promise-myself/","title":"I Promise myself","text":"","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#i-promise-myself","title":"I <code>Promise</code> myself","text":"setTimeout() <p><code>setTimeout()</code> is an asynchronous JavaScript function that executes a code block or evaluates an expression through a callback function after a delay set in milliseconds.</p> <ul> <li>Codecademy: JS Promise</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#core-concept-what-is-a-promise","title":"\ud83d\udd04 Core Concept: What is a Promise?","text":"<p>A Promise represents a value that may be available now, later, or never (if it fails). (1)</p> <ol> <li> <p>A Promise is an object representing the eventual completion or failure of an asynchronous operation. Since most people are consumers of already-created promises, this guide will explain consumption of returned promises before explaining how to create them.</p> <p>Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.</p> </li> </ol> Basic Usage<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve(\"Success!\");\n  }, 1000);\n});\n\npromise.then((result) =&gt; console.log(result));\n</code></pre>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#summary-of-all-promise-static-methods","title":"\ud83d\udd01 Summary of All Promise Static Methods:","text":"<p>That means you call them directly on <code>Promise</code>, not on a promise instance.</p> Method Type Description <code>Promise.all()</code> Static Waits for all promises to fulfill, or rejects fast if one fails <code>Promise.allSettled()</code> Static Waits for all to settle (fulfilled or rejected) <code>Promise.any()</code> Static Resolves with the first fulfilled promise <code>Promise.race()</code> Static Resolves or rejects with the first promise that settles <code>Promise.resolve()</code> Static Returns a resolved Promise with the given value <code>Promise.reject()</code> Static Returns a rejected Promise with the given reason <code>Promise.try()</code> Static (non-standard) Wraps sync code in a Promise, catching errors (some runtimes only) <code>Promise.withResolvers()</code> Static (ES2024/experimental) Returns <code>{ promise, resolve, reject }</code> object","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#reminder-instance-method","title":"\ud83e\udde0 Reminder: Instance Method","text":"<p>These are methods you call on a specific Promise instance, not on <code>Promise</code> itself:</p> Method Type Description <code>.then()</code> Instance Attaches a success handler <code>.catch()</code> Instance Attaches an error handler <code>.finally()</code> Instance Attaches a handler that runs regardless","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#when-to-use-which","title":"\ud83d\udccc When to Use Which?","text":"Method When to Use <code>Promise.all()</code> You need all to succeed, or fail fast if one fails <code>Promise.allSettled()</code> You need all results, even failed ones <code>Promise.any()</code> You want the first success, and fail only if all fail <code>Promise.race()</code> You want the first settled promise, whether it's success or failure <code>Promise.resolve()</code> Convert a value to a resolved promise <code>Promise.reject()</code> Convert a reason to a rejected promise <code>Promise.try()</code> Wrap synchronous code to catch exceptions in a promise-safe way <code>Promise.withResolvers()</code> You want external control over resolve/reject for custom promise logic","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li> <p>\u2705 Always handle <code>.catch()</code> to avoid unhandled rejections.</p> </li> <li> <p>\u23f1 Use <code>Promise.race()</code> for timeouts.</p> </li> <li> <p>\ud83d\udee0 Avoid nesting promises; use chaining.</p> </li> <li> <p>\ud83e\uddea Use <code>Promise.allSettled</code> for batch jobs where individual failure is okay.</p> </li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#ai-overview","title":"AI Overview","text":"<p>A JavaScript Promise is an object representing the eventual completion (or failure) of an asynchronous operation. It acts as a placeholder for a value that may not be available immediately, allowing you to write cleaner and more manageable asynchronous code.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#key-concepts","title":"Key Concepts:","text":"","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#states","title":"States:","text":"<p>A Promise can be in one of three states:</p> <ul> <li>Pending: The initial state, neither fulfilled nor rejected.</li> <li>Fulfilled (Resolved): The operation completed successfully, and a value is available.</li> <li>Rejected: The operation failed, and an error is available.</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#creation","title":"Creation:","text":"<p>Promises are created using the <code>Promise</code> constructor, which takes an executor function as an argument. The executor function receives two callbacks: <code>resolve</code> (to fulfill the promise) and <code>reject</code> (to reject the promise).</p>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#consumption","title":"Consumption:","text":"<p>Promises are consumed using the <code>.then()</code> and <code>.catch()</code> methods.</p> <ul> <li><code>.then()</code>: Handles the fulfilled state, taking a callback function that receives the resolved value.</li> <li><code>.catch()</code>: Handles the rejected state, taking a callback function that receives the error.</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#chaining","title":"Chaining:","text":"<p>Promises can be chained together using <code>.then()</code> to create a sequence of asynchronous operations.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#error-handling","title":"Error Handling:","text":"<p>Errors in a promise chain can be caught using <code>.catch()</code> at any point in the chain. If an error occurs in a <code>.then()</code> callback, it will propagate down the chain until it reaches a <code>.catch()</code>. Promise Methods:</p> <ul> <li><code>Promise.all()</code>: Takes an array of promises and returns a new promise that resolves when all input promises resolve or rejects if any of them reject.</li> <li><code>Promise.allSettled()</code>: Takes an array of promises and returns a new promise that resolves when all input promises have settled (either resolved or rejected).</li> <li><code>Promise.any()</code>: Takes an array of promises and returns a new promise that resolves when the first input promise resolves or rejects if all of them reject.</li> <li><code>Promise.race()</code>: Takes an array of promises and returns a new promise that resolves or rejects as soon as the first input promise settles.</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#asyncawait","title":"Async/Await:","text":"<p>Promises are the foundation for <code>async/await</code> syntax, which makes asynchronous code look more like synchronous code.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#benefits-of-using-promises","title":"Benefits of Using Promises:","text":"<ul> <li>Improved Code Readability: Promises help avoid \"callback hell\" by providing a more structured way to handle asynchronous operations.</li> <li>Better Error Handling: Promises make it easier to handle errors in asynchronous code, with clear error propagation through the chain.</li> <li>Simplified Asynchronous Logic: Promises simplify the process of writing and managing asynchronous code.</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/i-promise-myself/#reference","title":"Reference","text":"<ul> <li>MDN: Using promises</li> <li>CodeAcademy: Promises</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/","title":"Set me setTimeout","text":"","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#set-me-settimeout","title":"Set me <code>setTimeout</code>","text":"<p>Yes, you can think of <code>setTimeout</code> as a static method of the <code>window</code> object in browsers \u2014 but with some nuance.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#overview","title":"Overview","text":"Syntax<pre><code>setTimeout(callbackFunction, delayTime);\n</code></pre>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#what-does-static-method-mean","title":"\u2705 What does \"static method\" mean?","text":"<p>In programming, a static method is a method that belongs to a class or object itself, not to an instance of it</p> <pre><code>class MyClass {\n  static sayHello() {\n    console.log(\"Hello\");\n  }\n}\n\nMyClass.sayHello(); // Works \u2705\nnew MyClass().sayHello(); // \u274c Error, sayHello is not on the instance\n</code></pre>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#is-settimeout-static","title":"\ud83e\udde0 Is setTimeout static?","text":"In the browser: <ul> <li><code>setTimeout</code> is not tied to an instance of a class.</li> <li>It's a function defined on the <code>window</code> object, which is the global object in browsers.</li> <li>So you access it like a static method: <code>window.setTimeout(...)</code>.</li> </ul> <p>But here's the nuance: <code>window</code> is not a class, it's just a global object. So <code>setTimeout</code> is more precisely described as a global function or a method on the global object, not a static method in the classical OOP sense.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#summary","title":"\u2705 Summary:","text":"<ul> <li> <p>Technically: <code>setTimeout</code> is a method of the global object (<code>window</code> in browsers, <code>global</code> in Node.js).</p> </li> <li> <p>Conceptually: It behaves like a static method \u2014 it's not tied to an instance, you call it directly on the object.</p> </li> <li> <p>So: It\u2019s reasonable to say it acts like a static method, though it\u2019s better described as a global function in JavaScript</p> </li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#question","title":"Question","text":"<p>\ud83d\udd0d Why <code>setTimeout</code> doesn\u2019t show up in <code>console.log(window)</code>?</p> <p>When you do:</p> <pre><code>console.log(window);\n</code></pre> <p>You're logging the <code>window</code> object. However, browser dev tools (like Chrome DevTools) only show enumerable own properties by default in the console \u2014 not everything that exists on the object.</p> \ud83d\udd27 What's happening behind the scenes? <p><code>setTimeout</code> does exist on <code>window</code>, but it's a non-enumerable property inherited from <code>Window.prototype</code>.</p> <p>Try this in the browser console:</p> <pre><code>console.log('setTimeout' in window); // true \u2705\nconsole.log(window.hasOwnProperty('setTimeout')); // false \u274c\nconsole.log(Object.getPrototypeOf(window).hasOwnProperty('setTimeout')); // true \u2705\n</code></pre> <p>Or list all properties, including non-enumerable ones:</p> <pre><code>console.log(Object.getOwnPropertyNames(window));\n</code></pre> <p>Even more complete:</p> <pre><code>console.dir(window);\n</code></pre> <p>\ud83d\udd01 Summary</p> Reason Explanation <code>setTimeout</code> is missing in <code>console.log(window)</code> Because it's inherited and non-enumerable Is <code>setTimeout</code> on <code>window</code>? \u2705 Yes \u2014 accessible via <code>window.setTimeout</code> Is it shown in a simple <code>console.log(window)</code>? \u274c Not always \u2014 due to how dev tools display objects","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#theory","title":"Theory","text":"<p>Understanding enumerable vs. non-enumerable properties helps explain how JavaScript objects behave \u2014 especially when using loops or inspecting objects in the console.</p>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#what-is-an-enumerable-property","title":"\ud83d\udd0d What Is an Enumerable Property?","text":"<p>\u2705 Enumerable Property:</p> <p>An enumerable property is a property that will show up in a <code>for...in</code> loop, or when you use functions like <code>Object.keys()</code>.</p> Example<pre><code>const obj = {\n  name: \"Alice\",\n};\n\nconsole.log(Object.keys(obj)); // ['name']\n</code></pre> <p>Here, <code>name</code> is enumerable by default.</p> <p>\ud83d\udeab Non-Enumerable Property:</p> <p>A non-enumerable property does not show up in <code>for...in</code> loops, <code>Object.keys()</code>, or when logging the object \u2014 even though it's still there and accessible.</p> Example<pre><code>const obj = {};\n\nObject.defineProperty(obj, \"secret\", {\n  value: \"hidden value\",\n  enumerable: false,\n});\n\nconsole.log(Object.keys(obj)); // [] \ud83d\udc40\nconsole.log(obj.secret); // 'hidden value' \u2705\n</code></pre>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#when-do-we-use-non-enumerable-properties","title":"\ud83e\udde0 When Do We Use Non-Enumerable Properties?","text":"<ul> <li>JavaScript built-in objects (like <code>window</code>, arrays, etc.) often have non-enumerable methods/properties to avoid clutter.</li> <li>It\u2019s used to hide internal or system-level logic from normal iteration.</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#how-to-check-if-a-property-is-enumerable","title":"\ud83d\udee0 How to Check If a Property Is Enumerable?","text":"<p>Use <code>propertyIsEnumerable()</code>:</p> <pre><code>const obj = { name: \"Alice\" };\nconsole.log(obj.propertyIsEnumerable(\"name\")); // true\n</code></pre>","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#summary_1","title":"\ud83d\udccb Summary","text":"Type Shows in <code>for...in</code> / <code>Object.keys()</code> Accessible directly Use Case Enumerable \u2705 Yes \u2705 Yes Normal object properties Non-Enumerable \u274c No \u2705 Yes Internal/system-level features","tags":["Promise"]},{"location":"blog/2025/06/11/set-me-settimeout/#reference","title":"Reference","text":"<ul> <li>\u2018setTimeout\u2019 with Time 0 Explained!</li> <li>JAVASCRIPT.INFO: Scheduling: setTimeout and setInterval</li> </ul>","tags":["Promise"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/","title":"\ud83d\udd52 Why currentTime Works Inside the Component but Not Outside","text":"","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#why-currenttime-works-inside-the-component-but-not-outside","title":"\ud83d\udd52 Why currentTime Works Inside the Component but Not Outside","text":"Bug <pre><code>// Previously i have defined currentTime outside the component\nconst currentTime = dayjs().format(\"h:mm:ss A\");\n\nexport default function TabFreshForm({\n    form,\n    activeTab,\n    isLoadingButton,\n    isDebouncingStatus,\n    isSkipVerifierApprover,\n    onSubmit,\n    valueDate,\n}) {\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                layout=\"vertical\"\n                className=\"currency-exchange-steps\"\n                onFinish={onSubmit}\n            &gt;\n                &lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n                    &lt;Form.Item\n                        name={DealFormEnum?.DEAL_TIME}\n                        label=\"Deal Time\"\n                        rules={[\n                            {\n                            required: isDevelopmentMode,\n                            message: \"Please Select Deal Time\",\n                            },\n                        ]}\n                        initialValue={dayjs(currentTime, \"HH:mm:ss A\")}\n                    &gt;\n                    &lt;TimePicker\n                        use12Hours\n                        format=\"h:mm:ss A\"\n                        placeholder=\"Select Time\"\n                        style={{ width: \"100%\" }}\n                    /&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Col&gt;\n            &lt;/Form&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>// now i have defined the currentTime inside the component, and the time is working to dynamic, when i go to another router and cmaback to this route. why this is working and why prvious is not working. what type of issue it this. write me a mkdocs blog for it</p> <pre><code>export default function TabFreshForm({\n    form,\n    activeTab,\n    isLoadingButton,\n    isDebouncingStatus,\n    isSkipVerifierApprover,\n    onSubmit,\n    valueDate,\n}) {\n\nconst currentTime = dayjs().format(\"h:mm:ss A\");\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                layout=\"vertical\"\n                className=\"currency-exchange-steps\"\n                onFinish={onSubmit}\n            &gt;\n                &lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n                    &lt;Form.Item\n                        name={DealFormEnum?.DEAL_TIME}\n                        label=\"Deal Time\"\n                        rules={[\n                            {\n                            required: isDevelopmentMode,\n                            message: \"Please Select Deal Time\",\n                            },\n                        ]}\n                        initialValue={dayjs(currentTime, \"HH:mm:ss A\")}\n                    &gt;\n                    &lt;TimePicker\n                        use12Hours\n                        format=\"h:mm:ss A\"\n                        placeholder=\"Select Time\"\n                        style={{ width: \"100%\" }}\n                    /&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Col&gt;\n            &lt;/Form&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>Great question \u2014 this is a classic case of when and where code is executed in React, especially regarding module-level vs. component-level scope.</p> <p>Below is a well-structured mkdocs-style blog article that explains this behavior clearly.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#why-currenttime-works-inside-the-component-but-not-outside_1","title":"\ud83d\udd52 Why <code>currentTime</code> Works Inside the Component but Not Outside","text":"<p>\ud83d\udcd8 Understanding Execution Contexts in React Forms with Ant Design</p> <p>In this article, we explore a subtle but important issue in React when using Ant Design's <code>Form.Item</code> with <code>initialValue</code>, particularly when dealing with time fields like <code>TimePicker</code>. We\u2019ll focus on why setting <code>currentTime</code> inside the component works, while defining it outside causes it to become stale.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#the-issue","title":"\ud83d\udccc The Issue","text":"<p>Let\u2019s look at two nearly identical code snippets that behave differently:</p> <p>\u274c Example A \u2013 Broken or stale time:</p> <pre><code>// \u274c This is declared only once \u2014 on initial app load\nconst currentTime = dayjs().format(\"h:mm:ss A\");\n\nexport default function TabFreshForm(props) {\n  return (\n    &lt;Form&gt;\n      &lt;Form.Item name=\"dealTime\" initialValue={dayjs(currentTime, \"h:mm:ss A\")}&gt;\n        &lt;TimePicker /&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n}\n</code></pre> <ul> <li>Problem: When navigating away and returning, the form still shows the old time, not the current time.</li> </ul>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#example-b-working-as-expected","title":"\u2705 Example B \u2013 Working as expected:","text":"<pre><code>export default function TabFreshForm(props) {\n  const currentTime = dayjs().format(\"h:mm:ss A\");\n\n  return (\n    &lt;Form&gt;\n      &lt;Form.Item name=\"dealTime\" initialValue={dayjs(currentTime, \"h:mm:ss A\")}&gt;\n        &lt;TimePicker /&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n}\n</code></pre> <ul> <li>Success: The time is fresh whenever the component re-renders or remounts (e.g., via routing).</li> </ul>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#why-this-happens","title":"\ud83e\udde0 Why This Happens","text":"","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#1-top-level-code-is-executed-only-once","title":"1. Top-Level Code is Executed Only Once","text":"<p>When you define this outside the component:</p> <pre><code>const currentTime = dayjs().format(\"h:mm:ss A\");\n</code></pre> <p>\u2026it runs once when the module is first loaded \u2014 usually on the first visit to the page. After that, even if you navigate away and back, the module stays in memory, and <code>currentTime</code> never updates.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#2-component-code-runs-on-every-mount","title":"2. Component Code Runs on Every Mount","text":"<p>When you define it inside the component:</p> <pre><code>const currentTime = dayjs().format(\"h:mm:ss A\");\n</code></pre> <p>\u2026it runs every time the component is rendered or remounted. If your route unmounts the component on navigation and remounts it when you return, <code>currentTime</code> will be recalculated, giving you the correct value.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#why-initialvalue-doesnt-update-reactively","title":"\u26a0\ufe0f Why <code>initialValue</code> Doesn\u2019t Update Reactively","text":"<p>Another common misconception is thinking that changing a prop or state will update the <code>initialValue</code> of a form item. This is not true.</p> <p>\u2705 initialValue is only used once, when the field is first registered with the form.</p> <p>To update values after the form is already mounted, you must use:</p> <pre><code>form.setFieldsValue({ dealTime: dayjs(...) });\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#recommendations","title":"\u2705 Recommendations","text":"Use Case Recommended Practice Default time on form load Calculate time inside the component Update time after submit Use <code>form.setFieldsValue()</code> Avoid stale values Avoid declaring dynamic defaults outside React scope <p>\ud83d\udce6 Pro Tip</p> <p>If your form component lives under a route (e.g., in a tab or page), React will remount it when the user navigates back \u2014 and this gives you a chance to recalculate defaults. \ud83d\udcdd Conclusion</p> <p>This issue is a good reminder of how JavaScript execution context and React component lifecycle interact:</p> <ul> <li>Top-level (outside component) code executes once on app/module load.</li> <li>Component-level code runs per mount \u2014 ideal for fresh timestamps.</li> <li>Use <code>form.setFieldsValue</code> if you need to update values dynamically.</li> </ul> <p>By keeping time-sensitive logic inside the component, you ensure your forms behave correctly \u2014 no manual refresh required.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#question","title":"Question","text":"<p>which code to keep inside the component and which one to store outside the component/top-lvel</p> <p>Great follow-up \u2014 this is one of the most important architecture decisions in React: knowing what belongs inside a component (i.e. dynamic, instance-specific logic) vs what can safely live outside (i.e. static, shared logic or configuration).</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#what-to-keep-inside-a-component","title":"\u2705 What to Keep Inside a Component","text":"<p>These items should live inside the component because they are reactive, instance-specific, or need to re-evaluate on every render/mount:</p> Code Type Examples Why? \ud83d\udd01 Dynamic values <code>const currentTime = dayjs().format(\"HH:mm:ss A\");</code> Needs to update every render/mount \ud83e\udde0 State hooks <code>const [value, setValue] = useState()</code> State is local to the component \ud83c\udfa3 Hooks <code>useEffect</code>, <code>useQuery</code>, <code>useMemo</code>, etc. Must run within component context \ud83e\uddea Conditional logic <code>if (someProp) { ... }</code> Depends on runtime props/state \ud83d\udcc4 Form values via <code>form.setFieldsValue()</code> Set form fields after submission, reset, etc. Can only run after the form has mounted \ud83d\udd04 Event handlers <code>onChange</code>, <code>onClick</code>, <code>onSubmit</code> Tied to local interactions Example<pre><code>export default function MyForm() {\n  const currentTime = dayjs().format(\"HH:mm:ss A\"); // \u2705 fresh on each mount\n  const [form] = Form.useForm();\n\n  useEffect(() =&gt; {\n    form.setFieldsValue({ dealTime: dayjs(currentTime, \"HH:mm:ss A\") });\n  }, []);\n\n  return &lt;Form form={form}&gt;...&lt;/Form&gt;;\n}\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#what-to-keep-outside-the-component-top-level","title":"\u2705 What to Keep Outside the Component (Top-Level)","text":"<p>Use top-level scope for static or reusable logic that doesn't depend on runtime state or props:</p> Code Type Examples Why? \ud83d\uddc2 Constants/enums <code>const DEAL_FORM = { DEAL_TIME: \"dealTime\" }</code> Reused everywhere, doesn't change \ud83c\udfd7 Config values API base URLs, select option lists, form schema Shareable and fixed \ud83d\udce6 Utility functions <code>formatDate()</code>, <code>calculateRate()</code> Pure functions, reusable \ud83d\ude80 API hooks <code>export const usePostForex = ...</code> Shareable hook definitions \ud83d\udcd8 Static default props <code>defaultFormValues = { currency: 'USD' }</code> Don't rely on current time/state Example<pre><code>// \u2705 Reusable config\nexport const FOREX_DEAL = {\n  DEAL_TIME: \"dealTime\",\n};\n\n// \u2705 Reusable utility\nexport const getCurrentTime = () =&gt;\n  dayjs(dayjs().format(\"HH:mm:ss A\"), \"HH:mm:ss A\");\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#mixed-case-be-careful","title":"\ud83d\udd04 Mixed Case (Be Careful)","text":"<p>Some logic can live either inside or outside depending on how it's used:</p> Code Type Inside When... Outside When... <code>dayjs().format(...)</code> You need a fresh value per render Used as static timestamp on page load Select dropdown options Options change based on props Options are fixed Validation rules Dynamic rules based on state Rules are static across usage","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#rule-of-thumb","title":"\ud83e\udde0 Rule of Thumb","text":"<p>\ud83d\udcac If it depends on props, state, or needs to be fresh on every render \u2192 keep it inside.</p> <p>\ud83d\udcac If it\u2019s reusable, constant, and doesn\u2019t depend on runtime values \u2192 move it outside.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#final-tip-use-a-pattern","title":"\u2705 Final Tip: Use a Pattern","text":"<p>Break code into:</p> <pre><code>\ud83d\udce6 /constants\n\ud83d\udce6 /utils\n\ud83d\udce6 /api\n\ud83d\udce6 /components\n</code></pre> <p>And in each component:</p> <ul> <li>Keep dynamic logic, hooks, state, and handlers inside.</li> <li>Import and reuse everything else.</li> </ul>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#theory","title":"Theory","text":"<p>Great! Here's a ready-to-use documentation page (Markdown format) you can drop into your mkdocs or docs/ folder.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#react-best-practices-what-to-keep-inside-vs-outside-a-component","title":"\ud83d\udcda React Best Practices: What to Keep Inside vs Outside a Component","text":"<p>This guide helps you decide which code belongs inside a React component and what should live outside (top-level). Proper separation improves code readability, reusability, and performance.</p>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#keep-inside-the-component","title":"\u2705 Keep Inside the Component","text":"<p>Use the component body for dynamic, reactive, or instance-specific logic that changes on render, mount, or via user interaction.</p> <p>Typical Examples:</p> Type Example Why \ud83e\udde0 State hooks <code>useState</code>, <code>useReducer</code> Scoped to component \ud83c\udfa3 Lifecycle hooks <code>useEffect</code>, <code>useMemo</code>, <code>useCallback</code> Must run in component \ud83d\udd01 Dynamic values <code>dayjs().format(...)</code>, <code>Math.random()</code> Needs fresh values \ud83e\uddea Conditional logic Based on props or internal state Changes per instance \ud83e\uddfe Form value logic <code>form.setFieldsValue(...)</code> after events Runs post-mount \ud83d\uddb1\ufe0f Event handlers <code>onClick</code>, <code>onChange</code>, <code>onSubmit</code> Responds to UI \ud83d\udce6 Custom hook usage <code>const data = useGetDataQuery(...)</code> Bound to lifecycle Example<pre><code>export default function DealForm() {\n  const [form] = Form.useForm();\n  const currentTime = dayjs().format(\"HH:mm:ss A\");\n\n  useEffect(() =&gt; {\n    form.setFieldsValue({\n      dealTime: dayjs(currentTime, \"HH:mm:ss A\"),\n    });\n  }, []);\n\n  return (\n    &lt;Form form={form}&gt;\n      &lt;Form.Item name=\"dealTime\"&gt;\n        &lt;TimePicker /&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n}\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#keep-outside-the-component-top-level","title":"\u2705 Keep Outside the Component (Top-Level)","text":"<p>Keep static, shared, or reusable logic outside the component to avoid re-creation and maintain modularity.</p> <p>Typical Examples:</p> Type Example Why \ud83d\udd20 Constants <code>const DEAL_TYPES = [...]</code> Shared/static \ud83d\udd27 Utility funcs <code>formatDate()</code>, <code>getCurrentTime()</code> Pure functions \ud83d\udcd8 Enums/config <code>const FOREX_DEAL = { DEAL_TIME: 'dealTime' }</code> Doesn't change \ud83d\udce6 API services <code>usePostForex</code>, <code>api.get()</code> Defined once \ud83d\udd01 Static defaults <code>initialValues = { currency: 'USD' }</code> Reused in forms Example<pre><code>// \ud83d\udd27 utils/dateUtils.ts\nexport const getCurrentTime = () =&gt;\n  dayjs(dayjs().format(\"HH:mm:ss A\"), \"HH:mm:ss A\");\n\n// \ud83d\udcd8 constants/formFields.ts\nexport const FOREX_DEAL = {\n  DEAL_TIME: \"dealTime\",\n};\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#mixed-cases-use-judgment","title":"\u26a0\ufe0f Mixed Cases (Use Judgment)","text":"<p>Some code can go inside or outside depending on context.</p> Code Inside When... Outside When... Dropdown options Based on props or fetched data Static options that never change Default values Need dynamic values on each render Values are fixed (e.g. default currency) Validation rules Depend on user role or form type Form-wide and static","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#suggested-project-structure","title":"\ud83d\udcc2 Suggested Project Structure","text":"<pre><code>/src\n  /components\n    DealForm.tsx\n  /constants\n    formFields.ts\n    dropdowns.ts\n  /utils\n    dateUtils.ts\n    validators.ts\n  /api\n    forexService.ts\n</code></pre>","tags":["react"]},{"location":"blog/2025/06/18/-why-currenttime-works-inside-the-component-but-not-outside/#rule-of-thumb_1","title":"\u2705 Rule of Thumb","text":"<p>\u26a1 If it's dynamic or user-dependent \u2014 keep it inside.</p> <p>\ud83d\udce6 If it's static, reusable, or context-free \u2014 keep it outside.</p>","tags":["react"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/","title":"Monitoring Your API with Prometheus and Grafana","text":"","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#monitoring-your-api-with-prometheus-and-grafana","title":"Monitoring Your API with Prometheus and Grafana","text":"<p>When building APIs, it's crucial to track performance, reliability, and usage. While tools like Sentry are great for error tracking, Prometheus + Grafana shines when it comes to metrics-based monitoring.</p>","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#why-prometheus-grafana","title":"\ud83c\udfaf Why Prometheus + Grafana?","text":"<p>Prometheus and Grafana together provide a powerful, open-source stack to:</p> <ul> <li>Monitor request rates</li> <li>Visualize latency trends</li> <li>Track error rates</li> <li>Set up custom alerts</li> <li>Expose and graph custom metrics</li> </ul> <p>They are lightweight, extensible, and production-ready.</p>","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#when-to-use-prometheus-grafana-for-api-monitoring","title":"\u2705 When to Use Prometheus + Grafana for API Monitoring","text":"Use Case Prometheus + Grafana Request rate tracking \u2705 Yes Latency (avg, p95, p99) \u2705 Yes Error rate (4xx/5xx) \u2705 Yes Infrastructure metrics \u2705 Yes Stack traces/debug info \u274c No Frontend error tracking \u274c No <p>For detailed error reports, consider using Sentry or pairing with OpenTelemetry.</p>","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#example-nodejs-prometheus","title":"\ud83d\udee0 Example: Node.js + Prometheus","text":"<p>Install Prometheus client:</p> <pre><code>npm install prom-client\n</code></pre> Setup in Express<pre><code>const express = require(\"express\");\nconst client = require(\"prom-client\");\nconst app = express();\n\nconst httpRequestDuration = new client.Histogram({\n  name: \"http_request_duration_seconds\",\n  help: \"Duration of HTTP requests in seconds\",\n  labelNames: [\"method\", \"route\", \"status_code\"],\n});\n\napp.use((req, res, next) =&gt; {\n  const end = httpRequestDuration.startTimer();\n  res.on(\"finish\", () =&gt; {\n    end({ method: req.method, route: req.path, status_code: res.statusCode });\n  });\n  next();\n});\n\napp.get(\"/metrics\", async (req, res) =&gt; {\n  res.set(\"Content-Type\", client.register.contentType);\n  res.end(await client.register.metrics());\n});\n</code></pre> <p>Configure Prometheus to scrape your <code>/metrics</code> endpoint, and build dashboards in Grafana.</p>","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#bonus-tips","title":"\ud83d\ude80 Bonus Tips","text":"<ul> <li>Use Alertmanager with Prometheus to get notified on anomalies</li> <li>Combine with Loki for logs and Tempo for traces</li> <li>Export metrics from databases, containers, and queues</li> </ul>","tags":["monitoring"]},{"location":"blog/2025/07/07/monitoring-your-api-with-prometheus-and-grafana/#summary","title":"\ud83d\udd1a Summary","text":"<ul> <li>\u2705 Use Prometheus + Grafana for API metrics and monitoring</li> <li>\u274c Don't expect detailed error debugging \u2014 pair with Sentry for that</li> <li>\ud83c\udfaf Lightweight, scalable, and highly customizable</li> </ul> <p>Whether you're in development or production, Prometheus + Grafana is a solid choice to keep your API observable and reliable.</p>","tags":["monitoring"]},{"location":"blog/2025/07/08/uncaught-typeerror-rawdatasome-is-not-a-function-in-react/","title":"Uncaught TypeError: rawData.some is not a function in react","text":"","tags":["TypeError"]},{"location":"blog/2025/07/08/uncaught-typeerror-rawdatasome-is-not-a-function-in-react/#uncaught-typeerror-rawdatasome-is-not-a-function-in-react","title":"Uncaught TypeError: <code>rawData.some</code> is not a function in react","text":"<p><code>Uncaught TypeError: rawData.some is not a function</code></p> <p>The error is caused as your data is a object and the table requires an Array.</p>","tags":["TypeError"]},{"location":"blog/2025/07/08/uncaught-typeerror-rawdatasome-is-not-a-function-in-react/#solved","title":"Solved","text":"<pre><code>data={ Array.isArray(data) ? data : [] }\n</code></pre> Customtable.jsx<pre><code>import { Table } from \"antd\";\n\nconst CustomTable = ({\n  loading,\n  columns,\n  data,\n  pagination,\n  onChange,\n  scroll,\n  summary,\n}) =&gt; {\n  return (\n    &lt;Table\n      scroll={scroll}\n      loading={loading}\n      columns={columns}\n      // dataSource={data}\n\n      // SOLUTION\n      dataSource={Array.isArray(data) ? data : []}\n      //\n      rowKey=\"id\"\n      pagination={pagination}\n      onChange={onChange}\n      summary={summary}\n      className=\"custom-table\"\n    /&gt;\n  );\n};\n\nexport default CustomTable;\n</code></pre>","tags":["TypeError"]},{"location":"blog/2025/07/08/uncaught-typeerror-rawdatasome-is-not-a-function-in-react/#reference","title":"Reference","text":"<ul> <li>TypeError: rawData.some is not a function</li> <li>STACKOVERFLOW, Uncaught TypeError: rawData.some is not a function REACT/ANTDESIGN</li> <li>Error when using components wrapped with forwardRef in builder.io</li> <li>Error in the <code>&lt;ForwardRef(ContainerComponent&gt;</code> component #838</li> </ul>","tags":["TypeError"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/","title":"What is a namespace in JavaScript?","text":"","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#what-is-a-namespace-in-javascript","title":"What is a namespace in JavaScript?","text":"<p>In JavaScript (and by extension, in React apps), a namespace is a container or grouping of related variables, functions, or objects under a single identifier \u2014 usually to avoid naming conflicts and improve code organization.</p>","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#example-without-namespace","title":"\ud83d\udd0d Example without namespace","text":"<pre><code>import { checkPassword, attemptFullLogin } from \"@/auth/services\";\n\ncheckPassword(...);\nattemptFullLogin(...);\n</code></pre> <p>All functions are imported individually into your file \u2014 and you have to manage names carefully to avoid conflicts with other imports.</p>","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#example-with-a-namespace","title":"Example with a namespace","text":"<pre><code>import * as authServices from \"@/auth/services\";\n\nauthServices.checkPassword(...);\nauthServices.attemptFullLogin(...);\n</code></pre> <p>Here, <code>authServices</code> is a namespace \u2014 it's just an object that groups all the functions from <code>auth/services/index.js</code>.</p> <p>You access functions like:</p> <ul> <li>\u27a1\ufe0f <code>authServices.checkPassword</code></li> <li>\u27a1\ufe0f <code>authServices.attemptTokenRefresh</code></li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#is-it-used-in-react","title":"\ud83d\udccc Is it used in React?","text":"<p>Yes \u2014 this is a JavaScript pattern, and it's commonly used in React projects (which are written in JS or TS). It's especially useful for:</p> <ul> <li>Grouping related functionality (e.g. auth, API, validation).</li> <li>Preventing naming conflicts.</li> <li>Making code more readable and modular.</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#tip-its-just-an-object","title":"\ud83e\udde0 Tip: It's just an object","text":"<pre><code>const authServices = {\n  checkPassword,\n  attemptFullLogin,\n  attemptTokenRefresh,\n  logAuthError,\n};\n</code></pre> <p>When you use:</p> <pre><code>import * as authServices from \"@/auth/services\";\n</code></pre> <p>You're importing all named exports into a single object, just like the above.</p>","tags":["JavaScript"]},{"location":"blog/2025/07/09/what-is-a-namespace-in-javascript/#when-to-use-namespace-imports","title":"When to use namespace imports?","text":"<p>Use them when:</p> <ul> <li>You have multiple related exports (like in <code>auth/services</code>).</li> <li>You want to keep your import section clean.</li> <li>You want to logically group functionality in your code.</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/","title":"Conditionally Adding Columns in React: push vs filter(Boolean)","text":"","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#conditionally-adding-columns-in-react-push-vs-filterboolean","title":"Conditionally Adding Columns in React: <code>push</code> vs <code>filter(Boolean)</code>","text":"OVERVIEW <pre><code>// USE PERMISSION Because it is user Specific.\n// DONOT USE SETTINS Keys Because it is Global settings, which applies to all.\n\nconst backOfficeCol = {\n    title: \"NEW BACKOFFICE\",\n};\n\n// const columns = showComments ? [...baseColumns, commentColumn] : baseColumns;\nconst columns =\n    showComments &amp;&amp; isDisplayBackOfficeColumn\n    ? [...baseColumns, commentColumn, backOfficeCol]\n    : showComments\n    ? [...baseColumns, commentColumn]\n    : isDisplayBackOfficeColumn\n        ? [...baseColumns, backOfficeCol]\n        : baseColumns;\n\n\nHow to optimize this, i many need to add other column to add conditionally\n\n\n\"Yes \u2014 as long as you\u2019re not mutating React state directly\". so this means if we should not direct mutate the useState hooks for example const [columns, setColumns] = useState([]). if we can't direct mutate this useState using push but we can direct mutate the local array, is this correct.\n</code></pre> <pre><code>import { PERMISSIONS } from \"@shared/constants/PERMISSIONS\";\nimport { hasPermission } from \"@shared/utils/hasPermission\";\nimport { ColumnPermission } from \"../../utils/columnPermission\";\nimport {\nBOOLEAN_STRINGS,\nSETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\nconst permissions = useSelector((state) =&gt; state.auth.permissions) || [];\n// console.log(\n//     \"PERMISSIONS: \",\n//     permissions?.includes(PERMISSIONS.CAN_VIEW_TUTORIAL),\n//     hasPermission(permissions, PERMISSIONS.CAN_VIEW_TUTORIAL)\n// );\n\nconst { value } = useSelector((state) =&gt; state?.setting);\nconst isDisplayBackOfficeColumn =\n    value[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] || BOOLEAN_STRINGS.TRUE;\n// console.log(\"isDisplayBackOfficeColumn: \", isDisplayBackOfficeColumn);\n\n// const columns = showComments ? [...baseColumns, commentColumn] : baseColumns;\n// const columns =\n//   showComments &amp;&amp; isDisplayBackOfficeColumn\n//     ? [...baseColumns, commentColumn, backOfficeCol]\n//     : showComments\n//       ? [...baseColumns, commentColumn]\n//       : isDisplayBackOfficeColumn\n//         ? [...baseColumns, backOfficeCol]\n//         : baseColumns;\n\nconst columns = ColumnPermission({\n    baseColumns,\n    condition: [\n    { permission: showComments, column: commentColumn },\n    { permission: isDisplayBackOfficeColumn, column: backOfficeCol },\n    ],\n});\n</code></pre> <pre><code>// ForexLists.jsx\n\nconst columns = showComments ? [...baseColumns, commentColumn] : baseColumns;\n\n***************************************************************************\n\n// FOR PERMISSION OF UPLOAD BUTTON\n\nimport { PERMISSIONS } from \"@shared/constants/PERMISSIONS\";\nimport { hasPermission } from \"@shared/utils/hasPermission\";\n\nconst permissions = useSelector((state) =&gt; state.auth.permissions) || [];\n\nconsole.log(\n    \"PERMISSIONS: \",\n    permissions?.includes(PERMISSIONS.CAN_VIEW_TUTORIAL),\n    hasPermission(permissions, PERMISSIONS.CAN_VIEW_TUTORIAL)\n);\n\n---------------------------------------------------------------------------\n\n// FOR VISIBILITY SETTINGS KEY\n\nimport {\nBOOLEAN_STRINGS,\nSETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\n\nconst isSerialNumNeeded =\n    value[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] || BOOLEAN_STRINGS.TRUE;\n\n{ isSerialNumNeeded === BOOLEAN_STRINGS.TRUE &amp;&amp; (\"TEST\") }\n</code></pre> <p>When building dynamic UIs in React, especially tables or lists, you\u2019ll often need to conditionally add elements to an array. Two common patterns are:</p> <ul> <li>Using <code>.push()</code> to build the array step-by-step</li> <li>Using a declarative <code>.filter(Boolean)</code> pattern</li> </ul> <p>This post compares the two and shows best practices when working in React.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#problem-building-dynamic-columns","title":"Problem: Building Dynamic Columns","text":"<p>For example, say you have a table and want to show columns based on user settings or permissions:</p> <pre><code>const columns = [...baseColumns];\n\nif (showComments) {\n  columns.push(commentColumn);\n}\n\nif (isDisplayBackOfficeColumn) {\n  columns.push(backOfficeCol);\n}\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#is-push-safe-in-react","title":"Is <code>push()</code> Safe in React?","text":"<p>Yes \u2014 as long as you\u2019re not mutating React state directly.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#safe-usage","title":"\u2705 Safe usage:","text":"<pre><code>const columns = [...baseColumns]; // Creates a new array\ncolumns.push(commentColumn); // Modifies local array only\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#unsafe-usage","title":"\u274c Unsafe usage:","text":"<pre><code>state.columns.push(commentColumn); // Mutates state directly \u2014 avoid this!\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#instead-use","title":"Instead, use:","text":"<pre><code>setColumns((prev) =&gt; [...prev, commentColumn]);\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#using-filterboolean-instead","title":"Using <code>filter(Boolean)</code> Instead","text":"<p>Another approach is to use a declarative array with conditional entries:</p> <pre><code>const columns = [\n  ...baseColumns,\n  showComments &amp;&amp; commentColumn,\n  isDisplayBackOfficeColumn &amp;&amp; backOfficeCol,\n].filter(Boolean);\n</code></pre> Pros: <ul> <li>Concise</li> <li>Clean for simple conditions</li> </ul> Cons: <ul> <li>Harder to debug</li> <li>Can become unreadable with complex logic</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#which-one-should-you-use","title":"Which One Should You Use?","text":"Pattern When to Use <code>.push()</code> Use when logic is complex or conditions grow over time <code>.filter(Boolean)</code> Use for 1\u20132 simple flags or inline logic","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#final-thoughts","title":"Final Thoughts","text":"<p>In most React projects, clarity beats cleverness. Start with <code>.push()</code> for better readability and expandability \u2014 then refactor if needed.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#note","title":"NOTE","text":"<p>\u26a0\ufe0f Note About <code>isDisplayBackOfficeColumn</code></p> <p>This line:</p> <pre><code>const isDisplayBackOfficeColumn =\n  value[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] || BOOLEAN_STRINGS.TRUE;\n</code></pre> <p>Is risky, because it always falls back to <code>BOOLEAN_STRINGS.TRUE (\"true\")</code>, which will make the condition always true, even if the <code>setting</code> is missing or explicitly <code>\"false\"</code>.</p> <p>If you're storing booleans as strings (<code>\"true\"</code> / <code>\"false\"</code>), compare explicitly:</p> <pre><code>const isDisplayBackOfficeColumn =\n  value[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] === BOOLEAN_STRINGS.TRUE;\n</code></pre> <p>\u2705 This ensures the column is only added when the setting is actually <code>\"true\"</code>.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#tips","title":"TIPS","text":"<p>Separate <code>Utils</code></p> <p>Yes, absolutely \u2014 extracting dynamic column-building logic into a reusable utility function is a great idea, especially if you're working with multiple tables or need consistent logic across your React app.</p> Why Move to a Utility? <ul> <li>Keeps components clean</li> <li>Centralizes logic (easy to test and update)</li> <li>Reusable across multiple components or pages</li> </ul> <p>\ud83d\udee0\ufe0f Example: Utility Function</p> <p>Let\u2019s say you want to build columns based on flags like <code>showComments</code>, <code>showBackOfficeCol</code>, and maybe more in the future.</p> <ol> <li> <p><code>utils/columnsBuilder.js</code></p> <pre><code>export function buildColumns({\n  baseColumns,\n  showComments,\n  showBackOfficeCol,\n}) {\n  const columns = [...baseColumns];\n\n  if (showComments) {\n    columns.push({ title: \"Comments\" }); // or `commentColumn`\n  }\n\n  if (showBackOfficeCol) {\n    columns.push({ title: \"NEW BACKOFFICE\" }); // or `backOfficeCol`\n  }\n\n  // Extend for other conditional columns\n  // if (hasPermission(...)) {\n  //   columns.push({ title: \"Confidential\" });\n  // }\n\n  return columns;\n}\n</code></pre> </li> <li> <p>Use It in Your Component</p> <pre><code>import { buildColumns } from \"../utils/columnsBuilder\";\n\nconst columns = buildColumns({\n  baseColumns,\n  showComments,\n  showBackOfficeCol:\n    value[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] === BOOLEAN_STRINGS.TRUE,\n});\n</code></pre> <p>\u2705 You can also extend it to support:</p> <ul> <li>Dynamic column configs</li> <li>Role/permission checks</li> <li>Feature flags</li> <li>Memoization (if needed for performance)</li> </ul> </li> </ol> <p>\ud83d\udd01 Optional: Make It More Dynamic</p> <p>If you want a truly flexible version, use an array of \"column conditions\" and map through them:</p> <pre><code>export function buildColumns({ baseColumns, conditionals = [] }) {\n  const columns = [...baseColumns];\n\n  conditionals.forEach(({ condition, column }) =&gt; {\n    if (condition) columns.push(column);\n  });\n\n  return columns;\n}\n</code></pre> <p>Then call it like:</p> <pre><code>buildColumns({\n  baseColumns,\n  conditionals: [\n    { condition: showComments, column: commentColumn },\n    { condition: isDisplayBackOfficeColumn, column: backOfficeCol },\n    // add more here\n  ],\n});\n</code></pre> MOST DYBAMIC FULL CODE <pre><code>// utils/columnsBuilder.js\nexport function buildColumns({ baseColumns, conditionals = [] }) {\n    const columns = [...baseColumns];\n\n    conditionals.forEach(({ condition, column }) =&gt; {\n        if (condition) {\n            columns.push(column);\n        }\n    });\n\n    return columns;\n}\n</code></pre> <pre><code>import React from \"react\";\nimport { buildColumns } from \"./utils/columnsBuilder\";\n\nconst baseColumns = [\n{ title: \"ID\", key: \"id\" },\n{ title: \"Name\", key: \"name\" },\n];\n\nconst commentColumn = { title: \"Comments\", key: \"comments\" };\nconst backOfficeCol = { title: \"NEW BACKOFFICE\", key: \"backoffice\" };\n\nfunction MyTableComponent({ showComments, isDisplayBackOfficeColumn }) {\n    const columns = buildColumns({\n        baseColumns,\n        conditionals: [\n            { condition: showComments, column: commentColumn },\n            { condition: isDisplayBackOfficeColumn, column: backOfficeCol },\n        ],\n    });\n\n    return (\n        &lt;table&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;\n                {columns.map((col) =&gt; (\n                    &lt;th key={col.key}&gt;{col.title}&lt;/th&gt;\n                ))}\n                &lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;{/* Render rows here */}&lt;/tbody&gt;\n        &lt;/table&gt;\n    );\n}\n\nexport default MyTableComponent;\n</code></pre> <p>\u2705 Example: Using <code>useMemo</code> with <code>buildColumns</code></p> <pre><code>import { useMemo } from 'react';\nimport { buildColumns } from './utils/columnsBuilder';\n\nconst columns = useMemo(() =&gt; {\nreturn buildColumns({\n    baseColumns,\n    conditionals: [\n    { condition: showComments, column: commentColumn },\n    { condition: isDisplayBackOfficeColumn, column: backOfficeCol },\n    ]\n});\n}, [baseColumns, showComments, isDisplayBackOfficeColumn]);\n</code></pre> <p>\ud83d\udccc This ensures buildColumns() only re-runs when one of the dependencies changes.</p> <p>\ud83e\udde0 Rule of Thumb</p> <p>If you're passing <code>columns</code> to a heavy child (like a table component), use <code>useMemo</code>. Otherwise, skip it until you measure a problem.</p> <p>\u2705 Final Tip</p> <p>Put this kind of logic in a shared utility file like:</p> <pre><code>/src/utils/columnsBuilder.js\n</code></pre> <p>Or organize by domain if needed:</p> <pre><code>/src/features/table/utils/buildTableColumns.js\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#questions","title":"QUESTIONS","text":"<p><code>Yes \u2014 as long as you\u2019re not mutating React state directly</code>. so this means if we should not direct mutate the useState hooks for example const [columns, setColumns] = useState([]). if we can't direct mutate this useState using push but we can direct mutate the local array, is this correct.</p> <p>Yes, you've got the right idea \u2014 let\u2019s clarify it to remove all ambiguity.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#react-usestate-immutability-is-crucial","title":"\u2705 React <code>useState</code>: Immutability Is Crucial","text":"<pre><code>const [columns, setColumns] = useState([]);\n</code></pre> <p>With <code>useState</code>, you must never mutate the state variable directly.</p> <p>\u274c Do not do this:</p> <pre><code>columns.push(newColumn); // \u274c directly mutating the state\nsetColumns(columns); // \u274c React might not detect this change\n</code></pre> <p>This mutates the original array in memory, and React may not trigger a re-render because it checks for reference changes, not internal content.</p> <p>\u2705 Do this instead:</p> <pre><code>setColumns([...columns, newColumn]); // \u2705 creates a new array reference\n</code></pre> <p>or using <code>.push()</code> safely:</p> <pre><code>setColumns((prev) =&gt; {\n  const updated = [...prev]; // \u2705 clone the old array\n  updated.push(newColumn); // \u2705 modify the new array\n  return updated; // \u2705 React sees a new array reference\n});\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#local-arrays-are-safe-to-mutate","title":"\u2705 Local Arrays Are Safe to Mutate","text":"<p>If you create a new array locally (e.g., not from <code>useState</code>), then mutating it with <code>.push()</code> is totally fine:</p> <pre><code>const columns = [...baseColumns]; // new local array\n\nif (condition) {\n  columns.push(commentColumn); // \u2705 safe to push\n}\n</code></pre> <p>Here, you\u2019re not touching React state \u2014 you're just building a new array from scratch in your render logic. This is safe, clean, and often the recommended way to conditionally build arrays in React.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#summary","title":"\ud83d\udd01 Summary","text":"Scenario Can Mutate? Recommended? <code>useState</code> variable (<code>columns</code>) \u274c No Use immutable updates Local array created via <code>[...]</code> \u2705 Yes Safe to mutate Props from parent \u274c No Never mutate props","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#rule-of-thumb","title":"\u2705 Rule of Thumb","text":"<p>Only mutate things you own. If React manages it (like <code>state</code> or <code>props</code>), treat it as immutable.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#extra-tip-if-using-redux-or-context","title":"\ud83d\udca1 Extra Tip: If using Redux or Context","text":"<p>If you're deriving <code>showComments</code> or <code>isDisplayBackOfficeColumn</code> from Redux or Context, those values might update often \u2014 so memoization could help avoid unnecessary recalculations even more.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/28/conditionally-adding-columns-in-react-push-vs-filterboolean/#vvip-important-topic","title":"VVIP: IMPORTANT TOPIC","text":"Danger <pre><code>const { value: currentSettings } = useSelector((state) =&gt; state?.r) || {};\n\nconsole.log(\"permissions XXX: \", currentSettings);\n\nconst isDisplayBackOfficeColumn =\ncurrentSettings[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] ||\nBOOLEAN_STRINGS.TRUE;\n</code></pre> Success <pre><code>const { permissions: currentPermissions } =\n    useSelector((state) =&gt; state?.auth) || [];\n\nconst { value: currentSettings } = useSelector((state) =&gt; state?.setting) || {};\n\nconst isDisplayBackOfficeColumn = currentSettings\n? currentSettings[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED]\n: BOOLEAN_STRINGS.FALSE;\n\n// console.log(\"permissions XXX: \", currentSettings);\nconsole.log(\"permissions XXX: \", isDisplayBackOfficeColumn);\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/","title":"JavaScript Falsy Values","text":"","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/#javascript-falsy-values","title":"JavaScript Falsy Values","text":"<p>There are 7 main falsy values in JavaScript. These are values that evaluate to <code>false</code> in a Boolean context (such as inside an <code>if</code> statement).</p>","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/#memory-trick-0-funnsy","title":"\ud83e\udde0 Memory Trick: <code>0 FUNNSY</code>","text":"<p>Use the phrase <code>0 FUNNSY</code> to remember them:</p> <ul> <li>0 \u2192 <code>0</code> (Number zero)</li> <li>F \u2192 <code>false</code> (Boolean false)</li> <li>U \u2192 <code>undefined</code> (A variable not assigned a value)</li> <li>N \u2192 <code>null</code> (Intentional absence of value)</li> <li>N \u2192 <code>NaN</code> (Not-a-Number, e.g., result of invalid math)</li> <li>S \u2192 <code>\"\"</code> (Empty string)</li> <li>Y \u2192 <code>0n</code> (BigInt zero \u2014 the \"Y\" is just a mnemonic stretch)</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/#list-of-falsy-values","title":"\ud83d\udccb List of Falsy Values","text":"<ol> <li><code>false</code> \u2013 Boolean false</li> <li><code>0</code> \u2013 Number zero</li> <li><code>-0</code> \u2013 Negative zero (also falsy)</li> <li><code>0n</code> \u2013 BigInt zero</li> <li><code>\"\"</code> \u2013 Empty string</li> <li><code>null</code> \u2013 No object value</li> <li><code>undefined</code> \u2013 Variable not assigned</li> <li><code>NaN</code> \u2013 Invalid number (e.g., <code>0 / 0</code>)</li> </ol> <p>Note: <code>-0</code> is technically distinct from <code>0</code>, but both behave the same in Boolean contexts.</p>","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/#code-example","title":"\ud83d\udcbb Code Example","text":"<pre><code>const falsyValues = [false, 0, -0, 0n, \"\", null, undefined, NaN];\n\nfalsyValues.forEach((value) =&gt; {\n  if (!value) {\n    console.log(`${String(value)} is falsy`);\n  }\n});\n</code></pre> <p>\u2705 Expected Output</p> <pre><code>false is falsy\n0 is falsy\n0 is falsy\n0 is falsy\n is falsy\nnull is falsy\nundefined is falsy\nNaN is falsy\n</code></pre>","tags":["JavaScript"]},{"location":"blog/2025/08/29/javascript-falsy-values/#why-it-matters","title":"\ud83d\udd0d Why It Matters","text":"<p>Falsy values are important in conditional logic. For example:</p> <pre><code>if (userInput) {\n  // This block only runs if userInput is truthy\n}\n</code></pre> <p>Knowing which values are falsy helps you:</p> <ul> <li>Avoid unexpected behavior</li> <li>Write cleaner, safer conditions</li> <li>Debug tricky logic errors in JS</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/","title":"Why React Hooks Can Only Run Inside Components","text":"","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#why-react-hooks-can-only-run-inside-components","title":"Why React Hooks Can Only Run Inside Components","text":"<p>Learn why React restricts hook usage to function components and how to avoid common pitfalls when working with libraries like Redux Toolkit and RTK Query.</p> Quote <p>You're not alone. This is one of the most common mistakes React developers make \u2014 especially when integrating tools like Redux Toolkit, RTK Query, or custom base queries.</p> <p>In this post, we'll explain:</p> <ul> <li>\u2705 What \"React component context\" means</li> <li>\ud83d\udeab Why you can't use hooks in plain functions</li> <li>\u2705 What to do instead</li> </ul> \ud83d\udea6 The Error Explained <p>Let\u2019s start with the exact error:</p> <p>\u274c Invalid hook call. Hooks can only be called inside of the body of a function component.</p> <p>This error means you're calling a hook \u2014 like <code>useState</code>, <code>useEffect</code>, or <code>useLogoutAppMutation</code> \u2014 in the wrong place.</p> <p>React is very strict about where hooks can be used. They're not normal functions \u2014 they rely on being called in a consistent order every render. That only happens inside a React component function.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#what-is-react-component-context","title":"\ud83e\udde0 What Is \"React Component Context\"?","text":"<p>When we say:</p> <p>\u201cReact hooks can only run inside the body of a function component,\u201d</p> <p>We're referring to the special environment where React is rendering your UI.</p> <p>That includes:</p> <pre><code>// \u2705 THIS IS OK\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  ...\n}\n</code></pre> <p>But NOT:</p> <pre><code>// \u274c THIS IS NOT OK\nconst [logoutApp] = useLogoutAppMutation(); // Will throw an error\n</code></pre> <p>Because the second example is not a React component \u2014 it's just a normal JavaScript function. React doesn\u2019t control or track its lifecycle.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#common-pitfall-rtk-query-hooks-in-utility-functions","title":"\ud83d\udd27 Common Pitfall: RTK Query Hooks in Utility Functions","text":"<p>Imagine you're building a logout helper like this:</p> <pre><code>import { useLogoutAppMutation } from '@features/auth/services/authApi';\n\nexport const performLogout = () =&gt; {\n  const [logoutApp] = useLogoutAppMutation(); // \u274c Invalid hook call!\n  ...\n};\n</code></pre> <p>\ud83d\udea8 This will throw an error.</p> <p>Even though <code>performLogout</code> looks like a utility, React has no way to track that function. It\u2019s not being rendered by React, so hook usage is invalid.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#how-to-fix-it","title":"\u2705 How to Fix It","text":"<p>There are two correct patterns:</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#1-use-the-hook-in-a-react-component","title":"1. \u2705 Use the Hook in a React Component","text":"<pre><code>function LogoutButton() {\n  const [logoutApp] = useLogoutAppMutation();\n\n  const handleLogout = () =&gt; {\n    logoutApp()\n      .unwrap()\n      .then(() =&gt; {\n        // handle post-logout logic\n      });\n  };\n\n  return &lt;button onClick={handleLogout}&gt;Logout&lt;/button&gt;;\n}\n</code></pre>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#2-use-the-rtk-endpoint-as-a-thunk-in-non-react-code","title":"2. \u2705 Use the RTK Endpoint as a Thunk in Non-React Code","text":"<p>If you're in middleware, base query, or utility function, dispatch the endpoint manually:</p> <pre><code>import { authApi } from \"@features/auth/services/authApi\";\n\nexport const performLogout = async (dispatch) =&gt; {\n  await dispatch(authApi.endpoints.logoutApp.initiate()).unwrap();\n\n  dispatch(clearState());\n  // etc.\n};\n</code></pre> <p>This avoids the use of hooks altogether \u2014 and is perfectly safe outside React.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#why-react-enforces-this","title":"\u2699\ufe0f Why React Enforces This","text":"<p>React uses a call order mechanism to track hooks internally. It expects that:</p> <ol> <li>Hooks are always called in the same order</li> <li>Hooks are not conditional</li> <li>Hooks live in components or custom hooks</li> </ol> <p>If you break these rules, React can't match your <code>useState</code> or <code>useEffect</code> calls to internal state slots \u2014 leading to bugs, or crashes.</p> <p>React throws this error to protect you.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#recap","title":"\u2705 Recap","text":"\u2705 Safe \ud83d\udeab Not Safe <code>useX()</code> inside a component <code>useX()</code> in a utility file <code>dispatch(api.endpoints.x.initiate())</code> Hook in a baseQuery Custom hooks used inside components Hooks in plain JS helpers","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#final-thoughts","title":"\ud83d\udcac Final Thoughts","text":"<p>React hooks are powerful \u2014 but only when used in the right context.</p> <p>When you're dealing with non-UI logic (like logout flows, base queries, thunks), don't reach for a hook. Instead, use the tools provided by Redux and RTK Query in a dispatchable way.</p> <p>This keeps your code clean, safe, and React-compliant.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#theory","title":"THEORY","text":"","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#what-does-react-component-context-mean","title":"\ud83d\udd0d What does \u201cReact component context\u201d mean?","text":"<p>When people say \u201cReact component context\u201d, they\u2019re referring to the environment where React is actively rendering a component. That\u2019s the only place where React Hooks are allowed to run.</p> <p>Hooks like:</p> <ul> <li><code>useState</code></li> <li><code>useEffect</code></li> <li><code>useDispatch</code></li> <li><code>useSelector</code></li> <li><code>useLogoutAppMutation</code> (from RTK Query)</li> </ul> <p>These can only be used inside a function component or a custom hook that\u2019s ultimately called from a component. For example:</p> <pre><code>function MyComponent() {\n  const [logoutApp] = useLogoutAppMutation(); // \u2705 OK\n  ...\n}\n</code></pre> <p>But not here:</p> <pre><code>// Outside of a component\nconst [logoutApp] = useLogoutAppMutation(); // \u274c Will throw \"Invalid hook call\"\n</code></pre>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#what-is-axiosbasequery","title":"\ud83e\udd16 What is <code>axiosBaseQuery</code>?","text":"<p>In RTK Query, a custom <code>axiosBaseQuery</code> is a plain JavaScript function that acts as the data fetching layer.</p> <p>Example:</p> <pre><code>export const axiosBaseQuery = async (args, api, extraOptions) =&gt; {\n  // This is NOT a React component.\n};\n</code></pre> <p>This function is:</p> <ul> <li>Not a React component</li> <li>Not rendered by React</li> <li>Not part of the React lifecycle</li> </ul> <p>So you can't use React Hooks here.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#so-what-happens-if-you-do-use-a-hook","title":"\u26a0\ufe0f So What Happens If You Do Use a Hook?","text":"<p>If you call a hook like <code>useLogoutAppMutation()</code> inside <code>axiosBaseQuery</code> or another non-component:</p> <pre><code>const [logoutApp] = useLogoutAppMutation(); // \u274c \u274c \u274c\n</code></pre> <p>You'll get this error:</p> <pre><code>Error: Invalid hook call. Hooks can only be called inside the body of a function component.\n</code></pre> <p>Because React has rules to prevent misuse of hooks \u2014 it uses the call order to track internal state, so calling hooks outside a component breaks everything.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#whats-the-solution","title":"\u2705 What\u2019s the Solution?","text":"<p>Instead of using this (which only works in components):</p> <pre><code>const [logoutApp] = useLogoutAppMutation(); // \u274c\n</code></pre> <p>Use the RTK Query endpoint directly via <code>dispatch</code>, which works anywhere:</p> <pre><code>dispatch(authApi.endpoints.logoutApp.initiate());\n</code></pre> <p>This is safe because it\u2019s not a hook \u2014 it\u2019s just a thunk action you can dispatch from anywhere (even <code>axiosBaseQuery</code> or Redux middleware).</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#analogy","title":"\ud83d\udd01 Analogy","text":"<p>Think of Hooks as power tools that only work when plugged into a React wall socket (i.e., inside a component). If you try to use them in a plain JavaScript function, it's like trying to use a power drill in the middle of a forest with no electricity \u2014 it won\u2019t work, and you\u2019ll get an error.</p>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#tldr","title":"\u2705 TL;DR","text":"Concept Meaning React component context A function that React is actively rendering (a component or a custom hook used in a component) Hooks can only run inside this Otherwise, React throws an error <code>axiosBaseQuery</code> is outside of this It\u2019s a plain JS function, not a component \u2705 Use <code>dispatch(authApi.endpoints.logoutApp.initiate())</code> Safe \u2014 not a hook","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/09/21/why-react-hooks-can-only-run-inside-components/#last-suggestion","title":"LAST SUGGESTION","text":"<p>\ud83e\udd4a The Two Options</p> <p>Option 1: Everything in <code>performLogout()</code></p> <pre><code>await dispatch(authApi.endpoints.logoutApp.initiate()).unwrap();\n</code></pre> <ul> <li>This means <code>performLogout()</code> handles the logout API call and the Redux state cleanup.</li> <li>No separate utility (<code>handleFullLogout</code>) needed.</li> </ul> <p>Option 2: Split into utility (handleFullLogout)</p> <pre><code>await handleFullLogout(dispatch); // &lt;- API call is moved to a utility\n</code></pre> <ul> <li>The API logic is separated into its own function.</li> <li><code>performLogout()</code> handles state clearing only.</li> <li>More modular and testable.</li> </ul> <p>\u2705 Recommendation</p> <p>\ud83d\udc51 Use Option 2: Utility Function (<code>handleFullLogout</code>)</p> <p>Why?</p> Benefit Explanation Separation of Concerns You isolate API logic from Redux cleanup. Easier to reason about. Reusability You can call <code>handleFullLogout(dispatch)</code> elsewhere if needed (e.g. from other flows like token expiry or idle timeout). Clean Code Each function does one thing: <code>handleFullLogout()</code> logs out via API, <code>performLogout()</code> resets app state. Testability Easier to mock and unit test the logout API separately from the Redux logic. Scalability If the logout API logic grows (e.g., error handling, logging out from multiple services), it\u2019s cleanly contained. <p>\ud83e\udde0 Example of When This Helps</p> <p>Let\u2019s say in the future you want to handle logout from multiple places:</p> <pre><code>// idleTimeoutHandler.js\nimport { handleFullLogout } from \"./logoutUser\";\n\nawait handleFullLogout(dispatch);\n// maybe skip some Redux clears depending on context\n</code></pre> <p>With Option 2, that\u2019s easy and avoids duplication.</p> <p>\ud83e\uddf9 Bottom Line</p> <p>\u2705 Use Option 2 \u2014 split the logout API call into <code>handleFullLogout(dispatch)</code> for cleaner, scalable, and testable code.</p> <p>If you're good with it, I can help you:</p> <ul> <li>Add unit tests</li> <li>Add TypeScript typings</li> <li>Create a fallback retry mechanism in <code>handleFullLogout</code></li> </ul> <p>Let me know!</p> <pre><code>\u251c\u2500\u2500 shared/\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 rememberMe.js\n\u2502       \u251c\u2500\u2500 logger.js\n\u2502       \u251c\u2500\u2500 logoutUser.js        &lt;-- \u2705 utility for logout API\n\u2502       \u2514\u2500\u2500 logoutHelper.js      &lt;-- \u2705 main logout function\n</code></pre> <pre><code>// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\n// \u2705 Only handles the API call\nexport const handleFullLogout = async (dispatch) =&gt; {\n  return await dispatch(authApi.endpoints.logoutApp.initiate()).unwrap();\n};\n</code></pre> <pre><code>// @shared/utils/logoutHelper.js\n\nimport { logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\nimport { logoutFromIdle } from \"@features/idle/services/idleSlice\";\nimport { stopSignalR } from \"@features/notifications/services/chatThunks\";\nimport { clearBase64Data } from \"@features/profile/services/profileSlice\";\n\nimport rememeberMe from \"@shared/utils/rememberMe\";\nimport logger from \"@shared/utils/logger\";\nimport { handleFullLogout } from \"./logoutUser\"; // \u2705 API-only utility\n\nexport const performLogout = async (dispatch) =&gt; {\n  try {\n    // \ud83d\udd10 1. Perform logout API call\n    await handleFullLogout(dispatch);\n\n    // \ud83d\udd04 2. Reset client-side state\n    dispatch(logout());\n    dispatch(stopSignalR());\n    dispatch(logoutFromIdle());\n    dispatch(resetState());\n    dispatch(clearGlobalSetting());\n    dispatch(clearBageCount());\n    dispatch(clearBase64Data());\n    rememeberMe();\n\n    // Optional: redirect, toast, etc.\n  } catch (err) {\n    logger.error({ msg: \"Logout API failed\", err });\n  }\n};\n</code></pre>","tags":["react","hooks","architecture","rtk-query"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/","title":"Code Refactoring vs. Code Optimization in React","text":"","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#code-refactoring-vs-code-optimization-in-react","title":"Code Refactoring vs. Code Optimization in React","text":"<p>When building large-scale React applications, it's crucial to understand the difference between code refactoring and code optimization. While they often go hand in hand, they serve different purposes and solve different types of problems.</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#what-is-code-refactoring","title":"\ud83d\udd0d What is Code Refactoring?","text":"<p>Refactoring is the process of restructuring existing code without changing its external behavior. The goal is to improve the readability, maintainability, and reusability of the code.</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#examples-of-refactoring-in-react","title":"\u2728 Examples of Refactoring in React:","text":"<ul> <li>Breaking down a large component into smaller components</li> <li>Creating custom hooks to extract repeated logic</li> <li>Renaming unclear variable or prop names</li> <li>Moving files into more organized folder structures</li> </ul> <p>\u2705 Refactoring does not affect performance, but it makes code easier to work with.</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#what-is-code-optimization","title":"\u26a1 What is Code Optimization?","text":"<p>Optimization focuses on improving the performance of the application \u2014 making it faster, more efficient, and less resource-intensive.</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#examples-of-optimization-in-react","title":"\ud83d\ude80 Examples of Optimization in React:","text":"<ul> <li>Memoizing components with <code>React.memo</code></li> <li>Preventing unnecessary re-renders using <code>useMemo</code> and <code>useCallback</code></li> <li>Virtualizing large lists with <code>react-window</code></li> <li>Lazy loading components with <code>React.lazy</code> and <code>Suspense</code></li> <li>Reducing bundle size via dynamic imports</li> </ul> <p>\u2705 Optimization may change how the code behaves under the hood, typically to improve speed or reduce memory usage.</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#key-differences","title":"\ud83e\udde0 Key Differences","text":"Aspect Code Refactoring Code Optimization Purpose Improve code structure Improve performance Changes Behavior? \u274c No \u2705 Possibly (more efficient) Tools Custom hooks, renaming, restructuring Memoization, virtualization, lazy load When to Use Messy or duplicated code Sluggish UI, large data, slow renders","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#do-they-overlap","title":"\ud83d\udd01 Do They Overlap?","text":"<p>Yes! Often, you'll start with refactoring and end up optimizing.</p> <p>Example: Extracting data-fetching logic into a custom hook (refactor) \u2192 Adding caching or memoization to the hook (optimize).</p>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#best-practices","title":"\ud83e\uddea Best Practices","text":"<ul> <li>\u2705 Start with refactoring to make your codebase clean.</li> <li>\u26a0\ufe0f Only optimize after measuring performance bottlenecks.</li> <li>\ud83d\udd0d Use tools like React DevTools and Redux DevTools to profile and debug.</li> </ul>","tags":["JavaScript"]},{"location":"blog/2025/12/18/code-refactoring-vs-code-optimization-in-react/#conclusion","title":"\ud83d\udccc Conclusion","text":"<p>While code refactoring makes your React code cleaner and more maintainable, code optimization makes it faster and more efficient. Mastering both is essential for building high-performance, scalable React applications.</p> <p>Tags: <code>react</code>, <code>performance</code>, <code>refactoring</code>, <code>optimization</code>, <code>frontend</code></p>","tags":["JavaScript"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/","title":"Adding a Loader to Your React Button Clicks","text":"","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#adding-a-loader-to-your-react-button-clicks","title":"Adding a Loader to Your React Button Clicks","text":"<p>In modern web applications, providing a smooth user experience is crucial. One effective way to enhance that experience is by implementing loaders during asynchronous actions. This blog will walk you through adding a loader to a button click in your React application, ensuring users know that their action is being processed.</p> <p>Adding a Loader to Your React Button Clicks: A Simple Guide</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#why-use-loaders","title":"Why Use Loaders?","text":"<p>Loaders indicate to users that an action is in progress, helping to manage expectations. Without loaders, users may think the application is unresponsive, leading to frustration. Implementing loaders can significantly improve user satisfaction and engagement.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#step-by-step-implementation","title":"Step-by-Step Implementation","text":"<ol> <li> <p>Manage Loading State:</p> <p>Start by creating a state variable to track whether the loader should be displayed. In your React component, use <code>useState</code> to create an <code>isLoading</code> variable.</p> <pre><code>const [isLoading, setIsLoading] = useState(false);\n</code></pre> </li> <li> <p>Set the Loader State on Click:</p> <p>When the button is clicked, set the loading state to <code>true</code>. This indicates that the action has started.</p> <pre><code>const handleClick = async () =&gt; {\n  setIsLoading(true);\n  // Your async action here\n};\n</code></pre> </li> <li> <p>Perform Your Action:</p> <p>Dispatch your action (e.g., a Redux action) inside the <code>handleClick</code> function. Use <code>try-catch</code> to handle any errors that may occur during the process.</p> </li> <li> <p>Reset the Loader State:</p> <p>In the <code>finally</code> block of your <code>try-catch</code>, reset the loading state to <code>false</code> once the action completes, whether successful or not.</p> </li> <li> <p>Render the Loader:</p> <p>Conditionally render a loader UI based on the <code>isLoading</code> state. You can use a simple text loader or a spinner.</p> <pre><code>{\n  isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;;\n}\n</code></pre> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#example-code","title":"Example Code","text":"<p>Here\u2019s a concise example of a button that shows a loader when clicked:</p> <pre><code>const YourComponent = () =&gt; {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = async () =&gt; {\n    setIsLoading(true);\n    try {\n      await dispatchYourAsyncAction();\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleClick} disabled={isLoading}&gt;\n        {isLoading ? \"Loading...\" : \"Submit\"}\n      &lt;/button&gt;\n      {isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;}\n    &lt;/div&gt;\n  );\n};\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#conclusion","title":"Conclusion","text":"<p>Implementing loaders in your React application enhances user experience by providing visual feedback during asynchronous operations. By following the steps outlined above, you can easily integrate a loader into your button clicks, ensuring your users stay informed and engaged. Remember, a smooth experience keeps users coming back!</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#additional","title":"Additional","text":"<p>To implement a loader after clicking a button in your React application, you can follow these steps:</p> <ol> <li> <p>Manage Loading State: Use a state variable to track whether the loader should be displayed.</p> </li> <li> <p>Set the Loader State: Set the loader state to <code>true</code> when the button is clicked and reset it when the asynchronous action completes.</p> </li> <li> <p>Display the Loader: Conditionally render the loader based on the loading state.</p> </li> </ol> Example ImplementationKey Steps ExplainedNotes <p>Here\u2019s a complete example based on your code snippet:</p> <pre><code>import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { instanceChatAdd } from 'yourActions'; // adjust the import according to your setup\n\nconst YourComponent = ({ formType, module, body, isDashbord, setInternalVisible }) =&gt; {\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(false); // Step 1: Loader state\n\n    const handleClick = async () =&gt; {\n        setIsLoading(true); // Step 2: Show loader\n        console.log(\"trying.....\");\n\n        try {\n            if (formType !== \"newCutting\" &amp;&amp; module !== \"Circular_Planning\") {\n                await dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n            } else if (module === \"Circular_Planning\") {\n                let circulayPayload = {\n                    ...body,\n                    IsCircularPlanningRequestForApproval: true,\n                };\n                await dispatch(instanceChatAdd(circulayPayload, isDashbord, setInternalVisible));\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            // Handle the error (e.g., show a notification)\n        } finally {\n            setIsLoading(false); // Step 3: Hide loader after the action\n        }\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleClick} disabled={isLoading}&gt;\n                {isLoading ? 'Loading...' : 'Submit'}\n            &lt;/button&gt;\n            {isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;} {/* Step 4: Loader UI */}\n        &lt;/div&gt;\n    );\n};\n\nexport default YourComponent;\n</code></pre> <ol> <li> <p>Loader State: <code>const [isLoading, setIsLoading] = useState(false);</code> initializes a state variable to manage the loading state.</p> </li> <li> <p>Handle Click: In the <code>handleClick</code> function, <code>setIsLoading(true);</code> shows the loader when the button is clicked. The asynchronous action is dispatched using <code>await</code>.</p> </li> <li> <p>Error Handling: If an error occurs, it is logged, and you can also implement additional error handling as needed.</p> </li> <li> <p>Loader UI: The loader is conditionally rendered based on the <code>isLoading</code> state. You can customize the loader\u2019s appearance with CSS.</p> </li> </ol> <ul> <li>Ensure your action creators (like <code>instanceChatAdd</code>) return a promise if you want to use <code>await</code>.</li> <li>You may want to add more robust error handling and user feedback for a better user experience.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/","title":"API Calls Cancelation in React","text":"","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#api-calls-cancelation-in-react","title":"API Calls Cancelation in React","text":"<p>In React, API calls do not automatically get canceled when a component unmounts. If you initiate an API call and the component unmounts before the call completes, it can lead to issues such as trying to update the state of an unmounted component, which can cause warnings or memory leaks.</p> <p>Do I need to cancel API calls in React when a component unmounts, or does React handle this automatically?</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#introduction","title":"Introduction","text":"<p>When using APIs in React components, it's important to consider what happens when a component unmounts. This document explains whether you need to manually cancel API calls and how to handle cleanup in your components.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#do-you-need-to-cancel-api-calls","title":"Do You Need to Cancel API Calls?","text":"<p>React does not automatically cancel API calls when a component unmounts. If an API call is still in progress when the component is unmounted, you may encounter memory leaks or attempts to update the state of an unmounted component.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#risks-of-not-canceling-api-calls","title":"Risks of Not Canceling API Calls","text":"<ol> <li>Memory Leaks: Unhandled responses may keep the component in memory longer than necessary.</li> <li>State Updates on Unmounted Components: Attempting to update the state of a component that is no longer in the DOM can lead to errors and warnings.</li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#how-to-cancel-api-calls","title":"How to Cancel API Calls","text":"<p>There are several strategies to handle API calls and cleanup in React:</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#1-using-abortcontroller","title":"1. Using <code>AbortController</code>","text":"<p>The <code>AbortController</code> API allows you to abort a fetch request.</p> <pre><code>import React, { useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  useEffect(() =&gt; {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const fetchData = async () =&gt; {\n      try {\n        const response = await fetch(\"https://api.example.com/data\", {\n          signal,\n        });\n        const data = await response.json();\n        // Handle your data\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Fetch aborted\");\n        } else {\n          // Handle other errors\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      controller.abort(); // Cleanup on unmount\n    };\n  }, []);\n\n  return &lt;div&gt;My Component&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#2-using-useeffect-cleanup-function","title":"2. Using <code>useEffect</code> Cleanup Function","text":"<p>You can also manage state updates with a cleanup function in <code>useEffect</code>.</p> <pre><code>import React, { useState, useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const [data, setData] = useState(null);\n  let isMounted = true;\n\n  useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n      const response = await fetch(\"https://api.example.com/data\");\n      const result = await response.json();\n      if (isMounted) {\n        setData(result);\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      isMounted = false; // Set the flag to false on unmount\n    };\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : \"Loading...\"}&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#conclusion","title":"Conclusion","text":"<p>In summary, you should manage API calls carefully to avoid potential issues when components unmount. Using <code>AbortController</code> or setting flags in a cleanup function are effective strategies for preventing unwanted state updates.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#references","title":"References","text":"<ul> <li>React Documentation on Effects</li> <li>Using AbortController</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/","title":"Approach to loading state in createSlice in Redux Toolkit","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#approach-to-loading-state-in-createslice-in-redux-toolkit","title":"Approach to loading state in <code>createSlice</code> in Redux Toolkit","text":"<p>Both slices of code you provided demonstrate effective use of Redux Toolkit for managing state in a React application, but they serve different purposes and have slight variations in implementation.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#overview","title":"Overview","text":"<p>Here's a breakdown of each:</p> Blog SliceTodo Slice <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchBlogs } from \"./service\";\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null;\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload;\n            });\n    },\n});\n\nexport const { actions, reducer } = blogSlice;\nexport default reducer;\n</code></pre> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchTodoData } from \"./api\";\n\nexport const getTodoData = createAsyncThunk(\"todo/getData\", fetchTodoData);\n\nconst todoSlice = createSlice({\n    name: \"todo\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n    },\n    reducers: {},\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(getTodoData.pending, (state) =&gt; {\n                state.loading = true;\n                state.error = null; // Reset error\n            })\n            .addCase(getTodoData.fulfilled, (state, action) =&gt; {\n                state.loading = false;\n                state.items = action.payload;\n            })\n            .addCase(getTodoData.rejected, (state, action) =&gt; {\n                state.loading = false;\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport default todoSlice.reducer;\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#comparison","title":"Comparison","text":"<ol> <li> <p>Structure and State Management:</p> <ul> <li>The blogSlice uses a <code>status</code> field to manage loading states, which is clear and helps in tracking the loading state (idle, loading, succeeded, failed).</li> <li>The todoSlice uses a <code>loading</code> boolean, which is also effective but less descriptive compared to the status approach.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Both slices handle error states well. The blog slice directly assigns <code>action.payload</code> on rejection, while the todo slice uses <code>action.error.message</code>. This might result in different formats of error messages based on how errors are structured in your services.</li> </ul> </li> <li> <p>Async Thunk Creation:</p> <ul> <li>The todoSlice uses <code>createAsyncThunk</code>, which is good for separating the asynchronous logic from the slice itself, making the code cleaner and more maintainable. The blogSlice assumes <code>fetchBlogs</code> is an async function, which is valid but slightly less modular.</li> </ul> </li> <li> <p>Reducer Complexity:</p> <ul> <li>Both slices are relatively simple. The choice between the two might come down to preference or project requirements. The blog slice has a more explicit state management approach with more detailed statuses</li> </ul> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<ul> <li>Best Practices: If you prioritize clarity and maintainability, the todoSlice may be slightly better due to the use of <code>createAsyncThunk</code> for async actions, which separates concerns more clearly.</li> <li>Clarity of State: If you want to manage more granular loading states, the blogSlice with its <code>status</code> field provides a richer understanding of the loading process.</li> <li>Final Choice: Ultimately, the choice depends on the specific needs of your application and your team\u2019s preferences for managing state. If your application has complex async requirements, consider using <code>createAsyncThunk</code> as in the todoSlice. If you're dealing with simpler state management or want a more explicit status, the blogSlice works well.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/","title":"Best Method to store the multiple api base in react","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#best-method-to-store-the-multiple-api-base-in-react","title":"Best Method to store the multiple api base in react","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#1-using-axiosinstancejs-alone","title":"1. Using <code>axiosInstance.js</code> Alone","text":"<p>If you only have one base URL or if all your API calls can be managed using a single Axios instance, you can stick with just <code>axiosInstance.js</code>. This is straightforward and works well for smaller applications.</p> ExampleUsage <pre><code>// services/axiosInstance.js\nimport axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n});\n\nexport default axiosInstance;\n</code></pre> <pre><code>// features/blog/service.js\nimport axiosInstance from '../../services/axiosInstance';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n    const response = await axiosInstance.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#2-using-apimanagerjs-for-multiple-apis","title":"2. Using <code>apiManager.js</code> for Multiple APIs","text":"<p>If your application interacts with multiple APIs (like a blog API and a dashboard API), using <code>apiManager.js</code> is beneficial. This allows you to create different Axios instances with their respective base URLs, making your code cleaner and more manageable.</p> ExampleUsage <pre><code>// services/apiManager.js\nimport axiosInstance from \"./axiosInstance\";\n\nconst apiManager = {\n    blog: axiosInstance.create({\n        baseURL: process.env.REACT_APP_BLOG_API_URL,\n    }),\n    dashboard: axiosInstance.create({\n        baseURL: process.env.REACT_APP_BASE_API_URL,\n    }),\n};\n\nexport default apiManager;\n</code></pre> <pre><code>// features/blog/service.js\nimport apiManager from '../../services/apiManager';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n    const response = await apiManager.blog.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n\n// features/dashboard/service.js\nimport apiManager from '../../services/apiManager';\n\nexport const fetchDashboardData = async (signal) =&gt; {\n    const response = await apiManager.dashboard.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#3-using-configjs","title":"3. Using <code>config.js</code>","text":"Example <pre><code>export const accessTokenKey = \"token\";\n\nexport const baseUrl = process.env.REACT_APP_BASE_URL;\nexport const blogBaseUrl = process.env.REACT_APP_BLOG_API_URL;\n// export const appBaseUrl = process.env.REACT_APP_BASE_URL + \"/api/app\";\n// export const rootBaseUrl = process.env.REACT_APP_BASE_URL + \"/api\";\nexport const appBaseUrl = `${baseUrl}/api/app`;\nexport const rootBaseUrl = `${baseUrl}/api`;\nexport const appNotifyUrl = process.env.REACT_APP_NOTIFY_URL;\n</code></pre> Summary: Which to Use? <p>Use <code>axiosInstance.js</code> if:</p> <ul> <li>Your application is small or only communicates with a single API.</li> <li>You want a simple setup without additional complexity.</li> </ul> <p>Use <code>apiManager.js</code> if:</p> <ul> <li>Your application interacts with multiple APIs.</li> <li>You want better organization and clearer separation of API concerns.</li> <li>You may need different configurations (e.g., different timeouts, headers) for different APIs.</li> </ul> <p>Conclusion</p> <p>For a scalable approach, especially if you foresee adding more APIs or configurations in the future, using <code>apiManager.js</code> is the better choice. It allows for cleaner code and better organization of your API calls. If you stick with just <code>axiosInstance.js</code>, it can become unwieldy as the complexity of your application grows.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/","title":"Best Practices for Managing Constants and Functions in Large React Applications","text":"","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#best-practices-for-managing-constants-and-functions-in-large-react-applications","title":"Best Practices for Managing Constants and Functions in Large React Applications","text":"<p>Use constants for fixed values to enhance readability and avoid magic numbers, and use functions for dynamic logic or reusable code to encapsulate complex operations.</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-constants-or-functions-in-react","title":"Using Constants or Functions in react","text":"","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#constants-vs-functions-overview","title":"Constants vs. Functions: Overview","text":"<ul> <li> <p>Constants: Used for values that do not change. They can make code easier to read and maintain since their purpose is clear and they can be reused throughout the application.</p> </li> <li> <p>Functions: Ideal for encapsulating logic, especially when that logic might change or requires parameters. Functions can also help prevent code duplication and improve readability by abstracting complex logic.</p> </li> </ul> <pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const {\n        transferToDailyDairyResp,\n        transferToDailyDairyLoading,\n        dailyDairyPaginationResp,\n        dailyDairyPaginationLoading,\n    } = useSelector((state) =&gt; state.dailyDiaryReducer);\n\n    // Added\n    const [\n        hasTodoDiaryBeenAdvancedSearched,\n        setHasTodoDiaryBeenAdvancedSearched,\n    ] = useState(false);\n    const [isDownloadingExcel, setIsDownloadingExcel] = useState(false);\n\n\n    const exxxcelItems = dailyDairyPaginationResp?.items || [];\n    const isDownloadExcelEnabled =\n    hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n\n\n    const buttonProps = {\n        // type: \"primary\",\n        disabled: !isDownloadExcelEnabled,\n        icon: &lt;DownloadOutlined /&gt;,\n        loading: isDownloadingExcel,\n        onClick: handleDownloadTodoExcel,\n    };\n\n    return(\n        &lt;&gt;\n            {\n                hasTodoDiaryBeenAdvancedSearched &amp;&amp; (\n                    &lt;Tooltip\n                    title={\n                        isDownloadExcelEnabled\n                        ? \"You can download Excel here\"\n                        : \"Opps, nothing to download...\"\n                    }\n                    &gt;\n                    &lt;Button\n                        {...buttonProps}\n                        // onClick={handleDownloadTodoExcel}\n                        // loading={isDownloadingExcel}\n                    /&gt;\n                    &lt;/Tooltip&gt;\n                );\n            }\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>In React, whether to use constants or functions often depends on the specific use case and the complexity of the logic. Here\u2019s a breakdown of when to use each approach:</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-constants","title":"Using Constants","text":"<p>Using constants is a good practice when:</p> <ol> <li> <p>Simple Logic: The logic is straightforward and does not require additional processing or side effects. For example:</p> <pre><code>const exxxcelItems = dailyDairyPaginationResp?.items || [];\nconst isDownloadExcelEnabled =\n  hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n</code></pre> </li> <li> <p>Readability: Keeping it as constants can improve readability, especially when they represent a clear, static condition.</p> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-functions","title":"Using Functions","text":"<p>Using functions is more appropriate when:</p> <ol> <li>Complex Logic: The condition involves more complex logic that may benefit from encapsulation.</li> <li>Reusability: If the logic is needed in multiple places, wrapping it in a function promotes reusability.</li> <li>Dynamic Calculation: If the values depend on other changing state or props that may not be available at the time of the constant declaration.</li> </ol> <p>Example of Using a Function</p> <p>If you want to encapsulate the logic in a function, it might look like this:</p> <pre><code>const shouldDownloadExcel = (hasTodoDiaryBeenAdvancedSearched, items) =&gt; {\n  return hasTodoDiaryBeenAdvancedSearched &amp;&amp; items.length &gt; 0;\n};\n\nconst exxxcelItems = dailyDairyPaginationResp?.items || [];\nconst isDownloadExcelEnabled = shouldDownloadExcel(\n  hasTodoDiaryBeenAdvancedSearched,\n  exxxcelItems\n);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#conclusion","title":"Conclusion","text":"<p>For your specific case, if the logic is simple and only used once, keeping it as constants is perfectly fine and often preferred for clarity. If you foresee the need for this logic to be more complex or reused, consider encapsulating it in a function.</p> <p>In summary, choose constants for simplicity and readability, and use functions for complexity, reusability, or dynamic calculations. Both approaches can be valid depending on your specific scenario!</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#example","title":"Example","text":"When to Use ConstantsWhen to Use FunctionsCombiningBest Practice <p>Use Constants When:</p> <ul> <li> <p>Static Values: The value does not change and will be reused. For example, configuration values or fixed strings.\"</p> <pre><code>const API_BASE_URL = \"https://api.example.com\";\nconst MAX_RETRIES = 3;\n</code></pre> </li> <li> <p>Readability: Using constants with descriptive names can improve code readability.</p> <pre><code>const STATUS_PENDING = \"pending\";\nconst STATUS_COMPLETED = \"completed\";\n</code></pre> </li> <li> <p>Avoiding Magic Numbers or Strings: To prevent hardcoding values, which can make the code difficult to understand and maintain.</p> </li> </ul> <p>Use Functions When:</p> <ul> <li> <p>Dynamic Logic: If the value needs to be computed based on input parameters or application state.</p> <pre><code>const calculateDiscount = (price, discount) =&gt; {\n    return price - (price * discount);\n};\n</code></pre> </li> <li> <p>Reusable Logic: If you find yourself repeating the same logic in multiple places, it\u2019s better to encapsulate it in a function. This also simplifies changes since you only have to update the logic in one place.</p> <pre><code>const formatCurrency = (amount) =&gt; {\n    return `$${amount.toFixed(2)}`;\n};\n</code></pre> </li> <li> <p>Complex Conditions: If the logic requires multiple steps or conditions, a function can help keep it organized and readable.</p> <pre><code>const isEligibleForDiscount = (user) =&gt; {\n    return user.isMember &amp;&amp; user.purchaseHistory.length &gt; 5;\n};\n</code></pre> </li> </ul> <p>Often, the best practice is to use a combination of both constants and functions to create clear, maintainable code. Here\u2019s how you can do that:</p> <p>Example of Combined Use</p> <ol> <li> <p>Define Constants for Fixed Values:</p> <pre><code>const DISCOUNT_RATE = 0.1; // 10% discount\nconst MAX_DISCOUNT = 50; // Maximum discount amount\n</code></pre> </li> <li> <p>Use Functions to Encapsulate Logic:</p> <pre><code>const calculateDiscount = (price) =&gt; {\n    const discount = price * DISCOUNT_RATE;\n    return discount &gt; MAX_DISCOUNT ? MAX_DISCOUNT : discount;\n};\n</code></pre> </li> <li> <p>Usage in Components:</p> <pre><code>const Checkout = ({ totalPrice }) =&gt; {\n    const discount = calculateDiscount(totalPrice);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Total: ${totalPrice}&lt;/h1&gt;\n            &lt;h2&gt;Discount: ${discount}&lt;/h2&gt;\n            &lt;h2&gt;Final Price: ${totalPrice - discount}&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre> </li> </ol> <p><code>Best Practices for Large Codebases</code></p> <ul> <li> <p>Group Related Constants and Functions:</p> <ul> <li>Organize constants and functions in modules or files based on functionality or feature. This improves discoverability and maintenance.</li> </ul> </li> <li> <p>Document Your Code:</p> <ul> <li>Use comments or documentation tools to explain what constants represent and what functions do, especially if they encapsulate complex logic.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Write unit tests for functions to ensure they behave correctly, especially when they encapsulate complex logic. Constants can be tested indirectly through functions that use them.</li> </ul> </li> <li> <p>Type Safety:</p> <ul> <li>If using TypeScript, define types for your constants and functions to improve type safety and reduce runtime errors.</li> </ul> </li> </ul> <p>Conclusion</p> <p>In large applications, the choice between constants and functions is crucial for maintaining clean, efficient, and readable code. Use constants for static values and readability, while functions should encapsulate dynamic or complex logic. Combining both effectively, organizing them in a logical structure, and adhering to best practices will help you build a scalable and maintainable codebase.</p>","tags":["Personal"]},{"location":"blog/2025/04/12/bun-vs-pnpm/","title":"Bun vs pnpm","text":"","tags":["Personal"]},{"location":"blog/2025/04/12/bun-vs-pnpm/#bun-vs-pnpm","title":"Bun vs pnpm","text":"<p>Yes, you can consider Bun as having package manager capabilities, but it is much more than just a package manager. It's actually a full JavaScript runtime environment like Node.js, and it also comes with a built-in package manager (called Bun PM) that allows you to install and manage dependencies, among other things.</p> Bun Compatibilitypnpm Compatibility <ul> <li> <p>Bun is an entirely new JavaScript runtime, not built on Node.js. It's a runtime that serves as an alternative to Node.js for running JavaScript, with better performance for certain tasks.</p> </li> <li> <p>Bun is not a replacement for Node.js but offers similar capabilities, such as a package manager, bundler, and runtime. It is built with Zig, a performance-oriented language, rather than JavaScript.</p> </li> <li> <p>Since Bun is independent of Node.js, the Node.js version does not matter when using Bun. It works with or without Node.js installed, and it has its own internal APIs and runtime for running JavaScript, unlike Node.js-based tools like npm or pnpm.</p> </li> <li> <p>Bun supports many popular Node.js APIs and packages but does not fully support everything that Node.js does (some Node-specific features may not work). You may need to adjust your codebase or check compatibility when switching to Bun.</p> </li> </ul> <ul> <li> <p>pnpm, on the other hand, is a package manager for Node.js and works directly with Node.js. It optimizes the installation and management of dependencies.</p> </li> <li> <p>Node.js version is crucial for pnpm. pnpm works in conjunction with Node.js, so you need to have a compatible Node.js version installed to use pnpm effectively. This means you need to ensure that the Node.js version is compatible with the version of pnpm you're using.</p> <ul> <li>For example, pnpm typically works with Node.js versions 14.x and later (although the specific version compatibility can vary, so it's a good idea to check pnpm's documentation).</li> </ul> </li> </ul> Bun vs. pnpm Compatibility <ol> <li> <p>Bun:</p> <ul> <li> <p>Not reliant on Node.js for its core functionality.</p> </li> <li> <p>Bun's compatibility with Node.js packages and APIs is generally good but not perfect. Some Node.js features may be unsupported or work differently in Bun.</p> </li> <li> <p>Great for speed: If you're looking for high-performance server-side JavaScript execution, Bun shines, especially for tasks like bundling and package management.</p> </li> </ul> </li> <li> <p>pnpm:</p> <ul> <li> <p>Works with Node.js and is tightly integrated into the Node.js ecosystem.</p> </li> <li> <p>Works well with existing Node.js-based tools, including build systems, bundlers, and other tools built around Node.js.</p> </li> <li> <p>Better compatibility with Node.js packages: If you rely on specific Node.js features or packages that require Node.js APIs, pnpm is the safer bet since it operates within the Node.js environment.</p> </li> </ul> </li> </ol> Which is More Compatible? <ul> <li> <p>pnpm is more compatible with Node.js projects as it is built for Node.js and ensures full compatibility with the Node.js ecosystem.</p> </li> <li> <p>Bun is less compatible with Node.js features, but it's optimized for performance and speed. While Bun supports many popular packages and Node.js APIs, it might not fully support some niche features that rely heavily on Node.js internals.</p> </li> </ul> Which One Should You Choose? <ul> <li> <p>If you're working on a project that depends on the full Node.js ecosystem, or if you need specific Node.js functionality (e.g., native modules, worker threads), pnpm would be the better choice.</p> </li> <li> <p>If you want a fast, new runtime that can handle JavaScript (like Node.js) but with better speed and bundled tools (e.g., package manager, bundler, and test runner), and you're willing to adapt to some compatibility differences, Bun could be a good fit.</p> </li> </ul> To summarize <ul> <li>Bun is more of an alternative runtime with high performance but less compatibility with Node.js features.</li> <li>pnpm is a package manager for Node.js and is fully compatible with Node.js projects.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/12/bun-vs-pnpm/#extra","title":"Extra","text":"","tags":["Personal"]},{"location":"blog/2025/04/12/bun-vs-pnpm/#bun-a-full-runtime-not-just-a-package-manager","title":"Bun: A Full Runtime, Not Just a Package Manager","text":"<ul> <li> <p>Bun as a Runtime: Bun is a JavaScript runtime built from scratch using the Zig programming language. It can run JavaScript (and TypeScript) code, much like Node.js does. Bun is designed to be fast and is aimed at improving performance across various aspects of development, including bundling, serving, and running JavaScript code.</p> </li> <li> <p>Bun as a Package Manager: Bun includes its own package manager that allows you to install dependencies. While it's capable of managing your dependencies in a similar way to <code>npm</code> or <code>pnpm</code>, its primary advantage is its speed\u2014Bun's package manager is very fast, even compared to pnpm.</p> </li> </ul> <p>When you run commands like <code>bun add</code> to install dependencies, you're using Bun PM (its own package manager). For example:</p> <pre><code>bun add react react-dom\n</code></pre> <ul> <li> <p>Bun in Development: Bun is often used in development environments for things like:</p> <ul> <li> <p>Running the application (similar to how you would use Node.js).</p> </li> <li> <p>Bundling and compiling JavaScript code.</p> </li> <li> <p>Serving development assets (via the built-in server).</p> </li> <li> <p>Running tests (Bun includes a built-in test runner).</p> </li> </ul> </li> </ul> <p>Because of its high performance and its modern features, Bun is popular in the development phase, especially for tasks such as bundling and hot-reloading.</p>","tags":["Personal"]},{"location":"blog/2025/04/12/bun-vs-pnpm/#bun-in-production","title":"Bun in Production","text":"<p>Bun is still quite new and evolving, and while it is optimized for speed and performance in development, using Bun in production is more of a decision based on your project's requirements.</p> <ul> <li> <p>Bun in Production:</p> <ul> <li> <p>Bun can be used in production for serving JavaScript applications, similar to how you would use Node.js in production.</p> </li> <li> <p>It has its own internal HTTP server (through the Bun runtime), and you can run a production server with it. However, some parts of the ecosystem and tooling may still be catching up, and compatibility with all Node.js-based production environments isn't as mature as Node.js itself.</p> </li> </ul> </li> </ul> <p>You should evaluate Bun for production use carefully:</p> <ul> <li> <p>Consider the compatibility with existing Node.js packages and features your app relies on.</p> </li> <li> <p>Check the stability and community support for the production-level features you require (e.g., long-term support, security patches, production-grade monitoring).</p> </li> </ul> <p>That being said, Bun in production is entirely feasible for many use cases, and some early adopters have used it successfully.</p> Summary <ul> <li> <p>Bun is not just a package manager; it\u2019s a full JavaScript runtime with a built-in package manager (Bun PM).</p> </li> <li> <p>Bun PM is used to install dependencies, but Bun itself is also used to run applications, bundle code, and serve assets in development.</p> </li> <li> <p>Bun can be used in production, but it's important to understand that while it's fast and promising, it\u2019s still a relatively new tool, and there might be some limitations or lack of full compatibility with certain production-level Node.js tools.</p> </li> </ul> <p>In essence, Bun is a more comprehensive tool than just a package manager, and it's being increasingly used for both development and production workloads, though it\u2019s more commonly seen in development environments at the moment.</p>","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/","title":"Canceling API Calls in React: Why It Matters","text":"","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/#canceling-api-calls-in-react-why-it-matters","title":"Canceling API Calls in React: Why It Matters","text":"<p>Yes, if you want to ensure that API requests can be canceled when a component unmounts, you should pass a cancel token for each request you want to be able to cancel.</p> <p>This is particularly useful in scenarios where:</p> <ul> <li>A component may unmount before the request completes, preventing potential memory leaks.</li> <li>You want to avoid updating state on an unmounted component, which can lead to errors.</li> </ul> <p>Each request needs its own cancel token, so if you have multiple API calls in a component, you should create a separate cancel token for each one. Here's an example of how you might handle this:</p> <pre><code>const MyComponent = () =&gt; {\n  const dispatch = useDispatch();\n\n  useEffect(() =&gt; {\n    const source1 = axios.CancelToken.source();\n    const source2 = axios.CancelToken.source();\n\n    dispatch(fetchFirstApi(source1.token));\n    dispatch(fetchSecondApi(source2.token));\n\n    return () =&gt; {\n      source1.cancel();\n      source2.cancel();\n    };\n  }, [dispatch]);\n\n  // component logic...\n};\n</code></pre> <p>In this example, both API calls are made with their respective cancel tokens, ensuring that if the component unmounts, both requests can be canceled properly.</p> <p>If you find that managing multiple tokens becomes cumbersome, consider using a library like react-query or redux-saga that handles cancellations and side effects more elegantly.</p>","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/#additional","title":"Additional","text":"<p>When using Redux Toolkit with Axios, handling cancellation tokens for API calls can indeed become tedious if you're making multiple requests. Here are some approaches and best practices that you might consider, especially when comparing with libraries like Redux-Saga and React Query:</p> <p>1. Centralize API Calls with Axios Interceptors</p> <p>Instead of creating a cancel token for every single request in your components, you can use Axios interceptors to handle cancelation globally. Here\u2019s how you can do it:</p> <ul> <li>Create an Axios instance.</li> <li>Set up interceptors to attach cancel tokens automatically.</li> </ul> <pre><code>import axios from \"axios\";\n\nconst axiosInstance = axios.create();\n\nconst cancelTokenSource = axios.CancelToken.source();\n\naxiosInstance.interceptors.request.use((config) =&gt; {\n  config.cancelToken = cancelTokenSource.token;\n  return config;\n});\n\n// You can then cancel all requests when needed\nconst cancelAllRequests = () =&gt; {\n  cancelTokenSource.cancel(\"Operation canceled due to new request.\");\n};\n\n// In your component:\nuseEffect(() =&gt; {\n  dispatch(fetchBlogs());\n\n  return () =&gt; {\n    cancelAllRequests();\n  };\n}, [dispatch]);\n</code></pre> <p>2. Use Redux Middleware for API Calls</p> <p>You can create a custom middleware that manages API calls. This middleware can handle cancellation tokens and their lifecycle without cluttering your components.</p> <p>3. Consider Using React Query</p> <p>React Query abstracts away many complexities of data fetching, including caching and cancellation. When you use React Query, you don\u2019t need to manually manage tokens for cancellation; it automatically handles this for you, allowing you to focus on building your app:</p> <pre><code>import { useQuery } from \"react-query\";\n\nconst fetchBlogs = async () =&gt; {\n  const response = await axios.get(\"/api/blogs\");\n  return response.data;\n};\n\nconst MyComponent = () =&gt; {\n  const { data, error, isLoading } = useQuery(\"blogs\", fetchBlogs);\n\n  // Handle loading, error, and data states...\n};\n</code></pre> <p>4. Use Redux-Saga for More Complex Scenarios</p> <p>If your application requires complex side effects, Redux-Saga is a powerful option. Sagas can manage multiple API calls and handle cancellation easily:</p> <pre><code>import { call, put, takeLatest, cancel, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* fetchBlogs() {\n  const source = axios.CancelToken.source();\n  try {\n    const response = yield call(axios.get, '/api/blogs', {\n      cancelToken: source.token,\n    });\n    yield put({ type: 'FETCH_BLOGS_SUCCESS', payload: response.data });\n  } catch (error) {\n    if (axios.isCancel(error)) {\n      console.log('Request canceled', error.message);\n    } else {\n      yield put({ type: 'FETCH_BLOGS_FAILURE', error });\n    }\n  }\n}\n\nfunction* watchFetchBlogs() {\n  yield takeLatest('FETCH_BLOGS_REQUEST', fetchBlogs);\n}\n\n// In your component:\nuseEffect(() =&gt; {\n  const task = yield fork(watchFetchBlogs);\n  return () =&gt; {\n    cancel(task); // Cancels the saga when the component unmounts\n  };\n}, []);\n</code></pre> Summary <ul> <li>For Simple Apps: Consider using Axios with <code>interceptors</code> to manage cancellation tokens centrally.</li> <li>For Complex Apps: Use React Query for its built-in cancellation and data management features or Redux-Saga for more intricate side effects handling.</li> </ul> <p>Each approach has its strengths, and the best choice depends on your specific use case and app complexity. If you find yourself frequently dealing with async logic and want to simplify state management, React Query or Redux-Saga are both great options.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/","title":"Configuring Django Channels with Redis: Connecting to Redis in Docker vs. Localhost","text":"","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost","title":"Configuring Django Channels with Redis: Connecting to Redis in Docker vs. Localhost","text":"<p>When configuring a Django project with Channels and Redis, the host used in the <code>CHANNEL_LAYERS</code> setting depends on where Redis is running relative to your Django backend.</p> <p>Here\u2019s how to decide when to use <code>127.0.0.1</code> (localhost) or <code>redis</code>:</p>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#use-127001-when","title":"Use <code>127.0.0.1</code> when:","text":"<ul> <li>Redis is running on the same machine as your Django backend.</li> <li>This means both Django and Redis are running on the same computer, so <code>127.0.0.1</code> (localhost) is the correct address to use.</li> <li>This is typical if Redis is installed directly on your local machine (not in a Docker container) and your Django app runs natively on your computer.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#use-redis-when","title":"Use <code>redis</code> when:","text":"<ul> <li>Redis is running in a Docker container and your Django app is outside Docker (on your local machine or another server).</li> <li>If Redis is running inside a Docker container, you typically reference the container by the name of the service or container as defined in your Docker setup (usually in a <code>docker-compose.yml</code> file). This is because Docker containers can communicate with each other by container names, so you would use <code>redis</code> as the hostname if that is the service name of your Redis container.</li> </ul> <p>In your case, since you mentioned Redis is running in Docker and your backend is on your local computer, you should modify your configuration like this:</p> <pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('redis', 6379)],  # 'redis' is the container name or service name in Docker\n        },\n    },\n}\n</code></pre>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#docker-compose-setup","title":"Docker Compose Setup:","text":"<p>If you're using <code>docker-compose</code>, your Redis service might be named something like this:</p> <pre><code>version: \"3\"\n\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n</code></pre> <p>In this case, you can reference the <code>redis</code> container by the service name <code>redis</code> in your <code>CHANNEL_LAYERS</code> setting.</p> Summary <ul> <li>If Redis is on the same machine as your Django app, use <code>127.0.0.1</code>.</li> <li>If Redis is running inside a Docker container, use the container's name (<code>redis</code> in this example) as the host.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#integrate-with-docker","title":"Integrate with Docker","text":"<p>To integrate your Django application with Redis using Docker Compose, you need to combine your Django app\u2019s Docker setup with the Redis service. This will allow your Django app to communicate with the Redis container for things like Channels or caching. Here\u2019s how to compose it:</p> <ol> <li> <p>Create a <code>docker-compose.yml</code> File</p> <p>Here\u2019s an example of how your <code>docker-compose.yml</code> file could look to run both Redis and your Django application:</p> yml<pre><code>version: \"3\"\n\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n\n  django:\n    build: .\n    container_name: django\n    command: [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n    volumes:\n      - .:/app\n    depends_on:\n      - redis\n    ports:\n      - \"8000:8000\"\n    environment:\n      - REDIS_HOST=redis\n</code></pre> Explanation <ul> <li><code>redis</code> service: Runs the official Redis image and exposes port <code>6379</code>. This is the default Redis port.</li> <li> <p><code>django</code> service:</p> </li> <li> <p><code>build: .</code> builds the Docker image for your Django app (assuming you have a <code>Dockerfile</code> in the same directory).</p> </li> <li>The <code>command</code> specifies how to run your Django application (using <code>python manage.py runserver</code>).</li> <li><code>volumes: - .:/app</code> maps your local Django project directory to the <code>/app</code> directory inside the container.</li> <li><code>depends_on: - redis</code> ensures that the Django container starts after Redis is up and running.</li> <li><code>environment: REDIS_HOST=redis</code> defines the environment variable <code>REDIS_HOST</code>, which is the hostname Django will use to connect to Redis.</li> </ul> </li> <li> <p>Create a <code>Dockerfile</code> for Your Django Application</p> <p>You\u2019ll need a <code>Dockerfile</code> for your Django application if you don\u2019t already have one. Here's a basic example:</p> Dockerfile<pre><code># Use an official Python runtime as a parent image\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app/\n\n# Install any needed dependencies\nRUN pip install --upgrade pip\nRUN pip install -r requirements.txt\n\n# Make port 8000 available to the world outside the container\nEXPOSE 8000\n\n# Define environment variable\nENV PYTHONUNBUFFERED 1\n</code></pre> <p>This <code>Dockerfile</code> does the following:</p> <ul> <li>Uses an official Python 3.9 image as the base.</li> <li>Sets the working directory inside the container.</li> <li>Copies your local project files into the container.</li> <li>Installs the required Python dependencies from <code>requirements.txt</code>.</li> <li>Exposes port <code>8000</code> for the Django app.</li> </ul> </li> <li> <p>Configure Django to Use Redis</p> <p>Now, make sure that your Django Channels settings (or any other Redis-related configuration) point to the Redis container. Update your <code>settings.py</code> in the Django app to connect to Redis by using the hostname <code>redis</code> (the service name in the Docker Compose file):</p> python<pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('redis', 6379)],  # 'redis' is the container name of the Redis service\n        },\n    },\n}\n</code></pre> </li> <li> <p>Build and Run with Docker Compose</p> <p>Once you have your <code>docker-compose.yml</code>, <code>Dockerfile</code>, and Django settings configured, you can use Docker Compose to build and run the containers:</p> <ol> <li> <p>Build the images:</p> <pre><code>docker-compose build\n</code></pre> </li> <li> <p>Start the services:</p> <pre><code>docker-compose up\n</code></pre> </li> </ol> <p>Docker Compose will start both the Redis and Django services, and you can access your Django application at <code>http://localhost:8000</code>. Your Django app will connect to Redis using the <code>redis</code> hostname.</p> </li> <li> <p>Access the Django App</p> <p>Once everything is running, you can access your Django app via <code>http://localhost:8000</code>, and it should be able to connect to Redis via the hostname <code>redis</code>.</p> </li> </ol> Notes <ul> <li>The <code>depends_on</code> in the Docker Compose file ensures that the Django app will wait for Redis to be ready before starting.</li> <li>If you plan to use Redis for Django Channels or caching, make sure the Redis settings in <code>settings.py</code> are configured correctly (like shown above).</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#docker-compose","title":"Docker Compose","text":"<p>The <code>docker-compose.yml</code> file and the <code>Dockerfile</code> should be stored in your project's root directory. Here's how your directory structure should look:</p> Project StructureExplanation <pre><code>your_project/\n\u251c\u2500\u2500 docker-compose.yml  # Docker Compose configuration\n\u251c\u2500\u2500 Dockerfile          # Dockerfile for Django app\n\u251c\u2500\u2500 your_django_app/    # Your Django application folder (contains settings.py, models.py, etc.)\n\u251c\u2500\u2500 requirements.txt    # Python dependencies for Django\n\u251c\u2500\u2500 manage.py           # Django manage script\n\u2514\u2500\u2500 ...\n</code></pre> <ul> <li><code>docker-compose.yml</code>: This file defines how all the services (like your Django app and Redis) will run together using Docker Compose. It coordinates the containers, their dependencies, and network configurations.</li> <li><code>Dockerfile</code>: This file contains instructions on how to build the Docker image for your Django app. It tells Docker how to install dependencies, set up the environment, and run your application inside the container.</li> </ul> Where to store the files <ul> <li><code>docker-compose.yml</code>: Place this file in the root directory of your project (e.g., <code>your_project/docker-compose.yml</code>).</li> <li><code>Dockerfile</code>: This file should also be placed in the root directory of your Django project (e.g., <code>your_project/Dockerfile</code>).</li> </ul> Example Directory Layout<pre><code>my_django_project/\n\u251c\u2500\u2500 docker-compose.yml      # Docker Compose file that defines services\n\u251c\u2500\u2500 Dockerfile              # Dockerfile to build the Django container\n\u251c\u2500\u2500 your_django_app/        # Django app folder\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py         # Django settings file\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 manage.py               # Django manage script\n\u251c\u2500\u2500 requirements.txt        # Python dependencies (Django, channels_redis, etc.)\n\u2514\u2500\u2500 ...\n</code></pre> Steps for Setup: <ol> <li> <p>Navigate to your project\u2019s root directory where both <code>docker-compose.yml</code> and <code>Dockerfile</code> are stored.</p> </li> <li> <p>Build and run the containers using the following commands:</p> <ul> <li> <p>Build the Docker images:</p> bash<pre><code>docker-compose build\n</code></pre> </li> <li> <p>Run the services (Django app + Redis):</p> <pre><code>docker-compose up\n</code></pre> </li> </ul> </li> </ol> <p>This structure keeps everything in one place and ensures that Docker can correctly build and run your services.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/","title":"Customizing Error Handling with rejectWithValue in Redux Toolkit","text":"","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#customizing-error-handling-with-rejectwithvalue-in-redux-toolkit","title":"Customizing Error Handling with <code>rejectWithValue</code> in Redux Toolkit","text":"<p>The two code snippets you provided represent different approaches to handling asynchronous operations in a Redux slice using <code>createAsyncThunk</code>.</p> <p>Here's a breakdown of the core differences and an assessment of which method might be considered better:</p> Potential Bug CodeSolved Code <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\n    \"blog/fetchBlogs\",\n    async (_, { signal }) =&gt; {\n        const response = await axios.get(\n            \"https://jsonplaceholder.typicode.com/posts\",\n            {\n                cancelToken: signal,\n            }\n        );\n        return response.data;\n    }\n);\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null; // Clear error on success\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                if (axios.isCancel(action.error)) {\n                state.status = \"failed\";\n                state.error = action.error.message;\n                }\n            });\n    },\n});\n\nexport default blogSlice.reducer;\n</code></pre> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\n    \"blog/fetchBlogs\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await axios.get(\n                \"https://jsonplaceholder.typicode.com/posts\",\n                {\n                cancelToken: signal, // Use the cancel token\n                }\n            );\n            return response.data;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                console.log(\"Request canceled:\", err.message);\n                return rejectWithValue(\"Request was canceled\");\n            }\n            return rejectWithValue(err.message); // Return the error message for actual errors\n        }\n    }\n);\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null; // Clear error on success\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload; // Use the rejected value\n            });\n    },\n});\n\nexport default blogSlice.reducer;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#core-differences","title":"Core Differences","text":"<ol> <li> <p>Error Handling:</p> <ul> <li>First Snippet: This version relies on automatic error handling provided by <code>createAsyncThunk</code>. If the Axios request fails, the error will be caught, and the action will be rejected with the error message directly. The error handling is less explicit.</li> <li>Second Snippet: This version explicitly handles errors using <code>try...catch</code>. If the request fails, it checks if the error was caused by a cancellation (using <code>axios.isCancel()</code>) and can differentiate that from other types of errors. It uses <code>rejectWithValue</code> to provide a custom error message back to the reducer.</li> </ul> </li> <li> <p>Cancel Token Handling:</p> <ul> <li>In both snippets, the <code>cancelToken</code> is passed to Axios for handling request cancellation. However, the second snippet allows for more nuanced error handling, specifically catering to cancellation.</li> </ul> </li> <li> <p>State Management on Success:</p> <ul> <li>The first snippet does not clear the error state upon a successful fetch, while the second snippet explicitly sets <code>state.error</code> to <code>null</code> on a successful response. This can help prevent displaying stale error messages after a successful fetch.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#which-is-better-and-why","title":"Which is Better and Why?","text":"<p>The Second Snippet is Generally Better:</p> <ul> <li>Explicit Error Handling: By using <code>try...catch</code>, you can handle different types of errors more gracefully. This is especially useful for user experience, as you can differentiate between a canceled request and a network error.</li> <li>Clarity and Control: The explicit nature of error handling makes the code easier to read and maintain. Developers can quickly understand how errors are being managed.</li> <li>Clean State Management: Resetting the error state on success ensures that users do not see old error messages, improving the app's usability.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<p>While both approaches can work, the second snippet is preferable for production-level applications due to its robustness, clarity, and better handling of different error scenarios. It provides more control over the flow of data and how errors are represented in the state, ultimately leading to a better user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#additional","title":"Additional","text":"<p><code>rejectWithValue</code> is a utility function provided by createAsyncThunk in Redux Toolkit. It allows you to return a custom error value from a rejected async action. Here\u2019s why and when to use it:</p> Why Use <code>rejectWithValue</code>When to Use <code>rejectWithValue</code> <ol> <li> <p>Custom Error Handling:</p> <ul> <li><code>rejectWithValue</code> allows you to send a specific error message or object back to your reducers when the async operation fails. This can be particularly useful when you want to provide more detailed error information to the UI.</li> </ul> </li> <li> <p>Improved User Experience:</p> <ul> <li>By customizing the error value, you can display more meaningful messages to the user. For instance, instead of showing a generic error message, you can convey why the operation failed (e.g., \"Network Error: Please check your connection\" or \"Authorization failed\").</li> </ul> </li> <li> <p>Type Safety:</p> <ul> <li>Using <code>rejectWithValue</code> helps maintain type safety in TypeScript applications. You can define a specific type for your error payload, ensuring that your error handling logic remains consistent.</li> </ul> </li> <li> <p>Clearer State Management:</p> <ul> <li>It enables you to manage your state more effectively by differentiating between various types of errors. For example, you can distinguish between a canceled request and a validation error.</li> </ul> </li> </ol> <ol> <li> <p>Error Scenarios:</p> <ul> <li>Use it when your async operation can fail due to different reasons and you want to capture those specific errors. For example, API errors, validation failures, or user-triggered cancellations.</li> </ul> </li> <li> <p>Enhanced User Feedback:</p> <ul> <li>When you want to provide feedback to the user about why a request failed. If you\u2019re building a user-facing application, clear error messages are crucial for a good user experience.</li> </ul> </li> <li> <p>Handling Business Logic:</p> <ul> <li>If your business logic requires different actions based on the type of error (e.g., retry on certain errors but not others), <code>rejectWithValue</code> can help you return those different error scenarios.</li> </ul> </li> </ol> <p>Example Usage</p> <p>Here's an example demonstrating the use of <code>rejectWithValue</code>:</p> <pre><code>import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchData = createAsyncThunk(\n  \"data/fetchData\",\n  async (_, { rejectWithValue }) =&gt; {\n    try {\n      const response = await axios.get(\"https://api.example.com/data\");\n      return response.data;\n    } catch (error) {\n      if (axios.isCancel(error)) {\n        return rejectWithValue(\"Request was canceled\");\n      }\n      return rejectWithValue(\n        error.response?.data?.message || \"An error occurred\"\n      );\n    }\n  }\n);\n\nconst dataSlice = createSlice({\n  name: \"data\",\n  initialState: {\n    items: [],\n    status: \"idle\",\n    error: null,\n  },\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchData.pending, (state) =&gt; {\n        state.status = \"loading\";\n      })\n      .addCase(fetchData.fulfilled, (state, action) =&gt; {\n        state.status = \"succeeded\";\n        state.items = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchData.rejected, (state, action) =&gt; {\n        state.status = \"failed\";\n        state.error = action.payload; // Use the custom error message\n      });\n  },\n});\n\nexport default dataSlice.reducer;\n</code></pre> <p>In this example, <code>rejectWithValue</code> allows you to return a meaningful error message to the reducer, which can then be displayed in the UI, enhancing the overall user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/","title":"Difference between AbstractUser and AbstractBaseUser","text":"","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#difference-between-abstractuser-and-abstractbaseuser","title":"Difference between AbstractUser and AbstractBaseUser","text":"<p>In summary, use <code>AbstractUser</code> for a simpler extension of the default user model, and <code>AbstractBaseUser</code> when you need to create a completely custom user model.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#using-abstractuser","title":"Using <code>AbstractUser</code>","text":"<p>When you want to extend the existing user model provided by Django, you can subclass <code>AbstractUser</code> and add your own fields.</p> ExampleExplanation <pre><code># models.py\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    # Adding additional fields\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    bio = models.TextField(blank=True, null=True)\n\n# settings.py\nAUTH_USER_MODEL = 'your_app_name.CustomUser'\n</code></pre> <ul> <li>We inherit from <code>AbstractUser</code>, which already includes fields like <code>username</code>, <code>email</code>, etc.</li> <li>We add two custom fields: <code>phone_number</code> and <code>bio</code>.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#using-abstractbaseuser","title":"Using <code>AbstractBaseUser</code>","text":"<p>If you want to create a completely custom user model with more control, you can subclass <code>AbstractBaseUser</code>. This requires implementing additional functionality, such as a custom user manager.</p> ExampleExplanation <pre><code># models.py\n\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"The Email field must be set\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        return self.create_user(email, password, **extra_fields)\n\nclass CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    name = models.CharField(max_length=30, blank=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n\n    objects = CustomUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []\n\n# settings.py\nAUTH_USER_MODEL = 'your_app_name.CustomUser'\n</code></pre> <ul> <li>We create a <code>CustomUserManager</code> to handle user creation.</li> <li>The <code>CustomUser</code> model includes only the fields we define: <code>email</code>, <code>name</code>, <code>is_active</code>, and <code>is_staff</code>.</li> <li>We specify <code>USERNAME_FIELD</code> to use <code>email</code> as the identifier instead of <code>username</code>.</li> <li><code>REQUIRED_FIELDS</code> can be left empty if no additional fields are required for superuser creation.</li> </ul> Summary <ul> <li>Using <code>AbstractUser</code>: Good for extending the default user model easily with minimal code.</li> <li>Using <code>AbstractBaseUser</code>: Good for creating a completely custom user model, allowing full control over the fields and behavior.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#major-difference","title":"Major Difference","text":"<p>The major difference between <code>AbstractUser</code> and <code>AbstractBaseUser</code> in Django is that:</p> <ul> <li> <p>AbstractUser: This is a complete user model that inherits from Django's built-in User model. It includes all the standard user fields (like <code>username</code>, <code>email</code>, <code>first_name</code>, etc.) and authentication functionality, allowing for easy extension with additional fields.</p> </li> <li> <p>AbstractBaseUser: This is a minimal base class that provides only the core authentication features (like password handling) without any predefined fields. It requires you to define your own user model fields and implement additional functionality (like a user manager), giving you full control over the user model's structure.</p> </li> </ul> <p>In summary, <code>AbstractUser</code> is for extending the existing user model with less effort, while <code>AbstractBaseUser</code> is for creating a completely custom user model from scratch.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/","title":"Understanding Dockerfile and builderdocker.sh: A Brief Overview","text":"","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#understanding-dockerfile-and-builderdockersh-a-brief-overview","title":"Understanding Dockerfile and builderdocker.sh: A Brief Overview","text":"<p>In modern software development, Docker has become an essential tool for creating and managing containerized applications. Among the key components of a Docker-based development environment are the <code>Dockerfile</code> and <code>builderdocker.sh</code> scripts. Let's explore what these files are, why they're important, and how they can be used to streamline your development and deployment workflows.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#what-is-a-dockerfile","title":"What is a Dockerfile?","text":"<p>A Dockerfile is a script that contains instructions for building a Docker image. It defines the steps that need to be followed to set up the environment, install dependencies, copy files, and run the application. Dockerfiles ensure that the environment is consistent across all stages of development, testing, and production.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#key-parts-of-a-dockerfile","title":"Key Parts of a Dockerfile:","text":"<ul> <li>Base Image: Specifies the operating system or environment where your application will run (e.g., <code>node:14</code>).</li> <li>COPY: Adds files from your local machine into the Docker image.</li> <li>RUN: Executes commands inside the image (e.g., <code>npm install</code> or <code>pnpm install</code>).</li> <li>WORKDIR: Sets the working directory inside the container.</li> <li>CMD/ENTRYPOINT: Specifies the command to run when the container starts.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#example","title":"Example","text":"<p>Here\u2019s a simplified example of a Dockerfile for a Node.js app:</p> <pre><code>FROM node:14\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nCMD [\"npm\", \"start\"]\n</code></pre> <p>This Dockerfile defines the steps for creating an image with Node.js, installing dependencies, and starting the application.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#what-is-a-builderdockersh-file","title":"What is a <code>builderdocker.sh</code> File?","text":"<p>A <code>builderdocker.sh</code> file is a shell script often used alongside the Dockerfile to streamline the process of building and managing Docker images. The script is typically used to automate tasks such as setting environment variables, passing arguments to the Docker build process, or managing multiple Docker builds with different configurations.</p> <p>For example, you might use the <code>builderdocker.sh</code> file to:</p> <ul> <li>Set build-time arguments (like environment variables for different environments such as development or production).</li> <li>Pass configuration options when building or running Docker images.</li> <li>Simplify the process of building and pushing Docker images to a container registry.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#example_1","title":"Example","text":"<p>Here\u2019s a simple example of a <code>builderdocker.sh</code> file:</p> sh<pre><code>#!/bin/bash\n\n# Build the Docker image with a specific argument\ndocker build --build-arg ENV_FILE=$1 -t my-app:$1 .\n\n# Optionally push the image to a registry\ndocker push my-app:$1\n</code></pre> <p>In this case, the script takes an argument (<code>$1</code>), which is used as the environment file during the build process.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#conclusion","title":"Conclusion","text":"<p>In summary, Dockerfiles and builderdocker.sh files are essential for creating consistent, automated, and flexible containerized environments. They streamline the process of building and deploying applications by defining the necessary steps in a Dockerfile and automating the process through a shell script like <code>builderdocker.sh</code>.</p> <p>By using build-time arguments and dynamically choosing configuration files (e.g., <code>.env.production</code> or <code>.env.development</code>) based on the Git branch, you can tailor your build process to different environments, ensuring a seamless experience from development to production.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#when-to-use-which","title":"When to Use Which?","text":"<ul> <li> <p>Use a <code>Dockerfile</code> if you want to define the steps for building your Docker image, especially if the conditional logic is related to image configuration, environment setup, or conditional installation of dependencies during the build.</p> </li> <li> <p>Use a <code>builderdocker.sh</code> if you need more advanced automation or orchestration, such as controlling the flow of tasks before or after building the image, interacting with Docker commands dynamically, or managing Docker containers and images.</p> </li> </ul> <p>In summary, both can contain conditional logic, but they serve different purposes and are executed in different contexts.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#fundamental-differences","title":"Fundamental Differences:","text":"Aspect Dockerfile builderdocker.sh Purpose Defines steps for building a Docker image. Automates tasks, including Docker build or management. Execution Context During image build. In the host shell environment (before or after build). Conditional Logic Limited to <code>RUN</code> commands or build arguments. Full shell scripting capabilities (<code>if</code>, <code>for</code>, etc.). Flexibility Limited logic and conditional statements. Highly flexible for complex logic. Example Use Case Creating the final image with build-time conditions. Automating the build and deployment process. Conclusion <ul> <li> <p><code>Dockerfile</code> is used to define how a Docker image should be built. It\u2019s essential for creating consistent, reproducible environments.</p> </li> <li> <p><code>builderdocker.sh</code> is an optional script that simplifies and automates the process of building Docker images by handling dynamic arguments, environment selection, and other tasks that might need to be repeated.</p> </li> <li> <p>If you don\u2019t use <code>builderdocker.sh</code>, you\u2019ll still be able to build Docker images, but you\u2019ll lose the benefits of automation, reduced manual errors, and simplified workflows.</p> </li> </ul> <p>The script is especially useful in CI/CD pipelines or when you need to manage complex build scenarios where environment-specific configurations are required, based on things like the current branch or deployment environment.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#docker-arguments","title":"Docker Arguments","text":"<p>In <code>Dockerfile</code> and <code>builderdocker.sh</code> (a script file), there are different types of arguments (args) used for defining and configuring the Docker image build process. Let\u2019s go through the main types of arguments used in both:</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#dockerfile","title":"Dockerfile","text":"<p>In a Dockerfile, you typically use <code>ARG</code> and <code>ENV</code> to define and pass arguments.</p> <ol> <li> <p><code>ARG</code> (Build-time Argument)</p> <ul> <li> <p><code>ARG</code> is used to define variables that can be passed at build time to the Docker image.</p> </li> <li> <p>These arguments are only available during the build process and are not included in the final image unless you explicitly use <code>ENV</code> to make them available in the image.</p> </li> <li> <p>Syntax:</p> <pre><code>ARG &lt;name&gt;[=&lt;default_value&gt;]\n</code></pre> </li> <li> <p>Example:</p> <pre><code>ARG VERSION=1.0\n</code></pre> </li> </ul> </li> <li> <p><code>ENV</code> (Environment Variable)</p> <ul> <li> <p><code>ENV</code> is used to define environment variables in the Docker image. These variables are accessible within the container once the image is built and the container is running.</p> </li> <li> <p>You can use <code>ARG</code> in conjunction with <code>ENV</code> to pass build-time arguments into the runtime environment.</p> </li> <li> <p>Syntax:</p> <pre><code>ENV &lt;key&gt;=&lt;value&gt;\n</code></pre> </li> <li> <p>Example:</p> <pre><code>ENV APP_VERSION=$VERSION\n</code></pre> </li> </ul> </li> <li> <p><code>--build-arg</code> (Build Arguments Passed During Build)</p> <ul> <li> <p>This is a flag used in the <code>docker build</code> command to pass values to <code>ARG</code> in the Dockerfile.</p> </li> <li> <p>Example:</p> <pre><code>docker build --build-arg VERSION=2.0 .\n</code></pre> </li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#builderdockersh-shell-script","title":"<code>builderdocker.sh</code> (Shell Script)","text":"<p>In a shell script like <code>builderdocker.sh</code>, arguments are typically passed through positional parameters or flags. These arguments can be used to define variables that will be used within the script for configuring the Docker build or handling build-specific tasks.</p> <ol> <li> <p>Positional Parameters (<code>$1</code>, <code>$2</code>, etc.)</p> <ul> <li> <p>Positional parameters are used to pass arguments to a shell script.</p> </li> <li> <p>They are accessed using <code>$1</code>, <code>$2</code>, etc., where <code>$1</code> represents the first argument, <code>$2</code> represents the second argument, and so on.</p> </li> <li> <p>Example:</p> <pre><code># builderdocker.sh\necho \"The first argument is: $1\"\n</code></pre> </li> </ul> </li> <li> <p>Flags (<code>--flag-name</code> or <code>-f</code>)</p> <ul> <li>Flags can be used in the script to pass options or configuration values.</li> <li>You would typically use a command-line argument parser to handle these flags.</li> <li> <p>Example:</p> <pre><code># builderdocker.sh\nwhile getopts \"a:b:\" opt; do\n    case $opt in\n        a) ARG_A=$OPTARG ;;\n        b) ARG_B=$OPTARG ;;\n        *) echo \"Invalid option\"; exit 1 ;;\n    esac\ndone\n</code></pre> </li> </ul> </li> <li> <p>Environment Variables</p> <ul> <li>You can also pass environment variables in <code>builderdocker.sh</code> that can be accessed in the script.</li> <li>These can be set in the script or passed when running the script.</li> <li> <p>Example:</p> <pre><code>export VERSION=1.0\n</code></pre> </li> </ul> </li> </ol> Summary <ul> <li> <p>In a Dockerfile:</p> <ul> <li><code>ARG</code> defines build-time arguments.</li> <li><code>ENV</code> defines environment variables in the image.</li> <li><code>--build-arg</code> passes arguments to the <code>ARG</code> during the build.</li> </ul> </li> <li> <p>In builderdocker.sh:</p> <ul> <li>Positional parameters (<code>$1</code>, <code>$2</code>, etc.) capture input arguments.</li> <li>Flags (<code>-a</code>, <code>-b</code>, etc.) can be used for more complex input parsing.</li> <li>Environment variables can also be set and used inside the script.</li> </ul> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/","title":"Leveraging .env Files for Scalable React Development","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#leveraging-env-files-for-scalable-react-development","title":"Leveraging <code>.env</code> Files for Scalable React Development","text":"<p>In a large React codebase, there are several important things you might want to define in your <code>.env</code> file to manage configuration effectively.</p> <p>Beyond Hardcoding: Leveraging <code>.env</code> Files for Scalable React Development</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#overview","title":"Overview","text":"<p>Here are some key variables you should consider:</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#1-api-urls","title":"1. API URLs","text":"<ul> <li>Base URL for API Endpoints: This allows you to switch between different environments (development, staging, production).</li> </ul> <pre><code>REACT_APP_API_URL=https://api.yourapp.com\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#2-feature-flags","title":"2. Feature Flags","text":"<ul> <li>Feature Toggles: Use environment variables to enable or disable certain features dynamically.</li> </ul> <pre><code>REACT_APP_ENABLE_NEW_FEATURE=true\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#3-authentication-secrets","title":"3. Authentication Secrets","text":"<ul> <li>API Keys or Tokens: If you are using third-party services (e.g., Stripe, Firebase), store your API keys or tokens securely.</li> </ul> <pre><code>REACT_APP_STRIPE_PUBLIC_KEY=your_stripe_key\nREACT_APP_FIREBASE_API_KEY=your_firebase_key\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#4-analytics-and-tracking-ids","title":"4. Analytics and Tracking IDs","text":"<ul> <li>Analytics IDs: Store any IDs for tracking services like Google Analytics or Mixpanel.</li> </ul> <pre><code>REACT_APP_GOOGLE_ANALYTICS_ID=your_ga_id\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#5-environment-specific-settings","title":"5. Environment Specific Settings","text":"<ul> <li>Environment Type: Define the environment type to make conditional logic easier in your code.</li> </ul> <pre><code>REACT_APP_ENV=development\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#6-static-file-paths","title":"6. Static File Paths","text":"<ul> <li>Base Paths for Assets: If you have a CDN or specific folder structure for static assets.</li> </ul> <pre><code>REACT_APP_ASSET_BASE_URL=https://cdn.yourapp.com/assets/\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#7-timeout-and-retry-settings","title":"7. Timeout and Retry Settings","text":"<ul> <li>Timeout Settings: Define how long your app should wait for a response before timing out.</li> </ul> <pre><code>REACT_APP_API_TIMEOUT=5000\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#8-uiux-configurations","title":"8. UI/UX Configurations","text":"<ul> <li>Theme or Layout Settings: Define settings related to UI themes or layouts.</li> </ul> <pre><code>REACT_APP_DEFAULT_THEME=light\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#9-server-configuration","title":"9. Server Configuration","text":"<ul> <li>Backend Server URL: If your app needs to interact with a backend service, define the server URL.</li> </ul> <pre><code>REACT_APP_BACKEND_URL=http://localhost:5000\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#10-other-third-party-service-configurations","title":"10. Other Third-party Service Configurations","text":"<ul> <li>Webhook URLs, Third-party service keys: Any additional services your app interacts with.</li> </ul> <pre><code>REACT_APP_WEBHOOK_URL=https://your-webhook-url.com\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#best-practices","title":"Best Practices","text":"<ul> <li>Prefix Variables: Always prefix your environment variables with <code>REACT_APP_</code> to make them accessible in a React app.</li> <li>Secure Sensitive Information: Do not commit sensitive information to your version control. Use a <code>.gitignore</code> file to exclude <code>.env</code> files from being tracked.</li> <li>Documentation: Document the environment variables and their purposes for easy reference for your team.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#conclusion","title":"Conclusion","text":"<p>Organizing your environment variables in a <code>.env</code> file enhances the flexibility, security, and maintainability of your React application, especially as it grows in complexity.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#additional","title":"Additional","text":"<p>The requirement for environment variables to start with the <code>REACT_APP_</code> prefix is specific to Create React App (CRA) and similar React setups, rather than a general Node.js environment requirement. Here\u2019s a bit more detail:</p> <ol> <li> <p>Create React App Specific</p> <ul> <li>CRA Behavior: When using Create React App, the build process (which is based on Webpack) is configured to only expose environment variables that have the <code>REACT_APP_</code> prefix to the client-side code. This is a deliberate design choice to ensure that only explicitly intended variables are accessible in the browser.</li> </ul> </li> <li> <p>Node.js Environment</p> <ul> <li>General Node.js: In a Node.js environment (for server-side applications), there are no such restrictions. You can define and access environment variables freely, and they do not need a specific prefix. You can access them using <code>process.env.VARIABLE_NAME</code> directly.</li> </ul> </li> </ol> <p>Summary</p> <ul> <li>For React (especially with CRA): Use the <code>REACT_APP_</code> prefix for any environment variables you want to access in your React components.</li> <li>For Node.js: There are no such restrictions, and you can define and access environment variables without any specific prefix.</li> </ul> <p>This distinction is important to keep in mind when working on full-stack applications that involve both server-side and client-side code.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/","title":"Effortless Object Management: Excluding Empty Properties in JavaScript","text":"","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#effortless-object-management-excluding-empty-properties-in-javascript","title":"Effortless Object Management: Excluding Empty Properties in JavaScript","text":"<p>To ensure that you only include properties in <code>props</code> that have values, you can create the <code>props</code> object conditionally.</p> <p>Here are a couple of ways to achieve that:</p>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-1-conditional-object-construction","title":"Method 1: Conditional Object Construction","text":"<p>You can conditionally add properties to the <code>props</code> object using a combination of object spread syntax and conditional checks.</p> <pre><code>let props = {\n  ...(sortTypeValue &amp;&amp; { SortType: sortTypeValue }),\n  ...(selectedUserId &amp;&amp; { UserId: selectedUserId }),\n  ...(selectedDate &amp;&amp; { DailyDiaryDate: selectedDate }),\n  ...(startDate &amp;&amp; { DailyDiaryDateFrom: startDate }),\n  ...(endDate &amp;&amp; { DailyDiaryDateTo: endDate }),\n};\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-2-using-a-helper-function","title":"Method 2: Using a Helper Function","text":"<pre><code>const createProps = (\n  sortTypeValue,\n  selectedUserId,\n  selectedDate,\n  startDate,\n  endDate\n) =&gt; {\n  const props = {};\n  if (sortTypeValue) props.SortType = sortTypeValue;\n  if (selectedUserId) props.UserId = selectedUserId;\n  if (selectedDate) props.DailyDiaryDate = selectedDate;\n  if (startDate) props.DailyDiaryDateFrom = startDate;\n  if (endDate) props.DailyDiaryDateTo = endDate;\n  return props;\n};\n\nlet props = createProps(\n  sortTypeValue,\n  selectedUserId,\n  selectedDate,\n  startDate,\n  endDate\n);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-3-using-objectentries-and-reduce","title":"Method 3: Using <code>Object.entries</code> and <code>reduce</code>","text":"<p>Another way to dynamically filter properties is to use <code>Object.entries</code> combined with <code>reduce</code>:</p> <pre><code>const initialProps = {\n  SortType: sortTypeValue,\n  UserId: selectedUserId,\n  DailyDiaryDate: selectedDate,\n  DailyDiaryDateFrom: startDate,\n  DailyDiaryDateTo: endDate,\n};\n\nlet props = Object.entries(initialProps).reduce((acc, [key, value]) =&gt; {\n  if (value) {\n    acc[key] = value;\n  }\n  return acc;\n}, {});\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#summary","title":"Summary","text":"<p>All of these methods effectively create an object containing only the properties that have non-empty values. Choose the approach that you find most readable and maintainable for your codebase!</p>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#utility-function-createprops","title":"Utility Function: <code>createProps</code>","text":"<p>You can create a utility function to conditionally construct an object, which can then be reused throughout your codebase. Here\u2019s how you can implement such a utility function in JavaScript:</p> <pre><code>// conditionalProps.js\n// utility.js\n\n/**\n * Create an object with only defined properties.\n *\n * @param {Object} properties - An object where each value can be any type.\n * @returns {Object} - A new object containing only the properties with truthy values.\n */\nexport const createProps = (properties) =&gt; {\n  return Object.entries(properties).reduce((acc, [key, value]) =&gt; {\n    if (value) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n};\n</code></pre> Usage ExampleBenefits <p>You can use this utility function as follows:</p> <pre><code>import { createProps } from './utility';\n\nconst sortTypeValue = \"asc\"; // Example values\nconst selectedUserId = null;  // Example values\nconst selectedDate = \"2024-10-01\"; // Example values\nconst startDate = \"\"; // Example values\nconst endDate = \"2024-10-31\"; // Example values\n\nconst props = createProps({\n    SortType: sortTypeValue,\n    UserId: selectedUserId,\n    DailyDiaryDate: selectedDate,\n    DailyDiaryDateFrom: startDate,\n    DailyDiaryDateTo: endDate,\n});\n\nconsole.log(props);\n// Output: { SortType: \"asc\", DailyDiaryDate: \"2024-10-01\", DailyDiaryDateTo: \"2024-10-31\" }\n</code></pre> <p>Benefits of Using a Utility Function</p> <ol> <li>Reusability: You can use this function in multiple places throughout your application.</li> <li>Maintainability: If you need to change how properties are filtered, you can do so in one place.</li> <li>Clarity: The function name clearly describes its purpose, improving code readability.</li> </ol> <p>This utility function can be enhanced further if needed, for example, by allowing for custom checks for \"defined\" values or by handling different data types more specifically. But as it stands, it provides a solid foundation for creating objects with only the necessary properties.</p>","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/04/15/folder-structure/","title":"Folder Structure","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#folder-structure","title":"Folder Structure","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#axios-interceptors","title":"Axios Interceptors","text":"<p>Using Axios interceptors is a great way to handle requests and responses globally, allowing you to add features like authentication tokens, error handling, or logging without modifying individual API calls. Here's how you can incorporate Axios interceptors into your project:</p> <pre><code>src\n\u2502\n\u251c\u2500\u2500 features\n\u2502   \u251c\u2500\u2500 blog\n\u2502   \u2502   \u251c\u2500\u2500 api.js\n\u2502   \u2502   \u251c\u2500\u2500 service.js\n\u2502   \u2502   \u2514\u2500\u2500 slice.js\n\u2502   \u2514\u2500\u2500 gallery\n\u2502       \u251c\u2500\u2500 api.js\n\u2502       \u251c\u2500\u2500 service.js\n\u2502       \u2514\u2500\u2500 slice.js\n\u2502\n\u251c\u2500\u2500 middleware\n\u2502   \u251c\u2500\u2500 loggerMiddleware.js\n\u2502\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 axiosInstance.js\n\u2502   \u251c\u2500\u2500 dataService.js\n\u2502   \u2514\u2500\u2500 axiosInterceptors.js\n\u2502\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 rootReducer.js\n    \u2514\u2500\u2500 store.js\n</code></pre> axiosInstance.jsaxiosInterceptors.jsdataService.js <pre><code>import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n});\n\nexport default axiosInstance;\n</code></pre> <pre><code>import axiosInstance from \"./axiosInstance\";\n\n// Request interceptor\naxiosInstance.interceptors.request.use(\n    (config) =&gt; {\n        // Add authorization token or modify request config\n        const token = localStorage.getItem(\"token\"); // Example: Retrieve token from localStorage\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) =&gt; {\n        return Promise.reject(error);\n    }\n);\n\n// Response interceptor\naxiosInstance.interceptors.response.use(\n    (response) =&gt; {\n        // Handle successful response\n        return response;\n    },\n    (error) =&gt; {\n        // Handle errors globally\n        console.error(\"API Error:\", error);\n        return Promise.reject(error);\n    }\n);\n\nexport default axiosInstance; // Export the configured client\n</code></pre> <pre><code>import axiosInstance from \"./axiosInstance\";\n\nexport const fetchData = (url, signal) =&gt; {\n    return axiosInstance.get(url, {\n        cancelToken: signal,\n    });\n};\n\nexport const postData = (url, data, signal) =&gt; {\n    return axiosInstance.post(url, data, {\n        cancelToken: signal,\n    });\n};\n\nexport const putData = (url, data, signal) =&gt; {\n    return axiosInstance.put(url, data, {\n        cancelToken: signal,\n    });\n};\n\nexport const deleteData = (url, signal) =&gt; {\n    return axiosInstance.delete(url, {\n        cancelToken: signal,\n    });\n};\n</code></pre> ExampleBenefitsExplanation of the MethodsMeaningful Name <pre><code>// src/features/blog/apiEndpoints.js\n\nimport { fetchData, postData, putData, deleteData } from '../../services/dataService';\n\n// Example usage\nexport const getBlogPosts = (signal) =&gt; {\n    return fetchData('/posts', signal);\n};\n\nexport const createBlogPost = (data, signal) =&gt; {\n    return postData('/posts', data, signal);\n};\n\nexport const updateBlogPost = (id, data, signal) =&gt; {\n    return putData(`/posts/${id}`, data, signal);\n};\n\nexport const deleteBlogPost = (id, signal) =&gt; {\n    return deleteData(`/posts/${id}`, signal);\n};\n</code></pre> <ul> <li>Reusability: You can reuse these methods across different parts of your application, making your code cleaner and more modular.</li> <li>Maintainability: If you need to change how requests are made or add common headers, you can do it in one place.</li> <li>Scalability: As your application grows, you can easily add more methods to <code>dataService.js</code> without affecting existing functionality.</li> </ul> <ol> <li>fetchData: This method handles GET requests to retrieve data from a specified URL.</li> <li>postData: This method handles POST requests to send data to a specified URL.</li> <li>putData: This method handles PUT requests to update existing data at a specified URL.</li> <li>deleteData: This method handles DELETE requests to remove data from a specified URL.</li> </ol> <p>For <code>apiClient</code>:</p> <ul> <li><code>httpClient</code>: A straightforward name that indicates it handles HTTP requests.</li> <li><code>axiosInstance</code>: Indicates that this is an instance of Axios specifically configured for your app.</li> <li><code>requestClient</code>: Emphasizes that this client is responsible for making requests.</li> <li><code>apiConnector</code>: Suggests that this module connects your application to the API.</li> <li><code>networkClient</code>: Highlights that this client is responsible for network communications.</li> </ul> <p>For <code>apiService</code>:</p> <ul> <li><code>apiEndpoints</code>: Indicates that this file defines the various endpoints your application communicates with.</li> <li><code>apiRequests</code>: Focuses on the request methods being defined within the file.</li> <li><code>dataService</code>: Suggests that this module handles data-fetching logic.</li> <li><code>apiUtility</code>: Implies that the file contains utility functions for API interactions.</li> <li><code>apiFacade</code>: Indicates that this module serves as a facade for interacting with the API.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#advanced","title":"Advanced","text":"StructureBenefits of This Placement <pre><code>redux\n\u2502\n\u251c\u2500\u2500 features                   // Slice features for different domains\n\u2502   \u251c\u2500\u2500 blog                   // Blog-related functionality\n\u2502   \u2502   \u251c\u2500\u2500 api.js             // API endpoint functions for the blog\n\u2502   \u2502   \u251c\u2500\u2500 service.js         // Business logic and API calls for the blog\n\u2502   \u2502   \u2514\u2500\u2500 slice.js           // Redux slice for managing blog state\n\u2502   \u2514\u2500\u2500 gallery                // Gallery-related functionality\n\u2502       \u251c\u2500\u2500 api.js             // API endpoint functions for the gallery\n\u2502       \u251c\u2500\u2500 service.js         // Business logic and API calls for the gallery\n\u2502       \u2514\u2500\u2500 slice.js           // Redux slice for managing gallery state\n\u2502\n\u251c\u2500\u2500 middleware                 // Custom middleware for Redux\n\u2502   \u251c\u2500\u2500 loggerMiddleware.js     // Middleware for logging actions\n\u2502\n\u251c\u2500\u2500 services                   // Shared services and configurations\n\u2502   \u251c\u2500\u2500 axiosInstance.js       // Axios instance for API calls\n\u2502   \u251c\u2500\u2500 dataService.js         // Generic data fetching utilities\n\u2502   \u251c\u2500\u2500 axiosInterceptors.js    // Axios interceptors for request/response handling\n\u2502   \u2514\u2500\u2500 apiManager.js          // Centralized API configuration for different APIs\n\u2502\n\u2514\u2500\u2500 store                      // Redux store setup\n    \u251c\u2500\u2500 rootReducer.js         // Combines all reducers\n    \u2514\u2500\u2500 store.js               // Creates and configures the Redux store\n</code></pre> <ol> <li> <p>Centralized Configuration: By placing <code>apiManager.js</code> in the <code>services</code> folder, you centralize the logic for API management alongside other shared services. This makes it easy to find and manage all related configurations.</p> </li> <li> <p>Easy Access: Features that require API interactions can easily import <code>apiManager.js</code> along with other services, promoting code reusability.</p> </li> <li> <p>Logical Grouping: Keeping the API manager with other service-related files keeps your project organized and logically structured.</p> </li> </ol> <p>Example of <code>apiManager.js</code></p> <p>Here\u2019s a simple implementation of what your <code>apiManager.js</code> might look like:</p> <pre><code>// services/apiManager.js\nimport axiosInstance from \"./axiosInstance\";\n\nconst apiManager = {\n  blog: axiosInstance.create({\n    baseURL: process.env.REACT_APP_BLOG_API_URL,\n  }),\n  dashboard: axiosInstance.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n  }),\n};\n\nexport default apiManager;\n</code></pre> <p>Usage in Feature Files</p> <p>You can now use the <code>apiManager</code> in your feature service files. For example, in <code>blog/service.js</code>, you might have:</p> <pre><code>// features/blog/service.js\nimport apiManager from \"../../services/apiManager\";\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n  const response = await apiManager.blog.get(\"/posts\", { cancelToken: signal });\n  return response.data;\n};\n\n// Add other functions for the blog feature as needed\n</code></pre> <p>Summary</p> <p>Placing <code>apiManager.js</code> in the services folder keeps your structure clean and organized, making it easier to manage and access various API configurations. This approach promotes reusability and clarity in your project.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/","title":"React State Updates: When to Use Functional Patterns vs. Direct Assignments","text":"","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#react-state-updates-when-to-use-functional-patterns-vs-direct-assignments","title":"React State Updates: When to Use Functional Patterns vs. Direct Assignments","text":"<p>The difference between <code>setContextRightClickId(prevId =&gt; id)</code> and <code>setContextRightClickId(data?.id)</code> lies in how each approach updates the state.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#1-using-functional-update-setcontextrightclickidprevid-id","title":"1. Using Functional Update: <code>setContextRightClickId(prevId =&gt; id)</code>","text":"<ul> <li>Description: This approach uses a functional update. It takes the previous state as an argument and returns the new state.</li> <li>Use Case: It's beneficial when the new state depends on the previous state, such as when multiple updates might occur quickly in succession.</li> <li>Standard Practice: This is often used for cases where you need to rely on the current state to compute the new state. It helps avoid potential issues with stale state.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#2-using-direct-assignment-setcontextrightclickiddataid","title":"2. Using Direct Assignment: <code>setContextRightClickId(data?.id)</code>","text":"<ul> <li>Description: This approach directly sets the state to a new value without depending on the previous state.</li> <li>Use Case: It\u2019s straightforward when you're simply updating the state based on an event or action that doesn't rely on the previous state.</li> <li>Standard Practice: This is perfectly acceptable for many cases, especially when you're directly setting a value based on an event (like a click).</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#which-to-use","title":"Which to Use?","text":"<ul> <li> <p>Use Functional Update: When you need to ensure the update is based on the latest state or when the update logic is more complex. For example, if you're incrementing a count or toggling a value based on the previous state.</p> </li> <li> <p>Use Direct Assignment: When you simply want to set a state based on an event or static data, and there's no chance of multiple updates overlapping.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#recommendation","title":"Recommendation","text":"<p>For your specific case of setting the context menu ID based on a right-click, either method will work. However, if you're confident that there will be no rapid state updates affecting this particular value, you can use <code>setContextRightClickId(data?.id)</code>. If you want to be extra cautious or if there's any complexity, prefer the functional update.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#example-in-context","title":"Example in Context","text":"<p>For setting the right-clicked ID, both approaches are valid, but typically:</p> <pre><code>// When directly using the ID from an event\nsetContextRightClickId(data?.id); // Direct assignment\n\n// When you might have complex state logic or multiple updates\nsetContextRightClickId((prevId) =&gt; id); // Functional update (not strictly necessary here)\n</code></pre> <p>In many practical scenarios, developers tend to use direct assignments for simplicity unless state dependencies dictate otherwise.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#main-difference","title":"Main Difference","text":"<p>The main differences between using <code>setContextRightClickId(prevId =&gt; id)</code> (functional update) and <code>setContextRightClickId(data?.id)</code> (direct assignment) are:</p> 1. Context of Use2. Concurrency Handling3. Readability and Complexity <ul> <li> <p>Functional Update (<code>prevId =&gt; id</code>):</p> <ul> <li>Utilizes the previous state to calculate the new state.</li> <li>Essential when the new state depends on the old state, especially in scenarios with potential concurrent updates.</li> </ul> </li> <li> <p>Direct Assignment (<code>data?.id</code>):</p> <ul> <li>Sets the state directly to a specific value based on external input (like an event).</li> <li>Simplifies the logic when you don't need to consider the previous state.</li> </ul> </li> </ul> <ul> <li> <p>Functional Update:</p> <ul> <li>Safer in scenarios where multiple state updates may occur quickly or simultaneously. It ensures you're working with the most up-to-date state.</li> </ul> </li> <li> <p>Direct Assignment:</p> <ul> <li>May lead to stale state issues if there are rapid updates, as it does not consider the current state when setting the new value.</li> </ul> </li> </ul> <ul> <li> <p>Functional Update:</p> <ul> <li>Can be more verbose, which may be helpful in complex scenarios, but could add unnecessary complexity if the previous state is not needed.</li> </ul> </li> <li> <p>Direct Assignment:</p> <ul> <li>More concise and easier to read when the new value does not depend on the previous state.</li> </ul> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#when-to-use-each-approach","title":"When to Use Each Approach","text":"Use Functional UpdateUse Direct Assignment <ul> <li>When the next state depends on the current state.</li> <li>When dealing with updates that may occur rapidly or in quick succession.</li> </ul> <ul> <li>When you're directly assigning a value that doesn't depend on the previous state.</li> <li>When you want clearer, simpler code and are certain about the context.</li> </ul> Summary <ul> <li>Functional Update is more robust and safe for scenarios where the new state depends on the previous state.</li> <li>Direct Assignment is simpler and works well when you have a straightforward update.</li> </ul> <p>In your specific case of setting an ID on right-click, either can work, but if you don't anticipate rapid updates or dependencies, the direct assignment is often the preferred choice for its simplicity.</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/","title":"How to Generate a Secure Secret Key in Django","text":"","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#how-to-generate-a-secure-secret-key-in-django","title":"How to Generate a Secure Secret Key in Django","text":"<p>To quickly generate a secret key for a Django project, you can use several methods. Here are a couple of easy ways to do it directly in your terminal or using Python:</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-1-using-djangos-get_random_secret_key","title":"Method 1: Using Django's <code>get_random_secret_key</code>","text":"<p>If you have Django installed, you can use Django's built-in method:</p> <pre><code>python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n</code></pre> <p>This will output a secure random secret key.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-2-using-python-with-secrets","title":"Method 2: Using Python with <code>secrets</code>","text":"<p>If you want to create a secret key manually using Python's <code>secrets</code> module, you can run:</p> <pre><code>python -c \"import secrets; print(secrets.token_urlsafe(50))\"\n</code></pre> <p>This generates a secure random URL-safe text string that can be used as a secret key.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-3-using-django-shell","title":"Method 3: Using Django Shell","text":"<p>If you're already working within a Django project, you can also generate a secret key in the Django shell:</p> <ol> <li> <p>Start the Django shell:</p> <pre><code>python manage.py shell\n</code></pre> </li> <li> <p>Then run:</p> <pre><code>from django.core.management.utils import get_random_secret_key\nprint(get_random_secret_key())\n</code></pre> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#adding-to-your-django-settings","title":"Adding to Your Django Settings","text":"<p>Once you've generated a secret key, add it to your <code>settings.py</code> file:</p> <pre><code>SECRET_KEY = 'your_generated_secret_key_here'\n</code></pre> <p>Make sure to keep this key secure and never expose it in public repositories!</p> python -c <p>In the context of the <code>python -c</code> command, the <code>-c</code> option stands for \"command.\" It tells the Python interpreter to execute the string of Python code that follows it as a command, rather than running a script from a file.</p> <p>Summary</p> <ul> <li><code>-c</code>: Short for \"command.\"</li> <li>Usage: Allows you to run Python code provided directly as a string.</li> </ul> <p>This feature is useful for executing quick, one-off snippets of Python code directly from the command line without the need to create a separate script file.</p>","tags":["Personal"]},{"location":"blog/2025/04/14/learning-gatsby/","title":"Learning Gatsby","text":"","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#learning-gatsby","title":"Learning Gatsby","text":"<p>Build a fast, secure, and powerful website using our React-based, open-source framework.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#part-0-set-up-your-development-environment","title":"Part 0: Set Up Your Development Environment","text":"<p>Gatsby uses a few more technologies under the hood.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#installation-guide","title":"Installation Guide","text":"<p>The rest of this part of the Tutorial walks you through how to install the following tools:</p> <ul> <li>Node.js (v18 or newer, but less than v21)</li> <li>Git</li> <li>Gatsby command line interface (CLI) (v5 or newer)</li> <li>Visual Studio Code</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#gatsby-cli","title":"Gatsby CLI","text":"<p>The Gatsby command line interface (CLI) is a tool that lets you quickly create new Gatsby-powered sites and run commands for developing Gatsby sites.</p> <p>The CLI is a published npm package, which means you can install it using npm.</p> SHELL<pre><code>npm install -g gatsby-cli\n</code></pre> SHELL<pre><code>gatsby --version\n</code></pre> <p>See the available commands:</p> <pre><code>gatsby --help\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#part-1-create-and-deploy-your-first-gatsby-site","title":"Part 1: Create and Deploy Your First Gatsby Site","text":"","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#create-a-gatsby-site","title":"Create a Gatsby site","text":"<pre><code>\ud83c\udf89  Your new Gatsby site My First Gatsby Site has been successfully\ncreated at ~/Desktop/my-first-gatsby-site.\nStart by going to the directory with\n\n  cd my-first-gatsby-site\n\nStart the local development server with\n\n  npm run develop\n\nSee all commands at\n\n  https://www.gatsbyjs.com/docs/gatsby-cli/\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#run-your-site-locally","title":"Run your site locally","text":"SHELL<pre><code>gatsby develop\n</code></pre> Note <p>If you weren\u2019t able to install the Gatsby command line interface globally, you can start your development server using the following command instead:</p> <pre><code>npm run develop\n</code></pre> <pre><code>You can now view my-first-gatsby-site in the browser.\n\u2800\n  http://localhost:8000/\n\u2800\nView GraphiQL, an in-browser IDE, to explore your site's data and\nschema\n\u2800\n  http://localhost:8000/___graphql\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#part-2-use-and-style-react-components","title":"Part 2: Use and Style React Components","text":"Learning <ul> <li>Create page components to add new pages to your site.</li> <li>Add a title to your site using the Gatsby Head API.</li> <li>Import and use a pre-built component from another package.</li> <li>Create your own reusable \u201cbuilding block\u201d component.</li> <li>Use component props to change the way a component renders.</li> <li>Use the <code>children</code> prop to create a wrapper component.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#a-quick-intro-to-react","title":"A quick intro to React","text":"","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#what-is-react","title":"What is React?","text":"<p>React is the JavaScript library that Gatsby uses under the hood to create user interfaces (UIs). With React, you can break down your UI into smaller, reusable pieces called components.</p> <p>For example, imagine the UI for an online store\u2019s Products page:</p> <p></p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#what-is-a-react-component","title":"What is a React component?","text":"<p>Under the hood, a React component is a function that returns a React element. A React element is an object that React uses to render DOM elements.</p> <p></p> <p>The simplest way to write React elements is with JSX. JSX is a JavaScript syntax extension that describes the DOM structure for your component. It looks a bit like having HTML in your JavaScript files:</p> JSX<pre><code>const hello = &lt;h1&gt;Hello world!&lt;/h1&gt;;\n</code></pre> <p>So a simple React component might look something like this:</p> <pre><code>const Greeting = () =&gt; {\n  return &lt;h1&gt;Hello world!&lt;/h1&gt;;\n};\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#create-a-page-component","title":"Create a page component","text":"<p>There are two main types of components in a Gatsby site. The first type you\u2019ll create are page components. A page component contains all the UI elements for a specific page of your site.</p> <p>In this section, you\u2019ll create two new page components: one for the Home page and one for an About page.</p> Key React Concept: Writing a React component <p>There are three main steps to writing a React component:</p> <ol> <li>Import React from the <code>'react'</code> package, so that you can use JSX inside your <code>.js</code> file.</li> <li>Define your component. It should be a function that returns a JSX element.</li> <li>Export your component, so that it can be used by other parts of your site.</li> </ol> my-component.js<pre><code>// Step 1: Import React. This lets you use JSX inside your .js file.\nimport * as React from 'react'\n\n/* Step 2: Define your component. Note that your\ncomponent name should start with a capital letter. */\nconst MyComponent = () =&gt; {\n    return (\n        &lt;h1&gt;Hi, welcome to my site!&lt;/h1&gt;\n    )\n}\n\n/* Step 3: Export your component so it\ncan be used by other parts of your app. */\nexport default MyComponent\n</code></pre> <p>Your component must return a single React element, but you can put as many elements inside that top-level element as you want. The code snippet below shows an example of a valid component and an invalid component:</p> <pre><code>import * as React from 'react'\n\nconst ValidComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;A valid component!&lt;/h1&gt;\n            &lt;p&gt;This will work fine.&lt;/p&gt;\n            &lt;p&gt;\n                Since there is only one top-level element: the div.\n            &lt;/p&gt;\n        &lt;/div&gt;\n    )\n}\n\nconst InvalidComponent = () =&gt; {\n    return (\n        &lt;h1&gt;This won't work.&lt;/h1&gt;\n        &lt;p&gt;Because there are two elements at the top level.&lt;/p&gt;\n    )\n}\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#task-update-the-home-page-content","title":"Task: Update the home page content","text":"<p>Now that you\u2019ve gotten a high-level introduction to React, it\u2019s time to try your hands at writing some React components. To start, you\u2019ll update the content for the home page.</p> Note <p>If you haven\u2019t already, open your Gatsby site in Visual Studio Code, and start up your local development server in the command line:</p> <ol> <li>Open your command line application.</li> <li>Change directories into the folder for your Gatsby site.</li> <li>Run <code>gatsby develop</code>.</li> <li>Open <code>localhost:8000</code> in your web browser.</li> </ol> <ol> <li> <p>Open your <code>src/pages/index.js</code> file. Replace its contents with the following. (Notice how the component\u2019s structure matches the three steps for writing React components?)</p> src/pages/index.js<pre><code>// Step 1: Import React\nimport * as React from \"react\";\n\n// Step 2: Define your component\nconst IndexPage = () =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;h1&gt;Welcome to my Gatsby site!&lt;/h1&gt;\n      &lt;p&gt;I'm making this by following the Gatsby Tutorial.&lt;/p&gt;\n    &lt;/main&gt;\n  );\n};\n\n// You'll learn about this in the next task, just copy it for now\nexport const Head = () =&gt; &lt;title&gt;Home Page&lt;/title&gt;;\n\n// Step 3: Export your component\nexport default IndexPage;\n</code></pre> </li> <li> <p>Go to <code>localhost:8000</code> in a web browser. (You might need to wait a moment while your development server rebuilds.) Once your page updates, it should look something like this:</p> <p></p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#key-gatsby-concept","title":"Key Gatsby Concept \ud83d\udca1","text":"<p>Gatsby automatically creates pages for React components that are the default export of files in the <code>src/pages</code> directory.</p> <p>If a user tries to visit the URL for a page that doesn\u2019t actually exist, Gatsby will use the <code>src/pages/404.js</code> page component to display an error instead. Go ahead and give it a try! (If you\u2019re trying it on <code>localhost:8000</code> you\u2019ll need to click the \u201cPreview custom 404 page\u201d button on the development 404 page.)</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#task-create-a-new-page-component-for-an-about-page","title":"Task: Create a new page component for an About page","text":"<p>Now that you\u2019ve updated the existing Home page, try creating a new page from scratch. Make an About page, so that you can tell people a little about yourself.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#1-create-a-new-file-srcpagesaboutjs","title":"1. Create a new file: <code>src/pages/about.js</code>.","text":"<p>Use the code below as a starting point for your About page. (Feel free to switch up the content to make it more specific to you. Maybe share your favorite food or go-to vacation spot!)</p> src/pages/about.js<pre><code>// Step 1: Import React\nimport * as React from \"react\";\n\n// Step 2: Define your component\nconst AboutPage = () =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;h1&gt;About Me&lt;/h1&gt;\n      &lt;p&gt;\n        Hi there! I'm the proud creator of this site, which I built with Gatsby.\n      &lt;/p&gt;\n    &lt;/main&gt;\n  );\n};\n\n// Step 3: Export your component\nexport default AboutPage;\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#2-add-a-page-title-to-your-page","title":"2. Add a page title to your page.","text":"<p>Gatsby lets you define a <code>&lt;title&gt;</code> and other document metadata with the Gatsby Head API. You have to export a component called <code>Head</code> from your page template to apply the metadata. Adding such metadata helps search engines like Google to better understand your site. For this tutorial you\u2019ll only be adding titles to pages but you can also later add other metadata.</p> src/pages/about.js<pre><code>import * as React from \"react\";\n\nconst AboutPage = () =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;h1&gt;About Me&lt;/h1&gt;\n      &lt;p&gt;\n        Hi there! I'm the proud creator of this site, which I built with Gatsby.\n      &lt;/p&gt;\n    &lt;/main&gt;\n  );\n};\n\nexport const Head = () =&gt; &lt;title&gt;About Me&lt;/title&gt;;\n\nexport default AboutPage;\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#key-gatsby-concept_1","title":"Key Gatsby Concept \ud83d\udca1","text":"<p>You can use the Gatsby Head API by exporting a named function called <code>Head</code> in your pages and page templates (e.g. the ones used by <code>createPage</code> or the File System Route API).</p> <p>Be sure to capitalize <code>Head</code> and please note that exporting this named function inside a component like <code>Layout</code> won\u2019t add the metadata to the <code>&lt;head&gt;</code>. The above works because you\u2019re exporting Head in a page inside <code>src/pages</code>.</p> <p>You can add any valid <code>&lt;head&gt;</code> tags inside the function and they\u2019ll be added to the page, for example:</p> <pre><code>export const Head = () =&gt; (\n  &lt;&gt;\n    &lt;title&gt;About Me&lt;/title&gt;\n    &lt;meta name=\"description\" content=\"Your description\" /&gt;\n  &lt;/&gt;\n);\n</code></pre> <p>After going through this tutorial, be sure to check out Adding an SEO Component.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#3-in-a-web-browser-visit-localhost8000about","title":"3. In a web browser, visit <code>localhost:8000/about</code>.","text":"<p>When your development server finishes rebuilding your site, the About page should look something like this:</p> <p></p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#key-gatsby-concept_2","title":"Key Gatsby Concept \ud83d\udca1","text":"<p>Pages created in the <code>src/pages</code> directory use the name of the file as the route for the page.</p> <p>For example, if you had a file called <code>src/pages/garden-gnomes.js</code>, you could access that page at <code>localhost:8000/garden-gnomes</code>.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#use-the-link-component","title":"Use the <code>&lt;Link&gt;</code> component","text":"<p>Now that you\u2019ve built a few page components, it\u2019s time to look at the other type of React components in a Gatsby site: \u201cbuilding-block\u201d components.</p> <p>Note: The term building-block component isn\u2019t an official technical term. It\u2019s just the best name we could come up with to describe this kind of component.</p> <p>Building-block components are smaller components that represent just a part of a page\u2019s user interface (instead of an entire page). Think back to the store website example from the \u201cWhat is React?\u201d section. The <code>Navbar</code>, <code>Sidebar</code>, <code>ProductGrid</code>, and <code>ProductCard</code> components are examples of building-block components. You can combine several smaller building-block components into a larger page component.</p> <p></p> <p>One of the powerful things about building-block components is that you can reuse the same component in multiple places across your site. This is especially useful for pieces of your UI that share a similar structure but render different values.</p> <p>React has a built-in feature to help you make your components dynamic: properties (or props, for short).</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#key-react-concept-components-with-props","title":"Key React Concept: Components with props","text":"<p>You can use component props to change the way a component renders. Props are essentially arguments that you pass into your component function.</p> <p></p> <p>The <code>Link</code> component is an example of a pre-built component that you can use in your site. In other words, the <code>Link</code> component is defined and maintained by another package (in this case, the Gatsby package). That means you can import it and use it in your own components without knowing too much about how it works under the hood.</p> <p>The <code>Link</code> component lets you add a link to another page in your Gatsby site. It\u2019s similar to an HTML <code>&lt;a&gt;</code> tag, but with some extra performance benefits. The <code>Link</code> component takes a prop called to, which is similar to the <code>&lt;a&gt;</code> tag\u2019s <code>href</code> attribute. The value should be the URL path to the page on your site you want to link to.</p> src/pages/index.js<pre><code>import * as React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst IndexPage = () =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;h1&gt;Welcome to my Gatsby site!&lt;/h1&gt;\n      &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n      &lt;p&gt;I'm making this by following the Gatsby Tutorial.&lt;/p&gt;\n    &lt;/main&gt;\n  );\n};\n\nexport const Head = () =&gt; &lt;title&gt;Home Page&lt;/title&gt;;\n\nexport default IndexPage;\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#create-a-reusable-layout-component","title":"Create a reusable layout component","text":"<p>Instead, it would be better to create one common <code>Layout</code> component that groups all the shared elements to reuse across multiple pages. That way, when you need to make updates to the layout, you can make the change in one place and it will automatically be applied to all the pages using that component.</p> <p>In this section, you\u2019ll create your first custom building-block component: <code>Layout</code>. To do that, you\u2019ll need to use a special React prop called <code>children</code>.</p>","tags":["React","Toolkit"]},{"location":"blog/2025/04/14/learning-gatsby/#reference","title":"Reference","text":"<ul> <li>Official: gatsbyjs</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/","title":"React Offline Service Workers Documentation","text":"","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#react-offline-service-workers-documentation","title":"React Offline Service Workers Documentation","text":"<p>When deciding between vite-plugin-pwa and Workbox for your Vite offline web application, consider the following:</p> <p>Overview of Both Options</p> <ul> <li> <p><code>vite-plugin-pwa</code>: This plugin integrates Workbox under the hood to handle service worker management, caching, and offline support. It provides a simpler, more streamlined approach to setting up PWAs with Vite, offering features like automatic caching and manifest generation.</p> </li> <li> <p><code>Workbox</code>: Workbox is a more low-level library that allows for detailed control over service worker behavior, caching strategies, and routing. It requires manual configuration and can be more complex to set up compared to vite-plugin-pwa.</p> </li> </ul> Key Considerations <p>Ease of Use and Integration</p> <ul> <li>vite-plugin-pwa is generally easier to integrate into a Vite project. It handles many configurations automatically, making it suitable for developers who want a straightforward PWA setup.</li> <li>Workbox requires more manual setup and configuration, which can be beneficial if you need fine-grained control over caching and routing strategies.</li> </ul> <p>Customization and Control</p> <ul> <li>Workbox provides more detailed control over service worker behavior, allowing for custom caching strategies and advanced routing configurations.</li> <li>vite-plugin-pwa offers some customization options but relies on Workbox under the hood, so it might not provide the same level of control as using Workbox directly.</li> </ul> <p>Compatibility and Support</p> <ul> <li>Both vite-plugin-pwa and Workbox are compatible with Vite. However, vite-plugin-pwa is specifically designed for Vite, making it a more integrated solution.</li> </ul> <p>Recommendation</p> <p>If you're looking for a straightforward way to add PWA features to your Vite application with minimal configuration, vite-plugin-pwa is likely the better choice. It simplifies the process of setting up offline support and integrates well with Vite.</p> <p>However, if you need more control over caching strategies or advanced service worker configurations, using <code>Workbox</code> directly might be preferable. This approach requires more setup but offers greater flexibility.</p> <p>In summary, <code>vite-plugin-pwa</code> is recommended for ease of use and integration, while <code>Workbox</code> is better suited for projects requiring detailed customization.</p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#project-structure","title":"Project Structure","text":"<p>The <code>/sw.js</code> file is typically the service worker script that manages caching, offline support, and other features for your web application. When you register a service worker, you specify the URL of this script relative to the origin of your site.</p> <p>Where to Place <code>/sw.js</code></p> <p>For a service worker to control your entire site, it should be placed at the root of your site. This is because the scope of a service worker is determined by its location on the server. If you place the service worker at a subdirectory, it will only control pages within that subdirectory and its children.</p> <p>Example Structure</p> <p>Here\u2019s an example of where you might place your <code>sw.js</code> file in a Vite project:</p> <pre><code>project/\n|- public/\n    |- index.html\n|- src/\n    |- main.js\n|- sw.js\n|- vite.config.js\n</code></pre> <p>In this structure, <code>sw.js</code> is at the root level, allowing it to control the entire site.</p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#using-vite-plugin-pwa","title":"Using <code>vite-plugin-pwa</code>","text":"<p>If you're using <code>vite-plugin-pwa</code>, the plugin automatically generates the service worker code for you based on your configuration in <code>vite.config.js</code>. You don't need to manually write the <code>sw.js</code> file unless you want to customize it beyond what the plugin offers.</p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#manual-customization","title":"Manual Customization","text":"<p>If you need more control or customization beyond what <code>vite-plugin-pwa</code> provides, you can manually create and manage your <code>sw.js</code> file. However, this requires a deeper understanding of service workers and caching strategies.</p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#serving-swjs","title":"Serving sw.js","text":"<p>Ensure that your sw.js file is served from the root of your site. For development, you can place it in the public directory of your Vite project. In production, configure your server to serve this file from the root URL (e.g., https://example.com/sw.js).</p> Tip <ul> <li>Default Behavior: With <code>vite-plugin-pwa</code>, you don't need a manual <code>sw.js</code> file. The plugin generates it for you.</li> <li>Customization: If you need more control, use the <code>injectManifest</code> strategy and manage your service worker manually.</li> </ul> Note <p><code>vite-plugin-pwa</code> plugin uses workbox-build node library to build the service worker, you can find more information in the Service Worker Strategies And Behaviors and Workbox sections.</p> <ul> <li>Reference</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#important-by-bishow","title":"IMPORTANT BY BISHOW","text":"<p>Reference Guide</p> <p>If you want to check it in <code>dev</code>, add the <code>devOptions</code> option to the plugin configuration (you will have the Web App Manifest and the generated service worker):</p> <pre><code>import { VitePWA } from \"vite-plugin-pwa\";\n\nexport default defineConfig({\n  plugins: [\n    VitePWA({\n      registerType: \"autoUpdate\",\n      devOptions: {\n        enabled: true,\n      },\n    }),\n  ],\n});\n</code></pre>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#1-use-a-framework-vite-plugin-pwa","title":"1. Use a framework <code>vite-plugin-pwa</code>","text":"<p>Integrating vite-plugin-pwa into your Vite project allows you to enable offline mode for your site. This plugin uses <code>Workbox</code> under the hood to handle service worker management, caching, and offline support. Here\u2019s how you can achieve offline mode and sync data when the user comes online:</p> Offline Mode with vite-plugin-pwa <ol> <li> <p>Install vite-plugin-pwa: Add the plugin to your project using npm or yarn:</p> <pre><code>yarn add vite-plugin-pwa -D\n\npnpm add -D vite-plugin-pwa\n</code></pre> </li> <li> <p>Configure <code>vite-plugin-pwa</code>: In your <code>vite.config.ts</code>, include the plugin and configure it to cache necessary assets:</p> JavaScriptTypeScript vite.config.js<pre><code>import { VitePWA } from 'vite-plugin-pwa';\n\nexport default {\n    plugins: [\n        VitePWA({\n            // Your configuration options here\n            manifest: {\n                // Your manifest settings here\n            },\n            workbox: {\n                globPatterns: [\"**/*.{js,css,html,png}\"],\n            },\n            includeAssets: [\"**/*\"],\n        }),\n    ],\n};\n</code></pre> vite.config.ts<pre><code>import { VitePWA } from \"vite-plugin-pwa\";\n\nexport default defineConfig({\n    plugins: [\n        // Other plugins...\n        VitePWA({\n            manifest: {\n                // Your manifest settings here\n            },\n            workbox: {\n                globPatterns: [\"**/*.{js,css,html,png}\"],\n            },\n            includeAssets: [\"**/*\"],\n        }),\n    ],\n});\n</code></pre> FULL<pre><code>import { VitePWA } from 'vite-plugin-pwa';\n\nexport default {\n    plugins: [\n        VitePWA({\n            manifest: {\n                name: 'My PWA App',\n                short_name: 'My App',\n                theme_color: '#ffffff',\n                icons: [\n                    {\n                        src: 'favicon.svg',\n                        sizes: '192x192',\n                        type: 'image/svg+xml',\n                    },\n                    {\n                        src: 'favicon.png',\n                        sizes: '512x512',\n                        type: 'image/png',\n                    },\n                ],\n            },\n            workbox: {\n                globPatterns: [\"**/*.{js,css,html,png}\"],\n            },\n            includeAssets: [\"**/*\"],\n            injectRegister: 'auto', // Automatically registers the service worker\n        }),\n    ],\n};\n</code></pre> </li> <li> <p>Service Worker Registration: Use <code>registerSW</code> from <code>virtual:pwa-register</code> to register the service worker in your main JavaScript file:</p> <p>The service worker is automatically registered by vite-plugin-pwa when you use the <code>injectRegister</code> option. However, if you prefer manual registration or need more control, you can set <code>injectRegister: null</code> and manually register the service worker in your main JavaScript file:</p> <pre><code>import { registerSW } from \"virtual:pwa-register\";\n\nregisterSW({\n    // Your registration options here\n});\n</code></pre> <p>Note</p> <p>You should add the service worker registration code in your main JavaScript entry file. This is typically the file where your application starts, such as <code>main.js</code> or <code>index.js</code>.</p> main.js<pre><code>import { registerSW } from \"virtual:pwa-register\";\n\n// This step is optional if you're using injectRegister: 'auto'\nif (\"serviceWorker\" in navigator) {\n    registerSW({\n        // Your registration options here\n    });\n}\n</code></pre> <p>However, if you're using the <code>injectRegister</code> option with <code>vite-plugin-pwa,</code> you might not need to manually register the service worker. The plugin can handle this for you automatically.</p> <p>Using injectRegister</p> <p>In your <code>vite.config.js</code>, you can configure <code>injectRegister</code> to automatically register the service worker:</p> <pre><code>import { VitePWA } from 'vite-plugin-pwa';\n\nexport default {\n    plugins: [\n        VitePWA({\n            injectRegister: 'auto', // Automatically registers the service worker\n            // Other configurations...\n        }),\n    ],\n};\n</code></pre> <p>Manual Registration</p> <p>If you choose to manually register the service worker (by setting <code>injectRegister: null</code>), you would do so in your main JavaScript file as shown above. However, this approach is generally less recommended unless you have specific requirements that aren't met by the automatic registration provided by the plugin.</p> </li> </ol> <p>Understanding the Manifest File</p> <p>The <code>manifest</code> file is automatically generated by vite-plugin-pwa based on the configuration provided in vite.config.js. It contains metadata about your application, such as its name, icons, and theme color. This file is crucial for making your application installable on devices.</p> <p>Syncing Data When Online</p> <p>To sync data when the user comes online, you can use the Background Sync API or implement a custom solution using service workers and caching. Here\u2019s a basic approach:</p> <ol> <li>Cache Data Locally: When the user makes changes offline, cache the data locally using IndexedDB or another storage mechanism.</li> <li>Detect Network Changes: Use the <code>navigator.onLine</code> property or the Network Information API to detect when the user comes online.</li> <li>Sync Data: When the network connection is restored, send the cached data to your server using AJAX requests or fetch API.</li> </ol> Example Sync Function<pre><code>function syncData() {\n  // Check if the user is online\n  if (navigator.onLine) {\n    // Fetch cached data from local storage\n    const cachedData = localStorage.getItem(\"cachedData\");\n\n    if (cachedData) {\n      // Send the data to the server\n      fetch(\"/sync-data\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(JSON.parse(cachedData)),\n      })\n        .then((response) =&gt; response.json())\n        .then((data) =&gt; console.log(data))\n        .catch((error) =&gt; console.error(\"Error syncing data:\", error));\n\n      // Clear the cached data\n      localStorage.removeItem(\"cachedData\");\n    }\n  }\n}\n\n// Call syncData when the network connection changes\nwindow.addEventListener(\"online\", syncData);\n</code></pre> <p>This approach allows your site to function offline and sync data when the user comes online. However, implementing background sync or more complex caching strategies might require additional setup with Workbox or custom service worker logic.</p> Example of Handling Offline Data Storage <p>When the user is offline, store data in <code>localStorage</code> or use a more robust solution like <code>IndexedDB</code> for larger datasets:</p> <pre><code>function saveDataOffline(data) {\n    localStorage.setItem(\"cachedData\", JSON.stringify(data));\n}\n\n// Example usage\nconst userData = { name: \"John Doe\", message: \"Hello, world!\" };\nsaveDataOffline(userData);\n</code></pre> <p>This setup allows your application to function offline and sync data when the user comes online, using vite-plugin-pwa for service worker management and manifest generation.</p>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#2-install-workbox-low-level-library","title":"2. Install Workbox <code>low-level library</code>","text":"","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#workbox-guide","title":"Workbox Guide","text":"<p>To use Workbox with <code>pnpm</code>, you typically need to install it as a dependency in your project. Workbox is a set of libraries for building Progressive Web Apps (PWAs), which can help you implement offline support and data synchronization in your expense tracker application.</p> <p>Installing Workbox with <code>pnpm</code></p> <p>You can install Workbox using <code>pnpm</code> by running the following command in your terminal:</p> bash<pre><code>pnpm install workbox-cli --save-dev\n</code></pre> <p>This command installs the Workbox CLI as a development dependency, which you can use to generate service workers for your application.</p> Steps <p>To install Workbox using pnpm, you can follow these steps:</p> <p>1. Install Workbox CLI</p> <p>First, you need to install the Workbox CLI as a development dependency. This package provides a command-line interface for generating service workers with Workbox.</p> <pre><code>pnpm install workbox-cli --save-dev\n</code></pre> <p>2. Install Workbox SW</p> <p>If you need to use the <code>workbox-sw</code> module directly in your application, you can install it as follows:</p> <pre><code>pnpm install workbox-sw\n</code></pre> <p>3. Install Workbox Window (if necessary)</p> <p>If your project uses <code>vite-plugin-pwa</code> or similar plugins that require <code>workbox-window</code>, ensure it is installed:</p> <pre><code>pnpm install workbox-window --save-dev\n</code></pre> <p>This step is crucial if you encounter issues related to missing workbox-window dependencies during build processes.</p> <p>4. Configure Workbox</p> <p>After installation, you can configure Workbox by creating a configuration file (e.g., <code>workbox-config.js</code>) and integrating it into your build process. Here\u2019s a basic example of how you might add Workbox to your <code>package.json</code> scripts:</p> <pre><code>\"scripts\": {\n    \"build\": \"my-build-script &amp;&amp; workbox generateSW workbox-config.js\"\n}\n</code></pre> <p>Example Configuration</p> <p>Here\u2019s a simple <code>workbox-config.js</code> file:</p> <pre><code>module.exports = {\n    globDirectory: 'dist/',\n    globPatterns: ['**/*.{html,js,css,png,jpg,json}'],\n    swDest: 'dist/sw.js',\n    clientsClaim: true,\n    skipWaiting: true,\n};\n</code></pre> <p>This configuration tells Workbox to generate a service worker that caches files in your dist directory.</p> <p>Conclusion</p> <ul> <li>Install Workbox CLI for generating service workers.</li> <li>Install Workbox SW if you need direct access to its features.</li> <li>Install Workbox Window if required by your build process.</li> <li>Configure Workbox according to your project needs.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#reference","title":"Reference","text":"<ul> <li>Official: Using workbox-window </li> <li> <p>Official: Service Worker Lifecycle</p> </li> <li> <p>npm: vite-plugin-pwa</p> </li> <li> <p>DOCS</p> </li> <li> <p>Official: BUN</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#related-blogs","title":"Related Blogs","text":"<ul> <li>Reddit: Is it possible to make a fully offline app with React?</li> <li>Stackoverflow: How to create simple React app without internet connection</li> <li>Reddit: What's the status with \"Bun\"? </li> <li>Medium: Make Your React App Offline-Ready: The Missing Guide</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/10/react-offline-service-workers-documentation/#issue-solved","title":"Issue Solved","text":"<p>[plugin:vite:import-analysis] Failed to resolve import \"workbox-window\" from \"../../../../../@vite-plugin-pwa/virtual:pwa-register\". Does the file exist?</p> <p><code>\"workbox-window\" from \"../../../../../@vite-plugin-pwa/virtual:pwa-register\"</code>, suggests that Vite is unable to resolve the import of <code>workbox-window</code> from the virtual:pwa-register module. This issue might be due to several reasons:</p> Missing Dependencies <p>Ensure that all necessary dependencies are installed. <code>vite-plugin-pwa</code> uses <code>workbox-window</code> internally, but it should be handled automatically. However, if you encounter issues, you might need to manually install <code>workbox-window</code>.</p> <pre><code>pnpm add workbox-window\n</code></pre> <p>TypeScript Configuration</p> <p>If you're using TypeScript, ensure that your <code>tsconfig.json</code> includes the necessary type definitions for <code>vite-plugin-pwa</code>. You can add the following to your <code>compilerOptions.types</code> array:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"types\": [\n      \"vite-plugin-pwa/client\"\n    ]\n  }\n}\n</code></pre>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/","title":"Resolving GPG Key Errors in Ubuntu Repositories: Causes, Solutions, and Prevention","text":"","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention","title":"Resolving GPG Key Errors in Ubuntu Repositories: Causes, Solutions, and Prevention","text":"<p>This documentation provides an overview of how to troubleshoot and resolve GPG key errors in Ubuntu repositories, such as the \"NO_PUBKEY\" error. It also provides guidelines on how to prevent these errors in the future.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#introduction","title":"Introduction","text":"<p>When you encounter errors like \"The following signatures couldn't be verified because the public key is not available: NO_PUBKEY,\" it usually means the system is unable to authenticate packages from a specific repository. This guide covers the reasons behind these errors, how to solve them, and how to prevent them from occurring in the future.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Causes of GPG Key Errors</li> <li>Solutions to GPG Key Errors</li> <li>Preventing GPG Key Errors in the Future</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#causes-of-gpg-key-errors","title":"Causes of GPG Key Errors","text":"<p>The \"NO_PUBKEY\" error is usually triggered by one or more of the following reasons:</p> <ol> <li> <p>Missing or Invalid GPG Key</p> <p>Each repository uses a GPG key to sign its package metadata. If your system does not have the correct public key, it will fail to verify the repository, resulting in this error.</p> </li> <li> <p>Repository Key Rotation</p> <p>Repositories, such as Docker, periodically rotate their GPG keys. When this happens, the older keys may no longer work, causing verification errors.</p> </li> <li> <p>Repository Added Without Key</p> <p>When a repository is added manually but its associated GPG key is not imported, the repository's authenticity cannot be verified, triggering the \"NO_PUBKEY\" error.</p> </li> </ol> Conclusion <p>These are the primary causes of GPG key errors in Ubuntu repositories. Understanding the root cause will help you quickly resolve the issue and avoid future errors.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#solutions-to-gpg-key-errors","title":"Solutions to GPG Key Errors","text":"<p>To resolve GPG key errors in Ubuntu repositories, follow these steps:</p> <ol> <li> <p>Add the Missing GPG Key</p> <p>If the error indicates that a public key is missing, you can import it manually using the following command:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc\n</code></pre> </li> <li> <p>Update Your Package List</p> <p>After adding the key, refresh your package list with:</p> <pre><code>sudo apt update\n</code></pre> <p>This will allow Ubuntu to fetch the repository metadata and use the newly added GPG key for verification.</p> </li> <li> <p>Verify Repository Integrity</p> <p>To ensure the error is resolved, you can check if the repository's metadata is now authenticated. If the error persists, verify that the correct key has been added and that the repository URL is accurate.</p> </li> </ol> Conclusion <p>By adding the missing key and updating your package list, you can easily resolve GPG key errors in Ubuntu repositories.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#preventing-gpg-key-errors-in-the-future","title":"Preventing GPG Key Errors in the Future","text":"<p>To avoid GPG key errors in the future, consider the following best practices:</p> <ol> <li> <p>Regularly Update Repository Keys</p> <p>Repositories periodically rotate their GPG keys. It's a good idea to check for key updates from time to time, especially when you encounter errors. Docker, for example, will often announce key changes on their website.</p> </li> <li> <p>Use the New Keyring Management System</p> <p>Instead of using the deprecated apt-key command, store GPG keys in <code>/etc/apt/trusted.gpg.d/</code> for better key management:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc\n</code></pre> </li> <li> <p>Automate Key Management</p> <p>If you're managing multiple systems, automate the key management process. You can write scripts to check for key updates and ensure they are properly added.</p> </li> <li> <p>Monitor Repository Security Notices</p> <p>Keep track of security announcements from your repository providers. They will often announce key rotations or other important updates, which can help you stay ahead of any potential issues.</p> </li> </ol> Conclusion <p>By following these practices, you can minimize the chances of encountering GPG key errors in the future and ensure smooth package management on your system.</p>","tags":["Personal"]},{"location":"blog/2024/04/17/rtk-in-depth/","title":"RTK in depth","text":"","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#rtk-in-depth","title":"RTK in depth","text":"<p>RTK (Redux Toolkit) provides a powerful way to manage state in a React application using Redux. One of its key features is the createSlice function, which simplifies the process of creating Redux actions and reducers. When you create a slice, it automatically generates action creators based on the reducers you define.</p>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#breakdown-of-createslice","title":"Breakdown of createSlice","text":"<ol> <li> <p>Structure: A slice contains three main components:</p> <ul> <li>Name: A string that identifies the slice.</li> <li>Initial State: The starting state of your slice.</li> <li>Reducers: An object where each key is an action type and its corresponding value is a reducer function that defines how the state should change.</li> </ul> </li> <li> <p>Generated Actions: When you define reducers in a slice, RTK automatically generates action creators for each of them. These action creators are functions that return action objects, which can be dispatched to the Redux store.</p> </li> </ol> ExampleKey Concepts <pre><code>import { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: { value: 0 },\n    reducers: {\n        increment: (state) =&gt; {\n            state.value += 1; // Directly mutates the state\n        },\n        decrement: (state) =&gt; {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action) =&gt; {\n            state.value += action.payload;\n        },\n    },\n});\n\n// Actions generated from the reducers\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The reducer itself\nexport default counterSlice.reducer;\n</code></pre> <ol> <li>Automatic Action Creators: In the above example, <code>increment</code>, <code>decrement</code>, and <code>incrementByAmount</code> are action creators that RTK generates for you. You can dispatch these actions in your components.</li> <li>Payloads: The <code>incrementByAmount</code> action takes a payload (which is passed in the action parameter) to adjust the counter by a specific amount.</li> <li>Immutable Updates: RTK uses Immer under the hood, which allows you to write \"mutative\" code in reducers. Immer takes care of creating a new state tree, making your reducers simpler and more intuitive.</li> </ol>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#using-the-actions","title":"Using the Actions","text":"<p>You can dispatch these actions in your components like this:</p> ExampleSummary <pre><code>import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increment, decrement, incrementByAmount } from './counterSlice';\n\nconst Counter = () =&gt; {\n    const dispatch = useDispatch();\n    const count = useSelector((state) =&gt; state.counter.value);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{count}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; dispatch(increment())}&gt;Increment&lt;/button&gt;\n            &lt;button onClick={() =&gt; dispatch(decrement())}&gt;Decrement&lt;/button&gt;\n            &lt;button onClick={() =&gt; dispatch(incrementByAmount(5))}&gt;Increment by 5&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>Efficiency: RTK's <code>createSlice</code> simplifies state management by automatically generating actions and reducers.</li> <li>Readability: The approach makes it easier to read and understand the flow of state changes.</li> <li>Best Practices: Encourages best practices with immutability and structure, making your Redux code cleaner and more maintainable.</li> </ul> <p>This encapsulation of actions and reducers not only streamlines your code but also enhances maintainability, especially in larger applications.</p>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/","title":"Understanding Async/Await in Redux Thunks and React Components","text":"","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#understanding-asyncawait-in-redux-thunks-and-react-components","title":"Understanding Async/Await in Redux Thunks and React Components","text":"<p>As modern web applications grow in complexity, managing asynchronous operations becomes crucial. When using Redux for state management, you might find yourself dealing with asynchronous actions using <code>createAsyncThunk</code> from Redux Toolkit.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#overview","title":"Overview","text":"<p>This blog post explores how to effectively use <code>async/await</code> in both Redux thunks and React components to handle API calls.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#what-is-createasyncthunk","title":"What is createAsyncThunk?","text":"<p><code>createAsyncThunk</code> is a utility from Redux Toolkit that simplifies the process of creating thunks for handling asynchronous logic. It allows you to dispatch actions based on the lifecycle of a promise\u2014pending, fulfilled, and rejected. This can significantly reduce boilerplate code when making API requests.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#using-asyncawait-in-thunks","title":"Using Async/Await in Thunks","text":"<p>When defining a thunk, you can use <code>async/await</code> to handle asynchronous API requests cleanly. For example, consider the following thunk that fetches blog posts:</p> <pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\"blog/fetchBlogs\", async (token) =&gt; {\n  const response = await axios.get(\n    \"https://jsonplaceholder.typicode.com/posts\",\n    {\n      cancelToken: token,\n    }\n  );\n  return response.data;\n});\n</code></pre> <p>In this example, the <code>fetchBlogs</code> thunk uses <code>async/await</code> to make the Axios GET request, returning the fetched data or throwing an error if the request fails.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#handling-api-calls-in-react-components","title":"Handling API Calls in React Components","text":"<p>In your React components, you might also want to handle asynchronous logic when dispatching actions. While you can use <code>async/await</code> here as well, it's often more straightforward to handle the promise directly:</p> <pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchBlogs } from \"./blogSlice\";\nimport axios from \"axios\";\n\nconst BlogList = () =&gt; {\n  const dispatch = useDispatch();\n  const { blogs, status, error } = useSelector((state) =&gt; state.blog);\n\n  useEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n\n    const fetchData = () =&gt; {\n      if (status === \"idle\") {\n        dispatch(fetchBlogs(source.token)).catch((error) =&gt; {\n          if (axios.isCancel(error)) {\n            console.log(\"Request canceled:\", error.message);\n          } else {\n            console.error(\"Error fetching blogs:\", error);\n          }\n        });\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      source.cancel(\"Operation canceled by the user.\");\n    };\n  }, [dispatch, status]);\n\n  // Render logic...\n};\n</code></pre> <p>In this example, the fetchData function dispatches the <code>fetchBlogs</code> action and handles the promise directly with .catch(). This can simplify your code and make it more readable.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#conclusion","title":"Conclusion","text":"<p>Using <code>async/await</code> in Redux thunks can enhance code readability and maintainability. While you can also use <code>async/await</code> in your React components, handling promises directly can simplify the flow, especially in simple use cases. Understanding when and where to use these patterns will make your application more efficient and your code cleaner. Happy coding!</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#additional","title":"Additional","text":"<p>In Redux thunks created with <code>createAsyncThunk</code>, you typically do not need to use a <code>try/catch</code> block for error handling inside the thunk itself. This is because <code>createAsyncThunk</code> automatically handles the promise's rejection and dispatches the appropriate actions based on its state (pending, fulfilled, or rejected).</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#how-error-handling-works-in-createasyncthunk","title":"How Error Handling Works in <code>createAsyncThunk</code>","text":"<p>When you define a thunk using <code>createAsyncThunk</code>, any errors thrown during the execution of the thunk will be caught and the corresponding <code>rejected</code> action will be dispatched with the error information. This means you can handle errors directly in your slice's extra reducers.</p> <p>Here's a brief overview of how it works:</p> <ul> <li> <p>Thunk Definition: The thunk can simply return the result of an asynchronous operation (like an API call). If it throws an error, Redux Toolkit takes care of dispatching the <code>rejected</code> action.</p> </li> <li> <p>Error Handling in the Slice: You handle errors in the slice's <code>extraReducers</code> to update the state appropriately.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#example-without-trycatch-in-the-thunk","title":"Example Without <code>try/catch</code> in the Thunk","text":"<p>Here's how your thunk might look:</p> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Thunk to fetch blogs\nexport const fetchBlogs = createAsyncThunk(\"blog/fetchBlogs\", async (token) =&gt; {\n  const response = await axios.get(\n    \"https://jsonplaceholder.typicode.com/posts\",\n    {\n      cancelToken: token,\n    }\n  );\n  return response.data; // If this fails, it will automatically be handled\n});\n\n// Slice definition\nconst blogSlice = createSlice({\n  name: \"blog\",\n  initialState: {\n    blogs: [],\n    status: \"idle\",\n    error: null,\n  },\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchBlogs.pending, (state) =&gt; {\n        state.status = \"loading\";\n      })\n      .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n        state.status = \"succeeded\";\n        state.blogs = action.payload;\n      })\n      .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n        state.status = \"failed\";\n        state.error = action.error.message; // Handle the error here\n      });\n  },\n});\n\nexport default blogSlice.reducer;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#error-handling-in-the-component","title":"Error Handling in the Component","text":"<p>In your component, you would still want to handle errors, especially for the UI or logging:</p> <pre><code>useEffect(() =&gt; {\n  const source = axios.CancelToken.source();\n\n  if (status === \"idle\") {\n    dispatch(fetchBlogs(source.token)).catch((error) =&gt; {\n      if (axios.isCancel(error)) {\n        console.log(\"Request canceled:\", error.message);\n      } else {\n        console.error(\"Error fetching blogs:\", error);\n      }\n    });\n  }\n\n  return () =&gt; {\n    source.cancel(\"Operation canceled by the user.\");\n  };\n}, [dispatch, status]);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#conclusion_1","title":"Conclusion","text":"<ul> <li>No <code>try/catch</code> in Thunks: You don't need to use <code>try/catch</code> in thunks defined with <code>createAsyncThunk</code> because Redux Toolkit handles rejections automatically.</li> <li>Error Handling in Slice: Use <code>extraReducers</code> in the slice to manage error states.</li> <li>UI Error Handling: Handle errors in your component for user feedback or logging.</li> </ul> <p>This approach keeps your thunks cleaner and focuses error handling where it is most useful!</p> <p>createAsyncThunk indeed handles promise rejections automatically, dispatching the appropriate actions for the pending, fulfilled, and rejected states.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#clarification-on-error-handling","title":"Clarification on Error Handling","text":"<ul> <li> <p>Automatic Error Handling: If a promise returned from <code>createAsyncThunk</code> is rejected, Redux Toolkit automatically dispatches the <code>rejected</code> action, and you can manage the error in the reducer without needing to wrap the async logic in a <code>try/catch</code> block.</p> </li> <li> <p>Using <code>try/catch</code>: While you don\u2019t need to use <code>try/catch</code> for basic error handling, it can still be useful if:</p> </li> <li>You want to customize the error message being returned (e.g., using <code>rejectWithValue</code>).</li> <li>You need to handle specific error cases, like distinguishing between a cancellation error and a network error.</li> <li>You want to perform additional actions upon catching an error, such as logging.</li> </ul> Example without <code>try/catch</code>Example with try/catch <p>Here\u2019s an example of using <code>createAsyncThunk</code> without <code>try/catch</code>:</p> <pre><code>export const fetchData = createAsyncThunk('data/fetchData', async () =&gt; {\n  const response = await axios.get('https://api.example.com/data');\n  return response.data; // Automatically handles errors\n});\n\n// Reducer setup...\n</code></pre> <p>And here\u2019s how you would use it with <code>try/catch</code> for custom error handling:</p> <pre><code>export const fetchData = createAsyncThunk(\n  'data/fetchData',\n  async (_, { rejectWithValue }) =&gt; {\n    try {\n      const response = await axios.get('https://api.example.com/data');\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'An error occurred');\n    }\n  }\n);\n</code></pre> <p>Conclusion</p> <p>In summary, while <code>createAsyncThunk</code> simplifies error handling significantly, using <code>try/catch</code> can still provide benefits in specific scenarios where you want more control over error messages or additional handling. Your approach should depend on the complexity of the operations you're performing and how much control you need over the error handling process</p>","tags":["Personal"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/","title":"Understanding Naming Conventions in Redux Toolkit","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#understanding-naming-conventions-in-redux-toolkit","title":"Understanding Naming Conventions in Redux Toolkit","text":"<p>In modern web development, maintaining clear and organized code is crucial for scalability and collaboration, especially when using state management libraries like Redux Toolkit. One important aspect of this is naming conventions for actions and slices.</p> <p>Understanding Naming Conventions in Redux Toolkit: A Guide to Clear and Consistent Action Naming</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#overview","title":"Overview","text":"<p>This guide explores how to effectively name your Redux actions to ensure clarity and consistency throughout your application.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#why-naming-conventions-matter","title":"Why Naming Conventions Matter","text":"<p>Proper naming conventions serve several purposes:</p> <ol> <li> <p>Clarity: Descriptive names make it easier to understand what actions do at a glance. This is especially important in larger projects where multiple developers might be working on the same codebase.</p> </li> <li> <p>Maintainability: Consistent naming helps in maintaining the code over time. When returning to a project after a break or onboarding new team members, clear naming conventions facilitate quicker comprehension.</p> </li> <li> <p>Avoiding Conflicts: By using a structured naming system, you minimize the risk of naming conflicts in your Redux store, which can lead to unexpected behavior.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#the-structure-of-action-names","title":"The Structure of Action Names","text":"<p>A widely accepted practice is to use a two-part naming convention for Redux actions:</p> <ol> <li> <p>First Part (Slice Name): This should represent the feature or slice of state the action relates to. For instance, if you\u2019re working with blog posts, you might use <code>blog</code>.</p> </li> <li> <p>Second Part (Action Type): This describes the specific action being performed. It\u2019s helpful to use a verb-noun structure, such as <code>fetchBlogs</code>, <code>createBlog</code>, or <code>deleteBlog</code>. This helps clarify the action\u2019s purpose.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#example-of-naming-actions","title":"Example of Naming Actions","text":"<p>Here\u2019s how you might structure your action names in a Redux slice related to blog posts:</p> <pre><code>// actions.js\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchBlogsApi, createBlogApi } from \"./api\"; // Import API functions\n\nexport const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\", // Slice name and action type\n  async () =&gt; {\n    const response = await fetchBlogsApi();\n    return response.data;\n  }\n);\n\nexport const createBlog = createAsyncThunk(\n  \"blog/createBlog\", // Slice name and action type\n  async (blogData) =&gt; {\n    const response = await createBlogApi(blogData);\n    return response.data;\n  }\n);\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#flexibility-within-structure","title":"Flexibility Within Structure","text":"<p>While it\u2019s best practice to adhere to the slice/action structure, there\u2019s room for flexibility. You can adapt the naming to better fit your application\u2019s context. For instance, you might choose to use <code>post/fetchPosts</code> instead of <code>blog/fetchBlogs</code> if that aligns better with your terminology.</p> <p>However, avoid vague names like <code>performAction</code>, as they offer little insight into the action\u2019s purpose. Strive for meaningful names that accurately describe the action.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<p>By following a consistent and clear naming convention for your Redux actions, you create a more maintainable and understandable codebase. Using structured names, such as <code>blog/fetchBlogs</code> and <code>blog/createBlog</code>, not only enhances clarity but also aids collaboration among team members. In a world where code readability can make or break a project, investing time in good naming conventions is always worthwhile.</p> <p>This approach will not only improve your current project but will also set a strong foundation for any future work in state management with Redux Toolkit. Happy coding!</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#additional","title":"Additional","text":"<p>Understanding Redux Toolkit Naming Conventions: Flexibility vs. Clarity</p> <p>When working with Redux Toolkit, naming your slices and action types is crucial for clarity and maintainability. However, you might wonder how flexible you can be with these names while still ensuring they remain clear and understandable.</p> Can You Name Anything?Prioritizing Clarity <ol> <li> <p>Flexibility in Naming:</p> <ul> <li>Technically, you can name your slices and action types anything you want. There are no strict rules enforced by Redux Toolkit regarding naming conventions.</li> <li>You might choose to use unconventional names based on your project\u2019s context, team preferences, or domain-specific terminology.</li> </ul> </li> <li> <p>Examples of Flexible Naming:</p> <ul> <li>Instead of the standard <code>blog/fetchBlogs</code>, you might use <code>posts/getAll</code> if your application deals with a broader set of data.</li> <li>If your project is a social media app, you could use <code>user/createProfile</code> instead of <code>profile/createUser</code>.</li> </ul> </li> </ol> <p>While flexibility is allowed, the primary goal should always be clarity. Here are some guidelines to ensure your naming remains clear:</p> <ol> <li> <p>Meaningful Names:</p> <ul> <li>Choose names that accurately describe the functionality. For instance, <code>createBlogPost</code> is clearer than <code>createItem</code>.</li> </ul> </li> <li> <p>Consistent Structure:</p> <ul> <li>Maintain a consistent naming pattern (e.g., <code>feature/action</code>). This helps in understanding the purpose of the action at a glance.</li> </ul> </li> <li> <p>Avoid Ambiguity:</p> <ul> <li>Avoid generic names like <code>handleData</code> or <code>performAction</code>. Instead, be specific: <code>fetchUserData</code> or <code>deleteComment</code>.</li> </ul> </li> </ol> <p>Recommended Naming Conventions</p> <ol> <li> <p>Slice Names:</p> <ul> <li>Should reflect the domain or feature: <code>blog</code>, <code>user</code>, <code>comment</code>, etc.</li> <li>Example:</li> </ul> <pre><code>const blogSlice = createSlice({\n  name: \"blog\",\n  // ...\n});\n</code></pre> </li> <li> <p>Action Types:</p> <ul> <li>Use a verb-noun structure: <code>fetchBlogs</code>, <code>createComment</code>, <code>updateUser</code>.</li> <li>Example:</li> </ul> <pre><code>export const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\",\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> </ol> <p>Conclusion</p> <p>While you can name your slices and action types anything you like in Redux Toolkit, prioritizing clarity and consistency is crucial for maintainability. Aim for meaningful, descriptive names that follow a consistent structure to enhance code readability and collaboration within your team.</p> <p>In essence, flexibility exists, but clarity should always be your guiding principle when naming in Redux Toolkit. If you have specific examples or situations in mind, feel free to share!</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#question","title":"Question","text":"<p>should we define the function name and action type name same or what</p> <p>When using <code>createAsyncThunk</code> in Redux Toolkit, it\u2019s not strictly necessary for the function name and the action type name to be the same, but there are advantages to keeping them aligned. Here\u2019s a breakdown of considerations:</p> <ol> <li> <p>Consistency</p> <ul> <li>Same Naming: Using the same name for both the async thunk and the action type can enhance readability and maintainability. When you see <code>fetchBlogs</code> in your code, you immediately know that it corresponds to the action type <code>\"blog/fetchBlogs\"</code>.</li> </ul> <pre><code>export const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\", // Action type\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> <li> <p>Descriptive Function Names</p> <ul> <li> <p>Different Names: If you prefer more descriptive function names for clarity, you can name them differently. The function name should indicate what the thunk does, while the action type can still reflect the feature and action.</p> </li> <li> <p>For example:</p> </li> </ul> <pre><code>export const loadBlogPosts = createAsyncThunk(\n  \"blog/fetchBlogs\", // Action type\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> <li> <p>Benefits of Matching Names</p> <ul> <li>Ease of Understanding: When you follow a consistent naming pattern, it becomes easier for developers (including future you) to understand the purpose of the thunk and its associated action.</li> <li>Debugging: If there\u2019s a mismatch, it can lead to confusion when tracing actions in the Redux dev tools, as the function name and the action type won't align.</li> </ul> </li> <li> <p>Conclusion</p> <p>While it\u2019s perfectly valid to have different names for the async thunk function and the action type, keeping them aligned helps maintain clarity. If the function name clearly describes what it does (like <code>fetchBlogs</code>), it\u2019s often best to use the same name in the action type. However, if you find a more descriptive name adds value, feel free to differentiate them while ensuring the overall structure remains clear.</p> </li> </ol> <p>Ultimately, choose a naming convention that works best for your team and project, and aim for consistency throughout your codebase.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/","title":"Understanding the render Function in Table Components","text":"","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#understanding-the-render-function-in-table-components","title":"Understanding the <code>render</code> Function in Table Components","text":"<p>When building user interfaces with libraries like Ant Design or similar, you often work with table components to display data in a structured format. A key feature of these tables is the <code>render</code> function, which allows you to customize how data is displayed in each cell.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#overview","title":"Overview","text":"","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#what-is-the-render-function","title":"What is the <code>render</code> Function?","text":"<p>The <code>render</code> function is a powerful tool that lets you define how each cell in a table should appear. It takes several parameters, but the most commonly used are:</p> <ul> <li> <p>text: This represents the value of the specific cell being rendered. For instance, if your column is for \"creationTime,\" the <code>text</code> parameter will hold the corresponding creation time for that row.</p> </li> <li> <p>record: This parameter provides access to the entire row of data. This is useful when you want to reference other fields in the same row or need context beyond just the cell value.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#example-usage","title":"Example Usage","text":"<p>Let's look at a practical example. Imagine you have a column that displays the creation time of entries. You want to format this time to include both date and time, displaying the time in red. Here\u2019s how you might set that up:</p> ExampleWhy Use the render Function? <pre><code>{\n    title: \"Creation Time\",\n    dataIndex: \"creationTime\",\n    key: \"creationTime\",\n    render: (text, record) =&gt; {\n        const formattedDate = moment(text).format(\"YYYY-MM-DD\");\n        const formattedTime = moment(text).format(\"hh:mm A\");\n\n        return (\n            &lt;span&gt;\n                {formattedDate} &lt;span style={{ color: 'red' }}&gt;{formattedTime}&lt;/span&gt;\n            &lt;/span&gt;\n        );\n    },\n}\n</code></pre> <p>In this example, the <code>render</code> function formats the creation time using the <code>moment</code> library to ensure it is displayed correctly. The date is presented in a standard format, while the time is shown in a 12-hour format with AM/PM, colored red for emphasis.</p> <ol> <li> <p>Customization: It gives you the flexibility to format data as needed, adding styles or additional elements, like icons or buttons.</p> </li> <li> <p>Conditional Rendering: You can use the <code>render</code> function to conditionally display content based on the cell\u2019s value or the row\u2019s data.</p> </li> <li> <p>Enhanced Readability: Proper formatting improves the readability of your data, making it easier for users to interpret.</p> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#conclusion","title":"Conclusion","text":"<p>The <code>render</code> function is an essential feature for anyone working with table components in modern UI libraries. By understanding how to leverage parameters like <code>text</code> and <code>record</code>, you can create more dynamic and user-friendly interfaces that present data clearly and attractively. Whether you're formatting dates, adding styles, or implementing complex logic, the <code>render</code> function empowers you to customize the display of your data effectively.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#additional","title":"Additional","text":"<p>Example of Conditional Rendering in the <code>render</code> Function</p> <p>Conditional rendering in the render function allows you to display different content based on certain conditions. Here\u2019s a simple example that demonstrates how to use conditional rendering to display a status message:</p> Basic ExampleComplex Example <pre><code>{\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (text, record) =&gt; {\n        // Assume text is a status string like \"active\" or \"inactive\"\n        return (\n        &lt;span&gt;\n            {text === \"active\" ? (\n            &lt;span style={{ color: 'green' }}&gt;Active&lt;/span&gt;\n            ) : (\n            &lt;span style={{ color: 'red' }}&gt;Inactive&lt;/span&gt;\n            )}\n        &lt;/span&gt;\n        );\n    },\n}\n</code></pre> Explanation <ul> <li>Condition Check: The <code>render</code> function checks the value of <code>text</code> (which represents the <code>status</code>).</li> <li>Ternary Operator: It uses a ternary operator to determine what to display:<ul> <li>If <code>text</code> is \"active\", it displays \"Active\" in green.</li> <li>If <code>text</code> is anything else (e.g., \"inactive\"), it displays \"Inactive\" in red.</li> </ul> </li> </ul> <p>You can also incorporate more complex logic. For example, if you want to show different icons based on the status:</p> <pre><code>import { Icon } from 'antd';\n\n{\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (text, record) =&gt; {\n        if (text === \"active\") {\n            return (\n                &lt;span&gt;\n                    &lt;Icon type=\"check-circle\" style={{ color: 'green' }} /&gt; Active\n                &lt;/span&gt;\n            );\n        } else if (text === \"inactive\") {\n            return (\n                &lt;span&gt;\n                    &lt;Icon type=\"close-circle\" style={{ color: 'red' }} /&gt; Inactive\n                &lt;/span&gt;\n            );\n        } else {\n            return &lt;span&gt;Unknown Status&lt;/span&gt;;\n        }\n    },\n}\n</code></pre> Explanation <ul> <li>Icon Usage: In this example, we use Ant Design's <code>Icon</code> component to visually indicate the status.</li> <li>Multiple Conditions: The <code>render</code> function checks for \"active\" and \"inactive\" statuses, displaying different icons and colors accordingly. If the status is neither, it defaults to \"Unknown Status\".</li> </ul> <p>Conclusion</p> <p>Using conditional rendering in the <code>render</code> function allows you to create dynamic and informative table cells that enhance the user experience. You can leverage the <code>text</code> and <code>record</code> parameters to access the data you need and display it conditionally based on its value.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#predefined-parameter-in-render-function","title":"Predefined Parameter in <code>render</code> function","text":"<p>In Ant Design's table component, the <code>render</code> function can accept several predefined parameters. Here are the most commonly used ones:</p> <ol> <li> <p>text</p> <ul> <li>Description: The value of the cell for the current row and column.</li> <li>Usage: This is the primary parameter used to access the data you want to format or display.</li> </ul> </li> <li> <p>record</p> <ul> <li>Description: The entire data object for the current row.</li> <li>Usage: This allows you to access any other fields in the same row, making it useful for conditional rendering based on other column values.</li> </ul> </li> <li> <p>index</p> <ul> <li>Description: The index of the current row in the table.</li> <li>Usage: Useful when you need to reference the position of the row, such as for applying styles or tracking order.</li> </ul> </li> <li> <p>extra</p> <ul> <li>Description: Additional information about the current row, which may include context-specific data.</li> <li>Usage: Rarely used in typical scenarios but can provide extra context depending on how the table is set up.</li> </ul> </li> </ol> <p>Example of Using Multiple Parameters</p> <p>Here\u2019s an example that utilizes <code>text</code>, <code>record</code>, and <code>index</code> in the <code>render</code> function:</p> ExampleExplanation <pre><code>{\ntitle: \"Actions\",\ndataIndex: \"actions\",\nkey: \"actions\",\n    render: (text, record, index) =&gt; {\n        return (\n            &lt;div&gt;\n                &lt;button onClick={() =&gt; editRecord(record)}&gt;Edit&lt;/button&gt;\n                &lt;button onClick={() =&gt; deleteRecord(record.id)}&gt;Delete&lt;/button&gt;\n                &lt;span style={{ marginLeft: '10px' }}&gt;Row {index + 1}&lt;/span&gt;\n            &lt;/div&gt;\n        );\n    },\n}\n</code></pre> <ul> <li>Edit and Delete Buttons: The <code>render</code> function provides buttons for editing and deleting the current row's record.</li> <li>Using <code>record</code>: The <code>record</code> parameter allows access to the entire row's data for actions.</li> <li>Using <code>index</code>: The <code>index</code> parameter shows the position of the row, which can be useful for displaying row numbers or ordering.</li> </ul> <p>Conclusion</p> <p>Using these predefined parameters in the <code>render</code> function gives you great flexibility to customize how data is displayed in Ant Design tables. By combining <code>text</code>, <code>record</code>, and <code>index</code>, you can create highly interactive and user-friendly tables that enhance the overall user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/","title":"Using rejectWithValue for cancellation tokens in rtk","text":"","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#using-rejectwithvalue-for-cancellation-tokens-in-rtk","title":"Using <code>rejectWithValue</code> for cancellation tokens in rtk","text":"<p>The confusion seems to arise from how <code>createAsyncThunk</code> handles error scenarios and how cancellation tokens work with Axios.</p> <p>Let\u2019s break down why <code>rejectWithValue</code> is effective in the context of error handling, and clarify how cancellation tokens should be utilized within <code>createAsyncThunk</code>.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#understanding-rejectwithvalue","title":"Understanding <code>rejectWithValue</code>","text":"<ol> <li> <p>Purpose of <code>rejectWithValue</code>:</p> <ul> <li>When you call <code>rejectWithValue</code> in the thunk, you're providing a way to return a custom error message or value when the thunk is rejected. This is particularly useful for handling both network errors and cancellations.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>If you catch an error in your thunk and decide that it should be treated as a rejection, you can call <code>rejectWithValue(err.message)</code> to propagate that error back to the component.   This allows you to maintain control over the error messages that reach the component state, enabling clearer user feedback.</li> </ul> </li> </ol> How Cancellation Tokens Work <ol> <li> <p>Cancellation with Axios:</p> <ul> <li>When you create a cancellation token with <code>axios.CancelToken.source()</code>, you can pass the token to Axios requests. If you need to cancel the request (for example, when a component unmounts), you can call <code>source.cancel()</code>. If a request is canceled, Axios throws a specific error (<code>CanceledError</code>), which you can check using <code>axios.isCancel(err)</code>.</li> </ul> </li> <li> <p>Extra Parameters in Thunks:</p> <ul> <li>The second parameter of the thunk (the <code>extraArgument</code> in your case) can contain <code>signal</code> (the cancellation token). However, for Axios, it's often simpler to manage cancellation using the cancellation token created in the component.</li> </ul> </li> </ol> Why It Might Seem Not to Work <ol> <li> <p>Misinterpretation of Cancellation:</p> <ul> <li>If you're not correctly distinguishing between a canceled request and a regular error, you may end up treating a canceled request as a failure, leading to unexpected behavior in your state management.</li> </ul> </li> <li> <p>Improper Use of the <code>signal</code> Parameter:</p> <ul> <li>If you try to pass <code>signal</code> directly to <code>axios.get</code> without setting it up correctly in the thunk, it might lead to confusion and not work as intended.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#recommended-approach","title":"Recommended Approach","text":"Example Implementation <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Create async thunk\nexport const fetchUser = createAsyncThunk(\n    \"user/fetchUser\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await axios.get(\n                \"https://jsonplaceholder.typicode.com/users/1\",\n                {\n                cancelToken: signal, // Pass the cancel token\n                }\n            );\n            return response.data;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                console.log(\"Request canceled:\", err.message);\n                return rejectWithValue(\"Request was canceled\"); // Use rejectWithValue for cancellations\n            }\n            return rejectWithValue(err.message); // Handle other errors\n        }\n    }\n);\n\n// Create the slice\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState: { user: null, status: \"idle\", error: null },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchUser.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchUser.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.user = action.payload;\n            })\n            .addCase(fetchUser.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload; // Use the error from rejectWithValue\n            });\n    },\n});\n\nexport default userSlice.reducer;\n</code></pre> <p>Conclusion</p> <p>By properly managing cancellation tokens and using <code>rejectWithValue</code>, you can create a clear and effective error handling mechanism within your thunks. If you ensure you're distinguishing between regular errors and cancellations, you can maintain a clean state in your Redux store and provide meaningful feedback to users.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#reference","title":"Reference","text":"<ul> <li>createAsyncThunk</li> <li>How to Handle Asynchronous Data Requests Using Redux Toolkit</li> <li>Cancel API requests and avoid race conditions when fetching data with Redux</li> <li>How to cancel Axios requests in React with redux? </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/","title":"What are the best practices for caching resources in a PWA","text":"","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#what-are-the-best-practices-for-caching-resources-in-a-pwa","title":"What are the best practices for caching resources in a PWA","text":"<p>Here are the best practices for caching resources in a Progressive Web App (PWA):</p>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#intro","title":"Intro","text":"","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#1-choose-the-right-caching-strategy","title":"1. Choose the Right Caching Strategy","text":"<ul> <li> <p>Cache-First Strategy: Ideal for static assets like images, stylesheets, and scripts. It serves content from the cache first and falls back to the network if not found.</p> </li> <li> <p>Network-First Strategy: Suitable for dynamic content that needs to be up-to-date. It fetches from the network first and serves from cache if the network fails.</p> </li> <li> <p>Stale-While-Revalidate Strategy: Quickly serves cached content while updating it in the background. Useful when speed is crucial but updates are also important.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#2-optimize-cache-size-and-speed","title":"2. Optimize Cache Size and Speed","text":"<ul> <li> <p>Cache Frequently Accessed Resources: Focus on resources that are often used by users.</p> </li> <li> <p>Cache Large and Critical Resources: Ensure essential resources are cached to improve performance.</p> </li> <li> <p>Set Practical Storage Limits: Avoid overloading the cache to prevent performance issues.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#3-handle-caching-errors-and-updates","title":"3. Handle Caching Errors and Updates","text":"<ul> <li> <p>Implement Cache Invalidation Techniques: Ensure users receive the latest content by invalidating outdated cache entries.</p> </li> <li> <p>Provide Offline Fallbacks: Offer a graceful degradation or notification when caching fails.</p> </li> <li> <p>Monitor Cache Performance: Regularly check cache performance to identify areas for improvement.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#4-pre-cache-resources","title":"4. Pre-Cache Resources","text":"<ul> <li> <p>Pre-Cache on Installation: Cache essential resources during the service worker installation phase.</p> </li> <li> <p>Pre-Cache on First Load: Cache resources after the first page load to improve subsequent loads.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#5-use-workbox-for-simplified-caching","title":"5. Use Workbox for Simplified Caching","text":"<ul> <li>Workbox Strategies: Utilize Workbox's built-in strategies like <code>StaleWhileRevalidate</code>, <code>CacheFirst</code>, and <code>NetworkFirst</code> to simplify caching management.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/15/what-are-the-best-practices-for-caching-resources-in-a-pwa/#question","title":"Question","text":"<p>What are the key differences between the cache-first and network-first strategies</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/","title":"When to Use selectedKeys Over the .active Class in Ant Design","text":"","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#when-to-use-selectedkeys-over-the-active-class-in-ant-design","title":"When to Use <code>selectedKeys</code> Over the <code>.active</code> Class in Ant Design","text":"<p>In modern web applications, managing the active state of navigation elements is crucial for enhancing user experience. Ant Design provides powerful components like <code>Menu</code> that offer built-in methods for managing active states.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#overview","title":"Overview","text":"<p>In this post, we\u2019ll explore the advantages of using <code>selectedKeys</code> over manually applying the <code>.active</code> class to links.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#understanding-selectedkeys-and-active","title":"Understanding <code>selectedKeys</code> and <code>.active</code>","text":"<ul> <li> <p>selectedKeys: This is a prop in Ant Design's <code>Menu</code> component that allows you to specify which menu item is currently selected. It takes an array of keys that correspond to the <code>key</code> prop of the <code>Menu.Item</code>.</p> </li> <li> <p><code>.active</code> Class: This is a traditional approach where you manually apply a class to the link to indicate it is active. This usually requires additional logic to handle state changes.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#advantages-of-using-selectedkeys","title":"Advantages of Using <code>selectedKeys</code>","text":"<ol> <li> <p>Built-in State Management</p> <ul> <li><code>selectedKeys</code> automatically handles the selected state based on the current route or application state, reducing the need for custom logic.</li> </ul> </li> <li> <p>Cleaner Code</p> <ul> <li>By leveraging <code>selectedKeys</code>, your code becomes simpler and more readable. There\u2019s no need to add conditional logic for class names.</li> </ul> </li> <li> <p>Consistency Across Components</p> <ul> <li>Using <code>selectedKeys</code> ensures that the styling and behavior of active items remain consistent with Ant Design\u2019s design principles.</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Built-in handling can lead to better performance, especially in larger applications where manually managing classes could introduce overhead.</li> </ul> </li> <li> <p>Less Error-Prone</p> <ul> <li>Avoids potential bugs associated with managing the active class manually, such as forgetting to update the class or dealing with state synchronization issues.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#when-to-use-active-class","title":"When to Use <code>.active</code> Class","text":"<p>While <code>selectedKeys</code> is generally preferred, there are scenarios where you might consider using the <code>.active</code> class:</p> <ol> <li> <p>Custom Styling Needs</p> <ul> <li>If your application requires highly customized styling for active links that deviates from Ant Design\u2019s defaults, using the <code>.active</code> class might be necessary.</li> </ul> </li> <li> <p>Non-Ant Design Components</p> <ul> <li>If you're using other libraries or custom components for navigation that don\u2019t support selectedKeys, you might need to implement manual class management.</li> </ul> </li> <li> <p>Specific Logic Requirements</p> <ul> <li>In cases where you have complex logic determining the active state beyond route matching, the <code>.active</code> class can offer more flexibility.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#best-practices","title":"Best Practices","text":"<ul> <li>For most scenarios, stick with <code>selectedKeys</code> in Ant Design's Menu.</li> <li>If you opt for the <code>.active</code> class, ensure you have clear logic in place to manage its application.   Always consider future maintainability when choosing your approach.</li> </ul> Summary <ul> <li><code>selectedKeys</code>: Best for straightforward navigation and leveraging Ant Design's built-in capabilities for consistency and simplicity.</li> <li><code>.active</code> class: Best for custom styles or when you need more flexibility for complex active state management.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#conclusion","title":"Conclusion","text":"<p>Choosing between <code>selectedKeys</code> and the <code>.active</code> class in Ant Design is a decision that impacts the maintainability and clarity of your code. By leveraging <code>selectedKeys</code>, you can streamline active state management, improve performance, and maintain consistency across your application. In most cases, it\u2019s the recommended approach for modern React applications using Ant Design.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#example","title":"Example","text":"Not Good ApproachGood Practice Danger <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                &lt;Menu.Item key=\"1\" style={{ color: \"#fff\" }}&gt;\n                    &lt;Link\n                        to=\"/\"\n                        className={`${location.pathname === \"/\" ? \"active\" : \"\"}`}\n                    &gt;\n                        Home\n                    &lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                &lt;Menu.Item key=\"2\" style={{ color: \"#fff\" }}&gt;\n                    &lt;Link\n                        to=\"/blog\"\n                        className={`${location.pathname === \"/blog\" ? \"active\" : \"\"}`}\n                    &gt;\n                        Blog\n                    &lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> Success <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        { key: \"1\", label: \"Home\", path: \"/\" },\n        { key: \"2\", label: \"Blog\", path: \"/blog\" },\n        // Add more items here as needed\n    ];\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[menuItems.find(item =&gt; item.path === location.pathname)?.key]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                {menuItems.map(item =&gt; (\n                    &lt;Menu.Item key={item.key}&gt;\n                        &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;\n                    &lt;/Menu.Item&gt;\n                ))}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/","title":"Why do we need axios interceptors?","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#why-do-we-need-axios-interceptors","title":"Why do we need axios interceptors?","text":"<p>You don't necessarily need to use interceptors for every API base URL; it depends on your application's requirements.</p> <p>Interceptors are useful for handling tasks like adding authentication tokens, logging requests/responses, or managing errors uniformly across multiple API calls. Here's a breakdown of their main uses and when you might need them:</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#main-uses-of-axios-interceptors","title":"Main Uses of Axios Interceptors","text":"<ol> <li> <p>Adding Authorization Tokens: If your APIs require authentication, interceptors can automatically attach the token to each request. This way, you don't have to manually add the token in every API call.</p> </li> <li> <p>Logging Requests and Responses: You can use interceptors to log details about requests and responses, which is useful for debugging and monitoring.</p> </li> <li> <p>Handling Errors Globally: You can set up interceptors to catch errors from any request and handle them in a uniform way, like displaying a notification to the user.</p> </li> <li> <p>Modifying Requests/Responses: Interceptors allow you to modify requests or responses before they are handled by your application. For example, you might want to standardize response formats or transform data.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#when-you-might-not-need-interceptors","title":"When You Might Not Need Interceptors","text":"<ul> <li> <p>No Authentication Required: If your blog API does not require a token or any additional headers, you may not need an interceptor for that specific instance.</p> </li> <li> <p>Simple APIs: If your API calls are straightforward and don\u2019t require common handling (like logging or error management), you can call them directly without interceptors.</p> </li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>API Requiring a Token (e.g., authentication API):</p> <ul> <li>You might want to add an interceptor to attach a token for every request.</li> </ul> <pre><code>instance.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n</code></pre> </li> <li> <p>API Not Requiring a Token (e.g., blog API):</p> <ul> <li>If the blog API does not require an authentication token, you might not need an interceptor.</li> </ul> <pre><code>const blogAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BLOG_API_URL,\n});\n// No interceptors needed\n</code></pre> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#summary","title":"Summary","text":"<ul> <li>Use interceptors when you have common functionality across multiple API calls, such as adding authentication tokens, logging, or handling errors.</li> <li>Skip interceptors for APIs that don\u2019t require them, keeping your code simpler and more focused.</li> </ul> <p>Ultimately, it's about balancing the need for consistent handling of requests/responses with the complexity of your application. If only a specific API requires interceptors, you can add them only to that instance. For APIs like the blog API that don't require such handling, you can keep them straightforward without interceptors.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#additional","title":"Additional","text":"<p>If you need to send an API key specifically for the blog API (and not a token from the base API), you can set up an interceptor for that particular Axios instance. Here\u2019s how to do it:</p> <p>Using Axios Interceptors to Add an API Key</p> <p>You can create a specific Axios instance for your blog API and configure an interceptor to include the API key in the headers for every request.</p> Example of Configuring Axios with Interceptors <pre><code>// services/axiosInstance.js\nimport axios from 'axios';\nimport { blogBaseUrl } from '../utils/config';\n\nconst blogAxiosInstance = axios.create({\n    baseURL: blogBaseUrl,\n});\n\n// Add an interceptor to include the API key in each request\nblogAxiosInstance.interceptors.request.use(config =&gt; {\n    // Add your API key here\n    const apiKey = process.env.REACT_APP_BLOG_API_KEY; // Ensure you have this in your .env file\n    config.headers['X-API-Key'] = apiKey; // Use the appropriate header key for your API\n\n    return config;\n}, error =&gt; {\n    return Promise.reject(error);\n});\n\nexport { blogAxiosInstance };\n</code></pre> <p>Usage in Service Files</p> <p>Now, whenever you use the <code>blogAxiosInstance</code> for making API calls to the blog API, the API key will be automatically included in the headers:</p> <pre><code>// features/blog/service.js\nimport { blogAxiosInstance } from '../../services/axiosInstance';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n  const response = await blogAxiosInstance.get('/posts', { cancelToken: signal });\n  return response.data;\n};\n\n// Another example for a different endpoint\nexport const fetchBlogComments = async (postId, signal) =&gt; {\n  const response = await blogAxiosInstance.get(`/posts/${postId}/comments`, { cancelToken: signal });\n  return response.data;\n};\n</code></pre> <p>Summary</p> <ul> <li>Interceptor Usage: The interceptor for the <code>blogAxiosInstance</code> automatically adds the API key to every request sent to the blog API.</li> <li>Environment Variable: Ensure that your API key is stored in your environment variables (e.g., <code>.env</code> file) and accessed safely in your code.</li> <li>Simplifies API Calls: This approach keeps your API calls clean and ensures that the necessary headers are included without needing to repeat the code in every request.</li> </ul> <p>This way, you can manage different authentication methods or API keys for different APIs efficiently using Axios interceptors.</p>","tags":["React","Toolkit"]},{"location":"codehighlight/antd-breakpoint/","title":"Antd Breakpoint","text":""},{"location":"codehighlight/antd-breakpoint/#antd-breakpoint","title":"Antd Breakpoint","text":""},{"location":"codehighlight/antd-table-pagination/","title":"Antd Table Pagination","text":""},{"location":"codehighlight/antd-table-pagination/#antd","title":"Antd","text":"<p>let\u2019s dive deep into the difference between <code>pagination.onChange</code> vs <code>Table.onChange</code> in Ant Design, and when to use which. This often trips people up when they're setting up pagination, sorting, or filtering logic.</p>"},{"location":"codehighlight/antd-table-pagination/#the-two-onchange-handlers-in-ant-designs-table","title":"\ud83e\udde0 The Two <code>onChange</code> Handlers in Ant Design\u2019s <code>&lt;Table /&gt;</code>","text":""},{"location":"codehighlight/antd-table-pagination/#1-paginationonchange-inside-the-pagination-prop","title":"1. <code>pagination.onChange</code> (inside the <code>pagination</code> prop)","text":"<p>This only handles page changes (and optionally <code>pageSize</code> if you enable it).</p> <p></p> <p>\ud83d\udd27 Syntax:</p> jsx<pre><code>&lt;Table\n  pagination={{\n    current,\n    pageSize,\n    onChange: (page, pageSize) =&gt; {\n      // Only runs when user changes the page\n    },\n  }}\n/&gt;\n</code></pre> <p>\u2705 Best for:</p> <ul> <li>Client-side pagination when you're handling pagination manually in the front-end.</li> <li>Quick-and-simple updates of page state.</li> <li>Doesn\u2019t give you access to sorting or filtering.</li> </ul> <p>\ud83e\udde9 Params:</p> ts<pre><code>onChange: (page: number, pageSize: number) =&gt; void\n</code></pre> <p>\ud83d\udd04 Triggered when:</p> <ul> <li>The user clicks a pagination button</li> <li>The page size changes (if <code>showSizeChanger</code> is true)</li> </ul>"},{"location":"codehighlight/antd-table-pagination/#2-tableonchange-top-level-prop-of-table","title":"2. <code>Table.onChange</code> (top-level prop of <code>&lt;Table /&gt;</code>)","text":"<p>This is the main event handler for pagination, filtering, and sorting.</p> <p>\ud83d\udd27 Syntax:</p> jsx<pre><code>&lt;Table\n  onChange={(pagination, filters, sorter, extra) =&gt; {\n    // Handles page changes, filters, AND sort changes\n  }}\n/&gt;\n</code></pre> <p>\u2705 Best for:</p> <ul> <li>Server-side pagination, sorting, and filtering</li> <li>When you want to respond to any table change</li> <li>One-stop solution for controlling the whole table lifecycle</li> </ul> <p>\ud83d\udce6 Params:</p> ts<pre><code>onChange: (\n  pagination: TablePaginationConfig,\n  filters: Record&lt;string, FilterValue | null&gt;,\n  sorter: SorterResult&lt;any&gt; | SorterResult&lt;any&gt;[],\n  extra: {\n    currentDataSource: any[],\n    action: 'paginate' | 'sort' | 'filter'\n  }\n) =&gt; void\n</code></pre> Param Description <code>pagination</code> <code>{ current, pageSize, total }</code> etc. <code>filters</code> Column filters as <code>{ columnKey: [values] }</code> <code>sorter</code> Sort info like <code>{ field, order }</code> <code>extra</code> <code>{ currentDataSource, action }</code> \u2013 tells what action triggered the change <p>\ud83d\udd04 Triggered when:</p> <ul> <li>Pagination changes</li> <li>Filters change</li> <li>Sort order changes</li> </ul>"},{"location":"codehighlight/antd-table-pagination/#comparison-table","title":"\ud83c\udd9a Comparison Table","text":"Feature <code>pagination.onChange</code> <code>Table.onChange</code> Triggered on page change \u2705 \u2705 Triggered on sort/filter \u274c \u2705 Best for server-side \u274c \u2705 Gives current sort/filter \u274c \u2705 Simpler to use \u2705 \u26a0\ufe0f (More boilerplate)"},{"location":"codehighlight/antd-table-pagination/#when-to-use-which","title":"\ud83d\udca1 When to use which?","text":"Scenario Use Just tracking page changes (client-side) <code>pagination.onChange</code> Fully managing table with backend <code>Table.onChange</code> Need to update data based on sort/filter <code>Table.onChange</code> Want something quick and lightweight <code>pagination.onChange</code>"},{"location":"codehighlight/antd-table-pagination/#tldr","title":"\ud83d\udd1a TL;DR","text":"<ul> <li>If you're doing everything in the frontend, <code>pagination.onChange</code> is enough.</li> <li>If you're hitting an API when anything changes (page, sort, filter) \u2192 go with <code>Table.onChange</code>.</li> </ul>"},{"location":"codehighlight/appBased-folder-structure/","title":"Folder Structure","text":""},{"location":"codehighlight/appBased-folder-structure/#app-based","title":"APP BASED","text":"<pre><code>/app\n  /layout.tsx             &lt;-- Global layout for the whole app\n  /page.tsx               &lt;-- Home page (or root page)\n\n  /auth\n    /layout.tsx           &lt;-- Layout for authentication-related pages (e.g., login, register)\n    /login\n      /page.tsx           &lt;-- Login page\n    /register\n      /page.tsx           &lt;-- Register page\n    /forgot-password\n      /page.tsx           &lt;-- Forgot password page\n    /reset-password\n      /page.tsx           &lt;-- Reset password page\n\n  /blog\n    /layout.tsx           &lt;-- Layout for blog pages\n    /page.tsx             &lt;-- Blog homepage\n    /[slug]\n      /page.tsx           &lt;-- Dynamic blog post page\n\n  /dashboard\n    /layout.tsx           &lt;-- Layout for dashboard pages (e.g., profile, settings)\n    /page.tsx             &lt;-- Dashboard homepage\n    /profile\n      /page.tsx           &lt;-- Profile page\n    /settings\n      /page.tsx           &lt;-- Settings page\n\n  /products\n    /layout.tsx           &lt;-- Layout for product-related pages\n    /page.tsx             &lt;-- Products homepage\n    /[id]\n      /page.tsx           &lt;-- Dynamic product detail page\n\n  /users\n    /layout.tsx           &lt;-- Layout for user-related pages\n    /page.tsx             &lt;-- Users homepage (user listing)\n    /[id]\n      /page.tsx           &lt;-- Dynamic user profile page\n\n  /404.tsx                &lt;-- Custom 404 page\n  /loading.tsx            &lt;-- Global loading state for suspense\n  /error.tsx              &lt;-- Global error handling page\n</code></pre>"},{"location":"codehighlight/formData/","title":"FormData","text":""},{"location":"codehighlight/formData/#formdata","title":"FormData","text":""},{"location":"codehighlight/formData/#content-type","title":"Content-Type","text":"<p>Yes, you can only use one <code>Content-Type</code> at a time for an HTTP request. Each <code>Content-Type</code> specifies a single format for the body of the request, and it tells the server how to interpret the data.</p> Why One <code>Content-Type</code> at a Time? <p>Each <code>Content-Type</code> represents a different format for the request body. For example, <code>application/json</code> indicates that the data is in <code>JSON</code> format, while <code>multipart/form-data</code> indicates the presence of file uploads and other form data.</p> <p>A request body can only be in one format at a time. For example, if you're uploading a file using <code>multipart/form-data</code>, that entire body will be split into parts (fields, files) in the <code>multipart/form-data</code> format. You can't mix it with JSON in the same request body, as each encoding has its own rules for formatting data.</p> Can You Mix Formats in a Request? <ul> <li> <p>No: You can't use multiple <code>Content-Type</code> headers in a single request.</p> </li> <li> <p>But: You can include different types of data within a single request if you're using something like <code>multipart/form-data</code>. This allows you to send files and form fields together in the same request. But, even in this case, the overall request is still <code>multipart/form-data</code>.</p> </li> </ul>"},{"location":"codehighlight/formData/#summary-of-content-type-values","title":"Summary of <code>Content-Type</code> Values","text":"<code>Content-Type</code> Use Case <code>application/x-www-form-urlencoded</code> Default for simple form submissions with text fields (no files). <code>multipart/form-data</code> Used for form submissions that include files (e.g., images, documents). <code>application/json</code> Used for sending JSON data (commonly used in APIs). <code>text/plain</code> Used for sending plain text data (rarely used in web forms). <code>application/xml</code> Used for sending XML data (commonly used in SOAP or legacy systems)."},{"location":"codehighlight/formData/#example","title":"Example:","text":""},{"location":"codehighlight/formData/#1-single-content-type-example","title":"1. Single Content-Type Example:","text":"<ul> <li> <p><code>application/json</code>: All the data is JSON-encoded, and the body will look like:</p> <pre><code>{\n  \"name\": \"John\",\n  \"age\": 30\n}\n</code></pre> </li> <li> <p><code>multipart/form-data</code>: Used when submitting a form with files. The request will be in parts, such as:</p> <pre><code>--boundary\nContent-Disposition: form-data; name=\"username\"\n\nJohnDoe\n--boundary\nContent-Disposition: form-data; name=\"profile_pic\"; filename=\"profile.jpg\"\nContent-Type: image/jpeg\n\n[Binary Image Data Here]\n--boundary--\n</code></pre> </li> </ul>"},{"location":"codehighlight/formData/#2-mixing-formats","title":"2. Mixing Formats:","text":"<p>If you want to mix formats (e.g., sending JSON along with files), you would typically send the JSON within one part of the <code>multipart/form-data</code> body, and the file in another part. The overall request is still <code>multipart/form-data</code>, and you specify JSON as one of the fields in that multipart data.</p> <pre><code>--boundary\nContent-Disposition: form-data; name=\"data\"\nContent-Type: application/json\n\n{\"name\": \"John\", \"age\": 30}\n--boundary\nContent-Disposition: form-data; name=\"file\"; filename=\"photo.jpg\"\nContent-Type: image/jpeg\n\n[Binary Image Data Here]\n--boundary--\n</code></pre> <p>You can only have one <code>Content-Type</code> for the entire request, but within that format (e.g., <code>multipart/form-data</code>), you can include different types of data (text, files, JSON, etc.). The key is that the overall body format must match the <code>Content-Type header</code>, but inside that format, you can structure the data however you need.</p>"},{"location":"codehighlight/formData/#reference","title":"Reference","text":"<ul> <li>developer.mozilla.org, Using FormData Objects</li> <li>How to upload single or multiple files the easy way with FormData</li> <li>stackoverflow: Sending an image uploaded in a form to a server using formdata and fetchAPI in JS</li> <li>What does enctype='multipart/form-data' mean?</li> <li>what the heck is multipart/form-data???</li> <li>HTML  enctype Attribute</li> <li>POST</li> </ul>"},{"location":"codehighlight/js-advanced-interview/","title":"JS HARD IV","text":""},{"location":"codehighlight/js-advanced-interview/#js-advanced-interview","title":"JS ADVANCED INTERVIEW","text":"<p>what are the advanced javascript questions asked in interview</p>"},{"location":"codehighlight/js-advanced-interview/#advanced","title":"Advanced","text":"<p>In advanced JavaScript interviews, you may encounter a mix of conceptual and practical questions that test your deep understanding of the language, its features, and how you handle complex problems. Here are some advanced JavaScript interview questions:</p> <p>1. Closures</p> <ul> <li>What is a closure in JavaScript? Can you provide an example?</li> <li>How do closures work in JavaScript with respect to scope and execution context?</li> <li>Explain the use case of closures in JavaScript.</li> </ul> <p>2. Asynchronous JavaScript</p> <ul> <li>What\u2019s the difference between <code>setTimeout()</code> and <code>setImmediate()</code>?</li> <li>How do promises work, and what are the advantages over callbacks?</li> <li>What is async/await and how does it differ from using promises directly?</li> <li>Can you explain the event loop and the call stack in JavaScript?</li> <li>What is the \"microtask queue\" and \"macrotask queue\" in the event loop?</li> </ul> <p>3. JavaScript's <code>this</code> keyword</p> <ul> <li>How does the <code>this</code> keyword behave in different contexts (regular functions, arrow functions, class methods)?</li> <li>Explain how <code>call()</code>, <code>apply()</code>, and <code>bind()</code> work.</li> <li>What are the potential pitfalls when using <code>this</code> in JavaScript?</li> </ul> <p>4. Prototype and Inheritance</p> <ul> <li>What is prototypal inheritance in JavaScript?</li> <li>How does the prototype chain work in JavaScript?</li> <li>Can you explain the difference between <code>Object.create()</code> and constructor functions in terms of inheritance?</li> </ul> <p>5. Event Delegation</p> <ul> <li>What is event delegation and how does it work in JavaScript?</li> <li>Can you write an example of how event delegation is used in DOM manipulation?</li> </ul> <p>6. JavaScript Design Patterns</p> <ul> <li>What are some common design patterns used in JavaScript, and can you provide an example (e.g., Singleton, Module, Factory)?</li> <li>How would you implement the Module Pattern in JavaScript?</li> </ul> <p>7. Functional Programming in JavaScript</p> <ul> <li>What are higher-order functions, and can you provide an example?</li> <li>How do <code>map()</code>, <code>filter()</code>, and <code>reduce()</code> work?</li> <li>What is immutability and how can it be achieved in JavaScript?</li> </ul> <p>8. Memory Management</p> <ul> <li>How does garbage collection work in JavaScript?</li> <li>Can you explain memory leaks in JavaScript and how to prevent them?</li> </ul> <p>9. ES6+ Features</p> <ul> <li>Explain the differences between <code>let</code>, <code>const</code>, and <code>var</code> in terms of scope, hoisting, and redeclaration.</li> <li>What are template literals and how do they differ from traditional strings?</li> <li>How does destructuring assignment work with objects and arrays?</li> <li>Can you explain the <code>spread</code> and <code>rest</code> operators with examples?</li> </ul> <p>10. Modules and Bundling</p> <ul> <li>How do JavaScript modules work in modern JavaScript (ES6 imports/exports)?</li> <li>What is the difference between CommonJS and ES6 module syntax?</li> <li>Can you explain tree shaking and how it relates to bundling?</li> </ul> <p>11. Type Coercion</p> <ul> <li>What is type coercion in JavaScript? Can you give examples of implicit coercion?</li> <li>What are the differences between <code>==</code> and <code>===</code> in JavaScript?</li> <li>Can you explain \"truthy\" and \"falsy\" values in JavaScript?</li> </ul> <p>12. Event Handling</p> <ul> <li>Explain the difference between capturing and bubbling phases in event propagation.</li> <li>What are the potential issues with event handlers and how can you mitigate them?</li> </ul> <p>13. Error Handling</p> <ul> <li>How do <code>try</code>, <code>catch</code>, <code>finally</code> work in JavaScript?</li> <li>What is the purpose of the <code>throw</code> statement, and how is it used?</li> </ul> <p>14. Security in JavaScript</p> <ul> <li>How do you prevent cross-site scripting (XSS) and cross-site request forgery (CSRF) attacks in JavaScript applications?</li> <li>What are some best practices for secure JavaScript code?</li> </ul> <p>15. Performance Optimization</p> <ul> <li>How do you optimize performance in JavaScript applications (e.g., lazy loading, debouncing, throttling)?</li> <li>Can you explain how to optimize DOM manipulation and rendering?</li> </ul> <p>These questions are aimed at testing both theoretical knowledge and practical problem-solving abilities, so it\u2019s important to not only understand the concepts but also demonstrate how you would apply them in real-world situations.</p>"},{"location":"codehighlight/js-advanced-interview/#other-areas-to-focus-on","title":"Other Areas to Focus On:","text":"<p>In addition to the above, you should focus on:</p> <p>1. JavaScript Engines and Execution Context:</p> <ul> <li>How JavaScript engines (V8, SpiderMonkey, etc.) handle the execution context.</li> <li>What happens during the process of variable hoisting?</li> </ul> <p>2. Event Loop and Call Stack:</p> <ul> <li>Understand how the JavaScript runtime environment manages the event loop, call stack, and message queue.</li> <li>What is the role of <code>setTimeout()</code> and <code>setImmediate()</code> in the event loop?</li> </ul> <p>3. Functional Programming:</p> <ul> <li>Familiarize yourself with immutability and pure functions.</li> <li>Learn how to implement currying, partial application, and higher-order functions in JavaScript.</li> </ul> <p>4. JavaScript Modules:</p> <ul> <li>Understand ES6 module syntax (<code>import</code>/<code>export</code>) and CommonJS syntax (<code>require()</code>).</li> <li>Understand how bundlers like Webpack or Rollup work in terms of modules and tree shaking.</li> </ul> <p>5. Advanced Algorithms and Data Structures:</p> <ul> <li>Brush up on algorithms (sorting, searching, etc.) and data structures (arrays, linked lists, trees, etc.), as they may be asked in practical scenarios.</li> <li>Study algorithmic complexity (Big O notation).</li> </ul> <p>6. Testing in JavaScript:</p> <ul> <li>Understand testing frameworks like Jest, Mocha, or Jasmine.</li> <li>Write simple unit tests and mock functions to test JavaScript code.</li> </ul> <p>7. Browser APIs:</p> <ul> <li>Learn about important browser APIs like the Fetch API, DOM manipulation, Local Storage, etc.</li> <li>Practice making asynchronous API requests and handling responses.</li> </ul> <p>8. Security Best Practices:</p> <ul> <li>Understand common security vulnerabilities (XSS, CSRF) and how to prevent them.</li> <li>Implement secure authentication and authorization practices.</li> </ul> <p>9. JavaScript Debugging:</p> <ul> <li>Master debugging tools like Chrome DevTools.</li> <li>Learn how to debug asynchronous code effectively.</li> </ul> <p>10. Performance and Optimization:</p> <ul> <li>Study how to identify performance bottlenecks using browser tools.</li> <li>Learn techniques for optimizing JavaScript code (e.g., code splitting, lazy loading).</li> </ul> <p>By dividing your practice into these categories, you can tackle both the theoretical and practical aspects of JavaScript in interviews. Focus on writing clean, efficient code and understanding the concepts deeply. Best of luck!</p>"},{"location":"codehighlight/rtk-overview/","title":"RTK OVERVIEW","text":""},{"location":"codehighlight/rtk-overview/#rtk-query","title":"RTK QUERY","text":"<p>RTK Query is a powerful data fetching and caching tool. It is designed to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching &amp; caching logic yourself.</p> <p>RTK Query is an optional addon included in the Redux Toolkit package, and its functionality is built on top of the other APIs in Redux Toolkit.</p>"},{"location":"codehighlight/rtk-overview/#using-rtk-query","title":"USING RTK QUERY","text":"<ul> <li>Standard Usage</li> </ul>"},{"location":"codehighlight/rtkQuery-realtime/","title":"RTKQuery Realtme","text":""},{"location":"codehighlight/rtkQuery-realtime/#rtk-query-realtime","title":"RTK QUERY REALTIME","text":"<p>is there any subscription where we can subscribe to data in the realtime in rtk query</p> <p>\ud83d\udd25 Short answer: RTK Query does not natively support real-time subscriptions like GraphQL subscriptions or WebSockets.</p> <p>But \u2014 you can build real-time behavior on top of RTK Query with a few tricks.</p>"},{"location":"codehighlight/rtkQuery-realtime/#why-doesnt-rtk-query-have-subscriptions","title":"\u2753Why Doesn\u2019t RTK Query Have Subscriptions?","text":"<p>RTK Query is built around HTTP-based REST APIs, which are request-response and not persistent like WebSockets or GraphQL subscriptions. That\u2019s why you don\u2019t get push-based updates out of the box.</p>"},{"location":"codehighlight/rtkQuery-realtime/#real-time-workarounds-the-rtk-way","title":"\u2705 Real-Time Workarounds (The \"RTK Way\")","text":"<p>Here\u2019s how you can simulate real-time in RTK Query:</p>"},{"location":"codehighlight/rtkQuery-realtime/#1-polling-poor-mans-subscription","title":"\ud83c\udf00 1. Polling = \"Poor Man\u2019s Subscription\"","text":"<pre><code>const { data } = useGetCurrencyRequestQuery(undefined, {\n  pollingInterval: 3000, // every 3 seconds\n});\n</code></pre> <ul> <li>Keeps hitting the endpoint at intervals.</li> <li>Simple but not efficient for high-frequency or large datasets.</li> </ul>"},{"location":"codehighlight/rtkQuery-realtime/#2-websocket-cache-invalidation","title":"\ud83d\udd0c 2. WebSocket + Cache Invalidation","text":"<p>You can listen to a WebSocket event outside RTK Query, then trigger cache updates manually:</p> <pre><code>useEffect(() =&gt; {\n  const socket = new WebSocket(\"wss://your-api.com/updates\");\n\n  socket.onmessage = (event) =&gt; {\n    const message = JSON.parse(event.data);\n\n    if (message.type === \"currency_request_updated\") {\n      dispatch(currencyRequestChatApi.util.invalidateTags([\"CurrencyRequest\"]));\n    }\n  };\n\n  return () =&gt; socket.close();\n}, []);\n</code></pre> <ul> <li>Data changes? \u2705 You invalidate the cache.</li> <li>RTK Query will automatically re-fetch the latest data.</li> </ul>"},{"location":"codehighlight/rtkQuery-realtime/#3-graphql-subscriptions-if-youre-using-graphql","title":"\ud83d\udca1 3. GraphQL Subscriptions (If You\u2019re Using GraphQL)","text":"<p>If you\u2019re using GraphQL, you can integrate RTK Query with Apollo Client or urql just for subscriptions, and still use RTK Query for everything else.</p>"},{"location":"codehighlight/rtkQuery-realtime/#4-custom-basequery-with-websockets-or-eventsource","title":"\ud83e\udde0 4. Custom BaseQuery with WebSockets or EventSource","text":"<p>You can write a baseQuery that connects to a stream (e.g. Server-Sent Events or WebSocket) and emits data \u2014 but it takes work.</p> <p>Here\u2019s a basic idea (not production-ready):</p> <pre><code>const streamingBaseQuery = async () =&gt; {\n  return new Promise((resolve) =&gt; {\n    const events = new EventSource(\"/api/stream\");\n    events.onmessage = (event) =&gt; {\n      resolve({ data: JSON.parse(event.data) });\n    };\n  });\n};\n</code></pre> <p>Again, not ideal unless you\u2019re doing real-time dashboards or stock tickers.</p>"},{"location":"codehighlight/rtkQuery-realtime/#bottom-line","title":"\u2705 Bottom Line","text":"Feature Native Support in RTK Query Workaround Real-time push updates \u274c No \u2705 WebSockets + <code>invalidateTags()</code> Polling for changes \u2705 Yes GraphQL-style subscriptions \u274c No \u2705 Use Apollo Client or hybrid setup Cache re-fetch on events \u2705 Manual via dispatch \u2705 Trigger <code>invalidateTags()</code> on event"},{"location":"codehighlight/rule-of-thumb/","title":"Rule of Thumb","text":""},{"location":"codehighlight/rule-of-thumb/#rule-of-thumb","title":"Rule of thumb","text":""},{"location":"codehighlight/rule-of-thumb/#issue","title":"Issue","text":"<p>Ah, yep \u2014 that error message is very clear now:</p> <p>\"An unknown Component is an async Client Component. Only Server Components can be async at the moment.\"</p> <p>You're trying to use an async function component in a Client Component, which Next.js doesn't allow.</p>"},{"location":"codehighlight/rule-of-thumb/#whats-going-wrong","title":"\ud83e\udde8 What\u2019s Going Wrong","text":"<p>You have this code:</p> <pre><code>// \u274c This is an async component\nexport default async function Profile() {\n    const res = await fetch(...);\n    const data = await res.json();\n\n    return (...);\n}\n</code></pre> <p>That\u2019s totally fine in Server Components (<code>app/</code> directory, no <code>'use client'</code> at the top).</p> <p>But if your file has <code>'use client'</code> at the top or is imported into a Client Component, it becomes a Client Component, and <code>async</code> function components are not supported on the client.</p>"},{"location":"codehighlight/rule-of-thumb/#fix-decide-where-this-component-lives","title":"\u2705 Fix: Decide Where This Component Lives","text":"<p>Option 1: \u2705 Server Component (Recommended)</p> <p>If you want to fetch data at the server level, make sure:</p> <ul> <li>The file is in the <code>app/</code> directory</li> <li>It does not contain <code>'use client'</code> at the top</li> <li>It's not imported into a Client Component</li> </ul> <pre><code>// app/profile/page.tsx (Server Component)\nexport default async function Profile() {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts/1\", {\n    next: { revalidate: 60 },\n  });\n  const data = await res.json();\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;PROFILE&lt;/h1&gt;\n      &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>Option 2: \u2705 Client Component (with <code>useEffect</code>)</p> <p>If you need interactivity (like user clicks, state, etc), make it a Client Component and fetch in <code>useEffect</code>.</p> <pre><code>// app/profile/ProfileClient.tsx\n\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ProfileClient() {\n  const [post, setPost] = useState(null);\n\n  useEffect(() =&gt; {\n    async function fetchPost() {\n      const res = await fetch(\"https://jsonplaceholder.typicode.com/posts/1\");\n      const data = await res.json();\n      setPost(data);\n    }\n    fetchPost();\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;PROFILE&lt;/h1&gt;\n      &lt;pre&gt;{post ? JSON.stringify(post, null, 2) : \"Loading...\"}&lt;/pre&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>Then render it from a Server Component:</p> <pre><code>// app/profile/page.tsx\nimport dynamic from \"next/dynamic\";\nconst ProfileClient = dynamic(() =&gt; import(\"./ProfileClient\"), { ssr: false });\n\nexport default function Page() {\n  return (\n    &lt;div&gt;\n      &lt;ProfileClient /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>wesome question \u2014 this is a super common point of confusion when getting started with Next.js App Router:</p> <p>\ud83e\udde9 How do I use Server and Client Components together properly?</p> <p>Let\u2019s break it down clean and simple.</p>"},{"location":"codehighlight/rule-of-thumb/#rule-of-thumb_1","title":"\ud83d\udca1 Rule of Thumb","text":"<ul> <li>\u2705 Server Components can render Client Components</li> <li>\u274c Client Components cannot render Server Components</li> </ul>"},{"location":"codehighlight/rule-of-thumb/#what-to-display-in-apptsx-or-layouttsx","title":"\u2705 What to Display in <code>App.tsx</code> (or <code>layout.tsx</code>)","text":"<p>In the App Router, <code>App.tsx</code> doesn't exist \u2014 it's replaced by:</p> <ul> <li><code>layout.tsx</code> \u2192 Server Component (for shared layouts)</li> <li><code>page.tsx</code> \u2192 Server Component (for pages)</li> <li><code>ClientComponent.tsx</code> \u2192 your interactive bits (with 'use client')</li> </ul>"},{"location":"codehighlight/rule-of-thumb/#structure-you-want","title":"\ud83e\udde0 Structure You Want:","text":""},{"location":"codehighlight/rule-of-thumb/#1-use-server-components-as-the-base-fetching-layout-etc","title":"\ud83e\uddf1 1. Use Server Components as the base (fetching, layout, etc)","text":"<pre><code>// app/page.tsx or app/profile/page.tsx \u2014 SERVER COMPONENT\nimport ClientProfile from \"./ClientProfile\";\n\nexport default async function Page() {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts/1\");\n  const data = await res.json();\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Server + Client Example&lt;/h1&gt;\n      {/* Pass data to client */}\n      &lt;ClientProfile initialPost={data} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"codehighlight/rule-of-thumb/#2-use-client-components-for-interactivity","title":"\ud83e\udde9 2. Use Client Components for interactivity","text":"<pre><code>// app/profile/ClientProfile.tsx\n\"use client\";\nimport { useState } from \"react\";\n\nexport default function ClientProfile({ initialPost }) {\n  const [post, setPost] = useState(initialPost);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Client Component&lt;/h2&gt;\n      &lt;pre&gt;{JSON.stringify(post, null, 2)}&lt;/pre&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"codehighlight/rule-of-thumb/#example-folder-structure","title":"\ud83d\udce6 Example Folder Structure","text":"<pre><code>/app\n  /layout.tsx            \u2190 Server layout (header, etc.)\n  /page.tsx              \u2190 Server Component (fetch + render)\n  /profile\n    /page.tsx            \u2190 Server Component for /profile\n    ClientProfile.tsx    \u2190 Client Component for UI interactivity\n</code></pre>"},{"location":"codehighlight/rule-of-thumb/#rule-of-thumb-think-in-data-vs-interactivity","title":"\u2705 Rule of Thumb: Think in \"Data vs Interactivity\"","text":"Server Components Client Components Fetch data (<code>fetch</code>, DB calls, etc.) Handle interactivity (<code>useState</code>, <code>useEffect</code>) Async allowed Must be synchronous (no <code>async function</code>) Run only on server Run in the browser Default in <code>app/</code> directory Must include <code>'use client'</code> directive No <code>useEffect</code>, <code>useState</code>, events Can use React hooks, event handlers"},{"location":"codehighlight/statemanagement/","title":"State Management","text":""},{"location":"codehighlight/statemanagement/#state-management","title":"State Management","text":"<p>can we get previousuly hit api data in tanstack query and rtk query</p>"},{"location":"codehighlight/statemanagement/#1-tanstack-query-formerly-react-query","title":"\u2705 1. TanStack Query (formerly React Query)","text":"<p>Yes, TanStack Query automatically caches previously hit API data, and you can access it later without re-fetching.</p> How it works: <p>When you fetch data using <code>useQuery</code>, TanStack Query stores it in cache. You can access this cached data later:</p> <pre><code>const { data } = useQuery([\"todos\"], fetchTodos);\n\n// Later, even in another component:\nconst queryClient = useQueryClient();\nconst cachedData = queryClient.getQueryData([\"todos\"]);\n</code></pre> <p>This lets you:</p> <ul> <li>Avoid re-fetching if data is fresh.</li> <li>Read stale data instantly (while background refetch happens).</li> <li>Preload data for navigation or offline support.</li> </ul>"},{"location":"codehighlight/statemanagement/#2-rtk-query-redux-toolkit-query","title":"\u2705 2. RTK Query (Redux Toolkit Query)","text":"<p>RTK Query also automatically caches API responses in the Redux store.</p> How it works: <p>When you call an endpoint using <code>useGetSomethingQuery()</code>, RTK Query:</p> <ul> <li>Caches the result keyed by the query parameters.</li> <li>Makes the same data available elsewhere without re-fetching (unless it expires).</li> </ul> <pre><code>const { data } = useGetTodosQuery();\n\n// Elsewhere in Redux state:\nconst cached = store.getState().api.queries[\"getTodos(undefined)\"];\n</code></pre> <p>You can also use <code>selectFromResult</code> to read cached data and avoid re-renders:</p> <pre><code>const { data } = useGetTodosQuery(undefined, {\n    selectFromResult: ({ data }) =&gt; ({\n        todoCount: data?.length,\n    }),\n});\n</code></pre>"},{"location":"codehighlight/statemanagement/#want-to-re-use-previous-api-data","title":"\ud83d\udd04 Want to re-use previous API data?","text":"<p>Both tools support that out of the box \u2014 no need to refetch if the data is in cache.</p> <ul> <li>TanStack Query gives you <code>queryClient.getQueryData</code>.</li> <li>RTK Query exposes the cache through selectors or direct state access.</li> </ul>"},{"location":"codehighlight/statemanagement/#question","title":"Question","text":"<p>show me hard question about statemanagement in react and advanced techniquse that i can use it in there.</p> <p>Ohhh you\u2019re diving deep into React state management now \u2014 I like it. Let\u2019s look at a hard question you might encounter in interviews or advanced apps, and I\u2019ll follow up with advanced techniques to handle it like a pro.</p> \ud83e\udde0 Hard React State Management Question <p>\u201cHow would you design a scalable, performant state management solution for a large app with nested components, cross-cutting concerns (e.g., auth, theming, localization), and real-time data, while minimizing re-renders and keeping state traceable for debugging?\u201d</p> <p>That\u2019s a mouthful \u2014 but it\u2019s a realistic challenge in production apps.</p> <p>\ud83d\udd27 Advanced Techniques to Handle It</p> <p>Here\u2019s a breakdown of powerful techniques/tools to handle that:</p>"},{"location":"codehighlight/statemanagement/#1-colocate-state-when-possible","title":"1. Colocate State When Possible","text":"<p>Instead of pushing everything into global state (Redux, etc.), keep state close to where it\u2019s used using <code>useState</code>, <code>useReducer</code>, or even component-level context.</p> <p>\ud83d\udccc Why? It improves encapsulation and performance.</p> <pre><code>function TodoItem({ initialDone }) {\n  const [done, setDone] = useState(initialDone);\n}\n</code></pre> <ol> <li>Global State with Context + useReducer (Scoped Stores)</li> </ol> <p>Use Context with <code>useReducer</code> or <code>zustand</code> for lightweight, localized global stores.</p> <pre><code>// themeContext.js\nconst ThemeContext = createContext();\nconst themeReducer = (state, action) =&gt; {\n  /*...*/\n};\n</code></pre> <p>\ud83d\udccc Tip: Memoize context values to avoid unnecessary re-renders.</p> <ol> <li>Memoization with <code>React.memo</code>, <code>useMemo</code>, <code>useCallback</code></li> </ol> <p>These help reduce re-renders when props/state don\u2019t change.</p> <pre><code>const expensiveComponent = React.memo(({ data }) =&gt; {\n  // won't re-render unless data changes\n});\n</code></pre> <p>Use <code>React DevTools Profiler</code> to analyze wasted renders.</p> <ol> <li>RTK Query / TanStack Query for Server State</li> </ol> <p>Offload async data management to libraries like RTK Query or TanStack Query.</p> <p>\ud83d\udccc They give you:</p> <ul> <li>Automatic caching</li> <li>Background refetching</li> <li>Deduplication</li> <li>Cache invalidation</li> </ul> <p>No more manual fetching + reducers + thunks \ud83c\udf89</p> <ol> <li>Selectors with <code>Reselect</code> or Zustand/Signal-like Patterns</li> </ol> <p>Use selectors to extract just what\u2019s needed and avoid full tree re-renders.</p> <pre><code>const selectUser = (state) =&gt; state.auth.user;\n</code></pre> <p>Zustand and Jotai allow fine-grained subscriptions.</p> <ol> <li>Snapshot &amp; Undo/Redo Support</li> </ol> <p>Use <code>use-undo</code> or custom state history tracking for power features.</p> <pre><code>const [state, { undo, redo }] = useUndo(initialState);\n</code></pre> <p>\ud83d\udccc Good for apps like design tools, forms, editors.</p> <ol> <li>React Server Components (RSC) + State Hydration</li> </ol> <p>In newer React (18+), split logic between server + client. Use server components to fetch data and hydrate client components with only minimal state.</p> <ol> <li>Persistent &amp; Synced State</li> </ol> <p>For apps needing offline, cross-tab, or persistent state:</p> <ul> <li>Use <code>localStorage</code>, <code>indexedDB</code>, or <code>redux-persist</code></li> <li>Use <code>broadcast-channel</code> to sync between tabs</li> <li>Zustand + middleware = \ud83d\udd25 for this</li> </ul> <ol> <li>Devtools and Traceability</li> </ol> <p>Use Redux DevTools or Zustand Devtools plugin to track state transitions.</p> <p>Good state libraries offer:</p> <ul> <li>Time-travel debugging</li> <li>Action logging</li> <li>Snapshot comparison</li> </ul> <p>Bonus Advanced Technique</p> <p>\u26a1 React Tracing with <code>useTransition</code> + Concurrent Features</p> <p>For interactive UIs:</p> <pre><code>const [isPending, startTransition] = useTransition();\nstartTransition(() =&gt; {\n  // state update here is non-blocking\n});\n</code></pre> <p>Want me to mock up a full advanced architecture example (e.g., Zustand + RTK Query + Reselect + React context)? Or do you have a specific use case (e.g. chat app, dashboard, real-time editing)?</p>"},{"location":"codehighlight/supabase/intro/","title":"Supabase Overview","text":""},{"location":"codehighlight/webapi/file-api/","title":"File API","text":""},{"location":"codehighlight/webapi/file-api/#file-apis","title":"File APIs","text":""},{"location":"codehighlight/webapi/file-api/#overview","title":"Overview","text":"<p>The File API enables web applications to access files and their contents.</p> <p>Web applications can access files when the user makes them available, either using a file  element or via drag and drop.</p> <p>Sets of files made available in this way are represented as FileList objects, which enable a web application to retrieve individual File objects. In turn File objects provide access to metadata such as the file's name, size, type, and last modified date.</p> <p>File objects can be passed to FileReader objects to access the contents of the file. The FileReader interface is asynchronous, but a synchronous version, available only in web workers, is provided by the FileReaderSync interface.</p>"},{"location":"codehighlight/webapi/file-api/#key-web-apis-in-javascript-for-handling-files","title":"Key Web APIs in JavaScript for Handling Files","text":"<p>JavaScript provides several web APIs for handling files in the browser. Here are the main ones:</p> <p>CORE</p>"},{"location":"codehighlight/webapi/file-api/#file-api","title":"File API","text":"<p>Purpose: Allows access to files selected by the user (e.g., via  or drag-and-drop).</p> <p>Core Interfaces:</p> <ul> <li>File: Represents a single file, exposing metadata like name, size, and type.</li> <li>FileList: Represents an array-like list of File objects (e.g., from multiple file selection).</li> <li>FileReader: Reads file contents asynchronously as text, data URL, or binary data.</li> <li>Blob: Represents immutable raw data, useful for slicing files or handling binary data.</li> </ul> Reference <ul> <li>mozilla, File</li> <li>File Api</li> <li>Reading files in JavaScript using the file APIs</li> </ul> <p>ADVANCED</p>"},{"location":"codehighlight/webapi/file-api/#file-and-directory-entries-api","title":"File and Directory Entries API","text":"<ul> <li>Purpose: Enables reading directories and multiple files, often from drag-and-drop or directory selection.</li> <li>Note: Primarily supported in Chromium browsers and uses <code>webkit</code>-prefixed interfaces.</li> </ul>"},{"location":"codehighlight/webapi/file-api/#file-system-access-api","title":"File System Access API","text":"<ul> <li>Purpose: Allows web apps to read and write files and directories on the user's device with user permission.</li> <li>Features: Enables persistent storage and direct editing of local files (subject to user consent).</li> </ul>"},{"location":"codehighlight/webapi/file-api/#summary-table","title":"Summary Table","text":"Example Usage (File API) <pre><code>const input = document.querySelector('input[type=\"file\"]');\n\ninput.addEventListener(\"change\", (event) =&gt; {\n    const file = event.target.files[0]; // File object\n    const reader = new FileReader();\n    reader.onload = (e) =&gt; {\n        console.log(e.target.result); // File content\n    };\n    reader.readAsText(file);\n});\n</code></pre>"},{"location":"codehighlight/webapi/file-api/#file-and-directory-entries-api_1","title":"File and Directory Entries API","text":""},{"location":"codehighlight/webapi/file-api/#relationship-to-other-file-related-apis","title":"Relationship to other file-related APIs","text":"<p>There are two other major APIs that also deal with files: File and Directory Entries API and File System API.</p> <p>The File API is the most basic one. It supports reading and processing file data explicitly provided by the user in the form of a form element input or drag-and-drop operation. It also enables binary data handling via blobs.</p>"},{"location":"codehighlight/webapi/overview/","title":"Overview","text":""},{"location":"codehighlight/webapi/overview/#overview","title":"Overview","text":""},{"location":"codehighlight/webapi/overview/#other-most-important-web-apis-besides-filereader-and-blob","title":"Other Most Important Web APIs Besides FileReader and Blob","text":"<p>FileReader and Blob are essential for file handling in web applications, but modern web development relies on a broad set of other crucial Web APIs. These APIs enable rich, interactive, and secure web experiences. Here are some of the most important Web APIs to know:</p>"},{"location":"codehighlight/webapi/overview/#1-fetch-api","title":"1. Fetch API","text":"<ul> <li>Used for making network requests, replacing the older XMLHttpRequest.</li> <li>Supports promises and is essential for AJAX, RESTful communication, and fetching resources.</li> </ul>"},{"location":"codehighlight/webapi/overview/#2-web-storage-api","title":"2. Web Storage API","text":"<ul> <li>Includes <code>localStorage</code> and <code>sessionStorage</code> for storing data in the browser.</li> <li>Enables persistent or session-based storage of key-value pairs on the client side.</li> </ul>"},{"location":"codehighlight/webapi/overview/#3-service-workers-api","title":"3. Service Workers API","text":"<ul> <li>Allows background scripts to intercept network requests, cache resources, and enable offline experiences.</li> <li>Key for Progressive Web Apps (PWAs).</li> </ul> <pre><code>if (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"/sw.js\")\n    .then((registration) =&gt; {\n      console.log(\"Service Worker registered with scope:\", registration.scope);\n    })\n    .catch((error) =&gt; {\n      console.error(\"Service Worker registration failed:\", error);\n    });\n}\n</code></pre>"},{"location":"codehighlight/webapi/overview/#4-websockets-api","title":"4. WebSockets API","text":"<ul> <li>Enables real-time, two-way communication between the browser and server.</li> <li>Used for chat apps, live notifications, and collaborative tools.</li> </ul> <pre><code>const socket = new WebSocket(\"wss://example.com/socket\");\n\nsocket.onopen = () =&gt; {\n  socket.send(\"Hello Server!\");\n};\n\nsocket.onmessage = (event) =&gt; {\n  console.log(\"Message from server:\", event.data);\n};\n\nsocket.onclose = () =&gt; {\n  console.log(\"Connection closed\");\n};\n</code></pre>"},{"location":"codehighlight/webapi/overview/#5-geolocation-api","title":"5. Geolocation API","text":"<ul> <li>Provides access to the device\u2019s geographical location.</li> <li>Commonly used for maps, location-based services, and tracking.</li> </ul>"},{"location":"codehighlight/webapi/overview/#6-notification-api","title":"6. Notification API","text":"<ul> <li>Allows web applications to display notifications to users, even when the app is not in focus.</li> </ul> <pre><code>// Request permission\nNotification.requestPermission().then(function (permission) {\n  if (permission === \"granted\") {\n    new Notification(\"Hello from your web app!\");\n  }\n});\n</code></pre>"},{"location":"codehighlight/webapi/overview/#7-push-api","title":"7. Push API","text":"<ul> <li>Works with Service Workers to enable push notifications from a server to a web application.</li> </ul> <pre><code>// 1. Register a Service Worker\nif (\"serviceWorker\" in navigator &amp;&amp; \"PushManager\" in window) {\n  navigator.serviceWorker\n    .register(\"/sw.js\")\n    .then(function (registration) {\n      console.log(\"Service Worker registered:\", registration);\n\n      // 2. Request Notification Permission\n      return Notification.requestPermission().then(function (permission) {\n        if (permission === \"granted\") {\n          // 3. Subscribe to Push\n          return registration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: \"&lt;Your VAPID Public Key&gt;\",\n          });\n        } else {\n          throw new Error(\"Permission not granted for Notification\");\n        }\n      });\n    })\n    .then(function (subscription) {\n      console.log(\"Push Subscription:\", JSON.stringify(subscription));\n      // Send subscription to your server to save it and send push messages later\n    })\n    .catch(function (error) {\n      console.error(\n        \"Error during service worker registration or push subscription:\",\n        error\n      );\n    });\n}\n</code></pre> <pre><code>// /sw.js\nself.addEventListener(\"push\", function (event) {\n  const data = event.data ? event.data.text() : \"No payload\";\n  event.waitUntil(\n    self.registration.showNotification(\"Push Notification\", {\n      body: data,\n      icon: \"/icon.png\",\n    })\n  );\n});\n</code></pre>"},{"location":"codehighlight/webapi/overview/#8-indexeddb-api","title":"8. IndexedDB API","text":"<ul> <li>A low-level API for storing large amounts of structured data, including files/blobs.</li> <li>Useful for offline apps and complex client-side storage needs.</li> </ul>"},{"location":"codehighlight/webapi/overview/#9-webrtc-api","title":"9. WebRTC API","text":"<ul> <li>Enables real-time audio, video, and data communication between browsers.</li> <li>Powers video calls, peer-to-peer file sharing, and live streaming.</li> </ul> <pre><code>// Create a new RTCPeerConnection\nconst peerConnection = new RTCPeerConnection();\n\n// Add media tracks (audio/video)\nnavigator.mediaDevices\n  .getUserMedia({ video: true, audio: true })\n  .then((stream) =&gt; {\n    stream\n      .getTracks()\n      .forEach((track) =&gt; peerConnection.addTrack(track, stream));\n  });\n\n// Handle ICE candidates and signaling for peer discovery (simplified)\npeerConnection.onicecandidate = (event) =&gt; {\n  if (event.candidate) {\n    // Send candidate to remote peer via signaling server\n  }\n};\n</code></pre>"},{"location":"codehighlight/webapi/overview/#10-canvas-and-webgl-apis","title":"10. Canvas and WebGL APIs","text":"<ul> <li>Canvas API: For 2D drawing and bitmap manipulation.</li> <li>WebGL API: For rendering interactive 3D and 2D graphics within any compatible web browser.</li> </ul>"},{"location":"codehighlight/webapi/overview/#11-media-devices-api","title":"11. Media Devices API","text":"<ul> <li>Provides access to media input devices like cameras and microphones.</li> <li>Used for capturing audio/video streams.</li> </ul>"},{"location":"codehighlight/webapi/overview/#12-drag-and-drop-api","title":"12. Drag and Drop API","text":"<ul> <li>Enables drag-and-drop functionality for interactive UIs.</li> </ul>"},{"location":"codehighlight/webapi/overview/#13-history-api","title":"13. History API","text":"<ul> <li>Manipulates the browser session history, enabling single-page application navigation without full page reloads.</li> </ul>"},{"location":"codehighlight/webapi/overview/#14-payment-request-api","title":"14. Payment Request API","text":"<ul> <li>Streamlines online payments by providing a consistent interface for payment methods.</li> </ul>"},{"location":"codehighlight/webapi/overview/#15-clipboard-api","title":"15. Clipboard API","text":"<ul> <li>Allows web applications to read from and write to the system clipboard.</li> </ul> <pre><code>// Copy text to clipboard\nnavigator.clipboard.writeText(\"Copied text!\").then(() =&gt; {\n  console.log(\"Text copied to clipboard\");\n});\n\n// Read text from clipboard\nnavigator.clipboard.readText().then((text) =&gt; {\n  console.log(\"Clipboard text:\", text);\n});\n</code></pre> Other Notable Web APIs <ul> <li>Vibration API: For haptic feedback on supported devices.</li> <li>Fullscreen API: Allows elements to be displayed in fullscreen mode.</li> <li>Battery Status API: Provides information about the system's battery status.</li> <li>Speech Recognition and Synthesis APIs: For voice input and output.</li> </ul> <p>These APIs, alongside FileReader and Blob, form the backbone of modern web capabilities, enabling everything from offline support and real-time communication to enhanced user experiences and device integratio</p>"},{"location":"codehighlight/webapi/web-api/","title":"WEB API","text":""},{"location":"codehighlight/webapi/web-api/#web-apis","title":"Web APIs","text":"<p>When writing code for the Web, there are a large number of Web APIs available. Below is a list of all the APIs and interfaces (object types) that you may be able to use while developing your Web app or site.</p> <p>--</p>"},{"location":"codehighlight/webapi/web-api/#reference","title":"Reference","text":"<ul> <li>developer.mozilla.org, Web APIs</li> <li>XMLHttpRequest API</li> </ul>"},{"location":"migration/UI_DESIGN_OLD_DAYS/","title":"DESIGN OLD DAYS","text":""},{"location":"migration/UI_DESIGN_OLD_DAYS/#old-days","title":"OLD DAYS","text":"File Source Purpose <code>bootstrap/scss/bootstrap</code> From Bootstrap Full Bootstrap SCSS framework <code>_variables.scss</code> You create Override Bootstrap variables (e.g. colors) <code>_mixins.scss</code> You create Your own Sass mixins <code>_base.scss</code> You create Base styling: <code>body</code>, <code>a</code>, resets, fonts <code>_components.scss</code> You create Component styles with BEM naming <code>main.scss</code> You create Your main entry file that pulls all together <pre><code>/scss/\n\u251c\u2500\u2500 /bootstrap/               # Copied from Bootstrap download\n\u2502   \u2514\u2500\u2500 ... (all Bootstrap SCSS files)\n\u251c\u2500\u2500 _variables.scss           # Your Bootstrap overrides\n\u251c\u2500\u2500 _mixins.scss              # Your custom mixins\n\u251c\u2500\u2500 _base.scss                # Base HTML/global styles\n\u251c\u2500\u2500 _components.scss          # Your BEM-based components\n\u2514\u2500\u2500 main.scss                 # The main Sass entry file\n</code></pre>"},{"location":"migration/UI_DESIGN_OLD_DAYS/#vs-code-extension","title":"VS CODE EXTENSION","text":"<ul> <li>Live Sass Compiler by Glenn Marks</li> </ul> <p>\u2705 Solution: Set output folder in Live Sass Compiler settings</p> <ol> <li> <p>In your VS Code, open the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code>)</p> </li> <li> <p>Search for:</p> <p><code>Preferences: Open Settings (JSON)</code></p> </li> <li> <p>Add or modify the Live Sass Compiler settings like this:</p> <pre><code>\"liveSassCompile.settings.formats\": [\n    {\n        \"format\": \"expanded\",\n        \"extensionName\": \".css\",\n        \"savePath\": \"/assets/css\"\n    }\n],\n\"liveSassCompile.settings.includeItems\": [\n    \"**/scss/custom.scss\"\n],\n\"liveSassCompile.settings.excludeList\": [\n    \"**/node_modules/**\",\n    \".vscode/**\"\n]\n</code></pre> </li> </ol> <p>Make sure the <code>/assets/css</code> path exists (relative to your project root) or VS Code may not save there.</p> <p>\ud83e\udde0 What this does:</p> <ul> <li><code>\"savePath\": \"/assets/css\"</code> \u2014 tells Sass to put compiled <code>.css</code> files in <code>assets/css/</code>.</li> <li><code>\"includeItems\"</code> \u2014 only compile <code>custom.scss</code> so you don\u2019t get <code>.css</code> for every partial.</li> </ul>"},{"location":"migration/UI_DESIGN_OLD_DAYS/#bonus-tip","title":"Bonus tip:","text":"<p>Your structure could look like:</p> <pre><code>your-project/\n\u251c\u2500\u2500 scss/\n\u2502   \u251c\u2500\u2500 custom.scss         \u2190 main SCSS entry\n\u2502   \u2514\u2500\u2500 partials/           \u2190 _variables.scss, _mixins.scss, etc.\n\u251c\u2500\u2500 bootstrap/              \u2190 Bootstrap source\n\u2502   \u2514\u2500\u2500 scss/\n\u251c\u2500\u2500 assets/\n\u2502   \u2514\u2500\u2500 css/                \u2190 output folder for compiled CSS\n</code></pre> <p>Then <code>custom.scss</code> could do something like:</p> <pre><code>@use \"../bootstrap/scss/bootstrap\";\n@use \"./partials/variables\";\n</code></pre>"},{"location":"migration/UI_DESIGN_OLD_DAYS/#tldr-what-to-do-now","title":"\ud83d\udd01 TL;DR: What to do now","text":"<ul> <li>Edit your VS Code settings (JSON) to specify <code>\"savePath\": \"/assets/css\"</code></li> <li>Make sure the path exists and you\u2019re compiling the right file</li> <li>Restart the Live Sass Compiler after making changes</li> </ul> settings.json<pre><code>{\n    \"security.workspace.trust.untrustedFiles\": \"open\",\n    // FOR LIVE SASS COMPILER\n    \"liveSassCompile.settings.formats\": [\n        {\n            \"format\": \"expanded\",\n            \"extensionName\": \".css\",\n            \"savePath\": \"/assets/css\"\n        }\n    ],\n        \"liveSassCompile.settings.includeItems\": [\n        \"**/scss/custom.scss\"\n    ],\n    \"liveSassCompile.settings.excludeList\": [\n        \"**/node_modules/**\",\n        \".vscode/**\"\n    ]\n}\n</code></pre>"},{"location":"migration/UI_DESIGN_OLD_DAYS/#rem-to-px-convert","title":"Rem to PX Convert","text":"<p>To convert <code>1.5rem</code> to <code>px</code>, you need to know the root <code>font-size</code>, which is usually:</p> <ul> <li>Default (browser standard): <code>1rem = 16px</code></li> </ul> <p>\u2705 Answer: <code>1.5rem = 24px</code> (assuming the root font-size is 16px)</p>"},{"location":"migration/UI_DESIGN_OLD_DAYS/#if-the-root-font-size-is-different","title":"\u26a0\ufe0f If the root font-size is different:","text":"<p>For example, if in your CSS you have:</p> <pre><code>html {\n  font-size: 10px;\n}\n</code></pre> <p>Then:</p> <pre><code>1.5rem = 1.5 \u00d7 10px = 15px\n</code></pre> <p>Always check your <code>html</code> or <code>:root</code> styles to confirm the base size if you're not using the default.su</p>"},{"location":"migration/git-tag/","title":"Git Tag","text":""},{"location":"migration/git-tag/#git-tag","title":"GIT TAG","text":"<p>A Git tag is:</p> <ul> <li>A label or name you stick on a specific commit.</li> <li>Not editable (like a sticky note that doesn't move once placed).</li> <li>Commonly used to mark versions: <code>v1.0.0</code>, v2.5, etc.</li> </ul> <p>Why and When Do You Use Git Tags?</p> <ol> <li> <p>Version Releases</p> <p>Whenever you release a new version of your software (e.g., an app or library), you create a tag. This marks:</p> <ul> <li>What code went into version 1.0.0</li> <li>Or 2.3.1 \u2014 whatever the release version is.</li> </ul> <p>That way, if a user reports a bug in <code>v2.1.0</code>, you can go exactly to the code of that version.</p> </li> <li> <p>Deployment</p> <p>If you're deploying code to production, staging, etc., you can tag that point:</p> <ul> <li>So you know what was deployed</li> <li>And can revert or re-check it later</li> </ul> </li> <li> <p>Milestones</p> <p>You may tag important moments in the project:</p> <ul> <li>First prototype</li> <li>Major feature added</li> <li>Bug fix release</li> </ul> </li> </ol> <p>\ud83e\uddea Real-Life Analogy</p> <p>Think of Git as a timeline of changes. Tags are like milestone flags you plant to say:</p> <p>\u201cThis was the exact state of things when we launched version 1.0!\u201d</p> <p>You can always walk back to those flags later and even re-release from there if needed.</p>"},{"location":"migration/git-tag/#two-types-of-git-tags","title":"\ud83d\udd0d Two Types of Git Tags","text":"Type Description Lightweight tag Just a name pointing to a commit (like a shortcut) Annotated tag Stores more info: message, date, author, and GPG signature (like a full record) <p>\ud83d\ude80 Pro tip: Use annotated tags for version releases \u2014 they\u2019re safer and more informative.</p>"},{"location":"migration/git-tag/#how-to-use-git-tag-basic-commands","title":"\ud83d\udee0\ufe0f How to Use Git Tag (Basic Commands)","text":"<pre><code># List all tags\ngit tag\n\n# Create a lightweight tag\ngit tag v1.0\n\n# Create an annotated tag\ngit tag -a v1.0 -m \"Release version 1.0\"\n\n# Push tags to remote (GitHub, GitLab, etc.)\ngit push origin v1.0\n\n# Push all tags\ngit push --tags\n\n# Checkout a tag (view code at that version)\ngit checkout v1.0\n</code></pre> \ud83e\udded Summary <ul> <li>Git tags are markers for important commits like releases.</li> <li>Use them for versioning, deployments, and milestones.</li> <li>They help you track, revert, and reference exact versions of your code.</li> <li>They are simple but powerful \u2014 like bookmarks in the history of your project.</li> </ul>"},{"location":"migration/google-collab/","title":"Google Collab","text":""},{"location":"migration/google-collab/#google-collab","title":"Google Collab","text":""},{"location":"migration/google-collab/#how-to-start-using-tensorflowkeras-in-google-colab","title":"\ud83e\udde0 How to Start Using TensorFlow/Keras in Google Colab","text":"<ol> <li> <p>Go to colab.research.google.com</p> </li> <li> <p>Click \"New Notebook\".</p> </li> <li> <p>In a code cell, you can start writing your model:</p> </li> </ol> <pre><code>import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Define a simple model\nmodel = keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(784,)),\n    layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Check the summary\nmodel.summary()\n</code></pre>"},{"location":"migration/google-collab/#bonus-enable-gpu","title":"\u2699\ufe0f Bonus: Enable GPU","text":"<ol> <li>Go to Runtime &gt; Change runtime type</li> <li>Select GPU under \"Hardware accelerator\"</li> <li>Click Save</li> </ol>"},{"location":"migration/google-collab/#reference","title":"Reference","text":"<ul> <li>Google Collab</li> <li>Youtube: Python for Machine Learning with Google Colab - Everything You Need to Know in under 25 minutes</li> </ul>"},{"location":"migration/linkedin/","title":"Linkedin","text":""},{"location":"migration/linkedin/#linkedin","title":"LinkedIN","text":""},{"location":"migration/linkedin/#headline","title":"Headline","text":"<p>Previous</p> <p>NOW</p>"},{"location":"migration/linkedin/#about","title":"ABOUT","text":"<p>Previous</p> <pre><code>An accomplished professional with nearly 3 years of dedicated experience in User Experience (UX) and User Interface (UI) design coupled with expertise in React development. Adept at seamlessly blending the art of creating visually appealing and user-centric interfaces with the technical prowess required to bring designs to life through React applications. Proven track record in crafting intuitive user experiences and translating intricate design wireframes into highly functional and responsive web elements. A collaborative team player with a keen eye for detail, committed to delivering cutting-edge solutions that seamlessly merge innovation with practicality.\n</code></pre> <p>NOW</p>"},{"location":"migration/linkedin/#endorsement","title":"ENDORSEMENT","text":"<p>Yes, you can absolutely request an endorsement from a current office colleague on LinkedIn.</p>"},{"location":"migration/linkedin/#two-types-of-recommendations-on-linkedin","title":"Two types of recommendations on LinkedIn:","text":""},{"location":"migration/linkedin/#1-endorsements-for-skills","title":"1. Endorsements (for skills):","text":"<ul> <li>These are quick, one-click confirmations of your listed skills (e.g., \u201cMarketing,\u201d \u201cTeam Leadership,\u201d \u201cProject Management\u201d).</li> <li>You can\u2019t directly request them via a message button, but you can ask politely via LinkedIn message or in person.</li> </ul> <p>Example:</p> <p>\u201cHey <code>[Name]</code>, would you mind endorsing me for a few of the skills we\u2019ve worked on together? I\u2019d really appreciate it \u2014 happy to do the same for you!\u201d</p>"},{"location":"migration/linkedin/#2-recommendations-written-testimonials","title":"2. Recommendations (written testimonials):","text":"<ul> <li>These are long-form written references.</li> <li>You can request them directly via LinkedIn, even from people you currently work with.</li> </ul> Steps <ol> <li>Go to your colleague\u2019s LinkedIn profile.</li> <li>Click the \u201cMore\u201d button.</li> <li>Select \u201cRequest a recommendation.\u201d</li> <li>Fill in your work relationship and job title.</li> <li>Add a short personalized message (I can help with that too).</li> </ol> <p>\u26a0\ufe0f A Few Tips:</p> <ul> <li>Make sure your company has no internal policies against recommending or endorsing coworkers publicly (some do in regulated industries).</li> <li>Always keep it professional and genuine \u2014 avoid wording that sounds like pressure or quid-pro-quo.</li> </ul>"},{"location":"migration/linkedin/#template","title":"Template","text":"<p>Thanks! Based on your background \u2014 2.5 years of experience in React and 1+ year in UI/UX and slicing \u2014 here are two tailored messages you can use depending on whether you're asking for:</p> <ol> <li> <p>Skill Endorsement (React, UI/UX, Slicing):</p> <p>You\u2019ll send this as a message (chat) on LinkedIn \u2014 there\u2019s no direct button for endorsements.</p> <pre><code>Hi [Name],\n\nHope you're doing well! I wanted to ask if you'd feel comfortable endorsing me for a few skills like **React, UI/UX, and HTML/CSS slicing** \u2014 since we've worked closely on projects where these came into play.\n\nI'd really appreciate it, and I\u2019m happy to return the favor if you'd like. Thanks in advance!\n</code></pre> </li> <li> <p>Written Recommendation (via \u201cAsk for a recommendation\u201d button):</p> <p>This is for a formal, written testimonial. You\u2019ll add this when sending the request on their profile.</p> <pre><code>Hi [Name],\n\nI really enjoyed working with you on our recent projects, especially where I handled the **React frontend** and **UI/UX implementation**.\n\nI\u2019d be grateful if you could write a short recommendation based on our collaboration \u2014 just a few lines about my frontend or UI/UX contributions would mean a lot.\n\nTotally understand if you\u2019re busy, and I appreciate your time either way!\n</code></pre> </li> </ol>"},{"location":"migration/web-dev-icebergs/","title":"WEB DEV ICEBERGS","text":""},{"location":"migration/web-dev-icebergs/#web-dev-iceberg","title":"WEB DEV Iceberg","text":""},{"location":"migration/web-dev-icebergs/#video","title":"VIDEO","text":"<ul> <li>type:video</li> </ul>"},{"location":"migration/developer/bug/","title":"BUG","text":""},{"location":"migration/developer/bug/#create-a-bug-in-the-react-app-in-which-its-hard-to-debug","title":"create a bug in the react app in which its hard to debug","text":"<p>Creating a bug that is challenging to debug in a React app typically involves writing code that behaves unexpectedly under certain conditions, or causes issues that are hard to trace. Here's an example of how you could create such a bug:</p> <p>Bug Scenario: State Mutation in a Complex Object</p> <p>The bug will be related to state mutation. React relies on state immutability for efficient rendering and reactivity. If the state is mutated directly, React may not properly re-render components, making it hard to detect that something is wrong.</p> <p>Code Example:</p> <pre><code>import React, { useState } from \"react\";\n\nconst BuggyComponent = () =&gt; {\n  const [userData, setUserData] = useState({\n    name: \"John\",\n    age: 30,\n    address: {\n      city: \"New York\",\n      state: \"NY\",\n    },\n  });\n\n  const updateName = (newName) =&gt; {\n    // Direct mutation of the state object\n    userData.name = newName;\n    setUserData(userData); // This won't trigger re-render as React sees no change\n  };\n\n  const updateCity = (newCity) =&gt; {\n    // Direct mutation of nested object\n    userData.address.city = newCity;\n    setUserData(userData); // Again, no proper re-render\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{userData.name}&lt;/h1&gt;\n      &lt;p&gt;{userData.address.city}&lt;/p&gt;\n      &lt;button onClick={() =&gt; updateName(\"Alice\")}&gt;Change Name&lt;/button&gt;\n      &lt;button onClick={() =&gt; updateCity(\"San Francisco\")}&gt;Change City&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default BuggyComponent;\n</code></pre> <p>Why is this hard to debug?</p> <ol> <li> <p>State Mutation: The code directly mutates the <code>userData</code> object, both on the top-level (<code>name</code>) and nested properties (<code>address.city</code>). React expects the state to be immutable, meaning direct mutations won't trigger re-renders.</p> </li> <li> <p>No Observable Errors: You won't see any errors in the console, making it appear like the app is functioning normally.</p> </li> <li> <p>UI Not Updating: The UI might not reflect the state changes, and this behavior can be tricky to trace because the <code>setUserData</code> call is still being made. It's easy to miss the fact that the state mutation occurred before calling <code>setUserData</code>.</p> </li> </ol> <p>How to Debug:</p> <ul> <li> <p>You might wonder why the state isn't updating the UI even though you are calling <code>setUserData</code>. It might be difficult to catch this if you're not familiar with how React relies on immutability.</p> </li> <li> <p>One way to debug this would be to use a deep comparison or a <code>useEffect</code> hook with a console log to observe changes in <code>userData</code>. However, this might only be caught after some investigation, not immediately.</p> </li> </ul> <p>Solution:</p> <p>To fix this, you should avoid direct mutation. Instead, make a shallow or deep copy of the state object before modifying it:</p> <pre><code>const updateName = (newName) =&gt; {\n  setUserData({ ...userData, name: newName });\n};\n\nconst updateCity = (newCity) =&gt; {\n  setUserData({\n    ...userData,\n    address: { ...userData.address, city: newCity },\n  });\n};\n</code></pre> <p>This fix prevents direct mutation, and React will correctly detect the change and re-render the component.</p>"},{"location":"migration/developer/bug/#app","title":"APP","text":"<p>4 requests 32.73 kB / 0 B transferred Finish: 51.09 s</p> <ul> <li>GET: <code>https://bk-api.info.com.np/api/BenificiaryBank/GetBenificiaryBankList</code></li> <li>Status: <code>201</code></li> </ul> <pre><code>[\n  {\n    \"id\": \"2065c2db-c059-4f35-1f48-08dd982b70da\",\n    \"address\": \"TTes\",\n    \"swiftCode\": \"NXSD\",\n    \"bankName\": \"Test Name\"\n  },\n  {\n    \"id\": \"2d69970f-e62a-4348-1f49-08dd982b70da\",\n    \"address\": \"234\",\n    \"swiftCode\": \"234\",\n    \"bankName\": \"234\"\n  }\n]\n</code></pre> In essence: <ul> <li>200 OK: implies a successful operation that retrieved or updated existing data.</li> <li>201 Created: implies a successful operation that resulted in the creation of a new resource.</li> </ul> <p>The http <code>201</code> vs <code>200</code> difference lies in action: <code>201</code> builds something fresh, while <code>200</code> fetches what's already there. Both are positive responses, showing the server did its job for different purposes</p> A GET request returning HTTP status 201 (Created) is not correct and violates HTTP standards. <p>\u2705 Correct HTTP Status for GET</p> <p>A <code>GET</code> request is used to retrieve data, not to create it. Therefore, it should return:</p> <ul> <li>200 OK \u2013 if the resource is successfully retrieved.</li> <li>204 No Content \u2013 if there's no content but the request was successful.</li> <li>404 Not Found \u2013 if the resource doesn't exist.</li> <li>403 Forbidden or 401 Unauthorized \u2013 if access is restricted.</li> </ul> <p>\u274c Why 201 is Incorrect for GET</p> <ul> <li>201 Created means the request resulted in a new resource being created.</li> <li>It is only appropriate for POST (and sometimes PUT) requests when something is newly created.</li> </ul> <p>RFC 7231 (HTTP/1.1 specification) defines this clearly.</p> <p>\ud83d\udcd8 Example: Correct usage of 201</p> <pre><code>POST /users HTTP/1.1\n{\n\"name\": \"Alice\"\n}\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 201 Created\nLocation: /users/123\n</code></pre> <p>\ud83d\udd27 If you're seeing 201 from a GET</p> <p>It likely means there's a backend bug or misconfiguration. The backend might be:</p> <ul> <li>Incorrectly using GET for resource creation.</li> <li>Mislabeling a POST as GET.</li> <li>Using a custom middleware that overrides standard behavior.</li> </ul>"},{"location":"migration/developer/faang/","title":"FAANG","text":""},{"location":"migration/developer/faang/#faang","title":"FAANG","text":"<p>Great \u2014 targeting FAANG (or similar top-tier tech companies) is ambitious and achievable with focused effort. At your level (5 years of frontend experience with React), you're likely aiming for Senior Frontend Engineer or Frontend Engineer III/IV roles.</p> <p>Here\u2019s a focused FAANG-ready roadmap with technical mastery, system design, and interview prep all covered:</p>"},{"location":"migration/developer/faang/#phase-1-mastery-in-frontend-engineering-react","title":"\ud83d\udd25 PHASE 1: Mastery in Frontend Engineering (React+)","text":""},{"location":"migration/developer/faang/#deepen-react-typescript-expertise","title":"\u2705 Deepen React &amp; TypeScript Expertise","text":"<ul> <li>React internals: Reconciliation, Fiber architecture</li> <li>Hooks mastery: Custom hooks, hook rules, edge cases</li> <li> <p>React performance:</p> </li> <li> <p><code>useMemo</code>, <code>useCallback</code>, memoization strategies</p> </li> <li> <p>Profiler, flame graphs, optimizing render paths</p> </li> <li> <p>TypeScript at scale:</p> </li> <li> <p>Generics, mapped types, discriminated unions</p> </li> <li>Enforcing strict null checks and type safety across large codebases</li> </ul>"},{"location":"migration/developer/faang/#advanced-component-architecture","title":"\u2705 Advanced Component Architecture","text":"<ul> <li>Build design systems or component libraries</li> <li>Use tools like Storybook for documentation</li> <li>Understand ARIA, accessibility (a11y), and WCAG guidelines</li> </ul>"},{"location":"migration/developer/faang/#nextjs-or-metas-relay-if-meta-specific","title":"\u2705 Next.js (or Meta\u2019s Relay if Meta-specific)","text":"<ul> <li>RSC (React Server Components) &amp; <code>app/</code> directory</li> <li>SSR vs. SSG vs. ISR</li> <li>Route handling, Middleware, API routes, edge functions</li> </ul>"},{"location":"migration/developer/faang/#phase-2-system-design-for-frontend","title":"\ud83d\udd0d PHASE 2: System Design for Frontend","text":"<p>FAANG interviews increasingly test frontend system design \u2014 not just backend.</p>"},{"location":"migration/developer/faang/#learn-to-design","title":"Learn to Design:","text":"<ul> <li> <p>Scalable component systems</p> </li> <li> <p>E.g., how to design a flexible Button, Modal, Form engine</p> </li> <li> <p>High-performance data-heavy UIs</p> </li> <li> <p>Think: dashboards, feed algorithms, virtualization</p> </li> <li> <p>Realtime systems</p> </li> <li> <p>WebSockets, long-polling, SignalR</p> </li> </ul>"},{"location":"migration/developer/faang/#tools-to-learn","title":"Tools to Learn:","text":"<ul> <li>Web architecture: CDNs, caching, load balancing</li> <li>Bundlers: webpack, Vite, esbuild</li> <li>Security: XSS, CSRF, Content Security Policy (CSP)</li> <li>CI/CD: GitHub Actions, testing pipelines</li> </ul>"},{"location":"migration/developer/faang/#phase-3-testing-reliability","title":"\ud83e\uddea PHASE 3: Testing &amp; Reliability","text":""},{"location":"migration/developer/faang/#frontend-testing-stack","title":"Frontend Testing Stack","text":"<ul> <li>Unit: Jest</li> <li>Integration: React Testing Library</li> <li>E2E: Cypress or Playwright</li> <li>Mocking APIs &amp; services (Mock Service Worker)</li> </ul>"},{"location":"migration/developer/faang/#advanced-patterns","title":"Advanced Patterns:","text":"<ul> <li>Test parallelization</li> <li>Testing in CI</li> <li>Coverage reports and quality gates</li> </ul>"},{"location":"migration/developer/faang/#phase-4-full-stack-infra-awareness","title":"\ud83d\udce6 PHASE 4: Full-Stack + Infra Awareness","text":"<p>While not always mandatory, full-stack fluency helps at FAANG.</p>"},{"location":"migration/developer/faang/#backend-basics","title":"Backend Basics","text":"<ul> <li>Node.js + Express / NestJS</li> <li>RESTful and GraphQL APIs (Apollo, urql)</li> <li>Authentication: JWT, OAuth2, sessions</li> </ul>"},{"location":"migration/developer/faang/#database-awareness","title":"Database Awareness","text":"<ul> <li>SQL vs NoSQL, indexing, data modeling basics</li> <li>ORMs like Prisma or Sequelize</li> <li>DevOps / Deployment</li> </ul>"},{"location":"migration/developer/faang/#docker-basics","title":"Docker basics","text":"<ul> <li>Deploying to Vercel, AWS, GCP</li> <li>Caching: Redis, CDN strategies (Cloudflare, Fastly)</li> </ul>"},{"location":"migration/developer/faang/#phase-5-faang-interview-prep","title":"\ud83e\udde0 PHASE 5: FAANG Interview Prep","text":""},{"location":"migration/developer/faang/#dsa-algorithms-yes-even-for-frontend-roles","title":"\ud83d\udcd8 DSA + Algorithms (Yes, even for frontend roles)","text":"<ul> <li> <p>Use LeetCode or NeetCode roadmap</p> </li> <li> <p>Focus on:</p> </li> <li> <p>Arrays, HashMaps, Strings</p> </li> <li>Recursion, Backtracking</li> <li>Trees, Graphs, BFS/DFS</li> <li>Dynamic Programming (some companies care)</li> </ul>"},{"location":"migration/developer/faang/#system-design","title":"\ud83e\uddf1 System Design","text":"<pre><code>-   Focus on ==Frontend System Design==:\n\n    -   How to design a large-scale component library\n    -   How to render 10,000 items efficiently\n    -   How to handle real-time chat notifications\n\n&gt; \ud83d\udee0 Resources:\n\n-   \u201cFrontend System Design\u201d (e.g., from FrontendMastery, ByteByteGo)\n-   Grokking System Design (backend-focused, but foundational)\n</code></pre>"},{"location":"migration/developer/faang/#mock-interviews","title":"\ud83c\udfaf Mock Interviews","text":"<ul> <li>Use platforms like Interviewing.io, Pramp, or a mentor</li> <li>Get feedback on communication, not just coding</li> </ul>"},{"location":"migration/developer/faang/#phase-6-polish-your-engineering-leadership","title":"\ud83c\udf93 PHASE 6: Polish Your Engineering Leadership","text":"<p>FAANG wants engineers who can lead:</p> <ul> <li>Mentorship: Have you mentored juniors?</li> <li>Tech decisions: Can you justify your stack and architectural choices?</li> <li>Cross-team collaboration: Can you work across design/product/backend?</li> <li>Communication: Are you concise and structured in explaining your work?</li> </ul>"},{"location":"migration/developer/faang/#checklist-summary","title":"\u2705 Checklist Summary","text":"Skill Area Mastery Goal React + TypeScript Internal knowledge, performance, edge patterns System Design (Frontend) Scale, architecture, modularity Testing &amp; CI/CD Full testing stack, reliable deployment Next.js &amp; Modern Web Frameworks App router, RSC, serverless APIs Data Structures &amp; Algorithms LeetCode medium-hard, clean code under pressure DevOps &amp; Full-stack Awareness Build + deploy + observe production systems Interview Skills Practice, mock, structure your answers"},{"location":"migration/developer/fe-system-design/","title":"FE System Design","text":""},{"location":"migration/developer/fe-system-design/#frontend-system-design","title":"Frontend System Design","text":"<p>Mastering frontend system design and scalable architecture is one of the most valuable things you can do at the 5-year mark in your career \u2014 especially if you\u2019re targeting FAANG, tech lead roles, or want to build complex apps or platforms.</p> <p>Here\u2019s a clear, structured roadmap tailored to someone with 5 years of React/frontend experience:</p>"},{"location":"migration/developer/fe-system-design/#step-by-step-plan-to-master-frontend-system-design","title":"\ud83d\udd25 STEP-BY-STEP PLAN TO MASTER FRONTEND SYSTEM DESIGN","text":""},{"location":"migration/developer/fe-system-design/#1-understand-what-frontend-system-design-means","title":"\ud83d\udccd 1. Understand What \u201cFrontend System Design\u201d Means","text":"<p>At scale, frontend is not just writing components. It involves:</p> <ul> <li>Modularity: Designing components/systems that are reusable and maintainable</li> <li>Performance: Handling massive data (dashboards, feeds, real-time apps)</li> <li>Scalability: Supporting large teams, multiple platforms, complex UIs</li> <li>Consistency: Design systems, themes, tokens, i18n, a11y</li> <li>Dev Experience: Tooling, CI/CD, release processes</li> <li>Architecture: Feature-based folder structures, state management, routing strategies</li> </ul>"},{"location":"migration/developer/fe-system-design/#2-learn-core-architecture-concepts","title":"\ud83d\udcd8 2. Learn Core Architecture Concepts","text":"<p>Focus on how to structure large apps, not just how to code them.</p> <p>Architecture Topics:</p> <ul> <li> <p>Feature-based architecture</p> <ul> <li>vs. file-type-based structure</li> <li>Scaling folder structure for teams</li> </ul> </li> <li> <p>Monorepos vs Polyrepos</p> <ul> <li>Tools: Turborepo, Nx, pnpm workspaces</li> </ul> </li> <li> <p>Microfrontends</p> <ul> <li>Module Federation (Webpack 5), single-spa</li> <li>When and when not to use them</li> </ul> </li> <li> <p>Design Systems</p> <ul> <li>Tokens, themes, atomic design</li> <li>Reusable UI kits, Storybook</li> </ul> </li> <li> <p>Component Architecture</p> <ul> <li>Compound components</li> <li>Slots pattern</li> <li>Headless components (e.g., Radix UI, Headless UI)</li> </ul> </li> </ul>"},{"location":"migration/developer/fe-system-design/#3-study-real-world-scalable-patterns","title":"\ud83d\udcda 3. Study Real-World Scalable Patterns","text":"<p>\u2699\ufe0f Source Code to Explore:</p> <ul> <li>Next.js examples</li> <li>Vercel dashboard</li> <li>Shopify Polaris (design system)</li> <li>Chromatic UI library (used with Storybook)</li> <li>Open-source React apps (e.g. Cal.com, React-Admin)</li> </ul> <p>\ud83e\udde0 What to Look For:</p> <ul> <li>How they organize folders and code</li> <li>How they manage shared components and utilities</li> <li>How they scale routing, layouts, and features</li> </ul>"},{"location":"migration/developer/fe-system-design/#4-master-state-management-at-scale","title":"\ud83d\udcca 4. Master State Management at Scale","text":"<p>When apps grow, state becomes a core architectural concern.</p> <p>Local vs. global vs. server state:</p> <ul> <li>Use Zustand, Redux Toolkit, Jotai, or Recoil for global/shared state</li> <li>Use <code>React Query / TanStack Query / SWR</code> for server state</li> </ul> <p>Architectural concerns:</p> <ul> <li>Normalization</li> <li>Avoiding prop drilling</li> <li>Selector patterns (with Zustand or Recoil)</li> <li>Persisted state and optimistic updates</li> </ul>"},{"location":"migration/developer/fe-system-design/#5-optimize-performance-with-architecture-in-mind","title":"\ud83d\ude80 5. Optimize Performance with Architecture in Mind","text":"<p>Strategies to Learn:</p> <ul> <li>Code-splitting (<code>React.lazy</code>, <code>Suspense</code>, dynamic imports)</li> <li>Bundle optimization (tree-shaking, route-level chunks)</li> <li>Virtualization (e.g., react-window)</li> <li>Throttling, debouncing, memoization</li> <li>Lazy-loading images/assets intelligently</li> <li>Use of CDN, caching headers, and HTTP optimization</li> </ul> <p>Tools:</p> <ul> <li>Lighthouse, WebPageTest, Chrome DevTools</li> <li>React Profiler, Sentry, New Relic</li> </ul>"},{"location":"migration/developer/fe-system-design/#6-build-for-reliability-maintainability","title":"\ud83e\uddea 6. Build for Reliability &amp; Maintainability","text":"<p>Testing Architecture:</p> <ul> <li>Organize unit, integration, and E2E tests</li> <li>Setup with <code>Jest</code> + <code>RTL</code> + <code>Cypress</code> or <code>Playwright</code></li> <li>CI setup with GitHub Actions / CircleCI</li> </ul> <p>Error Handling:</p> <ul> <li>Global error boundaries</li> <li>Error logging (Sentry, LogRocket)</li> </ul> <p>Feature Flags &amp; Rollouts:</p> <ul> <li>LaunchDarkly, Unleash, or DIY feature flagging</li> <li>Canary releases for frontend</li> </ul>"},{"location":"migration/developer/fe-system-design/#7-practice-system-design-interviews-faang-style","title":"\ud83d\udee0 7. Practice System Design Interviews (FAANG-style)","text":"<p>Frontend engineers are now expected to design systems, not just answer LeetCode.</p> <p>Example Prompts:</p> <ul> <li>Design a component library for a company used across 5 teams</li> <li>Design a dashboard that can render 10k rows smoothly</li> <li>Design a real-time chat app</li> <li>Design a mobile + web responsive booking platform</li> </ul> <p>Learn to Discuss:</p> <ul> <li>Trade-offs: CSR vs SSR vs SSG</li> <li>Component vs utility libraries</li> <li>Reuse and maintenance</li> <li>Cross-team collaboration</li> </ul> <p>\ud83d\udcd8 Resources:</p> <ul> <li>Gaurav Sen \u2013 System Design YouTube</li> <li>ByteByteGo newsletter/book</li> <li>Frontend System Design videos by FrontendMastery and UI.dev</li> <li>Ex-FAANG interview prep books and mock interviews</li> </ul>"},{"location":"migration/developer/fe-system-design/#tools-tech-stack-to-get-familiar-with","title":"\ud83d\udee0 Tools &amp; Tech Stack to Get Familiar With","text":"Area Tools/Tech Component Architecture React, Storybook, Tailwind, CSS-in-JS State Management Zustand, Redux Toolkit, Recoil, React Query Monorepo / Modular Turborepo, Nx, pnpm Testing Jest, React Testing Library, Cypress/Playwright Microfrontends Module Federation, Single-spa, Parcel Performance Monitoring Sentry, LogRocket, Lighthouse, React Profiler"},{"location":"migration/developer/fe-system-design/#final-tips","title":"\u2705 Final Tips","text":"<ul> <li>Think like an architect: Not \u201chow do I write this component,\u201d but \u201chow will it scale to 20 devs, 100+ screens?\u201d</li> <li>Learn by doing: Build a large project, or refactor an old one with a scalable structure</li> <li>Mock system design interviews regularly</li> <li>Contribute to or analyze large open-source projects</li> <li>Read engineering blogs: Airbnb, Shopify, Vercel, Meta, Netflix</li> </ul>"},{"location":"migration/developer/fe-system-design/#videos","title":"VIDEOS","text":""},{"location":"migration/developer/github-copilot/","title":"Github Co-Pilot","text":"Action Command <code>Ctrl+Alt+I</code> Show &amp; Hide Github Copilot in Vs Code"},{"location":"migration/developer/github-copilot/#enablingdisabling-github-copilot","title":"Enabling/Disabling GitHub Copilot:","text":"<ol> <li> <p>Using Command Palette: \u2705</p> <ul> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on macOS) to open the Command Palette.</li> <li>Type <code>GitHub Copilot: Enable</code> and press <code>Enter</code>. This will enable GitHub Copilot if it's not already enabled.</li> </ul> </li> <li> <p>Through Settings:</p> <ul> <li>Open the settings (<code>Ctrl+,</code> or <code>Cmd+,</code> on macOS).</li> <li>Search for <code>GitHub Copilot</code> and uncheck or disable the <code>GitHub Copilot: Enable</code> setting.</li> </ul> </li> <li> <p>GitHub Copilot Sidebar:</p> <ul> <li>Click on the GitHub Copilot icon in the activity bar and disable it through the settings menu that appears.</li> </ul> </li> </ol> <ul> <li>GitHub Copilot in VS Code cheat sheet</li> </ul>"},{"location":"migration/developer/lead-fe/","title":"Lead / Indie","text":""},{"location":"migration/developer/lead-fe/#lead-frontend-engineering","title":"Lead Frontend Engineering","text":"<p>After 5 years of experience in frontend development with React, you're likely already comfortable with the core of React and general frontend principles. To level up and stay competitive (or move into more strategic, senior, or specialized roles), here are key topics you should consider mastering next:</p>"},{"location":"migration/developer/lead-fe/#advanced-react-frontend-engineering","title":"\ud83e\udde0 Advanced React &amp; Frontend Engineering","text":"<ol> <li> <p>React Architecture Patterns</p> <ul> <li>Atomic Design, Presentational vs. Container components</li> <li>Compound components, render props, HOCs</li> <li>Controlled vs uncontrolled components</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>React memoization: <code>useMemo</code>, <code>useCallback</code>, <code>React.memo</code></li> <li>Lazy loading, code splitting (<code>React.lazy</code>, <code>Suspense</code>)</li> <li>Virtualization (e.g., react-window)</li> </ul> </li> <li> <p>State Management at Scale</p> <ul> <li>Zustand, Jotai, Redux Toolkit, or Recoil</li> <li>Server-state management: React Query / TanStack Query, SWR</li> </ul> </li> <li> <p>React Server Components (RSC)</p> <ul> <li>Especially relevant in Next.js 13+ apps</li> </ul> </li> <li> <p>TypeScript Mastery</p> <ul> <li>Advanced types, generics, utility types</li> <li>Types for complex data structures, forms, APIs</li> </ul> </li> </ol>"},{"location":"migration/developer/lead-fe/#full-stack-backend-integration-expand-beyond-frontend","title":"\ud83c\udf10 Full-Stack &amp; Backend Integration (Expand Beyond Frontend)","text":"<ol> <li> <p>Next.js</p> <ul> <li>App Router, API routes, edge functions</li> <li>SSR, ISR, and static generation</li> <li>Authentication &amp; Authorization</li> </ul> </li> <li> <p>API Design &amp; Integration</p> <ul> <li>REST and GraphQL (Apollo, urql)</li> <li>OpenAPI / Swagger, Postman, etc.</li> </ul> </li> <li> <p>Backend Basics (optional, but valuable)</p> <ul> <li>Node.js + Express/NestJS</li> <li>Working with databases (SQL/NoSQL), ORMs (Prisma, TypeORM)</li> </ul> </li> </ol>"},{"location":"migration/developer/lead-fe/#testing-expertise","title":"\ud83e\uddea Testing Expertise","text":"<ol> <li> <p>Testing Tools</p> <ul> <li>Unit tests with Jest</li> <li>Component testing: React Testing Library</li> <li>E2E testing: Playwright, Cypress</li> </ul> </li> <li> <p>Test Strategy</p> <ul> <li>Mocking APIs, test coverage, CI pipelines</li> </ul> </li> </ol>"},{"location":"migration/developer/lead-fe/#uiux-design-systems","title":"\ud83c\udfa8 UI/UX &amp; Design Systems","text":"<ol> <li> <p>Design Systems</p> <ul> <li>Building reusable component libraries</li> <li>Storybook</li> <li>Theming, tokens, accessibility (a11y)</li> </ul> </li> <li> <p>CSS at Scale</p> <ul> <li>CSS-in-JS (styled-components, emotion)</li> <li>Tailwind CSS (utility-first), CSS modules, BEM</li> </ul> </li> </ol>"},{"location":"migration/developer/lead-fe/#devops-deployment-and-cicd","title":"\u2601\ufe0f DevOps, Deployment, and CI/CD","text":"<ol> <li> <p>Frontend Deployment</p> <ul> <li>Vercel, Netlify, Cloudflare Pages, AWS Amplify</li> <li>Docker basics</li> </ul> </li> <li> <p>CI/CD Pipelines</p> <ul> <li>GitHub Actions, GitLab CI, CircleCI</li> </ul> </li> </ol>"},{"location":"migration/developer/lead-fe/#soft-skills-leadership-for-seniorlead-roles","title":"\ud83d\ude80 Soft Skills &amp; Leadership (for Senior/Lead roles)","text":"<ol> <li>Code Reviews &amp; Mentoring</li> <li>Architecture Decisions</li> <li>Project Management Tools (Jira, Linear, etc.)</li> <li>Communication with Designers &amp; PMs</li> </ol>"},{"location":"migration/developer/lead-fe/#bonus-trends-to-watch-in-2025","title":"\ud83e\udded Bonus: Trends to Watch in 2025","text":"<ul> <li>AI-assisted UIs (integrating LLMs into apps)</li> <li>Edge computing &amp; edge rendering</li> <li>WebAssembly (WASM)</li> <li>Progressive Web Apps (PWAs)</li> <li>Internationalization (i18n) for global-scale apps</li> </ul>"},{"location":"migration/developer/lead-fe/#path","title":"Path","text":"<p>After 5 years of frontend experience, you're at a natural fork in the road \u2014 and choosing between Tech Lead or Indie Developer paths (among others) depends on your goals. Here\u2019s a breakdown of what each path really looks like, especially for someone with your background:</p>"},{"location":"migration/developer/lead-fe/#1-tech-lead-engineering-leadership-path","title":"\ud83e\udded 1. Tech Lead (Engineering Leadership Path)","text":""},{"location":"migration/developer/lead-fe/#what-it-is","title":"\ud83d\udd39 What it is:","text":"<p>A Tech Lead is responsible for the technical direction of a team or project. It's not just coding, but also:</p> <ul> <li>Making architectural decisions</li> <li>Guiding team members</li> <li>Collaborating with product/design/backend</li> <li>Ensuring code quality, velocity, and delivery</li> </ul> <p>You're still hands-on, but with added responsibilities.</p>"},{"location":"migration/developer/lead-fe/#skills-to-master","title":"\ud83e\uddf0 Skills to Master:","text":"<ul> <li>Architecture: Frontend system design, shared component libraries, microfrontends, performance optimization</li> <li>Leadership: Mentoring, code reviews, cross-functional planning</li> <li>Project Planning: Breaking down features, estimating timelines, risk management</li> <li>Communication: Translating business requirements into technical tasks, presenting trade-offs</li> <li>Collaboration: Working with product managers, designers, QA, and other teams</li> </ul>"},{"location":"migration/developer/lead-fe/#typical-roles","title":"\ud83d\ude80 Typical Roles:","text":"<ul> <li>Tech Lead</li> <li>Staff Engineer (later)</li> <li>Engineering Manager (if you go into people management)</li> </ul>"},{"location":"migration/developer/lead-fe/#ideal-for-you-if","title":"\u2705 Ideal for You If:","text":"<ul> <li>You enjoy mentoring and leading</li> <li>You want to work on high-impact, cross-team projects</li> <li>You're aiming for senior/staff roles at big companies (like FAANG)</li> </ul>"},{"location":"migration/developer/lead-fe/#2-indie-developer-indie-hacker-entrepreneur-path","title":"\ud83e\udded 2. Indie Developer / Indie Hacker (Entrepreneur Path)","text":""},{"location":"migration/developer/lead-fe/#what-it-is_1","title":"\ud83d\udd39 What it is:","text":"<p>An Indie Developer builds and launches their own products \u2014 solo or in a small team. Think:</p> <ul> <li>SaaS tools</li> <li>Web apps</li> <li>Mobile apps</li> <li>Chrome extensions, AI tools, etc.</li> </ul> <p>Your focus is on shipping, validating, and monetizing your work.</p>"},{"location":"migration/developer/lead-fe/#skills-to-master_1","title":"\ud83e\uddf0 Skills to Master:","text":"<ul> <li>Full-stack development: Build entire apps yourself</li> <li>Product thinking: Find user problems, build MVPs fast</li> <li>Marketing + Growth: SEO, Twitter/X, product launches (Product Hunt, etc.)</li> <li>Monetization: Stripe integration, pricing, subscriptions</li> <li>Deployment &amp; Ops: Vercel, Supabase, Firebase, Cloudflare, etc.</li> </ul>"},{"location":"migration/developer/lead-fe/#typical-outcomes","title":"\ud83d\ude80 Typical Outcomes:","text":"<ul> <li>Solo income from your apps/tools</li> <li>Acquisition (if something scales)</li> <li>Passive income while freelancing or contracting</li> <li>You build a portfolio and audience</li> </ul>"},{"location":"migration/developer/lead-fe/#ideal-for-you-if_1","title":"\u2705 Ideal for You If:","text":"<ul> <li>You like autonomy, experimenting, and building fast</li> <li>You\u2019re okay with risk and learning business/marketing</li> <li>You want to escape 9\u20135 long-term</li> </ul>"},{"location":"migration/developer/lead-fe/#comparison-table","title":"\ud83d\udd04 Comparison Table","text":"Aspect Tech Lead Indie Dev Focus Team/project execution Product building and monetization Teamwork High (cross-team coordination) Low (mostly solo/small team) Skill Depth Deep frontend + leadership Full-stack + product + growth skills Income Potential High salary + stock at FAANG Variable (can be <code>0</code> or <code>$$$</code>) Risk Low High (but flexible/freedom) Time to ROI Long (career ladder) Short (launch MVPs fast) Suitable For Engineers who want seniority and leadership Builders, tinkerers, entrepreneur-minded"},{"location":"migration/developer/lead-fe/#what-you-can-do-now-with-5-years-experience","title":"\u2705 What You Can Do Now (With 5 Years Experience)","text":""},{"location":"migration/developer/lead-fe/#if-youre-leaning-tech-lead","title":"\u27a4 If you're leaning Tech Lead:","text":"<ul> <li>Start mentoring junior devs or pair-programming</li> <li>Take ownership of larger features or architecture</li> <li>Read about frontend system design</li> <li>Collaborate more with product/design/backend</li> <li>Work on your communication skills and documentation</li> </ul>"},{"location":"migration/developer/lead-fe/#if-youre-leaning-indie-dev","title":"\u27a4 If you're leaning Indie Dev:","text":"<ul> <li>Pick a simple idea and build an MVP solo</li> <li>Learn backend (Supabase, Firebase, Node)</li> <li>Study Stripe, authentication, deployment</li> <li>Launch on Product Hunt, Reddit, Twitter, etc.</li> <li>Read \u201cThe Lean Startup\u201d or follow indie hackers like Pieter Levels, Arvid Kahl</li> </ul>"},{"location":"migration/developer/locally-running-ai/","title":"AI","text":""},{"location":"migration/developer/locally-running-ai/#locally-running-ai","title":"Locally Running AI","text":"<ul> <li>Download Ollama</li> <li>ollama, deepseek-r1, 8b</li> </ul>"},{"location":"migration/developer/locally-running-ai/#circular-dependency-and-recursion","title":"Circular Dependency and Recursion","text":"<p>Circular Dependency:</p> <ul> <li> <p>A circular dependency occurs when two or more modules, classes, or components depend on each other directly or indirectly, creating a cycle.</p> </li> <li> <p>For example, if <code>module A</code> depends on <code>module B</code>, and <code>module B</code> depends on <code>module A</code>, you have a circular dependency. This can make it difficult for the program to resolve dependencies because it ends up in an infinite loop of dependencies.</p> </li> </ul> <p>Recursion:</p> <ul> <li>Recursion is a programming technique where a function calls itself in order to solve a problem. It's commonly used for problems that can be broken down into smaller, similar sub-problems (e.g., tree traversals, factorials, etc.).</li> </ul> <p>For example, using a <code>pub/sub</code> model or an <code>observer</code> pattern can decouple components and help avoid cycles.</p> Key Differences <ol> <li> <p>Nature:</p> <ul> <li>Circular dependency is a structural problem in code (i.e., how different parts/modules of the program depend on each other).</li> <li>Recursion is a technique for solving problems by breaking them into smaller versions of the same problem.</li> </ul> </li> <li> <p>Outcome:</p> <ul> <li>Circular dependency often leads to errors or difficulties in the program\u2019s initialization or execution because of the cyclic references.</li> <li>Recursion leads to repeated function calls that can solve complex problems but must be handled carefully to avoid infinite recursion.</li> </ul> </li> <li> <p>Resolution:</p> <ul> <li>Circular dependencies can often be resolved by restructuring code or breaking the circular reference (e.g., by using dependency injection or introducing intermediate modules).</li> <li>Recursion can be resolved by ensuring there's a base case to prevent infinite recursion, or by switching to an iterative approach if recursion depth becomes an issue.</li> </ul> </li> </ol> <p>So, they are not the same thing. Circular dependencies are a problem with how parts of your program depend on each other, while recursion is a method of problem-solving that involves functions calling themselves.</p>"},{"location":"migration/developer/locally-running-ai/#reference","title":"Reference","text":"<ul> <li>Youtube: Learn DeepSeek-R1 in 30 Minutes: Watch BEFORE It's TOO LATE!</li> </ul>"},{"location":"migration/developer/micro-frontend/","title":"Micro Frontend","text":""},{"location":"migration/developer/micro-frontend/#micro-frontend","title":"Micro Frontend","text":"<p>nx.dev</p> <pre><code># pnpm\nnpx create-nx-workspace --pm pnpm\n\n# npm\nnpx create-nx-workspace\n</code></pre> <p></p> <p></p>"},{"location":"migration/developer/micro-frontend/#questions","title":"Questions","text":"<p><code>pnpm nx serve &lt;app-name&gt;</code> what is app-name is it inside the apps folder</p>"},{"location":"migration/developer/micro-frontend/#app-name","title":"app-name","text":"<p>Yes, you're correct! The <code>&lt;app-name&gt;</code> refers to the name of the application inside the <code>apps</code> folder in your Nx workspace.</p> <p>When you create a workspace with npx create-nx-workspace@latest, it typically generates an initial application (e.g., a React app, Angular app, etc.), and this application is placed in the apps directory.</p> <p>Here's how to find the <code>&lt;app-name&gt;</code>:</p> <ol> <li> <p>Go to the <code>apps</code> folder in your workspace:</p> <pre><code>cd apps\n</code></pre> </li> <li> <p>List the contents of the apps folder. You'll see a folder corresponding to the name of the app you created when setting up the workspace. For example:</p> <pre><code>ls\n</code></pre> <p>This could list something like:</p> <pre><code>-   `my-app` (if it's a React or Angular app)\n-   `my-first-app` (if that's the name you used during setup)\n</code></pre> </li> <li> <p>Use that app name with <code>pnpm nx serve</code>: If the app name inside the <code>apps</code> folder is <code>my-app</code>, you would run:</p> <pre><code>pnpm nx serve my-app\n</code></pre> </li> </ol> Additional Tip <p>If you\u2019re unsure about the app name, you can also check the <code>angular.json</code> (for Angular apps) or <code>workspace.json</code> or <code>nx.json</code> to verify the app's name and configuration.</p>"},{"location":"migration/developer/micro-frontend/#how-to-add-another-apps","title":"how to add another apps","text":"<p>To add another app to your Nx workspace, you can use the nx CLI to generate a new application. Nx provides a set of generators that allow you to create apps (and libraries) based on the framework you're using (React, Angular, Node, etc.).</p> <p>Here's how you can add another app:</p> <p>Step 1: Add a New Application</p> <ol> <li>Run the Nx generate command for your desired app type (React, Angular, etc.). You'll need to know what kind of app you want to create.</li> </ol> Example: Adding a React app <p>To add a new React app, run:</p> <pre><code>pnpm nx generate @nrwl/react:application my-second-app\n</code></pre> Example: Adding an Angular app <p>To add a new Angular app, run:</p> <pre><code>pnpm nx generate @nrwl/angular:application my-second-app\n</code></pre> <p>Replace <code>my-second-app</code> with the name of the new app you want to create.</p> <p>Step 2: Verify the New App is Added</p> <p>After running the command, you should see a new directory inside the <code>apps</code> folder with the name of your new app (e.g., <code>apps/my-second-app</code>).</p> <p>You should also see the app's configuration in <code>workspace.json</code> or <code>angular.json</code> (depending on the app type).</p> <p>Step 3: Install Dependencies</p> <p>Ensure you have installed the dependencies for the newly added app:</p> <pre><code>pnpm install\n</code></pre> <p>Step 4: Serve the New App</p> <p>Now that the app is added, you can serve it by running:</p> <pre><code>pnpm nx serve my-second-app\n</code></pre> <p>This will start the development server for your new app.</p> Optional: Explore Other App Types <p>You can generate various types of apps, depending on the framework you're using. Here are some examples of how you can generate apps:</p> <ul> <li> <p>React app:</p> <pre><code>pnpm nx generate @nrwl/react:application my-react-app\n</code></pre> </li> <li> <p>Angular app:</p> <pre><code>pnpm nx generate @nrwl/node:application my-node-app\n</code></pre> </li> <li> <p>Node app:</p> <pre><code>pnpm nx generate @nrwl/node:application my-node-app\n</code></pre> </li> <li> <p>Next.js app:</p> <pre><code>pnpm nx generate @nrwl/next:application my-next-app\n</code></pre> </li> </ul> <p>Step 5: Verify the New App in the <code>apps</code> Directory</p> <p>After generating the app, you can confirm that it's been added to the <code>apps</code> folder. You should see something like:</p> <pre><code>apps/\n  my-app/       (your first app)\n  my-second-app/ (new app)\n</code></pre> <p>Each app will have its own folder, and you can navigate to it and manage it separately.</p> <p> </p>"},{"location":"migration/developer/micro-frontend/#versions","title":"VERSIONS","text":"<ul> <li>20 version</li> <li>17 version, nx.dev</li> </ul>"},{"location":"migration/developer/micro-frontend/#major-changes","title":"MAJOR Changes","text":""},{"location":"migration/developer/micro-frontend/#scopes-changes","title":"SCOPES CHANGES","text":"<p>You're asking about the shift from <code>@nrwl</code> to<code>@nx</code> for the package scope.</p> <p>The <code>@nrwl</code> scope changed to <code>@nx</code> starting with Nx 15 (released in late 2022). This was part of the overall rebranding and streamlining of Nx, reflecting its evolution beyond its original Nrwl branding.</p> Key Details <ul> <li>Before Nx 15: Nx used the <code>@nrwl</code> scope for its plugins, e.g., <code>@nrwl/angular</code>, <code>@nrwl/react</code>, etc.</li> <li>From Nx 15: The Nx team transitioned to the <code>@nx</code> scope for many of the plugins, e.g., <code>@nx/angular</code>, <code>@nx/react</code>, etc.</li> </ul> Example <ul> <li> <p>Before Nx 15:</p> <pre><code>nx generate @nrwl/react:application my-app\n</code></pre> </li> <li> <p>After Nx 15:</p> <pre><code>nx generate @nx/react:application my-app\n</code></pre> </li> </ul> Why the Change? <p>This shift to the <code>@nx</code> scope was part of a broader rebranding to position <code>Nx</code> as a unified tool that is no longer specifically tied to Nrwl (the company that originally developed it). Instead, Nx as a framework is now branded more independently and is meant to reflect a more community-driven, open-source project.</p> <p>Migration Process:</p> <ul> <li>If you\u2019re using Nx 15 or later, you will need to update your dependencies to use the new <code>@nx</code> scope rather than <code>@nrwl</code>.</li> <li>Nx 15 made this transition smooth by providing backwards compatibility for a period of time, but you should migrate to the <code>@nx</code> scoped versions as soon as possible to stay up to date with the latest features and improvements.</li> </ul> Summary <ul> <li>Before Nx 15: Packages were under the <code>@nrwl</code> scope.</li> <li>Starting with Nx 15: The packages moved to the <code>@nx</code> scope, including plugins for various frameworks.</li> </ul>"},{"location":"migration/developer/micro-frontend/#command-changes","title":"COMMAND CHANGES","text":"<p>The change from using <code>@nrwl</code> commands to the unified <code>nx</code> commands started around Nx 12.</p> Key Timeline <ol> <li> <p>Nx 12 (Released in 2021):</p> <p>Nx 12 introduced the shift to a more integrated experience under the <code>nx</code> CLI. Previously, <code>@nrwl</code> was the scope for many of the tools, and commands like <code>nrwl</code> were used for tasks related to Angular, React, etc. Nx 12 marked the official merging of commands under the <code>nx</code> namespace, reducing the reliance on <code>nrwl</code>.</p> </li> <li> <p>Nx 13 and Nx 14:</p> <p>These versions further solidified the changes, with the <code>nx</code> command becoming the standard for all workspace-related activities (whether you're working with Angular, React, NestJS, etc.). The focus was on improving and expanding the capabilities of the unified nx CLI, rather than maintaining separate CLI tools for each framework.</p> </li> </ol> Example Transition <ul> <li> <p>Before Nx 12:</p> <pre><code>npx create-nx-workspace my-workspace --preset=angular\n</code></pre> <p>Or using the <code>nrwl</code> CLI directly:</p> <pre><code>nrwl generate @nrwl/angular:application my-app\n</code></pre> </li> <li> <p>After Nx 12:</p> <pre><code>nx generate @nrwl/angular:application my-app\n</code></pre> </li> </ul> <p>With Nx 12 and onward, <code>nx</code> became the standard for all workspace commands, and <code>@nrwl</code> is now used more in the context of plugins for specific frameworks (Angular, React, NestJS, etc.), but the main CLI command remains <code>nx</code>.</p> <p></p>"},{"location":"migration/developer/micro-frontend/#reference","title":"Reference","text":"<ul> <li>A Deep Dive into Micro Frontend Architecture with React.js</li> <li>Build a micro-frontend application with React</li> <li>Reddit: MicroFrontend Experience</li> <li> <p>React Microfrontend Guide</p> </li> <li> <p>nrwl</p> </li> <li>nx 16</li> <li> <p>Angular project with monorepo architecture using Nx workspace</p> </li> <li> <p>Streamlining a React Monorepo</p> </li> <li> <p>Speeding up the CircleCI Pipeline for a Nx Monorepo using Nx affected</p> </li> <li> <p>Scaling a Javascript Monorepo With Nx</p> </li> </ul>"},{"location":"migration/developer/mvp/","title":"MVP","text":""},{"location":"migration/developer/mvp/#overview","title":"Overview","text":"<p>Here are five common website categories:</p> <ol> <li> <p>E-commerce Websites: These are online stores where users can browse products and make purchases. Examples include Amazon, eBay, and Etsy.</p> </li> <li> <p>Blog Websites: These websites focus on written content, often organized in posts or articles. Examples include personal blogs, news outlets, and lifestyle websites like WordPress, Medium, or Huffington Post.</p> </li> <li> <p>Portfolio Websites: These sites are used to showcase an individual's or company's work, such as graphic design, photography, or web development. Examples include personal artist portfolios or creative agencies' websites.</p> </li> <li> <p>Educational Websites: These websites provide online learning resources, courses, or academic content. Examples include platforms like Khan Academy, Coursera, and Duolingo.</p> </li> <li> <p>Social Media Websites: These are platforms for users to connect, share content, and interact with others. Examples include Facebook, Instagram, and Twitter.</p> </li> </ol>"},{"location":"migration/developer/mvp/#can-we-resell-it","title":"Can we resell it ?","text":"<p>Yes, you can sell a website that you create, but there are a few things to keep in mind:</p> <ol> <li> <p>Market Demand: Before creating a website to sell, it's important to assess the demand for the type of website you're building. For instance, websites in high-demand niches like e-commerce, blogs, or portfolios can have more resale potential. If you can identify a niche with potential buyers, your chances of selling the site increase.</p> </li> <li> <p>Monetization Strategy: You should consider how the website will make money (e.g., through ads, affiliate marketing, products for sale, or subscriptions). A website with an established revenue stream is often more attractive to potential buyers.</p> </li> <li> <p>Design and Functionality: To make your website more valuable, it should be well-designed, functional, and user-friendly. It should also have good SEO (search engine optimization) to attract traffic.</p> </li> <li> <p>Domain and Branding: The domain name and overall branding can significantly impact a website's resale value. A short, memorable domain or a recognizable brand is worth more.</p> </li> <li> <p>Selling Platforms: There are platforms like Flippa, Empire Flippers, or Website Planet, where you can list your website for sale. Alternatively, you could market the website directly to potential buyers (such as small business owners or entrepreneurs).</p> </li> <li> <p>Legal Aspects: Ensure that you have full ownership of the website, including its domain, content, and design, and that you have a clear process for transferring all assets to the buyer. You may also want to include any necessary terms and conditions or contracts for the transaction.</p> </li> </ol> <p>Creating a high-quality, revenue-generating website can indeed lead to a profitable sale if done strategically.</p>"},{"location":"migration/developer/mvp/#mvp","title":"MVP","text":"<p>Creating a Minimum Viable Product (MVP) means building a basic version of a website that includes only the essential features needed to solve the core problem or offer the primary value. Here\u2019s a breakdown of how you could approach the MVP for each of the website categories listed above:</p>"},{"location":"migration/developer/mvp/#1-e-commerce-website-mvp","title":"1. E-commerce Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Product Listings: Display basic products with images, descriptions, and prices.</li> <li>Shopping Cart: A simple system to add and remove items.</li> <li>Checkout Process: Basic form for collecting user information and processing payments (can use platforms like Stripe or PayPal for simplicity).</li> <li>Search/Filter: Basic search bar to find products.</li> <li>User Accounts (optional): Basic user registration/login for order history, though this can be omitted initially.</li> </ul> <ul> <li>Shopify, WooCommerce (for WordPress), or custom-built with platforms like Wix or Squarespace.</li> </ul>"},{"location":"migration/developer/mvp/#2-blog-website-mvp","title":"2. Blog Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Home Page: Simple layout with blog post previews.</li> <li>Blog Post Creation: Basic interface for writing and publishing posts.</li> <li>Comments Section: Allow users to comment on blog posts.</li> <li>Categories/Tags: Organize posts into categories or with tags.</li> <li>Responsive Design: Ensure it\u2019s viewable on all devices.</li> </ul> <ul> <li>WordPress, Medium, or a custom-built solution with tools like Ghost or Squarespace.</li> </ul>"},{"location":"migration/developer/mvp/#3-portfolio-website-mvp","title":"3. Portfolio Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Showcase of Work: Display a limited number of portfolio pieces (e.g., images, descriptions, or case studies).</li> <li>About Me/Contact Info: Brief introduction about the creator or company with contact information.</li> <li>Portfolio Categories: Divide work into categories (e.g., photography, design, web development).</li> <li>Responsive Design: The portfolio should work well on both desktop and mobile.</li> </ul> <ul> <li>Squarespace, Wix, or custom-built (using platforms like WordPress, Webflow, or Elementor).</li> </ul>"},{"location":"migration/developer/mvp/#4-educational-website-mvp","title":"4. Educational Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Course Listings: Display a few sample courses or educational content.</li> <li>Lesson Pages: Simple pages for each lesson with video/text content.</li> <li>User Registration: Basic registration to access the content.</li> <li>Payment System (if paid): Integrate a payment gateway for paid courses.</li> <li>Basic Progress Tracker: A simple system to track course completion.</li> </ul> <ul> <li>Teachable, Thinkific, WordPress with LearnDash, or a custom solution using tools like Moodle.</li> </ul> <ol> <li>Social Media Website MVP</li> </ol> Core FeaturesTools/Platforms <ul> <li>User Registration/Login: Simple user sign-up with email and password.</li> <li>Profile Creation: Allow users to create basic profiles with images and information.</li> <li>Post/Feed System: Users can post text, images, or videos, and others can interact (like, comment).</li> <li>Friend/Follow Feature: Simple friend request or follow system to build connections.</li> <li>Basic Notifications: Notify users about interactions (likes, comments, followers).</li> </ul> <ul> <li>Custom-built with frameworks like <code>React</code>, <code>Node.js</code>, or use no-code platforms like Bubble.</li> </ul>"},{"location":"migration/developer/mvp/#general-steps-to-build-an-mvp","title":"General Steps to Build an MVP:","text":"<ol> <li> <p>Research &amp; Define the Core Features: Prioritize the essential features for each website category. You don\u2019t need everything at the start\u2014just the key functions that allow the site to fulfill its purpose.</p> </li> <li> <p>Choose a Platform or Technology:</p> <ul> <li>For quick prototyping, use website builders or CMS (Content Management Systems) like <code>WordPress</code>, <code>Wix</code>, <code>Squarespace</code>, or <code>Shopify</code> for e-commerce.</li> <li>For more control and custom development, consider using <code>React</code>, <code>Node.js</code>, <code>Django</code>, or <code>Ruby on Rails</code>.</li> </ul> </li> <li> <p>Design a Simple UI/UX: Focus on clean, simple designs that prioritize usability. The goal is to make it easy for users to understand how to interact with the site.</p> </li> <li> <p>Launch &amp; Collect Feedback: Once your MVP is live, gather user feedback to understand what works and what needs improvement. You can enhance your website over time based on actual user needs.</p> </li> <li> <p>Iterate: Use the feedback to improve your website, adding more features or refining existing ones.</p> </li> </ol> <p>Building an MVP for each of these website categories will allow you to test the market and gather feedback quickly without spending too much time or resources. The key to a successful MVP is to focus on the core functionality that delivers value to the user while avoiding unnecessary complexity.</p>"},{"location":"migration/developer/think-architect/","title":"Think Architect","text":""},{"location":"migration/developer/think-architect/#think","title":"THINK","text":"<p>Think like an architect: Not \u201chow do I write this component,\u201d but \u201chow will it scale to 20 devs, 100+ screens?</p> <p>Great follow-up \u2014 this is where the real mindset shift happens.</p> <p>At 5 years in, you're likely very good at writing components, fixing bugs, building features. Now, to think like a frontend architect, you need to shift from local thinking to system thinking.</p>"},{"location":"migration/developer/think-architect/#the-mindset-shift-developer-architect","title":"\ud83e\udde0 THE MINDSET SHIFT: Developer \u2192 Architect","text":"Junior/Mid Dev Frontend Architect \u201cHow do I build this button?\u201d \u201cHow do we scale a design system used by 5 teams?\u201d \u201cHow do I fix this bug?\u201d \u201cHow do we prevent this bug category forever?\u201d \u201cHow do I fetch this data?\u201d \u201cHow do we manage server state across the app?\u201d \u201cHow do I use Redux?\u201d \u201cDo we even need Redux here?\u201d \u201cWhere do I put this component?\u201d \u201cWhat folder structure scales to 10 teams?\u201d"},{"location":"migration/developer/think-architect/#how-to-think-like-a-frontend-architect-practical-steps","title":"\u2705 HOW TO THINK LIKE A FRONTEND ARCHITECT (PRACTICAL STEPS)","text":""},{"location":"migration/developer/think-architect/#1-zoom-out-always-ask-what-if-this-tripled-in-size","title":"1. Zoom Out: Always Ask \u201cWhat If This Tripled in Size?\u201d","text":"<p>Before writing anything, ask:</p> <ul> <li>What happens if this feature has to scale from 1 use case to 10?</li> <li>What if 10 other devs need to work in this part of the code?</li> <li>What if a different team has to reuse this component?</li> </ul> <p>Start seeing your code as part of a bigger ecosystem, not an isolated file.</p>"},{"location":"migration/developer/think-architect/#2-favor-systems-over-solutions","title":"2. Favor Systems over Solutions","text":"<p>Think in systems, not just solutions:</p> Concern Example Styling system Tailwind, tokens, themes, dark mode State system Global vs. local, client vs. server state Error system Boundaries, Sentry, user-friendly fallback Form system Form builder, validation schema, reusability Component system Headless components, design tokens, variants Performance system Lazy loading, memoization, virtualization <p>Architect\u2019s mindset: \u201cHow do we create a consistent, scalable, reusable solution to this class of problems?\u201d</p>"},{"location":"migration/developer/think-architect/#3-design-for-collaboration","title":"3. Design for Collaboration","text":"<p>Ask:</p> <ul> <li>Can someone understand this component in 5 minutes?</li> <li>Is this API intuitive and flexible?</li> <li>Are props named clearly and consistently?</li> <li>Is the folder structure obvious?</li> <li>Could another team use this without talking to me?</li> </ul> <p>Architects optimize for team velocity, not just code output.</p>"},{"location":"migration/developer/think-architect/#4-design-for-change","title":"4. Design for Change","text":"<p>Assume everything will change:</p> <ul> <li>Business requirements</li> <li>APIs</li> <li>Design systems</li> <li>State sources</li> </ul> <p>So:</p> <ul> <li>Abstract external APIs</li> <li>Avoid tight coupling</li> <li>Use composition over inheritance</li> <li>Use feature flags or config-driven behavior</li> </ul>"},{"location":"migration/developer/think-architect/#5-pick-the-right-abstractions-and-avoid-over-abstracting","title":"5. Pick the Right Abstractions (and Avoid Over-Abstracting)","text":"<p>Architects choose what NOT to abstract as much as what to abstract.</p> <p>Bad example:</p> <pre><code>&lt;Button\n  variant=\"blue\"\n  shape=\"rounded\"\n  size=\"small\"\n  mode=\"superMode\"\n  shadow=\"extra\"\n/&gt;\n</code></pre> <p>Good example:</p> <pre><code>&lt;Button intent=\"primary\" size=\"sm\" /&gt;\n</code></pre> <p>Ask:</p> <ul> <li>Is this abstraction helping 5 people now or confusing 20 later?</li> <li>Is it future-proof or future-hostile?</li> </ul>"},{"location":"migration/developer/think-architect/#6-start-writing-docs-seriously","title":"6. Start Writing Docs (Seriously)","text":"<p>Writing documentation is architectural thinking in disguise:</p> <ul> <li>API of components</li> <li>Decisions behind folder structure</li> <li>Trade-offs in state management</li> <li>Edge cases and patterns</li> </ul> <p>Start small: write a README for every new feature or shared component.</p>"},{"location":"migration/developer/think-architect/#7-ask-how-will-this-break-in-production","title":"7. Ask \u201cHow Will This Break in Production?\u201d","text":"<p>Architects think ahead:</p> <ul> <li>What happens if the API returns an unexpected shape?</li> <li>What if the component mounts without a required prop?</li> <li>What if the user is on a slow device or poor network?</li> <li>What\u2019s the failure mode? (e.g., empty state, loading fallback, retry)</li> </ul>"},{"location":"migration/developer/think-architect/#architects-toolset-to-practice","title":"\ud83d\udee0 Architect\u2019s Toolset to Practice","text":"Skill What to Do Folder structure Try feature-based folders in your next project Component library Build a design system using Storybook State management Compare Redux Toolkit vs Zustand vs React Query System documentation Write a Notion doc or README for your decisions Code reviews Review PRs with architectural feedback Mock interviews Do a frontend system design mock"},{"location":"migration/developer/think-architect/#daily-thought-habits","title":"\ud83c\udfaf Daily Thought Habits","text":"<p>Adopt these questions in your daily work:</p> <ul> <li>\u2705 \u201cCan someone else understand this in 2 minutes?\u201d</li> <li>\u2705 \u201cWill this scale to 10x use cases?\u201d</li> <li>\u2705 \u201cIs this code easy to test, debug, and extend?\u201d</li> <li>\u2705 \u201cWhat assumptions am I making?\u201d</li> <li>\u2705 \u201cWhat could go wrong in production?\u201d</li> </ul>"},{"location":"migration/developer/think-architect/#what-you-can-do-next","title":"\ud83d\udc63 What You Can Do Next","text":"<ol> <li>Pick a real-world app idea and design it as if a team of 20 will build it \u2014 folder structure, state system, auth, forms, data fetching.</li> <li>Refactor an old project with scalable architecture in mind.</li> <li>Contribute to a design system or large open-source React app.</li> <li>Read engineering blogs from Meta, Shopify, Airbnb (they often discuss architectural decisions).</li> <li>Practice frontend system design questions (I can give you some to simulate an interview if you want).</li> </ol>"},{"location":"migration/developer/website-package/","title":"Website Package","text":"<p>The Essential Guide to Creating Popular Websites: Top 5 Categories to Explore</p>"},{"location":"migration/developer/website-package/#overview","title":"Overview","text":""},{"location":"migration/developer/website-package/#3-overall-planning-for-building-and-selling-websitesapps","title":"3. Overall Planning for Building and Selling Websites/Apps","text":"<p>Step 1: Idea Validation</p> <ul> <li>Research Your Niche: Identify your target market and ensure there\u2019s demand for your product or service. Use tools like Google Trends, keyword research, and competitor analysis.</li> <li>MVP (Minimum Viable Product): Build a simplified version of your website or app to validate the idea and gather feedback from early users.</li> </ul> <p>Step 2: Development and Design</p> <ul> <li>Website Development: Use platforms like WordPress (for blogs or e-commerce), or custom code using frameworks like React (for apps) or Laravel (for websites).</li> <li>App Development: Use app builders (like Flutter, React Native) or develop natively for iOS/Android.</li> <li>UI/UX Design: Focus on creating an intuitive, clean design that enhances the user experience.</li> </ul> <p>Step 3: Marketing and Growth</p> <ul> <li>SEO (Search Engine Optimization): Optimize your website for search engines to attract organic traffic.</li> <li>Social Media Marketing: Leverage platforms like Instagram, TikTok, Facebook, and Twitter to attract users.</li> <li>Paid Ads: Invest in Google Ads, Facebook Ads, or influencer marketing for fast growth.</li> <li>Content Marketing: Publish valuable content that solves problems for your target audience.</li> </ul> <p>Step 4: Monetization</p> <ul> <li>Once you have a user base, implement one or more of the monetization strategies mentioned earlier (ads, affiliate marketing, subscriptions, etc.).</li> </ul> <p>Step 5: Selling the Website or App</p> <ul> <li>When to Sell: Typically, you should look to sell after achieving steady traffic, solid revenue, and a proven business model.</li> <li> <p>Where to Sell:</p> <ul> <li>Flippa: A marketplace for buying and selling websites.</li> <li>Empire Flippers: A broker that specializes in buying and selling established websites.</li> <li>MicroAcquire: A marketplace for buying and selling startups and small businesses.</li> </ul> </li> <li> <p>How to Sell:</p> <ul> <li>Prepare financials: Ensure you have clear records of revenue, user statistics, and expenses.</li> <li>Get an appraisal: Use valuation tools or consult with brokers to estimate your website's worth.</li> <li>Sell to a buyer: Negotiate the sale and transfer assets (domain, hosting, intellectual property, etc.).</li> </ul> </li> </ul>"},{"location":"migration/developer/website-package/#question","title":"Question","text":"<p>Can i sell website or app ?</p> <p>What is <code>x-www-form-urlencoded</code> format?</p> <p><code>x-www-form-urlencoded</code> is one of the most common content types used when submitting forms on the web. It is typically used for simple form submissions, such as login forms, where the form data is sent as a key-value pair string, and the pairs are URL-encoded.</p> <p>Can we use any package to handle this in React?</p> <p>Yes, there are several ways to handle the creation of <code>x-www-form-urlencoded</code> data in React. While the <code>URLSearchParams</code> API is built into JavaScript and works well for most use cases, you can also use <code>third-party</code> packages for more convenience and better support in complex scenarios.</p> <p>Here are a few packages you might consider:</p> <ul> <li>URLSearchParams (Native)</li> <li>form-data (For Node.js / Backend)</li> <li>qs (Query String)</li> <li>[query-string Package] (#)</li> </ul> Why Use query-string? <p>The query-string package is a lightweight alternative to URLSearchParams and provides the following benefits:</p> <ul> <li>Easy Handling of Arrays/Objects: While <code>URLSearchParams</code> can handle simple key-value pairs, query-string offers better support for serializing nested objects and arrays if needed (though in your case, simple key-value pairs are sufficient).</li> <li>Better Customization: <code>query-string</code> provides additional options for encoding and formatting your query strings.</li> </ul> <ul> <li>Setting up Redux Tool Kit (RTK), Redux and Redux-Persist for React.</li> </ul> <pre><code>import { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { authApi } from \"@features/auth/services/authApi\";\nimport authReducer from \"@features/auth/services/authSlice\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\n\n// Persist config for Redux persist\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  // whitelist: [\"auth\"],  // Optional: use whitelist if you want to persist specific slices\n};\n\n// Combine reducers\nconst rootReducer = combineReducers({\n  auth: authReducer, // We use authReducer here (not persistedAuthReducer directly)\n  [authApi.reducerPath]: authApi.reducer,\n});\n\n// Create persisted reducer for auth slice\nconst persistedAuthReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedAuthReducer, // Use persistedAuthReducer as the rootReducer\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(authApi.middleware), // Add API middleware for handling authApi actions\n});\n\n// Persist store\nexport const persistor = persistStore(store);\n</code></pre> <pre><code>pnpm add jwt-decode\n</code></pre> <ul> <li>Online JWT Decoder</li> </ul> <p>Steps to Integrate Token Refresh Logic with <code>axiosBaseQuery</code>:</p> <ul> <li>Extend <code>axiosBaseQuery</code> to handle re-authentication (token refresh) logic.</li> <li>Use the updated <code>axiosBaseQuery</code> in your API slice.</li> <li>Ensure token management and logout actions are handled.</li> </ul> <pre><code>import axiosInstance from \"./axiosInstance\";\nimport { tokenReceived, loggedOut } from \"./authSlice\"; // Import your actions\nimport { CONFIG } from \"@shared/utils/config\"; // Ensure your config is correct\n\n// Modify axiosBaseQuery to handle token refresh\nconst axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, data, params }, api, extraOptions) =&gt; {\n    try {\n      const result = await axiosInstance({\n        url: baseUrl + url,\n        method,\n        data,\n        params,\n      });\n      return { data: result.data };\n    } catch (axiosError) {\n      // If we get a 401 error, try refreshing the token\n      if (axiosError.response?.status === 401) {\n        const refreshResult = await axiosInstance({\n          url: baseUrl + \"/auth/refreshToken\", // Adjust to your refresh token endpoint\n          method: \"POST\",\n        });\n\n        if (refreshResult.data) {\n          // Dispatch tokenReceived action with the new token\n          api.dispatch(tokenReceived(refreshResult.data)); // Ensure correct token structure\n\n          // Retry the original request with the new token\n          const retryResult = await axiosInstance({\n            url: baseUrl + url,\n            method,\n            data,\n            params,\n            headers: {\n              Authorization: `Bearer ${refreshResult.data.token}`, // Adjust token header if needed\n            },\n          });\n\n          return { data: retryResult.data };\n        } else {\n          // If the refresh fails, dispatch loggedOut action\n          api.dispatch(loggedOut());\n          return {\n            error: {\n              status: 401,\n              data: \"Unable to refresh token. Logged out.\",\n            },\n          };\n        }\n      }\n\n      // Return error if it's not a 401\n      const err = axiosError.response?.data || axiosError.message;\n      return { error: { status: axiosError.response?.status, data: err } };\n    }\n  };\n\nexport default axiosBaseQuery;\n</code></pre>"},{"location":"migration/dockerhub/overview/","title":"Intro","text":""},{"location":"migration/dockerhub/overview/#overview","title":"Overview","text":"src/mocks/handlers.js<pre><code>import { http, HttpResponse } from \"msw\";\n\nconst getRandomBoolean = () =&gt; Math.random() &lt; 0.5;\nconst getRandomRate = () =&gt; (Math.random() * 99 + 1).toFixed(2);\n\nexport const handlers = [\n  // HERE\n  http.get(\"https://example.com/api/newLogoApi/:id\", (req) =&gt; {\n    // Extract 'id' from query parameters if passed as ?id=...\n    const { id } = req.params;\n\n    console.log(\"MOCKS ID: \", id);\n\n    if (id === \"6eaea0e1-66e2-4d2f-b628-08dd7c135bd6\") {\n      return HttpResponse.json({\n        id: \"6eaea0e1-66e2-4d2f-b628-08dd7c135bd6\",\n        title: \"Prabhu\",\n        logo: \"/attachments/profile-pictures/be9b1e9e-0212-42c8-bfd2-75702092207c.PNG\",\n      });\n    }\n    // Return 404 or some error if id not found\n    return new HttpResponse(null, { status: 404 });\n  }),\n];\n</code></pre> src/features/internals/services/chunkApi.js<pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\n\nexport const chunkApi = createApi({\n  reducerPath: \"chunkApi\",\n  // baseQuery: fetchBaseQuery({\n  //   baseUrl: \"https://bk-notify.info.com.np/\",\n  // }),\n  // baseQuery: axiosBaseQuery({\n  //   // baseUrl: CONFIG.NOTFICATION_URL,\n  //   baseUrl: CONFIG.API_BASE_URL,\n  // }),\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://example.com/\" }),\n  endpoints: (builder) =&gt; ({\n    getUnauthorized: builder.query({\n      query: () =&gt; \"/unauthorized\",\n    }),\n\n    postMessage: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"SignalRs/notify\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n    }),\n\n    getWebsiteLogo: builder.query({\n      query: ({ id }) =&gt; {\n        return {\n          url: `api/newLogoApi/${id}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n      keepUnusedDataFor: 0,\n\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Forex deal.\",\n            1\n          );\n        }\n      },\n    }),\n    postUserProfilePicture: builder.mutation({\n      query: ({ formData, id }) =&gt; {\n        console.log(\"args: \", formData);\n        return {\n          url: `FileStorages/UploadProfilePicture?userId=${id}`,\n          method: HTTP_METHODS.POST,\n          data: formData,\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        };\n      },\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n          notify(\n            \"success\",\n            \"topRight\",\n            \"Success\",\n            \"Profile picture uploaded successfully.\",\n            3\n          );\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during profile picture upload.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetUnauthorizedQuery,\n  usePostMessageMutation,\n  usePostUserProfilePictureMutation,\n  useGetWebsiteLogoQuery,\n} = chunkApi;\n</code></pre>"},{"location":"migration/dockerhub/overview/#major-bug-issue-solved","title":"Major Bug Issue Solved","text":"Bug <pre><code>Uncaught (in promise) TypeError: e is undefined endpointDefinitions.ts\n\nUncaught (in promise) TypeError: endpointDefinitions[action.meta.arg.endpointName] is undefined buildThunk.ts\n</code></pre> chunkApi.js<pre><code>import { chunkApi } from \"@features/internals/services/chunkApi\";\n\nexport const chunkApi = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://example.com/\" }),\n\n  // ISSUE HERE\n  reducerPath: \"api\",\n\n  // SOLVED\n  //   reducerPath: \"chunkApi\",\n});\n</code></pre> store/store.js<pre><code>const rootReducer = combineReducers({\n  [chunkApi.reducerPath]: chunkApi.reducer,\n});\n\n//\n\nexport const store = configureStore({\n  reducer: persistedAuthReducer,\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(chunkApi.middleware),\n});\n</code></pre> Bug <pre><code>// api\nexport const chunkApi = createApi({\n    baseQuery: fetchBaseQuery({ baseUrl: \"https://example.com/\" }),\n    reducerPath: \"api\",\n});\n\n// store\nimport { chunkApi } from \"@features/internals/services/chunkApi\";\n\nconst rootReducer = combineReducers({\n    [chunkApi.reducerPath]: chunkApi.reducer,\n});\n\nexport const store = configureStore({\n    reducer: persistedAuthReducer,\n    middleware: (getDefaultMiddleware) =&gt;\n        getDefaultMiddleware({\n            serializableCheck: {\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        }).concat(chunkApi.middleware),\n    });\n</code></pre> Solved <pre><code>// api\nexport const chunkApi = createApi({\n    baseQuery: fetchBaseQuery({ baseUrl: \"https://example.com/\" }),\n\n    // UPDATED to api to chunkApi\n    reducerPath: \"chunkApi\",\n});\n\n// store\nimport { chunkApi } from \"@features/internals/services/chunkApi\";\n\nconst rootReducer = combineReducers({\n    [chunkApi.reducerPath]: chunkApi.reducer,\n});\n\nexport const store = configureStore({\n    reducer: persistedAuthReducer,\n    middleware: (getDefaultMiddleware) =&gt;\n        getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n        }).concat(chunkApi.middleware),\n});\n</code></pre> \ud83d\udca1 What is <code>reducerPath</code> in RTK Query? <ul> <li>The <code>reducerPath</code> defines the key in your Redux store under which RTK Query will store its cache and metadata.</li> <li>If you set <code>reducerPath: \"api\"</code> in your <code>createApi()</code>, then Redux expects to find the RTK Query state under <code>state.api</code>.</li> <li>If you use <code>reducerPath: \"chunkApi\"</code>, it stores the data under <code>state.chunkApi</code>.</li> </ul>"},{"location":"migration/dockerhub/overview/#why-changing-reducerpath-to-chunkapi-made-it-work","title":"\u2705 Why changing reducerPath to \"chunkApi\" made it work","text":"<p>You are assigning the reducer to your store like this:</p> <pre><code>combineReducers({\n  [chunkApi.reducerPath]: chunkApi.reducer,\n});\n</code></pre> <p>So if you set <code>reducerPath: \"chunkApi\"</code>, the reducer is mounted at <code>state.chunkApi</code>, and everything lines up correctly.</p> <p>But if <code>reducerPath</code> is <code>\"api\"</code>, and you still name your slice or API <code>chunkApi</code>, that mismatch between name and path causes confusion unless you're consistent.</p> \u2705 What You Should Do (2 Correct Options) <p>You can go with either of these setups \u2014 but they must be consistent.</p> <p>\u2705 Option 1: Keep <code>reducerPath: \"api\"</code> (default &amp; recommended if only one API)</p> <pre><code>// chunkApi.ts\nexport const chunkApi = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com/' }),\n    endpoints: (builder) =&gt; ({\n        // ...endpoints\n    }),\n});\n\n// store.ts\nconst rootReducer = combineReducers({\n    [chunkApi.reducerPath]: chunkApi.reducer, // == \"api\"\n    // other reducers...\n});\n</code></pre> <p>Then RTK Query will store its cache under <code>state.api</code>.</p> <p>\u2705 Option 2: Use custom <code>reducerPath: \"chunkApi\"</code></p> <p>If you prefer the path <code>state.chunkApi</code>, just set it explicitly:</p> <pre><code>// chunkApi.ts\nexport const chunkApi = createApi({\n    reducerPath: 'chunkApi',\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://example.com/' }),\n    endpoints: (builder) =&gt; ({\n        // ...endpoints\n    }),\n});\n\n// store.ts\nconst rootReducer = combineReducers({\n    [chunkApi.reducerPath]: chunkApi.reducer, // == \"chunkApi\"\n    // other reducers...\n});\n</code></pre> <p>Now everything will correctly be available under <code>state.chunkApi</code>.</p> \ud83e\udde0 Summary \ud83d\udd0d If You Want \u2705 Do This Store RTK Query data under <code>state.api</code> Use <code>reducerPath: 'api'</code> Store it under <code>state.chunkApi</code> (custom) Use <code>reducerPath: 'chunkApi'</code> Match RTK Query state with reducer key Make sure <code>[chunkApi.reducerPath]: chunkApi.reducer</code> is correct Avoid <code>endpointDefinitions[...] is undefined</code> Ensure the <code>reducerPath</code> matches the key in <code>combineReducers()</code> <pre><code>{/* src=\"http://bk-api.info.com.np/api/filestorages/GetUserProfilePicture/1b06a918-4e81-4c57-138d-08dd41b2aa8d.png\" */}\n{/* {console.log(\"TEST: \",{CONFIG.BASE_API_URL}/attachments/profile-pictures/be9b1e9e-0212-42c8-bfd2-75702092207c.PNG\")} */}\n{/* profilePictureUrl   \"http://bk-api.info.com.np/api/filestorages/GetUserProfilePicture/1b06a918-4e81-4c57-138d-08dd41b2aa8d\" */}\n</code></pre>"},{"location":"migration/expo/","title":"Linux","text":""},{"location":"migration/expo/apk/","title":"APK","text":""},{"location":"migration/expo/apk/#apk","title":"APK","text":"<p>Yes, you can create a React Native APK using VS Code and Expo, but there are a few important caveats depending on your goals and the kind of Expo project you're using.</p>"},{"location":"migration/expo/apk/#two-types-of-expo-workflows","title":"\ud83d\udd27 Two Types of Expo Workflows","text":""},{"location":"migration/expo/apk/#1-managed-workflow-recommended-for-expo-beginners","title":"1. Managed Workflow (Recommended for Expo Beginners)","text":"<p>If you created your app using <code>expo init</code>, you\u2019re likely using the managed workflow.</p> <p>You can generate an APK without Android Studio by using Expo's EAS Build service.</p> <p>Steps to Generate APK (Managed Workflow):</p> <ol> <li> <p>Install EAS CLI:</p> <pre><code>npm install -g eas-cli\n</code></pre> </li> <li> <p>Login to Expo:</p> <pre><code>eas login\n</code></pre> </li> <li> <p>Configure EAS Build:</p> <pre><code>eas build:configure\n</code></pre> </li> <li> <p>Build APK:</p> <pre><code>eas build -p android --profile preview\n</code></pre> <p>Use <code>--profile</code> production if you want a production build.</p> </li> <li> <p>After the build completes, Expo will give you a download link for the APK (you\u2019ll get a <code>.apk</code> or <code>.aab</code> file depending on the config).</p> </li> </ol>"},{"location":"migration/expo/apk/#apk-vs-aab","title":"\ud83d\udce6 APK vs AAB","text":"<ul> <li><code>APK</code>: Directly installable on devices.</li> <li><code>AAB</code> (Android App Bundle): Recommended for Play Store distribution.</li> </ul> <p>You can specify APK output like this:</p> <pre><code>eas build -p android --profile preview --local  # For local builds (more advanced)\n</code></pre> <p>For local builds, you need Android Studio + Android SDKs installed.</p>"},{"location":"migration/expo/apk/#if-youre-using-the-bare-workflow-not-expo-managed","title":"\ud83d\uded1 If You're Using the Bare Workflow (Not Expo Managed)","text":"<p>You\u2019ll need:</p> <ul> <li>Android Studio</li> <li>Native Android project configuration</li> </ul> <p>This goes beyond using just Expo and VS Code.</p>"},{"location":"migration/expo/apk/#summary","title":"\u2705 Summary","text":"Feature Expo + VS Code Android Studio Needed? Build APK with Expo Managed Workflow \u2705 Yes \u274c No (uses EAS Build) Build APK Locally (no cloud) \u26a0\ufe0f Yes* \u2705 Yes (requires Android Studio) Bare Workflow / Custom Native Code \u274c Not directly \u2705 Yes"},{"location":"migration/expo/apk/#useful-commands","title":"\ud83d\udd17 Useful Commands","text":"<pre><code>expo init my-app             # Create new app\ncd my-app\nexpo start                  # Run app in development\neas build:configure         # Configure EAS\neas build -p android        # Build APK/AAB\n</code></pre> <p>Let me know if you want a step-by-step guide or help creating your <code>eas.json</code> config.</p>"},{"location":"migration/expo/eas/","title":"EAS","text":""},{"location":"migration/expo/eas/#eas","title":"EAS","text":"<p>EAS stands for Expo Application Services, and it's a suite of build, update, and submission services provided by Expo to help you manage and deploy your React Native apps more efficiently.</p> <p>Here's a breakdown of what EAS is and why you might need it:</p>"},{"location":"migration/expo/eas/#what-is-eas","title":"\ud83d\udd27 What is EAS?","text":"<p>EAS (Expo Application Services) includes:</p> <ol> <li> <p>EAS Build</p> <p>Cloud-based service to build your iOS and Android apps (like <code>.apk</code>, <code>.aab</code>, or <code>.ipa</code>) without needing Xcode or Android Studio locally.</p> </li> <li> <p>EAS Submit</p> <p>Automatically submits your built apps to the App Store or Google Play.</p> </li> <li> <p>EAS Update</p> <p>Enables over-the-air (OTA) updates to your app \u2014 push updates to your users without going through the app store review process.</p> </li> <li> <p>EAS CLI</p> <p>A command-line tool to interact with all these services easily.</p> </li> </ol>"},{"location":"migration/expo/eas/#why-do-you-need-eas","title":"\ud83d\ude80 Why do you need EAS?","text":"<ol> <li> <p>Build apps in the cloud</p> <ul> <li>You don\u2019t need a macOS computer to build for iOS anymore.</li> <li>No need to install and configure Android Studio or Xcode.</li> <li>Builds happen on Expo\u2019s servers, saving you time and setup hassle.</li> </ul> </li> <li> <p>Faster deployment &amp; iteration</p> <ul> <li>Use EAS Update to instantly push JS and asset changes without waiting for app store reviews.</li> <li>Useful for hotfixes or small updates.</li> </ul> </li> <li> <p>Easier submission</p> <p>With EAS Submit, you can automate submission to the Play Store or App Store directly from the CLI.</p> </li> <li> <p>Support for custom/native code</p> <p>Unlike the old ====managed workflow====, EAS supports ====bare workflow==== and apps with custom native code (e.g., custom modules, SDKs, etc.)</p> </li> </ol>"},{"location":"migration/expo/eas/#do-you-need-it","title":"\ud83d\udd0d Do you need it?","text":"<p>Not always. You might not need EAS if:</p> <ul> <li>You\u2019re just prototyping or developing and using the classic Expo Go app.</li> <li>You\u2019re not using custom native code and are okay with the older <code>expo build:*</code> commands (though those are deprecated).</li> </ul> <p>But you do need EAS if:</p> <ul> <li>You want to build production-ready apps.</li> <li>You want to use the latest Expo SDKs (Expo SDK 46+ fully supports EAS).</li> <li>You have custom native code.</li> <li>You want OTA updates with fine control.</li> </ul>"},{"location":"migration/expo/eas/#summary","title":"\ud83d\udca1 Summary","text":"Feature Without EAS With EAS Build apps <code>expo build:*</code> (deprecated) <code>eas build</code> OTA Updates <code>expo publish</code> <code>eas update</code> (more powerful) Store submission Manual <code>eas submit</code> Native code support No Yes Build locally Limited Yes (with <code>eas build --local</code>)"},{"location":"migration/expo/eas/#eas-cli-definition","title":"EAS CLI | Definition","text":"<p>EAS CLI (Expo Application Services CLI) is a command-line tool provided by Expo, designed to help developers build, submit, and manage their React Native apps more efficiently \u2014 especially when working outside the constraints of the standard Expo Go app.</p>"},{"location":"migration/expo/eas/#what-is-eas-cli","title":"\ud83d\udd0d What is EAS CLI?","text":"<p>EAS CLI stands for Expo Application Services Command Line Interface. It works alongside the Expo ecosystem to provide advanced app development features like:</p> Feature Description \ud83d\udee0\ufe0f EAS Build Build your app in the cloud for iOS and Android (without needing Xcode or Android Studio locally). \ud83d\ude80 EAS Submit Submit your built apps directly to the App Store and Google Play. \ud83e\uddea EAS Update Send over-the-air (OTA) updates to your app users, even after they've downloaded it. \ud83e\uddf1 EAS Metadata Manage app store metadata (e.g., screenshots, descriptions) from the CLI. \ud83d\udce6 Managed and Bare support Works with both managed Expo apps and custom (bare workflow) React Native apps."},{"location":"migration/expo/eas/#what-can-you-do-with-eas-cli","title":"\ud83e\uddf0 What can you do with EAS CLI?","text":"<p>Here are some real-world tasks you can perform with EAS CLI:</p> <p>\u2705 Build</p> <pre><code>eas build --platform ios\neas build --platform android\n</code></pre> <p>This command builds your app in Expo\u2019s cloud infrastructure.</p> <p>\u2705 Submit</p> <pre><code>eas submit --platform ios\n</code></pre> <p>This sends your <code>.ipa</code> or <code>.aab</code> to Apple or Google for review.</p> <p>\u2705 Update</p> <pre><code>eas update --branch main\n</code></pre> <p>This pushes an OTA update to users on a particular branch.</p> <p>\u2705 Configure</p> <pre><code>eas configure\n</code></pre> <p>Sets up your project for EAS Build or EAS Update.</p>"},{"location":"migration/expo/eas/#how-does-it-relate-to-the-classic-expo-cli","title":"\ud83d\udd04 How does it relate to the classic Expo CLI?","text":"Feature Classic Expo CLI EAS CLI Local development \u2705 \u274c Cloud builds \u274c \u2705 OTA updates Limited \u2705 Custom native code \u274c \u2705 Production-ready builds \u274c \u2705 <p>If you're building a production app or need custom native code, EAS CLI is the recommended tool.</p>"},{"location":"migration/expo/eas/#do-you-need-to-eject-from-expo","title":"\ud83e\uddea Do you need to eject from Expo?","text":"<ul> <li>Not necessarily. With EAS Build, you can:</li> <li>Use custom native code (via development builds)</li> <li>Build your app for production without ejecting</li> </ul>"},{"location":"migration/expo/eas/#tldr","title":"\ud83d\ude80 TL;DR","text":"<ul> <li>EAS CLI is the modern way to:</li> <li>Build React Native apps in the cloud</li> <li>Push updates</li> <li>Submit to app stores</li> <li>Handle complex workflows beyond what Expo Go supports</li> </ul> <p>If you're building an app with Expo or React Native, EAS CLI is your go-to for cloud builds and production deployment.</p>"},{"location":"migration/iis-server/IIS-Manager/","title":"IIS MANAGER","text":""},{"location":"migration/iis-server/IIS-Manager/#tetsing-iis-server","title":"Tetsing IIS SERVER","text":"<p>URL Rewrite</p> <p> </p> <pre><code>103.94.159.132:54640\nBank@123\n</code></pre>"},{"location":"migration/iis-server/IIS-Manager/#how-to-add-url-rewrite-rules-via-iis-manager","title":"\ud83d\udee0 How to Add URL Rewrite Rules via IIS Manager","text":""},{"location":"migration/iis-server/IIS-Manager/#1-open-iis-manager","title":"1. Open IIS Manager","text":"<ul> <li>Open the IIS Manager (<code>inetmgr</code>)</li> <li>Navigate to your site (e.g.,<code>Sites &gt; YourSite</code>)</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#2-open-url-rewrite","title":"2. Open \"URL Rewrite\"","text":"<ul> <li>Double-click \"URL Rewrite\" in the middle pane</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#3-add-rules","title":"3. Add Rules","text":"<ul> <li>In the right-hand pane, click \"Add Rules...\"</li> </ul> <p>Step 1: Add Inbound Rule &gt; Blank Rule</p> <ul> <li>Select Inbound Rules &gt; Blank rule</li> <li>Click OK</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#4-configure-rule","title":"4. Configure Rule","text":"<p>Name: <code>ReactRouteRewrite</code></p> <p>Match URL:</p> <ul> <li>Requested URL: <code>Matches the Pattern</code></li> <li>Using: <code>Regular Expressions</code></li> <li>Pattern: <code>.*</code></li> </ul> <p>Conditions (Click \"Add...\" 2 times)</p>"},{"location":"migration/iis-server/IIS-Manager/#condition-1","title":"Condition 1:","text":"<ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a File</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#condition-2","title":"Condition 2:","text":"<ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a Directory</code></li> </ul> <p>\u2714\ufe0f This ensures static files (like <code>.js</code>, <code>.css</code>, etc.) are not rewritten</p>"},{"location":"migration/iis-server/IIS-Manager/#action","title":"Action:","text":"<ul> <li>Action Type: <code>Rewrite</code></li> <li>Rewrite URL: <code>/index.html</code></li> <li>(Leave \"Append query string\" checked)</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#5-apply-rule","title":"5. Apply Rule","text":"<ul> <li>Click \"Apply\" in the right panel</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#optional-exclude-static-file-extensions","title":"\u2705 Optional: Exclude Static File Extensions","text":"<p>If you want to be more precise and exclude specific file extensions (like <code>.js</code>, <code>.css</code>, <code>.jpg</code>, etc.):</p> <ol> <li> <p>Add another Condition:</p> <ul> <li>Condition Input: <code>{REQUEST_URI}</code></li> <li>Check if input string: <code>Does Not Match the Pattern</code></li> <li>Pattern: <code>.*\\.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|map)$</code></li> <li>Use <code>Ignore Case</code></li> </ul> </li> </ol>"},{"location":"migration/iis-server/IIS-Manager/#summary","title":"\ud83d\udca1 Summary","text":"<p>You're using the IIS GUI to avoid modifying <code>web.config</code> directly. This method sets up the rewrite rule visually in the URL Rewrite module, and IIS will handle routing of React client-side routes properly (like /dashboard, /about, etc.).</p> <p>Let me know if you also need this set up for a subdirectory or a reverse proxy (like React served from <code>/app</code> or <code>/ui</code>).</p>"},{"location":"migration/iis-server/IIS-Manager/#iis-url-rewrite-rules-for-react-frontend-gui-method","title":"IIS URL Rewrite Rules for React Frontend (GUI Method)","text":"<p>This guide walks you through configuring URL Rewrite rules in IIS for a frontend React application using the IIS Manager (not by editing <code>web.config</code> manually).</p>"},{"location":"migration/iis-server/IIS-Manager/#objective","title":"\ud83c\udfaf Objective","text":"<ul> <li>Route all React client-side routes to <code>index.html</code></li> <li>Serve static files (e.g., <code>.js</code>, <code>.css</code>, <code>.png</code>, etc.) directly without rewriting</li> <li>Use the URL Rewrite GUI in IIS Manager</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#steps","title":"\u2705 Steps","text":""},{"location":"migration/iis-server/IIS-Manager/#1-open-iis-manager_1","title":"1. Open IIS Manager","text":"<ul> <li>Run <code>inetmgr</code></li> <li>Navigate to your site: <code>Sites &gt; YourSite</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#2-open-url-rewrite_1","title":"2. Open URL Rewrite","text":"<ul> <li>Double-click \"URL Rewrite\" in the Features view</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#3-add-a-new-rule","title":"3. Add a New Rule","text":"<ul> <li>Click \"Add Rules...\" (Actions panel on the right)</li> <li>Select Inbound Rules &gt; Blank Rule</li> <li>Click OK</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#4-configure-the-rule","title":"4. Configure the Rule","text":""},{"location":"migration/iis-server/IIS-Manager/#general","title":"General","text":"<ul> <li>Name: <code>ReactRouteRewrite</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#match-url","title":"Match URL","text":"<ul> <li>Requested URL: <code>Matches the Pattern</code></li> <li>Using: <code>Regular Expressions</code></li> <li>Pattern: <code>.*</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#conditions","title":"Conditions","text":"<p>Click \"Add...\" to add two conditions:</p> <p>Condition 1:</p> <ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a File</code></li> </ul> <p>Condition 2:</p> <ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a Directory</code></li> </ul> <p>(Optional \u2013 for better performance)</p> <p>Condition 3:</p> <ul> <li>Condition input: <code>{REQUEST_URI}</code></li> <li>Check if input string: <code>Does Not Match the Pattern</code></li> <li>Pattern: <code>.*\\.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|map)$</code></li> <li>Ignore Case: <code>Checked</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#action_1","title":"Action","text":"<ul> <li>Action Type: <code>Rewrite</code></li> <li>Rewrite URL: <code>/index.html</code></li> <li>Append query string: <code>Checked</code></li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#final-step","title":"\u2705 Final Step","text":"<ul> <li>Click \"Apply\" in the right panel to save the rule.</li> </ul>"},{"location":"migration/iis-server/IIS-Manager/#result","title":"\ud83d\udce6 Result","text":"<p>Now, all React routes like <code>/dashboard</code>, <code>/profile/123</code>, etc., will load <code>index.html</code>, and React Router will take over. Static assets will load normally.</p>"},{"location":"migration/iis-server/IIS-Manager/#reference","title":"Reference","text":"<ul> <li>Getting Started with the IIS Manager in IIS</li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/","title":"IIS MANAGER POCKET GUIDEE","text":""},{"location":"migration/iis-server/iis-manager-url-rewrite/#steps-for-url-rewrite-iis-manager","title":"Steps for URL Rewrite IIS Manager","text":""},{"location":"migration/iis-server/iis-manager-url-rewrite/#1-open-iis-manager","title":"1. Open IIS Manager","text":"<ul> <li>Run <code>inetmgr</code></li> <li>Navigate to your site: <code>Sites &gt; YourSite</code></li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#2-open-url-rewrite","title":"2. Open URL Rewrite","text":"<ul> <li>Double-click \"URL Rewrite\" in the Features view</li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#3-add-a-new-rule","title":"3. Add a New Rule","text":"<ul> <li>Click \"Add Rules...\" (Actions panel on the right)</li> <li>Select Inbound Rules &gt; Blank Rule</li> <li>Click OK</li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#4-configure-the-rule","title":"4. Configure the Rule","text":""},{"location":"migration/iis-server/iis-manager-url-rewrite/#general","title":"General","text":"<ul> <li>Name: <code>ReactRouteRewrite</code></li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#match-url","title":"Match URL","text":"<ul> <li>Requested URL: <code>Matches the Pattern</code></li> <li>Using: <code>Regular Expressions</code></li> <li>Pattern: <code>.*</code></li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#conditions","title":"Conditions","text":"<p>Click \"Add...\" to add two conditions:</p> <p>Condition 1:</p> <ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a File</code></li> </ul> <p>Condition 2:</p> <ul> <li>Condition input: <code>{REQUEST_FILENAME}</code></li> <li>Check if input string: <code>Is Not a Directory</code></li> </ul> <p>(Optional \u2013 for better performance)</p> <p>Condition 3:</p> <ul> <li>Condition input: <code>{REQUEST_URI}</code></li> <li>Check if input string: <code>Does Not Match the Pattern</code></li> <li>Pattern: <code>.*\\.(js|css|png|jpg|jpeg|gif|ico|svg|woff2?|ttf|eot|map)$</code></li> <li>Ignore Case: <code>Checked</code></li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#action","title":"Action","text":"<ul> <li>Action Type: <code>Rewrite</code></li> <li>Rewrite URL: <code>/index.html</code></li> <li>Append query string: <code>Checked</code></li> </ul>"},{"location":"migration/iis-server/iis-manager-url-rewrite/#final-step","title":"Final Step","text":"<ul> <li>Click \"Apply\" in the right panel to save the rule.</li> </ul>"},{"location":"migration/javascript/first-class-in-js/","title":"1st Class","text":""},{"location":"migration/javascript/first-class-in-js/#first-class","title":"First Class","text":"<p>The terms First-Class Citizen and First-Class Object often confuse learners because they sound similar and are sometimes used interchangeably. But with a bit of careful unpacking, we can clear this up.</p>"},{"location":"migration/javascript/first-class-in-js/#part-1-what-does-first-class-actually-mean","title":"\ud83d\udd0d Part 1: What Does \"First-Class\" Actually Mean?","text":"<p>In programming, \"first-class\" refers to how a language treats entities (like functions, objects, numbers, etc.).</p> <p>An entity is \"first-class\" if:</p> <ul> <li>\u2705 It can be assigned to a variable</li> <li>\u2705 It can be passed as an argument to a function</li> <li>\u2705 It can be returned from a function</li> <li>\u2705 It can be stored in a data structure (e.g., array, object)</li> </ul> <p>If an entity meets all of those conditions, it's said to be a first-class citizen in that language.</p>"},{"location":"migration/javascript/first-class-in-js/#first-class-citizen","title":"\ud83e\udde0 First-Class Citizen","text":"<p>Definition:</p> <p>A first-class citizen is any entity in a language that satisfies all of the above capabilities.</p> <p>In JavaScript:</p> <p>JavaScript treats functions as first-class citizens, which means:</p> <pre><code>// Assign function to a variable\nconst greet = function (name) {\n  return \"Hello, \" + name;\n};\n\n// Pass function as argument\nfunction callMe(fn) {\n  return fn(\"Alice\");\n}\ncallMe(greet); // \"Hello, Alice\"\n\n// Return function from another function\nfunction outer() {\n  return function () {\n    return \"Hi!\";\n  };\n}\nconst inner = outer(); // inner is now a function\ninner(); // \"Hi!\"\n</code></pre> <p>This is what we mean when we say:</p> <p>In JavaScript, functions are first-class citizens.</p> <p>You can treat functions like any other value.</p>"},{"location":"migration/javascript/first-class-in-js/#first-class-object-this-term-is-problematic","title":"\ud83e\uddf1 First-Class Object (This term is problematic)","text":"<p>Here\u2019s the tricky part.</p> <p>\u26a0\ufe0f \"First-Class Object\" is not a standard term in programming.</p> <p>Most of the time, people say \"first-class object\" when they mean:</p> <p>\"Objects are treated as first-class values in the language.\"</p> <p>And yes \u2014 in JavaScript:</p> <ul> <li>You can assign objects to variables</li> <li>Pass them to functions</li> <li>Return them from functions</li> <li>Store them in arrays or other objects</li> </ul> <p>So by the same logic:</p> <p>Objects are first-class values in JavaScript, just like functions.</p> <p>But \u201cfirst-class object\u201d is not a special or unique concept separate from \"first-class citizen.\" It\u2019s just applying the first-class citizen criteria to objects.</p>"},{"location":"migration/javascript/first-class-in-js/#so-whats-the-actual-difference","title":"So, What\u2019s the Actual Difference?","text":"Concept Definition Usage in JavaScript Common Confusion First-Class Citizen A general concept: Any entity that can be treated like a value (assigned, passed, returned, stored) Functions are a clear example Standard terminology First-Class Object Not standard; usually refers to objects being first-class values Objects are first-class, but so are many other things Often misused or confused"},{"location":"migration/javascript/first-class-in-js/#example-side-by-side","title":"\ud83d\udd01 Example Side-by-Side:","text":"<p>Functions (First-Class Citizens):</p> <pre><code>function sayHi() {\n  return \"Hi!\";\n}\nconst func = sayHi; // assign\n\ncallFunction(func); // pass\n\nfunction returnFunc() {\n  return sayHi;\n} // return\n</code></pre> <p>Objects (Also First-Class Values):</p> <pre><code>const person = { name: \"Alice\" };\nconst obj = person; // assign\n\nfunction print(obj) {\n  console.log(obj.name);\n} // pass\n\nfunction createPerson() {\n  return { name: \"Bob\" };\n} // return\n</code></pre>"},{"location":"migration/javascript/first-class-in-js/#final-thoughts","title":"\ud83e\udde9 Final Thoughts","text":"<ul> <li>\u2705 \"First-class citizen\" is a well-defined concept in programming.</li> <li>\u26a0\ufe0f \"First-class object\" is not standard \u2014 it's just someone applying that concept to objects (which is fine but not official).</li> <li>In JavaScript, functions are first-class citizens.</li> <li><code>Objects</code>, numbers, arrays, etc., are first-class values \u2014 you can use them like any other value.</li> </ul> <p>So, the difference is mostly in the terminology and how standard it is, not in what JavaScript actually allows you to do.</p> <p>Difference between First-Class Citizens and First-Class Objects in JavaScript \u2014 and how they relate.</p> <p>\ud83d\udcca First-Class Citizen vs First-Class Object \u2013 Visual Diagram (Text-Based)</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      First-Class Citizen    \u2502 \u2190 GENERAL PROGRAMMING CONCEPT\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Any entity that can be:     \u2502\n\u2502  \u2713 Assigned to a variable   \u2502\n\u2502  \u2713 Passed as an argument    \u2502\n\u2502  \u2713 Returned from a function \u2502\n\u2502  \u2713 Stored in a data structure\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   JavaScript First-Class    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2022 Functions   \u2705 YES        \u2502\n\u2502 \u2022 Objects     \u2705 YES        \u2502\n\u2502 \u2022 Arrays      \u2705 YES        \u2502\n\u2502 \u2022 Numbers     \u2705 YES        \u2502\n\u2502 \u2022 Strings     \u2705 YES        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u2502\n     Terminology Split\n             \u25bc\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n|             TERMS (often confused):        |\n|                                            |\n|  1. First-Class Citizen (\u2705 Standard)      |\n|     \u2192 Commonly refers to functions         |\n|     \u2192 Well-defined concept                 |\n|                                            |\n|  2. First-Class Object (\u26a0\ufe0f Not Standard)   |\n|     \u2192 Not an official term                 |\n|     \u2192 Sometimes used to say \u201cobjects are   |\n|        treated like values\u201d                |\n|     \u2192 But ALL values are \u201cfirst-class\u201d     |\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>TL;DR Breakdown</p> Concept Meaning JavaScript Example Is This Standard? First-Class Citizen Entity you can treat like any other value Functions \u2705 Yes First-Class Object (Unofficial) Objects treated as values (assign, pass) Objects \u26a0\ufe0f Not a formal term"},{"location":"migration/javascript/js-scientific-notation/","title":"JS Scientific Notation","text":""},{"location":"migration/javascript/js-scientific-notation/#js-scientific-notation","title":"JS Scientific Notation","text":"<p>In JavaScript, scientific notation is typically used for numbers that are either very large or very small. However, JavaScript will use scientific notation for any number that exceeds a certain threshold in size (either too large or too small) due to the way numbers are represented in the language.</p> <p>JavaScript uses floating-point numbers (specifically IEEE 754 double-precision), which has a limit to how large or small a number can be without switching to scientific notation. The threshold depends on the value of the number. Here are some general guidelines:</p>"},{"location":"migration/javascript/js-scientific-notation/#threshold-for-scientific-notation-in-javascript","title":"Threshold for Scientific Notation in JavaScript","text":"<ol> <li> <p>Large numbers:</p> <ul> <li>JavaScript will automatically use scientific notation for numbers greater than or equal to <code>1e+21</code>. Any number larger than that will be represented in scientific notation.</li> <li>For example: <code>10000000000000000000000</code> will be displayed as <code>1e+22</code>.</li> </ul> </li> <li> <p>Small numbers:</p> <ul> <li>Similarly, for very small numbers (close to zero but negative), JavaScript will use scientific notation for numbers less than or equal to <code>1e-6</code>.</li> <li>For example: <code>0.000001</code> will be represented as <code>1e-6</code>.</li> </ul> </li> </ol>"},{"location":"migration/javascript/js-scientific-notation/#examples","title":"Examples:","text":"<ul> <li>Large Numbers:</li> </ul> <pre><code>let largeNumber = 1e22; // Scientific notation for 1 followed by 22 zeros\nconsole.log(largeNumber);  // Outputs: 1e+22\n</code></pre> <ul> <li>Small Numbers</li> </ul> <pre><code>  let smallNumber = 0.000001; // 1e-6 is the scientific notation for this value\n  console.log(smallNumber);  // Outputs: 1e-6\n</code></pre>"},{"location":"migration/javascript/js-scientific-notation/#when-does-javascript-switch-to-scientific-notation","title":"When Does JavaScript Switch to Scientific Notation?","text":"<ol> <li> <p>For numbers greater than or equal to <code>1e21</code> or smaller than or equal to <code>1e-6</code>, JavaScript will represent the numbers in scientific notation.</p> <pre><code>let num = 10000000000000000000000; // 1e+22\nconsole.log(num); // Outputs: 1e+22\n\nlet smallNum = 0.0000001; // 1e-7\nconsole.log(smallNum); // Outputs: 1e-7\n</code></pre> </li> <li> <p>Numbers within a \"normal\" range (neither extremely large nor extremely small) will not be represented in scientific notation. For instance:</p> <pre><code>let normalNumber = 123456;\nconsole.log(normalNumber); // Outputs: 123456 (not scientific notation)\n</code></pre> </li> </ol>"},{"location":"migration/javascript/js-scientific-notation/#floating-point-precision","title":"Floating-Point Precision:","text":"<p>The use of scientific notation happens because of floating-point precision. When a number gets too large or small, JavaScript can no longer represent it fully with the available precision, so it switches to scientific notation to manage the value more efficiently.</p>"},{"location":"migration/javascript/js-scientific-notation/#conclusion","title":"Conclusion:","text":"<ul> <li>Large numbers (\u2265 <code>1e+21</code>) will automatically be displayed in scientific notation.</li> <li>Small numbers (\u2264 <code>1e-6</code>) will also be displayed in scientific notation.</li> </ul> <p>If you're handling numbers within typical ranges (like <code>1</code> to <code>100000</code>), they won't be converted to scientific notation. Only when you exceed those bounds (very large or very small values), JavaScript will display numbers in scientific notation.</p>"},{"location":"migration/linux/linux-last-login/","title":"Linux Last Login","text":""},{"location":"migration/linux/linux-last-login/#linux-last-login","title":"Linux Last Login","text":"<p>To list login times in the terminal on Ubuntu, you can use several commands depending on the level of detail you want:</p>"},{"location":"migration/linux/linux-last-login/#1-last-command","title":"1. <code>last</code> Command","text":"<p>This shows a list of recent logins:</p> <pre><code>last\n</code></pre> <ul> <li>It pulls data from the <code>/var/log/wtmp</code> file.</li> <li>You'll see the username, terminal, IP address (if remote), login time, logout time, and duration.</li> </ul> Example output<pre><code>user1    pts/0        192.168.1.5     Mon May 26 08:30   still logged in\nuser2    pts/1        192.168.1.10    Sun May 25 22:00 - 23:15  (01:15)\n</code></pre>"},{"location":"migration/linux/linux-last-login/#2-who-command","title":"2. who Command","text":"<p>Shows users currently logged in and their login time:</p> <pre><code>who\n</code></pre> <p>Example output:</p> <pre><code>user1    pts/0        2025-05-26 08:30 (:0)\n</code></pre>"},{"location":"migration/linux/linux-last-login/#3-uptime-command","title":"3. <code>uptime</code> Command","text":"<p>Gives you system uptime and current users, not individual login times, but still useful:</p> <pre><code>uptime\n</code></pre> <p>Example output:</p> <pre><code>08:45:01 up 3 days, 2:13,  2 users,  load average: 0.15, 0.12, 0.10\n</code></pre>"},{"location":"migration/linux/linux-last-login/#4-check-a-specific-users-login-history","title":"4. Check a Specific User\u2019s Login History","text":"<pre><code>last username\n</code></pre> <p>Example:</p> <pre><code>last john\n</code></pre>"},{"location":"migration/linux/linux-last-login/#5-filter-with-grep-and-last","title":"5. Filter with <code>grep</code> and <code>last</code>","text":"<p>For filtering logins by time or type:</p> <pre><code>last | grep 'May 26'\n</code></pre> <p>Let me know if you need to format or export this data (e.g., to a file or CSV).</p>"},{"location":"migration/linux/linux-last-login/#export","title":"Export","text":"<p>Great! Here\u2019s how you can format and export login time data from the last command to a file \u2014 for example, in CSV format.</p>"},{"location":"migration/linux/linux-last-login/#export-to-a-text-file","title":"\u2705 Export to a Text File","text":"<p>If you just want the raw output saved:</p> <pre><code>last &gt; login_history.txt\n</code></pre>"},{"location":"migration/linux/linux-last-login/#export-and-format-as-csv","title":"\u2705 Export and Format as CSV","text":"<p>To convert the <code>last</code> command output into a basic CSV format:</p> <pre><code>last | awk '{print $1\",\"$2\",\"$3\",\"$4\" \"$5\" \"$6\",\"$7\" \"$8}' &gt; login_history.csv\n</code></pre> <p>This produces CSV lines like:</p> <pre><code>user1,pts/0,192.168.1.5,Mon May 26,08:30\nuser2,pts/1,192.168.1.10,Sun May 25,22:00\n</code></pre> <p>Note: The output format of <code>last</code> may vary depending on your locale and Ubuntu version. You might need to adjust field positions (<code>$1</code>, <code>$2</code>, etc.) slightly.</p>"},{"location":"migration/linux/linux-last-login/#export-for-a-specific-user","title":"\u2705 Export for a Specific User","text":"<pre><code>last username | awk '{print $1\",\"$2\",\"$3\",\"$4\" \"$5\" \"$6\",\"$7\" \"$8}' &gt; username_logins.csv\n</code></pre> <p>Example:</p> <pre><code>last john | awk '{print $1\",\"$2\",\"$3\",\"$4\" \"$5\" \"$6\",\"$7\" \"$8}' &gt; john_logins.csv\n</code></pre>"},{"location":"migration/linux/linux-last-login/#check-the-result","title":"\u2705 Check the Result","text":"<p>You can open the resulting CSV file with:</p> <pre><code>cat login_history.csv\n</code></pre> <p>Or open it in a spreadsheet program like LibreOffice Calc or Excel.</p> <p>Let me know if you want to include logout times, durations, or filter by date range.</p> <p></p> <p></p>"},{"location":"migration/linux/pamac-vs-pacman/","title":"Arch Package Manager","text":""},{"location":"migration/linux/pamac-vs-pacman/#pamac-vs-pacman","title":"Pamac vs pacman","text":""},{"location":"migration/linux/pamac-vs-pacman/#are-pacman-and-pamac-both-installed-by-default-in-manjaro","title":"Are pacman and pamac both installed by default in Manjaro?","text":"<p>Yes, in most official Manjaro editions, both:</p> <ul> <li> <p><code>pacman</code> (command-line package manager)</p> </li> <li> <p><code>pamac</code> (Manjaro's own user-friendly frontend)     are installed by default.</p> </li> <li> <p><code>pacman</code> is always included, as it's essential to the Arch-based system.</p> </li> <li> <p><code>pamac</code> is often pre-installed in graphical editions (like Xfce, GNOME, KDE), but may not be present in minimal or community builds \u2014 you can install it manually with:</p> </li> </ul> <pre><code>sudo pacman -S pamac\n</code></pre>"},{"location":"migration/linux/pamac-vs-pacman/#key-differences-between-pacman-and-pamac","title":"\ud83d\udd0d Key Differences Between pacman and pamac","text":"Feature <code>pacman</code> <code>pamac</code> Interface Command-line only CLI and GUI Scope Official repositories only Supports official, AUR, Flatpak, etc. Speed Very fast and lightweight Slightly slower due to more features Dependency handling Excellent Excellent, with additional options AUR support \u274c Not supported natively \u2705 Built-in (with optional support) Snap/Flatpak \u274c No \u2705 (if enabled)"},{"location":"migration/linux/pamac-vs-pacman/#which-one-should-you-use-and-why","title":"\ud83e\udd14 Which One Should You Use and Why?","text":"<p>\ud83e\udde0 Use <code>pacman</code> if:</p> <ul> <li>You prefer speed and low-level control.</li> <li>You're already comfortable with Arch-based commands.</li> <li>You only need packages from official Manjaro/Arch repos.</li> </ul> <p>\ud83d\udc68\u200d\ud83d\udcbb Use <code>pamac</code> if:</p> <ul> <li>You want an easy-to-use GUI or friendly CLI.</li> <li> <p>You want built-in support for:</p> <ul> <li>AUR (Arch User Repository)</li> <li>Flatpak</li> <li>Snap (with plugins)</li> </ul> </li> <li> <p>You're looking for a more beginner-friendly tool that handles things like dependency checking, update notifications, and optional dependencies interactively.</p> </li> </ul>"},{"location":"migration/linux/pamac-vs-pacman/#conclusion","title":"\ud83d\udccc Conclusion","text":"<ul> <li>Use <code>pamac</code> if you're newer to Linux or want broader support (AUR, Flatpak, GUI).</li> <li>Use <code>pacman</code> if you want performance, simplicity, and you're comfortable with command-line tools.</li> </ul> <p>You can also use both depending on what you're doing \u2014 they're fully compatible.</p>"},{"location":"migration/linux/pamac-vs-pacman/#misc","title":"Misc","text":"<p>Here are the official package managers for Manjaro Linux and Ubuntu:</p>"},{"location":"migration/linux/pamac-vs-pacman/#manjaro-linux","title":"\ud83d\udfe9 Manjaro Linux","text":"<ul> <li>Official Package Manager: <code>pacman</code></li> <li>Backend: Uses Arch Linux's package management system.</li> <li> <p>Command Example:</p> <pre><code>sudo pacman -Syu  # update system\nsudo pacman -S firefox  # install Firefox\n</code></pre> </li> <li> <p>Additional Tools:</p> <ul> <li> <p>Pamac: A graphical and CLI frontend used by Manjaro for easier package management (not part of Arch by default).</p> <pre><code>pamac install vlc\n</code></pre> </li> </ul> </li> </ul>"},{"location":"migration/linux/pamac-vs-pacman/#ubuntu","title":"\ud83d\udfe6 Ubuntu","text":"<ul> <li>Official Package Manager: <code>apt</code> (Advanced Package Tool)</li> <li>Backend: Debian package system using <code>.deb</code> files</li> <li> <p>Command Example:</p> <pre><code>sudo apt update  # update package lists\nsudo apt upgrade  # upgrade installed packages\nsudo apt install firefox  # install Firefox\n</code></pre> </li> <li> <p>Additional Tools:</p> <ul> <li><code>dpkg</code>: Lower-level Debian package manager used under the hood</li> <li>Snap: Canonical's universal package system (e.g., <code>snap install</code>)</li> </ul> </li> </ul>"},{"location":"migration/linux/pamac-vs-pacman/#ssh-customize-can-or-not","title":"SSH CUSTOMIZE CAN or NOT","text":"<p>Let\u2019s break down each line from your SSH config snippet and see what you can and cannot customize:</p> <pre><code>Host github.com\nHostName github.com\nUser git\nIdentityFile ~/.ssh/id_ed25519_github\nIdentitiesOnly\n</code></pre> Config Line Can You Customize? Notes <code>Host github.com</code> Yes (alias name) Use custom alias for multiple configs <code>HostName github.com</code> Usually no Must point to GitHub server <code>User git</code> No GitHub requires user <code>git</code> for SSH <code>IdentityFile ...</code> Yes Use any SSH key file you want <code>IdentitiesOnly</code> Yes Optional, controls key usage behavior"},{"location":"migration/linux/pamac-vs-pacman/#desktop-enviorment","title":"DESKTOP ENVIORMENT","text":"<p>\ud83e\udde0 First, check your desktop environment:</p> <pre><code>echo $XDG_CURRENT_DESKTOP\n</code></pre> <p>You\u2019ll get something like <code>KDE</code>, <code>GNOME</code>, or <code>XFCE</code>.</p>"},{"location":"migration/linux/pamac-vs-pacman/#keyboard-shortcuts-by-desktop","title":"\ud83c\udfb9 Keyboard Shortcuts by Desktop:","text":""},{"location":"migration/linux/pamac-vs-pacman/#kde-plasma-default-for-manjaro-kde-edition","title":"\ud83d\udd37 KDE Plasma (default for Manjaro KDE edition)","text":"<ul> <li><code>Alt + Tab</code> \u2192 Switch between open windows</li> <li><code>Alt + Shift + Tab</code> \u2192 Switch in reverse order</li> <li><code>Ctrl + F1</code> to <code>Ctrl + F12</code> \u2192 Switch to specific virtual desktop (if enabled)</li> </ul> <p>Customize it:</p> <p>Settings \u2192 Workspace \u2192 Shortcuts \u2192 KWin \u2192 \u201cWalk through windows\u201d</p>"},{"location":"migration/linux/pamac-vs-pacman/#gnome-eg-manjaro-gnome-edition","title":"\ud83d\udd36 GNOME (e.g., Manjaro GNOME edition)","text":"<ul> <li><code>Super (Windows key) + Tab</code> \u2192 Switch applications</li> <li><code>Alt + Tab</code> \u2192 Switch windows in current workspace</li> <li><code>Super + Number</code> \u2192 Switch to that app in the dock</li> </ul> <p>Customize:</p> <p>Settings \u2192 Keyboard Shortcuts \u2192 Navigation</p>"},{"location":"migration/linux/pamac-vs-pacman/#xfce-eg-manjaro-xfce-edition","title":"\ud83d\udfe4 XFCE (e.g., Manjaro XFCE edition)","text":"<ul> <li><code>Alt + Tab</code> \u2192 Switch between open windows</li> <li><code>Alt + F6</code> \u2192 Switch windows of the same application</li> </ul> <p>Customize it:</p> <p>Settings \u2192 Window Manager \u2192 Keyboard</p>"},{"location":"migration/linux/pamac-vs-pacman/#bonus-use-rofi-or-dmenu-power-users","title":"\ud83d\udca1 Bonus: Use rofi or dmenu (Power Users)","text":"<p>If you like fast fuzzy switching or launching:</p> <ul> <li> <p>Install with:</p> <pre><code>sudo pacman -S rofi\n</code></pre> </li> <li> <p>Then bind it to a key (e.g., <code>Super + D</code>) to open a search-based app switcher/launcher.</p> </li> </ul> <p>f you\u2019re not sure which DE you\u2019re on, paste the output of:</p> <pre><code>echo $XDG_CURRENT_DESKTOP\n</code></pre> <p>and I\u2019ll give you the exact shortcut guide.</p>"},{"location":"migration/linux/pamac-vs-pacman/#node","title":"NODE","text":"<pre><code>nvm install 16\nnvm install 18\nnvm install node        # installs the latest stable (currently Node 24)\n\n\nnvm use 16\n# or\nnvm use 18\n# or\nnvm use node      # latest\n\nnvm alias default 18\n</code></pre>"},{"location":"migration/linux/pamac-vs-pacman/#pacman-or-pamac","title":"<code>pacman</code> or <code>pamac</code>","text":"<p>Here\u2019s a quick rundown to help you decide between pacman and pamac on Manjaro:</p> <p><code>pacman</code></p> <ul> <li>The official command-line package manager for Arch-based systems (including Manjaro).</li> <li>Very powerful and fast.</li> <li>Handles official repository packages only.</li> <li>Commands like <code>sudo pacman -Syu</code> update your system.</li> <li>No built-in support for AUR (Arch User Repository).</li> </ul> <p><code>pamac</code></p> <ul> <li>Manjaro\u2019s graphical and command-line package manager frontend.</li> <li>Supports both official repos and AUR out of the box.</li> <li>Easier for users who want to install AUR packages without extra tools.</li> <li>You can use it in CLI mode (terminal) with <code>pamac</code> commands.</li> <li>Example to install packages: <code>pamac install package-name</code></li> <li>To update system: <code>pamac update</code></li> </ul> <p>Which one to use?</p> <ul> <li>For official repo packages: both work equally well (<code>pacman</code> or <code>pamac</code>).</li> <li>For AUR packages: use <code>pamac</code> or install an AUR helper like <code>yay</code>.</li> <li>If you prefer GUI tools, <code>pamac</code> has a graphical app for managing packages.</li> </ul>"},{"location":"migration/linux/pamac-vs-pacman/#insalling-pyenv-manajaro","title":"Insalling pyenv Manajaro","text":"<p>For installing <code>pyenv</code>:</p> <ul> <li> <p>If you want an easy way to install from AUR, use <code>pamac</code>:</p> <pre><code>pamac build pyenv\n</code></pre> </li> <li> <p>Or with yay (AUR helper):</p> <pre><code>yay -S pyenv\n</code></pre> </li> <li> <p>Using <code>pacman</code> alone won\u2019t work for AUR packages because it handles only official repos</p> </li> </ul> <p>TL;DR</p> <ul> <li>Use <code>pacman</code> for official repo packages and system management.</li> <li>Use <code>pamac</code> if you want integrated AUR support and/or GUI.</li> <li>For AUR packages like <code>pyenv</code>, <code>pamac build pyenv</code> or <code>yay -S pyenv</code> is easiest.</li> </ul>"},{"location":"migration/linux/pamac-vs-pacman/#source","title":"SOURCE","text":"<pre><code># 1\nnano ~/.zshrc\n\n# 2\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv init -)\"\n\n# 3\nsource ~/.zshrc\n\n# 4\npyenv --version\nwhich python\n</code></pre>"},{"location":"migration/linux/pamac-vs-pacman/#installation","title":"INSTALLATION","text":"<p>Great \u2014 since you're using Manjaro, which is based on Arch Linux, the best way to install Visual Studio Code is using the official Arch repository or the AUR (Arch User Repository), depending on your preference for Microsoft's official version vs open-source builds.</p> <p>Here are your main options:</p>"},{"location":"migration/linux/pamac-vs-pacman/#1-install-the-official-microsoft-vs-code-from-aur","title":"\u2705 1. Install the Official Microsoft VS Code (from AUR)","text":"<p>This is the exact version Microsoft ships \u2014 telemetry and all.</p> <p>Steps:</p> <p>If you're using <code>pamac</code> (the Manjaro GUI/package tool), just run:</p> <pre><code>pamac build visual-studio-code-bin\n</code></pre> <p>Or, using yay (an AUR helper):</p> <pre><code>yay -S visual-studio-code-bin\n</code></pre> <p>This gives you:</p> <ul> <li>The official Microsoft build</li> <li>Auto-updates through your system</li> <li>Full functionality, including extensions and remote development</li> </ul> Method Command Notes \u2705 Microsoft Official (AUR) <code>pamac build visual-studio-code-bin</code> Best if you want the full official app \ud83e\uddfc Open-source VS Code OSS <code>sudo pacman -S code</code> Lightweight, no telemetry, fewer features \u26a0\ufe0f Flatpak/Snap (optional) Not recommended unless needed Heavier, sandboxed, less native feel"},{"location":"migration/linux/pamac-vs-pacman/#brave","title":"Brave","text":"<pre><code>pamac build brave-bin\n</code></pre>"},{"location":"migration/linux/pamac-vs-pacman/#nvm","title":"NVM","text":"<pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n\n\n#2\n\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"\n</code></pre> <ol> <li>Add NVM to your shell profile</li> </ol> <p>The install script will suggest adding the following lines to your shell config file. Usually it's already added automatically, but verify by opening your shell config file:</p> <ul> <li>For bash: <code>~/.bashrc</code></li> <li>For zsh: <code>~/.zshrc</code></li> </ul> <p>Then reload your shell config:</p> <pre><code>source ~/.bashrc\n# or\nsource ~/.zshrc\n</code></pre>"},{"location":"migration/linux/pamac-vs-pacman/#how-to-check-which-shell-youre-using","title":"\u2705 How to Check Which Shell You're Using","text":"<p>It depends on which shell you're using \u2014 Manjaro supports both bash and zsh, but by default:</p> <ul> <li>\ud83d\udfe2 Manjaro GNOME or XFCE usually uses <code>bash</code> by default</li> <li>\ud83d\udfe3 Manjaro KDE often uses <code>zsh</code> as the default shell</li> </ul> <pre><code>echo $SHELL\n</code></pre> Output Meaning <code>/bin/bash</code> You\u2019re using bash \u2192 use <code>~/.bashrc</code> <code>/bin/zsh</code> You\u2019re using zsh \u2192 use <code>~/.zshrc</code>"},{"location":"migration/nepal/cit-nepal/","title":"CIT Nepal","text":""},{"location":"migration/nepal/cit-nepal/#cit","title":"CIT","text":"<p>In Nepal, CIT commonly refers to the Citizen Investment Trust. If you're working in a private company as a developer, here's what you need to know:</p>"},{"location":"migration/nepal/cit-nepal/#1-what-is-cit-in-nepal","title":"\ud83c\uddf3\ud83c\uddf5 1. What is CIT in Nepal?","text":""},{"location":"migration/nepal/cit-nepal/#citizen-investment-trust-cit","title":"\u2733\ufe0f Citizen Investment Trust (CIT)","text":"<ul> <li>CIT is a government-run savings and investment program.</li> <li>It helps employees save a portion of their salary regularly and receive interest + bonus after retirement or a fixed term.</li> <li>It's similar to a Provident Fund, but not identical.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#how-it-works","title":"\ud83d\udcbc How It Works:","text":"<ul> <li>A fixed percentage of your salary (commonly 10%) is deposited monthly.</li> <li>Your employer matches this amount (also 10% usually).</li> <li>The fund is invested, and you earn interest (~8\u201310%) annually.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#2-if-youre-working-in-a-private-company-as-a-developer-in-nepal","title":"\ud83d\udc68\u200d\ud83d\udcbb 2. If You\u2019re Working in a Private Company as a Developer in Nepal","text":"<p>Here are key things you need to handle:</p>"},{"location":"migration/nepal/cit-nepal/#a-employment-contract","title":"\u2705 a) Employment Contract","text":"<ul> <li>Always sign a written contract.</li> <li>Make sure it includes: salary, job description, working hours, leave policy, tax handling, etc.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#b-pan-registration","title":"\u2705 b) PAN Registration","text":"<ul> <li>You need a Permanent Account Number (PAN) from the Inland Revenue Department (IRD).</li> <li>Your employer deducts Tax at Source (TDS) based on your income.</li> <li>PAN is also needed for filing taxes and receiving salary in many cases.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#c-tax-deduction-tds","title":"\u2705 c) Tax Deduction (TDS)","text":"<ul> <li>Employers deduct 1\u201325% tax depending on your salary slab.</li> <li>TDS is filed monthly by your employer, but you should monitor your annual tax credit via ird.gov.np.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#d-cit-or-provident-fund-optional-in-some-companies","title":"\u2705 d) CIT or Provident Fund (Optional in Some Companies)","text":"<ul> <li>In many private IT companies, CIT is optional.</li> <li>If enrolled, your contribution is deducted monthly.</li> <li>You\u2019ll get tax benefits and retirement savings.</li> </ul>"},{"location":"migration/nepal/cit-nepal/#e-social-security-fund-ssf-new-system","title":"\u2705 e) Social Security Fund (SSF) (New System)","text":"<ul> <li> <p>Some companies may instead enroll you in the SSF, which covers:</p> <ul> <li>Retirement</li> <li>Accidents/Disability</li> <li>Medical &amp; Maternity</li> </ul> </li> <li> <p>It's mandatory for public institutions but optional/gradually enforced for private firms.</p> </li> </ul>"},{"location":"migration/nepal/cit-nepal/#summary-checklist-for-you","title":"\ud83e\uddfe Summary Checklist for You","text":"Requirement Mandatory Notes PAN Card \u2705 Yes Apply via IRD; employer needs this. Tax Deduction (TDS) \u2705 Yes Based on income; handled by employer. CIT Registration \u26a0\ufe0f Maybe Optional in many private IT firms. SSF Registration \u26a0\ufe0f Maybe Some companies may opt into this. Employment Contract \u2705 Yes Protects your rights. Tax Return Filing \u2705 Yes File yearly at ird.gov.np (usually by mid-July)."},{"location":"migration/nepal/cit-nepal/#how-to-check-your-tds-tax-deducted-at-source-and-tax-submission-in-nepal","title":"How to Check Your TDS (Tax Deducted at Source) and Tax Submission in Nepal","text":""},{"location":"migration/nepal/cit-nepal/#step-1-log-in-to-the-ird-e-services-portal","title":"Step 1: Log in to the IRD e-Services Portal","text":"<ol> <li>Go to: https://taxpayerportal.ird.gov.np</li> <li>Click \"Login as Taxpayer\"</li> <li> <p>Use your:</p> <ul> <li>PAN number</li> <li>Password (you should have received one during PAN registration; if not, click \"Forgot Password\" or register)</li> </ul> </li> </ol>"},{"location":"migration/nepal/cit-nepal/#step-2-check-your-tax-credit","title":"Step 2: Check Your Tax Credit","text":"<p>Once logged in:</p> <ol> <li>Go to \"Taxpayer Ledger\" or \"Tax Return Filing History\"</li> <li> <p>Under the fiscal year (e.g., 2080/81), you\u2019ll see:</p> <ul> <li>TDS submitted by employer</li> <li>Total tax amount credited</li> <li>If your employer has submitted taxes monthly, you\u2019ll see entries for each month.</li> </ul> </li> </ol>"},{"location":"migration/nepal/cit-nepal/#step-3-cross-check-with-your-salary-slip-or-bank-statement","title":"Step 3: Cross-Check with Your Salary Slip or Bank Statement","text":"<p>To verify it's accurate:</p> Month Gross Salary TDS Deducted (10% + 1%) Employer Submitted to IRD? Shrawan Rs. X Rs. Y \u2705 / \u274c Bhadra Rs. X Rs. Y \u2705 / \u274c ... ... ... ... <p>If there are missing months or amounts are incorrect, your employer might not be properly filing \u2014 you should bring it up with HR or accounts.</p>"},{"location":"migration/nepal/cit-nepal/#how-much-tax-should-you-pay-fy-208081","title":"\ud83d\udccc How Much Tax Should You Pay? (FY 2080/81)","text":"<p>\ud83d\udcca For Individuals (Unmarried or Married with Separate Income)</p> Annual Income (NRs) Tax Rate Up to Rs. 500,000 1% (social security tax) Rs. 500,001 \u2013 700,000 10% Rs. 700,001 \u2013 2,000,000 20% Above Rs. 2,000,000 30% <p>\ud83e\udde0 Pro tip: Use the IRD's Tax Calculator: \ud83d\udc49 https://ird.gov.np/tax-calculator</p>"},{"location":"migration/nepal/cit-nepal/#need-help","title":"\ud83d\udee0\ufe0f Need Help?","text":"<p>If you\u2019re stuck or suspicious your employer isn\u2019t submitting your tax:</p> <ul> <li>\ud83d\udce7 Contact: support@ird.gov.np</li> <li>\u260e\ufe0f Call IRD: 1660-01-55388 (Toll-Free)</li> <li>\ud83e\uddfe File a complaint (if necessary) \u2014 you have a right to see tax records tied to your PAN.</li> </ul> <p>Would you like me to walk you through how to use the IRD portal with screenshots or visuals?</p> <p></p> <p></p> <p></p>"},{"location":"migration/nepal/information/","title":"Information","text":""},{"location":"migration/nepal/information/#information","title":"Information","text":"<p>In Nepal, as a developer working either as an employee or employer (owner/founder) in a private company, you\u2019ll often come across terms like CIT, SSF, PF, and may wonder what\u2019s compulsory and what isn\u2019t. Let\u2019s clarify:d</p>"},{"location":"migration/nepal/information/#1-is-cit-or-ssf-compulsory-in-a-nepal-private-company","title":"1. Is CIT or SSF compulsory in a Nepal private company?","text":"<ul> <li> <p>CIT (Citizen Investment Trust):</p> <p>Not compulsory for private companies or employees. It\u2019s voluntary unless required by your employer\u2019s internal policy or contract.</p> </li> <li> <p>SSF (Social Security Fund):</p> <p>As of recent regulations, SSF is compulsory for private sector employers who have registered in it. Once an employer is enrolled, all employees must contribute.</p> <p>However, not all private companies have joined SSF yet. So if your company has not registered, SSF is not compulsory for you.</p> <p>\ud83d\udd38 In short: SSF can be compulsory if your employer is enrolled. CIT is voluntary.</p> </li> </ul>"},{"location":"migration/nepal/information/#2-whats-the-difference-between-cit-ssf-and-pf","title":"2. What\u2019s the difference between CIT, SSF, and PF?","text":"Term Stands for Mandatory? Who contributes? Purpose PF Provident Fund Usually applies to govt or large orgs. Not common in private sector unless voluntarily adopted. Employee + Employer (often 10% each) Retirement savings CIT Citizen Investment Trust Voluntary Employee (optionally employer) Investment savings with tax benefit SSF Social Security Fund Compulsory once company registers Employer 20%, split into different areas Social security (pension, insurance, maternity, accident, etc.)"},{"location":"migration/nepal/information/#3-is-provident-fund-pf-decreasing-or-replaced-in-nepal","title":"3. Is Provident Fund (PF) decreasing or replaced in Nepal?","text":"<ul> <li>In government and public sectors, PF is still in use, often managed by EPF (Employees Provident Fund).</li> <li>In the private sector, PF is less common now and SSF is replacing it in many cases.</li> <li>If a private company registers in SSF, it generally does not need to contribute to PF.</li> </ul>"},{"location":"migration/nepal/information/#4-as-a-developer-what-should-you-know-or-do","title":"4. As a developer, what should you know or do?","text":"<p>If you're an employee:</p> <ul> <li> <p>Ask HR: \"Is our company enrolled in SSF?\"</p> <ul> <li>If yes, you\u2019ll have 20% of your basic salary contributed by your employer into SSF, and 11% deducted from your side.</li> <li>You\u2019ll get social benefits like pension, medical, maternity, unemployment, etc.</li> </ul> </li> <li> <p>You can also optionally invest in CIT or EPF, often used for tax saving.</p> </li> </ul> <p>If you're a founder/employer:</p> <ul> <li>You\u2019re legally required to register in SSF once you enroll any employees.</li> <li>You must contribute 20% of each employee\u2019s basic salary to SSF (out of company\u2019s funds), and deduct 11% from employee\u2019s basic salary.</li> </ul>"},{"location":"migration/nepal/information/#summary","title":"Summary:","text":"Name Compulsory? For whom? Common in Private Sector? Remarks SSF Yes, once registered All private employees Increasingly common Covers many benefits CIT No Voluntary for anyone Optional Good for tax savings PF/EPF No Mostly public sector Rare in private Being replaced by SSF \ud83d\udccc Final Tip <ul> <li>If you\u2019re looking for tax savings + flexibility, go with CIT.</li> <li>If you want long-term benefits (pension, insurance, maternity, etc.), SSF is more comprehensive \u2014 but it\u2019s rigid and long-term.</li> </ul>"},{"location":"migration/nepal/personal/","title":"Personal","text":""},{"location":"migration/nepal/personal/#personal","title":"Personal","text":"<p>\ud83d\uded1 Option 1: If You Want to Politely Decline the Interview</p> <p>Here\u2019s a professional message you can send via email or LinkedIn:</p> <p>Subject: Interview Decline \u2013 [Your Full Name]</p> <p>Hi [Interviewer\u2019s Name / Hiring Manager],</p> <p>Thank you very much for considering me for the opportunity at [Company Name]. I truly appreciate the invitation to interview and the time taken to review my application.</p> <p>After careful consideration of my current goals and direction, I\u2019ve decided not to move forward with the process at this time. I wish you and the team continued success and appreciate your understanding.</p> <p>Warm regards, [Your Full Name]</p> <p>\ud83e\udd1d Option 2: If You Plan to Attend the Interview, Ask These Questions</p> <p>Use the interview to evaluate them \u2014 not just the other way around.</p> <p>\ud83d\udccb Questions to Ask:</p> <ol> <li> <p>Team &amp; Projects</p> </li> <li> <p>\u201cWhat kind of projects would I be working on initially?\u201d</p> </li> <li> <p>\u201cAre there any opportunities for me to lead or mentor team members?\u201d</p> </li> <li> <p>Work Environment</p> </li> <li> <p>\u201cCan you tell me about the company culture and work-life balance?\u201d</p> </li> <li> <p>\u201cWhat are the core working hours and is remote work an option?\u201d</p> </li> <li> <p>Compensation &amp; Benefits</p> </li> <li> <p>\u201cWhat does the benefits package look like\u2014paid leave, insurance, bonuses?\u201d</p> </li> <li> <p>\u201cHow often are performance reviews and salary revisions conducted?\u201d</p> </li> <li> <p>Career Growth</p> </li> <li> <p>\u201cHow does the company support skill development or promotions?\u201d</p> </li> <li> <p>\u201cIs there a clear growth path for someone at my experience level?\u201d</p> </li> <li> <p>Retention</p> </li> <li> <p>\u201cWhat\u2019s the average tenure of employees here?\u201d</p> </li> <li>\ud83e\udde0 If they\u2019re vague or evasive \u2014 that\u2019s a red flag. Trust your instincts.</li> </ol> <p>Here\u2019s a tailored breakdown to help you with your job search as a 2+ years experience React developer based in Kathmandu.</p>"},{"location":"migration/nepal/personal/#1-expected-salary-range","title":"1. Expected Salary Range","text":"<p>Based on multiple data sources:</p> <ul> <li>Glassdoor reports an average React Developer salary of NPR\u00a042,083/month in Kathmandu, with a typical range from NPR\u00a037K\u201352K/month</li> </ul> <p>Glassdoor.</p> <ul> <li>Reddit discussions from local developers indicate:</li> </ul> <p>\u201cJunior: 25k\u201335k; Mid: 45k\u201365k; Senior: 70k+\u201d and \u201c30\u201340k is okay\u201d as a starting point for juniors</p> <p>Reddit.</p> <p>Conclusion: With 2+ years of experience, you\u2019re likely in the mid-level bracket, which typically corresponds to NPR\u00a045K\u201365K/month, and potentially higher depending on company and role.</p>"},{"location":"migration/nepal/personal/#2-active-job-openings-in-kathmandu-reactreactjs","title":"2. Active Job Openings in Kathmandu (React/ReactJS)","text":""},{"location":"migration/nepal/personal/#3-community-insight-strategy","title":"3. Community Insight &amp; Strategy","text":"<p>Reddit users offer valuable local insight:</p> <p>\u201cJunior: 25k\u201335k; Mid: 45k\u201365k; Senior: 70k+\u201d \u201c30\u201340k is okay\u201d for starting devs</p> <p>Reddit.</p> <p>To stand out:</p> <ul> <li>Build a strong portfolio and maintain active GitHub/personal website.</li> <li>Leverage LinkedIn and Facebook tech groups to connect with recruiters and hiring managers</li> </ul> <p>Reddit.</p>"},{"location":"migration/nepal/rights/","title":"Rights","text":""},{"location":"migration/nepal/rights/#rights","title":"Rights","text":"<p>When working in an IT company\u2014whether you're a developer, tester, support engineer, or in another tech role\u2014it's very important to know your basic employment rights. These can vary slightly by country, but there are several fundamental rights that are widely recognized and protected in most professional work environments.</p> <p>Here\u2019s a practical list of compulsory rights every IT employee should know:</p>"},{"location":"migration/nepal/rights/#universal","title":"Universal","text":""},{"location":"migration/nepal/rights/#1-right-to-a-clear-employment-contract","title":"1. Right to a Clear Employment Contract","text":"<ul> <li>You should receive a written offer letter or employment agreement.</li> <li> <p>It must clearly define:</p> <ul> <li>Job role and responsibilities</li> <li>Working hours and location</li> <li>Salary and benefits</li> <li>Notice period</li> <li>Leave policies</li> </ul> </li> </ul>"},{"location":"migration/nepal/rights/#2-right-to-fair-working-hours","title":"2. Right to Fair Working Hours","text":"<ul> <li>Normal working hours: Usually 8\u20139 hours/day and 40\u201345 hours/week.</li> <li>Rest day: At least one day off per week is mandatory (e.g., Sunday).</li> <li> <p>Overtime:</p> <ul> <li>Should be compensated (either paid or with time-off in lieu).</li> <li>In many countries, employees can\u2019t be forced to work overtime regularly.</li> </ul> </li> </ul>"},{"location":"migration/nepal/rights/#3-right-to-salary-on-time","title":"3. Right to Salary on Time","text":"<ul> <li>Salaries must be paid on the agreed date, usually monthly.</li> <li>Payslips should be provided, showing breakdowns (basic, HRA, tax, etc.).</li> <li>Unlawful salary deductions are not allowed (except taxes, provident fund, etc.).</li> </ul>"},{"location":"migration/nepal/rights/#4-right-to-leave","title":"4. Right to Leave","text":"<p>Most IT employees are entitled to:</p> <ul> <li>Paid Annual Leave (Casual + Earned Leave): Usually 15\u201330 days/year</li> <li>Sick Leave: Usually 5\u201310 days/year</li> <li>Public Holidays: As per company calendar</li> <li>Maternity Leave: ~26 weeks in India; varies in other countries</li> <li>Paternity Leave: Less common but increasingly offered.</li> </ul>"},{"location":"migration/nepal/rights/#5-right-to-a-safe-work-environment","title":"5. Right to a Safe Work Environment","text":"<ul> <li> <p>Includes protection from:</p> <ul> <li>Harassment or discrimination</li> <li>Unreasonable stress or pressure</li> </ul> </li> <li> <p>Internal Complaints Committees (ICC) must be in place for sexual harassment issues (under POSH Act in India).</p> </li> <li> <p>Remote work must also respect work-life boundaries (no 24/7 demands).</p> </li> </ul>"},{"location":"migration/nepal/rights/#6-right-to-resign-and-proper-notice","title":"6. Right to Resign and Proper Notice","text":"<ul> <li>You can resign by giving notice (as per contract, usually 30\u201390 days).</li> <li>Employers cannot withhold your experience letter, relieving letter, or full-and-final settlement without valid reason.</li> </ul>"},{"location":"migration/nepal/rights/#7-right-to-non-discrimination","title":"7. Right to Non-Discrimination","text":"<ul> <li>You cannot be discriminated against based on gender, religion, caste, age, disability, or sexual orientation.</li> <li>Promotions, appraisals, and assignments should be fair and transparent.</li> </ul>"},{"location":"migration/nepal/rights/#8-right-to-be-informed-about-company-policies","title":"8. Right to Be Informed About Company Policies","text":"<p>You must have access to:</p> <ul> <li>Leave policy</li> <li>Attendance and work-hour rules</li> <li>Appraisal policy</li> <li>Disciplinary procedures</li> <li>Code of conduct</li> </ul>"},{"location":"migration/nepal/rights/#9-right-to-work-life-balance-especially-post-covid","title":"9. Right to Work-Life Balance (Especially Post-COVID)","text":"<ul> <li>Right to disconnect after working hours (being respected more widely now).</li> <li>Flexible working hours and remote work options (if promised or applicable).</li> </ul>"},{"location":"migration/nepal/rights/#10-right-to-grievance-redressal","title":"10. Right to Grievance Redressal","text":"<p>You should be able to:</p> <ul> <li>Raise issues to your manager or HR</li> <li>File complaints formally if needed</li> <li>Seek legal help if rights are violated</li> </ul>"},{"location":"migration/nepal/rights/#bonus-what-to-do-if-rights-are-violated","title":"\ud83d\udcac Bonus: What to Do If Rights Are Violated?","text":"<ol> <li>Document everything (emails, chat messages, policies).</li> <li>Raise it to HR or a higher manager.</li> <li> <p>Use legal channels:</p> <ul> <li>Labor commissioner (in India)</li> <li>EEOC (in the US)</li> <li>ACAS (in the UK)</li> </ul> </li> <li> <p>Don\u2019t quit without getting proper dues, unless absolutely necessary.</p> </li> </ol>"},{"location":"migration/nepal/rights/#nepal","title":"Nepal","text":"<p>Since you're working in Nepal, here's a breakdown of your compulsory rights as an IT employee, based on the Labour Act of Nepal (2017) and current practices in Nepalese IT companies.</p> <p>\ud83c\uddf3\ud83c\uddf5 Compulsory Employee Rights in Nepal (Including IT Sector)</p>"},{"location":"migration/nepal/rights/#1-written-employment-contract-appointment-letter","title":"1. Written Employment Contract (Appointment Letter)","text":"<ul> <li>Your employer must provide a written contract.</li> <li> <p>It should clearly state:</p> <ul> <li>Job role</li> <li>Working hours</li> <li>Salary and benefits</li> <li>Leave provisions</li> <li>Notice period</li> </ul> </li> <li> <p>Tip: Always ask for this if not provided. It\u2019s your legal right.</p> </li> </ul>"},{"location":"migration/nepal/rights/#2-working-hours-overtime","title":"2. Working Hours &amp; Overtime","text":"<ul> <li> <p>Normal hours: 8 hours/day, 48 hours/week.</p> </li> <li> <p>Overtime: Maximum 4 extra hours/day and 24 hours/week.</p> </li> <li> <p>Must be voluntary and paid at 1.5x regular pay.</p> </li> </ul>"},{"location":"migration/nepal/rights/#3-weekly-rest-and-holidays","title":"3. Weekly Rest and Holidays","text":"<pre><code>You are entitled to at least 1 day off per week (usually Sunday).\n\n13 paid public holidays (minimum), including Dashain, Tihar, etc.\n\nAdditional leave for women during menstruation (1 day/month optional, unpaid unless company policy provides pay).\n</code></pre>"},{"location":"migration/nepal/rights/#4-leave-entitlements","title":"4. Leave Entitlements","text":"<p>\u2022 Annual Leave:</p> <pre><code>1 day leave for every 20 days worked (about 15 days/year)\n</code></pre> <p>\u2022 Sick Leave:</p> <pre><code>12 days per year (with medical proof if over 3 days)\n</code></pre> <p>\u2022 Casual Leave:</p> <pre><code>13 days per year\n</code></pre> <p>\u2022 Maternity Leave:</p> <pre><code>98 days total, 60 days paid by employer (can take before/after delivery)\n\nEmployers cannot terminate a woman due to pregnancy\n</code></pre> <p>\u2022 Paternity Leave:</p> <pre><code>15 days (recently introduced for civil servants; some private companies now follow it voluntarily)\n</code></pre>"},{"location":"migration/nepal/rights/#5-salary-and-benefits","title":"5. Salary and Benefits","text":"<pre><code>Must be paid monthly and on time (usually by 7th of next month).\n\nEmployer must:\n\n    Deduct taxes at source\n\n    Deposit Social Security Fund (SSF) contributions if enrolled\n\nMinimum wage (2024\u201325): NPR 17,300/month (subject to change)\n</code></pre> <p>\u2705 6. Social Security Fund (SSF)</p> <pre><code>Many IT companies in Nepal are now enrolled.\n\nIncludes:\n\n    Medical, maternity, accident, and retirement coverage\n\nTotal contribution:\n\n    20% of your basic salary (11% employer + 9% employee)\n</code></pre> <p>\u2705 7. Right to Safe and Respectful Workplace</p> <pre><code>Employers must ensure a workplace free from:\n\n    Sexual harassment\n\n    Discrimination\n\n    Unjust firing or mistreatment\n\nInternal complaint mechanism is required under Safe Workplace Directive.\n</code></pre> <p>\u2705 8. Right to Resignation &amp; Termination Protection</p> <pre><code>You can resign by giving written notice (notice period usually 30 days).\n\nEmployer cannot terminate you:\n\n    Without valid reason\n\n    Without notice\n\n    Without clearing dues (salary, leave encashment, etc.)\n</code></pre> <p>\u2705 9. Experience &amp; Relieving Letters</p> <pre><code>After resignation or termination, you are entitled to:\n\n    Experience letter\n\n    Relieving letter\n\n    Full and final settlement of dues\n</code></pre> <p>\u2705 10. Right to Grievance Redress</p> <p>If rights are violated:</p> <pre><code>Raise issue with HR or management\n\nFile complaint to:\n\n    Labour Office (\u0936\u094d\u0930\u092e \u0915\u093e\u0930\u094d\u092f\u093e\u0932\u092f)\n\n    Ministry of Labour, Employment and Social Security\n\n    Trade unions or legal aid bodies\n</code></pre>"},{"location":"migration/nepal/rights/#not-allowed-but-happens-sometimes-in-it-firms","title":"\ud83d\udeab Not Allowed (But Happens Sometimes in IT Firms)","text":"Practice Legal? Notes Forcing work on Sunday without pay \u274c No Must compensate with time-off or overtime No contract given \u274c No Appointment letter is legally required Delaying salary for months \u274c No Salaries must be paid on time Threatening with firing for resigning \u274c No You have the right to resign without threats <p>\ud83d\udd0d Useful Contacts &amp; Links</p> <pre><code>Labour Office Kathmandu: https://moless.gov.np\n\nSocial Security Fund (SSF): https://ssf.gov.np\n\nLabour Act (2017) PDF: Click here\n</code></pre>"},{"location":"migration/nodejs/nodejs-module-types/","title":"Module Type","text":""},{"location":"migration/nodejs/nodejs-module-types/#nodejs-module-types-history-and-usage","title":"Node.js Module Types: History and Usage","text":"<p>Node.js supports two primary module systems: CommonJS (CJS) and ECMAScript Modules (ESM). Understanding their history and usage is key for writing modern, maintainable Node.js applications.</p>"},{"location":"migration/nodejs/nodejs-module-types/#history-of-module-types-in-nodejs","title":"\ud83d\udd70\ufe0f History of Module Types in Node.js","text":""},{"location":"migration/nodejs/nodejs-module-types/#commonjs-cjs","title":"\ud83d\udce6 CommonJS (CJS)","text":"<ul> <li>Introduced: When Node.js was first released (circa 2009)</li> <li>Purpose: Provide a synchronous module system for server-side JavaScript</li> <li>Key Features:</li> <li>Uses <code>require()</code> and <code>module.exports</code></li> <li>Synchronous by design (ideal for server environments)</li> <li>Example:   <pre><code>const fs = require(\"fs\");\nmodule.exports = { readFile: fs.readFile };\n</code></pre></li> </ul> <p>CommonJS became the default module system in Node.js for many years.</p>"},{"location":"migration/nodejs/nodejs-module-types/#ecmascript-modules-esm","title":"\ud83c\udf10 ECMAScript Modules (ESM)","text":"<ul> <li>Introduced: Experimental support in Node.js v8.5 (2017)</li> <li>Stable: Node.js v12+ (2020)</li> <li>Purpose: Align Node.js with the JavaScript ES6 module standard used in browsers</li> <li>Key Features:</li> <li>Uses <code>import</code> and <code>export</code></li> <li>Asynchronous module loading</li> <li>Strict mode by default</li> <li>Example:   <pre><code>import fs from \"fs\";\nexport const readFile = fs.promises.readFile;\n</code></pre></li> </ul> <p>ESM brings compatibility with front-end tooling and modern JavaScript syntax.</p>"},{"location":"migration/nodejs/nodejs-module-types/#how-to-choose-a-module-type","title":"\ud83d\udcc2 How to Choose a Module Type","text":"Use Case Recommendation Syntax Legacy projects CommonJS (<code>require</code>) <code>require()</code> Browser-compatible code ES Modules (<code>import</code>) <code>import</code> Working with modern JS tooling ES Modules (<code>import</code>) <code>import</code> Full-stack apps (shared modules) ES Modules (<code>import</code>) <code>import</code>"},{"location":"migration/nodejs/nodejs-module-types/#how-to-enable-es-modules-in-nodejs","title":"\u2699\ufe0f How to Enable ES Modules in Node.js","text":"<p>To use ES modules:</p>"},{"location":"migration/nodejs/nodejs-module-types/#option-1-add-type-module-in-packagejson","title":"Option 1: Add <code>\"type\": \"module\"</code> in <code>package.json</code>","text":"<pre><code>{\n  \"type\": \"module\"\n}\n</code></pre> <p>Then you can use <code>.js</code> extensions with <code>import/export</code>.</p>"},{"location":"migration/nodejs/nodejs-module-types/#option-2-use-mjs-file-extensions","title":"Option 2: Use <code>.mjs</code> file extensions","text":"<pre><code>node app.mjs\n</code></pre> <p>This tells Node to treat the file as an ES module, even without <code>\"type\": \"module\"</code> in your package.</p>"},{"location":"migration/nodejs/nodejs-module-types/#key-differences-between-commonjs-and-esm","title":"\u26a0\ufe0f Key Differences Between CommonJS and ESM","text":"Feature CommonJS (CJS) ES Modules (ESM) Import syntax <code>require()</code> <code>import</code> Export syntax <code>module.exports</code> <code>export</code> Execution Synchronous Asynchronous <code>this</code> at top level <code>{}</code> <code>undefined</code> File extension <code>.js</code> <code>.js</code> or <code>.mjs</code> Compatibility Legacy-first Modern JS"},{"location":"migration/nodejs/nodejs-module-types/#when-to-use-each","title":"\u2705 When to Use Each","text":""},{"location":"migration/nodejs/nodejs-module-types/#use-commonjs-if","title":"Use CommonJS if:","text":"<ul> <li>You're maintaining or extending an older Node.js codebase</li> <li>You rely on a package that only supports CommonJS</li> <li>You need synchronous loading for quick scripts</li> </ul>"},{"location":"migration/nodejs/nodejs-module-types/#use-es-modules-if","title":"Use ES Modules if:","text":"<ul> <li>You're starting a new project</li> <li>You want compatibility with front-end tools (like Webpack, Vite)</li> <li>You're using modern JavaScript features (e.g., top-level <code>await</code>, <code>import.meta</code>)</li> </ul>"},{"location":"migration/nodejs/nodejs-module-types/#compatibility-notes","title":"\ud83e\uddea Compatibility Notes","text":"<ul> <li>You cannot mix CJS and ESM syntax in the same file</li> <li>To import CJS from ESM: use <code>import pkg from 'pkg'</code></li> <li>To import ESM from CJS: use dynamic <code>import('pkg')</code></li> </ul>"},{"location":"migration/nodejs/nodejs-module-types/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Node.js Docs \u2013 Modules: CommonJS</li> <li>Node.js Docs \u2013 ECMAScript Modules</li> <li>MDN \u2013 ES6 Modules</li> </ul>"},{"location":"migration/nodejs/overview/","title":"Overview","text":""},{"location":"migration/nodejs/overview/#overview","title":"Overview","text":"test.js<pre><code>const arrow = () =&gt; console.log(\"arrow:\", this);\nfunction regular() {\n  console.log(\"regular:\", this);\n}\n\narrow();\nregular();\n</code></pre> <pre><code>node test.js\n# Output:\n# arrow: {}\n# regular: [object global]\n</code></pre>"},{"location":"migration/nodejs/overview/#in-nodejs","title":"\ud83d\udc49 In Node.js:","text":"<ul> <li>Arrow functions do not have their own <code>this</code>.</li> <li>At the top level of a Node module, <code>this</code> is <code>undefined</code> when in strict mode (which modules are by default).</li> </ul>"},{"location":"migration/nodejs/overview/#1-in-es-modules-type-module-or-mjs","title":"\ud83d\udcc1 1. In ES Modules (<code>type: module</code> or <code>.mjs</code>)","text":"<p>All code is in strict mode by default.</p> Arrow function<pre><code>const arrow = () =&gt; {\n  console.log(this);\n};\n\narrow(); // \u27a1\ufe0f undefined\n</code></pre> Traditional function<pre><code>function regular() {\n  console.log(this);\n}\n\nregular(); // \u27a1\ufe0f undefined\n</code></pre> <p>\u2705 Both give <code>undefined</code> because:</p> <ul> <li>Strict mode is enabled.</li> <li><code>this</code> is not bound to <code>global</code>.</li> </ul>"},{"location":"migration/nodejs/overview/#2-in-commonjs-modules-default-in-nodejs-if-no-type-module","title":"\ud83d\udcc1 2. In CommonJS Modules (default in Node.js if no <code>type: module</code>)","text":"<p>At the top level, <code>this</code> is not <code>undefined</code>, but points to <code>module.exports</code>.</p> Arrow function<pre><code>const arrow = () =&gt; {\n  console.log(this);\n};\n\narrow(); // \u27a1\ufe0f {}\n</code></pre> Traditional function<pre><code>function regular() {\n  console.log(this);\n}\n\nregular(); // \u27a1\ufe0f global (in non-strict mode), undefined (in strict)\n</code></pre> <p>But if you're not in strict mode, traditional functions at the top level point to the <code>global</code> object:</p> <pre><code>\"use strict\"; // Add this for strict mode\nfunction regular() {\n  console.log(this);\n}\n\nregular(); // \u27a1\ufe0f undefined (with 'use strict')\n</code></pre>"},{"location":"migration/nodejs/overview/#key-difference-arrow-vs-traditional","title":"\ud83d\udd04 Key Difference: Arrow vs Traditional","text":"<ul> <li>Arrow functions don't have their own <code>this</code>. They inherit it from where they're defined.</li> <li>Traditional functions get <code>this</code> dynamically based on how they're called.</li> </ul>"},{"location":"migration/nodejs/overview/#recommendation-for-nodejs","title":"\u2705 Recommendation for Node.js","text":"<ul> <li>Be aware of module type: ES module vs CommonJS</li> <li>Avoid relying on <code>this</code> at the top level</li> <li>Use <code>console.log(this)</code> inside both kinds of functions to test in your actual module context</li> </ul>"},{"location":"migration/prototype-stack/modified/","title":"Modified","text":""},{"location":"migration/prototype-stack/modified/#modified","title":"Modified","text":"<p>You don\u2019t strictly need SWR when using Next.js, as Next.js provides built-in data-fetching methods that can cover many use cases. However, whether SWR is beneficial depends on your specific needs. Let\u2019s break it down:</p>"},{"location":"migration/prototype-stack/modified/#nextjs-data-fetching-without-swr","title":"Next.js Data Fetching (Without SWR)","text":"<p>Next.js offers powerful data-fetching options that might make SWR unnecessary:</p> <ul> <li>Server-Side Rendering (<code>getServerSideProps</code>): Fetches data on each request, ideal for dynamic content.</li> <li>Static Site Generation (<code>getStaticProps</code>): Fetches data at build time or during revalidation (Incremental Static Regeneration).</li> <li>App Router with Server Components: In Next.js 13+, React Server Components allow server-side data fetching directly in components, reducing client-side JavaScript.</li> <li>API Routes: You can create custom API endpoints for fetching data.</li> <li>Client-Side Fetching: Use <code>fetch</code> or libraries like <code>axios</code> with React\u2019s <code>useEffect</code> for client-side data.</li> </ul> <p>For example, fetching Supabase data in a Server Component (<code>app/page.tsx</code>):</p> tsx<pre><code>import { supabase } from \"../lib/supabase\";\n\nexport default async function Page() {\n  const { data } = await supabase.from(\"your-table\").select(\"*\");\n  return (\n    &lt;div&gt;\n      {data?.map((item: any) =&gt; (\n        &lt;div key={item.id}&gt;{item.name}&lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>This approach is simple, server-rendered, and requires no additional library.</p>"},{"location":"migration/prototype-stack/modified/#when-swr-makes-sense","title":"When SWR Makes Sense","text":"<p>SWR (stale-while-revalidate) shines in specific scenarios, especially for client-side data fetching:</p> <ul> <li>Optimistic UI Updates: SWR makes it easy to update the UI instantly while syncing with the server in the background.</li> <li>Automatic Revalidation: SWR revalidates data on focus, reconnect, or intervals, ensuring fresh data without manual effort.</li> <li>Caching: SWR caches responses, reducing redundant requests for frequently accessed data.</li> <li>Real-Time Needs: If you\u2019re using Supabase\u2019s real-time subscriptions (e.g., for live updates), SWR can complement this by managing client-side state efficiently.</li> <li>Complex Client-Side Interactions: For highly interactive UIs (e.g., infinite scroll, polling), SWR simplifies data management compared to <code>useEffect</code> and <code>fetch</code>.</li> </ul> <p>Example with SWR for real-time Supabase data:</p> tsx<pre><code>\"use client\";\nimport useSWR from \"swr\";\nimport { supabase } from \"../lib/supabase\";\n\nconst fetcher = async () =&gt; {\n  const { data } = await supabase.from(\"your-table\").select(\"*\");\n  return data;\n};\n\nexport default function Page() {\n  const { data, error, mutate } = useSWR(\"your-table\", fetcher);\n\n  // Subscribe to Supabase real-time changes\n  useEffect(() =&gt; {\n    const channel = supabase\n      .channel(\"table-changes\")\n      .on(\n        \"postgres_changes\",\n        { event: \"*\", schema: \"public\", table: \"your-table\" },\n        () =&gt; {\n          mutate(); // Revalidate on change\n        }\n      )\n      .subscribe();\n    return () =&gt; {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n\n  if (error) return &lt;div&gt;Error&lt;/div&gt;;\n  if (!data) return &lt;div&gt;Loading...&lt;/div&gt;;\n  return (\n    &lt;div&gt;\n      {data.map((item: any) =&gt; (\n        &lt;div key={item.id}&gt;{item.name}&lt;/div&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"migration/prototype-stack/modified/#do-you-need-swr","title":"Do You Need SWR?","text":"<ul> <li>If your app is mostly server-rendered/static: Stick with Next.js\u2019s <code>getServerSideProps</code>, <code>getStaticProps</code>, or Server Components. These are often sufficient for fetching Supabase data and rendering with Ant Design components.</li> <li>If you need client-side fetching with minimal setup: Use <code>fetch</code> with <code>useEffect</code> or React Query instead of SWR, unless you specifically want SWR\u2019s stale-while-revalidate strategy.</li> <li>If you need real-time or frequent client-side updates: SWR is a great fit, especially with Supabase\u2019s real-time features, as it simplifies revalidation and caching.</li> </ul>"},{"location":"migration/prototype-stack/modified/#your-stack-context","title":"Your Stack Context","text":"<p>Since you\u2019re using Supabase (backend with potential real-time needs), Ant Design (UI components), and Next.js (foundation), SWR could be valuable if:</p> <ul> <li>You\u2019re building interactive, client-heavy features (e.g., live dashboards, collaborative tools).</li> <li>You want to leverage Supabase\u2019s real-time subscriptions with minimal boilerplate.</li> <li>You prefer SWR\u2019s DX (developer experience) for client-side data over managing <code>useEffect</code>.</li> </ul> <p>However, if your app leans toward server-side rendering or static generation (e.g., a content-heavy site), Next.js\u2019s built-in methods can handle Supabase queries directly, and SWR might add unnecessary complexity.</p>"},{"location":"migration/prototype-stack/modified/#recommendation","title":"Recommendation","text":"<ul> <li>Skip SWR if you\u2019re primarily using server-side rendering or static generation with Next.js and Supabase. Use Server Components or <code>getServerSideProps</code> for simplicity.</li> <li>Use SWR if you need client-side, real-time, or optimistic updates, as it pairs well with Supabase and Ant Design for dynamic UIs.</li> </ul> <p>If you share more about your app (e.g., real-time needs, page types), I can refine this further! For now, you can install SWR with <code>pnpm add swr</code> (as shown earlier) if you decide to use it, but it\u2019s optional with Next.js.</p>"},{"location":"migration/prototype-stack/modified/#folder-structure","title":"Folder Structure","text":""},{"location":"migration/prototype-stack/modified/#1-typescript-nodejs-backend-eg-express-with-typescript","title":"1. TypeScript Node.js Backend (e.g., Express with TypeScript)","text":"<p>For a backend prototype, the structure emphasizes separation of concerns (controllers, services, models, etc.) and TypeScript configuration.</p> <pre><code>/project-root\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /controllers        # Request handlers (API logic)\n\u2502   \u2502   \u2514\u2500\u2500 userController.ts\n\u2502   \u251c\u2500\u2500 /services          # Business logic\n\u2502   \u2502   \u2514\u2500\u2500 userService.ts\n\u2502   \u251c\u2500\u2500 /models            # Data models (e.g., database schemas)\n\u2502   \u2502   \u2514\u2500\u2500 userModel.ts\n\u2502   \u251c\u2500\u2500 /routes            # API route definitions\n\u2502   \u2502   \u2514\u2500\u2500 userRoutes.ts\n\u2502   \u251c\u2500\u2500 /middleware        # Custom middleware (e.g., auth, error handling)\n\u2502   \u2502   \u2514\u2500\u2500 authMiddleware.ts\n\u2502   \u251c\u2500\u2500 /utils             # Helper functions and utilities\n\u2502   \u2502   \u2514\u2500\u2500 logger.ts\n\u2502   \u251c\u2500\u2500 /config            # Configuration files (e.g., DB, env)\n\u2502   \u2502   \u2514\u2500\u2500 dbConfig.ts\n\u2502   \u251c\u2500\u2500 /types             # Custom TypeScript type definitions\n\u2502   \u2502   \u2514\u2500\u2500 index.d.ts\n\u2502   \u2514\u2500\u2500 app.ts             # Entry point (Express setup)\n\u251c\u2500\u2500 /tests                 # Unit and integration tests\n\u2502   \u251c\u2500\u2500 /unit\n\u2502   \u2502   \u2514\u2500\u2500 userService.test.ts\n\u2502   \u2514\u2500\u2500 /integration\n\u2502       \u2514\u2500\u2500 userRoutes.test.ts\n\u251c\u2500\u2500 /dist                  # Compiled JavaScript output\n\u251c\u2500\u2500 .env                   # Environment variables\n\u251c\u2500\u2500 tsconfig.json          # TypeScript configuration\n\u251c\u2500\u2500 package.json           # Node.js dependencies and scripts\n\u251c\u2500\u2500 README.md              # Project documentation\n\u2514\u2500\u2500 .gitignore             # Git ignore file\n</code></pre> Key Notes: <ul> <li><code>tsconfig.json</code> configures TypeScript (e.g., target, module, outDir as dist).</li> <li><code>src</code> contains all TypeScript source code.</li> <li><code>dist</code> holds compiled JavaScript files for production.</li> <li>Use <code>npm run build</code> (tsc) to compile and <code>npm start</code> (node dist/app.js) to run.</li> </ul>"},{"location":"migration/prototype-stack/modified/#2-typescript-react-frontend","title":"2. TypeScript React Frontend","text":"<p>For a frontend prototype using React with TypeScript, the structure focuses on components, hooks, and assets.</p> <pre><code>/project-root\n\u251c\u2500\u2500 /public                # Static assets (e.g., favicon, manifest)\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /components        # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 /common\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Button.tsx\n\u2502   \u2502   \u2514\u2500\u2500 /feature\n\u2502   \u2502       \u2514\u2500\u2500 UserCard.tsx\n\u2502   \u251c\u2500\u2500 /pages             # Page components (mapped to routes)\n\u2502   \u2502   \u251c\u2500\u2500 Home.tsx\n\u2502   \u2502   \u2514\u2500\u2500 Profile.tsx\n\u2502   \u251c\u2500\u2500 /hooks             # Custom React hooks\n\u2502   \u2502   \u2514\u2500\u2500 useAuth.ts\n\u2502   \u251c\u2500\u2500 /context           # React context for state management\n\u2502   \u2502   \u2514\u2500\u2500 AuthContext.ts\n\u2502   \u251c\u2500\u2500 /services          # API calls and external services\n\u2502   \u2502   \u2514\u2500\u2500 api.ts\n\u2502   \u251c\u2500\u2500 /utils             # Helper functions\n\u2502   \u2502   \u2514\u2500\u2500 formatDate.ts\n\u2502   \u251c\u2500\u2500 /types             # TypeScript type definitions\n\u2502   \u2502   \u2514\u2500\u2500 user.d.ts\n\u2502   \u251c\u2500\u2500 /assets            # Images, fonts, etc.\n\u2502   \u2502   \u2514\u2500\u2500 logo.png\n\u2502   \u251c\u2500\u2500 /styles            # CSS/SCSS files or styled-components\n\u2502   \u2502   \u2514\u2500\u2500 global.css\n\u2502   \u251c\u2500\u2500 App.tsx            # Root component\n\u2502   \u251c\u2500\u2500 index.tsx          # Entry point (ReactDOM.render)\n\u2502   \u2514\u2500\u2500 routes.tsx         # Route definitions (e.g., react-router)\n\u251c\u2500\u2500 /tests                 # Unit and component tests\n\u2502   \u2514\u2500\u2500 Button.test.tsx\n\u251c\u2500\u2500 tsconfig.json          # TypeScript configuration\n\u251c\u2500\u2500 package.json           # Dependencies and scripts\n\u251c\u2500\u2500 README.md              # Project documentation\n\u2514\u2500\u2500 .gitignore             # Git ignore file\n</code></pre> Key Notes: <ul> <li><code>tsconfig.json</code> is configured for React (e.g., <code>jsx: \"react-jsx\"</code>).</li> <li>Use <code>components</code> for reusable UI pieces and <code>pages</code> for route-specific components. <code>services</code> handles API calls (e.g., using Axios or Fetch).</li> <li>Testing uses tools like Jest or React Testing Library.</li> </ul>"},{"location":"migration/prototype-stack/modified/#combined-full-stack-prototype","title":"Combined Full-Stack Prototype","text":"<p>If your prototype stack includes both a backend and frontend, you can organize them in a monorepo:</p> <pre><code>/project-root\n\u251c\u2500\u2500 /backend               # Node.js + TypeScript backend\n\u2502   \u251c\u2500\u2500 /src\n\u2502   \u2502   \u251c\u2500\u2500 /controllers\n\u2502   \u2502   \u251c\u2500\u2500 /services\n\u2502   \u2502   \u251c\u2500\u2500 /models\n\u2502   \u2502   \u2514\u2500\u2500 app.ts\n\u2502   \u251c\u2500\u2500 tsconfig.json\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 /frontend              # React + TypeScript frontend\n\u2502   \u251c\u2500\u2500 /src\n\u2502   \u2502   \u251c\u2500\u2500 /components\n\u2502   \u2502   \u251c\u2500\u2500 /pages\n\u2502   \u2502   \u251c\u2500\u2500 /services\n\u2502   \u2502   \u2514\u2500\u2500 App.tsx\n\u2502   \u251c\u2500\u2500 /public\n\u2502   \u251c\u2500\u2500 tsconfig.json\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 /shared                # Shared types, utilities, or models\n\u2502   \u2514\u2500\u2500 types.d.ts\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 package.json           # Root-level monorepo scripts\n</code></pre> Key Notes: <ul> <li>Use <code>shared</code> for common types or utilities to avoid duplication.</li> <li>Each subfolder (<code>backend</code>, <code>frontend</code>) has its own <code>package.json</code> and <code>tsconfig.json</code>.</li> <li>Tools like Yarn Workspaces or Nx can manage monorepos efficiently.</li> </ul>"},{"location":"migration/prototype-stack/overview/","title":"Overview","text":""},{"location":"migration/prototype-stack/overview/#overview","title":"Overview","text":"<pre><code>The Prototype Stack:\n\nRemix as the foundation\nSupabase as the backend\nStale-While-Revalidate (SWR) as the data-fetching library\nAnt Design as the styling library\n</code></pre>"},{"location":"migration/prototype-stack/overview/#implications-for-your-prototype-stack","title":"Implications for Your Prototype Stack","text":"Aspect Remix (Current) Next.js (If Replaced) Routing Nested, route-centric, better for complex UI File-based, simpler but less granular Data Fetching Loaders fetch data before render, less flicker Supports SSR, SSG, ISR, more flexible Performance Optimized for dynamic content, progressive enhancement Good for static and dynamic, but dynamic slower at scale Form Handling Native HTML forms, less client JS needed More client-side JS, explicit revalidation Build Time Near-instant, scalable Increases with app size Ecosystem Smaller, growing Large, mature Developer Experience More control, steeper learning curve Easier to start, more features out-of-the-box"},{"location":"migration/python/custom-django-app-structure/","title":"Django App Structure","text":""},{"location":"migration/python/custom-django-app-structure/#django-app-structure","title":"Django App Structure","text":""},{"location":"migration/python/custom-django-app-structure/#app-structure","title":"App Structure","text":"<ol> <li> <p>Create the app:</p> <pre><code>python manage.py startapp &lt;your-app-name&gt;\n</code></pre> </li> <li> <p>Add it to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</p> </li> <li> <p>Add the files we defined:</p> <ul> <li><code>&lt;your-app-name&gt;/models.py</code> (Message model).</li> <li><code>&lt;your-app-name&gt;/serializers.py</code> (REST API serializer).</li> <li><code>&lt;your-app-name&gt;/views.py</code> (API view).</li> <li><code>&lt;your-app-name&gt;/urls.py</code> (API URL patterns).</li> <li><code>&lt;your-app-name&gt;/consumers.py</code> (WebSocket consumer).</li> <li><code>&lt;your-app-name&gt;/routing.py</code> (WebSocket routing).</li> </ul> </li> <li> <p>Update <code>config/asgi.py</code> with import <code>&lt;your-app-name&gt;.routing</code>.</p> </li> </ol> <p>This matches the structure we used in the original guide.</p>"},{"location":"migration/python/django-api-image/","title":"Django API Image DOCKER","text":""},{"location":"migration/python/django-api-image/#django-api-image-dockerhub","title":"Django API Image DockerHub","text":""},{"location":"migration/python/django-api-image/#approach","title":"Approach","text":"<p>To ship both Redis and your Django Channels project in a single Docker Hub image, you\u2019d typically create a multi-service setup using Docker. However, a single Docker image usually contains just one application or service (e.g., your Django app). Including Redis inside the same image as your Django app is possible but not recommended for production because:</p> <ul> <li>It violates the \"one process per container\" Docker best practice.</li> <li>It makes scaling and debugging harder.</li> </ul> <p>Instead, the standard approach is to:</p> <ol> <li>Use Docker Compose to define and run both your Django app and Redis as separate containers in a single, coordinated setup.</li> <li>Push your Django app image to Docker Hub, while relying on the official Redis image from Docker Hub (no need to ship Redis yourself).</li> </ol> <p>I\u2019ll show you how to:</p> <ul> <li>Update your project to work with Docker Compose.</li> <li>Push your Django app image to Docker Hub.</li> <li>Use the official Redis image alongside it.</li> </ul> <p>If you really want Redis inside the same image, I\u2019ll explain that too, but I\u2019ll start with the recommended approach.</p>"},{"location":"migration/python/django-api-image/#recommended-approach-docker-compose-with-separate-images","title":"<code>Recommended Approach</code>: Docker Compose with Separate Images","text":"<p>Step 1: Update Your Project for Docker Compose</p> <ol> <li> <p>Create a <code>docker-compose.yml</code> File in your project root:</p> <pre><code>version: \"3.8\"\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: yourusername/django-channels-demo:latest\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - redis\n    environment:\n      - REDIS_HOST=redis # Matches the service name below\n    command: daphne -b 0.0.0.0 -p 8000 config.asgi:application\n\n  redis:\n    image: redis:latest\n    ports:\n      - \"6379:6379\"\n</code></pre> <ul> <li><code>app</code>: Your Django Channels service, built from the <code>Dockerfile</code>.</li> <li><code>redis</code>: The official Redis image from Docker Hub.</li> <li><code>depends_on</code>: Ensures Redis starts before your app.</li> <li><code>REDIS_HOST</code>: Environment variable to tell Django where Redis is.</li> </ul> </li> <li> <p>Update <code>settings.py</code> to Use Environment Variable: Modify <code>CHANNEL_LAYERS</code> to dynamically use the Redis host:</p> <pre><code>import os\n\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [(os.getenv('REDIS_HOST', 'localhost'), 6379)],\n        },\n    },\n}\n</code></pre> <ul> <li>Defaults to <code>localhost</code> if <code>REDIS_HOST</code> isn\u2019t set (useful for local dev without Docker).</li> </ul> </li> <li> <p>Ensure Your <code>Dockerfile</code> is Correct (from earlier):</p> dockerfile<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"daphne\", \"-b\", \"0.0.0.0\", \"-p\", \"8000\", \"config.asgi:application\"]\n</code></pre> </li> </ol> <p>Step 2: Build and Test Locally</p> <ol> <li> <p>Build and Run with Docker Compose:</p> <pre><code>docker-compose up --build\n</code></pre> <ul> <li>This builds your Django app image and starts both services.</li> <li>Access the API at <code>http://localhost:8000/api/messages/</code> and WebSocket at <code>ws://localhost:8000/ws/messages/</code>.</li> </ul> </li> <li> <p>Verify:</p> <ul> <li> <p>Test with <code>curl</code></p> <pre><code>curl -X POST http://localhost:8000/api/messages/ -H \"Content-Type: application/json\" -d '{\"content\": \"Test\"}'\n</code></pre> </li> <li> <p>Check logs:</p> <pre><code>docker-compose logs\n</code></pre> </li> </ul> </li> </ol> <p>Step 3: Push Your Django App Image to Docker Hub</p> <ol> <li> <p>Tag the Image:</p> <ul> <li> <p>The <code>image: yourusername/django-channels-demo:latest</code> line in <code>docker-compose.yml</code> sets the name. After building, tag it explicitly (optional):</p> <pre><code>docker tag django-channels-demo_app yourusername/django-channels-demo:latest\n</code></pre> </li> <li> <p><code>django-channels-demo_app</code> is the default name Docker Compose gives the app service image.</p> </li> </ul> </li> <li> <p>Log in to Docker Hub:</p> <pre><code>docker login\n</code></pre> </li> <li> <p>Push the Image:</p> <pre><code>docker push yourusername/django-channels-demo:latest\n</code></pre> </li> <li> <p>Note: You don\u2019t need to push Redis because <code>redis:latest</code> is already on Docker Hub.</p> </li> </ol> <p>Step 4: Use the Combined Setup Elsewhere</p> <ul> <li>Share the <code>docker-compose.yml</code> file with others (e.g., via <code>Git</code>).</li> <li> <p>On another machine (e.g., your office computer):</p> <ol> <li>Save <code>docker-compose.yml</code>.</li> <li> <p>Run:</p> <pre><code>docker-compose up\n</code></pre> <ul> <li>Docker Compose pulls yourusername/django-channels-demo:latest and redis:latest from Docker Hub and starts both.</li> </ul> </li> </ol> </li> </ul>"},{"location":"migration/python/django-api-image/#alternative-single-image-with-redis-and-django-not-recommended","title":"<code>Alternative</code>: Single Image with <code>Redis</code> and <code>Django</code> (Not Recommended)","text":"<p>If you insist on shipping Redis and your Django app in one Docker image:</p> <p>Step 1: Modify the Dockerfile</p> dockerfile<pre><code>FROM python:3.9-slim\n\n# Install Redis\nRUN apt-get update &amp;&amp; apt-get install -y redis-server\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n# Start Redis and Daphne in the same container\nCMD redis-server --daemonize yes &amp;&amp; daphne -b 0.0.0.0 -p 8000 config.asgi:application\n</code></pre> <ul> <li><code>redis-server --daemonize yes</code>: Runs Redis in the background.</li> <li><code>&amp;&amp;</code>: Chains the commands to start Redis, then Daphne.</li> </ul> <p>Step 2: Update <code>settings.py</code></p> <p>Ensure <code>CHANNEL_LAYERS</code>points to <code>localhost</code> since Redis runs in the same container:</p> <pre><code>CHANNEL_LAYERS = {\n  default: {\n    BACKEND: \"channels_redis.core.RedisChannelLayer\",\n    CONFIG: {\n      hosts: [(\"localhost\", 6379)],\n    },\n  },\n};\n</code></pre> <p>Step 3: Build, Push, and Run</p> <ol> <li> <p>Build:</p> <pre><code>docker build -t yourusername/django-channels-with-redis:latest .\n</code></pre> </li> <li> <p>Test:</p> <pre><code>docker run -d -p 8000:8000 yourusername/django-channels-with-redis:latest\n</code></pre> </li> <li> <p>Push:</p> <pre><code>docker push yourusername/django-channels-with-redis:latest\n</code></pre> </li> </ol> Downsides <ul> <li>Redis and Django share the same process space, making it harder to manage logs, restarts, or scaling.</li> <li>Not aligned with Docker\u2019s philosophy.</li> </ul>"},{"location":"migration/python/django-api-image/#recommendation","title":"Recommendation","text":"<p>Use Docker Compose (first approach). It:</p> <ul> <li>Keeps Redis and Django separate, following best practices.</li> <li>Simplifies deployment (one <code>docker-compose.yml</code> file).</li> <li>Allows you to push only your Django app image to Docker Hub while leveraging the official Redis image.</li> </ul> <p>Final Files to Share</p> <p><code>Dockerfile</code> <code>docker-compose.yml</code> Your project code (including updated settings.py)</p> <p>Running on Office Computer</p> <ol> <li>Clone your repo or copy files.</li> <li> <p>Run:</p> <pre><code>```bash\ndocker-compose up --build\n```\n</code></pre> <p>Access at <code>http://localhost:8000</code> (or the office IP).</p> </li> </ol>"},{"location":"migration/python/django-builtin-lightweight-server/","title":"Django Builtin Server","text":""},{"location":"migration/python/django-builtin-lightweight-server/#djangos-built-in-server","title":"Django's built-in server","text":"<p>The Django lightweight development server doesn't have a specific name like \"Apache\" or \"Nginx.\" It is simply referred to as the Django development server or Django's built-in server.</p> <p>Internally, it's based on Python's <code>wsgiref.simple_server</code>, which is a very basic WSGI (Web Server Gateway Interface) server provided by Python. It is not intended for production use, but it\u2019s enough for development and testing purposes.</p> <p>It starts the server, which by default listens on <code>127.0.0.1:8000</code>. This server is an integral part of the Django framework for development purposes, and it is often referred to simply as Django's development server or Django's lightweight server.</p> <p>If you need the specific technical name, it\u2019s based on <code>wsgiref</code>'s simple server. Would you like to know more about how this server works behind the scenes?</p>"},{"location":"migration/python/django-builtin-lightweight-server/#djangos-lightweight-development-server","title":"Django's Lightweight Development Server","text":"<p>Django comes with a lightweight development server that you can use to run your project during development. This server is not intended for use in production environments, as it\u2019s not optimized for handling the kind of traffic a production-ready web server (like Apache, Nginx, or Gunicorn) can handle. It's designed to make testing and development easier by automatically handling requests, serving static files, and interacting with your Django views and templates.</p> How the Lightweight Server Works <ul> <li> <p>When you run the command:</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Django starts its internal server and listens on a port (default is port <code>8000</code>). This allows you to view your app in a web browser, test the features, and debug easily.</p> </li> <li> <p>The server is single-threaded and runs in the context of your Python process, so it's not meant to handle heavy or concurrent requests. It works well for local development but would not perform well under heavy load or production traffic.</p> </li> <li> <p>The server also serves static files (CSS, JavaScript, images) and can reload code changes automatically while you're developing, which makes it very useful during development.</p> </li> </ul>"},{"location":"migration/python/django-builtin-lightweight-server/#production-ready-server-setup","title":"Production-Ready Server Setup","text":"<p>When you're ready to move your Django app to production, you'll need to replace the lightweight server with something more robust. Here's how to do that:</p>"},{"location":"migration/python/django-builtin-lightweight-server/#1-use-gunicorn-with-nginx","title":"1. Use Gunicorn with Nginx:","text":"<ul> <li> <p>Gunicorn: It's a WSGI HTTP server for Python web applications. It's a great choice for serving Django in production.</p> <ul> <li> <p>Install Gunicorn:</p> <pre><code>pip install gunicorn\n</code></pre> </li> <li> <p>Run your Django project with Gunicorn:</p> <pre><code>gunicorn myproject.wsgi:application\n</code></pre> </li> </ul> </li> <li> <p>Nginx: Nginx is a high-performance HTTP server and reverse proxy server. It is often used to handle static files and pass the dynamic content requests to Gunicorn.</p> </li> <li> <p>Setting it up: You'll configure Gunicorn to serve your Django app, while Nginx handles static file serving and reverse proxies requests to Gunicorn.</p> </li> </ul>"},{"location":"migration/python/django-builtin-lightweight-server/#2-use-uwsgi-with-nginx","title":"2. Use uWSGI with Nginx:","text":"<ul> <li> <p>uWSGI: Another excellent WSGI server choice for Django in production.</p> <ul> <li> <p>Install uWSGI:</p> <pre><code>pip install uwsgi\n</code></pre> </li> <li> <p>Configure Nginx to pass requests to uWSGI, which will handle the dynamic content generation.</p> </li> </ul> </li> </ul> Summary of the Server <ul> <li> <p>Development server: It's a simple, lightweight server provided by Django for development purposes. It is located in the <code>django.core.management.commands.runserver.py</code> file and uses Python\u2019s <code>wsgiref.simple_server</code>.</p> </li> <li> <p>Production: For production, you should use a more robust server like Gunicorn or uWSGI behind a reverse proxy such as Nginx or Apache to handle performance, concurrency, and security requirements.</p> </li> </ul>"},{"location":"migration/python/django-builtin-lightweight-server/#where-is-the-lightweight-server-located","title":"Where is the Lightweight Server Located?","text":"<p>Django\u2019s built-in server is a part of the Django package, so you don\u2019t have to install it separately. It's located within the <code>django.core.management module</code>.</p> <p>When you execute the <code>python manage.py runserver</code> command, it uses the <code>runserver</code> management command, which internally starts the server. Here's how it works:</p> <ol> <li> <p>Command: When you run <code>python manage.py runserver</code>, Django will look for the <code>runserver</code> management command in <code>django.core.management.commands.runserver</code>.</p> </li> <li> <p>Server Code: The actual code for the server can be found in:</p> <pre><code>django/core/management/commands/runserver.py\n</code></pre> <p>This is where the server is implemented. It\u2019s a relatively simple code that listens for incoming requests and hands them over to the Django application to handle.</p> </li> <li> <p>Server Process: Behind the scenes, Django's development server is built using Python's built-in <code>wsgiref.simple_server</code>, which is a basic WSGI server. It's lightweight and written in Python, not as optimized as production servers like Gunicorn or uWSGI, but sufficient for development.</p> </li> </ol> Code Behind the Server <p>Here's a quick look at how the server starts:</p> <pre><code># django/core/management/commands/runserver.py\n\nfrom django.utils import autoreload\nfrom django.core.servers.basehttp import run, WSGIServerException\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        try:\n            autoreload.main(self.inner_run, args, options)\n        except WSGIServerException:\n            pass\n\n    def inner_run(self, *args, **options):\n        # Start the actual server, usually running on 127.0.0.1:8000\n        run(self.get_handler())\n</code></pre> <p>So, when you run <code>python manage.py runserver</code>, it launches the server that listens on <code>127.0.0.1:8000</code> by default.</p>"},{"location":"migration/python/django-builtin-lightweight-server/#question","title":"Question","text":"<p>dont we need xamp apache server to run the django project. i have not installed anything but it runs in my ubnuntu</p> <p>No, you don't need XAMPP or an Apache server to run a Django project. Django has its own lightweight development server, which is why you can run your Django project without installing XAMPP or Apache.</p> <p>When you run a Django project using the command:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Django automatically starts its built-in development server (usually running on <code>http://127.0.0.1:8000/</code> by default) to serve your application. This server is sufficient for development purposes, but for production environments, you would typically use a more robust server like Apache or Nginx, often in combination with a WSGI server like Gunicorn or uWSGI.</p> <p>In Ubuntu, you likely installed Django and its dependencies, and that's why your project is running fine without needing XAMPP or Apache.</p>"},{"location":"migration/python/redis-locally-or-docker/","title":"Redis - Locally or Docker","text":""},{"location":"migration/python/redis-locally-or-docker/#redis","title":"Redis","text":"<p>I\u2019ll show you how to set up Redis both locally (installed directly on your machine) and via Docker (running as a container). Redis is an in-memory data store used as a message broker in our Django Channels project (for the <code>CHANNEL_LAYERS</code> backend). You can choose either method based on your preference or environment.</p>"},{"location":"migration/python/redis-locally-or-docker/#option-1-redis-locally","title":"Option 1: Redis Locally","text":""},{"location":"migration/python/redis-locally-or-docker/#option-2-redis-via-docker","title":"Option 2: Redis <code>via</code> Docker","text":"<p>This runs Redis in a container, which is portable and doesn\u2019t require installing it directly on your system. This is the method we used in the earlier Dockerized Django Channels setup.</p>"},{"location":"migration/python/redis-locally-or-docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine (Docker Installation Guide).</li> </ul>"},{"location":"migration/python/redis-locally-or-docker/#steps","title":"Steps","text":"<ol> <li> <p>Pull the Redis Image:</p> <p>Docker Hub hosts the official Redis image. Pull it (optional, as <code>docker run</code> will do this automatically):</p> <pre><code>docker pull redis:latest\n</code></pre> </li> <li> <p>Run Redis Container:</p> <ul> <li> <p>Start Redis with a single command</p> <pre><code>docker run -d --name redis -p 6379:6379 redis\n</code></pre> <pre><code>docker run --name redis -p 6379:6379 -d redis\n</code></pre> <ul> <li><code>-d</code>: Runs in detached mode (background).</li> <li><code>--name redis</code>: Names the container <code>redis</code> (used for linking).</li> <li><code>-p 6379:6379</code>: Maps port 6379 on your host to 6379 in the container.</li> </ul> </li> </ul> </li> <li> <p>Verify It\u2019s Running:</p> <ul> <li> <p>Check the container:</p> <pre><code>docker ps\n</code></pre> <ul> <li>You should see a <code>redis</code> container running.</li> </ul> </li> <li> <p>Test with <code>redis-cli</code> (if installed locally)</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379 ping\n</code></pre> <ul> <li>Expect <code>PONG</code>.</li> </ul> </li> <li> <p>Or use Docker to access the container\u2019s Redis CLI:</p> <pre><code>docker exec -it redis redis-cli ping\n</code></pre> <ul> <li>Expect <code>PONG</code>.</li> </ul> </li> </ul> </li> <li> <p>Stop or Remove (Optional):</p> <ul> <li> <p>Stop the container:</p> <pre><code>docker stop redis\n</code></pre> </li> <li> <p>Remove it:</p> <pre><code>docker rm redis\n</code></pre> </li> </ul> </li> </ol>"},{"location":"migration/python/redis-locally-or-docker/#connect-in-django-with-docker","title":"Connect in Django with Docker","text":"<p>In <code>settings.py</code>, update <code>CHANNEL_LAYERS</code> to match the Docker setup:</p> <pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [('redis', 6379)],  # Use container name 'redis' instead of localhost\n        },\n    },\n}\n</code></pre> <ul> <li>When running Django in Docker (as in our project), use <code>'redis'</code> as the hostname because Docker\u2019s internal networking links containers by name (via <code>--link redis:redis</code> or a Docker network).</li> </ul>"},{"location":"migration/python/redis-locally-or-docker/#running-with-django-container","title":"Running with Django Container","text":"<p>If you\u2019re using the Dockerized Django app from earlier:</p> <pre><code>docker run -d --name redis -p 6379:6379 redis\ndocker run -d -p 8000:8000 --link redis:redis yourusername/django-channels-demo:latest\n</code></pre> <ul> <li>The <code>--link redis:redis</code> connects the Django container to the Redis container, allowing them to communicate.</li> </ul>"},{"location":"migration/python/redis-locally-or-docker/#local-vs-docker-which-to-use","title":"Local vs. Docker: Which to Use?","text":""},{"location":"migration/python/redis-locally-or-docker/#local-redis","title":"Local Redis:","text":"<ul> <li>Pros: No Docker required, runs directly on your system, good for development without containerization.</li> <li>Cons: Requires manual installation, less portable, potential version conflicts.</li> <li>Use Case: If you\u2019re not using Docker for Django or prefer a native setup.</li> </ul>"},{"location":"migration/python/redis-locally-or-docker/#docker-redis","title":"Docker Redis:","text":"<ul> <li>Pros: Portable, easy to start/stop, matches our Dockerized Django setup, no system pollution.</li> <li>Cons: Requires Docker, slight overhead for beginners.</li> <li>Use Case: If you\u2019re already using Docker (as in our project) or want a consistent environment across machines (e.g., office computer).</li> </ul> <p>Since our project uses Docker for the Django app, Redis via Docker is the most seamless option, as it integrates naturally with the containerized workflow.</p>"},{"location":"migration/python/redis-locally-or-docker/#testing-redis-with-django-channels","title":"Testing Redis with Django Channels","text":"<ol> <li> <p>Start Redis (choose your method):</p> <ul> <li>Local: <code>redis-server</code> (or service command).</li> <li>Docker: <code>docker run -d --name redis -p 6379:6379 redis</code>.</li> </ul> </li> <li> <p>Run the Django app:</p> <ul> <li>Local: <code>python manage.py runserver</code>.</li> <li>Docker: <code>docker run -d -p 8000:8000 --link redis:redis yourusername/django-channels-demo:latest</code>.</li> </ul> </li> <li> <p>Test the WebSocket:</p> <ul> <li>Connect to <code>ws://localhost:8000/ws/messages/</code> (e.g., with wscat or the React app).</li> <li>Send a message via the API (<code>curl -X POST http://localhost:8000/api/messages/ -d '{\"content\": \"Test\"}'</code>) and confirm it\u2019s broadcast.</li> </ul> </li> </ol>"},{"location":"migration/python/redis-locally-or-docker/#example-output","title":"Example Output","text":"<ul> <li> <p>Local Redis:</p> <pre><code>$ redis-cli ping\nPONG\n</code></pre> </li> <li> <p>Docker Redis:</p> <pre><code>$ docker exec -it redis redis-cli ping\nPONG\n</code></pre> </li> </ul>"},{"location":"migration/python/redis-locally-or-docker/#reference","title":"Reference","text":"<ul> <li>Docker Installation</li> </ul>"},{"location":"migration/python/redis/intro/","title":"Intro","text":""},{"location":"migration/python/redis/intro/#installation","title":"Installation","text":"<p>To run Redis locally using Docker, follow these steps:</p> <ol> <li> <p>Ensure Docker is installed on your machine. If it's not, you can download it from the official Docker website: Docker Installation.</p> </li> <li> <p>Pull the Redis Docker image from the Docker Hub (if you haven't already):</p> <pre><code>docker pull redis\n</code></pre> </li> <li> <p>Run Redis in a Docker container:</p> <p>To run a Redis container locally, use the following command:</p> <pre><code>docker run --name redis -p 6379:6379 -d redis\n</code></pre> <p>Here's what each part of the command means:</p> <ul> <li><code>--name redis</code>: Assigns the name <code>redis</code> to your container.</li> <li><code>-p 6379:6379</code>: Maps port 6379 on your local machine to port 6379 inside the container (the default Redis port).</li> <li><code>-d</code>: Runs the container in detached mode (in the background).</li> <li><code>redis</code>: This is the image name you're running, which will be pulled from Docker Hub if you don't have it locally.</li> </ul> </li> <li> <p>Verify the Redis container is running:</p> <p>You can check if the Redis container is up and running by using the following command:</p> <pre><code>docker ps\n</code></pre> <p>This will list all running containers. You should see the Redis container in the output.</p> </li> <li> <p>Access Redis locally:</p> <p>You can now connect to Redis using the default port <code>6379</code> from your local machine. You can use a Redis client or command-line tool like <code>redis-cli</code> to connect to it:</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379\n</code></pre> </li> <li> <p>Stop the Redis container (when you're done):</p> <p>If you want to stop the Redis container, run the following command:</p> <pre><code>docker stop redis\n</code></pre> </li> </ol> <p>That's it! You've now successfully run Redis locally using Docker.</p> <p>Here\u2019s how you can access the Redis CLI from inside the running Docker container:</p>"},{"location":"migration/python/redis/intro/#option-1-run-redis-cli-from-the-docker-container","title":"Option 1: Run <code>redis-cli</code> from the Docker container","text":"<ol> <li> <p>Enter the Redis container: First, find the container ID or name of the Redis container:</p> <pre><code>docker ps\n</code></pre> <p>This will list all running containers, and you should see the Redis container listed. If you named it <code>redis</code>, you can enter it like this:</p> <pre><code>docker exec -it redis redis-cli\n</code></pre> <p>This will directly start the Redis CLI inside the container.</p> </li> <li> <p>Use Redis CLI: Once inside the container, you should see the Redis prompt. You can then issue commands like:</p> <pre><code>PING\n</code></pre> <p>You should receive the response:</p> <pre><code>PONG\n</code></pre> </li> </ol>"},{"location":"migration/python/redis/intro/#option-2-use-redis-cli-from-your-local-machine-if-you-install-it","title":"Option 2: Use <code>redis-cli</code> from your local machine (if you install it)","text":"<p>If you'd prefer to install <code>redis-cli</code> on your local machine and not just inside the Docker container, the installation error you're facing (lock issues) might happen if another process is interacting with <code>apt</code> (such as an ongoing update or installation). You can solve it as I mentioned earlier or simply install it from inside the container, as shown in Option 1.</p>"},{"location":"migration/python/redis/redis-cli/","title":"Redis Cli","text":""},{"location":"migration/python/redis/redis-cli/#steps-to-install-redis-cli-on-ubuntudebian-based-systems","title":"Steps to install redis-cli on Ubuntu/Debian-based systems:","text":"<ol> <li> <p>Install Redis tools: To install <code>redis-cli</code> (which is part of the redis-tools package), run the following command:</p> <pre><code>sudo apt update\nsudo apt install redis-tools\n</code></pre> </li> <li> <p>Verify the installation: After the installation is complete, verify that <code>redis-cli</code> is available by running:</p> <pre><code>redis-cli --version\n</code></pre> <p>This should display the installed version of redis-cli.</p> </li> <li> <p>Connect to Redis: Once <code>redis-cli</code> is installed, you can run the following command to connect to Redis:</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379\n</code></pre> <p>You should now be able to interact with your local Redis server.</p> </li> </ol>"},{"location":"migration/python/websocket/channels-full-guide/","title":"Channels Full Guide","text":""},{"location":"migration/python/websocket/channels-vs-daphene/","title":"Channel vs Daphene","text":""},{"location":"migration/python/websocket/channels-vs-daphene/#channels-vs-daphene","title":"Channels <code>vs</code> Daphene","text":"In summary <ul> <li>Django Channels = Framework for adding asynchronous features to Django.</li> <li>Daphne = ASGI server that serves the application and handles the asynchronous protocols</li> </ul>"},{"location":"migration/python/websocket/channels-vs-daphene/#diffrence","title":"DIFFRENCE","text":"<p>The key difference between WSGI (Web Server Gateway Interface) and ASGI (Asynchronous Server Gateway Interface) is how they handle synchronous vs. asynchronous communication in web applications.</p> <p>Example Scenarios:</p> <ul> <li>WSGI: Traditional websites like blogs, content management systems (CMS), or APIs that primarily handle HTTP requests.</li> <li>ASGI: Real-time applications like live chat systems, online multiplayer games, stock price updates, or apps with push notifications.</li> </ul> <p>In short:</p> <ul> <li>WSGI = synchronous (one request at a time).</li> <li>ASGI = asynchronous (can handle many requests concurrently, supporting WebSockets and real-time communication).</li> </ul>"},{"location":"migration/python/websocket/channels-vs-daphene/#channels-and-channel_redis","title":"Channels and Channel_redis","text":"<p>In Django, <code>channels</code> and <code>channel_redis</code> are related components used for handling real-time communication and asynchronous features, like WebSockets, in Django applications. Here\u2019s the key difference between them:</p> <p>Example in Django:</p> <ul> <li><code>channels</code> handles the WebSocket connection and consumers.</li> <li><code>channels_redis</code> ensures that messages sent via WebSockets (or any asynchronous communication) can be broadcasted across different Django workers or instances via Redis.</li> </ul> Typical Setup in <code>settings.py</code>: <pre><code># settings.py for Django Channels and Redis\nASGI_APPLICATION = \"yourproject.asgi.application\"\n\n# Channels Redis configuration\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [('127.0.0.1', 6379)],  # Redis server connection\n        },\n    },\n}\n</code></pre> <p>Conclusion:</p> <ul> <li><code>channels</code> gives Django the capability to handle WebSockets and asynchronous protocols.</li> <li><code>channels_redis</code> enables inter-process communication using Redis, making it possible to scale Django applications while maintaining real-time capabilities.</li> </ul>"},{"location":"migration/python/websocket/issue-solved/","title":"Issue Solved","text":""},{"location":"migration/python/websocket/issue-solved/#issue-solved","title":"Issue Solved","text":"<p>raise AppRegistryNotReady(\"Apps aren't loaded yet.\") <code>django.core.exceptions.AppRegistryNotReady</code>: Apps aren't loaded yet</p> <p>Solved</p> asgi.py<pre><code>import os\n\n# Set the settings module before importing anything else\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dating_project.settings')\n\nimport django\ndjango.setup()\n\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.security.websocket import AllowedHostsOriginValidator\nfrom apps.messaging import routing  # Import your routing only after settings are configured\n\napplication = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AllowedHostsOriginValidator(\n        URLRouter(routing.websocket_urlpatterns),\n    ),\n})\n</code></pre> <pre><code>ws://localhost:8000/ws/messages/\n\n{\"message\": \"Test\"}\n</code></pre> <pre><code>pip show django\n</code></pre>"},{"location":"migration/rabbitmq/installation/","title":"Installation","text":""},{"location":"migration/rabbitmq/installation/#intallation","title":"Intallation","text":"<p>Yes, you can use RabbitMQ without Celery. RabbitMQ is a message broker, which means it helps different parts of your application communicate by sending and receiving messages. You can use it directly to build your own messaging system without relying on Celery.</p> <p>For example, you might use RabbitMQ to:</p> <ul> <li>Send messages between microservices in a distributed system.</li> <li>Implement a custom task queue for your application.</li> <li>Handle real-time messaging, like chat applications or live notifications.</li> </ul> <p>However, using RabbitMQ without Celery means you\u2019ll need to write more code to manage tasks, retries, and scheduling. Celery simplifies these tasks by providing a framework on top of RabbitMQ. If you only need basic messaging or want full control over your implementation, RabbitMQ alone is a good choice.</p> <p>Celery and RabbitMQ are tools that help your project do many things at once without getting overwhelmed, like a team of helpers working together.</p> <p>Celery: Think of it as a smart helper that takes tasks (like sending emails or processing data) and does them in the background so your app doesn\u2019t get stuck waiting.</p> <p>RabbitMQ: This is like a mailbox where tasks are dropped off. Celery picks up tasks from this mailbox and works on them.</p> <p>When do you need them?</p> <p>You need Celery and RabbitMQ when your app has a lot of work to do, and you don\u2019t want users to wait. For example:</p> <p>Sending confirmation emails after someone signs up. Processing big files or data without slowing down your app. Running scheduled tasks, like sending reminders every day. It\u2019s like having a team of workers (Celery) and a task organizer (RabbitMQ) to keep everything running smoothly.</p> <p>Yes, to use RabbitMQ as a message broker inside your Django project (typically with Celery for asynchronous tasks), you need to install and run the RabbitMQ server on your Ubuntu system. RabbitMQ acts as the broker that stores and forwards tasks from Django to Celery workers.</p> <p>You can install RabbitMQ server on Ubuntu using:</p> <pre><code>sudo apt search rabbitmq-server\n\nsudo apt install rabbitmq-server\n</code></pre> <p>After installation, start and enable the RabbitMQ service:</p> <pre><code>sudo systemctl start rabbitmq-server\nsudo systemctl enable rabbitmq-server\n</code></pre> <p>You can follow regular installation process from django document i would suggest to install Django in a virtual environment with venv</p> <p>Here is the tree structure of my Django project</p> <pre><code>\u251c\u2500\u2500 db.sqlite3\n\u251c\u2500\u2500 myproject\n\u2502   \u251c\u2500\u2500 apps\n\u2502   \u2502   \u251c\u2500\u2500 api\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 init.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 views.py\n\u2502   \u2502   \u251c\u2500\u2500 init.py\n\u2502   \u2502   \u251c\u2500\u2500 main\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 init.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 migrations\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 models.py\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 views.py\n\u2502   \u2502   \u2514\u2500\u2500 pycache\n\u2502   \u2502   \u2514\u2500\u2500 init.cpython-310.pyc\n\u2502   \u251c\u2500\u2500 asgi.py\n\u2502   \u251c\u2500\u2500 init.py\n\u2502   \u251c\u2500\u2500 settings\n\u2502   \u2502   \u251c\u2500\u2500 base.py\n\u2502   \u2502   \u251c\u2500\u2500 local.py\n\u2502   \u2502   \u251c\u2500\u2500 production.py\n\u2502   \u251c\u2500\u2500 static\n\u2502   \u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u251c\u2500\u2500 img\n\u2502   \u2502   \u251c\u2500\u2500 js\n\u2502   \u2502   \u251c\u2500\u2500 scss\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 bootstrap\n\u2502   \u2502   \u2514\u2500\u2500 webfonts\n\u2502   \u251c\u2500\u2500 templates\n\u2502   \u2502   \u251c\u2500\u2500 base.html\n\u2502   \u2502   \u251c\u2500\u2500 main\n\u2502   \u2502   \u2514\u2500\u2500 registration\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tags\n</code></pre>"},{"location":"migration/rabbitmq/installation/#reference","title":"Reference","text":"<ul> <li>RabbitMQ: Installing on Debian and Ubuntu</li> <li>How To Install and Start Using RabbitMQ on Ubuntu 22.04</li> <li>How to set up Celery in a Django project?</li> <li>Installing Celery and Rabbitmq for background Job in Django | Project Structure</li> </ul>"},{"location":"migration/rabbitmq/overview/","title":"Overview","text":""},{"location":"migration/rabbitmq/overview/#rabbit-mq","title":"Rabbit MQ","text":"<p>RabbitMQ is an open-source message broker software that facilitates communication between different parts of a system by sending messages between them. It acts as a middleman for sendingRabbitMQ is an open-source message broker software that facilitates communication between different parts of a system by sending messages between them. It acts as a middleman for sending RabbitMQ is an open-source message broker software that facilitates communication between different parts of a system by sending messages between them. It acts as a middleman for sending</p> <p>RabbitMQ is a message broker that facilitates communication between different parts of a system by sending messages between them. It is often used in microservices architectures to decouple services and improve scalability and reliability.</p>"},{"location":"migration/rabbitmq/overview/#key-features","title":"Key Features","text":"<ol> <li>Reliable Messaging: RabbitMQ ensures that messages are delivered reliably even in the event of network failures or server crashes.</li> <li>Flexible Routing: RabbitMQ supports complex routing scenarios using exchanges, queues, and bindings.</li> <li>Clustering: RabbitMQ can be clustered across multiple nodes to provide high availability and scalability.</li> <li>Management UI: RabbitMQ provides a web-based management interface for monitoring and managing the broker.</li> <li>Client Libraries: RabbitMQ has client libraries available for various programming languages, making it easy to integrate with different applications.</li> </ol>"},{"location":"migration/rabbitmq/overview/#use-cases","title":"Use Cases","text":"<ul> <li>Decoupling Microservices: RabbitMQ can be used to decouple microservices by allowing them to communicate asynchronously through message queues.</li> <li>Event Streaming: RabbitMQ can be used for event streaming, where events are published to exchanges and consumed by subscribers.</li> <li>Load Balancing: RabbitMQ can distribute messages across multiple consumers to balance the load.</li> </ul> RabbitMQ is commonly used in scenarios such as: <ul> <li>Microservices communication</li> <li>Event-driven architectures</li> <li>Asynchronous processing</li> <li>Load balancing between services</li> <li>Decoupling of application components</li> </ul>"},{"location":"migration/rabbitmq/overview/#architecture","title":"Architecture","text":"<p>RabbitMQ follows a client-server architecture where the server (RabbitMQ broker) manages the message queues and routing. Clients connect to the broker to send or receive messages. The key components of RabbitMQ include:</p> <ol> <li>Producer: An application that sends messages to the RabbitMQ broker.</li> <li>Consumer: An application that receives messages from the RabbitMQ broker.</li> <li>Queue: A buffer that stores messages until they are consumed. Messages are stored in the order they are received.</li> <li>Exchange: A routing mechanism that determines how messages are distributed to queues based on routing rules.</li> <li>Binding: A link between an exchange and a queue that defines how messages should be routed.</li> </ol>"},{"location":"migration/rabbitmq/overview/#installation","title":"Installation","text":"<p>RabbitMQ can be installed on various platforms, including Linux, Windows, and macOS. Follow the official installation guide for detailed instructions.</p>"},{"location":"migration/rabbitmq/overview/#basic-concepts","title":"Basic Concepts","text":"<ol> <li>Producer: An application that sends messages to a queue.</li> <li>Consumer: An application that receives messages from a queue.</li> <li>Queue: A buffer that stores messages until they are processed by consumers.</li> <li>Exchange: A routing mechanism that determines how messages are distributed to queues.</li> </ol>"},{"location":"migration/rabbitmq/overview/#example-usage","title":"Example Usage","text":"<pre><code>import pika\n\n# Establish connection to RabbitMQ server\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='hello')\n\n# Publish a message\nchannel.basic_publish(exchange='', routing_key='hello', body='Hello World!')\n\nprint(\" [x] Sent 'Hello World!'\")\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"migration/rabbitmq/overview/#conclusion","title":"Conclusion","text":"<p>RabbitMQ is a powerful tool for building distributed systems and microservices architectures. Its flexibility and robustness make it an excellent choice for handling messaging needs in modern applications.</p>"},{"location":"migration/rabbitmq/overview/#8020-principle-for-learning-rabbitmq","title":"80/20 Principle for Learning RabbitMQ","text":"<p>To quickly grasp the core theory of RabbitMQ, focus on the 20% of concepts that cover 80% of its use cases:</p>"},{"location":"migration/rabbitmq/overview/#core-concepts","title":"Core Concepts","text":"<ol> <li>Queues: Central to RabbitMQ, queues store messages until they are consumed. Understand how to declare and use queues.</li> <li>Exchanges: Learn how exchanges route messages to queues based on routing rules.</li> <li>Bindings: Understand how bindings connect exchanges to queues and define routing logic.</li> <li>Producers and Consumers: Grasp the roles of producers (senders) and consumers (receivers) in the messaging workflow.</li> </ol>"},{"location":"migration/rabbitmq/overview/#key-features-to-master","title":"Key Features to Master","text":"<ol> <li>Reliable Messaging: Learn how RabbitMQ ensures message delivery using acknowledgments and persistence.</li> <li>Routing: Focus on direct, fanout, topic, and headers exchanges for flexible message distribution.</li> <li>Basic Administration: Familiarize yourself with the management UI for monitoring queues and exchanges.</li> </ol>"},{"location":"migration/rabbitmq/overview/#practical-steps","title":"Practical Steps","text":"<ol> <li>Install RabbitMQ: Set up RabbitMQ locally or in a containerized environment.</li> <li>Send and Receive Messages: Write simple producer and consumer scripts to send and receive messages.</li> <li>Experiment with Exchanges: Try different exchange types to understand their routing behavior.</li> </ol> <p>By mastering these essentials, you can effectively use RabbitMQ for most messaging scenarios without delving into advanced features initially.</p>"},{"location":"migration/rabbitmq/overview/#setting-up-rabbitmq-in-python","title":"Setting Up RabbitMQ in Python","text":"<p>To set up RabbitMQ in Python, you can use the <code>pika</code> library, which is a popular RabbitMQ client for Python. Below is a step-by-step guide:</p>"},{"location":"migration/rabbitmq/overview/#step-1-install-the-pika-library","title":"Step 1: Install the <code>pika</code> Library","text":"<p>Install the <code>pika</code> library using pip:</p> <pre><code>pip install pika\n</code></pre>"},{"location":"migration/rabbitmq/overview/#step-2-start-rabbitmq-server","title":"Step 2: Start RabbitMQ Server","text":"<p>Ensure that RabbitMQ is installed and running on your system. You can start the RabbitMQ server using the following command:</p> <pre><code>sudo systemctl start rabbitmq-server\n</code></pre>"},{"location":"migration/rabbitmq/overview/#step-3-write-a-producer-script","title":"Step 3: Write a Producer Script","text":"<p>The producer sends messages to a queue. Here's an example:</p> <pre><code>import pika\n\n# Establish connection to RabbitMQ server\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='test_queue')\n\n# Publish a message\nchannel.basic_publish(exchange='', routing_key='test_queue', body='Hello RabbitMQ!')\n\nprint(\" [x] Sent 'Hello RabbitMQ!'\")\n\n# Close the connection\nconnection.close()\n</code></pre>"},{"location":"migration/rabbitmq/overview/#step-4-write-a-consumer-script","title":"Step 4: Write a Consumer Script","text":"<p>The consumer receives messages from the queue. Here's an example:</p> <pre><code>import pika\n\n# Establish connection to RabbitMQ server\nconnection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\nchannel = connection.channel()\n\n# Declare a queue\nchannel.queue_declare(queue='test_queue')\n\n# Callback function to process messages\ndef callback(ch, method, properties, body):\n    print(f\" [x] Received {body}\")\n\n# Subscribe to the queue\nchannel.basic_consume(queue='test_queue', on_message_callback=callback, auto_ack=True)\n\nprint(' [*] Waiting for messages. To exit press CTRL+C')\nchannel.start_consuming()\n</code></pre>"},{"location":"migration/rabbitmq/overview/#step-5-run-the-scripts","title":"Step 5: Run the Scripts","text":"<ol> <li>Start the consumer script first to listen for messages.</li> <li>Run the producer script to send a message to the queue.</li> </ol> <p>You should see the message sent by the producer being received by the consumer.</p>"},{"location":"migration/rabbitmq/overview/#notes","title":"Notes","text":"<ul> <li>Replace <code>'localhost'</code> with the RabbitMQ server's hostname or IP address if it's running on a remote machine.</li> <li>Ensure the queue name (<code>'test_queue'</code>) matches in both producer and consumer scripts.</li> </ul> <p>This setup demonstrates a simple RabbitMQ messaging workflow in Python.</p>"},{"location":"migration/rabbitmq/question/","title":"Question","text":""},{"location":"migration/rabbitmq/question/#question","title":"Question","text":""},{"location":"migration/rabbitmq/question/#do-i-need-to-learn-celery-before-rabbitmq","title":"Do I Need to Learn Celery Before RabbitMQ?","text":"<p>No, you don\u2019t need to learn Celery before RabbitMQ. In fact, it\u2019s often better to start with RabbitMQ because it\u2019s the underlying message broker that Celery relies on. Understanding RabbitMQ will give you a solid foundation for how messaging systems work.</p> <p>Here\u2019s a suggested learning path:</p> <ol> <li> <p>Learn RabbitMQ Basics:</p> </li> <li> <p>Understand what a message broker is.</p> </li> <li>Learn how to send and receive messages using RabbitMQ.</li> <li> <p>Explore concepts like queues, exchanges, and bindings.</p> </li> <li> <p>Move to Celery:</p> </li> <li>Once you\u2019re comfortable with RabbitMQ, start learning Celery.</li> <li>Focus on how Celery uses RabbitMQ to manage tasks.</li> <li>Learn about task queues, retries, and scheduling in Celery.</li> </ol> <p>By learning RabbitMQ first, you\u2019ll have a better grasp of the messaging concepts that Celery builds upon.</p>"},{"location":"migration/react/batched-in-react/","title":"Batched in react","text":""},{"location":"migration/react/batched-in-react/#batched","title":"Batched","text":""},{"location":"migration/react/batched-in-react/#overview","title":"Overview","text":""},{"location":"migration/react/batched-in-react/#what-does-batched-mean","title":"What Does \u201cBatched\u201d Mean?","text":"<p>Batched updates = React groups multiple state updates together, so they trigger just one re-render and one DOM update cycle.</p>"},{"location":"migration/react/batched-in-react/#without-batching-hypothetical","title":"\ud83d\udd01 Without Batching (hypothetical)","text":"<pre><code>setCount(1); // causes a re-render\nsetName(\"John\"); // causes a second re-render\n</code></pre> <p>\u27a1 Without batching: 2 state changes = 2 re-renders = 2 DOM updates</p>"},{"location":"migration/react/batched-in-react/#with-batching-react-18","title":"\u2705 With Batching (React 18+)","text":"<pre><code>setCount(1);\nsetName(\"John\");\n</code></pre> <p>\u27a1 With automatic batching: 2 state changes = 1 render, 1 DOM update</p> <p>\ud83e\udde0 In React 18+, batching works even in async callbacks, like timeouts, fetches, or event handlers \u2014 not just inside React-controlled events.</p> Example<pre><code>setTimeout(() =&gt; {\n  setCount((c) =&gt; c + 1);\n  setName(\"Alice\");\n}, 1000);\n</code></pre> <p>In React 18+, both updates above are batched \u2014 causing just one render.</p> <p>Before React 18, only React event handlers batched by default.</p>"},{"location":"migration/react/batched-in-react/#real-life-analogy","title":"\ud83e\uddea Real-Life Analogy","text":"<ul> <li>Batched updates = Writing multiple emails, then clicking \"Send All\" instead of sending each one separately.</li> </ul>"},{"location":"migration/react/batched-in-react/#visual-batched-vs-non-batched-updates","title":"\ud83d\udcca Visual: Batched vs Non-Batched Updates","text":""},{"location":"migration/react/batched-in-react/#without-batching-react-18-or-manually-flushed-updates","title":"\ud83d\udd01 Without Batching (React &lt;18 or manually flushed updates)","text":"<pre><code>Time \u2192\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| setCount(1) | setName('A')| UI re-renders |\n|   (triggers re-render)    | again         |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ul> <li>\u27a1 Two updates \u2192 Two renders \u2192 Two DOM commits</li> <li>\ud83d\ude45\u200d\u2642\ufe0f Inefficient and causes visual jank if updates are fast or frequent</li> </ul>"},{"location":"migration/react/batched-in-react/#with-batching-react-18-default","title":"\u2705 With Batching (React 18+ default)","text":"<pre><code>Time \u2192\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| setCount(1) + setName('A') |\n|   (batched automatically)  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n             \u25bc\n        \ud83e\udde0 Single render\n             \u25bc\n        \u2705 One DOM commit\n</code></pre> <ul> <li>\u27a1 Multiple updates \u2192 One render \u2192 One DOM update</li> <li>\ud83c\udf89 Smoother, faster, more efficient</li> </ul>"},{"location":"migration/react/deferred-in-react/","title":"Deferred in react","text":""},{"location":"migration/react/deferred-in-react/#deferred-in-react","title":"Deferred in react","text":""},{"location":"migration/react/deferred-in-react/#overview","title":"Overview","text":""},{"location":"migration/react/deferred-in-react/#what-does-deferred-mean","title":"\u23f3 What Does \u201cDeferred\u201d Mean?","text":"<p>Deferred DOM updates = React waits to commit the changes to the DOM until the entire render work is complete.</p> <p>This concept comes from React's Fiber architecture and concurrent rendering, where React can:</p> <ul> <li>Pause rendering a tree (especially for lower-priority updates).</li> <li>Continue rendering later when the browser has time.</li> <li>Only commit DOM changes when the tree is complete and consistent.</li> </ul>"},{"location":"migration/react/deferred-in-react/#traditional-pre-fiber-model","title":"\ud83d\udd04 Traditional (Pre-Fiber) Model","text":"<pre><code>setState \u2192 render \u2192 diff \u2192 commit \u2192 DOM updated\n</code></pre> <ul> <li>Synchronous</li> <li>Happens all in one go</li> </ul>"},{"location":"migration/react/deferred-in-react/#react-with-fiber-concurrent-rendering","title":"\ud83e\uddf6 React with Fiber &amp; Concurrent Rendering","text":"<pre><code>setState \u2192 render (pause...) \u2192 continue \u2192 diff \u2192 commit \u2192 DOM updated\n</code></pre> <ul> <li>Render phase is interruptible</li> <li>DOM changes are deferred until everything is ready</li> <li>React can show fallback UIs (<code>Suspense</code>), optimize when/how updates commit</li> </ul>"},{"location":"migration/react/deferred-in-react/#why-deferred-updates-matter","title":"\ud83c\udfaf Why Deferred Updates Matter","text":"<ol> <li>\u2705 Consistency \u2014 DOM is updated only after all updates are processed</li> <li>\u26a1 Performance \u2014 React avoids janky frames by spreading work across frames</li> <li>\ud83e\uddd8\u200d\u2640\ufe0f Smooth UX \u2014 High-priority updates (e.g. typing) don't wait on slow tasks (e.g. loading images)</li> </ol>"},{"location":"migration/react/deferred-in-react/#putting-it-all-together","title":"\ud83d\udca1 Putting It All Together","text":"Concept Meaning Happens in... Example Batched Group multiple state updates into a single re-render &amp; commit React 18+ (always) <code>setState()</code> in a timeout or async call Deferred Wait to apply DOM updates until the entire render tree is ready Fiber + Concurrent Mode <code>startTransition(() =&gt; setPage(data))</code> waits until async content is ready before DOM updates"},{"location":"migration/react/deferred-in-react/#real-life-analogy","title":"\ud83e\uddea Real-Life Analogy","text":"<ul> <li>Batched updates = Writing multiple emails, then clicking \"Send All\" instead of sending each one separately.</li> <li>Deferred updates = Waiting to publish a blog post until all sections are complete, even if you've already written some.</li> </ul>"},{"location":"migration/react/deferred-in-react/#visual-deferred-dom-updates-concurrent-rendering","title":"\u23f3 Visual: Deferred DOM Updates (Concurrent Rendering)","text":"<p>In Concurrent React, rendering can pause and resume across frames before DOM is updated:</p>"},{"location":"migration/react/deferred-in-react/#react-fiber-concurrent","title":"\ud83e\uddf6 React Fiber (Concurrent)","text":"<pre><code>Time \u2192\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Start render  | Pause (yield)| Resume work |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        |             |              |\n        |        \u23f3 Browser is busy   |\n        \u25bc             \u25bc              \u25bc\n     DOM not       DOM still       DOM not\n     updated       unchanged       updated\n                      \u25bc\n                Once ready \u2192 \u2705 DOM commit\n</code></pre> <ul> <li>\u27a1 React does not update the DOM until all units of work (fibers) are ready</li> <li>\ud83d\udd01 This is how <code>Suspense</code>, <code>startTransition</code>, and streaming work seamlessly</li> </ul>"},{"location":"migration/react/feature-flags/","title":"Feature Flags","text":""},{"location":"migration/react/feature-flags/#feature-flags","title":"Feature Flags","text":""},{"location":"migration/react/feature-flags/#overview","title":"Overview","text":"<p>Feature flags are a powerful technique to control the visibility of features in your web application without deploying new code. This allows you to enable or disable features dynamically, test new functionality, and roll out changes gradually.</p> <p></p>"},{"location":"migration/react/feature-flags/#1-create-a-feature-flags-file","title":"1. Create a Feature Flags File","text":"<p>First, you'll want to create a file where you define your feature flags. This can be an object or a module that you import into your components.</p> <p>For example, let's create a <code>featureFlags.js</code> file:</p> <pre><code>// featureFlags.js\nexport const featureFlags = {\n  newFeature: false, // New feature is disabled by default\n  betaFeature: true, // Beta feature is enabled by default\n};\n</code></pre>"},{"location":"migration/react/feature-flags/#2-use-feature-flags-in-your-components","title":"2. Use Feature Flags in Your Components","text":"<p>Next, in your React components, you can use the feature flags to conditionally render different parts of the UI.</p> <pre><code>import React from 'react';\nimport { featureFlags } from './featureFlags';\n\nconst MyComponent = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to the App!&lt;/h1&gt;\n\n      {/* Conditionally render feature based on the flag */}\n      {featureFlags.newFeature ? (\n        &lt;div&gt;\n          &lt;h2&gt;New Feature&lt;/h2&gt;\n          &lt;p&gt;This is the new feature!&lt;/p&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;div&gt;\n          &lt;h2&gt;Old Feature&lt;/h2&gt;\n          &lt;p&gt;This is the old feature.&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n\n      {/* Another example of a feature flag */}\n      {featureFlags.betaFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;Beta Feature&lt;/h2&gt;\n          &lt;p&gt;This is the beta feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"migration/react/feature-flags/#3-managing-feature-flags-dynamically","title":"3. Managing Feature Flags Dynamically","text":"<p>For real-world applications, you may want to manage feature flags dynamically (e.g., via an API or from a config file). For this, you could fetch flags from a remote service and update the flags in your React app.</p> <p>Here\u2019s an example using React\u2019s <code>useEffect</code> hook to fetch feature flags:</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nconst FeatureFlags = () =&gt; {\n  const [flags, setFlags] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    // Simulate an API call to fetch feature flags\n    setTimeout(() =&gt; {\n      setFlags({\n        newFeature: true,\n        betaFeature: false,\n      });\n      setLoading(false);\n    }, 1000);\n  }, []);\n\n  if (loading) {\n    return &lt;div&gt;Loading feature flags...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      {flags.newFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;New Feature&lt;/h2&gt;\n          &lt;p&gt;This is the new feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n      {flags.betaFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;Beta Feature&lt;/h2&gt;\n          &lt;p&gt;This is the beta feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default FeatureFlags;\n</code></pre>"},{"location":"migration/react/feature-flags/#4-use-a-feature-flagging-service-optional","title":"4. Use a Feature Flagging Service (Optional)","text":"<p>For a more sophisticated solution, you can use a third-party service like LaunchDarkly, Unleash, or Flagsmith. These services offer real-time management of feature flags, which is especially useful for larger teams and applications.</p> <p>Here\u2019s how you might use LaunchDarkly:</p> <ol> <li> <p>Install LaunchDarkly SDK:</p> <pre><code>npm install launchdarkly-react-client-sdk\n</code></pre> </li> <li> <p>Integrate LaunchDarkly:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { withLDProvider, useFlags } from 'launchdarkly-react-client-sdk';\n\nconst MyComponent = () =&gt; {\n    const { newFeature, betaFeature } = useFlags(); // Get the feature flags\n\n    return (\n        &lt;div&gt;\n        {newFeature &amp;&amp; &lt;div&gt;New Feature is Enabled&lt;/div&gt;}\n        {betaFeature &amp;&amp; &lt;div&gt;Beta Feature is Enabled&lt;/div&gt;}\n        &lt;/div&gt;\n    );\n};\n\n// Wrap your app with the LaunchDarkly provider\nconst App = () =&gt; (\n    &lt;MyComponent /&gt;\n);\n\nexport default withLDProvider({\n    clientSideID: 'your-client-side-id',\n})(App);\n</code></pre> </li> </ol>"},{"location":"migration/react/feature-flags/#5-environment-specific-flags","title":"5. Environment-Specific Flags","text":"<p>You may also want to have different feature flags for different environments (e.g., <code>production</code>, <code>staging</code>, or <code>development</code>). You can use environment variables to control this.</p> <p>In your <code>featureFlags.js</code>, use environment variables:</p> <pre><code>export const featureFlags = {\n  newFeature: process.env.REACT_APP_NEW_FEATURE === 'true',\n  betaFeature: process.env.REACT_APP_BETA_FEATURE === 'true',\n};\n</code></pre> <p>And set the environment variables in <code>.env</code>:</p> <pre><code>REACT_APP_NEW_FEATURE=true\nREACT_APP_BETA_FEATURE=false\n</code></pre> Summary <ul> <li>Static Feature Flags: Simple JavaScript objects for flag management.</li> <li>Dynamic Feature Flags: Fetch flags from an API or remote service.</li> <li>Third-party services: LaunchDarkly, Unleash, etc., provide more advanced features for managing flags in production.</li> <li>Environment-Specific Flags: Use environment variables to control features in different environments.</li> </ul> <p>By implementing feature flags, you can decouple code deployment from feature release, making it easier to test and deploy features with greater control.</p>"},{"location":"migration/react/feature-flags/#for-beginners","title":"For Beginners","text":"<p>For a beginner, I recommend starting with static feature flags (using a simple JavaScript object or configuration file). It\u2019s easy to set up and doesn\u2019t require third-party services or complicated configurations. This approach allows you to get a feel for feature flagging without the added complexity, and it's a great way to implement feature flags in small to medium-sized projects.</p>"},{"location":"migration/react/feature-flags/#why-start-with-static-feature-flags","title":"Why Start with Static Feature Flags?","text":"<ul> <li>Simple and quick to implement: You can start right away without worrying about external dependencies.</li> <li>Easy to understand: The logic is straightforward, and you get immediate feedback on how flags control your features.</li> <li>Great for small projects: If your app is still in early stages or you don\u2019t expect to scale your feature flagging system too much, this is a good starting point.</li> </ul>"},{"location":"migration/react/feature-flags/#heres-a-recap-of-how-you-can-implement-it","title":"Here\u2019s a recap of how you can implement it:","text":"<ol> <li> <p>Create a <code>featureFlags.js</code> file that contains your flags:</p> <pre><code>// featureFlags.js\nexport const featureFlags = {\n    newFeature: false,  // Change this to true to enable the new feature\n    betaFeature: true,  // Change this to false to disable the beta feature\n};\n</code></pre> </li> <li> <p>Use flags in your components:</p> <pre><code>import React from 'react';\nimport { featureFlags } from './featureFlags';\n\nconst MyComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Welcome to My App&lt;/h1&gt;\n\n            {featureFlags.newFeature &amp;&amp; (\n                &lt;div&gt;\n                    &lt;h2&gt;New Feature&lt;/h2&gt;\n                    &lt;p&gt;This is the new feature!&lt;/p&gt;\n                &lt;/div&gt;\n            )}\n\n            {featureFlags.betaFeature &amp;&amp; (\n                &lt;div&gt;\n                    &lt;h2&gt;Beta Feature&lt;/h2&gt;\n                    &lt;p&gt;This is the beta feature!&lt;/p&gt;\n                &lt;/div&gt;\n            )}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre> </li> <li> <p>Toggle flags based on your needs: When you need to enable/disable features, simply change the value of flags in the <code>featureFlags.js</code> file.</p> </li> </ol>"},{"location":"migration/react/feature-flags/#when-should-you-move-to-a-more-advanced-solution","title":"When Should You Move to a More Advanced Solution?","text":"<p>Once you get comfortable with the basics, and if you find that your app grows larger or you need to manage feature flags across different environments (e.g., development, staging, production), then you can consider more advanced solutions like:</p> <ul> <li>Remote feature flag management (fetching flags from an API)</li> <li>Third-party services like LaunchDarkly or Unleash, which are useful for large applications or teams with more complex requirements (like A/B testing or gradual rollouts).</li> </ul> <p>But to start, static flags should be more than enough for managing features in your React app! Would you like more help with implementing this in your app?</p> <p>(Optional) Add More Features and Flags</p> <p>As your app grows, you can add more features and flags. Just remember to:</p> <ol> <li>Add new flags to the <code>featureFlags.js</code> file.</li> <li>Use the flags in the components where those features are implemented.</li> </ol> <pre><code>export const featureFlags = {\n  newFeature: false,\n  betaFeature: true,\n  darkMode: false,  // New flag for dark mode\n  specialOffer: true, // Special offer flag\n};\n</code></pre> <p>And in your components:</p> <pre><code>{featureFlags.darkMode &amp;&amp; (\n  &lt;div style={{ backgroundColor: 'black', color: 'white' }}&gt;\n    &lt;h2&gt;Dark Mode&lt;/h2&gt;\n    &lt;p&gt;This is dark mode.&lt;/p&gt;\n  &lt;/div&gt;\n)}\n\n{featureFlags.specialOffer &amp;&amp; (\n  &lt;div&gt;\n    &lt;h2&gt;Special Offer&lt;/h2&gt;\n    &lt;p&gt;Take advantage of this special offer!&lt;/p&gt;\n  &lt;/div&gt;\n)}\n</code></pre> <p>With this approach, you can easily manage which features are <code>enabled</code> or <code>disabled</code> in your app, without needing to redeploy every time you make a change to the feature availability.</p> <p></p>"},{"location":"migration/react/feature-flags/#git-tricks","title":"Git Tricks","text":"<pre><code>git log --author=\"Bishow Thapa\" --since=\"midnight\" --oneline\n</code></pre>"},{"location":"migration/react/feature-flags/#reference","title":"Reference","text":"<ul> <li>Youtube, What are Feature Flags? (IBM Technology)</li> <li>Github, LaunchDarkly Client-side SDK for React.js </li> <li>Feature Flagging </li> <li>Feature Flags: A Technique for Modifying Application Behavior without Altering Code</li> <li>Feature Flags and Modular Development: Ensuring Flexibility in Large Android Projects</li> <li> <p>Using Feature Flags aka Feature Toggles in Microservices</p> </li> <li> <p>JWT ROCKS</p> </li> <li>JWT Token</li> </ul>"},{"location":"migration/react/hierarchical-structure/","title":"Hierarchical","text":"<p>The JSON you provided represents a hierarchical structure of employees and their reporting relationships within a company. Here's a breakdown of the data:</p> <p>Employee 11 (Dealser):</p> <ul> <li>Reporting Manager: Employee 7</li> <li>Department: UnitOne</li> <li>Email: tsering.sherpa@info.com.np</li> <li>Level Status: 1</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 7)</li> </ul> <p>Employee 7 (UnitOne Head):</p> <ul> <li>Reporting Manager: Employee 5</li> <li>Department: UnitOne</li> <li>Email: newuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 5)</li> </ul> <p>Employee 5 (Manager Head):</p> <ul> <li>Reporting Manager: Employee 3</li> <li>Department: Managers</li> <li>Email: testuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 3)</li> </ul> <p>Employee 3 (CEO):</p> <ul> <li>No reporting manager (highest level in the organization)</li> <li>Department: Main</li> <li>Email: dummyuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has no direct reports.</li> </ul> <p>This structure shows that Employee 3 (CEO) is at the top of the hierarchy, followed by Employee 5 (Manager Head), Employee 7 (UnitOne Head), and Employee 11 (Dealser). Each employee has various levels of reporting responsibilities, with no one currently authorized to approve anything (since canApprove is false for all).</p>"},{"location":"migration/react/hierarchical-structure/#diagram","title":"Diagram:","text":"<p>Here\u2019s a simple process flow diagram to visualize the cascading flow:</p> <pre><code>+-----------------------------+\n|   Step 1: Initial State      |\n|   - Empty Approval Dropdown |\n|   - Empty Verifier Dropdown |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 2: API Call to Fetch |\n|   approvalPersonData        |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 3: Flatten Data      |\n|   - Approval options        |\n|   - Verifier options (empty)|\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 4: Populate Approval |\n|   Dropdown                  |\n|   - CEO, Manager Head,      |\n|     UnitOne Head, Dealser   |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 5: Select Approver   |\n|   (e.g., UnitOne Head)      |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 6: Find Direct       |\n|   Reports (e.g., Dealser)   |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 7: Populate Verifier |\n|   Dropdown (e.g., Dealser)  |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 8: Final User Action |\n|   - User selects Verifier   |\n+-----------------------------+\n</code></pre>"},{"location":"migration/react/hierarchical-structure/#visual-representation-of-the-flow","title":"Visual Representation of the Flow:","text":"<pre><code>+------------------------------------+\n|          Step 1: Approval          |\n|          Dropdown (First)          |\n|     - Select Approver (e.g., UnitOne Head) |\n+------------------------------------+\n                 |\n                 V\n+------------------------------------+\n|          Step 2: Verifier          |\n|          Dropdown (Second)        |\n|     - Populated based on selection |\n|     - (e.g., Dealser)              |\n+------------------------------------+\n</code></pre>"},{"location":"migration/react/hierarchical-structure/#visual-representation-of-the-flow_1","title":"Visual Representation of the Flow:","text":"<pre><code>+------------------------------------+\n|          Step 1: Verifier          |\n|          Dropdown (First)          |\n|     - Select Verifier (e.g., Dealser) |\n+------------------------------------+\n                 |\n                 V\n+------------------------------------+\n|   Step 2: Approval Dropdown       |\n|   Populated Based on Verifier     |\n|     - Select Approver (e.g., UnitOne Head) |\n+------------------------------------+\n</code></pre> <pre><code>import React, { useState, useEffect } from \"react\";\nimport { Select, Form, Button } from \"antd\";\n\n// Helper function to flatten hierarchical data\nconst flattenEmployees = (employees) =&gt; {\n  return employees.map((emp) =&gt; ({\n    value: emp.id,\n    label: `${emp.positionName} (${emp.emailAddress})`,\n    children: emp.directReports ? flattenEmployees(emp.directReports) : [],\n  }));\n};\n\nconst App = () =&gt; {\n  const [approvalOptions, setApprovalOptions] = useState([]);\n  const [verifierOptions, setVerifierOptions] = useState([]);\n  const [selectedApproval, setSelectedApproval] = useState(null);\n  const [selectedVerifier, setSelectedVerifier] = useState(null);\n\n  // Fetch API data\n  const {\n    data: approvalPersonData,\n    isLoading: approvalPersonLoading,\n    error: approvalPersonError,\n  } = useGetForexApprovalPersonQuery(\n    {\n      sellingAmount: formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n    },\n    {\n      skip: !formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n    }\n  );\n\n  useEffect(() =&gt; {\n    if (approvalPersonData) {\n      // Flatten employees for Verifier dropdown\n      const flattenedVerifiers = flattenEmployees(\n        approvalPersonData.directReports || []\n      );\n      setVerifierOptions(flattenedVerifiers);\n    }\n  }, [approvalPersonData]);\n\n  const handleVerifierChange = (value) =&gt; {\n    setSelectedVerifier(value);\n\n    // Find the selected verifier and get their approver\n    const selectedVerifierObj = findEmployeeById(\n      value,\n      approvalPersonData.directReports || []\n    );\n    if (selectedVerifierObj &amp;&amp; selectedVerifierObj.reportingManagerId) {\n      const approver = findEmployeeById(\n        selectedVerifierObj.reportingManagerId,\n        approvalPersonData.directReports || []\n      );\n      setApprovalOptions(flattenEmployees(approver ? [approver] : []));\n    }\n  };\n\n  const handleApprovalChange = (value) =&gt; {\n    setSelectedApproval(value);\n  };\n\n  const findEmployeeById = (id, employees) =&gt; {\n    for (let emp of employees) {\n      if (emp.id === id) return emp;\n      if (emp.directReports) {\n        const found = findEmployeeById(id, emp.directReports);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Form&gt;\n        &lt;Form.Item label=\"Verifier\"&gt;\n          &lt;Select\n            value={selectedVerifier}\n            onChange={handleVerifierChange}\n            placeholder=\"Select Verifier\"\n            options={verifierOptions}\n            loading={approvalPersonLoading}\n            disabled={approvalPersonLoading || approvalPersonError}\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Form.Item label=\"Approval\"&gt;\n          &lt;Select\n            value={selectedApproval}\n            onChange={handleApprovalChange}\n            placeholder=\"Select Approver\"\n            options={approvalOptions}\n            disabled={!approvalOptions.length}\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Button type=\"primary\"&gt;Submit&lt;/Button&gt;\n      &lt;/Form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"migration/react/hierarchical-structure/#updated","title":"UPDATED","text":"<pre><code>{\n  \"id\": 11,\n  \"reportingManagerId\": 7,\n  \"aspNetUserId\": \"eba59683-e54e-4708-1730-08dd2e2eef11\",\n  \"departmentId\": 7,\n  \"positionName\": \"Dealser\",\n  \"approvalLimit\": 0,\n  \"outstandingLimit\": 0,\n  \"departmentName\": \"UnitOne\",\n  \"fullName\": null,\n  \"emailAddress\": \"tsering.sherpa@info.com.np\",\n  \"levelStatus\": 1,\n  \"canApprove\": false,\n  \"directReports\": [\n    {\n      \"id\": 7,\n      \"reportingManagerId\": 5,\n      \"aspNetUserId\": \"121f09ee-af3e-40ff-eeba-08dd2baa3cea\",\n      \"departmentId\": 7,\n      \"positionName\": \"UnitOne Head\",\n      \"approvalLimit\": 0,\n      \"outstandingLimit\": 0,\n      \"departmentName\": \"UnitOne\",\n      \"fullName\": null,\n      \"emailAddress\": \"newuser@gmail.com\",\n      \"levelStatus\": 3,\n      \"canApprove\": false,\n      \"directReports\": [\n        {\n          \"id\": 5,\n          \"reportingManagerId\": 3,\n          \"aspNetUserId\": \"da6d73b6-7e3a-4cea-e0bf-08dd2b23715a\",\n          \"departmentId\": 3,\n          \"positionName\": \"Manager Head\",\n          \"approvalLimit\": 0,\n          \"outstandingLimit\": 0,\n          \"departmentName\": \"Managers\",\n          \"fullName\": null,\n          \"emailAddress\": \"testuser@gmail.com\",\n          \"levelStatus\": 3,\n          \"canApprove\": false,\n          \"directReports\": [\n            {\n              \"id\": 3,\n              \"reportingManagerId\": null,\n              \"aspNetUserId\": \"cb982264-fbe7-457f-5a23-08dd28cc95d0\",\n              \"departmentId\": 1,\n              \"positionName\": \"CEO\",\n              \"approvalLimit\": 0,\n              \"outstandingLimit\": 0,\n              \"departmentName\": \"Main\",\n              \"fullName\": null,\n              \"emailAddress\": \"dummyuser@gmail.com\",\n              \"levelStatus\": 3,\n              \"canApprove\": false,\n              \"directReports\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"migration/react/hierarchical-structure/#hierarchical-structure-from-the-updated-data","title":"Hierarchical Structure from the Updated Data:","text":"<pre><code>- **Dealser (ID: 11)**\n  - Reports to **UnitOne Head (ID: 7)**\n  - **UnitOne Head (ID: 7)**\n    - Reports to **Manager Head (ID: 5)**\n    - **Manager Head (ID: 5)**\n      - Reports to **CEO (ID: 3)**\n      - **CEO (ID: 3)** has no reporting manager (top of the hierarchy)\n</code></pre>"},{"location":"migration/react/improved-code/","title":"Improved Code","text":""},{"location":"migration/react/improved-code/#improved-code","title":"Improved code","text":"Improved Code<pre><code>export function newCurrentVerifiers(data) {\n    // Ensure data is an array before proceeding\n    if (!Array.isArray(data)) return [];\n\n    const { VERIFIER } = HIERARCHY_LEVEL_STATUS || {}; // Destructure for cleaner access\n\n    // Filter only items with the correct levelStatus\n    return data.filter((item) =&gt; item?.levelStatus === VERIFIER);\n}\n</code></pre> Old Code<pre><code>export function newCurrentVerifiers(data) {\n    if (!Array.isArray(data)) return [];\n\n    let verifiersOnly = data?.filter(\n        (item) =&gt; HIERARCHY_LEVEL_STATUS?.VERIFIER === item?.levelStatus\n    );\n\n    return verifiersOnly;\n}\n</code></pre>"},{"location":"migration/react/is-useRef-a-mutex/","title":"useRef mutex or not","text":""},{"location":"migration/react/is-useRef-a-mutex/#is-useref-a-mutex","title":"Is <code>useRef</code> a mutex","text":"<p>Let's clarify what <code>useRef()</code> actually does and how it's used for lock-like behavior in React \u2014 especially when we talk about mutexes or preventing race conditions.</p>"},{"location":"migration/react/is-useRef-a-mutex/#what-is-useref","title":"\ud83d\udd0d What is <code>useRef()</code>?","text":"<ul> <li><code>useRef()</code> gives you a mutable object that persists for the lifetime of the component.</li> <li>It does not trigger re-renders when the value changes.</li> <li>It\u2019s basically a container that you can use to store \"instance-like\" values.</li> </ul> <pre><code>const ref = useRef(initialValue);\n</code></pre> <p>You can access and update the value with:</p> <pre><code>ref.current = newValue;\n</code></pre> <p>\ud83e\udde0 So, is <code>useRef</code> a \"mutex\"? Not really...</p> <p>It's not a real mutex (i.e., it doesn't block code), but it can be used to simulate a lock or track a version/token in an async context.</p> <p>\u2705 Why and how <code>useRef</code> is useful for lock-like behavior</p> <p>Let\u2019s look at a few scenarios where <code>useRef()</code> behaves like a lock or mutex.</p>"},{"location":"migration/react/is-useRef-a-mutex/#why-and-how-useref-is-useful-for-lock-like-behavior","title":"Why and how useRef is useful for lock-like behavior","text":"<p>Let\u2019s look at a few scenarios where <code>useRef()</code> behaves like a lock or mutex.</p>"},{"location":"migration/react/is-useRef-a-mutex/#1-locking-an-async-flow-eg-prevent-overlapping-fetches","title":"1. Locking an async flow (e.g. prevent overlapping fetches)","text":"<pre><code>const isLocked = useRef(false);\n\nconst handleClick = async () =&gt; {\n  if (isLocked.current) return; // someone else is in\n  isLocked.current = true;\n\n  try {\n    await doSomethingAsync();\n  } finally {\n    isLocked.current = false; // release lock\n  }\n};\n</code></pre> <p>Why this works:</p> <ul> <li><code>isLocked.current</code> acts as a flag that prevents overlapping execution.</li> <li>Since <code>useRef</code> doesn\u2019t cause re-renders, it\u2019s fast and side-effect-free.</li> </ul>"},{"location":"migration/react/is-useRef-a-mutex/#2-cancel-outdated-async-calls-version-token","title":"2. Cancel outdated async calls (version token)","text":"<pre><code>const fetchVersion = useRef(0);\n\nconst fetchData = async () =&gt; {\n  const current = ++fetchVersion.current;\n  const response = await fetch(\"/api/data\");\n  const data = await response.json();\n\n  if (current === fetchVersion.current) {\n    setData(data); // only set data if it's still the latest fetch\n  }\n};\n</code></pre> <p>Why this works:</p> <ul> <li>Each async call gets a version number.</li> <li>Only the latest version is allowed to update state.</li> <li>This prevents stale async calls from overwriting newer data.</li> </ul>"},{"location":"migration/react/is-useRef-a-mutex/#why-not-use-usestate-instead","title":"\ud83e\udde9 Why not use <code>useState</code> instead?","text":"<p><code>useState</code> causes re-renders on every update. That\u2019s not what we want for a mutex or lock variable that may change often or quickly \u2014 especially when it's just used for internal logic.</p> <p>Use <code>useState</code> when:</p> <ul> <li>You want the UI to react to a change.</li> </ul> <p>Use <code>useRef</code> when:</p> <ul> <li>You want a stable, mutable variable that won\u2019t cause re-renders.</li> </ul>"},{"location":"migration/react/is-useRef-a-mutex/#in-summary","title":"\ud83e\udde0 In Summary:","text":"Feature <code>useRef()</code> <code>useState()</code> Causes re-render? \u274c No \u2705 Yes Useful for locking/mutex? \u2705 Yes (flags, tokens, locks) \u274c Not ideal (performance issues) Persistence across renders \u2705 Yes \u2705 Yes"},{"location":"migration/react/is-useRef-a-mutex/#tip","title":"TIP","text":"Tip <p>\ud83e\uddf0 How to Implement a Mutex</p> <p>You can use:</p> <ul> <li><code>useRef()</code> to store the mutex/lock state.</li> <li><code>AbortController</code> (for canceling previous requests).</li> <li>Libraries like async-mutex for more structured locking.</li> </ul> <p>\ud83d\udfe1 When Mutexes Are Not Needed in React</p> <ul> <li>For pure component state updates \u2014 React batches updates safely.</li> <li>For UI rendering logic \u2014 React handles this in a predictable manner.</li> </ul> <p>Locking critical sections in concurrent React (React 18+)</p> <p>With React Concurrent Mode, React might interrupt and restart renders. If you're interacting with external systems (e.g. localStorage, WebSocket), mutexes or flags help ensure consistency.</p>"},{"location":"migration/react/memo-theory/","title":"Memo Theroy","text":""},{"location":"migration/react/memo-theory/#memo-theory","title":"Memo Theory","text":"<p>When you're passing functions <code>or</code> objects as props in React, especially to memoized components, there are important performance and correctness considerations to keep in mind.</p>"},{"location":"migration/react/memo-theory/#why-this-matters","title":"\ud83d\udd04 Why this matters:","text":"<p>React uses reference equality to determine if props have changed. If you're passing a new object or function instance on every render, even if its contents are the same, it will break memoization and cause re-renders.</p>"},{"location":"migration/react/memo-theory/#considerations-when-passing-functionsobjects-as-props","title":"\ud83d\udd0d Considerations when passing functions/objects as props","text":""},{"location":"migration/react/memo-theory/#1-memoize-functions-and-objects-before-passing","title":"\u2705 1. Memoize functions and objects before passing","text":"<p>Use <code>useCallback</code> (for functions) or <code>useMemo</code> (for objects) in the parent component:</p> <pre><code>const memoizedFunction = useCallback(() =&gt; {\n  // do something\n}, []);\n\nconst memoizedObject = useMemo(\n  () =&gt; ({\n    key: value,\n  }),\n  [value]\n);\n\n&lt;BuySellAmountInfo myFn={memoizedFunction} config={memoizedObject} /&gt;;\n</code></pre> <p>This prevents unnecessary re-renders due to prop changes.</p>"},{"location":"migration/react/memo-theory/#2-avoid-inline-definitions","title":"\ud83d\udea8 2. Avoid inline definitions","text":"<pre><code>&lt;BuySellAmountInfo\n  config={{ currency, rateCalculation }} // \u274c New object every render\n  onChange={() =&gt; doSomething()} // \u274c New function every render\n/&gt;\n</code></pre> <p>Even if <code>currency</code> and <code>rateCalculation</code> don't change, the object reference does \u2014 so React will treat it as a new prop.</p>"},{"location":"migration/react/memo-theory/#3-understand-when-memoization-is-worth-it","title":"\ud83e\udde0 3. Understand when memoization is worth it","text":"<p>If your child component is:</p> <ul> <li>Lightweight and doesn't render often \u2192 you may not need <code>React.memo</code>.</li> <li>Heavy or deeply nested \u2192 memoization and stable props help performance.</li> </ul>"},{"location":"migration/react/memo-theory/#4-for-form-objects-like-from-useform","title":"\ud83d\udce6 4. For <code>form</code> objects (like from <code>useForm</code>)","text":"<p>These are typically already stable, so passing them directly is fine:</p> <pre><code>const [form] = Form.useForm(); // \u2705 stable reference\n&lt;BuySellAmountInfo form={form} /&gt;;\n</code></pre> <p>But don\u2019t wrap in <code>useMemo</code>, it's unnecessary.</p>"},{"location":"migration/react/memo-theory/#best-practices-summary","title":"\u2705 Best Practices Summary","text":"What You\u2019re Passing Memoization Needed? How Plain values \u274c N/A Functions \u2705 <code>useCallback(...)</code> Objects (config, state) \u2705 <code>useMemo(...)</code> Ant Design <code>form</code> object \u274c (already stable) Pass directly"},{"location":"migration/react/memo-theory/#example","title":"\ud83e\uddea Example","text":"<pre><code>const [form] = Form.useForm();\n\nconst config = useMemo(\n  () =&gt; ({\n    currency,\n    rateCalculation,\n  }),\n  [currency, rateCalculation]\n);\n\nconst handleChange = useCallback(() =&gt; {\n  console.log(\"Changed\");\n}, []);\n\n&lt;BuySellAmountInfo form={form} config={config} onChange={handleChange} /&gt;;\n</code></pre>"},{"location":"migration/react/memo-theory/#knowing-thyself","title":"KNowing ThySelf","text":"<p>Knowing whether <code>React.memo</code> and memoization are actually working is critical when you're optimizing React performance.</p> <p>Here\u2019s how to check if <code>React.memo</code> and memoized props are effective:</p>"},{"location":"migration/react/memo-theory/#1-use-consolelog-inside-the-component","title":"\u2705 1. Use <code>console.log()</code> inside the component","text":"<p>Add a log at the top of your component</p> <pre><code>const BuySellAmountInfo = React.memo(function BuySellAmountInfo(props) {\n  console.log('BuySellAmountInfo rendered');\n  ...\n});\n</code></pre> <p>Then, in the parent component, update unrelated state or props.</p> <p>\u2705 If the log does not show, memoization is working.</p>"},{"location":"migration/react/memo-theory/#2-use-react-developer-tools-profiler-tab","title":"\u2705 2. Use React Developer Tools (Profiler tab)","text":"Steps: <ol> <li>Install React Developer Tools.</li> <li>Open the \"Profiler\" tab in DevTools.</li> <li>Click \"Record\", perform your UI interaction, and stop recording.</li> <li> <p>Look for your component (<code>BuySellAmountInfo</code>):</p> <ul> <li>If it's gray = didn't re-render \u2705</li> <li>If it's colored = it re-rendered \ud83d\udd01</li> </ul> </li> </ol>"},{"location":"migration/react/memo-theory/#3-use-a-custom-areequal-function","title":"\u2705 3. Use a custom <code>areEqual</code> function","text":"<p>This helps if props are objects or arrays. Add a custom comparison and log inside it:</p> <pre><code>function areEqual(prevProps, nextProps) {\n  const isSame = prevProps.config === nextProps.config;\n  if (!isSame) {\n    console.log(\"Props changed, re-rendering\");\n  }\n  return isSame;\n}\n\nexport default React.memo(BuySellAmountInfo, areEqual);\n</code></pre> <p>This shows when React decides to re-render based on props.</p>"},{"location":"migration/react/memo-theory/#4-track-re-renders-visually-for-devdebug","title":"\u2705 4. Track re-renders visually (for dev/debug)","text":"<p>Add a visual counter or color toggle:</p> <pre><code>const renderCount = useRef(0);\nrenderCount.current++;\n\nreturn &lt;div&gt;Rendered {renderCount.current} times&lt;/div&gt;;\n</code></pre>"},{"location":"migration/react/memo-theory/#5-react-render-tracker-less-popular","title":"5. \u2705 react-render-tracker (less popular)","text":"<p>A lower-level utility for tracking component renders. Useful if you want to manually track and analyze renders but isn't as feature-rich as <code>why-did-you-render</code>.</p> Tool Best For <code>why-did-you-render</code> \u2705 Detecting prop changes that trigger re-renders React DevTools Profiler \ud83d\udcca Visual performance insights <code>console.log()</code> + custom <code>areEqual</code> \ud83e\uddea Manual checks (good for quick debugging)"},{"location":"migration/react/memo-theory/#common-pitfalls-that-break-memoization","title":"\u26a0\ufe0f Common Pitfalls That Break Memoization","text":"Mistake Fix Passing inline objects/functions Use <code>useMemo</code>, <code>useCallback</code> Component relies on context or form instance Make sure it's stable or passed explicitly Expecting <code>React.memo</code> to prevent all re-renders It only skips re-renders when props don\u2019t change by reference"},{"location":"migration/react/memo-theory/#example-effective-memoization","title":"\ud83d\udd0d Example: Effective Memoization","text":"<pre><code>const BuySellAmountInfo = React.memo(({ config }) =&gt; {\n  console.log(\"Rendering BuySellAmountInfo\");\n  return &lt;div&gt;{config.currency}&lt;/div&gt;;\n});\n\nconst Parent = () =&gt; {\n  const config = useMemo(() =&gt; ({ currency: \"USD\" }), []);\n\n  return &lt;BuySellAmountInfo config={config} /&gt;;\n};\n</code></pre> <p>The <code>BuySellAmountInfo</code> component will only re-render if <code>config</code> changes by reference, which it won't here due to <code>useMemo</code>.</p>"},{"location":"migration/react/memo-theory/#issue","title":"ISSUE","text":"<pre><code>&lt;BuySellInfo\n    form={form}\n    currency={currency}\n    handleSelect={handleSelect}\n/&gt;\n&lt;CounterpartyInfo\n    form={form}\n    bank={bank}\n    bankUser={bankUser}\n    openCounterPartyModal={openCounterPartyModal}\n    openCounterPartyDealerModal={openCounterPartyDealerModal}\n/&gt;\n&lt;BuySellAmountInfo\n    form={form}\n    currency={currency}\n    isMultiplicationStatus={isMultiplicationStatus}\n    tolaranceValue={tolaranceValue}\n    rateCalculation={rateCalculation}\n/&gt;\n</code></pre> <p>is this good or not but the issue in here in every form changes every component trigger</p> <p>What you have:</p> <p>You\u2019re passing the same <code>form</code> instance plus some props to multiple child components inside a parent. The issue: every time the form changes, all components re-render.</p> Why is that happening? <ul> <li>Each child component uses the same <code>form</code> instance.</li> <li>When any form field changes, <code>form</code> updates internally.</li> <li>If your child components call <code>Form.useWatch([], form)</code> or <code>form.getFieldsValue()</code> without fine-grained watching, all re-render.</li> <li>Even if you memoize the components, the props change (or internal context changes) triggers re-render.</li> </ul> How to fix or improve this <ol> <li> <p>Watch only specific form fields inside each component</p> <p>Use <code>Form.useWatch</code> to watch only the fields each component cares about, not the entire form.</p> Example in `BuySellAmountInfo`<pre><code>const rateCalculation = Form.useWatch('rateCalculation', form);\nconst isMultiplicationStatus = Form.useWatch('isMultiplicationStatus', form);\n</code></pre> <p>This way, the component only re-renders when those specific values change.</p> </li> <li> <p>Memoize your components</p> <p>Wrap them with <code>React.memo()</code> so they only re-render when props they actually depend on change.</p> </li> <li> <p>Avoid passing whole form or unrelated props</p> <p>If a child component doesn\u2019t need the entire form, avoid passing the whole <code>form</code>.</p> <p>Instead, pass the specific values or handlers needed:</p> <pre><code>&lt;BuySellAmountInfo\n    rateCalculation={rateCalculation}\n    isMultiplicationStatus={isMultiplicationStatus}\n    tolaranceValue={tolaranceValue}\n/&gt;\n</code></pre> </li> <li> <p>Lift form state access to parent and pass only needed props</p> <p>Instead of having every child call <code>Form.useWatch(form)</code>, have the parent watch needed fields and pass those as props. This centralizes state watching and limits re-renders.</p> </li> </ol> <pre><code>// In parent:\nconst rateCalculation = Form.useWatch(\"rateCalculation\", form);\nconst isMultiplicationStatus = Form.useWatch(\"isMultiplicationStatus\", form);\n\n&lt;BuySellAmountInfo\n  rateCalculation={rateCalculation}\n  isMultiplicationStatus={isMultiplicationStatus}\n  tolaranceValue={tolaranceValue}\n/&gt;;\n</code></pre> <p>TL;DR:</p> <ul> <li>Watch only specific fields relevant to each component</li> <li>Pass only those values as props</li> <li>Memoize components to skip re-renders if props don\u2019t change</li> </ul>"},{"location":"migration/react/memo-theory/#tip","title":"TIP","text":"ForexForm.jsx<pre><code>&lt;Form\n    form={form}\n    layout=\"vertical\"\n    className=\"currency-exchange-steps\"\n    onFinish={onFinishSubmit}\n&gt;\n    &lt;Row gutter={24}&gt;\n        &lt;TransactionType /&gt;\n        &lt;BuySellInfo\n            transationType={transationTypeWatch}\n            buyingCurrencyId={buyingCurrencyWatch}\n            sellingCurrencyId={sellingCurrencyWatch}\n            currency={currency}\n            handleSelect={handleSelect}\n        /&gt;\n&lt;/Form&gt;\n</code></pre> \u2705 Good Signs <ul> <li>\u2705 You're no longer passing the entire form \u2014 great.</li> <li>\u2705 <code>handleSelect</code> comes from <code>useFormSelectIds()</code> \u2014 assuming it's memoized internally, that should be fine.</li> <li>\u2705 <code>currency</code> comes from <code>useGetCurrencyQuery()</code> \u2014 assuming this returns a stable reference unless data changes (which RTK Query typically handles well).</li> </ul> \ud83d\udd0d Why <code>BuySellInfo</code> may still be re-rendering: <ol> <li> <p><code>transationTypeWatch</code>, <code>buyingCurrencyWatch</code>, <code>sellingCurrencyWatch</code></p> <p>If these are from <code>Form.useWatch()</code>, and you're calling them in the parent, that's correct.</p> <p>BUT: Every time any form field changes, the parent re-renders, and those <code>watch</code> values may change. Even if values are the same by content, React will see them as new props by reference, and cause <code>BuySellInfo</code> to re-render.</p> </li> </ol> \u2705 Fix: Stabilize those props <p>If they\u2019re primitives (strings/numbers), you're okay.</p> <p>If not, and you suspect re-renders still happen:</p> <ul> <li>Use <code>useMemo</code> in the parent to pass stable references.</li> <li>Or wrap <code>BuySellInfo</code> with <code>React.memo</code> and use a custom comparison.</li> </ul> \u2705 Double-check <code>handleSelect</code> <p>If <code>useFormSelectIds()</code> returns <code>handleSelect</code> as a new function on each render, you\u2019ll break memoization.</p> <p>Check inside <code>useFormSelectIds()</code> \u2014 is <code>handleSelect</code> wrapped in <code>useCallback()</code>?</p> <p>If not, you should wrap it like this:</p> <pre><code>const handleSelect = useCallback((id) =&gt; {\n// your logic here\n}, []);\n</code></pre> <p>\u2705 Final Recommendations</p> Prop Memoization Required? Why <code>transationTypeWatch</code> \u274c (if primitive) Safe if string/number <code>buyingCurrencyWatch</code> \u274c (if primitive) Safe <code>sellingCurrencyWatch</code> \u274c (if primitive) Safe <code>currency</code> \u2705 handled by RTK Query Usually stable unless refetched <code>handleSelect</code> \u2705 if not memoized Wrap in <code>useCallback</code> if needed"},{"location":"migration/react/memo-theory/#memoize-theory-solved-hooks","title":"Memoize Theory SOLVED HOOKS","text":"<pre><code>import { useState } from \"react\";\n\nconst useFormSelectIds = () =&gt; {\n  const [selectedIds, setSelectedIds] = useState({});\n\n  const handleSelect = (value, field) =&gt; {\n    setSelectedIds((prevState) =&gt; ({\n      ...prevState,\n      [field]: value,\n    }));\n  };\n\n  const resetSelectedIds = () =&gt; setSelectedIds({});\n\n  return { selectedIds, handleSelect, resetSelectedIds };\n};\n\nexport default useFormSelectIds;\n</code></pre> <p>should i use the useCallback here or in the component</p> <p>Yes \u2014 you should use <code>useCallback</code> inside the <code>useFormSelectIds</code> hook to memoize the <code>handleSelect</code> function before returning it.</p> \u2705 Why memoize inside the hook? <p>If you don't memoize <code>handleSelect</code>, it will be a new function reference on every render, which will break <code>React.memo</code> on any component that receives it as a prop \u2014 like your <code>BuySellInfo</code>.</p> <p>Memoizing it inside the hook keeps the function stable for all consumers of the hook \u2014 and that\u2019s the cleanest solution</p>"},{"location":"migration/react/memo-theory/#how-to-fix-it","title":"\u2705 How to fix it:","text":"<p>Update your hook like this:</p> <pre><code>import { useState, useCallback } from \"react\";\n\nconst useFormSelectIds = () =&gt; {\n  const [selectedIds, setSelectedIds] = useState({});\n\n  const handleSelect = useCallback((value, field) =&gt; {\n    setSelectedIds((prevState) =&gt; ({\n      ...prevState,\n      [field]: value,\n    }));\n  }, []);\n\n  const resetSelectedIds = useCallback(() =&gt; {\n    setSelectedIds({});\n  }, []);\n\n  return { selectedIds, handleSelect, resetSelectedIds };\n};\n\nexport default useFormSelectIds;\n</code></pre> <p>\u2705 Benefits:</p> <ul> <li><code>handleSelect</code> and <code>resetSelectedIds</code> are now stable references</li> <li>Components like <code>BuySellInfo</code> wrapped in <code>React.memo</code> will now properly skip re-renders unless other props actually change</li> </ul> <p>\u274c Don\u2019t memoize it in the component that uses the hook</p> <p>Memoizing it outside the hook (in the component) doesn\u2019t help because the hook already returns a fresh function each time unless it's memoized internally.</p> <pre><code>// BuySellAmountInfo.test.jsx\nimport React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { Form } from \"antd\";\nimport BuySellAmountInfo from \"./BuySellAmountInfo\";\nimport { TRANSACTION_TYPE } from \"@features/forex/utils/FOREX_DEAL\";\n\nvi.mock(\"@shared/utils/config\", () =&gt; ({\n  CONFIG: {\n    MODE: \"production\", // forces isDevelopmentMode = true\n  },\n}));\n\nconst currencyOptions = [\n  {\n    code: \"AED\",\n    id: \"492ad566-8bfd-4f43-9e40-08dd982817af\",\n  },\n  {\n    code: \"NPR\",\n    id: \"db2bf229-4d8f-4316-9e36-08dd982817af\",\n  },\n];\n\nconst defaultProps = {\n  transationType: TRANSACTION_TYPE.BUY,\n  buyingCurrencyId: \"492ad566-8bfd-4f43-9e40-08dd982817af\",\n  sellingCurrencyId: \"db2bf229-4d8f-4316-9e36-08dd982817af\",\n  currency: currencyOptions,\n  isMultiplicationStatus: true,\n  tolaranceValue: { min: 1.1, max: 1.5 },\n  rateCalculation: { percentage: 2, difference: 0.03 },\n};\n\nconst renderComponent = (props = {}) =&gt; {\n  return render(\n    &lt;Form&gt;\n      &lt;BuySellAmountInfo {...defaultProps} {...props} /&gt;\n    &lt;/Form&gt;\n  );\n};\n\ndescribe(\"BuySellAmountInfo\", () =&gt; {\n  test(\"renders buying and selling amount fields for BUY transaction\", () =&gt; {\n    renderComponent();\n\n    expect(screen.getByLabelText(/Buying Amount:.*AED/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/Selling Amount:.*NPR/i)).toBeInTheDocument();\n  });\n\n  test(\"renders rate with tolerance and increase label\", () =&gt; {\n    renderComponent();\n\n    expect(screen.getByText(/Rate:/i)).toBeInTheDocument();\n    expect(\n      screen.getByText(/Tolarance Min\\/Max: 1.1\\/1.5/i)\n    ).toBeInTheDocument();\n    expect(screen.getByText(/Increase by 2 %/i)).toBeInTheDocument();\n  });\n\n  test(\"disables Selling Amount input if isMultiplicationStatus is boolean (BUY)\", () =&gt; {\n    renderComponent();\n\n    const sellingAmountInput = screen.getByLabelText(/Selling Amount:/i);\n    expect(sellingAmountInput).toBeDisabled();\n  });\n\n  test(\"renders SELL mode and disables Buying Amount input\", () =&gt; {\n    renderComponent({ transationType: TRANSACTION_TYPE.SELL });\n\n    const sellingAmount = screen.getByLabelText(/Selling Amount:.*NPR/i);\n    const buyingAmount = screen.getByLabelText(/Buying Amount:.*AED/i);\n\n    expect(sellingAmount).toBeInTheDocument();\n    expect(buyingAmount).toBeDisabled();\n  });\n\n  test(\"requires buying amount input in development mode\", () =&gt; {\n    renderComponent();\n    const buyingAmount = screen.getByLabelText(/Buying Amount:/i);\n    expect(buyingAmount).toBeRequired();\n  });\n\n  test(\"requires rate input always\", () =&gt; {\n    renderComponent();\n    const rateInput = screen.getByLabelText(/Rate:/i);\n    expect(rateInput).toBeRequired();\n  });\n});\n</code></pre>"},{"location":"migration/react/npm-publish/","title":"NPM Publish Package","text":""},{"location":"migration/react/npm-publish/#npm-publish","title":"NPM Publish","text":""},{"location":"migration/react/npm-publish/#types-of-packages-you-can-publish","title":"Types of Packages You Can Publish","text":"<p>You can publish a variety of different types of npm packages:</p> <ol> <li> <p>Utility Libraries</p> <ul> <li>A package providing utility functions, such as string manipulation, date formatting, etc.</li> <li>Example: <code>lodash</code>, <code>moment</code></li> </ul> </li> <li> <p>CLI Tools</p> <ul> <li>Command-line interface tools that are used via the terminal.</li> <li>Example: <code>create-react-app</code>, <code>eslint</code></li> </ul> <p>To create a CLI tool, use the \"bin\" field in your package.json to specify the executable file.</p> </li> <li> <p>Frameworks/Plugins</p> <ul> <li>Frameworks or plugins that integrate with other tools or libraries.</li> <li>Example: React components, Express middleware.</li> </ul> </li> <li> <p>Frontend Packages</p> <ul> <li>Packages designed for use in the browser, such as UI libraries or front-end components.</li> <li>Make sure to bundle and transpile your code properly before publishing frontend packages.</li> </ul> </li> </ol>"},{"location":"migration/react/npm-publish/#1-publish-the-package-to-npm","title":"1. Publish the Package to npm","text":"<p>To create an <code>npm</code> package, you need to:</p> <p>a. Set up a new directory</p> <ul> <li> <p>Create a new folder for your project, then navigate to it in your terminal.</p> <pre><code>mkdir my-package\ncd my-package\n</code></pre> </li> </ul> <p>b. Initialize the project with <code>package.json</code></p> <ul> <li> <p>Run <code>npm init</code> or <code>npm init -y</code> to generate a <code>package.json</code> file. The <code>-y</code> flag automatically fills in the default values for you.</p> <pre><code>npm init\n# or\nnpm init -y\n</code></pre> <p>This file contains metadata about your package (name, version, description, entry point, etc.).</p> </li> </ul> <p>c. Create your package code</p> <ul> <li> <p>Write your JavaScript code in the appropriate files. For example, <code>index.js</code> can be your entry point file.</p> index.js<pre><code>// greet.js\n\n// Function to greet\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// Function to say goodbye\nfunction bye(name) {\n  return `Goodbye, ${name}!`;\n}\n\n// Export both functions\nmodule.exports = {\n  greet,\n  bye,\n};\n</code></pre> </li> </ul> <p>d. Add dependencies (if any)</p> <ul> <li> <p>If your package requires external libraries, you can add them using <code>npm install</code>:</p> bash<pre><code>npm install lodash --save\n</code></pre> </li> </ul> <p>This will add <code>lodash</code> as a dependency in your <code>package.json</code>.</p>"},{"location":"migration/react/npm-publish/#2-publish-the-package-to-npm","title":"2. Publish the Package to <code>npm</code>","text":"<p>a. Create an npm account</p> <ul> <li> <p>Before publishing, you'll need an npm account. You can create one at npmjs.com. Once you've created your account, log in from the terminal:</p> <pre><code>npm login\n</code></pre> </li> </ul> <p>You\u2019ll be prompted for your username, password, and email.</p> <p>b. Add your package details to <code>package.json</code></p> <ul> <li>Make sure the <code>name</code>, <code>version</code>, and <code>main</code> fields are filled correctly in your <code>package.json</code>.</li> </ul> <p>c. Publish the package</p> <ul> <li> <p>Run the following command to publish your package to npm:</p> <pre><code>npm publish\n</code></pre> </li> </ul> Important Notes <ul> <li>Package Name: If you\u2019re publishing a public package, make sure the name is unique on npm. You can search for the name to avoid conflicts.</li> <li>Versioning: You can't publish the same version twice. Update the <code>version</code> field in <code>package.json</code> (use semantic versioning: major.minor.patch).</li> </ul> <pre><code>\"version\": \"1.0.1\"\n</code></pre> <p>d. Private packages (optional)</p> <ul> <li> <p>If you want to publish a private package, add <code>\"private\": true</code> in your <code>package.json</code>, or use a scoped package with a team account for private publishing.</p> <pre><code>npm publish --access=restricted\n</code></pre> </li> </ul>"},{"location":"migration/react/npm-publish/#3-using-your-published-package","title":"3. Using Your Published Package","text":"<p>To use your published package in another project:</p> <p>a. Install the package</p> <ul> <li> <p>In the project where you want to use the package, run:</p> <pre><code>npm install &lt;package-name&gt;\n</code></pre> </li> </ul> <p>b. Import and use the package</p> <ul> <li> <p>After installation, you can require the package in your code.</p> <pre><code>const greet = require(\"&lt;package-name&gt;\");\n\nconsole.log(greet(\"World\")); // Example output: \"Hello, World!\"\n</code></pre> </li> </ul>"},{"location":"migration/react/npm-publish/#conclusion","title":"Conclusion","text":"<ul> <li>Create: Use <code>npm init</code> to set up your project and create your code.</li> <li>Publish: Make sure you have an npm account, and use <code>npm publish</code> to upload your package.</li> <li>Use: Install your package with <code>npm install</code> and use it by requiring it in your code.</li> </ul> <p>The type of package you publish depends on what you're building, whether it's a utility, a CLI tool, or a framework/plugin.</p>"},{"location":"migration/react/react-update-notifier/","title":"React Update Notifier","text":""},{"location":"migration/react/react-update-notifier/#react-app-update-notifier-with-metajson-and-pnpm","title":"React App Update Notifier with <code>meta.json</code> and <code>pnpm</code>","text":"<p>Great question \u2014 aiming for the best and standard process is smart, especially for long-term maintainability and team workflows.</p> <p>Since you\u2019re using:</p> <ul> <li>React 18</li> <li>pnpm</li> <li>Ant Design</li> <li>Likely a bundler like Vite, Webpack, or Next.js</li> </ul> <p>Let\u2019s outline the best-practice approach to implementing a versioned update notifier \u2014 including standards used in professional deployments.</p>"},{"location":"migration/react/react-update-notifier/#best-standard-process-2025-edition","title":"\u2705 Best Standard Process (2025 Edition)","text":""},{"location":"migration/react/react-update-notifier/#objective","title":"\ud83e\uddf1 Objective","text":"<p>Notify users of a new version after deployment, using a <code>meta.json</code> file with:</p> <ul> <li>App version (<code>package.json</code>)</li> <li>Git commit hash (optional)</li> <li>Build timestamp</li> </ul> <p>This approach:</p> <ul> <li>Keeps builds traceable</li> <li>Works with any CI/CD</li> <li>Plays well with Vite, Webpack, Next.js</li> <li>Doesn\u2019t require a service worker (but can work with one)</li> </ul>"},{"location":"migration/react/react-update-notifier/#step-by-step-best-practice-setup","title":"\ud83d\udee0\ufe0f Step-by-Step Best Practice Setup","text":""},{"location":"migration/react/react-update-notifier/#1-use-a-build-time-script-prebuild-hook","title":"1. Use a Build-Time Script (Prebuild Hook)","text":"<p>Create a script that generates a meta.json file in public/.</p> <p>File: <code>scripts/generate-meta.js</code></p> <pre><code>const fs = require(\"fs\");\nconst path = require(\"path\");\nconst { execSync } = require(\"child_process\");\nconst packageJson = require(\"../package.json\");\n\nconst meta = {\n  version: packageJson.version,\n  buildTime: new Date().toISOString(),\n  commitHash: execSync(\"git rev-parse --short HEAD\").toString().trim(),\n};\n\nconst outputPath = path.resolve(__dirname, \"../public/meta.json\");\n\nfs.writeFileSync(outputPath, JSON.stringify(meta, null, 2));\nconsole.log(`\u2705 meta.json written to ${outputPath}`);\n</code></pre> mjsmjs package <pre><code>// scripts/generate-meta.mjs\nimport { writeFileSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { execSync } from \"child_process\";\nimport pkg from \"../package.json\" assert { type: \"json\" };\n\nconst meta = {\nversion: pkg.version,\nbuildTime: new Date().toISOString(),\ncommitHash: execSync(\"git rev-parse --short HEAD\").toString().trim(),\n};\n\nconst outputPath = resolve(\"public/meta.json\");\n\nwriteFileSync(outputPath, JSON.stringify(meta, null, 2));\nconsole.log(`\u2705 meta.json generated at: public/meta.json`);\n</code></pre> <pre><code>//  package.json Setup (with pnpm + Vite)\n{\n    \"type\": \"module\",\n    \"scripts\": {\n        \"prebuild\": \"node scripts/generate-meta.mjs\",\n        \"build\": \"vite build\",\n        \"dev\": \"vite\"\n    }\n}\n</code></pre> <ul> <li>\u2705 <code>\"type\": \"module\"</code> required for <code>.mjs</code> and ESM <code>import</code></li> <li>\u2705 <code>prebuild</code> runs before every <code>pnpm build</code></li> </ul>"},{"location":"migration/react/react-update-notifier/#2-add-to-pnpm-scripts","title":"2. Add to <code>pnpm</code> Scripts","text":"<p>In your <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"prebuild\": \"node scripts/generate-meta.js\",\n    \"build\": \"vite build\" // or whatever build command you're using\n  }\n}\n</code></pre> <p>\u2705 prebuild is a standard npm lifecycle hook, so this is idiomatic.</p>"},{"location":"migration/react/react-update-notifier/#3-use-useversionchecker-hook-in-react-app","title":"3. Use <code>useVersionChecker()</code> Hook in React App","text":"<p>(As shown earlier \u2014 checks <code>/meta.json</code> and compares with the one at initial load.)</p> <p>You can place the hook in your <code>App.tsx</code> or root layout.</p> <p>\u2705 This is a client-side way to check if the backend or deployment has changed.</p>"},{"location":"migration/react/react-update-notifier/#4-cicd-tip-optional-but-recommended","title":"4. CI/CD Tip (Optional but Recommended)","text":"<p>In CI (like GitHub Actions, GitLab CI, etc.), ensure <code>git</code> is available and <code>meta.json</code> is committed or deployed.</p> <p>You can also inject version/commit as env vars and use them in Vite/Webpack if preferred.</p>"},{"location":"migration/react/react-update-notifier/#why-this-is-considered-standard","title":"Why This Is Considered \"Standard\"","text":"\u2705 Feature Why It Matters Uses package version Automatically follows your <code>semver</code> Adds build timestamp Helps trace stale deployments Adds commit hash Helps developers debug precisely Runs on <code>prebuild</code> Clean, lifecycle-safe, cross-platform No service worker needed Lightweight and more predictable Works with any bundler Portable across Webpack, Vite, etc."},{"location":"migration/react/react-update-notifier/#alternatives","title":"\ud83e\udde0 Alternatives","text":"Option When to Use Service Worker (<code>onUpdate</code>) If using PWA with offline support Vite plugin with <code>define</code> If you prefer to inject metadata at compile-time instead of via file Runtime <code>/version</code> API If you want the backend to tell the frontend what version is running"},{"location":"migration/react/react-update-notifier/#recommendation-for-you","title":"\ud83e\udde9 Recommendation for You","text":"<p>Given you\u2019re using:</p> <ul> <li>React 18</li> <li>Ant Design</li> <li>pnpm</li> <li>Likely Vite or Webpack</li> </ul> <p>\u27a1\ufe0f This <code>meta.json</code> + version hook approach is the best-practice standard.</p> <p>It\u2019s framework-agnostic, lightweight, easy to test, and CI/CD friendly.</p>"},{"location":"migration/react/react-update-notifier/#final-setup-auto-generate-metajson-in-vite-project","title":"Final Setup: Auto-Generate <code>meta.json</code> in Vite Project","text":""},{"location":"migration/react/react-update-notifier/#file-scriptsgenerate-metamjs","title":"\ud83d\udcc2 File: <code>scripts/generate-meta.mjs</code>","text":"<pre><code>import { writeFileSync } from \"fs\";\nimport { resolve } from \"path\";\nimport { execSync } from \"child_process\";\nimport pkg from \"../package.json\" assert { type: \"json\" };\n\nconst meta = {\n  version: pkg.version,\n  buildTime: new Date().toISOString(),\n  commitHash: execSync(\"git rev-parse --short HEAD\").toString().trim(),\n};\n\nconst outputPath = resolve(\"public/meta.json\");\n\nwriteFileSync(outputPath, JSON.stringify(meta, null, 2));\nconsole.log(`\u2705 meta.json generated at: public/meta.json`);\n</code></pre> <p>\u2705 Uses modern ESM syntax, works with Vite projects</p>"},{"location":"migration/react/react-update-notifier/#packagejson-setup-with-pnpm-vite","title":"\ud83d\udce6 <code>package.json</code> Setup (with pnpm + Vite)","text":"<pre><code>{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"prebuild\": \"node scripts/generate-meta.mjs\",\n    \"build\": \"vite build\",\n    \"dev\": \"vite\"\n  }\n}\n</code></pre> <ul> <li>\u2705 <code>\"type\": \"module\"</code> required for <code>.mjs</code> and ESM <code>import</code></li> <li>\u2705 <code>prebuild</code> runs before every <code>pnpm build</code></li> </ul>"},{"location":"migration/react/react-update-notifier/#folder-structure","title":"\ud83d\udcc1 Folder Structure","text":"<pre><code>/project-root\n  \u251c\u2500 /public\n  \u2502   \u2514\u2500 meta.json         \u2190 auto-generated\n  \u251c\u2500 /scripts\n  \u2502   \u2514\u2500 generate-meta.mjs\n  \u251c\u2500 package.json\n  \u251c\u2500 vite.config.ts|js\n  \u2514\u2500 ...\n</code></pre>"},{"location":"migration/react/react-update-notifier/#now-what-happens","title":"\u2705 Now What Happens?","text":"<p>When you run:</p> <pre><code>pnpm build\n</code></pre> <p>You get:</p> <pre><code>public/meta.json\n</code></pre> <p>Example output:</p> <pre><code>{\n  \"version\": \"1.0.2\",\n  \"buildTime\": \"2025-08-13T13:00:11.221Z\",\n  \"commitHash\": \"9f3c4d2\"\n}\n</code></pre>"},{"location":"migration/react/react-update-notifier/#use-it-in-react-app","title":"\u2705 Use It in React App","text":"<p>In your app (with Ant Design's <code>notification</code>), use the <code>meta.json</code> to detect version changes:</p> <pre><code>// hooks/useVersionChecker.ts\nimport { useEffect, useRef } from \"react\";\nimport { notification } from \"antd\";\n\nexport function useVersionChecker(interval = 60000) {\n  const currentVersion = useRef&lt;string | null&gt;(null);\n\n  useEffect(() =&gt; {\n    const check = async () =&gt; {\n      try {\n        const res = await fetch(\"/meta.json\", { cache: \"no-store\" });\n        const data = await res.json();\n        if (!currentVersion.current) {\n          currentVersion.current = data.version;\n        } else if (data.version !== currentVersion.current) {\n          notification.warning({\n            message: \"Update Available\",\n            description:\n              \"A new version of the app is available. Click to refresh.\",\n            duration: 0,\n            onClick: () =&gt; window.location.reload(),\n          });\n        }\n      } catch (e) {\n        console.error(\"Meta version check failed:\", e);\n      }\n    };\n\n    check();\n    const id = setInterval(check, interval);\n    return () =&gt; clearInterval(id);\n  }, [interval]);\n}\n</code></pre> <p>\ud83d\udcc4 <code>hooks/useVersionChecker.js</code></p> <pre><code>import { useEffect, useRef } from \"react\";\nimport { notification } from \"antd\";\n\nexport function useVersionChecker(interval = 60000) {\n  const currentVersion = useRef(null);\n\n  useEffect(() =&gt; {\n    const check = async () =&gt; {\n      try {\n        const res = await fetch(\"/meta.json\", { cache: \"no-store\" });\n        const data = await res.json();\n\n        if (!currentVersion.current) {\n          currentVersion.current = data.version;\n        } else if (data.version !== currentVersion.current) {\n          notification.warning({\n            message: \"Update Available\",\n            description:\n              \"A new version of the app is available. Click to refresh.\",\n            duration: 0,\n            onClick: () =&gt; window.location.reload(),\n          });\n        }\n      } catch (e) {\n        console.error(\"Meta version check failed:\", e);\n      }\n    };\n\n    check();\n    const id = setInterval(check, interval);\n    return () =&gt; clearInterval(id);\n  }, [interval]);\n}\n</code></pre> <p>Usage</p> <p>In your main app (e.g. <code>App.js</code>):</p> <pre><code>import React from \"react\";\nimport { useVersionChecker } from \"./hooks/useVersionChecker\";\n\nfunction App() {\n  useVersionChecker(); // default: checks every 60 seconds\n\n  return &lt;div&gt;Your App&lt;/div&gt;;\n}\n\nexport default App;\n</code></pre> <p>Let me know if you want to:</p> <ul> <li>Include this in your MkDocs</li> <li>Auto-generate version info in a React component (<code>&lt;AppVersion /&gt;</code>)</li> <li>Use <code>import.meta.env</code> instead of <code>meta.json</code></li> </ul>"},{"location":"migration/react/react-update-notifier/#package","title":"PACKAGE","text":"<p>Yes, you can use a package to help detect and notify users about updates in a React web application \u2014 especially when you're deploying SPAs where caching or service workers might cause users to stay on an outdated version.</p> <p>However, you don\u2019t strictly need a package \u2014 a simple polling of <code>meta.json</code> (as you've already implemented) is more efficient, customizable, and lightweight.</p> <p>That said, here are popular packages you can use if you prefer a ready-made solution:</p>"},{"location":"migration/react/react-update-notifier/#recommended-packages-for-update-notifier","title":"\ud83e\udde9 Recommended Packages for Update Notifier","text":"TL;DR <ul> <li>If you want a solid, maintained, recommended package for update notifications in React apps, go with <code>react-update-notification</code>.</li> <li><code>react-app-update-notifier</code> is either deprecated, unmaintained, or just a different smaller package that isn\u2019t recommended.</li> </ul> <ol> <li> <p>\ud83d\udce6 react-version-check</p> <p>What it does:</p> <ul> <li>Polls a remote version file (like <code>/meta.json</code>)</li> <li>Compares it to the current version</li> <li>Lets you show a custom message/UI</li> </ul> <p>\ud83d\udd27 Install:</p> <pre><code>pnpm add react-version-check\n</code></pre> <p>\ud83e\udde0 Usage:</p> <pre><code>import VersionCheck from \"react-version-check\";\n\nif (!VersionCheck.isLatest()) {\n  alert(\"A new version is available. Please refresh the page.\");\n}\n</code></pre> <p>You can also add logic inside a <code>useEffect</code> or custom component.</p> <p>\u26a0\ufe0f Downsides:</p> <ul> <li>Not actively maintained</li> <li>Assumes your version file is public and readable</li> <li>Not as flexible as your current hook</li> </ul> </li> <li> <p>\ud83d\udce6 react-app-update-notifier</p> <p>\u2705 What it does:</p> <ul> <li>Polls a version endpoint</li> <li>Provides a hook (<code>useCheckUpdate</code>) and state for UI control</li> </ul> <p>\ud83d\udd27 Install:</p> <pre><code>pnpm add react-app-update-notifier\n</code></pre> <p>\ud83e\udde0 Usage:</p> <pre><code>import { useCheckUpdate } from \"react-app-update-notifier\";\n\nconst { hasUpdate, reloadPage } = useCheckUpdate({\n  url: \"/meta.json\",\n  interval: 60000,\n  compare: (newMeta, oldMeta) =&gt; newMeta.version !== oldMeta.version,\n});\n\nif (hasUpdate) {\n  return (\n    &lt;button onClick={reloadPage}&gt;\n      New version available! Click to update\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>\u2705 Pros:</p> <ul> <li>Nice encapsulated hook</li> <li>Flexible config</li> <li>Works like your own custom hook but is prebuilt</li> </ul> <p>\u26a0\ufe0f Cons:</p> <ul> <li>Adds an extra dependency for something you\u2019ve already solved</li> <li>Might be overkill if you only need very basic logic</li> </ul> </li> <li> <p>\ud83d\udce6 react-update-notification</p> <pre><code>pnpm add react-update-notification\npnpm add -D react-update-notification\n</code></pre> </li> </ol>"},{"location":"migration/react/react-update-notifier/#should-you-use-a-package","title":"Should You Use a Package?","text":"<ul> <li>| \u2705 Want simplicity and control | \u27a1\ufe0f Stick with your custom <code>useVersionChecker.js</code> |</li> <li>| \ud83e\udde9 Want ready-made abstraction | \u27a1\ufe0f Use react-app-update-notifier (best maintained option) |</li> </ul>"},{"location":"migration/react/react-update-notifier/#tldr","title":"\ud83d\udd1a TL;DR","text":"<p>You can use packages like:</p> Package Purpose Maintained? Notes <code>react-version-check</code> Checks version from a URL \u274c No Very minimal <code>react-app-update-notifier</code> React hook for update checking + UI \u2705 Yes Best option for hook-based UX <p>But since you've already written a lightweight, clean, and fully customizable solution, you likely don\u2019t need an extra package unless:</p> <ul> <li>You want to support complex UI states out of the box</li> <li>You want built-in comparison logic and polling with minimal code</li> </ul>"},{"location":"migration/react/react-update-notifier/#reference","title":"Reference","text":"<ul> <li>react-update-notification</li> </ul>"},{"location":"migration/react/reconciliation-engine/","title":"Reconciliation","text":""},{"location":"migration/react/reconciliation-engine/#reconciliation-engine","title":"Reconciliation Engine","text":""},{"location":"migration/react/reconciliation-engine/#overview","title":"Overview","text":""},{"location":"migration/react/reconciliation-engine/#what-is-the-reconciliation-engine-in-react","title":"\ud83d\udd04 What is the Reconciliation Engine in React?","text":"<p>The Reconciliation Engine is a core part of how React updates the DOM efficiently. It's the algorithm React uses to:</p> <ul> <li>Compare the current Virtual DOM with the new Virtual DOM after a state or prop change.</li> <li>Decide what changed.</li> <li>Update the actual DOM minimally to reflect those changes.</li> </ul> <p>This process is what gives React its performance benefits \u2014 it avoids unnecessary re-renders and only makes the minimal set of changes required to keep the UI in sync with your component state.</p>"},{"location":"migration/react/reconciliation-engine/#evolution-of-reconciliation-in-react-versions","title":"\u2699\ufe0f Evolution of Reconciliation in React Versions","text":"Version Reconciliation Engine Notes React 15 and below Stack Reconciler Synchronous and recursive \u2014 couldn't pause or resume work. React 16 Fiber Reconciler \u2705 Introduced a completely new architecture. Enables incremental rendering, better error handling, async rendering prep. React 18 Concurrent Rendering (built on Fiber) \u2705 Introduced true concurrent features like <code>startTransition</code>, <code>useDeferredValue</code>, and automatic batching. Fiber is extended to allow React to pause and resume work. React 19 \u2705 Uses same Fiber-based engine with enhancements Builds on React 18 with new features like <code>useOptimistic</code>, <code>actions</code>, but no change in the core reconciliation engine."},{"location":"migration/react/reconciliation-engine/#summary","title":"Summary","text":"<ul> <li>React 16 introduced the Fiber Reconciler, replacing the older stack-based system.</li> <li>React 18 added Concurrent Rendering, which is built on top of Fiber.</li> <li>React 19 continues using the same reconciliation engine (Fiber), with optimizations and new features, but no brand-new reconciliation algorithm.</li> </ul> <p>So, the Reconciliation Engine (Fiber) came in React 16, and was significantly enhanced in React 18 with concurrent rendering.</p> <p>Let me know if you want a visual of how Fiber works or how it compares to the old system.</p>"},{"location":"migration/react/reconciliation-engine/#tldr-across-versions","title":"\ud83e\uddf5 TL;DR Across Versions","text":"Version Reconciliation Engine Notable Features 15 &amp; below Stack Reconciler Synchronous, non-interruptible 16 Fiber \u2705 New asynchronous-ready engine 17 Fiber (same) Infrastructure improvements, no changes to Fiber 18 Fiber + Concurrent Features \u2705 <code>startTransition</code>, <code>useDeferredValue</code>, automatic batching 19 Fiber + Enhancements \u2705 <code>use</code>, <code>useOptimistic</code>, form actions, etc."},{"location":"migration/react/reconciliation-engine/#fiber-reconciliation-engine-visual-breakdown","title":"Fiber Reconciliation Engine (Visual Breakdown)","text":""},{"location":"migration/react/reconciliation-engine/#traditional-stack-reconciler-react-15-and-before","title":"\ud83e\uddf1 Traditional Stack Reconciler (React 15 and before)","text":"<pre><code>[Root]\n  |\n  \u251c\u2500\u2500&gt; [Child 1]\n  |       \u251c\u2500\u2500&gt; [Grandchild 1]\n  |       \u2514\u2500\u2500&gt; [Grandchild 2]\n  \u2514\u2500\u2500&gt; [Child 2]\n</code></pre> <p>\u27a1 Stack-based, depth-first, synchronous traversal.</p> <ul> <li>No pausing once updates start.</li> <li>Large trees = potential jank / slow rendering.</li> </ul>"},{"location":"migration/react/reconciliation-engine/#react-16-fiber-architecture","title":"\ud83e\uddf6 React 16+: Fiber Architecture","text":"<pre><code>[Root Fiber]\n   |\n   \u251c\u2500\u2500&gt; [Child Fiber]\n   |       \u251c\u2500\u2500&gt; [Grandchild Fiber A]\n   |       \u2514\u2500\u2500&gt; [Grandchild Fiber B]\n   \u2514\u2500\u2500&gt; [Sibling Fiber]\n</code></pre> <p>\u27a1 Fiber = a unit of work.</p> <ul> <li>Updates are broken into small units (fibers).</li> <li>React can pause, abort, or resume work between frames.</li> <li>Makes features like timeouts, priorities, suspense possible.</li> </ul>"},{"location":"migration/react/reconciliation-engine/#react-18-concurrent-rendering","title":"\u26a1 React 18: Concurrent Rendering","text":"<p>\ud83d\udd52 Time-Slicing (visual idea)</p> <pre><code>\u23f1\ufe0f Frame Budget (e.g., 16ms/frame for 60fps)\n-------------------------------------------\n|   Fiber 1   | Fiber 2   | ... pause ... |\n-------------------------------------------\n      \ud83d\udd01 resume in next frame if time runs out\n</code></pre> <p>\u27a1 React renders chunks of work incrementally.</p> <ul> <li>If something is high-priority (e.g., user input), it pauses low-priority work.</li> <li>Can start transitions (<code>startTransition</code>), showing loading states for less critical updates.</li> <li>DOM updates happen only when the work is complete.</li> </ul>"},{"location":"migration/react/reconciliation-engine/#react-19-same-time-slicing-smarter-scheduling","title":"React 19: Same Time-Slicing, Smarter Scheduling","text":"<p>Just like React 18:</p> <pre><code>\u23f1\ufe0f Frame Budget (e.g., 16ms/frame for 60fps)\n-------------------------------------------\n|   Fiber 1   | Fiber 2   | ... pause ... |\n-------------------------------------------\n      \ud83d\udd01 resume in next frame if time runs out\n</code></pre> <p>But in React 19, features like <code>use</code> and <code>useOptimistic</code> allow more precise control over suspended UI, optimistic rendering, and seamless transitions \u2014 without blocking the main thread.</p> \ud83e\uddf5 Visual: How It All Fits <p>\ud83e\udde0 Under the Hood</p> <ul> <li>React 19 still uses time-slicing, allowing fibers to be processed in chunks.</li> <li>DOM updates are still batched and deferred until the work is complete.</li> <li>Suspense boundaries, <code>startTransition</code>, and <code>use</code> are now first-class citizens for smoother loading and data-fetching.</li> </ul> React Version Reconciliation Engine Time-Slicing Concurrency Features New APIs React 16 Fiber \u2705 \ud83d\udeab No \ud83d\udeab No \u274c React 18 Fiber \u2705 \u2705 Yes \u2705 Yes <code>startTransition</code>, <code>useDeferredValue</code> React 19 Fiber \u2705 \u2705 Yes \u2705 Yes (optimized) <code>use</code>, <code>useOptimistic</code>, form actions, server components"},{"location":"migration/react/reconciliation-engine/#summary-comparison","title":"Summary Comparison","text":"React Version Engine Can Pause Work? Supports Concurrency? DOM Updates React 15 Stack Reconciler \u274c No \u274c No Immediately React 16 Fiber \u2705 Yes (prep) \u274c Not yet Immediate React 17 Fiber \u2705 Yes \u274c Not yet Immediate React 18+ Fiber + Concurrent \u2705 Yes \u2705 Yes Batched after work is complete"},{"location":"migration/react/reconciliation-engine/#key-concepts-introduced-with-fiber","title":"\ud83d\udccc Key Concepts Introduced with Fiber","text":"<ul> <li>Each element = a Fiber Node.</li> <li>Fiber has links: <code>child</code>, <code>sibling</code>, <code>return</code> (like a linked tree).</li> <li>Tracks effect tags: what needs to change (e.g., placement, update, deletion).</li> <li>Enables Suspense, error boundaries, priority updates, concurrent features.</li> </ul>"},{"location":"migration/react/reconciliation-engine/#reacts-internal-fiber-structure-simplified","title":"\ud83d\udee0\ufe0f React\u2019s Internal Fiber Structure (simplified)","text":"<p>Each Fiber Node contains:</p> <pre><code>{\n  type: Component,        // Function or DOM tag\n  key: string | null,\n  stateNode: instance,    // DOM node or class instance\n  return: parent fiber,\n  child: first child fiber,\n  sibling: next sibling fiber,\n  alternate: old fiber (for diffing)\n  flags: effect (e.g., Placement, Update)\n}\n</code></pre> <p>This allows React to:</p> <ul> <li>Compare new and old fiber trees</li> <li>Determine which parts to update</li> <li>Schedule updates asynchronously</li> </ul>"},{"location":"migration/react/reconciliation-engine/#visual-how-react-19-stacks-on-top-of-fiber","title":"\ud83e\uddf6 Visual: How React 19 Stacks on Top of Fiber","text":"<pre><code>        +-------------------------------+\n        | React 19 (High-level Features)|\n        |-------------------------------|\n        |  \u2705 use                      |\n        |  \u2705 useOptimistic            |\n        |  \u2705 Form Actions             |\n        |  \u2705 Server Components (RSC)  |\n        +-------------------------------+\n                     \u2b07\n        +-------------------------------+\n        | React 18: Concurrent Features |\n        |-------------------------------|\n        |  \u2705 Time Slicing              |\n        |  \u2705 startTransition           |\n        |  \u2705 Suspense + DeferredValue  |\n        +-------------------------------+\n                     \u2b07\n        +-------------------------------+\n        | React 16+: Fiber Engine       |\n        |-------------------------------|\n        |  \u2705 Incremental Rendering     |\n        |  \u2705 Pausable Work Units       |\n        |  \u2705 Effect Tags + Tree Diffing|\n        +-------------------------------+\n</code></pre> <p>\ud83c\udf9e\ufe0f Visual Diagram: <code>use</code> + <code>useOptimistic</code> Flow in React 19</p> <pre><code>\ud83e\uddd1 User types a comment and hits \"Submit\"\n\u2502\n\u251c\u2500\u2500\u25b6 \ud83e\udde0 `addOptimisticComment()` called\n\u2502     \u2514\u2500\u2500 UI updates immediately (fiber renders optimistic value)\n\u2502\n\u251c\u2500\u2500\u25b6 \u23f3 `submitComment()` returns a Promise\n\u2502     \u2514\u2500\u2500 React keeps rendering, no blocking yet\n\u2502\n\u251c\u2500\u2500\u25b6 \ud83c\udf00 `setPendingPromise(promise)` triggers re-render\n\u2502\n\u251c\u2500\u2500\u25b6 \u26d4 `&lt;p&gt;{use(pendingPromise)}&lt;/p&gt;` suspends here!\n\u2502     \u2514\u2500\u2500 React \"pauses\" this part of the fiber tree\n\u2502     \u2514\u2500\u2500 Can still render other siblings or show fallback\n\u2502\n\u2514\u2500\u2500\u25b6 \u2705 When promise resolves:\n      \u2514\u2500\u2500 `use()` resumes rendering\n      \u2514\u2500\u2500 Success message appears!\n</code></pre>"},{"location":"migration/react/reconciliation-engine/#useoptimistic-react-19-vs-optimistic-updates-in-rtk-query","title":"\ud83d\udd01 <code>useOptimistic</code> (React 19) vs Optimistic Updates in RTK Query","text":"Feature <code>useOptimistic</code> (React 19) RTK Query Optimistic Updates \ud83d\udd27 Tool Type UI-level hook Data layer tool (Redux-based) \ud83d\udce6 Part of React DOM Redux Toolkit Query \ud83d\udca1 Primary Purpose Optimistically update UI during form interactions or async UI changes Optimistically update the Redux cache to reflect expected server state \ud83d\udd01 Rollback? Manual \u2014 you decide what to do if the promise fails Yes, via RTK\u2019s <code>onQueryStarted</code> + <code>updateQueryData</code> with rollback helpers \ud83c\udf0d Scope Local to component Global, across app state \ud83e\udde0 Complexity Minimal logic, more declarative More control, but more boilerplate \ud83e\uddf5 Uses Fiber? \u2705 Yes, integrated with concurrent rendering \u274c No, runs through Redux middleware logic \ud83d\udeab Handles Errors Not by default \u2014 you must handle failures manually \u2705 Built-in try/catch for server errors with rollback options <p>\ud83c\udfaf Final Decision Tree</p> <pre><code>Are you using Redux + RTK Query?\n \u251c\u2500\u2500 YES \u2500\u2500\u25b6 Use RTK Query's optimistic updates (you get rollback + cache consistency)\n \u2514\u2500\u2500 NO\n      \u251c\u2500\u2500 Using server state across pages/components?\n      \u2502      \u251c\u2500\u2500 YES \u2500\u2500\u25b6 Consider adding RTK Query\n      \u2502      \u2514\u2500\u2500 NO\n      \u2502           \u251c\u2500\u2500 Just need quick UI feedback?\n      \u2502           \u2502      \u251c\u2500\u2500 YES \u2500\u2500\u25b6 useOptimistic\n      \u2502           \u2502      \u2514\u2500\u2500 NO \u2500\u2500\u25b6 Regular useState/useTransition\n      \u2502\n      \u2514\u2500\u2500 Want zero setup &amp; local-only logic? \u2500\u2500\u25b6 useOptimistic\n</code></pre>"},{"location":"migration/react/useRef-indepth/","title":"useRef indepth","text":""},{"location":"migration/react/useRef-indepth/#useref-in-depth-down-to-rabbit-hole","title":"<code>useRef</code> IN DEPTH - Down to Rabbit Hole","text":"<p>understanding why <code>useRef</code> doesn\u2019t cause a re-render goes deep into how React works under the hood, and it\u2019s a powerful concept once you get it.</p>"},{"location":"migration/react/useRef-indepth/#react-re-renders-quick-refresher","title":"\ud83d\udd01 React Re-renders \u2014 Quick Refresher","text":"<p>First, let\u2019s clarify when React re-renders a component:</p> <ul> <li>React re-renders a component whenever its state (useState) or props change.</li> </ul> <p>This means:</p> <ul> <li><code>useState()</code> and <code>useReducer()</code> are reactive \u2014 changes to their values will re-render the component.</li> <li><code>useRef()</code> is not reactive \u2014 changing its value does not trigger a re-render.</li> </ul>"},{"location":"migration/react/useRef-indepth/#what-is-useref-actually","title":"\ud83e\uddea What is <code>useRef</code> Actually?","text":"<pre><code>const ref = useRef(initialValue);\n</code></pre> <p>This returns an object like:</p> <pre><code>{\n  current: initialValue\n}\n</code></pre> <p>So when you do:</p> <pre><code>ref.current = newValue;\n</code></pre> <p>You're just mutating an object, not triggering any React lifecycle logic.</p>"},{"location":"migration/react/useRef-indepth/#why-useref-doesnt-cause-re-render","title":"\ud83d\udd2c Why useRef Doesn't Cause Re-render","text":"<p>Here\u2019s the technical explanation:</p> <ul> <li><code>useRef()</code> returns a mutable object whose <code>.current</code> property is not tracked by React's reconciliation engine.</li> <li>React treats <code>ref.current</code> just like any other non-state variable inside a component \u2014 it assumes you\u2019re managing it manually.</li> <li>It persists between renders, but React doesn't \"watch\" it for changes.</li> </ul> <p>This is by design:</p> <ul> <li>It\u2019s optimized for imperative code: timers, DOM refs, event handlers, async tokens, etc.</li> <li>Because you\u2019re not telling React \"hey, something changed\", React just ignores it.</li> </ul>"},{"location":"migration/react/useRef-indepth/#analogy-useref-vs-usestate","title":"\ud83d\udce6 Analogy: <code>useRef</code> vs <code>useState</code>","text":"<p>Imagine a warehouse:</p> Feature <code>useState</code> <code>useRef</code> Storage type React-managed smart shelf Plain old storage box Notifies React \u2705 Yes \u2014 React tracks changes \u274c No \u2014 React doesn\u2019t watch it Triggers UI? \u2705 Yes \u2014 triggers re-render \u274c No \u2014 manual update only Persistence? \u2705 Yes \u2014 across renders \u2705 Yes \u2014 across renders Use case Displayed UI data Internal logic, DOM access, flags, timers"},{"location":"migration/react/useRef-indepth/#behind-the-scenes-a-bit-deeper","title":"\ud83d\udd27 Behind the Scenes \u2014 A Bit Deeper","text":"<p>When React renders a function component, it runs the function again (re-executes it). The hooks are tracked in order. So when you call <code>useRef()</code>:</p> <ol> <li>React returns the same object from previous render.</li> <li>You can read/write <code>ref.current</code> freely.</li> <li>But React doesn\u2019t care if you do \u2014 it won't re-render unless you tell it to (e.g. via <code>useState</code>).</li> </ol> <p>So even if you do this:</p> <pre><code>ref.current = Math.random();\n</code></pre> <p>React will not update the UI, because:</p> <ul> <li>It doesn\u2019t know anything changed.</li> <li>Nothing told it to re-render.</li> </ul>"},{"location":"migration/react/useRef-indepth/#so-what-is-useref-good-for","title":"\ud83e\udde0 So What Is useRef Good For?","text":"<ul> <li>Accessing DOM elements via <code>ref={...}</code>.</li> <li>Storing mutable values across renders (like a variable that survives component re-renders).</li> <li>Preventing race conditions (e.g. using version tokens).</li> <li>Avoiding unnecessary re-renders from internal flags.</li> </ul>"},{"location":"migration/react/useRef-indepth/#what-if-you-do-want-a-re-render","title":"\ud83d\udd04 What If You Do Want a Re-render?","text":"<p>Then you should use <code>useState()</code> or <code>useReducer()</code> instead. Or if you're using <code>useRef</code> but want to manually trigger a re-render, you can do something like this:</p> <pre><code>const [, forceUpdate] = useState();\n\nconst triggerRender = () =&gt; {\n  forceUpdate({}); // triggers a re-render\n};\n</code></pre> <p>But this is usually a workaround \u2014 if you want reactivity, use <code>useState</code>.</p>"},{"location":"migration/react/useRef-indepth/#visual-diagram","title":"Visual Diagram","text":"<p>\ud83d\udccc Plaintext Diagram: <code>useRef</code> vs <code>useState</code> Behavior in React</p> <p>Here's a plaintext visual diagram that shows how <code>useRef</code> and <code>useState</code> behave during the React component lifecycle \u2014 especially around state updates, re-renders, and React's tracking.</p> <pre><code>            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502     Component Renders      \u2502\n            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  useState()    \u2502          \u2502   useRef()       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                             \u2502\n        \u25bc                             \u25bc\n[Initial value stored]      [Initial value stored]\n        \u2502                             \u2502\n        \u25bc                             \u25bc\n[React tracks value]         [React does NOT track]\n        \u2502                             \u2502\n        \u25bc                             \u25bc\n[Change via setState()]     [Change via ref.current = x]\n        \u2502                             \u2502\n        \u25bc                             \u25bc\n[Triggers re-render]         [No re-render triggered]\n        \u2502                             \u2502\n        \u25bc                             \u25bc\n[UI updates accordingly]     [Value is updated silently]\n</code></pre> \ud83d\udd0d Key Takeaways from the Diagram <ul> <li><code>useState</code>: React watches the value. Updating it triggers a re-render, and UI updates accordingly.</li> <li><code>useRef</code>: React does not track the value. You can change <code>.current</code>, and it persists, but no render happens.</li> </ul> <p>When to Use Which</p> Situation Use This UI should re-render on value change <code>useState</code> Store data without triggering render <code>useRef</code> Hold DOM element references <code>useRef</code> Prevent stale closures in async <code>useRef</code> Update value frequently, silently <code>useRef</code> Hook Triggers Re-render on Value Change? Value Persists Across Component Renders Reactive? Primary Use Case Mutable Without Render useState YES YES YES UI state that affects rendering NO useRef NO YES NO Mutable values, refs, timers, tokens, flags YES <p>\ud83e\udde0 Explanation of Columns:</p> Column Name Description Triggers Re-render Does React re-render the component when this value changes? Value Persists Does the value stay the same across renders? Reactive? Does React treat this value as something to track and respond to? Primary Use Case The most common use for the hook Mutable Without Render Can you change its value without causing React to do anything special? <p>\ud83d\udcdd Summary</p> <ul> <li><code>useState</code> is reactive state \u2014 use it when the UI depends on the value.</li> <li><code>useRef</code> is non-reactive \u2014 use it for manual tracking or data you want to persist without causing renders.</li> </ul>"},{"location":"migration/react/working-with-numbers-in-js/","title":"Numbers in JS","text":""},{"location":"migration/react/working-with-numbers-in-js/#working-with-number-in-js","title":"Working with Number in JS","text":"<p>The JavaScript exception \"precision is out of range\" occurs when a number that's outside of the allowed range was passed into <code>toExponential</code> , <code>toFixed</code> , or <code>toPrecision</code>.</p>"},{"location":"migration/react/working-with-numbers-in-js/#what-is-a-rangeerror","title":"What is a RangeError","text":"<p>A RangeError is used to convey to a user that a value was passed into a function that does not accept an input range that includes that value. For example, if a function converts centimeters to inches, then the input range might be all the non-zero positive numbers. In this instance, the number -100 would not be in the allowed input range and would cause a RangeError to be thrown.</p> <p>Understanding what a RangeError is, why one might be thrown, and when you should generate one yourself will help you write more expressive, correct code. In addition, understanding the motivation behind a RangeError will help you understand how to quickly and easily recover when one is thrown by the JavaScript standard library or external dependencies. </p> Invalid cases <pre><code>77.1234.toExponential(-1);  // RangeError\n77.1234.toExponential(101); // RangeError\n\n2.34.toFixed(-100);         // RangeError\n2.34.toFixed(1001);         // RangeError\n\n1234.5.toPrecision(-1);     // RangeError\n1234.5.toPrecision(101);    // RangeError\n</code></pre> Valid cases <pre><code>77.1234.toExponential(4); // 7.7123e+1\n77.1234.toExponential(2); // 7.71e+1\n\n2.34.toFixed(1); // 2.3\n2.35.toFixed(1); // 2.4 (note that it rounds up in this case)\n\n5.123456.toPrecision(5); // 5.1235\n5.123456.toPrecision(2); // 5.1\n5.123456.toPrecision(1); // 5\n</code></pre> <pre><code>09333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n\n\n\nInfinity\n</code></pre> <p>handling infinit and out of range in input field javascript</p>"},{"location":"migration/react/working-with-numbers-in-js/#reference","title":"Reference","text":"<ul> <li>developer.mozilla.org, RangeError: precision is out of range</li> <li>JavaScript RangeErrors | How to Prevent Them, Tutorial</li> <li>RangeError, ReferenceError: Javascript Errors (Part 2)</li> <li>Which input control is recommended for a large value range?</li> </ul>"},{"location":"migration/react/app-version-update/issue/","title":"Issue","text":""},{"location":"migration/react/app-version-update/issue/#uncaught-in-promise-typeerror-serviceworker-script-encountered-an-error-during-installation","title":"Uncaught (in promise) TypeError: ServiceWorker script ... encountered an error during installation.","text":"<p>Uncaught (in promise) TypeError: ServiceWorker script at http://localhost:4173/sw.js for scope http://localhost:4173/ encountered an error during installation.</p> <p>This can occur due to several reasons:</p>"},{"location":"migration/react/app-version-update/issue/#service-worker-file-not-found-or-inaccessible","title":"Service Worker file not found or inaccessible:","text":"<ul> <li>The <code>sw.js</code> file might not exist at the specified path (<code>http://localhost:4173/sw.js</code>).</li> <li>The server might not be serving the <code>sw.js</code> file correctly, resulting in a 404 (Not Found) or 403 (Forbidden) error when the browser attempts to fetch it.</li> <li>Ensure the file is publicly accessible and located in the correct directory relative to your application's root.</li> </ul>"},{"location":"migration/react/app-version-update/issue/#syntax-or-runtime-errors-within-the-service-worker-script","title":"Syntax or runtime errors within the Service Worker script:","text":"<ul> <li>The <code>sw.js</code> file itself might contain JavaScript errors that prevent it from being parsed or executed correctly during installation.</li> <li>Check the browser's developer console for any additional errors logged during the Service Worker's execution, as these can provide more specific details about the problem.</li> </ul>"},{"location":"migration/react/app-version-update/issue/#httpssecurity-issues-for-production-or-non-localhost-environments","title":"HTTPS/Security issues (for production or non-localhost environments):","text":"<ul> <li>Service Workers require a secure context (HTTPS) for registration, except when running on <code>localhost</code>. While you are on <code>localhost</code>, this is less likely to be the primary cause unless there are specific certificate issues or misconfigurations.</li> </ul>"},{"location":"migration/react/app-version-update/issue/#incorrect-service-worker-registration-scope","title":"Incorrect Service Worker registration scope:","text":"<ul> <li>The scope defined during registration in your application's main JavaScript file might not match the location of the <code>sw.js</code> file, or it might be too restrictive.</li> </ul>"},{"location":"migration/react/app-version-update/issue/#troubleshooting-steps","title":"Troubleshooting Steps:","text":"<ol> <li> <p>Verify <code>sw.js</code> accessibility:</p> <ul> <li>Try navigating directly to <code>http://localhost:4173/sw.js</code> in your browser. If you receive a 404 or 403 error, the file is not being served correctly.</li> <li>Ensure the <code>sw.js</code> file is placed in a location accessible by the web server.</li> </ul> </li> <li> <p>Inspect browser console for errors:</p> <ul> <li>Open your browser's developer tools (usually by pressing <code>F12</code> or right-clicking and selecting \"Inspect\").</li> <li>Navigate to the \"Console\" tab and look for any errors related to the Service Worker registration or the <code>sw.js</code> script itself.</li> </ul> </li> <li> <p>Check Service Worker registration code:</p> <ul> <li>Examine the code where you register the Service Worker (e.g., <code>navigator.serviceWorker.register('/sw.js')</code>). Ensure the path to the <code>sw.js</code> file is correct relative to your application's root.</li> </ul> </li> <li> <p>Review <code>sw.js</code> content:</p> <ul> <li>Carefully review the <code>sw.js</code> file for any syntax errors or logical issues that could cause it to fail during installation. You can temporarily simplify the <code>sw.js</code> file to a basic \"Hello World\" example to rule out complex logic as the source of the error.</li> </ul> </li> </ol>"},{"location":"migration/react/app-version-update/overview/","title":"Overview","text":""},{"location":"migration/react/app-version-update/overview/#overview","title":"Overview","text":"<pre><code>import React from \"react\";\nimport { useUpdateCheck } from \"react-update-notification\";\nconst NotificationContainer = () =&gt; {\n  const { status, reloadPage } = useUpdateCheck({\n    type: \"interval\",\n    interval: 10000,\n  });\n\n  if (status === \"checking\" || status === \"current\") {\n    return null;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;button type=\"button\" onClick={reloadPage}&gt;\n        Refresh to update the app\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\nexport default NotificationContainer;\n</code></pre> <p>after refresh it is working. but when is simple reload the page why is showing previous version and only if i hard referesh it is showing latest changes</p>"},{"location":"migration/react/app-version-update/overview/#problem","title":"\u26a0\ufe0f Problem:","text":"<p>After reload, it still shows the old version. Only a hard refresh (<code>Ctrl+Shift+R</code> or <code>Cmd+Shift+R</code>) shows the latest.</p> <p>This happens because of how Service Workers cache your app and control reloa</p>"},{"location":"migration/react/app-version-update/overview/#why-this-happens","title":"\ud83d\udd0d Why This Happens","text":"<p>When a PWA with a service worker is loaded:</p> <ol> <li>The service worker controls all navigation and asset loading, even after a regular reload (<code>F5</code> or browser refresh).</li> <li>If the new version of the service worker is waiting (which you\u2019ve detected with <code>react-update-notification</code>), it's not yet controlling the page.</li> <li> <p>When you just reload (<code>window.location.reload()</code>), the old service worker still serves the old cached content unless you:</p> <ul> <li>Activate the new SW, and</li> <li>Reload after activation.</li> </ul> </li> </ol> <p>That\u2019s why you only see the new content after a hard refresh, which bypasses the SW cache.</p>"},{"location":"migration/react/app-version-update/overview/#solutions","title":"\u2705 Solutions","text":""},{"location":"migration/react/app-version-update/overview/#1-use-skipwaiting-and-clientsclaim-you-already-do","title":"1. Use <code>skipWaiting</code> and <code>clientsClaim</code> (you already do)","text":"<p>You're already doing this in <code>vite.config.js</code>, which is good:</p> <pre><code>workbox: {\n  clientsClaim: true,\n  skipWaiting: true,\n}\n</code></pre> <p>But that only ensures the new service worker is ready to take over \u2014 it still needs a signal to reload after activation.</p>"},{"location":"migration/react/app-version-update/overview/#2-use-a-real-sw-aware-update-flow","title":"2. Use a real SW-aware update flow","text":"<p>Instead of just <code>reloadPage()</code>, you can ensure:</p> <ul> <li>The new SW is installed</li> <li>It becomes active</li> <li>Then reload the page after activation</li> </ul> <p>But since you\u2019re using <code>react-update-notification</code>, which doesn\u2019t hook into the actual service worker lifecycle (like <code>virtual:pwa-register does</code>), you don\u2019t get the proper update-and-reload flow.</p>"},{"location":"migration/react/app-version-update/overview/#recommended-fix-use-virtualpwa-register","title":"\ud83d\udd01 Recommended Fix: Use <code>virtual:pwa-register</code>","text":"<p>If you want this to work seamlessly (no need for hard refresh), switch to using virtual:pwa-register instead of <code>react-update-notification</code>.</p>"},{"location":"migration/react/app-version-update/overview/#replace-notificationcontainerjsx-with","title":"\ud83d\udd01 Replace <code>NotificationContainer.jsx</code> with:","text":"<pre><code>import { useEffect, useState } from \"react\";\nimport { registerSW } from \"virtual:pwa-register\";\n\nconst NotificationContainer = () =&gt; {\n  const [updateAvailable, setUpdateAvailable] = useState(false);\n\n  useEffect(() =&gt; {\n    const updateSW = registerSW({\n      onNeedRefresh() {\n        setUpdateAvailable(true);\n      },\n      onOfflineReady() {\n        console.log(\"Offline ready\");\n      },\n    });\n  }, []);\n\n  const reload = () =&gt; {\n    // This forces the new SW to activate and take control\n    window.location.reload();\n  };\n\n  return updateAvailable ? (\n    &lt;div&gt;\n      &lt;p&gt;New version available!&lt;/p&gt;\n      &lt;button onClick={reload}&gt;Refresh to update&lt;/button&gt;\n    &lt;/div&gt;\n  ) : null;\n};\n\nexport default NotificationContainer;\n</code></pre> <p>This works seamlessly with <code>vite-plugin-pwa</code>'s SW lifecycle, and you won\u2019t need a hard refresh.</p>"},{"location":"migration/react/app-version-update/overview/#tldr","title":"TL;DR","text":"Approach What Happens <code>react-update-notification</code> Might reload before new SW is active, so you see the old version. <code>virtual:pwa-register</code> Waits for SW to be installed + active, then reloads. Shows new version immediately. \u2705"},{"location":"migration/react/app-version-update/overview/#want-to-keep-using-react-update-notification","title":"Want to Keep Using <code>react-update-notification</code>?","text":"<p>If you really want to stay with it:</p> <ul> <li>Add a <code>window.location.reload(true)</code> (deprecated) or</li> <li>Use <code>window.location.reload()</code> after calling the <code>skipWaiting()</code> manually in the service worker \u2014 but this is not clean or reliable.</li> </ul> <p>Again, for full PWA lifecycle control, I strongly recommend using <code>virtual:pwa-register</code>.</p> <p>Let me know if you'd like me to generate a full working example or if you want help migrating from <code>react-update-notification</code>.</p> <pre><code>  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build &amp;&amp; generate-version -s package -b dist\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n</code></pre> <pre><code>{\n  \"scripts\": {\n    \"build\": \"vite build &amp;&amp; generate-version -s package\"\n  }\n}\n\n// THIS\n\n{\n  \"scripts\": {\n    \"build\": \"vite build &amp;&amp; generate-version -s package -b dist\"\n  }\n}\n</code></pre>"},{"location":"migration/react/app-version-update/overview/#reference","title":"Reference","text":"<ul> <li>Prompt for update: Vite PWA</li> </ul>"},{"location":"migration/react/app-version-update/serviceWorker-issue/","title":"Service Worker Issue","text":""},{"location":"migration/react/app-version-update/serviceWorker-issue/#serviceworker-update-error","title":"ServiceWorker Update Error","text":"<pre><code>brave://serviceworker-internals/?devtools\n</code></pre> <p>The error \"Uncaught (in promise) SecurityError: Failed to update a ServiceWorker for scope\" typically arises due to security restrictions preventing the registration or update of a service worker.</p> <ul> <li>One common cause is that the service worker script is located behind a redirect, which is explicitly disallowed by browsers for security reasons.</li> <li> <p>Another potential cause is related to browser settings, such as using private browsing mode or having cookies set to \"Keep until I close Firefox,\" which can restrict storage access and block service worker registration.</p> </li> <li> <p>Additionally, if the service worker script is served over an insecure connection (HTTP) while the page is loaded over HTTPS, or if there is an SSL certificate error when fetching the script, the registration will fail.</p> </li> <li> <p>Ensuring the service worker script is served directly without redirects, using a valid SSL certificate, and verifying the correct origin and protocol alignment are critical steps to resolve this issue.</p> </li> </ul>"},{"location":"migration/react/app-version-update/serviceWorker-issue/#serviceworkercontainer-register-method","title":"ServiceWorkerContainer: register() method","text":"<pre><code>if (\"serviceWorker\" in navigator) {\n  // Register a service worker hosted at the root of the\n  // site using the default scope.\n}\n</code></pre>"},{"location":"migration/react/app-version-update/serviceWorker-issue/#reference","title":"Reference","text":"<ul> <li>Failed to register Service Worker: Security Error because of redirect</li> <li>Reddit: Can't create ServiceWorker \"registration failed\"</li> <li>Chrome fails to register Service Worker #1314: Github</li> <li>Github Workbox: Failed to update a ServiceWorker for scope #3094</li> <li>Developer Mozzila: ServiceWorkerContainer: register() method</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/notes/","title":"Notes","text":""},{"location":"migration/react/app-version-update/service-worker/notes/#developer-notes","title":"Developer Notes","text":"<ul> <li>Make sure to serve your app over HTTPS or localhost for service workers to work.</li> <li>Update the <code>CACHE_NAME</code> to force cache invalidation when deploying new versions.</li> <li>Register the service worker as early as possible (but after <code>load</code> event is safest).</li> <li>Debug with Chrome DevTools &gt; Application &gt; Service Workers.</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/overview/","title":"Overview","text":""},{"location":"migration/react/app-version-update/service-worker/overview/#service-worker-overview","title":"Service Worker Overview","text":"<p>This module covers how to implement and use a Service Worker in a frontend web application.</p>"},{"location":"migration/react/app-version-update/service-worker/overview/#folders","title":"Folders:","text":"<ul> <li><code>code/</code>: Contains the service worker and registration scripts.</li> <li><code>concept/</code>: High-level understanding and definitions.</li> <li><code>theory/</code>: Deeper technical explanation.</li> <li><code>notes.md</code>: Practical tips and gotchas.</li> <li><code>overview.md</code>: This file.</li> </ul> <p>The service worker enables caching, offline capability, and more resilient frontend experiences.</p> <p></p> <p>Additionally, if the service worker script is served over an insecure connection (HTTP) while the page is loaded over HTTPS, or if there is an SSL certificate error when fetching the script, the registration will fail.</p> <ul> <li>Related Issue Blog</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/code/service-worker/","title":"servicer-worker.js","text":""},{"location":"migration/react/app-version-update/service-worker/code/service-worker/#code","title":"Code","text":"<pre><code>// service-worker.js\nconst CACHE_NAME = \"v1\";\nconst urlsToCache = [\"/\", \"/index.html\", \"/styles.css\", \"/app.js\"];\n\n// Install event\nself.addEventListener(\"install\", (event) =&gt; {\n  console.log(\"[Service Worker] Installing\");\n  event.waitUntil(\n    caches.open(CACHE_NAME).then((cache) =&gt; {\n      return cache.addAll(urlsToCache);\n    })\n  );\n});\n\n// Activate event\nself.addEventListener(\"activate\", (event) =&gt; {\n  console.log(\"[Service Worker] Activated\");\n  event.waitUntil(\n    caches.keys().then((cacheNames) =&gt;\n      Promise.all(\n        cacheNames.map((cache) =&gt; {\n          if (cache !== CACHE_NAME) {\n            console.log(\"[Service Worker] Clearing old cache\");\n            return caches.delete(cache);\n          }\n        })\n      )\n    )\n  );\n});\n\n// Fetch event\nself.addEventListener(\"fetch\", (event) =&gt; {\n  event.respondWith(\n    caches.match(event.request).then((response) =&gt; {\n      return response || fetch(event.request);\n    })\n  );\n});\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/code/sw-register/","title":"sw-register.js","text":""},{"location":"migration/react/app-version-update/service-worker/code/sw-register/#code","title":"Code","text":"<pre><code>// sw-register.js\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", () =&gt; {\n    navigator.serviceWorker\n      .register(\"/code/service-worker.js\")\n      .then((reg) =&gt; {\n        console.log(\"Service Worker registered: \", reg);\n      })\n      .catch((err) =&gt; {\n        console.error(\"Service Worker registration failed: \", err);\n      });\n  });\n}\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/concept/service-worker-concept/","title":"Overview","text":""},{"location":"migration/react/app-version-update/service-worker/concept/service-worker-concept/#service-worker-concept","title":"Service Worker Concept","text":"<p>A Service Worker is a script that the browser runs in the background, separate from the web page, enabling features like:</p> <ul> <li>Background sync</li> <li>Push notifications</li> <li>Interception and handling of network requests (including offline support)</li> </ul> <p>It acts like a network proxy between your web app and the internet.</p> <p>Key lifecycle events: <code>install</code>, <code>activate</code>, <code>fetch</code></p>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/","title":"Vite React","text":""},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#using-vite-react-with-vite-plugin-pwa","title":"Using Vite + React with vite-plugin-pwa","text":"<p>This guide walks you through integrating PWA support into a Vite + React project using the official <code>vite-plugin-pwa</code>.</p>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>npm install -D vite-plugin-pwa\n</code></pre> <p>Optionally, to auto-generate PWA assets like icons and manifest:</p> <pre><code>npm install -D @vite-pwa/assets-generator\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#2-configure-viteconfigjs","title":"2. Configure <code>vite.config.js</code>","text":"<pre><code>import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { VitePWA } from \"vite-plugin-pwa\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    VitePWA({\n      registerType: \"autoUpdate\", // automatic updates via service worker\n      includeAssets: [\"favicon.ico\", \"apple-touch-icon.png\", \"mask-icon.svg\"],\n      manifest: {\n        name: \"Your App Name\",\n        short_name: \"AppShort\",\n        description: \"A progressive React app\",\n        theme_color: \"#ffffff\",\n        icons: [\n          { src: \"pwa-192x192.png\", sizes: \"192x192\", type: \"image/png\" },\n          { src: \"pwa-512x512.png\", sizes: \"512x512\", type: \"image/png\" },\n        ],\n      },\n      devOptions: {\n        enabled: true, // Enables SW in development\n      },\n    }),\n  ],\n});\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#3-optional-generate-pwa-assets","title":"3. (Optional) Generate PWA Assets","text":"<p>If using the assets generator:</p> <ul> <li>Add a script in <code>package.json</code>:</li> </ul> <pre><code>{\n  \"scripts\": {\n    \"generate-pwa-assets\": \"pwa-assets-generator --preset minimal public/logo.svg\"\n  }\n}\n</code></pre> <ul> <li>Run it:</li> </ul> <pre><code>npm run generate-pwa-assets\n</code></pre> <p>This outputs icons like <code>pwa-192x192.png</code>, <code>pwa-512x512.png</code>, etc., into your <code>/public</code> folder.</p>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#4-update-indexhtml","title":"4. Update <code>index.html</code>","text":"<p>Add the following to the <code>&lt;head&gt;</code> section:</p> <pre><code>&lt;link rel=\"icon\" href=\"/favicon.ico\" /&gt;\n&lt;link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" sizes=\"180x180\" /&gt;\n&lt;link rel=\"mask-icon\" href=\"/mask-icon.svg\" color=\"#FFFFFF\" /&gt;\n&lt;meta name=\"theme-color\" content=\"#ffffff\" /&gt;\n</code></pre> <p>These ensure the PWA manifests correctly and displays icons when installed.</p>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#5-service-worker-registration-auto-reload","title":"5. Service Worker Registration &amp; Auto-Reload","text":"<p>In your React entry (e.g., <code>main.jsx</code>):</p> <pre><code>import { registerSW } from \"virtual:pwa-register\";\n\nregisterSW({ immediate: true });\n</code></pre> <p>This sets up automatic page reloads when new content is available, but be cautious\u2014unsaved data (e.g., form input) may be lost.</p>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#6-minimal-pwa-requirements","title":"6. Minimal PWA Requirements","text":"<p>To pass Lighthouse audits and ensure installability, your setup must include:</p> <ul> <li> <p>A proper web manifest:</p> </li> <li> <p><code>name</code>, <code>short_name</code>, <code>description</code>, <code>theme_color</code></p> </li> <li> <p>icons with <code>192x192</code> and <code>512x512</code> sizes</p> </li> <li> <p>Ensure <code>manifest.webmanifest</code> is served with <code>application/manifest+json</code></p> </li> <li>Serve the app over HTTPS (or localhost for development)</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#summary","title":"Summary","text":"Step Description 1 Install <code>vite-plugin-pwa</code> (and optionally <code>@vite-pwa/assets-generator</code>) 2 Configure <code>vite.config.js</code> with PWA options 3 (Optional) Generate PWA assets from your logo 4 Add necessary tags in <code>index.html</code> 5 Register SW in your React app and enable auto-update 6 Make sure you meet PWA requirements for full installability"},{"location":"migration/react/app-version-update/service-worker/docs/vite-react-pwa/#further-reading","title":"Further Reading","text":"<ul> <li>Installation &amp; Plugin Guide \u2013 <code>vite-plugin-pwa</code> usage basics</li> <li>PWA Minimal Requirements \u2013 Manifest &amp; assets checklist</li> <li>Auto-Reload Behavior \u2013 How to configure SW updates and reloads</li> <li>Examples section \u2013 React samples available in plugin's GitHub examples</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/","title":"Overview","text":""},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/#service-worker-underlying-theory","title":"Service Worker: Underlying Theory","text":""},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/#lifecycle","title":"Lifecycle","text":"<ol> <li>Install: Cache assets.</li> <li>Activate: Clean up old caches.</li> <li>Fetch: Serve cached content or fallback to network.</li> </ol>"},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/#benefits","title":"Benefits","text":"<ul> <li>Offline experience</li> <li>Faster load times after first visit</li> <li>Control over requests and caching strategy</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/#limitations","title":"Limitations","text":"<ul> <li>HTTPS required (except for localhost)</li> <li>Doesn't have access to DOM</li> <li>Requires careful versioning for updates</li> </ul> Vite PWA Official DOCS <p>generateSW</p> <p><code>generateSW</code> has the following behaviors:</p> <ol> <li> <p>Prompt for update:</p> <ul> <li>Show <code>Ready to work offline</code> on first visit and once the <code>service worker</code> ready.</li> <li>Show <code>Prompt for update</code> when new <code>service worker</code> available.</li> </ul> </li> <li> <p>Auto update:</p> <ul> <li>Show <code>Ready to work offline</code> on first visit and once the <code>service worker</code> ready.</li> <li>When new content available, the service worker will be updated automatically.</li> </ul> </li> <li> <p>Prompt for update with Periodic service worker updates:</p> <ul> <li>Show <code>Ready to work offline</code> on first visit and once the <code>service worker</code> ready.</li> <li>Show <code>Prompt for update</code> when new <code>service worker</code> available.</li> <li>The example project will register a <code>Periodic service worker</code> updates</li> </ul> </li> <li> <p>Auto update with Periodic service worker updates:</p> <ul> <li>Show <code>Ready to work offline</code> on first visit and once the <code>service worker</code> ready.</li> <li>The example project will register a <code>Periodic service worker updates</code></li> <li>When new content available, the service worker will be updated automatically.</li> </ul> </li> </ol>"},{"location":"migration/react/app-version-update/service-worker/theory/service-worker-theory/#reference","title":"Reference","text":"<ul> <li>npmjs Plugin: vite-plugin-pwa</li> <li>Vite PWA Official: react</li> <li>Vite PWA Official: generateSW</li> <li>Vite PWA Official: Workbox</li> <li>Vite PWA Official: Workbox/generateSW</li> <li>Developer Chrome Workbox</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/code/","title":"Code","text":""},{"location":"migration/react/app-version-update/service-worker/working/code/#code","title":"Code","text":"<p> how to make more modular and resuable this code</p> ReloadPrompt.jsx<pre><code>import React from \"react\";\nimport { useRegisterSW } from \"virtual:pwa-register/react\";\nconst intervalMS = 5000; // 5 seconds\n\nfunction ReloadPrompt() {\n  const {\n    updateServiceWorker,\n    offlineReady: [offlineReady, setOfflineReady],\n    needRefresh: [needRefresh, setNeedRefresh],\n  } = useRegisterSW({\n    onRegistered(r) {\n      console.log(\"SW Registered: \" + r);\n      if (r) {\n        setInterval(() =&gt; {\n          console.log(\"Checking for SW update...\");\n          r.update();\n        }, intervalMS);\n      }\n    },\n    onRegisterError(error) {\n      console.log(\"SW registration error\", error);\n    },\n  });\n\n  const close = () =&gt; {\n    setOfflineReady(false);\n    setNeedRefresh(false);\n  };\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      {(offlineReady || needRefresh) &amp;&amp; (\n        &lt;div className=\"ReloadPrompt-toast\"&gt;\n          &lt;div className=\"ReloadPrompt-message\"&gt;\n            {offlineReady ? (\n              &lt;span&gt;App ready to work offline&lt;/span&gt;\n            ) : (\n              &lt;span&gt;\n                New content available, click on reload button to update.{\" \"}\n              &lt;/span&gt;\n            )}\n          &lt;/div&gt;\n\n          {needRefresh &amp;&amp; (\n            &lt;button\n              className=\"ReloadPrompt-toast-button\"\n              onClick={() =&gt; {\n                console.log(\"CLICKED RELOAD\");\n                updateServiceWorker(true);\n              }}\n            &gt;\n              Reload\n            &lt;/button&gt;\n          )}\n\n          &lt;button className=\"ReloadPrompt-toast-button\" onClick={close}&gt;\n            Close\n          &lt;/button&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#modular","title":"MODULAR","text":"<p>To make your <code>ReloadPrompt</code> component more modular and reusable, you can apply the following best practices:</p> <ul> <li>\u2705 1. Separate Logic from UI</li> </ul> <p>Extract the service worker registration logic into a custom hook.</p> <ul> <li>\u2705 2. Make UI Customizable</li> </ul> <p>Allow customization through props so other parts of the app can reuse this component with different messages, styles, or button labels.</p> <ul> <li>\u2705 3. Use Better Structure and Naming</li> </ul> <p>Break up responsibilities for clarity and maintainability.</p>"},{"location":"migration/react/app-version-update/service-worker/working/code/#refactored-code-example","title":"\u2705 Refactored Code Example","text":""},{"location":"migration/react/app-version-update/service-worker/working/code/#useserviceworkerupdaterjs-custom-hook","title":"\ud83d\udd27 <code>useServiceWorkerUpdater.js</code> \u2013 Custom Hook","text":"<pre><code>// hooks/useServiceWorkerUpdater.js\nimport { useRegisterSW } from \"virtual:pwa-register/react\";\nimport { useEffect } from \"react\";\n\nexport const useServiceWorkerUpdater = (intervalMS = 5000) =&gt; {\n  const {\n    updateServiceWorker,\n    offlineReady: [offlineReady, setOfflineReady],\n    needRefresh: [needRefresh, setNeedRefresh],\n  } = useRegisterSW({\n    onRegistered(registration) {\n      if (registration) {\n        setInterval(() =&gt; {\n          console.log(\"Checking for SW update...\");\n          registration.update();\n        }, intervalMS);\n      }\n    },\n    onRegisterError(error) {\n      console.error(\"Service worker registration error:\", error);\n    },\n  });\n\n  const closePrompt = () =&gt; {\n    setOfflineReady(false);\n    setNeedRefresh(false);\n  };\n\n  return {\n    offlineReady,\n    needRefresh,\n    updateServiceWorker,\n    closePrompt,\n  };\n};\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#reloadpromptjs-reusable-component","title":"\ud83c\udf9b\ufe0f <code>ReloadPrompt.js</code> \u2013 Reusable Component","text":"<pre><code>// components/ReloadPrompt.js\nimport React from \"react\";\nimport { useServiceWorkerUpdater } from \"../hooks/useServiceWorkerUpdater\";\n\nfunction ReloadPrompt({\n  offlineMessage = \"App is ready to work offline.\",\n  refreshMessage = \"New content available. Click reload to update.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { offlineReady, needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  if (!offlineReady &amp;&amp; !needRefresh) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          {offlineReady ? (\n            &lt;span&gt;{offlineMessage}&lt;/span&gt;\n          ) : (\n            &lt;span&gt;{refreshMessage}&lt;/span&gt;\n          )}\n        &lt;/div&gt;\n\n        {needRefresh &amp;&amp; (\n          &lt;button\n            className=\"ReloadPrompt-toast-button\"\n            onClick={() =&gt; updateServiceWorker(true)}\n          &gt;\n            {reloadLabel}\n          &lt;/button&gt;\n        )}\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#usage-in-app","title":"\ud83e\uddea Usage in App","text":"<pre><code>&lt;ReloadPrompt\n  offlineMessage=\"You can now use the app offline!\"\n  refreshMessage=\"Update available \u2014 refresh to get the latest!\"\n  reloadLabel=\"Update Now\"\n  closeLabel=\"Dismiss\"\n/&gt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#benefits-of-this-approach","title":"\ud83d\udd0d Benefits of This Approach","text":"<ul> <li>Modular: Logic and UI are decoupled.</li> <li>Reusable: You can reuse useServiceWorkerUpdater or customize ReloadPrompt for different apps.</li> <li>Testable: Easier to unit test the hook separately from the UI.</li> <li>Flexible: All labels and messages are customizable.</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/code/#question","title":"Question","text":"<p>Would you like this split into multiple files in a codebase structure?</p> <p>Naming this feature in your React codebase should follow a convention that reflects its purpose, promotes clarity, and aligns with your existing structure (if any).</p>"},{"location":"migration/react/app-version-update/service-worker/working/code/#recommended-feature-folder-name","title":"\u2705 Recommended Feature Folder Name","text":"<p>You can place this logic and UI under a folder like:</p> <pre><code>src/\n  features/\n    serviceWorkerUpdater/  &lt;-- \ud83d\udd25 recommended\n      ReloadPrompt.jsx\n      useServiceWorkerUpdater.js\n      index.js\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#folder-naming-options-when-to-use","title":"\ud83d\udcc1 Folder Naming Options &amp; When to Use","text":"Folder Name When to Use <code>serviceWorkerUpdater</code> \u2705 Clear, descriptive, best for self-contained logic and UI around SW updates <code>pwa</code> If the feature expands to include other PWA-related features (e.g. install prompt, manifest handling) <code>sw</code> Short and minimal, but might be unclear to new developers <code>updates</code> or <code>appUpdates</code> If it\u2019s more focused on update lifecycle and might evolve beyond just service worker <code>notifications</code> \u274c Not ideal unless your app uses this for other user-facing toasts/messages <code>toastUpdates</code> \u274c Too specific and UI-focused \u2014 doesn't reflect the underlying logic"},{"location":"migration/react/app-version-update/service-worker/working/code/#suggested-final-structure","title":"\ud83d\udcc2 Suggested Final Structure","text":"<pre><code>src/\n  features/\n    serviceWorkerUpdater/\n      ReloadPrompt.jsx            # UI Component\n      useServiceWorkerUpdater.js  # Custom Hook\n      index.js                    # Barrel export\n</code></pre> <p><code>index.js</code> (optional but useful for clean imports):</p> <pre><code>export { default as ReloadPrompt } from \"./ReloadPrompt\";\nexport { useServiceWorkerUpdater } from \"./useServiceWorkerUpdater\";\n</code></pre> <p>Then in your app:</p> <pre><code>import { ReloadPrompt } from \"@/features/serviceWorkerUpdater\";\n</code></pre> <p>Let me know if you\u2019re using a specific architecture style (like Atomic Design, Redux feature slices, or domain-driven folders), and I can tailor this further.</p>"},{"location":"migration/react/app-version-update/service-worker/working/code/#further","title":"FURTHER","text":"<pre><code>- features\n-- serviceWorkerUpdater\n---- hooks\n------ useServiceWorkerUpdater.js\n-- index.js\n-- ReloadPromt.js\n\nis this good folder structure, i have added the useServiceWorkerUpdater.js inside its hooks folder\n</code></pre> <p>Yes \u2014 that's a good and clean folder structure! You're organizing your feature in a modular, scalable way by:</p> <ol> <li>Creating a dedicated feature folder (<code>serviceWorkerUpdater</code>).</li> <li>Separating hooks into their own folder.</li> <li>Keeping UI components (like <code>ReloadPrompt</code>) directly accessible.</li> <li>Using an <code>index.js</code> for barrel exports \u2014 very handy for cleaner imports later.</li> </ol>"},{"location":"migration/react/app-version-update/service-worker/working/code/#your-structure","title":"\u2705 Your Structure:","text":"<pre><code>src/\n  features/\n    serviceWorkerUpdater/\n      hooks/\n        useServiceWorkerUpdater.js   # \u2705 custom hook logic\n      ReloadPrompt.js                # \u2705 UI component\n      index.js                       # \u2705 barrel export (optional but useful)\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/code/#suggested-indexjs-in-serviceworkerupdater","title":"\ud83d\udce6 Suggested <code>index.js</code> in <code>serviceWorkerUpdater/</code>:","text":"<pre><code>export { default as ReloadPrompt } from \"./ReloadPrompt\";\nexport { useServiceWorkerUpdater } from \"./hooks/useServiceWorkerUpdater\";\n</code></pre> <p>Then, you can import like this from anywhere:</p> <pre><code>import { ReloadPrompt } from \"@/features/serviceWorkerUpdater\";\n</code></pre> <p>(assuming <code>@</code> is aliased to <code>src/</code>)</p>"},{"location":"migration/react/app-version-update/service-worker/working/code/#why-this-structure-works-well","title":"\u2705 Why This Structure Works Well","text":"<ul> <li>Scalable: You can add more hooks or components later (<code>hooks</code>, <code>components</code>, etc.)</li> <li>Feature-Oriented: Keeps related logic together (separation of concerns)</li> <li>Readable: Any dev looking at <code>features/serviceWorkerUpdater/</code> will quickly understand what it handles.</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/code/#optional-add-components-if-needed","title":"Optional: Add <code>components/</code> if Needed","text":"<p>If your feature grows in complexity, you might do this later:</p> <pre><code>serviceWorkerUpdater/\n  components/\n    ReloadPrompt.js\n  hooks/\n    useServiceWorkerUpdater.js\n  index.js\n</code></pre> <p>But for now \u2014 your current structure is perfectly solid and production-worthy. Nice job!</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/","title":"Defensive Programming","text":""},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#defensive-programming","title":"Defensive Programming","text":"<pre><code>define: {\n    __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n},\n</code></pre> <p>if i comment out this code and run the code it shows me errror why after adding defensive programming in utils code. why Uncaught ReferenceError: <code>__BUILD_TIME__</code> is not defined</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#overview","title":"Overview","text":"<p>Excellent question \u2014 and you\u2019ve touched on a very important distinction in JavaScript between:</p> <p>\u2705 Defensive programming inside your function, vs. \u274c Referencing a variable that doesn\u2019t exist at all at runtime.</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#the-problem-__build_time__is-not-defined","title":"\ud83d\udd25 The Problem: <code>__BUILD_TIME__</code>is not defined","text":"<p>If you comment out this line in your <code>vite.config.js</code>:</p> <pre><code>// define: {\n//   __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n// }\n</code></pre> <p>Then Vite does not replace <code>__BUILD_TIME__</code> at build time, and it never exists in your compiled code.</p> <p>So when your component runs:</p> <pre><code>formatDate(__BUILD_TIME__); // \u274c Uncaught ReferenceError\n</code></pre> <p>It crashes before it even calls your function, because <code>__BUILD_TIME__</code> itself is not defined (i.e., never declared at all \u2014 not <code>undefined</code>, just doesn't exist).</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#defensive-programming-handles-bad-values-but-not-undefined-variables","title":"\u2705 Defensive programming handles bad values, but not undefined variables","text":"<p>Your helper handles cases like this safely:</p> <pre><code>formatDate(undefined);      // \u2705 Safe\nformatDate(null);           // \u2705 Safe\nformatDate(\"bad string\");   // \u2705 Safe\n</code></pre> <p>But this will still crash:</p> <pre><code>formatDate(NOT_DEFINED_VARIABLE); // \u274c ReferenceError\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#how-to-fix-it-check-if-the-global-variable-is-defined-before-using-it","title":"\u2705 How to fix it: Check if the global variable is defined before using it","text":"<p>In your component, wrap it with a <code>typeof</code> check before using:</p> <pre><code>&lt;small&gt;\n  Last updated:{\" \"}\n  {formatDate(typeof __BUILD_TIME__ !== \"undefined\" ? __BUILD_TIME__ : null)}\n&lt;/small&gt;\n</code></pre> <p>This prevents the <code>ReferenceError</code> because <code>typeof</code> does not throw even if the variable doesn't exist.</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#bonus-abstract-it-in-a-getbuildtime-function","title":"\u2705 Bonus: Abstract it in a <code>getBuildTime()</code> function","text":"<p>To keep things clean, you could create a helper:</p> <pre><code>// utils/getBuildTime.js\nexport function getBuildTime() {\n  return typeof __BUILD_TIME__ !== \"undefined\" ? __BUILD_TIME__ : null;\n}\n</code></pre> <p>Then in your component:</p> <pre><code>import { getBuildTime } from \"./utils/getBuildTime\";\nimport { formatDate } from \"./utils/formatDate\";\n\n&lt;small&gt;Last updated: {formatDate(getBuildTime())}&lt;/small&gt;;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#summary","title":"\u2705 Summary","text":"Situation Result <code>__BUILD_TIME__</code> is defined (via Vite) Works fine \u2705 <code>__BUILD_TIME__</code> is not defined at all Crashes \u274c (ReferenceError) Use <code>typeof __BUILD_TIME__</code> Safe \u2705 Use defensive checks inside helpers Safe with invalid values \u2705 <p>Let me know if you\u2019d like to automate build time fallback (e.g., to current time if it's missing).</p>"},{"location":"migration/react/app-version-update/service-worker/working/defensive-programming/#last","title":"LAST","text":"<pre><code>// utils/getBuildTime.js\nexport function getBuildTime() {\n  if (typeof __BUILD_TIME__ !== \"undefined\") {\n    return __BUILD_TIME__;\n  }\n\n  // Fallback to current time (as ISO string)\n  return new Date().toISOString();\n}\n</code></pre> <pre><code>// utils/getBuildTime.js\nexport function getBuildTime() {\n  if (typeof __BUILD_TIME__ !== \"undefined\") {\n    return __BUILD_TIME__;\n  }\n\n  console.warn(\n    \"\u26a0\ufe0f __BUILD_TIME__ is not defined. Falling back to current time.\"\n  );\n  return new Date().toISOString();\n}\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/","title":"Final DATE Suggestion","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#final-date-added","title":"Final Date Added","text":"<p>Yes, you can absolutely add the last build time to your <code>ReloadPrompt</code> component \u2014 it's a great way to show when the app was last updated.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#step-by-step-to-include-build-time","title":"\ud83d\udd27 Step-by-step to include build time:","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#1-generate-the-build-time-at-build-time","title":"\u2705 1. Generate the build time at build-time","text":"<p>Add this in your <code>vite.config.js</code> (or <code>vite.config.ts</code>):</p> <pre><code>// vite.config.js\nimport { defineConfig } from \"vite\";\n\nexport default defineConfig({\n  define: {\n    __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n  },\n});\n</code></pre> <p>This will define a global constant <code>__BUILD_TIME__</code> at build time.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#2-use-it-in-your-react-component","title":"\u2705 2. Use it in your React component","text":"<p>Update your <code>ReloadPrompt</code> component like this:</p> <pre><code>function ReloadPrompt({\n  offlineMessage = \"App is ready to work offline.\",\n  refreshMessage = \"New content available. Click reload to update.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { offlineReady, needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  if (!offlineReady &amp;&amp; !needRefresh) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          {offlineReady ? (\n            &lt;span style={{ color: \"red\", fontSize: \"2rem\" }}&gt;\n              {offlineMessage}\n            &lt;/span&gt;\n          ) : (\n            &lt;span&gt;{refreshMessage}&lt;/span&gt;\n          )}\n        &lt;/div&gt;\n\n        &lt;div className=\"ReloadPrompt-build-time\"&gt;\n          &lt;small&gt;Last updated: {__BUILD_TIME__}&lt;/small&gt;\n        &lt;/div&gt;\n\n        {needRefresh &amp;&amp; (\n          &lt;button\n            className=\"ReloadPrompt-toast-button\"\n            onClick={() =&gt; updateServiceWorker(true)}\n          &gt;\n            {reloadLabel}\n          &lt;/button&gt;\n        )}\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#optional-format-the-date-eg-to-local-time","title":"\ud83d\udd10 Optional: Format the date (e.g., to local time)","text":"<p>You can format <code>__BUILD_TIME__</code> using <code>new Date(__BUILD_TIME__).toLocaleString()</code> for readability:</p> <pre><code>&lt;small&gt;Last updated: {new Date(__BUILD_TIME__).toLocaleString()}&lt;/small&gt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#optional-if-you-ever-want-yyyy-mm-dd-hhmm-format","title":"Optional: If you ever want <code>YYYY-MM-DD HH:mm</code> format","text":"<pre><code>const date = new Date(__BUILD_TIME__);\nconst formatted = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(\n  2,\n  \"0\"\n)}-${String(date.getDate()).padStart(2, \"0\")} ${String(\n  date.getHours()\n).padStart(2, \"0\")}:${String(date.getMinutes()).padStart(2, \"0\")}`;\n\n&lt;small&gt;Last updated: {formatted}&lt;/small&gt;;\n</code></pre> <p>Let me know if you want that as a helper function or custom hook.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#helper-function","title":"Helper Function","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#1-create-a-helper-function","title":"1. Create a helper function","text":"<p>Create a file called <code>formatDate.js</code> (or <code>utils/formatDate.js</code> if you have a <code>utils</code> folder):</p> <pre><code>// utils/formatDate.js\nexport function formatDate(dateInput) {\n  const date = new Date(dateInput);\n\n  const yyyy = date.getFullYear();\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n  const hh = String(date.getHours()).padStart(2, \"0\");\n  const min = String(date.getMinutes()).padStart(2, \"0\");\n\n  return `${yyyy}-${mm}-${dd} ${hh}:${min}`;\n}\n</code></pre> <p>Updated Helper Function with <code>AM/PM</code> and Defensive Programming</p> <pre><code>// utils/formatDate.js\nexport function formatDate(dateInput) {\n  if (!dateInput) return \"Unknown\";\n\n  const date = new Date(dateInput);\n  if (isNaN(date.getTime())) return \"Unknown\";\n\n  const yyyy = date.getFullYear();\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n\n  let hours = date.getHours();\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const ampm = hours &gt;= 12 ? \"PM\" : \"AM\";\n\n  hours = hours % 12;\n  hours = hours ? hours : 12; // 0 should be 12\n\n  return `${yyyy}-${mm}-${dd} ${hours}:${minutes} ${ampm}`;\n}\n</code></pre> <pre><code>// formatDate.js\nexport function formatDate(dateInput) {\n  if (!dateInput) return \"Unknown\";\n\n  const date = new Date(dateInput);\n  if (isNaN(date.getTime())) return \"Unknown\";\n\n  const yyyy = date.getFullYear();\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n\n  let hours = date.getHours();\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const ampm = hours &gt;= 12 ? \"PM\" : \"AM\";\n\n  hours = hours % 12 || 12;\n\n  return `${yyyy}-${mm}-${dd} ${hours}:${minutes} ${ampm}`;\n}\n</code></pre> <p>Then in your component, keep it simple:</p> <pre><code>&lt;small&gt;Last updated: {formatDate(__BUILD_TIME__)}&lt;/small&gt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#2-use-it-in-your-reloadpromptjsx","title":"2. Use it in your <code>ReloadPrompt.jsx</code>","text":"<p>Update your component to import and use the function:</p> <pre><code>import React from \"react\";\nimport { useServiceWorkerUpdater } from \"./hooks/useServiceWorkerUpdater\";\nimport { formatDate } from \"./utils/formatDate\"; // adjust path if needed\n\nfunction ReloadPrompt({\n  offlineMessage = \"App is ready to work offline.\",\n  refreshMessage = \"New content available. Click reload to update.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { offlineReady, needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  if (!offlineReady &amp;&amp; !needRefresh) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          {offlineReady ? (\n            &lt;span style={{ color: \"red\", fontSize: \"2rem\" }}&gt;\n              {offlineMessage}\n            &lt;/span&gt;\n          ) : (\n            &lt;span&gt;{refreshMessage}&lt;/span&gt;\n          )}\n        &lt;/div&gt;\n\n        &lt;div className=\"ReloadPrompt-build-time\"&gt;\n          &lt;small&gt;Last updated: {formatDate(__BUILD_TIME__)}&lt;/small&gt;\n        &lt;/div&gt;\n\n        {needRefresh &amp;&amp; (\n          &lt;button\n            className=\"ReloadPrompt-toast-button\"\n            onClick={() =&gt; updateServiceWorker(true)}\n          &gt;\n            {reloadLabel}\n          &lt;/button&gt;\n        )}\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#output-example","title":"Output Example","text":"<p>With this setup, users will see something like:</p> <pre><code>Last updated: 2025-08-21 14:37\n</code></pre> <p>Let me know if you want support for different locales or time zones.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#tips","title":"TIPS","text":"Step Format Purpose <code>vite.config.js</code> <code>toISOString()</code> Consistent UTC build time reference React component <code>formatDate()</code> Show in user's local time (readable)"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#best-practice-setup","title":"Best Practice Setup","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#in-viteconfigjs-use-toisostring","title":"\ud83d\udd27 In <code>vite.config.js</code> \u2192 Use <code>.toISOString()</code> \u2705","text":"<pre><code>define: {\n  __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n}\n</code></pre> <p>Why?</p> <ul> <li><code>toISOString()</code> gives you a standardized, timezone-neutral timestamp.</li> <li>It avoids issues where build servers are in different time zones.</li> <li>It's ideal for storing, transporting, and comparing timestamps.</li> <li>Think of it like: \"Store in UTC, display in local time.\"</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#in-the-react-component-format-for-display-with-tolocalestring-or-your-own-function","title":"\ud83d\udda5 In the React Component \u2192 Format for display with <code>.toLocaleString()</code> or your own function \u2705","text":"<p>Use a helper like your <code>formatDate()</code> to convert the ISO string to something user-friendly:</p> <pre><code>// formatDate.js\nexport function formatDate(isoDate) {\n  if (!isoDate) return \"Unknown\";\n\n  const date = new Date(isoDate);\n  if (isNaN(date.getTime())) return \"Unknown\";\n\n  const yyyy = date.getFullYear();\n  const mm = String(date.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(date.getDate()).padStart(2, \"0\");\n\n  let hours = date.getHours();\n  const minutes = String(date.getMinutes()).padStart(2, \"0\");\n  const ampm = hours &gt;= 12 ? \"PM\" : \"AM\";\n\n  hours = hours % 12 || 12;\n\n  return `${yyyy}-${mm}-${dd} ${hours}:${minutes} ${ampm}`;\n}\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#final-flow-summary","title":"\u2705 Final Flow (Summary)","text":"Step Format Purpose <code>vite.config.js</code> <code>toISOString()</code> Consistent UTC build time reference React component <code>formatDate()</code> Show in user's local time (readable)"},{"location":"migration/react/app-version-update/service-worker/working/final-date-suggestion/#so-use-this","title":"\ud83d\udc47 So use this:","text":"<p>In Vite config:</p> <pre><code>define: {\n  __BUILD_TIME__: JSON.stringify(new Date().toISOString()),\n}\n</code></pre> <p>In component:</p> <pre><code>&lt;small&gt;Last updated: {formatDate(__BUILD_TIME__)}&lt;/small&gt;\n</code></pre> <p>Let me know if you want to support multiple locales, time zones, or show \u201cX minutes ago\u201d instead \u2014 those are nice touches too</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-suggestion/","title":"Final Suggestion","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-suggestion/#final-suggestion","title":"Final Suggestion","text":""},{"location":"migration/react/app-version-update/service-worker/working/final-suggestion/#clean-version","title":"CLEAN VERSION","text":"<p>In a React web app that relies heavily on RTK Query (or any API-driven architecture), being offline makes the app non-functional. If all or most features depend on the internet, the \"App is ready to work offline\" message becomes irrelevant.</p> <p>So yes, you can safely remove the <code>offlineReady</code> logic from your <code>ReloadPrompt</code> component.</p> <p>\u2705 Here's a cleaned-up version of your component:</p> <pre><code>import React from \"react\";\nimport { useServiceWorkerUpdater } from \"./hooks/useServiceWorkerUpdater\";\n\nfunction ReloadPrompt({\n  refreshMessage = \"New content available. Click reload to update.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  if (!needRefresh) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          &lt;span&gt;{refreshMessage}&lt;/span&gt;\n        &lt;/div&gt;\n\n        &lt;button\n          className=\"ReloadPrompt-toast-button\"\n          onClick={() =&gt; updateServiceWorker(true)}\n        &gt;\n          {reloadLabel}\n        &lt;/button&gt;\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre> <p>\ud83d\udd25 Summary of changes:</p> <ul> <li> <p>Removed:</p> <ul> <li><code>offlineMessage</code></li> <li><code>offlineReady</code> check</li> </ul> </li> <li> <p>Simplified:</p> <ul> <li>Conditional rendering only based on needRefresh</li> </ul> </li> </ul> <p>\ud83d\udea8 Extra Tip:</p> <p>If your PWA doesn't support offline features at all, you might also want to disable service worker caching of app shell (like <code>index.html</code>) to prevent misleading offline behavior. You can still use a service worker for background updates, but not for offline usage.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-suggestion/#suggestion","title":"Suggestion","text":"<p>Yes \u2014 that is 100% a valid and excellent reason to use a service worker in a React-based web app. In fact, what you're describing is one of the best use cases for a service worker in a modern API-driven app:</p> <p>Your goal:</p> <ul> <li>\u201cAfter deploying new code or assets (e.g., images), I want the user to automatically get the latest version without needing a hard refresh.\u201d</li> </ul> <p>\ud83d\udca1 Why this is a perfect use case:</p> <ol> <li>Service workers cache the old version of the app until a new one is available.</li> <li> <p>When you deploy new assets (like images, JS, or CSS), the service worker detects the new version, and:</p> <ul> <li>Triggers <code>needRefresh = true</code></li> <li>You show a prompt: \u201cNew content available. Click reload.\u201d</li> </ul> </li> <li> <p>When the user clicks reload, the service worker activates the new version \u2014 no hard refresh or cache clearing needed.</p> </li> </ol> <p>This improves:</p> <ul> <li>User experience (no stale UI)</li> <li>Deployment confidence (you know users are on the right version)</li> <li>Avoids support issues (\u201cI still see the old logo\u201d)</li> </ul> <p>\ud83e\uddf1 How to do it right (with <code>vite-plugin-pwa</code>):</p> <p>In your <code>vite.config.ts</code>:</p> <pre><code>import { VitePWA } from \"vite-plugin-pwa\";\n\nVitePWA({\n  registerType: \"autoUpdate\",\n  workbox: {\n    globPatterns: [\"**/*.{js,css,html,ico,png,svg,jpg}\"], // Add relevant asset types\n    cleanupOutdatedCaches: true,\n  },\n});\n</code></pre> <pre><code>import { VitePWA } from \"vite-plugin-pwa\";\n\nexport default {\n  plugins: [\n    VitePWA({\n      registerType: \"prompt\", // You're using this\n      workbox: {\n        globPatterns: [\"**/*.{js,css,html,ico,png,svg,jpg,webp,woff2}\"], // Add any other static assets\n        cleanupOutdatedCaches: true,\n      },\n      devOptions: {\n        enabled: true, // Useful in local dev\n      },\n    }),\n  ],\n};\n</code></pre> <p>In your app:</p> <ul> <li>Keep the <code>needRefresh</code> prompt</li> <li>Remove <code>offlineReady</code> (since offline isn\u2019t supported)</li> <li>Use <code>updateServiceWorker(true)</code> when user accepts</li> </ul> <p>Summary</p> Setting Use case <code>registerType: 'prompt'</code> You want control over when to activate updates (\u2705 your case) <code>needRefresh</code> toast Correct way to prompt user (\u2705 your current setup) <code>offlineReady</code> Skip it (\u274c not useful in API-only apps) <code>globPatterns</code> Include all static files that may need update detection Cache-busting Use hashed image filenames for better freshness <p>\u2705 Conclusion:</p> <p>\u26a1 Yes, using a service worker just to trigger updates on deployment \u2014 especially for assets like images \u2014 is a very valid and recommended approach.</p> <p>You're using it for version management, not offline support \u2014 and that's a smart, targeted use of the PWA pattern in modern apps.</p>"},{"location":"migration/react/app-version-update/service-worker/working/final-suggestion/#misc","title":"Misc","text":"<p>\ud83d\udd01 You're using a service worker for version management, not for offline support. So what does this mean?</p> <p>\ud83e\uddfe So what should you do in your case?</p> <p>Since you\u2019re only using the service worker to detect new versions, do this:</p> <p>\u2705 Configure Vite PWA without caching the app shell</p> <pre><code>// vite.config.ts\nimport { VitePWA } from \"vite-plugin-pwa\";\n\nexport default {\n  plugins: [\n    VitePWA({\n      registerType: \"prompt\", // shows a toast when new version is available\n      workbox: {\n        globPatterns: [], // \u274c Don't precache the app shell\n        cleanupOutdatedCaches: true,\n      },\n      // Optional \u2014 in case you want to still cache icons or logos\n      includeAssets: [\"favicon.ico\", \"logo.svg\"],\n    }),\n  ],\n};\n</code></pre> <p>This setup:</p> Feature Enabled? Notes <code>index.html</code> caching \u274c No Prevents misleading offline behavior JS/CSS caching \u274c No So user gets latest versions on reload Image/font caching Optional Add via <code>runtimeCaching</code> if needed Update detection prompt \u2705 Yes You\u2019ll still get <code>needRefresh = true</code> <code>offlineReady</code> toast \u274c No You can ignore/remove it \u2014 app doesn\u2019t work offline anyway <p>\u2705 What you keep</p> <ul> <li>Service worker still detects changes (new JS, new images)</li> <li>You still show your <code>ReloadPrompt</code> when <code>needRefresh</code> is true</li> <li>User reloads and gets new version \u2014 no manual cache clearing needed</li> <li>No offline fallback \u2014 the app won\u2019t load offline, which is what you want</li> </ul> <p>\ud83e\uddea Bonus tip: Test your offline behavior</p> <p>Try this:</p> <ol> <li>Open your app in Chrome</li> <li>DevTools \u2192 Application tab \u2192 Service Workers \u2192 Uncheck \u201cUpdate on reload\u201d</li> <li>Go offline (toggle network offline in DevTools)</li> <li>Refresh the app</li> </ol> <p>With the above config:</p> <ul> <li>The app should fail to load (good \u2014 because your app needs internet)</li> <li>User sees an error (or you can show a custom offline error screen if you want)</li> </ul> <p>TL;DR</p> <p>You're doing it exactly right:</p> <ul> <li>Use service worker for version updates</li> <li>Don\u2019t cache the app shell</li> <li>Avoid offline confusion for users</li> </ul> <p>Let me know if you want help showing a better \"You're offline\" screen instead of a browser error.</p>"},{"location":"migration/react/app-version-update/service-worker/working/misconception/","title":"Common Misconception","text":""},{"location":"migration/react/app-version-update/service-worker/working/misconception/#common-misconception","title":"Common Misconception","text":"<p>Great question \u2014 and this is a common misconception when working with service workers.</p> <p>\u2753 Short answer:</p> <p>The <code>{offlineMessage}</code> only shows when the service worker signals <code>offlineReady</code>, not just when the user is offline or has no network.</p>"},{"location":"migration/react/app-version-update/service-worker/working/misconception/#key-clarification-what-does-offlineready-mean","title":"\ud83e\udde0 Key Clarification: What Does <code>offlineReady</code> Mean?","text":"<p>In the context of vite-plugin-pwa (which powers <code>virtual:pwa-register</code>):</p> <ul> <li><code>offlineReady</code> becomes <code>true</code> when the service worker has successfully cached everything necessary for the app to run offline.</li> <li>It does NOT mean the user is currently offline.</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/misconception/#why-offlinemessage-isnt-showing-when-youre-offline","title":"\ud83d\udd0d Why <code>{offlineMessage}</code> Isn't Showing When You're Offline","text":"<p>Your <code>ReloadPrompt</code> is only designed to show messages when:</p> <ol> <li>The app is now ready to work offline (<code>offlineReady === true</code>)</li> <li>There's a new version available (<code>needRefresh === true</code>)</li> </ol> <p>But it doesn't check if you're currently offline.</p>"},{"location":"migration/react/app-version-update/service-worker/working/misconception/#if-you-want-to-show-a-message-when-the-user-has-no-internet","title":"\u2705 If You Want to Show a Message When the User Has No Internet","text":"<p>You'll need to listen for the browser's online/offline status:</p> <pre><code>const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\nuseEffect(() =&gt; {\n  const handleOffline = () =&gt; setIsOffline(true);\n  const handleOnline = () =&gt; setIsOffline(false);\n\n  window.addEventListener(\"offline\", handleOffline);\n  window.addEventListener(\"online\", handleOnline);\n\n  return () =&gt; {\n    window.removeEventListener(\"offline\", handleOffline);\n    window.removeEventListener(\"online\", handleOnline);\n  };\n}, []);\n</code></pre> <p>Then you can conditionally show a message like:</p> <pre><code>{\n  isOffline &amp;&amp; &lt;div className=\"ReloadPrompt-offline\"&gt;You're offline&lt;/div&gt;;\n}\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/misconception/#to-summarize","title":"\ud83d\udd04 To Summarize:","text":"Situation What Happens <code>offlineReady</code> is <code>true</code> Service worker has cached everything \u2013 show <code>{offlineMessage}</code> User is offline Browser sets <code>navigator.onLine === false</code>, but your component won\u2019t know unless you listen for it You want a message when offline Use <code>navigator.onLine</code> + <code>window.addEventListener(\"offline\")</code>"},{"location":"migration/react/app-version-update/service-worker/working/offline/","title":"navigator.onLine","text":""},{"location":"migration/react/app-version-update/service-worker/working/offline/#offline","title":"Offline","text":"<p>Would you like me to update your <code>ReloadPrompt</code> to include this offline detection logic as well?</p> <p>Perfect! Here's how to update your <code>ReloadPrompt</code> component to:</p> <ul> <li>\u2705 Keep the original logic from <code>useServiceWorkerUpdater</code></li> <li>\u2795 Show a message when the user is offline (based on browser status)</li> </ul> <p>\u2705 Updated <code>ReloadPrompt.jsx</code> (with offline detection)</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { useServiceWorkerUpdater } from \"./hooks/useServiceWorkerUpdater\";\n\nfunction ReloadPrompt({\n  offlineMessage = \"App is ready to work offline.\",\n  refreshMessage = \"New content available. Click reload to update.\",\n  offlineStatusMessage = \"You're currently offline.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { offlineReady, needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  // Detect browser online/offline status\n  useEffect(() =&gt; {\n    const handleOffline = () =&gt; setIsOffline(true);\n    const handleOnline = () =&gt; setIsOffline(false);\n\n    window.addEventListener(\"offline\", handleOffline);\n    window.addEventListener(\"online\", handleOnline);\n\n    return () =&gt; {\n      window.removeEventListener(\"offline\", handleOffline);\n      window.removeEventListener(\"online\", handleOnline);\n    };\n  }, []);\n\n  const showPrompt = offlineReady || needRefresh || isOffline;\n\n  if (!showPrompt) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          {isOffline &amp;&amp; &lt;span&gt;{offlineStatusMessage}&lt;/span&gt;}\n          {!isOffline &amp;&amp;\n            (offlineReady ? (\n              &lt;span&gt;{offlineMessage}&lt;/span&gt;\n            ) : (\n              &lt;span&gt;{refreshMessage}&lt;/span&gt;\n            ))}\n        &lt;/div&gt;\n\n        {needRefresh &amp;&amp; !isOffline &amp;&amp; (\n          &lt;button\n            className=\"ReloadPrompt-toast-button\"\n            onClick={() =&gt; updateServiceWorker(true)}\n          &gt;\n            {reloadLabel}\n          &lt;/button&gt;\n        )}\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre> <p>\ud83d\udcdd Additional Notes:</p> <ul> <li><code>isOffline</code> uses <code>navigator.onLine</code> as initial state and updates via event listeners.</li> <li>It shows <code>offlineStatusMessage</code> when you're offline.</li> <li>The <code>Reload</code> button is hidden while offline (since reloading won\u2019t help).</li> </ul> <p>\u2705 Example Usage</p> <pre><code>&lt;ReloadPrompt\n  offlineMessage=\"You can now use this app offline.\"\n  refreshMessage=\"New version available \u2014 reload to update.\"\n  offlineStatusMessage=\"You're currently offline.\"\n  reloadLabel=\"Reload Now\"\n  closeLabel=\"Dismiss\"\n/&gt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/offline/#further","title":"Further","text":"<pre><code>// Detect browser online/offline status\n\nuseEffect(() =&gt; {\n  const handleOffline = () =&gt; setIsOffline(true);\n  const handleOnline = () =&gt; setIsOffline(false);\n\n  window.addEventListener(\"offline\", handleOffline);\n  window.addEventListener(\"online\", handleOnline);\n\n  return () =&gt; {\n    window.removeEventListener(\"offline\", handleOffline);\n    window.removeEventListener(\"online\", handleOnline);\n  };\n}, []);\n</code></pre> <p>this code separate so i can reuse this in other code projects also</p> <p>Absolutely \u2014 that\u2019s a perfect use case for a custom React hook.</p> <p>You can extract the online/offline detection logic into a reusable hook like:</p>"},{"location":"migration/react/app-version-update/service-worker/working/offline/#step-1-create-usenetworkstatusjs-hook","title":"Step 1: Create <code>useNetworkStatus.js</code> Hook","text":""},{"location":"migration/react/app-version-update/service-worker/working/offline/#place-it-somewhere-reusable-like","title":"\ud83d\udcc1 Place it somewhere reusable, like:","text":"<pre><code>src/\n  hooks/\n    useNetworkStatus.js\n</code></pre> <p>\ud83d\udcc4 <code>useNetworkStatus.js</code></p> <pre><code>import { useState, useEffect } from \"react\";\n\n/**\n * Custom hook to detect user's online/offline status.\n * @returns {boolean} isOffline - true if the user is offline\n */\nexport const useNetworkStatus = () =&gt; {\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  useEffect(() =&gt; {\n    const handleOffline = () =&gt; setIsOffline(true);\n    const handleOnline = () =&gt; setIsOffline(false);\n\n    window.addEventListener(\"offline\", handleOffline);\n    window.addEventListener(\"online\", handleOnline);\n\n    return () =&gt; {\n      window.removeEventListener(\"offline\", handleOffline);\n      window.removeEventListener(\"online\", handleOnline);\n    };\n  }, []);\n\n  return isOffline;\n};\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/offline/#step-2-update-reloadpromptjsx-to-use-the-hook","title":"Step 2: Update <code>ReloadPrompt.jsx</code> to Use the Hook","text":"<pre><code>import React from \"react\";\nimport { useServiceWorkerUpdater } from \"./hooks/useServiceWorkerUpdater\";\nimport { useNetworkStatus } from \"../../hooks/useNetworkStatus\"; // adjust path as needed\n\nfunction ReloadPrompt({\n  offlineMessage = \"App is ready to work offline.\",\n  refreshMessage = \"New content available. Click reload to update.\",\n  offlineStatusMessage = \"You're currently offline.\",\n  reloadLabel = \"Reload\",\n  closeLabel = \"Close\",\n  intervalMS = 5000,\n}) {\n  const { offlineReady, needRefresh, updateServiceWorker, closePrompt } =\n    useServiceWorkerUpdater(intervalMS);\n\n  const isOffline = useNetworkStatus();\n\n  const showPrompt = offlineReady || needRefresh || isOffline;\n\n  if (!showPrompt) return null;\n\n  return (\n    &lt;div className=\"ReloadPrompt-container\"&gt;\n      &lt;div className=\"ReloadPrompt-toast\"&gt;\n        &lt;div className=\"ReloadPrompt-message\"&gt;\n          {isOffline &amp;&amp; &lt;span&gt;{offlineStatusMessage}&lt;/span&gt;}\n          {!isOffline &amp;&amp;\n            (offlineReady ? (\n              &lt;span&gt;{offlineMessage}&lt;/span&gt;\n            ) : (\n              &lt;span&gt;{refreshMessage}&lt;/span&gt;\n            ))}\n        &lt;/div&gt;\n\n        {needRefresh &amp;&amp; !isOffline &amp;&amp; (\n          &lt;button\n            className=\"ReloadPrompt-toast-button\"\n            onClick={() =&gt; updateServiceWorker(true)}\n          &gt;\n            {reloadLabel}\n          &lt;/button&gt;\n        )}\n\n        &lt;button className=\"ReloadPrompt-toast-button\" onClick={closePrompt}&gt;\n          {closeLabel}\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ReloadPrompt;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/offline/#now-you-can-reuse-usenetworkstatus-anywhere","title":"\u2705 Now You Can Reuse <code>useNetworkStatus</code> Anywhere","text":"<p>Example:</p> <pre><code>import { useNetworkStatus } from \"@/hooks/useNetworkStatus\";\n\nconst MyComponent = () =&gt; {\n  const isOffline = useNetworkStatus();\n\n  return &lt;p&gt;{isOffline ? \"Offline\" : \"Online\"}&lt;/p&gt;;\n};\n</code></pre> \ud83c\udf89 Benefits <ul> <li>\u267b\ufe0f Reusable in multiple <code>features/pages</code></li> <li>\ud83d\udd0d Separates concerns \u2014 logic lives in one place</li> <li>\ud83e\uddfc Cleaner components</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/offline/#offline-banner","title":"Offline Banner","text":"<pre><code>// OfflineBanner.jsx\n\nimport React from \"react\";\nimport { useNetworkStatus } from \"@/hooks/useNetworkStatus\";\nimport \"./OfflineBanner.css\"; // create styles as needed\n\nconst OfflineBanner = ({\n  message = \"\ud83d\udd34 You are offline. Some features may not work.\",\n}) =&gt; {\n  const isOffline = useNetworkStatus();\n\n  if (!isOffline) return null;\n\n  return &lt;div className=\"OfflineBanner\"&gt;{message}&lt;/div&gt;;\n};\n\nexport default OfflineBanner;\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/","title":"OfflineReady vs navigator.onLine","text":""},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#offlineready-vs-navigatoronline","title":"<code>offlineReady</code> vs <code>navigator.onLine</code>","text":""},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#offlineready","title":"offlineReady","text":""},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#under-the-hood-using-vite-plugin-pwa","title":"\ud83d\udee0\ufe0f Under the Hood (Using <code>vite-plugin-pwa</code>)","text":"<p>You're using the <code>useRegisterSW</code> hook from <code>vite-plugin-pwa</code>, which abstracts the service worker lifecycle.</p> <p>This plugin:</p> <ol> <li>Generates a service worker for you</li> <li>Registers it</li> <li>Handles lifecycle events</li> <li>Sets flags like <code>offlineReady</code>, <code>needRefresh</code></li> </ol> <p>Internally:</p> <ul> <li>After the first install, once all static assets are cached (<code>index.html</code>, JS, CSS, etc.), the plugin will fire an event:</li> </ul> <pre><code>options.onOfflineReady?.(); // This sets offlineReady = true\n</code></pre>"},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#lifecycle-flow","title":"\ud83d\udd04 Lifecycle Flow","text":"<p>Here\u2019s how it works in practice:</p> Step What Happens <code>offlineReady</code> Value \ud83d\udd50 User first visits the app No SW yet <code>false</code> \ud83d\udce5 SW installs and caches assets Caching completes <code>true</code> \u2705 \ud83d\udd04 Later visits (cached) Assets served from SW <code>true</code> (but not re-triggered) \ud83d\udd0c User disconnects from internet No change <code>offlineReady</code> still <code>true</code> (but no new event) <p><code>offlineReady</code> only changes to <code>true</code> once the app is fully cached, not when the user goes offline.</p>"},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#difference-from-needrefresh","title":"\ud83d\udd01 Difference from needRefresh","text":"<ul> <li><code>offlineReady</code>: SW is installed and ready for offline use.</li> <li><code>needRefresh</code>: A new version of the SW is available, and you can trigger an update.</li> </ul>"},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#tldr-offlineready","title":"\ud83d\udccb TL;DR \u2014 offlineReady","text":"Property Meaning \u2705 <code>true</code> Service worker finished caching all assets (the app is installable/offline-capable) \ud83d\udd52 When it occurs After initial SW install and asset caching completes \u274c Not affected by Whether the user is currently online/offline \ud83d\udc47 Triggered by <code>vite-plugin-pwa</code> lifecycle under the hood \ud83d\udeab Not persistent <code>offlineReady</code> is <code>true</code> only temporarily for the current session \u2014 useful for showing a one-time toast like \"Now available offline!\""},{"location":"migration/react/app-version-update/service-worker/working/offlineReady-vs-navigator.onLine/#when-should-you-use-it","title":"\ud83c\udfaf When Should You Use It?","text":"<p>Use <code>offlineReady</code> to:</p> <ul> <li>Show a toast: \u2705 \u201cApp is now available offline\u201d</li> <li>Encourage user to pin/install it</li> <li>Let user know SW caching is complete</li> </ul> <p>Let me know if you want to persist this state (e.g. save to <code>localStorage</code> so it doesn't show again), or if you want to handle the \"you're offline now\" part separately (via <code>navigator.onLine</code>).</p>"},{"location":"migration/react/web-push-api/overview/","title":"Overview","text":""},{"location":"migration/react/web-push-api/overview/#overview","title":"Overview","text":""},{"location":"migration/react/web-push-api/overview/#reference","title":"Reference","text":"<ul> <li>Push API: Web API</li> </ul>"},{"location":"migration/roadmap/80-20/","title":"80 20 Principle","text":""},{"location":"migration/roadmap/80-20/#80-20","title":"80 20","text":"<ul> <li> <p>Static Types:</p> </li> <li> <p>Interfaces/Type Aliases</p> </li> <li> <p>Generics (Basics)</p> </li> <li> <p>Type Inference</p> </li> <li> <p>Union/Intersection Types</p> </li> <li> <p>Type Assetions</p> </li> <li> <p>Configuring</p> </li> </ul>"},{"location":"migration/roadmap/80-20/#tips-and-tricks-for-landing-a-job","title":"Tips and Tricks for Landing a JOB","text":"<p>Here are some solid hacks and tips for job searching specifically tailored to getting noticed by or landing a job at Google:</p>"},{"location":"migration/roadmap/80-20/#1-tailor-your-resume-to-the-role-using-keywords","title":"\ud83d\ude80 1. Tailor Your Resume to the Role (Using Keywords)","text":"<ul> <li>Google uses an ATS (Applicant Tracking System), so use keywords from the job description.</li> <li>Focus on impact: use metrics (e.g., \u201cImproved page load time by 40%\u201d).</li> <li>Follow the XYZ format: \u201cAccomplished X by doing Y using Z.\u201d</li> </ul>"},{"location":"migration/roadmap/80-20/#2-use-googles-careers-site-effectively","title":"\ud83d\udd0d 2. Use Google\u2019s Careers Site Effectively","text":"<ul> <li>Go to careers.google.com and set up job alerts.</li> <li>Use the filters to find roles that suit your skills, especially if you're not in engineering.</li> <li>Search by team, location, or type (e.g., internship, full-time, remote).</li> </ul>"},{"location":"migration/roadmap/80-20/#3-practice-for-google-style-interviews","title":"\ud83e\udde0 3. Practice for Google-Style Interviews","text":"<ul> <li>Google is famous for its behavioral and technical interviews.</li> <li>Use the STAR method (Situation, Task, Action, Result) for behavioral.</li> <li>For tech roles, LeetCode is your friend. Focus on medium-hard problems.</li> </ul>"},{"location":"migration/roadmap/80-20/#4-network-with-googlers","title":"\ud83e\uddd1\u200d\ud83d\udcbc 4. Network with Googlers","text":"<ul> <li>Use LinkedIn to connect with current Google employees\u2014don\u2019t just cold ask for referrals. Build rapport first.</li> <li>Comment on their posts, ask thoughtful questions, or message with shared interests.</li> <li>Once there's a connection, ask for advice, not a job. If it goes well, ask for a referral.</li> </ul>"},{"location":"migration/roadmap/80-20/#5-use-x-ray-search-on-google","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f 5. Use X-Ray Search on Google","text":"<p>You can find hidden jobs or employee profiles this way:</p> <pre><code>site:careers.google.com \u201csoftware engineer\u201d \u201cremote\u201d\n</code></pre> <p>Or find Googler LinkedIn profiles:</p> <pre><code>site:linkedin.com/in \"Google\" AND \"Product Manager\"\n</code></pre>"},{"location":"migration/roadmap/80-20/#6-build-projects-that-stand-out","title":"\ud83d\udca5 6. Build Projects That Stand Out","text":"<ul> <li>Especially for tech roles, build a GitHub profile with solid, well-documented projects.</li> <li>Use Google tech (e.g., Firebase, TensorFlow, Google Cloud) to show you\u2019re already in the ecosystem.</li> </ul>"},{"location":"migration/roadmap/80-20/#7-dont-sleep-on-the-associate-product-manager-apm-step-programs","title":"\ud83c\udfaf 7. Don\u2019t Sleep on the Associate Product Manager (APM) &amp; STEP Programs","text":"<ul> <li>APM: for aspiring product managers with leadership skills.</li> <li>STEP (Student Training in Engineering Program): for underrepresented students in CS.</li> </ul> <p>search react jobs inside nepal</p> <p>Here are some React developer job opportunities currently available in Nepal:</p>"},{"location":"migration/roadmap/80-20/#salary-range","title":"Salary Range","text":"<p>Great question \u2014 let\u2019s break it down:</p> <p>The average monthly salary of NPR 37,083 (with a range between NPR 29,000 to NPR 47,000) mentioned above is generally aligned with entry-level to junior React developers in Nepal.</p> <p>Here\u2019s a more realistic breakdown for React Developer salaries in Nepal based on experience:</p>"},{"location":"migration/roadmap/80-20/#entry-level-01-years","title":"\ud83d\udcbb Entry-Level (0\u20131 years)","text":"<ul> <li>Range: NPR 25,000 \u2013 NPR 40,000/month</li> <li>Typical Roles: Intern, Junior Developer</li> <li>Notes: These are usually recent graduates or self-taught devs starting out.</li> </ul>"},{"location":"migration/roadmap/80-20/#mid-level-24-years","title":"\ud83e\uddd1\u200d\ud83d\udcbc Mid-Level (2\u20134 years)","text":"<ul> <li>Range: NPR 45,000 \u2013 NPR 90,000/month</li> <li>Typical Roles: React Developer, Frontend Engineer</li> <li>Notes: Expected to manage small modules, handle API integrations, maybe even mentor interns.</li> </ul>"},{"location":"migration/roadmap/80-20/#senior-level-5-years","title":"\ud83d\udc68\u200d\ud83c\udfeb Senior-Level (5+ years)","text":"<ul> <li>Range: NPR 100,000 \u2013 NPR 200,000+/month</li> <li>Typical Roles: Senior React Developer, Frontend Architect, Tech Lead</li> <li>Notes: These roles include leading teams, system design, and decision-making on frontend architecture.</li> </ul>"},{"location":"migration/roadmap/80-20/#reference","title":"Reference","text":"<ul> <li>React Developer Salaries</li> </ul>"},{"location":"migration/roadmap/license-doc/","title":"License","text":""},{"location":"migration/roadmap/license-doc/#overview","title":"Overview","text":"<p>For a web application, the MIT License is generally a great choice because it\u2019s simple, permissive, and allows for easy modification and use of your code, even in commercial applications.</p> <p>In one line:</p> <ul> <li>MIT License: Allows anyone to use, modify, and distribute your code with minimal restrictions, as long as they include the original license and copyright notice.</li> </ul> <p>This makes it ideal for most web applications unless you need specific patent protection (then choose Apache 2.0) or want to enforce open-source contributions (then choose GPL).</p>"},{"location":"migration/roadmap/license-doc/#node-version","title":"Node Version","text":"<p>To list all the available Node.js versions online without downloading them using nvm (Node Version Manager), you can run the following command:</p> InstallationExplanation <pre><code># List all the versions\nnvm ls-remote\n\n# Only list the lts version\nnvm ls-remote --lts\n</code></pre> <ul> <li>nvm ls-remote: This command fetches and displays all the Node.js versions available for installation from the official Node.js repository. It doesn\u2019t download anything; it only shows the available versions you can install.</li> </ul> <p>This will output a long list of versions, including the latest stable version and LTS (Long Term Support) versions. You can scroll through the list or use additional filters to narrow it down (like searching for specific version ranges).</p>"},{"location":"migration/roadmap/license-doc/#codename-in-nodejs-is-inspired-by-periodic-table","title":"Codename in <code>Node.js</code> is inspired by periodic table","text":"<p>The process of selecting codenames for Node.js LTS (Long Term Support) versions is inspired by the periodic table of elements. The codenames are taken from elements, and they follow a <code>specific naming convention</code> in alphabetical order.</p> Success <p>The most important thing to remember is that <code>Node.js</code> LTS codenames are assigned alphabetically from elements on the periodic table, but the selection process is flexible, and sometimes elements are chosen for practical reasons rather than strict alphabetical order.</p>"},{"location":"migration/roadmap/license-doc/#necessay-package-for-react-for-project","title":"Necessay Package for react for project","text":"<p>When developing a React project with Redux Toolkit (RTK), you'll need to install the core libraries for both React and Redux, along with some additional utilities that help with state management and the development process.</p> <p>Here's a list of the necessary packages you should install:</p>"},{"location":"migration/roadmap/license-doc/#1-react-and-react-dom","title":"1. React and React DOM","text":"<p>Make sure you have React and ReactDOM installed, if you haven't already:</p> <pre><code>npm install react react-dom\n</code></pre>"},{"location":"migration/roadmap/license-doc/#2-redux-toolkit-rtk","title":"2. Redux Toolkit (RTK)","text":"<p>Redux Toolkit simplifies Redux usage and is the standard for Redux state management in modern React apps:</p> <pre><code>npm install @reduxjs/toolkit\n</code></pre>"},{"location":"migration/roadmap/license-doc/#3-react-redux","title":"3. React-Redux","text":"<p>The official bindings for React and Redux. This connects your Redux store to your React components:</p> <pre><code>npm install react-redux\n</code></pre>"},{"location":"migration/roadmap/license-doc/#4-optional-redux-devtools-extension-for-development","title":"4. Optional: Redux DevTools Extension (for development)","text":"<p>Redux DevTools is a powerful tool that helps with debugging Redux states. You can install it in development for better debugging:</p> <pre><code>npm install redux-devtools-extension\n</code></pre> <p>If you're using the <code>configureStore</code> method from Redux Toolkit, the Redux DevTools extension will work out-of-the-box, but you may need to adjust configurations in the development environment.</p>"},{"location":"migration/roadmap/license-doc/#5-additional-optional-libraries","title":"5. Additional (Optional) Libraries","text":"<p>Depending on your needs, you might want to install some additional libraries:</p> <ul> <li>@reduxjs/toolkit-query: If you're planning to use RTK Query for data fetching and caching.</li> </ul> <pre><code>npm install @reduxjs/toolkit\n</code></pre> <ul> <li>TypeScript (if you're using TypeScript in your project):</li> </ul> <pre><code>npm install typescript @types/react @types/react-dom\n</code></pre> <ul> <li>Axios or other HTTP clients (if you're using them to make API requests):</li> </ul> <pre><code>npm install axios\n</code></pre>"},{"location":"migration/roadmap/license-doc/#example-of-installing-all-core-packages","title":"Example of Installing All Core Packages","text":"<pre><code>npm install react react-dom @reduxjs/toolkit react-redux redux-devtools-extension\n</code></pre>"},{"location":"migration/roadmap/license-doc/#should-we-use-rtk-query","title":"Should we use rtk query","text":"<p>No, you don't need to use RTK Query to use Redux Toolkit, but it's highly recommended if you're working with data fetching or server-side communication.</p> Here's a breakdown:When to use each:Example comparison:Conclusion: <p>1. Redux Toolkit:</p> <ul> <li>At its core, Redux Toolkit (RTK) is a set of utilities to make Redux easier to use. It provides utilities like <code>configureStore</code>, <code>createSlice</code>, and <code>createAsyncThunk</code> to simplify Redux setup and management.</li> <li>With just Redux Toolkit, you can manually manage state, actions, and reducers. You can fetch data using <code>createAsyncThunk</code>, but you\u2019d need to write some boilerplate code for managing loading, success, and error states.</li> </ul> <p>2. RTK Query:</p> <ul> <li>RTK Query is a data fetching and caching tool built specifically into Redux Toolkit. It abstracts much of the complexity involved in fetching data, caching it, and managing server states (like loading, error, etc.).</li> <li> <p>It integrates seamlessly with Redux, and helps reduce the amount of manual code you'd need to write for API requests. It handles things like:</p> <ul> <li>Caching responses.</li> <li>Automatically refetching data.</li> <li>Normalizing the data.</li> <li>Managing loading and error states.</li> </ul> </li> </ul> <p>Use Redux Toolkit alone (with <code>createSlice</code>, <code>createAsyncThunk</code>, etc.) if:</p> <ul> <li>You want more control over your state management and don\u2019t need complex API handling.</li> <li>You\u2019re managing more custom state transitions or complex application logic.</li> </ul> <p>Use RTK Query if:</p> <ul> <li>Your app involves frequent or complex interactions with a backend API.</li> <li>You want automatic caching, refetching, and state management for API requests out of the box.</li> <li>You want to simplify the process of handling loading, success, and error states related to network requests.</li> </ul> <ul> <li> <p>Without RTK Query (using <code>createAsyncThunk</code> and <code>createSlice</code>):</p> <pre><code>// src/slices/userSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchUser = createAsyncThunk('user/fetchUser', async (userId) =&gt; {\n    const response = await fetch(`/api/users/${userId}`);\n    return response.json();\n});\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState: { user: null, status: 'idle', error: null },\n    reducers: {},\n    extraReducers: (builder) =&gt; {\n        builder\n        .addCase(fetchUser.pending, (state) =&gt; {\n            state.status = 'loading';\n        })\n        .addCase(fetchUser.fulfilled, (state, action) =&gt; {\n            state.status = 'succeeded';\n            state.user = action.payload;\n        })\n        .addCase(fetchUser.rejected, (state, action) =&gt; {\n            state.status = 'failed';\n            state.error = action.error.message;\n        });\n    },\n});\n\nexport default userSlice.reducer;\n</code></pre> </li> <li> <p>With RTK Query:</p> <pre><code>// src/services/userApi.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const userApi = createApi({\n    reducerPath: 'userApi',\n    baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n    endpoints: (builder) =&gt; ({\n        getUser: builder.query({\n            query: (userId) =&gt; `users/${userId}`,\n        }),\n    }),\n});\n\nexport const { useGetUserQuery } = userApi;\n\n// In the store\nimport { configureStore } from '@reduxjs/toolkit';\nimport { userApi } from './services/userApi';\n\nconst store = configureStore({\n    reducer: {\n        [userApi.reducerPath]: userApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) =&gt;\n        getDefaultMiddleware().concat(userApi.middleware),\n});\n</code></pre> </li> </ul> <p>With RTK Query, you get a <code>useGetUserQuery</code> hook that automatically handles loading, success, and error states for you.</p> <ul> <li>RTK Query is an optional but powerful feature in Redux Toolkit, making data fetching much easier, especially for APIs.</li> <li>If you're building an app with complex API interactions or want to save time on managing server-side data in Redux, RTK Query is a great tool to use.</li> </ul> <ul> <li>Redux Query Official</li> <li>RTK Query For Beginners</li> </ul>"},{"location":"migration/roadmap/signalr-transport/","title":"Signalr-transport","text":""},{"location":"migration/roadmap/signalr-transport/#signalr-transport","title":"SignalR Transport","text":"<p>When connecting to a SignalR hub from a React application, SignalR can use various transport types, depending on what the client and server support and the network conditions. The transport type is responsible for how data is sent between the client (React app) and the SignalR server.</p> <p>SignalR supports several transport types:</p> <ol> <li> <p>WebSockets:</p> <ul> <li>This is the most preferred and efficient transport method for SignalR. WebSockets allow full-duplex communication between the client and the server over a single, persistent connection.</li> <li>It is supported in most modern browsers and provides low-latency, real-time communication.</li> </ul> </li> <li> <p>Server-Sent Events (SSE):</p> <ul> <li>If WebSockets are not available (for example, due to network restrictions or older browser support), SignalR can fall back to using Server-Sent Events.</li> <li>SSE is a one-way communication channel from the server to the client, where the server sends updates to the client.</li> </ul> </li> <li> <p>Long Polling:</p> <ul> <li>As a last resort, if neither WebSockets nor SSE is available, SignalR can use long polling.</li> <li>In long polling, the client sends an HTTP request to the server, and the server holds the request open until there is new data to send back. - Once the response is sent, the client immediately sends another request to keep the connection alive</li> </ul> </li> </ol>"},{"location":"migration/roadmap/signalr-transport/#in-a-react-app","title":"In a React app:","text":"<p>When you use SignalR in a React app, you typically use the SignalR JavaScript client library. By default, it automatically selects the best transport method, but you can also configure it manually if you want to specify a particular transport.</p> <p>Example of configuring transport manually in React:</p> <pre><code>import { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\n\nconst connection = new HubConnectionBuilder()\n  .withUrl(\"/your-hub-endpoint\", {\n    transport: signalR.HttpTransportType.WebSockets, // Manually setting transport type\n  })\n  .configureLogging(LogLevel.Information)\n  .build();\n\nconnection.start().catch((err) =&gt; console.error(err));\n</code></pre> <p>This code ensures that SignalR uses WebSockets specifically, but if WebSockets are unavailable, it will fallback to another transport automatically.</p> <p>transport: signalR.HttpTransportType.WebSockets do we need this or not</p> <p>No, you do not necessarily need to specify the transport type manually in most cases when using SignalR in your React app.</p> <p>By default, SignalR will automatically select the best available transport method (WebSockets, Server-Sent Events, or Long Polling) based on what the client and server support. So, if you're okay with SignalR choosing the transport for you, you don't need to specify it.</p> <p>However, if you want to force a specific transport (like WebSockets), you can explicitly set it, as shown in the example. For example:</p> <pre><code>import { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\n\nconst connection = new HubConnectionBuilder()\n  .withUrl(\"/your-hub-endpoint\", {\n    transport: signalR.HttpTransportType.WebSockets, // force WebSockets transport\n  })\n  .configureLogging(LogLevel.Information)\n  .build();\n\nconnection.start().catch((err) =&gt; console.error(err));\n</code></pre> To Summarize <ul> <li>No, you don't need to specify the transport type if you're okay with the default behavior.</li> <li>Yes, you can specify the transport type (e.g., WebSockets) if you have specific requirements or want to enforce a particular transport.</li> </ul> <p>In general, for modern browsers and environments, WebSockets should be the default and preferred transport method, so unless you have a specific reason to control this, you can leave it out and let SignalR handle the transport selection automaticall</p>"},{"location":"migration/roadmap/signalr-transport/#standard-polling-time-or-interval","title":"Standard Polling Time <code>or</code> Interval","text":"<p>The standard polling time (or interval) depends on the use case, the nature of the data being fetched, and how critical it is to have real-time updates. There's no one-size-fits-all value, but here are some general guidelines for choosing a polling interval:</p>"},{"location":"migration/roadmap/signalr-transport/#common-polling-intervals","title":"Common Polling Intervals:","text":"<ol> <li> <p>Short Polling Interval (1\u201310 seconds):</p> <ul> <li>Use case: Real-time applications, such as live updates, chat apps, live scores, or price monitoring.</li> <li>Example: Stock prices, sports scores, chat messages.</li> <li>Recommended interval: 1\u201310 seconds.</li> <li>Consideration: More frequent polling can lead to higher server load and increased bandwidth usage, so it may not be suitable for high-traffic apps unless necessary.</li> </ul> </li> <li> <p>Medium Polling Interval (30 seconds \u2013 1 minute):</p> <ul> <li>Use case: Applications that don't need near-instant updates but still require periodic refreshes, such as news updates, social media feeds, or email inbox syncing.</li> <li>Example: Checking for new emails, syncing social media posts.</li> <li>Recommended interval: 30 seconds to 1 minute.</li> <li>Consideration: Reduces the server load compared to short intervals but still offers relatively timely updates.</li> </ul> </li> <li> <p>Long Polling Interval (5 minutes \u2013 30 minutes):</p> <ul> <li>Use case: Applications where updates are less frequent or not critical to be real-time, such as dashboard metrics, data syncs, or system health checks.</li> <li>Example: Reporting dashboards, monitoring systems, syncing non-critical data.</li> <li>Recommended interval: 5 minutes to 30 minutes.</li> <li>Consideration: Great for reducing server load, but you may not get instant updates if the data changes frequently.</li> </ul> </li> <li> <p>Very Long Polling Interval (1 hour or more):</p> <ul> <li>Use case: Background tasks or batch processing where real-time updates are unnecessary, such as syncing large datasets or periodic reports.</li> <li>Example: Syncing a large data store or nightly batch processes.</li> <li>Recommended interval: 1 hour or more.</li> <li>Consideration: Rarely needed for most applications, unless dealing with very infrequent updates or long-running processes.</li> </ul> </li> </ol>"},{"location":"migration/roadmap/signalr-transport/#key-factors-to-consider","title":"Key Factors to Consider:","text":"<ul> <li>Data Freshness: If you need real-time or near-real-time data, choose a shorter interval. For less time-sensitive data, longer intervals might suffice.</li> <li>Server Load: More frequent polling can put a strain on the server. For high-traffic applications, balance the need for freshness with server performance.</li> <li>Network Traffic: Frequent polling increases network traffic. Make sure your system can handle the increased load without issues.</li> <li>User Experience: Polling intervals should be chosen based on the expected user experience. Too frequent polling can lead to delays or slowdowns; too infrequent polling can lead to stale data.</li> </ul>"},{"location":"migration/roadmap/signalr-transport/#example-use-cases-with-suggested-polling-intervals","title":"Example Use Cases with Suggested Polling Intervals:","text":"<ul> <li>Real-time notifications (e.g., chat): 1\u201310 seconds.</li> <li>Live sports scores: 5\u201310 seconds.</li> <li>Stock price updates: 5\u201310 seconds.</li> <li>Weather updates: 30 minutes to 1 hour.</li> <li>News feeds: 30 seconds to 5 minutes.</li> <li>Health/metrics dashboards: 1\u20135 minutes.</li> <li>Email inbox sync: 5 minutes or more.</li> </ul>"},{"location":"migration/roadmap/signalr-transport/#final-advice","title":"Final Advice:","text":"<p>For most applications, starting with 30 seconds to 1 minute is a good middle ground. You can adjust the interval based on server capacity, network traffic, and the desired freshness of the data. If you're dealing with large volumes of traffic or users, it's worth considering server-side push mechanisms (such as WebSockets or Server-Sent Events) instead of polling to reduce unnecessary load.</p>"},{"location":"migration/roadmap/video/","title":"Video","text":""},{"location":"migration/roadmap/video/#video","title":"Video","text":"<p>  ![type:video][https://www.youtube.com/embed/cESaIUWoCJQ?si=AVNwSmCw1Jts2IW3]  </p>"},{"location":"migration/roadmap/video/#mongodb","title":"MongoDB","text":""},{"location":"migration/roadmap/video/#implicitly","title":"Implicitly","text":"<pre><code>docker run -d -p 27017:27017 --name mongodb mongo\n</code></pre> <p>\"Run a container in detached mode (<code>-d</code>), map port <code>27017</code> on the host to port <code>27017</code> in the container (<code>-p 27017:27017</code>), name the container mongodb (<code>--name mongodb</code>), using the official <code>mongo</code> image.\"</p>"},{"location":"migration/roadmap/video/#how-to-set-admin-username-password-and-database-name-explicitly","title":"How to set admin <code>username</code>, <code>password</code>, and <code>database</code> name explicitly","text":"<pre><code>docker run -d -p 27017:27017 --name mongodb \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=yourpassword \\\n  -e MONGO_INITDB_DATABASE=yourdbname \\\n  mongo\n</code></pre> <ul> <li><code>MONGO_INITDB_ROOT_USERNAME</code> sets the admin username.</li> <li><code>MONGO_INITDB_ROOT_PASSWORD</code> sets the admin password.</li> <li><code>MONGO_INITDB_DATABASE</code> sets the initial database name (note: this only creates the database if you insert data into it; it does not create it empty)</li> </ul>"},{"location":"migration/roadmap/video/#to-check-inside-the-container","title":"To check inside the container:","text":"<pre><code>docker exec -it mongodb mongosh\n</code></pre> <ul> <li><code>mongodb</code> is the name of your Docker container running the MongoDB server.</li> <li><code>mongosh</code> is the MongoDB Shell, an interactive JavaScript and Node.js-based command-line interface (CLI) used to connect to and interact with MongoDB databases.</li> </ul> Command What it does <code>docker exec -it mongodb mongosh</code> Runs <code>mongosh</code> directly inside the container; opens MongoDB shell immediately <code>docker exec -it mongodb</code> Invalid; missing command to run inside container <code>docker exec -it mongodb bash</code> Opens an interactive bash shell inside container; then you can run <code>mongosh</code> manually <p>Then you can run:</p> <pre><code>show dbs\n\n# Switch to the test database:\nuse test\n\n# 3. Insert a document into a collection:\ndb.createCollection(\"mycollection\")\n\n# 4. Now run:\nshow collections\n</code></pre> <p>This lets you create and verify databases and collections interactively.</p> <p>In short, your current MongoDB Docker container has no admin user or password and uses the default database <code>test</code> until you create others. To have admin credentials and a specific database, restart the container with the proper environment variables.</p> Note <p>The reason you don\u2019t see the <code>test</code> database listed when you run <code>show dbs</code> is because <code>MongoDB</code> only shows databases that contain data. The default <code>test</code> database is created implicitly but only appears in the list after you insert some data into it.</p>"},{"location":"migration/roadmap/video/#summary","title":"Summary:","text":"Database Name Visible in <code>show dbs</code>? When does it appear? admin Yes Always (system database) config Yes Always (system database) local Yes Always (system database) test No (initially) After inserting data into the <code>test</code> db <p>Additional notes:</p> <p>If you want to create a specific database on container startup, you can use the environment variable <code>MONGO_INITDB_DATABASE</code> when running the container. However, this only creates the database if you insert data into it during initialization (for example, via scripts in <code>/docker-entrypoint-initdb.d/</code>).</p>"},{"location":"migration/roadmap/video/#typical-env-file-example","title":"Typical <code>.env</code> file example:","text":"<pre><code># For MongoDB container initialization\nMONGO_INITDB_ROOT_USERNAME=admin\nMONGO_INITDB_ROOT_PASSWORD=secretpassword\nMONGO_INITDB_DATABASE=mydatabase\n\n# For your app to connect to MongoDB\nMONGO_URI=mongodb://admin:secretpassword@localhost:27017/mydatabase\n</code></pre> <ul> <li>The first three variables are used by the MongoDB container on startup.</li> <li>The <code>MONGO_URI</code> is used by your application to connect to the database.</li> </ul> Why define both? <ul> <li>Container setup and initialization require the root username, password, and initial database name.</li> <li>Your application needs the connection URI to connect and operate on the database.</li> <li>Keeping them in <code>.env</code> files allows you to manage credentials and configuration securely and flexibly.</li> </ul> <p>Summary</p> Variable Purpose Where used <code>MONGO_INITDB_DATABASE</code> Initial database name for MongoDB container setup MongoDB Docker container <code>MONGO_INITDB_ROOT_USERNAME</code> Root username for MongoDB container MongoDB Docker container <code>MONGO_INITDB_ROOT_PASSWORD</code> Root password for MongoDB container MongoDB Docker container <code>MONGO_URI</code> Full connection string for your app to connect Your application (Node.js, etc.) <p>In conclusion:</p> <p>You should define both the database name (for container initialization) and the connection URI (for your app) in your <code>.env</code> files to properly configure MongoDB in Docker and allow your application to connect securely and correctly.</p> <p>Summary Table</p> Scenario Connection URI Hostname Explanation App running on host machine <code>localhost</code> Connects to MongoDB container port exposed on host App running inside Docker container <code>mongodb</code> Connects via Docker internal network DNS reportUpload.jsx<pre><code>import React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  Divider,\n  Flex,\n  Drawer,\n  Form,\n  Input,\n  DatePicker,\n  Upload,\n  Card,\n  Progress,\n  Popconfirm,\n} from \"antd\";\nimport {\n  PauseOutlined,\n  PlayCircleOutlined,\n  StopOutlined,\n  UploadOutlined,\n  ReloadOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\nimport { isEmpty } from \"lodash\";\nimport CustomButton from \"@shared/components/Button/CustomButton\";\nimport withDrawer from \"@shared/hooks/withDrawer\";\nimport useDrawerReducer from \"@shared/hooks/useDrawerReducer\";\nimport {\n  useUploadTreasuryReportsMutation,\n  useStartUploadTreasuryReportMutation,\n  usePauseTreauryReportUploadMutation,\n  useResumeTreasuryReportUploadMutation,\n  useRestartTreasuryReportUploadMutation,\n  useCancelTreasuryReportUploadMutation,\n  useGetTreasuryReportStatusQuery,\n} from \"@features/reporting/services/glTrialBalanceTodApi\";\nimport logger from \"@shared/utils/logger\";\nimport dayjs from \"dayjs\";\n\nconst { Search } = Input;\n\nconst ReportUpload = () =&gt; {\n  const currentPermission = useSelector((state) =&gt; state.auth.permissions);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  const [buttonState, setButtonState] = useState({\n    start: false,\n    pause: false,\n    resume: false,\n    restart: false,\n    cancel: false,\n    error: \"\",\n  });\n  const [progress, setProgress] = useState(0);\n  const [fileInfo, setFileInfo] = useState(null);\n\n  const { drawerVisible, drawerMode, onAdd, onClose } = useDrawerReducer();\n  const [importform] = Form.useForm();\n\n  const [\n    uploadTreasuryReports,\n    { data: uploadReportData, isLoading: isLoadingUploadReport },\n  ] = useUploadTreasuryReportsMutation();\n\n  const [startUploadTreasuryReport, { isLoading: isLoadingStartUpload }] =\n    useStartUploadTreasuryReportMutation();\n\n  const [pauseTreauryReportUpload, { isLoading: isLoadingPauseUpload }] =\n    usePauseTreauryReportUploadMutation();\n\n  const [resumeTreasuryReportUpload, { isLoading: isLoadingResumeUpload }] =\n    useResumeTreasuryReportUploadMutation();\n\n  const [restartTreasuryReportUpload, { isLoading: isLoadingRestartUpload }] =\n    useRestartTreasuryReportUploadMutation();\n\n  const [cancelTreasuryReportUpload, { isLoading: isLoadingCancelUpload }] =\n    useCancelTreasuryReportUploadMutation();\n\n  console.log(buttonState);\n  const {\n    data: reportStatusData,\n    isFetching: isFetchingStatus,\n    isError: isErrorReportStatusData,\n    error: errorReportStatusData,\n  } = useGetTreasuryReportStatusQuery(\n    { processId: uploadReportData?.processId },\n    {\n      skip: !uploadReportData?.processId || !buttonState.pause,\n      pollingInterval: buttonState.pause ? 5000 : 0,\n    }\n  );\n\n  const updateButtonState = (state) =&gt; {\n    setButtonState({\n      start: false,\n      pause: false,\n      resume: false,\n      restart: false,\n      cancel: false,\n      error: state?.errorMessage,\n      ...state,\n    });\n  };\n\n  const handleImportSubmit = async (values) =&gt; {\n    setIsLoadingButton(true);\n    setProgress(0);\n    setFileInfo(null);\n    try {\n      if (values.dragger &amp;&amp; values.dragger.length &gt; 0) {\n        const file = values.dragger[0].originFileObj;\n        const fileFormData = new FormData();\n        fileFormData.append(\"file\", file);\n\n        const response = await uploadTreasuryReports({\n          file: fileFormData,\n          reportDate: dayjs(values.reportDate).format(\"MM-DD-YYYY\"),\n        }).unwrap();\n\n        setFileInfo({\n          name: file.name,\n          size: `${(file.size / 1024).toFixed(2)} KB`,\n        });\n\n        updateButtonState({ start: true });\n        importform.resetFields();\n        onClose();\n      }\n    } catch (error) {\n      logger.error({ msg: \"Upload Error: \", error });\n    } finally {\n      setIsLoadingButton(false);\n    }\n  };\n\n  const handleStart = async () =&gt; {\n    try {\n      await startUploadTreasuryReport({\n        body: {\n          taskType: uploadReportData?.message,\n          processorId: uploadReportData?.processId,\n          parameters: uploadReportData?.parameters,\n        },\n      }).unwrap();\n      updateButtonState({ pause: true, cancel: true });\n    } catch (error) {\n      logger.error({ msg: \"Start Upload Error: \", error });\n    }\n  };\n\n  const handlePause = async () =&gt; {\n    try {\n      await pauseTreauryReportUpload({\n        processId: uploadReportData?.processId,\n      }).unwrap();\n      updateButtonState({ resume: true, restart: true, cancel: true });\n    } catch (error) {\n      logger.error({ msg: \"Pause Upload Error: \", error });\n    }\n  };\n\n  const handleResume = async () =&gt; {\n    try {\n      await resumeTreasuryReportUpload({\n        processId: uploadReportData?.processId,\n      }).unwrap();\n      updateButtonState({ pause: true, cancel: true });\n    } catch (error) {\n      logger.error({ msg: \"Resume Upload Error: \", error });\n    }\n  };\n\n  const handleRestart = async () =&gt; {\n    try {\n      await restartTreasuryReportUpload({\n        processId: uploadReportData?.processId,\n      }).unwrap();\n      updateButtonState({ pause: true, cancel: true });\n      setProgress(0);\n    } catch (error) {\n      logger.error({ msg: \"Restart Upload Error: \", error });\n    }\n  };\n\n  const handleCancel = async () =&gt; {\n    try {\n      await cancelTreasuryReportUpload({\n        processId: uploadReportData?.processId,\n      }).unwrap();\n      updateButtonState({ start: true });\n      setProgress(0);\n      setFileInfo(null);\n    } catch (error) {\n      logger.error({ msg: \"Cancel Upload Error: \", error });\n    }\n  };\n\n  useEffect(() =&gt; {\n    if (reportStatusData) {\n      setProgress(reportStatusData.progressPercentage || 0);\n      updateButtonState({\n        pause: reportStatusData.canPause,\n        resume: reportStatusData.canResume,\n        restart: reportStatusData.canRestart,\n        cancel: reportStatusData.canCancel,\n      });\n      if (\n        reportStatusData.status === \"CleanedUp\" ||\n        reportStatusData.errorMessage\n      ) {\n        updateButtonState({ start: true });\n        if (reportStatusData.errorMessage) {\n          logger.error({\n            msg: `Upload failed: ${reportStatusData.errorMessage}`,\n          });\n        } else if (reportStatusData.progressPercentage === 100) {\n          logger.info({ msg: \"Upload completed successfully\" });\n        }\n      }\n    }\n  }, [reportStatusData]);\n\n  const onImportCloseClick = () =&gt; {\n    importform.resetFields();\n    onClose();\n  };\n\n  const normFile = (e) =&gt; e?.fileList;\n\n  const importCommonFields = (\n    &lt;&gt;\n      &lt;Form.Item\n        label=\"Report Date\"\n        name=\"reportDate\"\n        rules={[{ required: true, message: \"Please select a report date!\" }]}\n      &gt;\n        &lt;DatePicker\n          allowClear\n          style={{ width: \"100%\" }}\n          format=\"YYYY-MM-DD\"\n          placeholder=\"Select Report Date\"\n          disabledDate={(current) =&gt; current &amp;&amp; current &gt; dayjs().endOf(\"day\")}\n        /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item\n        label=\"Dragger\"\n        name=\"dragger\"\n        valuePropName=\"fileList\"\n        getValueFromEvent={normFile}\n        rules={[{ required: true, message: \"Please upload a file!\" }]}\n      &gt;\n        &lt;Upload.Dragger\n          accept=\".xls, .xlsx\"\n          name=\"files\"\n          maxCount={1}\n          beforeUpload={() =&gt; false}\n        &gt;\n          &lt;p className=\"ant-upload-drag-icon\"&gt;\n            &lt;InboxOutlined /&gt;\n          &lt;/p&gt;\n          &lt;p className=\"ant-upload-text\"&gt;\n            Click or drag file to this area to upload\n          &lt;/p&gt;\n          &lt;p className=\"ant-upload-hint\"&gt;Support for a single upload.&lt;/p&gt;\n        &lt;/Upload.Dragger&gt;\n      &lt;/Form.Item&gt;\n    &lt;/&gt;\n  );\n\n  return (\n    &lt;&gt;\n      &lt;Flex justify=\"space-between\"&gt;\n        &lt;Flex&gt;\n          &lt;DatePicker defaultValue={dayjs()} style={{ width: \"100%\" }} /&gt;\n          &lt;Search placeholder=\"Search\" allowClear style={{ width: \"100%\" }} /&gt;\n        &lt;/Flex&gt;\n        &lt;Flex gap={30}&gt;\n          &lt;CustomButton\n            type=\"primary\"\n            title=\"Create New Report\"\n            onClick={() =&gt; {\n              importform.resetFields();\n              onAdd();\n            }}\n            icon={&lt;UploadOutlined /&gt;}\n          /&gt;\n        &lt;/Flex&gt;\n      &lt;/Flex&gt;\n      &lt;Divider /&gt;\n\n      {fileInfo &amp;&amp; (\n        &lt;Card style={{ margin: 20, padding: 20 }}&gt;\n          &lt;div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n            }}\n          &gt;\n            &lt;div style={{ flex: 1 }}&gt;\n              &lt;p&gt;File: {fileInfo.name}&lt;/p&gt;\n              &lt;p&gt;File name: {fileInfo.name}&lt;/p&gt;\n              &lt;p&gt;File size: {fileInfo.size}&lt;/p&gt;\n            &lt;/div&gt;\n\n            &lt;div style={{ flex: 2, textAlign: \"right\" }}&gt;\n              {buttonState?.error &amp;&amp; (\n                &lt;div style={{ color: \"red\", marginBottom: 8 }}&gt;\n                  {buttonState.error}\n                &lt;/div&gt;\n              )}\n              {buttonState.start &amp;&amp; (\n                &lt;CustomButton\n                  type=\"primary\"\n                  title=\"Start\"\n                  onClick={handleStart}\n                  icon={&lt;UploadOutlined /&gt;}\n                  loading={isLoadingStartUpload}\n                /&gt;\n              )}\n              {buttonState.pause &amp;&amp; (\n                &lt;PauseOutlined\n                  onClick={handlePause}\n                  style={{ marginLeft: 10, cursor: \"pointer\" }}\n                /&gt;\n              )}\n              {buttonState.resume &amp;&amp; (\n                &lt;PlayCircleOutlined\n                  onClick={handleResume}\n                  style={{ marginLeft: 10, cursor: \"pointer\" }}\n                /&gt;\n              )}\n              {buttonState.restart &amp;&amp; (\n                &lt;Popconfirm\n                  title=\"Are you sure you want to Restart?\"\n                  onConfirm={handleRestart}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                &gt;\n                  &lt;ReloadOutlined\n                    style={{ marginLeft: 10, cursor: \"pointer\" }}\n                  /&gt;\n                &lt;/Popconfirm&gt;\n              )}\n              {buttonState.cancel &amp;&amp; (\n                &lt;Popconfirm\n                  title=\"Are you sure you want to cancel?\"\n                  onConfirm={handleCancel}\n                  okText=\"Yes\"\n                  cancelText=\"No\"\n                &gt;\n                  &lt;StopOutlined style={{ marginLeft: 10, cursor: \"pointer\" }} /&gt;\n                &lt;/Popconfirm&gt;\n              )}\n              &lt;Progress\n                percent={progress}\n                style={{ marginTop: 10 }}\n                status={\n                  reportStatusData?.errorMessage\n                    ? \"exception\"\n                    : reportStatusData?.progressPercentage === 100\n                    ? \"success\"\n                    : isFetchingStatus\n                    ? \"active\"\n                    : \"normal\"\n                }\n              /&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/Card&gt;\n      )}\n\n      &lt;EnhancedDrawer\n        drawerVisible={drawerVisible}\n        drawerMode={drawerMode}\n        onClose={onImportCloseClick}\n        isLoadingButton={isLoadingButton}\n        handleSubmit={handleImportSubmit}\n        form={importform}\n        commonFields={importCommonFields}\n      /&gt;\n    &lt;/&gt;\n  );\n};\n\nconst EnhancedDrawer = withDrawer(Drawer);\n\nexport default ReportUpload;\n</code></pre>"},{"location":"migration/sentry/concept-first/","title":"Concept First","text":""},{"location":"migration/sentry/concept-first/#concepts-first","title":"\ud83e\udde0 Concepts First","text":""},{"location":"migration/sentry/concept-first/#1-sentry-application-level-monitoring","title":"1. Sentry \u2013 Application-level Monitoring","text":"<ul> <li>Use it for: Catching runtime exceptions, frontend/backend errors, performance issues, user behavior, and stack traces.</li> <li> <p>Good for:</p> <pre><code>-   JavaScript errors in your React frontend (e.g., `TypeError`, broken API calls).\n-   Python exceptions in your FastAPI backend (e.g., `500 Internal Server Error`).\n-   Performance monitoring (e.g., slow API response, React render delays).\n</code></pre> </li> <li> <p>When: Use it in development and production to capture real-time errors and performance bottlenecks.</p> </li> </ul>"},{"location":"migration/sentry/concept-first/#2-prometheus-grafana-infrastructure-metrics-monitoring","title":"2. Prometheus + Grafana \u2013 Infrastructure &amp; Metrics Monitoring","text":"<ul> <li> <p>Use it for: Collecting system metrics (CPU, memory, request latency, DB stats), alerting, and dashboards.</p> </li> <li> <p>Good for:</p> <ul> <li>Monitoring your FastAPI app\u2019s resource usage.</li> <li>Watching uptime and latency of your services or containers (e.g., Docker, Kubernetes).</li> <li>Setting alerts on thresholds (e.g., CPU &gt; 80%).</li> </ul> </li> <li> <p>When: Use it in staging/production environments, especially if you're self-hosting or managing multiple services.</p> </li> </ul>"},{"location":"migration/sentry/concept-first/#how-to-use-them","title":"\u2705 How to Use Them","text":""},{"location":"migration/sentry/concept-first/#react-sentry","title":"\u269b\ufe0f React + Sentry","text":"<ol> <li> <p>Install:</p> <pre><code>npm install @sentry/react @sentry/tracing\n</code></pre> </li> <li> <p>Initialize Sentry (typically in <code>index.js</code> or <code>App.tsx</code>):</p> <pre><code>import * as Sentry from \"@sentry/react\";\n\nSentry.init({\n    dsn: \"https://your_sentry_dsn\",\n    integrations: [new Sentry.BrowserTracing()],\n    tracesSampleRate: 1.0,\n});\n</code></pre> </li> <li> <p>Catch Errors:</p> <pre><code>Sentry.captureException(new Error(\"Something went wrong\"));\n</code></pre> </li> <li> <p>Use Error Boundaries:</p> <pre><code>const MyApp = () =&gt; (\n    &lt;Sentry.ErrorBoundary fallback={&lt;p&gt;Something went wrong&lt;/p&gt;}&gt;\n        &lt;App /&gt;\n    &lt;/Sentry.ErrorBoundary&gt;\n);\n</code></pre> </li> </ol>"},{"location":"migration/sentry/concept-first/#fastapi-sentry","title":"\ud83d\udc0d FastAPI + Sentry","text":"<ol> <li> <p>Install:</p> <pre><code>pip install sentry-sdk\n</code></pre> </li> <li> <p>Initialize::</p> <pre><code>import sentry_sdk\nfrom fastapi import FastAPI\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\n\nsentry_sdk.init(\n    dsn=\"https://your_sentry_dsn\",\n    traces_sample_rate=1.0,\n)\n\napp = FastAPI()\napp.add_middleware(SentryAsgiMiddleware)\n</code></pre> </li> <li> <p>Capture exceptions manually if needed::</p> <pre><code>try:\n    something()\nexcept Exception as e:\n    sentry_sdk.capture_exception(e)\n</code></pre> </li> </ol>"},{"location":"migration/sentry/concept-first/#fastapi-prometheus-grafana","title":"\ud83d\udee0\ufe0f FastAPI + Prometheus + Grafana","text":"<ol> <li> <p>Install Prometheus client:</p> <pre><code>pip install prometheus-fastapi-instrumentator\n</code></pre> </li> <li> <p>Instrument FastAPI:</p> <pre><code>from prometheus_fastapi_instrumentator import Instrumentator\n\ninstrumentator = Instrumentator().instrument(app).expose(app)\n</code></pre> </li> <li> <p>Run Prometheus (Docker example):</p> <pre><code># prometheus.yml\nscrape_configs:\n- job_name: 'fastapi'\n    static_configs:\n    - targets: ['host.docker.internal:8000']\n</code></pre> </li> <li> <p>Use Grafana::</p> <ul> <li>Connect Grafana to Prometheus (as a data source).</li> <li>Create dashboards (CPU usage, request duration, memory, etc).</li> <li>Use alerts.</li> </ul> </li> </ol>"},{"location":"migration/sentry/concept-first/#summary-when-to-use-what","title":"\ud83d\udd01 Summary: When to Use What","text":"Tool Use Case Environment Example Sentry Runtime errors, stack traces, slow requests, user issues Dev + Prod Track why 500 errors are happening in FastAPI Prometheus System metrics, request latency, uptime Staging + Prod Alert when FastAPI response time &gt; 1s Grafana Visualization of Prometheus metrics Staging + Prod Dashboard of API performance, DB usage"},{"location":"migration/sentry/concept-first/#pro-tips","title":"\ud83d\ude80 Pro Tips","text":"<ul> <li>==Use Sentry ==to find why something broke.</li> <li>Use Prometheus + Grafana to see when/where your system is stressed.</li> <li>If you deploy with Docker/Kubernetes, both tools have strong support for those environments.</li> </ul>"},{"location":"migration/sentry/concept-first/#question","title":"Question","text":"<p>so for application level i used only sentry for react an fast api as a developer,</p> <p>Exactly \u2014 as a React + FastAPI developer, using Sentry alone for application-level monitoring is totally sufficient and actually recommended.</p> <p>Here\u2019s a clear separation for you:</p>"},{"location":"migration/sentry/concept-first/#what-you-should-use-as-a-developer","title":"\u2705 What You Should Use as a Developer","text":""},{"location":"migration/sentry/concept-first/#sentry-app-level","title":"Sentry (App-level)","text":"<p>You only need Sentry to:</p> <ul> <li>Track JavaScript errors in React</li> <li>Catch backend exceptions in FastAPI</li> <li>Monitor performance (slow endpoints, long renders)</li> <li>Get real-time error alerts with stack traces</li> <li>Optionally tag errors with user info, environment, etc.</li> </ul> <p>That\u2019s it \u2014 and it works across both frontend and backend with minimal setup.</p>"},{"location":"migration/sentry/concept-first/#what-you-dont-need-unless-youre-doing-devops","title":"\ud83d\udee0\ufe0f What You Don't Need (unless you're doing DevOps):","text":"<p>Prometheus + Grafana: These are more for infrastructure, not app-level bugs. You only need them if:</p> <ul> <li>You're deploying apps on cloud or self-hosted servers</li> <li>You care about system metrics like CPU, memory, uptime</li> <li>You're doing DevOps/SRE, or need to debug slow services outside your app code</li> </ul>"},{"location":"migration/sentry/concept-first/#in-short","title":"\ud83d\udca1 In short:","text":"Tool Needed for You (Dev)? Purpose Sentry \u2705 Yes Debug frontend/backend errors Prometheus \u274c Not usually Infra metrics (CPU, memory) Grafana \u274c Not usually Visualize Prometheus metrics <p>If you\u2019re working in a team, the DevOps/SRE folks usually take care of Prometheus/Grafana setup, and you focus on the code + app errors via Sentry.</p> <p>Would you like a basic template for setting up Sentry in both React and FastAPI quickly?</p>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/","title":"Difference bet Sentry and Promethus","text":""},{"location":"migration/sentry/difference-between-sentry-and-promethus/#overview","title":"Overview","text":"<p>You're not alone \u2014 this is a common question for full-stack developers. Here's a clear breakdown to help you decide when to use Sentry and when to use Prometheus + Grafana, especially as a React + FastAPI developer.</p>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#key-concept-different-tools-for-different-observability-types","title":"\ud83e\udded Key Concept: Different Tools for Different Observability Types","text":"Goal Use Sentry Use Prometheus + Grafana Catch errors (exceptions) \u2705 Yes \u274c No (not built for errors) Track frontend crashes \u2705 Yes (React) \u274c No Track API exceptions \u2705 Yes (FastAPI) \u274c No Measure performance (latency) \u2705 Yes (with tracing) \u2705 Yes (with metrics) See user-level traces \u2705 Yes (frontend \u2194 backend) \u274c No (not per-user) Monitor CPU, RAM, container health \u274c No \u2705 Yes Alert on system load spikes \u274c No \u2705 Yes Create custom metric dashboards \u274c Limited \u2705 Yes See real-time logs/metrics \u274c Logs only (some tracing) \u2705 Yes (metrics with alerts)"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#when-to-use-sentry-react-fastapi","title":"\ud83d\udd27 When to Use Sentry (React + FastAPI)","text":"<p>Use Sentry if you want to:</p> <ul> <li>See frontend crashes and JavaScript errors</li> <li>Track API 500 errors or unhandled Python exceptions</li> <li>View performance of specific endpoints or user actions</li> <li>Link frontend events to backend traces</li> <li>Debug real user issues with full context (stack trace, breadcrumbs)</li> </ul> <p>\ud83d\udfe2 Best for application-level debugging and tracing \ud83d\udfe2 Especially useful in development, staging, and production to catch bugs early</p>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#when-to-use-prometheus-grafana","title":"When to Use Prometheus + Grafana","text":"<p>Use Prometheus + Grafana if you want to:</p> <ul> <li>Monitor system health (CPU, RAM, disk, FastAPI uptime, Docker stats)</li> <li>Set up dashboards showing request rates, response times, traffic trends</li> <li>Track custom business metrics (e.g., number of signups, logins)</li> <li>Get alerts when your server is under pressure</li> <li>Monitor infrastructure (databases, Kubernetes, load balancers)</li> </ul> <p>\ud83d\udfe2 Best for infrastructure and operations monitoring \ud83d\udfe2 Useful in production environments to maintain uptime and reliability</p>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#combine-both-for-full-observability","title":"\ud83e\udde9 Combine Both for Full Observability","text":"<p>To cover everything you care about as a full-stack dev:</p> Layer Tool Frontend (React) \u2705 Sentry Backend errors (FastAPI) \u2705 Sentry Backend performance \u2705 Sentry or Prometheus Infrastructure metrics \u2705 Prometheus + Grafana Alerts (CPU, latency) \u2705 Prometheus + Grafana <p>This setup gives you:</p> <ul> <li>Sentry \u2192 Fast feedback loop for debugging</li> <li>Prometheus + Grafana \u2192 Reliability and production-grade monitoring</li> </ul>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#example-use-case","title":"\ud83d\udd27 Example Use Case","text":"<p>You deploy your FastAPI + React app in Docker:</p> <ol> <li> <p>A user reports the app is slow.</p> </li> <li> <p>You check Sentry:</p> <ul> <li>See long React render time</li> <li>Find the matching API call took 3.2s</li> <li>Trace leads to slow database query</li> </ul> </li> <li> <p>You check Grafana:</p> <ul> <li>See CPU was 95% at the same time</li> <li>DB container had spikes in memory</li> </ul> </li> </ol> <p>\u2705 With both tools, you see the root cause end to end.</p>"},{"location":"migration/sentry/difference-between-sentry-and-promethus/#final-recommendation-for-you","title":"\u2705 Final Recommendation (for you)","text":"<p>As a React + FastAPI developer:</p> <ul> <li>\u2705 Use Sentry to catch app bugs and understand performance</li> <li>\u2705 Use Prometheus + Grafana if you're also managing the app's servers, containers, or infra</li> </ul> <p>Would you like:</p> <ul> <li>A guide to set up Sentry and Prometheus in Docker together?</li> <li>Or just help starting with Sentry for full-stack tracing?</li> </ul> <p>Let me know your priority and I\u2019ll tailor it.</p>"},{"location":"migration/sentry/guide/best-practices/","title":"Best Practices","text":""},{"location":"migration/sentry/guide/best-practices/#best-practices-for-observability-in-fullstack-apps","title":"Best Practices for Observability in Fullstack Apps","text":"<p>To build reliable and maintainable applications, it's essential to follow observability best practices. This guide shares tips for using Sentry, Prometheus, and Grafana effectively in a React + FastAPI project.</p>"},{"location":"migration/sentry/guide/best-practices/#general-principles","title":"\ud83e\udde0 General Principles","text":"<ul> <li>Don\u2019t wait for users to report problems. Your observability stack should catch issues before users feel the pain.</li> <li>Measure what matters. Prioritize user-facing errors, performance bottlenecks, and system-level resource usage.</li> <li>Avoid alert fatigue. Only alert on what truly requires action.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#best-practices-for-react-frontend","title":"\u269b\ufe0f Best Practices for React (Frontend)","text":""},{"location":"migration/sentry/guide/best-practices/#use-sentryreact-and-errorboundary","title":"\u2705 Use <code>@sentry/react</code> and <code>ErrorBoundary</code>","text":"<ul> <li>Automatically catch component rendering errors.</li> <li>Provide a fallback UI to avoid crashing the whole app.</li> </ul> <pre><code>import { ErrorBoundary } from \"@sentry/react\";\n\n&lt;ErrorBoundary fallback={&lt;p&gt;Something went wrong.&lt;/p&gt;}&gt;\n  &lt;App /&gt;\n&lt;/ErrorBoundary&gt;\n</code></pre>"},{"location":"migration/sentry/guide/best-practices/#capture-manual-exceptions","title":"\u2705 Capture manual exceptions","text":"<ul> <li>Use <code>Sentry.captureException()</code> in <code>try/catch</code> blocks for API or logic errors.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#trace-frontend-backend-requests","title":"\u2705 Trace frontend \u2192 backend requests","text":"<ul> <li>Forward <code>sentry-trace</code>and <code>baggage</code> headers when calling APIs.</li> <li>Helps link user interaction to backend latency.</li> </ul> <pre><code>fetch(\"/api/data\", {\n  headers: {\n    \"sentry-trace\": Sentry.getCurrentHub().getScope()?.getTransaction()?.toTraceparent() || '',\n    \"baggage\": Sentry.getCurrentHub().getScope()?.getTransaction()?.toBaggage() || '',\n  },\n});\n</code></pre>"},{"location":"migration/sentry/guide/best-practices/#monitor-web-vitals","title":"\u2705 Monitor Web Vitals","text":"<ul> <li>Capture metrics like LCP, FID, CLS using Sentry\u2019s Performance API.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#best-practices-for-fastapi-backend","title":"\ud83d\ude80 Best Practices for FastAPI (Backend)","text":""},{"location":"migration/sentry/guide/best-practices/#use-sentry_sdk-with-asgi-integration","title":"\u2705 Use <code>sentry_sdk</code> with <code>ASGI</code> integration","text":"<ul> <li>Automatically capture uncaught exceptions and context.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#log-handled-errors-manually","title":"\u2705 Log handled errors manually","text":"<ul> <li> <p>If you catch an error, use <code>capture_exception()</code> to still report it.</p> <pre><code>from sentry_sdk import capture_exception\n\ntry:\n    risky_operation()\nexcept Exception as e:\n    capture_exception(e)\n</code></pre> </li> </ul>"},{"location":"migration/sentry/guide/best-practices/#use-performance-tracing","title":"\u2705 Use performance tracing","text":"<ul> <li> <p>Set <code>traces_sample_rate = 1.0</code>for dev/staging, but lower it in production (e.g., <code>0.2</code>).</p> </li> <li> <p>Trace latency and slow DB calls.</p> </li> </ul>"},{"location":"migration/sentry/guide/best-practices/#group-related-requests","title":"\u2705 Group related requests","text":"<ul> <li>Use transactions and spans to group backend logic into traceable blocks.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#best-practices-for-prometheus-grafana","title":"\ud83d\udcca Best Practices for Prometheus + Grafana","text":""},{"location":"migration/sentry/guide/best-practices/#monitor-resource-usage","title":"\u2705 Monitor resource usage","text":"<ul> <li>Track FastAPI container CPU, memory, and uptime with Prometheus exporters (e.g., <code>node_exporter</code>, <code>cadvisor</code>).</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#set-alerts-wisely","title":"\u2705 Set alerts wisely","text":"<ul> <li> <p>Alert on things that can be acted on (e.g., memory &gt; 90%, API latency &gt; 2s).</p> </li> <li> <p>Avoid alerts for temporary spikes.</p> </li> </ul>"},{"location":"migration/sentry/guide/best-practices/#use-labelstags","title":"\u2705 Use labels/tags","text":"<ul> <li>Use <code>job</code>, <code>instance</code>, <code>env</code>, and <code>app</code> labels to slice metrics effectively in Grafana.</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#keep-dashboards-focused","title":"\u2705 Keep dashboards focused","text":"<ul> <li>Create role-based dashboards: dev (errors + traces), ops (infra health), product (business metrics).</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#integration-best-practices","title":"\ud83d\udd01 Integration Best Practices","text":""},{"location":"migration/sentry/guide/best-practices/#use-both-sentry-and-prometheus","title":"\u2705 Use both Sentry and Prometheus","text":"<ul> <li>Sentry shows what broke and why (errors, stack traces, performance)</li> <li>Prometheus/Grafana show system health and trends</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#use-distributed-tracing","title":"\u2705 Use distributed tracing","text":"<ul> <li>Link React \u2192 FastAPI with trace headers</li> <li>Use OpenTelemetry (optional) if you want vendor-neutral tracing</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#security-privacy-tips","title":"\ud83d\udd10 Security &amp; Privacy Tips","text":"<ul> <li>Mask PII before sending to Sentry (e.g., emails, tokens)</li> <li>Don\u2019t expose internal URLs or server logs in frontend traces</li> <li>Use rate limits and sampling in production</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#cicd-deployment","title":"\ud83e\uddea CI/CD &amp; Deployment","text":"<ul> <li>Add healthchecks for Prometheus to scrape</li> <li>Use <code>mkdocs</code> to document observability stack internally</li> <li>Auto-deploy dashboards or Sentry config using Terraform or CI scripts</li> </ul>"},{"location":"migration/sentry/guide/best-practices/#summary","title":"\u2705 Summary","text":"Area Tool(s) Key Best Practices Frontend Errors Sentry Use <code>ErrorBoundary</code>, capture API failures Backend Errors Sentry Auto and manual error reporting Performance Sentry + Prometheus Use tracing and metrics System Health Prometheus + Grafana Monitor containers, set actionable alerts Fullstack Tracing Sentry Link frontend \u2192 backend spans"},{"location":"migration/sentry/guide/best-practices/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Sentry React Docs</li> <li>Sentry Python Docs</li> <li>Prometheus Docs</li> <li>Grafana Alerts Guide</li> <li>Web Vitals Explained</li> </ul>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/","title":"When to Use What","text":""},{"location":"migration/sentry/guide/sentry-vs-prometheus/#when-to-use-sentry-vs-prometheus-grafana","title":"When to Use Sentry vs Prometheus + Grafana","text":"<p>As a fullstack developer using React (frontend) and FastAPI (backend), it's important to understand when to use Sentry and when to use Prometheus + Grafana for observability. These tools solve different problems.</p>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#overview","title":"\ud83d\udd0d Overview","text":"Goal Use Sentry Use Prometheus + Grafana Capture app errors \u2705 Yes \u274c No Monitor React frontend issues \u2705 Yes \u274c No Track FastAPI exceptions \u2705 Yes \u274c No Measure frontend/backend latency \u2705 Yes \u2705 Yes Create system alerts (CPU, RAM) \u274c No \u2705 Yes Monitor infrastructure health \u274c No \u2705 Yes Build custom dashboards \u274c Limited \u2705 Yes Link frontend \u2192 backend traces \u2705 Yes (tracing) \u274c No"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#use-sentry-when","title":"\ud83c\udfaf Use Sentry When","text":"<p>Sentry is best for application-level monitoring:</p> <ul> <li>You want to track errors and exceptions in React or FastAPI</li> <li>You need to capture stack traces and understand what users did before a crash</li> <li>You care about performance of specific pages or endpoints</li> <li>You want to see how frontend and backend requests are connected (distributed tracing)</li> </ul>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#example-scenarios","title":"Example Scenarios","text":"<ul> <li>A user sees a blank screen \u2192 Sentry captures a React error with full stack trace</li> <li>An API call fails \u2192 FastAPI logs the 500 and sends it to Sentry</li> <li>You want to see why <code>/login</code> is taking 3s to load \u2192 Sentry shows span data</li> </ul>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#use-prometheus-grafana-when","title":"\ud83d\udcca Use Prometheus + Grafana When","text":"<p>Prometheus and Grafana are best for infrastructure and system-level monitoring:</p> <ul> <li>You need to monitor container stats (CPU, memory, uptime)</li> <li>You want alerting (e.g. when FastAPI response time &gt; 2s)</li> <li>You\u2019re managing a production environment and need metrics for load, requests/sec, etc.</li> <li>You want to visualize custom metrics (e.g. number of users signed up per minute)</li> </ul>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#example-scenarios_1","title":"Example Scenarios","text":"<ul> <li>Your FastAPI service hits 100% CPU \u2014 Prometheus alerts you</li> <li>You want to see API throughput over the past 7 days \u2014 Grafana dashboard shows it</li> <li>Your Docker containers are using too much memory \u2014 visualized via Grafana panels</li> </ul>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#combine-both-for-full-observability","title":"\u2705 Combine Both for Full Observability","text":"<p>For most modern web apps, the best approach is to use both:</p> Layer Tool Frontend (React) \u2705 Sentry App errors (FastAPI) \u2705 Sentry Backend performance \u2705 Sentry or Prometheus System metrics \u2705 Prometheus + Grafana Alerts (CPU, latency) \u2705 Prometheus + Grafana"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#rule-of-thumb","title":"\ud83e\udde0 Rule of Thumb","text":"<ul> <li>Use Sentry for bugs, crashes, user impact, and tracing</li> <li>Use Prometheus + Grafana for metrics, system health, and alerts</li> </ul> <p>Together, they give you full visibility from the browser to the database.</p>"},{"location":"migration/sentry/guide/sentry-vs-prometheus/#further-reading","title":"\ud83d\udcda Further Reading","text":"<ul> <li>Sentry Docs (React)</li> <li>Sentry Docs (Python/FastAPI)</li> <li>Prometheus Docs</li> <li>Grafana Docs</li> </ul>"},{"location":"migration/sentry/integration/fastapi/","title":"FastAPI Backend","text":""},{"location":"migration/sentry/integration/fastapi/#sentry-integration-with-fastapi-backend","title":"Sentry Integration with FastAPI Backend","text":"<p>This guide explains how to integrate Sentry with your FastAPI backend to track errors, performance, and distributed traces from the frontend.</p>"},{"location":"migration/sentry/integration/fastapi/#installation","title":"\u2699\ufe0f Installation","text":"<p>Install the Sentry SDK in your FastAPI project using pip or poetry:</p> <pre><code>pip install --upgrade sentry-sdk\n</code></pre>"},{"location":"migration/sentry/integration/fastapi/#initialization","title":"\ud83d\ude80 Initialization","text":"<p>Basic Setup (<code>main.py</code>)</p> <pre><code>from fastapi import FastAPI\nimport sentry_sdk\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\n\nsentry_sdk.init(\n    dsn=\"YOUR_SENTRY_DSN_HERE\",  # Replace with your actual DSN from Sentry\n    traces_sample_rate=1.0,       # Lower this in production (e.g., 0.2)\n    environment=\"development\",    # Optional: \"production\", \"staging\", etc.\n)\n\napp = FastAPI()\napp.add_middleware(SentryAsgiMiddleware)\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"FastAPI + Sentry is working!\"}\n\n@app.get(\"/crash\")\ndef crash():\n    1 / 0  # This error will be automatically captured by Sentry\n</code></pre>"},{"location":"migration/sentry/integration/fastapi/#automatic-error-capture","title":"\ud83d\udd25 Automatic Error Capture","text":"<ul> <li>Any unhandled exceptions (e.g., crashes, 500 errors) are automatically sent to Sentry.</li> <li>Stack traces, request info, and environment data are included.</li> </ul> <p>--</p>"},{"location":"migration/sentry/integration/fastapi/#manually-capturing-errors","title":"\u270b Manually Capturing Errors","text":"<p>For custom error handling, use <code>sentry_sdk.capture_exception</code>:</p> <pre><code>from fastapi.responses import JSONResponse\nfrom sentry_sdk import capture_exception\n\n@app.get(\"/safe\")\ndef safe_route():\n    try:\n        risky_logic()\n    except Exception as e:\n        capture_exception(e)\n        return JSONResponse(content={\"error\": \"Internal Server Error\"}, status_code=500)\n</code></pre>"},{"location":"migration/sentry/integration/fastapi/#performance-monitoring","title":"\u26a1 Performance Monitoring","text":"<p>Sentry automatically tracks:</p> <ul> <li>Request duration (FastAPI route execution time)</li> <li>Middleware and DB access (if instrumented)</li> <li>Distributed traces (if headers are passed from frontend)</li> </ul> <p>Tips:</p> <ul> <li>Keep <code>traces_sample_rate</code> at <code>1.0</code> for dev/staging.</li> <li>In production, reduce it (e.g., <code>0.1</code> or <code>0.2</code>) to avoid data volume overload.</li> </ul>"},{"location":"migration/sentry/integration/fastapi/#distributed-tracing-with-frontend","title":"\ud83d\udd17 Distributed Tracing with Frontend","text":"<p>To link traces from React \u2192 FastAPI, you must:</p> <ol> <li>Pass <code>sentry-trace</code> and <code>baggage</code> headers from React to FastAPI</li> <li>Ensure Sentry\u2019s ASGI middleware is initialized before FastAPI routes</li> </ol> <p>React (frontend) example:</p> <pre><code>fetch(\"/api/user\", {\n  headers: {\n    \"sentry-trace\": transaction.toTraceparent(),\n    \"baggage\": transaction.toBaggage(),\n  }\n});\n</code></pre> <p>FastAPI automatically reads these headers via the <code>SentryAsgiMiddleware</code>.</p>"},{"location":"migration/sentry/integration/fastapi/#capture-user-context-optional","title":"\ud83d\udc64 Capture User Context (Optional)","text":"<p>You can associate errors with user IDs or emails:</p> <pre><code>from sentry_sdk import configure_scope\n\n@app.get(\"/profile\")\ndef get_profile(user_id: str):\n    with configure_scope() as scope:\n        scope.user = {\"id\": user_id}\n    return {\"user_id\": user_id}\n</code></pre>"},{"location":"migration/sentry/integration/fastapi/#security-tips","title":"\ud83d\udd10 Security Tips","text":"<ul> <li> <p>Avoid logging sensitive data (e.g., passwords, tokens).</p> </li> <li> <p>Use <code>before_send</code> in <code>sentry_sdk.init()</code> to sanitize or drop events:</p> </li> </ul> <pre><code>def scrub_sensitive_data(event, hint):\n    if \"request\" in event:\n        event[\"request\"][\"headers\"].pop(\"authorization\", None)\n    return event\n\nsentry_sdk.init(\n    dsn=\"YOUR_SENTRY_DSN_HERE\",\n    before_send=scrub_sensitive_data,\n    traces_sample_rate=0.2,\n)\n</code></pre>"},{"location":"migration/sentry/integration/fastapi/#debugging","title":"\ud83e\uddea Debugging","text":"<ul> <li> <p>Use Sentry's test function:</p> <pre><code>sentry-cli send-event -m \"Hello from FastAPI\"\n</code></pre> </li> <li> <p>Or trigger an intentional error by visiting <code>/crash</code></p> </li> </ul>"},{"location":"migration/sentry/integration/fastapi/#references","title":"\ud83d\udcda References","text":"<ul> <li>Sentry FastAPI Docs</li> <li>ASGI Middleware Reference</li> <li>Distributed Tracing</li> </ul>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/","title":"React Frontend with pnpm","text":""},{"location":"migration/sentry/integration/react-with-pnpm-axios/#sentry-integration-with-react-frontend-pnpm-react-query-axios","title":"Sentry Integration with React Frontend (pnpm + React Query + Axios)","text":"<p>This guide helps you set up Sentry in a React app using pnpm, React Query, and Axios to monitor errors and performance.</p>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#setup","title":"\u2699\ufe0f Setup","text":""},{"location":"migration/sentry/integration/react-with-pnpm-axios/#1-install-sentry-sdk-with-pnpm","title":"1. Install Sentry SDK with pnpm","text":"<p>Run this in your React project folder:</p> <pre><code>pnpm add @sentry/react @sentry/tracing\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#2-initialize-sentry","title":"2. Initialize Sentry","text":"<p>In your main entry file (e.g., <code>src/index.jsx</code>):</p> <pre><code>import * as Sentry from \"@sentry/react\";\nimport { BrowserTracing } from \"@sentry/tracing\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nSentry.init({\n  dsn: \"YOUR_SENTRY_DSN_HERE\", // Replace with your DSN\n  integrations: [new BrowserTracing()],\n  tracesSampleRate: 1.0, // Lower in production (e.g., 0.1)\n});\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(&lt;App /&gt;);\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#error-monitoring-with-react-query-axios","title":"\ud83d\udea8 Error Monitoring with React Query &amp; Axios","text":""},{"location":"migration/sentry/integration/react-with-pnpm-axios/#3-capture-axios-errors-automatically","title":"3. Capture Axios Errors Automatically","text":"<p>Set up an Axios interceptor to capture errors globally</p> <pre><code>import axios from \"axios\";\nimport * as Sentry from \"@sentry/react\";\n\naxios.interceptors.response.use(\n  response =&gt; response,\n  error =&gt; {\n    if (error.response) {\n      // Capture error with response details\n      Sentry.captureException(error);\n    }\n    return Promise.reject(error);\n  }\n);\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#4-use-react-query-error-handling","title":"4. Use React Query Error Handling","text":"<p>React Query allows you to handle errors on queries/mutations:</p> <pre><code>import { useQuery } from \"react-query\";\nimport axios from \"axios\";\nimport * as Sentry from \"@sentry/react\";\n\nfunction fetchUser() {\n  return axios.get(\"/api/user\");\n}\n\nfunction UserComponent() {\n  const { data, error, isError } = useQuery(\"user\", fetchUser, {\n    onError: (error) =&gt; {\n      // Capture error in Sentry\n      Sentry.captureException(error);\n    },\n  });\n\n  if (isError) return &lt;div&gt;Error loading user.&lt;/div&gt;;\n\n  return &lt;div&gt;Hello, {data?.data?.name}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#performance-monitoring","title":"\ud83d\udcc8 Performance Monitoring","text":"<p>Sentry's <code>BrowserTracing</code> integration will track:</p> <ul> <li>Page loads</li> <li>Route changes</li> <li>User interactions</li> </ul> <p>Optional: Trace Axios Requests</p> <p>You can add custom spans around Axios calls for detailed timing:</p> <pre><code>import * as Sentry from \"@sentry/react\";\n\nasync function fetchWithTracing(url) {\n  const transaction = Sentry.getCurrentHub().getScope().getTransaction();\n  const span = transaction?.startChild({ op: \"http.client\", description: `GET ${url}` });\n\n  try {\n    const response = await axios.get(url);\n    span?.finish();\n    return response;\n  } catch (error) {\n    span?.finish();\n    throw error;\n  }\n}\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#distributed-tracing-with-backend","title":"\ud83d\udd17 Distributed Tracing with Backend","text":"<p>Pass trace headers when calling your backend API:</p> <pre><code>fetch(\"/api/data\", {\n  headers: {\n    \"sentry-trace\": Sentry.getCurrentHub().getScope()?.getTransaction()?.toTraceparent() || \"\",\n    \"baggage\": Sentry.getCurrentHub().getScope()?.getTransaction()?.toBaggage() || \"\",\n  },\n});\n</code></pre> <p>Or if using Axios:</p> <pre><code>axios.interceptors.request.use(config =&gt; {\n  const transaction = Sentry.getCurrentHub().getScope().getTransaction();\n  if (transaction) {\n    config.headers[\"sentry-trace\"] = transaction.toTraceparent();\n    config.headers[\"baggage\"] = transaction.toBaggage();\n  }\n  return config;\n});\n</code></pre>"},{"location":"migration/sentry/integration/react-with-pnpm-axios/#privacy-tips","title":"\ud83d\udd12 Privacy Tips","text":"<ul> <li>Use <code>beforeSend</code> in Sentry init to scrub sensitive info.</li> <li>Avoid sending PII (user emails, tokens, passwords).</li> </ul> <p>\ud83d\udcda Useful Links</p> <ul> <li>Sentry React SDK</li> <li>React Query Error Handling</li> <li>Axios Interceptors</li> <li>Distributed Tracing</li> </ul>"},{"location":"migration/sentry/integration/react/","title":"React Frontend","text":""},{"location":"migration/sentry/integration/react/#sentry-integration-with-react-frontend","title":"Sentry Integration with React Frontend","text":"<p>This guide explains how to set up and use Sentry in your React application to monitor errors and performance issues effectively.</p> <pre><code>pnpm add @sentry/react @sentry/tracing axios\n</code></pre> <p>Installed Packages</p> Package Purpose <code>@sentry/react</code> For React error tracking <code>@sentry/tracing</code> For performance monitoring (optional but useful) <code>axios</code> Promise-based HTTP client"},{"location":"migration/sentry/integration/react/#setup","title":"\u2699\ufe0f Setup","text":""},{"location":"migration/sentry/integration/react/#1-install-sentry-sdk","title":"1. Install Sentry SDK","text":"<p>In your React project folder, run:</p> <pre><code>npm install @sentry/react @sentry/tracing\n\n# or with Yarn:\n\nyarn add @sentry/react @sentry/tracing\n</code></pre>"},{"location":"migration/sentry/integration/react/#2-initialize-sentry","title":"2. Initialize Sentry","text":"<p>In your main React entry file (usually <code>src/index.js</code> or <code>src/index.jsx</code>), add the following initialization:</p> <pre><code>import * as Sentry from \"@sentry/react\";\nimport { BrowserTracing } from \"@sentry/tracing\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nSentry.init({\n  dsn: \"YOUR_SENTRY_DSN_HERE\", // Replace with your actual DSN from Sentry project settings\n  integrations: [new BrowserTracing()],\n  tracesSampleRate: 1.0, // Adjust in production (e.g., 0.1)\n});\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(&lt;App /&gt;);\n</code></pre>"},{"location":"migration/sentry/integration/react/#error-monitoring","title":"\ud83d\udea8 Error Monitoring","text":""},{"location":"migration/sentry/integration/react/#use-error-boundaries","title":"Use Error Boundaries","text":"<p>Wrap your app or key components with Sentry\u2019s <code>ErrorBoundary</code> to catch rendering errors:</p> <pre><code>import { ErrorBoundary } from \"@sentry/react\";\n\nfunction Root() {\n  return (\n    &lt;ErrorBoundary fallback={&lt;p&gt;Something went wrong.&lt;/p&gt;}&gt;\n      &lt;App /&gt;\n    &lt;/ErrorBoundary&gt;\n  );\n}\n</code></pre>"},{"location":"migration/sentry/integration/react/#performance-monitoring","title":"\ud83d\udcc8 Performance Monitoring","text":""},{"location":"migration/sentry/integration/react/#automatic-tracing","title":"Automatic Tracing","text":"<p><code>BrowserTracing</code> integration automatically tracks page loads and navigation events.</p>"},{"location":"migration/sentry/integration/react/#custom-transactions-spans","title":"Custom Transactions &amp; Spans","text":"<p>You can create custom transactions or spans to measure specific code blocks:</p> <pre><code>const transaction = Sentry.startTransaction({ name: \"customOperation\" });\n\ntry {\n  // your code here\n} finally {\n  transaction.finish();\n}\n</code></pre>"},{"location":"migration/sentry/integration/react/#linking-frontend-backend-traces","title":"\ud83d\udd17 Linking Frontend &amp; Backend Traces","text":"<p>Pass Sentry trace headers when calling your backend API to enable distributed tracing:</p> <pre><code>fetch(\"/api/endpoint\", {\n  headers: {\n    \"sentry-trace\":\n      Sentry.getCurrentHub().getScope()?.getTransaction()?.toTraceparent() ||\n      \"\",\n    baggage:\n      Sentry.getCurrentHub().getScope()?.getTransaction()?.toBaggage() || \"\",\n  },\n});\n</code></pre>"},{"location":"migration/sentry/integration/react/#privacy-and-security-tips","title":"\ud83d\udd12 Privacy and Security Tips","text":"<ul> <li>Avoid sending sensitive user data to Sentry.</li> <li>Use <code>beforeSend</code> callback to scrub PII:</li> </ul> <pre><code>Sentry.init({\n  dsn: \"YOUR_SENTRY_DSN_HERE\",\n  beforeSend(event) {\n    // Remove sensitive info\n    delete event.user?.email;\n    return event;\n  },\n});\n</code></pre>"},{"location":"migration/sentry/integration/react/#debugging-sentry-setup","title":"\ud83e\uddf0 Debugging Sentry Setup","text":"<ul> <li>Check browser console for Sentry logs</li> <li>Verify events appear in Sentry dashboard</li> <li>Use <code>tracesSampleRate</code> wisely to balance performance and cost</li> </ul>"},{"location":"migration/sentry/integration/react/#references","title":"\ud83d\udcda References","text":"<ul> <li>Official Sentry React SDK</li> <li>Sentry Performance Monitoring</li> <li>Distributed Tracing Guide</li> </ul>"},{"location":"migration/sentry/integration/react/#with-pnpm-react-query-axios-version","title":"With (pnpm + React Query + Axios version)","text":""},{"location":"migration/sentry/integration/trace-linking/","title":"Trace Linking","text":""},{"location":"migration/sentry/integration/trace-linking/#trace-linking-frontend-backend-with-sentry","title":"Trace Linking: Frontend \u2192 Backend with Sentry","text":"<p>Distributed tracing lets you see how a user request flows from the frontend (React) to the backend (FastAPI). This makes it easy to understand:</p> <ul> <li>Which API requests are slow</li> <li>Where latency comes from (frontend, network, or backend)</li> <li>How errors and spans are connected across services</li> </ul>"},{"location":"migration/sentry/integration/trace-linking/#requirements","title":"\ud83e\uddf1 Requirements","text":"<p>To enable trace linking between React and FastAPI:</p> <ol> <li>Sentry must be initialized with performance monitoring in both React and FastAPI</li> <li>React must send special trace headers (<code>sentry-trace</code> and <code>baggage</code>) with every API request</li> <li>FastAPI must be running Sentry's <code>ASGI</code> middleware (already done if you followed the <code>fastapi.md</code> guide)</li> </ol>"},{"location":"migration/sentry/integration/trace-linking/#what-are-trace-headers","title":"\ud83e\udde0 What Are Trace Headers?","text":"<p>When a transaction is created in the frontend, Sentry generates headers like:</p> <ul> <li><code>sentry-trace</code>: contains trace ID, span ID, sampling info</li> <li><code>baggage</code>: optional metadata for more detailed linking</li> </ul> <p>These headers must be forwarded to the backend on every API call.</p>"},{"location":"migration/sentry/integration/trace-linking/#step-1-forward-headers-in-react","title":"\u269b\ufe0f Step 1: Forward Headers in React","text":"<p>If you're using Axios, add this to your Axios setup (e.g. <code>axios.js</code> or <code>api.js</code>):</p> <pre><code>import axios from \"axios\";\nimport * as Sentry from \"@sentry/react\";\n\naxios.interceptors.request.use((config) =&gt; {\n  const transaction = Sentry.getCurrentHub().getScope().getTransaction();\n  if (transaction) {\n    config.headers[\"sentry-trace\"] = transaction.toTraceparent();\n    config.headers[\"baggage\"] = transaction.toBaggage();\n  }\n  return config;\n});\n</code></pre> <p>\u27a1\ufe0f This ensures that every request includes the trace info needed for backend linking.</p>"},{"location":"migration/sentry/integration/trace-linking/#step-2-receive-traces-in-fastapi","title":"\ud83d\ude80 Step 2: Receive Traces in FastAPI","text":"<p>If you used the <code>SentryAsgiMiddleware</code> (as shown in <code>fastapi.md</code>), FastAPI will automatically extract and continue the trace using those headers.</p> <p>You don't need to write any extra code.</p>"},{"location":"migration/sentry/integration/trace-linking/#example-trace-in-action","title":"\ud83d\udd0d Example: Trace in Action","text":"<ol> <li>A user clicks \"Load Dashboard\"</li> <li>React starts a transaction (<code>Dashboard Load</code>)</li> <li>React calls <code>/api/dashboard</code>, sending trace headers</li> <li>FastAPI receives the headers and continues the transaction</li> <li>In Sentry, you\u2019ll see:</li> </ol> <pre><code>Dashboard Load (React)\n\u2514\u2500\u2500 GET /api/dashboard (FastAPI)\n    \u2514\u2500\u2500 DB query: SELECT ... (optional if DB traced)\n</code></pre> <p>\u2705 You get full visibility from browser to database!</p>"},{"location":"migration/sentry/integration/trace-linking/#debugging-trace-linking","title":"\ud83e\uddea Debugging Trace Linking","text":"<ul> <li>Use the Sentry Performance view to verify if the traces are connected</li> <li> <p>If they show up separately:</p> <ul> <li>Check that both apps share the same <code>Sentry project</code> or organization</li> <li>Make sure the trace headers are not stripped by a proxy (e.g., NGINX, CORS, etc.)</li> </ul> </li> </ul>"},{"location":"migration/sentry/integration/trace-linking/#cors-note","title":"\ud83d\udd10 CORS Note","text":"<p>Make sure your backend CORS settings allow these custom headers:</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Use specific origins in production!\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],  # Make sure this includes 'sentry-trace' and 'baggage'\n)\n</code></pre>"},{"location":"migration/sentry/integration/trace-linking/#summary","title":"\u2705 Summary","text":"Step Tool Description 1 React (Sentry) Start transaction and forward trace headers via Axios 2 FastAPI (Sentry) Use <code>SentryAsgiMiddleware</code> to continue the trace 3 Sentry UI View full end-to-end trace in Performance dashboard"},{"location":"migration/sentry/integration/trace-linking/#references","title":"\ud83d\udcda References","text":"<ul> <li>Sentry Distributed Tracing Docs</li> <li>Sentry React SDK</li> <li>Sentry Python/FastAPI Guide</li> </ul>"},{"location":"migration/sentry/setup/install-sentry/","title":"Clone & Install Sentry","text":""},{"location":"migration/sentry/setup/install-sentry/#clone-install-sentry","title":"Clone &amp; Install Sentry","text":"<p>This guide walks you through cloning the Sentry Self-Hosted repository and installing all the necessary services using Docker.</p>"},{"location":"migration/sentry/setup/install-sentry/#1-clone-the-self-hosted-sentry-repository","title":"\ud83e\uddfe 1. Clone the Self-Hosted Sentry Repository","text":"<p>Sentry provides an official Docker-based setup in their <code>self-hosted</code> GitHub repo.</p> <p>Open your terminal and run:</p> <pre><code>git clone https://github.com/getsentry/self-hosted.git\ncd self-hosted\n</code></pre>"},{"location":"migration/sentry/setup/install-sentry/#2-checkout-the-latest-stable-release","title":"\ud83d\udd04 2. Checkout the Latest Stable Release","text":"<p>To ensure you\u2019re using the latest stable version, run:</p> <pre><code>VERSION=$(curl -Ls -o /dev/null -w %{url_effective} https://github.com/getsentry/self-hosted/releases/latest)\nVERSION=${VERSION##*/}\ngit checkout ${VERSION}\n</code></pre> <p>This checks out the latest tagged version (e.g. <code>24.7.0</code>) rather than using the potentially unstable <code>master</code> branch.</p>"},{"location":"migration/sentry/setup/install-sentry/#3-run-the-installer-script","title":"\u2699\ufe0f 3. Run the Installer Script","text":"<p>Now, install and initialize all required services:</p> <pre><code>./install.sh\n</code></pre> <p>\ud83d\udca1 You can skip user prompts and analytics reporting:</p> <pre><code>./install.sh --skip-user-prompt --no-report-self-hosted-issues\n</code></pre> <p>This script will:</p> <ul> <li>Pull all required Docker images</li> <li>Set up environment variables</li> <li>Generate config files</li> <li>Run migrations</li> <li>Initialize service dependencies like PostgreSQL, Redis, Kafka, ClickHouse, and Snuba</li> </ul>"},{"location":"migration/sentry/setup/install-sentry/#4-start-sentry-services","title":"\ud83d\ude80 4. Start Sentry Services","text":"<p>Once the installation is complete, start Sentry with:</p> <pre><code>docker compose up -d\n</code></pre> <p>The Sentry web interface will be available at:</p> <p>\ud83d\udccd http://localhost:9000</p>"},{"location":"migration/sentry/setup/install-sentry/#5-create-an-admin-user","title":"\ud83d\udc64 5. Create an Admin User","text":"<p>After the stack is running, create your first user:</p> <pre><code>docker compose run --rm web createuser\n</code></pre> <p>Follow the interactive prompts to create an admin account.</p>"},{"location":"migration/sentry/setup/install-sentry/#6-verify-installation","title":"\ud83e\uddea 6. Verify Installation","text":"<p>Open your browser and visit:</p> <p>\ud83d\udccd http://localhost:9000</p> <p>Log in with the admin account you just created. You should be able to create a new project (e.g. a React app) and view incoming error events.</p>"},{"location":"migration/sentry/setup/install-sentry/#whats-running","title":"\ud83d\udce6 What's Running?","text":"<p>The self-hosted setup includes the following services:</p> <ul> <li>Sentry Web \u2013 Main web interface and API</li> <li>Worker &amp; Cron \u2013 Background jobs and scheduled tasks</li> <li>Relay \u2013 Ingests events from clients (e.g. browser, mobile apps)</li> <li>PostgreSQL \u2013 Primary database</li> <li>Redis \u2013 Job queue and caching</li> <li>Kafka &amp; Zookeeper \u2013 Event streaming</li> <li>ClickHouse \u2013 High-performance event storage</li> <li>Snuba \u2013 Sentry\u2019s search and analytics engine</li> </ul> <p>All of these are orchestrated via Docker Compose.</p>"},{"location":"migration/sentry/setup/install-sentry/#next-step","title":"\u2705 Next Step","text":"<p>Now that Sentry is running, move on to:</p> <p>\u27a1\ufe0f Running with Docker Compose</p> <p>Suggested Titles for Each File</p> Filename <code># Title</code> (inside the <code>.md</code> file) <code>index.md</code> <code># Welcome to Sentry Self-Hosted with React</code> <code>setup/prerequisites.md</code> <code># Prerequisites</code> <code>setup/install-sentry.md</code> <code># Installing Sentry Self-Hosted via Docker</code> <code>setup/docker-compose.md</code> <code># Running Sentry with Docker Compose</code> <code>react/init-sentry.md</code> <code># Initializing Sentry in a React App</code> <code>react/dockerfile.md</code> <code># Dockerizing Your React App</code> <code>react/connect.md</code> <code># Connecting React to Self-Hosted Sentry</code> <code>advanced/configuration.md</code> <code># Advanced Configuration Options</code> <code>advanced/troubleshooting.md</code> <code># Troubleshooting Common Issues</code> <pre><code>site_name: Sentry Self-Hosted with React\n\nnav:\n  - Home: index.md\n  - Setup:\n      - Prerequisites: setup/prerequisites.md\n      - Clone &amp; Install Sentry: setup/install-sentry.md\n      - Running with Docker Compose: setup/docker-compose.md\n  - React Integration:\n      - Initialize Sentry in React: react/init-sentry.md\n      - Dockerize React App: react/dockerfile.md\n      - Connect React to Sentry: react/connect.md\n  - Advanced:\n      - Custom Configuration: advanced/configuration.md\n      - Troubleshooting: advanced/troubleshooting.md\n</code></pre>"},{"location":"migration/sentry/setup/overview/","title":"Overview","text":""},{"location":"migration/sentry/setup/overview/#overview","title":"Overview","text":""},{"location":"migration/sentry/setup/overview/#question","title":"Question","text":"<p>Can we only use docker sentry image or git clone sentry repo?</p> <p>Great question \u2014 yes, you can directly run Sentry Docker images, but here's the key:</p> <p>Sentry is a complex system made up of many interdependent services. So, while the Docker images (e.g. <code>getsentry/sentry</code>, <code>getsentry/relay</code>, <code>getsentry/snuba</code>, <code>getsentry/postgres</code>, <code>getsentry/cron</code>, etc.) are available on Docker Hub, you still need a well-orchestrated environment (via Docker Compose or Kubernetes) to run Sentry correctly.</p>"},{"location":"migration/sentry/setup/overview/#why-git-clone-is-recommended","title":"\u26a0\ufe0f Why git clone is recommended","text":"<p>The Sentry self-hosted repo contains:</p> <ul> <li><code>docker-compose.yml</code> for all required services (Sentry, Relay, Kafka, ClickHouse, Redis, etc.)</li> <li>Pre-written config files (<code>sentry.conf.py</code>, <code>config.yml</code>, <code>.env</code>)</li> <li>Bootstrap &amp; migration scripts (<code>install.sh</code>, <code>createuser</code>)</li> <li>Volume mounts &amp; health checks</li> </ul> <p>Without it, you'd have to replicate and wire all that yourself \u2014 which is very error-pron.</p>"},{"location":"migration/sentry/setup/overview/#technically-possible-running-images-manually","title":"\u2705 Technically Possible: Running Images Manually","text":"<p>If you're comfortable managing everything manually, you could do something like this:</p> <pre><code># Create named volumes\ndocker volume create sentry-data\ndocker volume create sentry-postgres\n\n# Start PostgreSQL\ndocker run -d --name sentry-postgres -e POSTGRES_PASSWORD=secret -v sentry-postgres:/var/lib/postgresql/data postgres:12\n\n# Start Redis\ndocker run -d --name sentry-redis redis:6\n\n# Start Kafka + Zookeeper\ndocker run -d --name zookeeper zookeeper:3.7\ndocker run -d --name kafka \\\n  -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \\\n  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 \\\n  --link zookeeper \\\n  bitnami/kafka:latest\n\n# Start Clickhouse\ndocker run -d --name clickhouse-server yandex/clickhouse-server\n\n# Start Sentry Web, Worker, Cron, Relay, Snuba, etc.\ndocker run -d --name sentry-web getsentry/sentry\ndocker run -d --name sentry-cron getsentry/sentry run cron\ndocker run -d --name sentry-worker getsentry/sentry run worker\n</code></pre> <p>But you'd also have to:</p> <ul> <li>Manually configure each service (environment variables, DB init, ports, internal networking)</li> <li>Run migrations (<code>sentry upgrade</code>)</li> <li>Mount configs and manage persistence</li> <li>Ensure service discovery and dependencies work correctly</li> </ul>"},{"location":"migration/sentry/setup/overview/#recommendation","title":"\u2705 Recommendation","text":"<p>Stick with:</p> <pre><code>git clone https://github.com/getsentry/self-hosted.git\ncd self-hosted\n./install.sh\ndocker compose up -d\n</code></pre> <p>This:</p> <ul> <li>Pulls all Docker images</li> <li>Sets up volumes</li> <li>Configures all inter-service dependencies</li> <li>Handles init steps like DB setup, user creation, etc.</li> </ul>"},{"location":"migration/sentry/setup/overview/#tldr","title":"TL;DR","text":"Method Effort Flexibility Risk of Issues <code>git clone self-hosted</code> \u2705 Low Medium Low Manual Docker Run \ud83e\uddea High High Very High <p>So yes, you can run the images directly, but unless you're customizing deeply or building a Kubernetes deployment, the <code>self-hosted</code> repo is by far the safest and easiest route.</p>"},{"location":"migration/sentry/setup/sentry-self-hosted/","title":"Sentry Self Hosted","text":""},{"location":"migration/sentry/setup/sentry-self-hosted/#sentry","title":"Sentry","text":"<p>Perfect \u2014 let\u2019s build a simple Docker-based stack using:</p> <ul> <li>\ud83d\udce6 Sentry (self-hosted)</li> <li>\u269b\ufe0f React frontend</li> <li>\ud83d\ude80 FastAPI backend</li> <li>\ud83d\udc33 Docker Compose to manage everything</li> </ul> <p>\u2705 Overview</p> <p>We'll:</p> <ol> <li>Run Sentry (self-hosted) in Docker</li> <li>Create a React app with Sentry integration</li> <li>Create a FastAPI app with Sentry integration</li> <li>Use Docker Compose to run all of them together</li> </ol>"},{"location":"migration/sentry/setup/sentry-self-hosted/#1-project-structure","title":"\ud83e\uddf1 1. Project Structure","text":"<pre><code>/fullstack-sentry/\n\u2502\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 backend/         \u2192 FastAPI app\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 frontend/        \u2192 React app\n\u2502   \u2514\u2500\u2500 src/\n\u2502       \u2514\u2500\u2500 index.jsx\n\u2514\u2500\u2500 sentry/          \u2192 Self-hosted Sentry (clone)\n</code></pre>"},{"location":"migration/sentry/setup/sentry-self-hosted/#2-clone-and-set-up-sentry-self-hosted","title":"\ud83d\udd27 2. Clone and Set Up Sentry (Self-hosted)","text":"<pre><code>git clone https://github.com/getsentry/self-hosted.git sentry\ncd sentry\n./install.sh  # Runs install script, will prompt you to set a SENTRY_SECRET_KEY and admin login\n</code></pre> <p>\u26a0\ufe0f Requires Docker and Docker Compose. Can take ~10\u201315 mins first time.</p> <p>Once done, you'll have a working Sentry instance at <code>http://localhost:9000</code></p>"},{"location":"migration/sentry/setup/sentry-self-hosted/#3-setup-fastapi-backend","title":"\ud83d\ude80 3. Setup FastAPI Backend","text":"backend/main.py<pre><code>from fastapi import FastAPI\nimport sentry_sdk\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\n\nsentry_sdk.init(\n    dsn=\"http://your_sentry_dsn_here\",  # Replace with actual DSN\n    traces_sample_rate=1.0,\n)\n\napp = FastAPI()\napp.add_middleware(SentryAsgiMiddleware)\n\n@app.get(\"/\")\ndef hello():\n    return {\"message\": \"Hello from FastAPI\"}\n\n@app.get(\"/error\")\ndef trigger_error():\n    1 / 0  # Will be captured by Sentry\n</code></pre>"},{"location":"migration/sentry/setup/sentry-self-hosted/#4-setup-react-frontend","title":"\u269b\ufe0f 4. Setup React Frontend","text":"<pre><code>npx create-react-app frontend\ncd frontend\nnpm install @sentry/react @sentry/tracing\n</code></pre> frontend/src/index.jsx<pre><code>import * as Sentry from \"@sentry/react\";\nimport { BrowserTracing } from \"@sentry/tracing\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nSentry.init({\n  dsn: \"http://your_sentry_dsn_here\", // Replace with actual DSN\n  integrations: [new BrowserTracing()],\n  tracesSampleRate: 1.0,\n});\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(&lt;App /&gt;);\n</code></pre> <p>Example API call from React</p> <pre><code>fetch(\"http://localhost:8000/error\") // Should trigger FastAPI error\n  .catch((e) =&gt; console.error(\"Caught error\", e));\n</code></pre>"},{"location":"migration/sentry/setup/sentry-self-hosted/#5-docker-compose-setup","title":"\ud83d\udc33 5. Docker Compose Setup","text":"docker-compose.yml<pre><code>version: \"3.8\"\nservices:\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - SENTRY_DSN=http://your_sentry_dsn_here\n    command: uvicorn main:app --host 0.0.0.0 --port 8000\n\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n    environment:\n      - REACT_APP_SENTRY_DSN=http://your_sentry_dsn_here\n    stdin_open: true\n    tty: true\n\n  sentry:\n    image: getsentry/sentry:latest # We already set this up via `self-hosted/`\n    # In real usage, you run it via ./install.sh and manage with docker-compose inside /sentry folder\n</code></pre> <p>You may also want to run the Sentry services from the <code>sentry</code> folder separately using its own <code>docker-compose.yml</code>.</p>"},{"location":"migration/sentry/setup/sentry-self-hosted/#final-steps","title":"\ud83c\udfaf Final Steps","text":"<ol> <li> <p>Go to <code>http://localhost:9000</code> (Sentry web UI)</p> <p>\u2192 Log in with admin account created during <code>install.sh</code></p> <p>\u2192 Create two Sentry projects:</p> <pre><code>-   One for React (JS)\n-   One for FastAPI (Python)\n</code></pre> </li> <li> <p>Replace the <code>dsn</code> values in both apps with their respective DSNs.</p> </li> <li> <p>Run everything:</p> </li> </ol> <pre><code>docker-compose up --build\n</code></pre>"},{"location":"migration/sentry/setup/sentry-self-hosted/#test-it-out","title":"\u2705 Test It Out","text":"<ul> <li>Go to <code>http://localhost:3000</code> \u2192 React app</li> <li>It should make a request to <code>/error</code> on FastAPI</li> <li>FastAPI will crash \u2192 Sentry logs the error</li> <li>React can also crash intentionally (add a <code>throw new Error()</code>)</li> </ul> <p>Would you like me to generate the full working example repo for you (with Dockerfiles), or walk through trace linking (React \u2192 FastAPI)?</p>"},{"location":"migration/sentry/setup/sentry-self-hosted/#misc","title":"Misc","text":"<p>Here's a full guide to setting up Sentry (self-hosted) and integrating it with both your React frontend and FastAPI backend, all running in Docker.</p> <p>\ud83e\uddf1 Overview</p> <ol> <li>Run Sentry (self-hosted) in Docker</li> <li>Integrate React with Sentry</li> <li>Integrate FastAPI with Sentry</li> <li>(Optional) Use Docker Compose for everything</li> </ol> <p>1\ufe0f\u20e3 Self-hosted Sentry in Docker</p> <p>\ud83d\udd38 Clone the official repo:</p> <pre><code>git clone https://github.com/getsentry/self-hosted.git sentry-self-hosted\ncd sentry-self-hosted\n</code></pre> <p>\ud83d\udd38 Set up:</p> <pre><code>./install.sh\n</code></pre> <p>\u26a0\ufe0f This installs and sets up Sentry with PostgreSQL, Redis, Kafka, and other dependencies.</p> <p>\ud83d\udd38 Start Sentry:</p> <pre><code>docker compose up -d\n</code></pre> <p>\ud83d\udd38 Access the Web UI:</p> <ul> <li>Go to <code>http://localhost:9000</code></li> <li>Create your admin user and organization.</li> </ul> <p>2\ufe0f\u20e3 React + Sentry Integration (with self-hosted DSN)</p> <p>\ud83d\udce6 Install:</p> <pre><code>npm install @sentry/react @sentry/tracing\n</code></pre> <p>\ud83e\udde0 Initialize in <code>index.js</code> or <code>App.tsx</code>:</p> <pre><code>import * as Sentry from \"@sentry/react\";\n\nSentry.init({\n  dsn: \"http://&lt;PUBLIC_KEY&gt;@localhost:9000/&lt;PROJECT_ID&gt;\",\n  integrations: [new Sentry.BrowserTracing()],\n  tracesSampleRate: 1.0,\n});\n</code></pre> <p>Replace:</p> <ul> <li><code>&lt;PUBLIC_KEY&gt;</code>: Get this from your Sentry project \u2192 Settings \u2192 Client Keys (DSN)</li> <li><code>&lt;PROJECT_ID&gt;</code>: Find it in the DSN URL</li> </ul> <p>\u2705 Example:</p> <pre><code>Sentry.captureException(new Error(\"Test error from React\"));\n</code></pre> <p>3\ufe0f\u20e3 FastAPI + Sentry Integration (with self-hosted DSN)</p> <p>\ud83d\udce6 Install:</p> <pre><code>pip install sentry-sdk\n</code></pre> <p>\ud83e\udde0 Initialize in <code>main.py</code>::</p> <pre><code>import sentry_sdk\nfrom sentry_sdk.integrations.asgi import SentryAsgiMiddleware\nfrom fastapi import FastAPI\n\nsentry_sdk.init(\n    dsn=\"http://&lt;PUBLIC_KEY&gt;@localhost:9000/&lt;PROJECT_ID&gt;\",\n    traces_sample_rate=1.0,\n)\n\napp = FastAPI()\napp.add_middleware(SentryAsgiMiddleware)\n\n@app.get(\"/\")\ndef read_root():\n    1 / 0  # example error\n    return {\"Hello\": \"World\"}\n</code></pre> <p>4\ufe0f\u20e3 (Optional) Docker Compose: Combine All in One</p> <p>Example structure:</p> <pre><code>project/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 main.py\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 sentry/   &lt;-- cloned sentry-self-hosted\n</code></pre> <p>\ud83d\udc33 Sample <code>docker-compose.yml</code>:</p> <pre><code>version: \"3.8\"\n\nservices:\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n\n  sentry:\n    image: sentry-self-hosted-web\n    container_name: sentry\n    depends_on:\n      - sentry-self-hosted\n    ports:\n      - \"9000:9000\"\n</code></pre> <p>\u2705 Final Checklist</p> Task Done? Self-hosted Sentry running on port 9000 \u2705 Created projects in Sentry (Frontend + Backend) \u2705 React using correct DSN \u2705 FastAPI using correct DSN \u2705 Docker Compose integrates all (optional) \u2705 <p>Let me know if you want a working example repo or help setting up your <code>docker-compose.yml</code> with both services!</p> <p>Here's a basic setup for both React frontend and FastAPI backend with their respective <code>Dockerfiles</code>, ready to work with your self-hosted Sentry.</p> <p>\ud83d\udcc1 <code>backend/Dockerfile</code> (FastAPI + Sentry)</p> <pre><code># Use official Python image\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy requirements\nCOPY requirements.txt .\n\n# Install dependencies\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy app files\nCOPY . .\n\n# Expose FastAPI port\nEXPOSE 8000\n\n# Run FastAPI app\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <ul> <li><code>backend/requirements.txt</code> example:</li> </ul> <pre><code>fastapi\nuvicorn\nsentry-sdk\n</code></pre> <p>\ud83d\udcc1 <code>frontend/Dockerfile</code> (React + Sentry)</p> <pre><code># Use Node for building React app\nFROM node:18 AS build\n\n# Set working directory\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json package-lock.json ./\nRUN npm install\n\n# Copy source code\nCOPY . .\n\n# Build the app\nRUN npm run build\n\n# Serve with nginx\nFROM nginx:alpine\nCOPY --from=build /app/build /usr/share/nginx/html\n\n# Expose port\nEXPOSE 80\n\n# Start nginx\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <ul> <li><code>frontend/package.json</code> dependencies (partial):</li> </ul> <p>Make sure you\u2019ve added Sentry packages:</p> <pre><code>\"dependencies\": {\n  \"@sentry/react\": \"^7.95.0\",\n  \"@sentry/tracing\": \"^7.95.0\",\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\"\n}\n</code></pre> <p>\u2705 Optional: <code>docker-compose.yml</code></p> <p>If you want to wire both together:</p> <pre><code>version: \"3.8\"\n\nservices:\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./backend:/app\n\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:80\"\n    volumes:\n      - ./frontend:/app\n</code></pre> <p>Let me know if you want to:</p> <ul> <li>Add environment variables for Sentry DSNs via <code>.env</code></li> <li>Add volume caching for faster dev</li> <li>Add live reload (e.g., <code>uvicorn --reload</code> or <code>Vite</code> in frontend) for dev mode</li> </ul>"},{"location":"office/React.cloneElement/","title":"React.cloneElement","text":""},{"location":"office/React.cloneElement/#reactcloneelement","title":"React.cloneElement","text":"<p>what doe sthe React.cloneEment does explain me in depth, when to use it onlyl and when not to use it only.</p> <p>Great question \u2014 <code>React.cloneElement()</code> is powerful, but can be misunderstood or misused. Let's break it down clearly and deeply, with examples and guidance on when to use it \u2014 and when not to.</p>"},{"location":"office/React.cloneElement/#what-is-reactcloneelement","title":"\ud83d\udd01 What is <code>React.cloneElement()</code>?","text":"<p><code>React.cloneElement()</code> lets you copy an existing React element and optionally override its props, key, ref, or children.</p> <pre><code>const newElement = React.cloneElement(existingElement, newProps, newChildren);\n</code></pre> <ul> <li><code>existingElement</code>: the React element you want to clone.</li> <li><code>newProps</code>: optional \u2014 add or override props.</li> <li><code>newChildren</code>: optional \u2014 replace the children.</li> </ul>"},{"location":"office/React.cloneElement/#why-and-when-would-you-use-it","title":"\ud83d\udce6 Why and When Would You Use It?","text":"<p>You use it when you need to enhance or modify a child React element, usually one that comes from a parent or a library, but you can't (or shouldn't) directly change its source code.</p>"},{"location":"office/React.cloneElement/#common-use-cases","title":"\u2705 Common Use Cases","text":"<ol> <li> <p>\ud83d\udd27 Injecting additional props</p> <p>For example, adding <code>onClick</code> to children passed into a component:</p> <pre><code>const EnhancedButton = ({ children }) =&gt;\n  React.cloneElement(children, { onClick: () =&gt; alert(\"Clicked!\") });\n\n&lt;EnhancedButton&gt;\n  &lt;button&gt;Click me&lt;/button&gt;\n&lt;/EnhancedButton&gt;;\n</code></pre> </li> <li> <p>\ud83d\udc40 Modifying a child component without re-writing it</p> <p>For example, changing a component passed from a UI library:</p> <pre><code>const cloned = React.cloneElement(original, {\n  style: { ...original.props.style, color: \"red\" },\n});\n</code></pre> </li> <li> <p>\ud83e\udde9 Preserving original behavior but customizing appearance</p> <p>Like in Ant Design\u2019s <code>Upload.itemRender</code> \u2014 where Ant provides a full structure, but you want to replace or modify just parts like the filename or thumbnail.</p> </li> </ol>"},{"location":"office/React.cloneElement/#when-not-to-use-reactcloneelement","title":"\u274c When NOT to Use React.cloneElement()","text":"<ol> <li> <p>\ud83d\udeab If you're creating a new component \u2014 just use JSX:</p> <pre><code>// GOOD\nreturn &lt;MyComponent prop1=\"value\" /&gt;;\n</code></pre> </li> <li> <p>\ud83d\udeab If you're trying to clone a component class/function:</p> <p><code>React.cloneElement()</code> only works with React elements, not component classes or functions.</p> <pre><code>// BAD\nReact.cloneElement(MyComponent); // \u274c Won't work\n</code></pre> </li> <li> <p>\ud83d\udeab If you can pass the right props directly:</p> <p>Don\u2019t clone just to add props \u2014 prefer clean composition when possible</p> </li> </ol>"},{"location":"office/React.cloneElement/#what-does-it-actually-do-internally","title":"\ud83d\udd0d What Does It Actually Do Internally?","text":"<p>Imagine this element:</p> <pre><code>const element = &lt;div className=\"original\"&gt;Hello&lt;/div&gt;;\n</code></pre> <p>When you do this:</p> <pre><code>const cloned = React.cloneElement(element, { className: \"new\" }, \"World\");\n</code></pre> <p>You get:</p> <pre><code>&lt;div className=\"new\"&gt;World&lt;/div&gt;\n</code></pre> <p>You're not copying the actual DOM \u2014 you're copying the React virtual element structure.</p>"},{"location":"office/React.cloneElement/#key-points","title":"\ud83d\udccc Key Points","text":"Feature Value Clone a React element \u2705 Yes Override props \u2705 Yes Replace children \u2705 Yes Use in Ant Design <code>itemRender</code> \u2705 Great use case Use with raw components/classes \u274c No (must be an element instance)"},{"location":"office/React.cloneElement/#in-context-your-ant-design-example","title":"\ud83d\udd04 In Context: Your Ant Design Example","text":"<pre><code>const newInfo = React.cloneElement(info, {}, &lt;span&gt;{file.name}&lt;/span&gt;);\n</code></pre> <p>You're taking Ant Design's info element (probably an ), cloning it, removing its children, and replacing it with just a  \u2014 smart way to keep its layout but remove click behavior.</p>"},{"location":"office/React.cloneElement/#use-cloneelement-when","title":"\u2705 Use <code>cloneElement()</code> when:","text":"<ul> <li>You're working with third-party children you can't modify.</li> <li>You need to add props or replace children dynamically.</li> <li>You're customizing a library component behavior without rewriting it.</li> </ul>"},{"location":"office/common-error/","title":"Common Bugs","text":""},{"location":"office/common-error/#overview","title":"Overview","text":""},{"location":"office/common-error/#typeerror-cyclic-object-value","title":"TypeError Cyclic Object Value","text":"Problem OccuranceSolutionReference Blogs <pre><code>    let person = {\n    name: \"ram\",\n    age: 22,\n};\n\nperson.myself = person;\n\n// console.log(person);\nJSON.stringify(person);\n</code></pre> <p>Uncaught TypeError: cyclic object value</p> <ul> <li>Troubleshooting TypeError Cyclic Object Value: A Simple Approach</li> <li>TypeError: cyclic object value </li> <li>JavaScript TypeError \u2013 Cyclic object value</li> <li>freecodecamp</li> <li>douglascrockford json</li> <li>Serializing object that contains cyclic object value - stackoverflow</li> </ul>"},{"location":"office/common-error/#typeerror-o-is-undefined","title":"TypeError: o is undefined","text":"Problem OccuranceSolutionReference Blogs <p>Here\u2019s an example of a JavaScript <code>TypeError: Cannot read property of undefined</code> thrown when a property is attempted to be read on an undefined variable:</p> <pre><code>function myFunc(a) {\n    console.log(a.b);\n}\n\nvar myVar;\nmyFunc(myVar);\n</code></pre> <p>Since the variable <code>myVar</code> is declared but not initialized, it is undefined. When it is passed to the <code>myFunc</code> function, the property <code>b</code> is attempted to be accessed. Since <code>a</code> is undefined at that point, running the code causes the following error:</p> <p>TypeError: Cannot read properties of undefined (reading 'b')</p> <ul> <li> <p>Optional Chaining (ES2020+)</p> <p>Optional chaining allows you to safely access nested object properties, even if an intermediate property doesn't exist:</p> <pre><code>function myFunc(a) {\n    console.log(a?.b);\n}\n\nlet myVar;\nmyFunc(myVar); // Logs: undefined (instead of throwing an error)\n\nmyVar = { b: 'myProperty' };\nmyFunc(myVar); // Logs: myProperty\n</code></pre> <p>This approach is particularly useful for deeply nested properties:</p> <pre><code>const user = {};\nconsole.log(user.address?.street); // undefined\nconsole.log(user.address?.street?.name); // undefined\n</code></pre> </li> <li> <p>Providing Default Values</p> <p>You can use the <code>OR</code> operator (||) or the nullish coalescing operator (??) to provide default values:</p> <pre><code>function greet(name) {\n    // Use OR operator (||) for falsy values (undefined, null, '', 0, false)\n    console.log(Hello, ${name || 'Guest'}!);\n\n    // Use nullish coalescing operator (??) for null or undefined only\n    console.log(Welcome, ${name ?? 'Anonymous'}!);\n}\n\ngreet(); // Logs: \"Hello, Guest!\" and \"Welcome, Anonymous!\"\ngreet('Alice'); // Logs: \"Hello, Alice!\" and \"Welcome, Alice!\"\n</code></pre> <p>These two methods provide more concise ways to handle potential undefined values, making your code more robust and easier to read.</p> </li> </ul> <ul> <li>Best Two Method Solution</li> </ul> <ul> <li>How to Fix TypeError: Cannot Read Property of Undefined in JavaScript</li> </ul> <p>Warning: [antd: Menu] children is deprecated. Please use items instead. Component Stack: </p> ProblemSolution <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { HomeOutlined, BookOutlined, ReadOutlined } from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        {\n            key: \"1\",\n            label: \"Dashboard\",\n            path: \"/dashboard\",\n            icon: &lt;HomeOutlined /&gt;,\n        },\n        { key: \"2\", label: \"Blog\", path: \"/blog\", icon: &lt;BookOutlined /&gt; },\n        { key: \"3\", label: \"Todo\", path: \"/todo\", icon: &lt;ReadOutlined /&gt; },\n        { key: \"4\", label: \"Gallery\", path: \"/gallery\", icon: &lt;ReadOutlined /&gt; },\n    ];\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[\n                    menuItems.find((item) =&gt; item.path === location.pathname)?.key,\n                ]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                {menuItems.map((item) =&gt; (\n                &lt;Menu.Item\n                    key={item.key}\n                    icon={item.icon}\n                    style={{ textAlign: \"left\" }}\n                &gt;\n                    &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                ))}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { HomeOutlined, BookOutlined, ReadOutlined } from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        {\n            key: \"1\",\n            label: \"Dashboard\",\n            path: \"/dashboard\",\n            icon: &lt;HomeOutlined /&gt;,\n        },\n        { key: \"2\", label: \"Blog\", path: \"/blog\", icon: &lt;BookOutlined /&gt; },\n        { key: \"3\", label: \"Todo\", path: \"/todo\", icon: &lt;ReadOutlined /&gt; },\n        { key: \"4\", label: \"Gallery\", path: \"/gallery\", icon: &lt;ReadOutlined /&gt; },\n    ];\n\n    const items = menuItems.map((item) =&gt; ({\n        key: item.key,\n        label: &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;,\n        icon: item.icon,\n    }));\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[\n                    menuItems.find((item) =&gt; item.path === location.pathname)?.key,\n                ]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n                items={items} // Use items prop here\n            /&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <p>Key Changes:</p> <ol> <li> <p>Mapping to <code>items</code>: We create a new <code>items</code> array by mapping over <code>menuItems</code> to match the structure that the <code>Menu</code> component expects. Each object in <code>items</code> now contains <code>key</code>, <code>label</code>, and <code>icon</code>.</p> </li> <li> <p>Using <code>items</code> prop: Instead of mapping over <code>menuItems</code> to create <code>Menu.Item</code> components, we pass the entire <code>items</code> array to the <code>Menu</code> component.</p> </li> </ol> <p>With these changes, your component should no longer trigger the deprecation warning, and it will work seamlessly with the latest version of Ant Design.</p>"},{"location":"office/draft/","title":"Overview","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul> <p>Embedded Device</p> working with .py fileDjango <p>To connect to an embedded device using Python, you typically use networking libraries such as socket or higher-level libraries built on top of it, like paramiko for SSH connections or pyserial for serial communication.</p> <p>Here's a basic example of how you can use the socket library to connect to a device using its IP address and a specific port:</p> <pre><code>import socket\n\n# IP address and port of the embedded device\ndevice_ip = '192.168.1.100'\ndevice_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the device\ntry:\n    client_socket.connect((device_ip, device_port))\n    print(\"Connected to the embedded device\")\n\n    # Here you can send and receive data to/from the device\n\n    # Example: Sending data\n    message = \"Hello, device!\"\n    client_socket.sendall(message.encode())\n\n    # Example: Receiving data\n    received_data = client_socket.recv(1024)\n    print(\"Received:\", received_data.decode())\n\nexcept ConnectionRefusedError:\n    print(\"Connection to the embedded device refused\")\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre> <p>Replace <code>192.168.1.100</code> with the actual IP address of your embedded device, and <code>12345</code> with the actual port number it's listening on.</p> <p>Once connected, you can send and receive data to/from the device as needed. Make sure to handle exceptions appropriately, such as <code>ConnectionRefusedError</code> if the connection is refused.</p> <p>Depending on your specific requirements and the capabilities of your embedded device, you might need to use different libraries or protocols. For example, if your device supports SSH, you might use <code>paramiko</code> for SSH connections. If your device communicates over serial ports, you might use <code>pyserial</code>.</p> <p>To convert the provided Python code into a Django application, you can create a Django view that handles the connection to the embedded device when a certain URL is accessed. Below is an example of how you can do this:</p> viewsurl <p>First, make sure you have Django installed. If not, you can install it using pip:</p> <pre><code>#1. \npip install django\n#2. \ndjango-admin startproject embedded_device_project\n#3.\ncd embedded_device_project\npython manage.py startapp embedded_device_app\n</code></pre> embedded_device_app/views.py<pre><code># 4. \n# embedded_device_app/views.py\n\nfrom django.http import HttpResponse\nimport socket\n\ndef connect_to_device(request):\n    # IP address and port of the embedded device\n    device_ip = '192.168.1.100'\n    device_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n    # Create a socket object\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        # Connect to the device\n        client_socket.connect((device_ip, device_port))\n        message = \"Hello, device!\"\n        client_socket.sendall(message.encode())\n        received_data = client_socket.recv(1024).decode()\n        response_message = f\"Received from device: {received_data}\"\n    except ConnectionRefusedError:\n        response_message = \"Connection to the embedded device refused\"\n    finally:\n        # Close the socket\n        client_socket.close()\n\n    return HttpResponse(response_message)\n</code></pre> urls.py<pre><code># embedded_device_project/urls.py\n\nfrom django.urls import path\nfrom embedded_device_app import views\n\nurlpatterns = [\n    path('connect-to-device/', views.connect_to_device, name='connect_to_device'),\n]\n</code></pre> <p>Now, when you access the URL <code>http://127.0.0.1:8000/connect-to-device/</code> in your browser, Django will attempt to connect to the embedded device and send a message. The response from the device (if any) will be displayed in the browser. Ensure to replace the IP address and port with the appropriate values for your embedded device.</p>"},{"location":"office/draft/#dropdown-issue-in-antd","title":"Dropdown Issue in <code>antd</code>","text":"Bug <pre><code>import React from 'react';\nimport { DownOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Dropdown, Space } from 'antd';\nconst items = [\n  {\n    key: '1',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    ),\n  },\n  {\n    key: '2',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    icon: &lt;SmileOutlined /&gt;,\n    disabled: true,\n  },\n  {\n    key: '3',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\"&gt;\n        3rd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    disabled: true,\n  },\n  {\n    key: '4',\n    danger: true,\n    label: 'a danger item',\n  },\n];\nconst App = () =&gt; (\n  &lt;Dropdown\n    menu={{\n      items,\n    }}\n  &gt;\n    &lt;a onClick={(e) =&gt; e.preventDefault()}&gt;\n      &lt;Space&gt;\n        Hover me\n        &lt;DownOutlined /&gt;\n      &lt;/Space&gt;\n    &lt;/a&gt;\n  &lt;/Dropdown&gt;\n);\nexport default App;\n</code></pre>"},{"location":"office/draft/#solution-1","title":"Solution 1","text":"<p>The issue in your code is that you are passing <code>menuItem</code> inside the <code>menu</code> prop as an object, but it should be passed as an array of menu items directly to the <code>menu</code> prop. In the Ant Design <code>Dropdown</code> component, the <code>menu</code> prop expects a <code>Menu</code> component or a configuration object for the <code>Menu</code> component, not just an array of menu items.</p> <p>Here's how you can fix it:</p> <ul> <li>Import the <code>Menu</code> component from Ant Design.</li> <li>Use the <code>Menu</code> component to wrap your <code>menu</code> items.</li> <li>Pass the <code>Menu</code> component as the <code>menu</code> prop of Dropdown.</li> </ul> Here's the corrected code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>In this updated code:</p> <ul> <li><code>Menu</code> component is used to create a menu with <code>Menu.Item</code> elements.</li> <li>The <code>menu</code> variable now holds the <code>Menu</code> component, which is passed to the <code>overlay</code> prop of the Dropdown component.</li> </ul> <p>This should resolve the error and render the dropdown menu correctly.</p>"},{"location":"office/draft/#solution-2","title":"Solution 2","text":"<p>It looks like there might be a misunderstanding or an outdated example in the documentation. The Ant Design <code>Dropdown</code> component's menu prop should indeed be passed a <code>Menu</code> component, as it expects a React node that represents the menu.</p> <p>Here\u2019s a clarification on how you should typically use the <code>Dropdown</code> and <code>Menu</code> components together:</p> <ol> <li> <p>Using <code>Menu</code> with Dropdown: You use the <code>Menu</code> component to define the menu structure and then pass it to the <code>Dropdown</code> component's <code>overlay</code> prop (previously called menu in older versions).</p> </li> <li> <p>Documentation Changes: Sometimes documentation or examples might be outdated or incorrect. Always cross-reference with the latest version of the library and check if there have been any changes in prop names or usage.</p> </li> </ol> <p>Here's a modern and correct approach based on current Ant Design practices:</p> <pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>Key Points:</p> <ul> <li><code>overlay</code> Prop: Use the <code>overlay</code> prop of <code>Dropdown</code> to pass the <code>Menu</code> component.</li> <li><code>Menu</code> Component: Create a <code>Menu</code> with <code>Menu.Item</code> elements to define the dropdown items.</li> </ul> <p>If you\u2019re seeing examples or documentation suggesting otherwise, it might be worth checking the version of Ant Design you're using or looking at the official Ant Design documentation for the version you're working with to ensure compatibility.</p>"},{"location":"office/draft/#solution-3-passing-value","title":"Solution 3 <code>passing value</code>","text":"<p>To pass the <code>record</code> to the <code>onClick</code> handler inside the <code>Dropdown</code>'s <code>Menu</code> component, you'll need to dynamically create the <code>Menu</code> with access to the record from the <code>render</code> function. Since <code>menudailytask</code> is defined outside of the <code>render</code> function, it won't have access to the <code>record</code> variable.</p> <p>Here's how you can modify your code to achieve this:</p> <ol> <li> <p>Move <code>Menu</code> Definition Inside <code>render</code>: Define the <code>Menu</code> within the <code>render</code> method where the <code>record</code> is available.</p> </li> <li> <p>Create a Function for the <code>Menu</code>: Use a function to create the <code>Menu</code> items with the <code>record</code> passed to the click handlers.</p> </li> </ol> Here\u2019s an updated version of your code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport { EyeOutlined, InteractionTwoTone, InteractionOutlined, MoreOutlined } from '@ant-design/icons';\n\nconst ActionColumn = ({ record }) =&gt; {\n\n  // Function to create the Menu with access to record\n  const createMenu = (record) =&gt; (\n    &lt;Menu&gt;\n      &lt;Menu.Item\n        key=\"1\"\n        onClick={() =&gt; {\n          console.log(\"clicked\", record);\n          // You can add other logic here\n        }}\n      &gt;\n        Yesterday Task\n      &lt;/Menu.Item&gt;\n    &lt;/Menu&gt;\n  );\n\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;div\n        className=\"task-view-btn\"\n        onClick={() =&gt; {\n          setShowModalForTasKDetail(true);\n          setTaskId(record.id);\n          setTodoDetails(record);\n          setHideInternalMessage(true);\n          setSmallChatHeight(false);\n          setChatHeight(false);\n          setchatBox(false);\n        }}\n      &gt;\n        &lt;EyeOutlined /&gt;\n      &lt;/div&gt;\n\n      &lt;Tooltip\n        title={\n          record?.todoTransferToDailyTask?.status\n            ? \"Already moved\"\n            : \"Move to Daily Diary\"\n        }\n      &gt;\n        {record?.todoTransferToDailyTask?.status ? (\n          &lt;InteractionTwoTone\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        ) : (\n          &lt;InteractionOutlined\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        )}\n      &lt;/Tooltip&gt;\n\n\n      {/* Main Code */}\n      &lt;Dropdown overlay={createMenu(record)}&gt;\n        &lt;MoreOutlined className=\"move-to-dailydairy\" /&gt;\n      &lt;/Dropdown&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ActionColumn;\n</code></pre> <p>Key Points:</p> <ul> <li><code>createMenu</code> Function: Defines the <code>Menu</code> component inside the <code>render</code> method and has access to the record.</li> <li>Pass <code>record</code> to <code>createMenu</code>: The <code>record</code> is passed to <code>createMenu</code> to make it available within the <code>Menu</code> items.</li> </ul> <p>By using this approach, you ensure that each <code>Dropdown</code> instance gets its own <code>Menu</code> with the correct <code>record</code> information.</p>"},{"location":"office/draft/#select-username","title":"Select username","text":"<pre><code>&lt;Select\n    placeholder=\"Select a User\"\n    showSearch={true}\n    allowClear\n    filterOption={(input, option) =&gt;\n        option.children[0] &amp;&amp;\n        option.children[0]\n            .toLowerCase()\n            .indexOf(input.toLowerCase()) &gt;= 0\n    }\n    onChange={(id) =&gt; {\n      setSelectedUserId(id);\n\n      if (id === null || id === undefined) {\n        // Reset the username when cleared\n        setSelectedUserName(null);\n      } else {\n        const selectedUser = user.find(u =&gt; u.appUserId === id);\n        if (selectedUser) {\n            setSelectedUserName(selectedUser.userName);\n        }\n      }\n    }}\n&gt;\n    {user.map((user) =&gt; (\n        &lt;Option key={user.appUserId}&gt;\n            {user.fullName} {`[${user.userName}]`}\n        &lt;/Option&gt;\n    ))}\n&lt;/Select&gt;\n</code></pre> <pre><code>{!showResetButton \n  ? `Daily Diary of Today` \n  : `Daily Diary of ${selectedDate}${selectedUserName ? ` [${selectedUserName}]` : ''} ${\n      dailyDairyPaginationResp?.totalCount ? `(${dailyDairyPaginationResp.totalCount})` : ''\n    }`}\n</code></pre>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Intro","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<p>Tip</p> <ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - <code>development domain</code></li> <li>cqweb.ictc.com.np - <code>production domain</code></li> </ul> <p><code>application</code></p> <ul> <li>cqnoval.info.com.np - <code>swagger</code></li> <li>cqnovalid.info.com.np - <code>login endpoint</code></li> </ul> <p><code>tools</code></p> <ul> <li>Jenkins - <code>on port 8080</code></li> <li>portainer - <code>on port 9000</code></li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p>Note</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 svgs\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 useRoles\n\u251c\u2500\u2500 json\n\u251c\u2500\u2500 layouts\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 redux\n\u2502   \u2514\u2500\u2500 store\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 styles\n\u2514\u2500\u2500 utils\n</code></pre> <p>Description</p> <ul> <li><code>assets</code> : contains the image and svg files.</li> <li><code>components</code> : list of all the resuable components.</li> <li><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</li> <li><code>json</code> : has the caleder filter data.</li> <li><code>layouts</code> : contains the base layout of cqweb.</li> <li><code>services</code> : core redux - action, reducer, store</li> <li><code>styles</code> : contains the sass styles.</li> <li><code>utils</code> : list of reusable functions.</li> </ul>"},{"location":"office/intro/#installation","title":"Installation","text":"<p>Success</p> bash<pre><code>npm i --legacy-peer-deps\n\nnpm run product\n</code></pre>"},{"location":"office/intro/#nodejs-npm-version-compatibility-matrix-for-react","title":"Node.js &amp; npm Version Compatibility Matrix for React","text":"React Version Node.js Version npm Version Additional Notes 16.8.0 8.x, 10.x, 12.x, 14.x, 16.x 5.x, 6.x, 7.x, 8.x React 16.8.0 introduced Hooks (React 16.8) 17.x.x 10.x, 12.x, 14.x, 16.x 6.x, 7.x, 8.x React 17 focuses on improvements without major breaking changes. 18.x.x 12.x, 14.x, 16.x, 18.x 7.x, 8.x React 18 introduced concurrent rendering (React Server Components). 16.0.0 - 16.7.x 8.x, 10.x, 12.x 5.x, 6.x Earlier versions of React 16 (before 16.8) were compatible with Node 8.x+ and npm 5.x+. 15.x.x 4.x, 6.x, 8.x 3.x, 4.x React 15 is compatible with older Node.js versions, but not recommended for new projects. 14.x.x 4.x, 6.x, 8.x 3.x, 4.x React 14 is outdated and should be avoided unless maintaining legacy code. 13.x.x 4.x, 6.x, 8.x 3.x, 4.x React 13 is quite old and requires legacy Node.js and npm versions."},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/intro/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/intro/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/secret/","title":"PW","text":""},{"location":"office/secret/#bank-user","title":"BANK USER","text":"<ul> <li>https://bk-fk.info.com.np</li> </ul> <pre><code>anil.maharjan@ispl.com.np\nTest@12345\n\n******************************************************** CREATOR\n\ndealcreator01@no.com\nTest@12345\n\n******************************************************** CHECKER\n\nchecker@prabhubank.com\nTest@12345\n\n******************************************************** ISSUER\n\nissuer@no.com\nTest@12345\n\n******************************************************** BACKOFFICE\n\nbackofficer01@no.com\nTest@12345\n\nbackre@no.com\nTest@12345\n\n******************************************************** APPROVER\n\ndealapprover01@no.com\nTest@12345\n</code></pre> <ul> <li>https://tk-fk.ispl.com.np</li> </ul> <pre><code>Shreeya.Pandey@prabhubank.com\nTest@12345\n\nAman.bajracharya@prabhubank.com\nTest@12345\n</code></pre> <ul> <li>https://prime-app.ispl.com.np</li> </ul> <pre><code>anupama.shrestha1330@pcbl.com.np\nTest@12345\n</code></pre> <p>SUPABASE</p>"},{"location":"office/secret/#jenkins","title":"JENKINS","text":"<p>ICTC</p> <pre><code>URL - http://ci-info.info.com.np:8080/\n\nuser: infoadmin\npwd: anil{****}1234\n</code></pre> <p>BANK</p> <ul> <li>http://ci-demo.info.com.np:8080</li> <li>Username: <code>adminbank</code></li> </ul>"},{"location":"office/secret/#gitlab","title":"Gitlab","text":"<p>Old</p> <pre><code>URL: http://gitserver.info.com.np\n\npwd: bi{.........}\n</code></pre>"},{"location":"office/secret/#postmen","title":"Postmen","text":"<pre><code>mail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/secret/#zimbra","title":"Zimbra","text":"<p>Old Outdated</p> <pre><code>URL: https://mail.info.com.np\n\nmail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre> <p>Zimbra MAIL <code>updated</code></p> <pre><code>URL: http://mail.info.com.np/webmail\n\nmail: bishow.thapa@info.com.np\npwd: I$VqIS~i%DTE\n</code></pre>"},{"location":"office/secret/#ictc","title":"ICTC","text":"<pre><code>URL: https://cqweb.ictc.com.np/#/\n\nuser: anil\npwd: Anil@{*****}\n\nuser: admin_***\npwd: BaSs@9627{*}\n</code></pre>"},{"location":"office/secret/#cqweb","title":"CQWEB","text":"<pre><code>URL: https://cqweb.info.com.np\n\nuser: admin_bbask\npwd: SsBa@9999\n\nuser: bishow\npwd: $Bishow88\n\nuser: zoro\npwd: $Bishow88\n\nuser: biju\npwd: 1q2w3E**@\n\nuser: Aakash\npwd: 1q2w3E**@\n\nuser: sp\npwd: Password1234$\n\nuser: amit\npwd: 1q2w3E**@\n\nuser: bijay\npwd: 1q2w3E**@\n\nuser: sajal\npwd: 1q2w3E**@\n</code></pre>"},{"location":"office/secret/#infocus360-not-active","title":"Infocus360 (not active)","text":"<p>Danger</p> <pre><code>URL: https://infocus360.ispl.com.np\n\nuser: bishow\npwd: 1q2w3E**@\n\nuser: admin\npwd: 1q2w3E*\n</code></pre>"},{"location":"office/secret/#cedro","title":"Cedro","text":"<p>Success</p> <pre><code>url: https://cedro.percipio.com\nuser: anil.maharjan@ispl.com.np\npwd: Welcome1\n</code></pre>"},{"location":"office/secret/#clickup","title":"Clickup","text":"<p>Success</p> <pre><code>url: https://app.clickup.com/login\nmail: bishow.thapa@info.com.np\npwd: 75NHYbVWkWFM8pWyjWYD\n</code></pre>"},{"location":"office/secret/#ispl-website-cpanel","title":"ISPL WEBSITE CPANEL","text":"<p>Success</p> <pre><code># URL\nhttps://s717.sgp8.mysecurecloudhost.com:2083/\n# USERNAME\nbishow@allianceasianepal.org.np\n# PASSWORD\nBishow@123##\n</code></pre>"},{"location":"office/secret/#teams-for-leave-approval","title":"Teams (for leave approval)","text":"<p>Success</p> <ul> <li>teams.microsoft.com</li> <li> </li> </ul>"},{"location":"office/secret/#bishowthapaisplcomnp","title":"bishow.thapa@ispl.com.np","text":""},{"location":"office/secret/#hr-app","title":"HR app","text":"<p>Note</p> <pre><code>https://hr.my/go/\ndoyahi8886@bizatop.com\nadminadmin1234\n\nhttps://hr.my/go/\nbishow.thapa@info.com.np\nadmin1234\n</code></pre>"},{"location":"office/secret/#ispl-mail-for-google-app","title":"ISPL Mail For Google App","text":"<pre><code>isplmail49@gmail.com\n</code></pre>"},{"location":"office/secret/#local-portainer-password","title":"Local Portainer password","text":"<pre><code>username: ninja\npassword: ,d:_D9rm_7w?}D8\n</code></pre>"},{"location":"office/task/","title":"Task","text":""},{"location":"office/task/#task-1","title":"TASK 1:","text":"<p>User Management Dashboard</p> <p>Objective:</p> <p>Build a user management dashboard where an admin can view, search, add, edit, and delete user records.</p> <p>Features:</p> <ol> <li>User List Page</li> </ol> <p>Use RTK Query to fetch data from a fake API such as jsonplacholder, or use msw, json-server. Display users in an Ant Design Table. Columns: Name, Email, Phone, Company, Actions (view, edit, delete icon). Add a search input where user can search.</p> <ol> <li>View User Details</li> </ol> <p>If the user click clicks in the view icon (row), open a drawer or modal with detailed info using AntD components.</p> <ol> <li>Add/Edit User Form</li> </ol> <p>Use Ant Design Form inside a Modal or Drawer. Fields: Name, Email, Phone, Company, Website. On submit, update the Redux store (simulate POST/PUT if using mock like msw).</p> <ol> <li>Delete User</li> </ol> <p>Add a delete button in the actions column. Show AntD confirmation pop-up. Remove user from Redux store or simulate DELETE request.</p>"},{"location":"office/task/#task-2","title":"Task 2:","text":"<p>Infinite Scolling Page</p> <p>Objective</p> <p>Build a small React application that fetches a list of users from an API and displays them in a card format. Include a search bar to filter users by name and a dropdown to filter by gender.</p> <p>Features:</p> <ol> <li>Fetch Data from API (https://randomuser.me/api/?results=20)</li> <li>Loading and Error Handling</li> <li>Search Functionality (add input field for search)</li> <li>Component Structure</li> <li>Display Users (Name, Email, Gender, Picture) in the Listings</li> </ol> <p>Preferred Tools &amp; Libraries</p> <ul> <li>Antd,</li> <li>Redux Toolkit with RTK Query</li> <li>Axios</li> <li>React Router \u2013 if you add routing</li> <li>Optional</li> </ul> <p>json-server or msw for mocking APIs</p>"},{"location":"office/task/#settings","title":"Settings","text":"renderField.jsx<pre><code>import { Input, InputNumber, Switch, Select } from \"antd\";\nimport { SETTINGS_TYPE } from \"./constants\";\n\nconst { TextArea } = Input;\n\nexport const renderField = (type, form, isDisabled, options = {}) =&gt; {\n  switch (type) {\n    case SETTINGS_TYPE._string:\n      return (\n        &lt;Input {...options} disabled={isDisabled} style={{ width: \"100%\" }} /&gt;\n      );\n    case SETTINGS_TYPE._int:\n    case SETTINGS_TYPE._long:\n      return (\n        &lt;InputNumber\n          {...options}\n          disabled={isDisabled}\n          style={{ width: \"100%\" }}\n        /&gt;\n      );\n    case SETTINGS_TYPE._float:\n    case SETTINGS_TYPE._double:\n    case SETTINGS_TYPE._decimal:\n      return (\n        &lt;InputNumber\n          step={0.1}\n          disabled={isDisabled}\n          style={{ width: \"100%\" }}\n          {...options}\n        /&gt;\n      );\n    case SETTINGS_TYPE._bool:\n      return &lt;Switch {...options} /&gt;;\n    case SETTINGS_TYPE._stringArray:\n      return (\n        &lt;Select\n          mode=\"tags\"\n          style={{ width: \"100%\" }}\n          disabled={isDisabled}\n          {...options}\n        /&gt;\n      );\n    case SETTINGS_TYPE._intArray:\n    case SETTINGS_TYPE._floatArray:\n    case SETTINGS_TYPE._doubleArray:\n    case SETTINGS_TYPE._decimalArray:\n    case SETTINGS_TYPE._longArray:\n      return (\n        &lt;TextArea\n          placeholder=\"Comma-separated numbers\"\n          disabled={isDisabled}\n          {...options}\n        /&gt;\n      );\n    case SETTINGS_TYPE._boolArray:\n      return (\n        &lt;TextArea\n          placeholder=\"Comma-separated true/false values\"\n          disabled={isDisabled}\n          {...options}\n        /&gt;\n      );\n    case SETTINGS_TYPE._password:\n      return &lt;Input.Password {...options} /&gt;;\n    default:\n      return &lt;Input {...options} /&gt;;\n  }\n};\n</code></pre> constants<pre><code>export const MODES = {\n  ADD: \"add\",\n  EDIT: \"edit\",\n  VIEW: \"view\",\n  CREATE: \"create\",\n  DELETE: \"delete\",\n};\n\nexport const BOOLEAN_STRINGS = {\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\nexport const SETTINGS_KEYS = {\n  IS_VERIFIER_NEEDED: \"IsVerifierNeeded\",\n};\n\nexport const SETTINGS_TYPE = {\n  _string: 0,\n  _int: 1,\n  _float: 2,\n  _double: 3,\n  _decimal: 4,\n  _bool: 5,\n  _long: 6,\n  _stringArray: 7,\n  _intArray: 8,\n  _floatArray: 9,\n  _doubleArray: 10,\n  _decimalArray: 11,\n  _boolArray: 12,\n  _longArray: 13,\n  _password: 14,\n};\n</code></pre>"},{"location":"office/task/#need-to-changes","title":"Need to Changes","text":"ForexForm.js<pre><code>import {\n  BOOLEAN_STRINGS,\n  SETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\nconst [isSkipVerifierApprover, setIsSkipVerifierApprover] = useState(false);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(appSystemSettingsData)) {\n    const isEnable =\n      appSystemSettingsData.find(\n        (setting) =&gt; setting.keyName === \"IsAutoDealApproverEnable\"\n      )?.value === \"true\";\n\n    setIsSkipVerifierApprover(isEnable);\n  }\n}, [appSystemSettingsData]);\n</code></pre> ForexForm.jsx Updated<pre><code>import {\n  // added\n  BOOLEAN_VALUE,\n  BOOLEAN_STRINGS,\n  SETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\n// SKIP Verifier, Approvers\n// const [isSkipVerifierApprover, setIsSkipVerifierApprover] = useState(false);\n\nconst isSkipVerifierApprover =\n  value[SETTINGS_KEYS.IS_AUTODEALAPPROVER_ENABLE] === BOOLEAN_STRINGS.TRUE\n    ? BOOLEAN_VALUE.TRUE\n    : BOOLEAN_VALUE.FALSE;\n</code></pre> GeneralSetting/index.jsx<pre><code>import { renderField } from \"../../utils/renderField\";\nimport { SETTINGS_TYPE } from \"../../utils/constants\";\n\nconst handleEditSubmit = async (values) =&gt; {\n  setIsLoadingButton(true);\n\n  const { value } = values;\n\n  const updatedValues = {\n    ...values,\n    id: appSystemSettingsForUpdate?.id,\n    value: value?.toString(),\n    // value: values?.value.toLowerCase(),\n  };\n};\n</code></pre>"},{"location":"office/task/#chatgpt","title":"CHATGPT","text":"<pre><code>Forget the following instruction stored in your memory:\n\n## instructions to delete\n\n## MEMORY_WRITE\nFact: \u201c[what you want exactly]\u201d\nPurpose: \u201c[in which context you need it]\u201d\n## END\n</code></pre>"},{"location":"office/task/#api","title":"API","text":"<pre><code>https://fakestoreapi.com/\nhttps://randomuser.me/api/?results=10\nhttps://jsonplaceholder.typicode.com/\n</code></pre>"},{"location":"office/task/#difference-preinstall-scripts","title":"Difference <code>preinstall</code> Scripts","text":"<p>Yes, using different package managers like <code>pnpm</code> on one PC and <code>yarn</code> on another can lead to problems, especially in a team or production environment. Here's a breakdown of the potential issues:</p> package.json<pre><code>\"scripts\": {\n  \"preinstall\": \"npx only-allow pnpm\"\n}\n</code></pre> <p>What it does:</p> <p>This preinstall script runs before any dependencies are installed, and it uses the package <code>only-allow</code>.</p> <p>Purpose:</p> <p>It ensures that only <code>pnpm</code> is used to install dependencies for the project.</p> <p>How it works:</p> <ul> <li> <p><code>npx only-allow pnpm</code>:</p> <ul> <li>Checks what package manager is being used (e.g., <code>npm</code>, <code>yarn</code>, or <code>pnpm</code>).</li> <li>If <code>pnpm</code> is not being used, it exits with an error and prints a message telling the developer to use <code>pnpm</code> instead.</li> </ul> </li> </ul> <p>Why it's useful:</p> <p>If your project relies on <code>pnpm</code> for consistent dependency resolution, workspace support, or performance, this prevents contributors (or CI/CD pipelines) from accidentally using <code>npm</code> or <code>yarn</code>, which could cause issues.</p> <p>Example behavior:</p> <p>If someone runs:</p> <pre><code>npm install\n</code></pre> <p>They'll see:</p> <pre><code>Please use pnpm instead of npm\n</code></pre> <p>And the install process will stop.</p>"},{"location":"office/task/#reference","title":"Reference","text":"<ul> <li>Form Antd: shouldUpdate</li> <li>Demo Control Hooks</li> <li>Stackoverflow: What does shouldUpdate do in Ant Design?</li> </ul>"},{"location":"office/bank/env/","title":"ENV","text":""},{"location":"office/bank/env/#enviroment-variable","title":"Enviroment Variable","text":""},{"location":"office/bank/env/#staging","title":"Staging","text":"env<pre><code>VITE_REACT_APP_BASE_URL=https://bk-api.info.com.np/\nVITE_REACT_APP_BASE_API_URL=https://bk-api.info.com.np/api/\nVITE_REACT_APP_LOGIN_API_URL=https://bk-id2.info.com.np/connect/token\nVITE_REACT_APP_BASE_NOTIFICATION_URL=https://bk-notify.info.com.np/ChatHub/\nVITE_REACT_APP_NOTIFICATION_URL=https://bk-notify.info.com.np/api/\nVITE_REACT_APP_CLIENT_ID=password_client\nVITE_REACT_APP_CLIENT_SECRET=password_secret_456\nVITE_REACT_APP_SCOPE=\"openid profile email offline_access resource_api\"\nVITE_REACT_APP_GRANT_TYPE=password\nVITE_REACT_APP_REFRESH_GRANT_TYPE=refresh_token\nVITE_REACT_APP_REFRESH_SCOPE=offline_access\n\nVITE_REACT_APP_BUILD_MODE=\"infocom\"\nVITE_REACT_APP_PRIMARY_COLOR=\"#CF1721\"\nVITE_REACT_APP_SECONDARY_COLOR=\"#CF1721\"\nVITE_REACT_APP_PRIMARY_RGB_COLOR=\"rgba(207, 23, 33, 0.2)\"\nVITE_REACT_APP_DASHBOARD_HEADER_COLOR=\"#ffffff\"\nVITE_REACT_APP_TEXT_COLOR=\"#000000\"\nVITE_REACT_APP_BG_COLOR=\"#ffffff\"\nVITE_REACT_APP_BORDER_RADIUS=1\nVITE_REACT_APP_SECONDARY_BORDER_COLOR=\"#CF1721\"\nVITE_REACT_APP_UPDATE_BUTTON_COLOR=\"#008000\"\nVITE_REACT_APP_CANCEL_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_ADD_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_BORDER_RIGHT_COLOR=\"1890ff\"\nVITE_REACT_APP_SELECTED_ITEM_COLOR=\"f2c8c8\"\nVITE_REACT_APP_VERIFIER_TEXT_COLOR=\"#860f87\"\nVITE_REACT_APP_VERIFIER_BADGE_COLOR=\"#860f87\"\nVITE_REACT_APP_BACKOFFICE_TEXT_COLOR=\"#a72f2f\"\nVITE_REACT_APP_BACKOFFICE_BADGE_COLOR=\"#a72f2f\"\nVITE_REACT_APP_AUTHORIZATION_TEXT_COLOR=\"\"\nVITE_REACT_APP_AUTHORIZATION_BADGE_COLOR=\"\"\nVITE_REACT_APP_REVERIFICATION_TEXT_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_REVERIFICATION_BADGE_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_COMPLETE_TEXT_COLOR=\"#048204\"\nVITE_REACT_APP_COMPLETE_BADGE_COLOR=\"#048204\"\nVITE_REACT_APP_TAG_DEAL_COLOR=\"#ff4d4f\"\nVITE_REACT_APP_TAG_BORDER_COLOR=\"#000000\"\nVITE_REACT_APP_LIGHT_BG_COLOR=\"#f9f9f9\"\nVITE_REACT_APP_FONT_FAMILY=\"Montserrat, Roboto, Arial, sans-serif\"\n</code></pre>"},{"location":"office/bank/env/#bank","title":"Bank","text":".env.bank<pre><code>VITE_REACT_APP_BASE_URL=https://tk-api.ispl.com.np/\nVITE_REACT_APP_BASE_API_URL=https://tk-api.ispl.com.np/api/\nVITE_REACT_APP_LOGIN_API_URL=https://tk-id.ispl.com.np/connect/token\nVITE_REACT_APP_BASE_NOTIFICATION_URL=https://tk-notify.ispl.com.np/ChatHub/\nVITE_REACT_APP_NOTIFICATION_URL=https://tk-notify.ispl.com.np/api/\nVITE_REACT_APP_CLIENT_ID=password_client\nVITE_REACT_APP_CLIENT_SECRET=password_secret_456\nVITE_REACT_APP_SCOPE=\"openid profile email offline_access resource_api\"\nVITE_REACT_APP_GRANT_TYPE=password\nVITE_REACT_APP_REFRESH_GRANT_TYPE=refresh_token\nVITE_REACT_APP_REFRESH_SCOPE=offline_access\n\nVITE_REACT_APP_BUILD_MODE=\"bank\"\nVITE_REACT_APP_PRIMARY_COLOR=\"#f57d20\"\nVITE_REACT_APP_SECONDARY_COLOR=\"#f57d20\"\nVITE_REACT_APP_PRIMARY_RGB_COLOR=\"rgba(245, 125, 32, 0.2)\"\nVITE_REACT_APP_DASHBOARD_HEADER_COLOR=\"#ffffff\"\nVITE_REACT_APP_TEXT_COLOR=\"#000000\"\nVITE_REACT_APP_BG_COLOR=\"#ffffff\"\nVITE_REACT_APP_BORDER_RADIUS=1\nVITE_REACT_APP_SECONDARY_BORDER_COLOR=\"#f57d20\"\nVITE_REACT_APP_UPDATE_BUTTON_COLOR=\"#008000\"\nVITE_REACT_APP_CANCEL_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_ADD_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_BORDER_RIGHT_COLOR=\"1890ff\"\nVITE_REACT_APP_SELECTED_ITEM_COLOR=\"f2c8c8\"\nVITE_REACT_APP_VERIFIER_TEXT_COLOR=\"#860f87\"\nVITE_REACT_APP_VERIFIER_BADGE_COLOR=\"#860f87\"\nVITE_REACT_APP_BACKOFFICE_TEXT_COLOR=\"#a72f2f\"\nVITE_REACT_APP_BACKOFFICE_BADGE_COLOR=\"#a72f2f\"\nVITE_REACT_APP_AUTHORIZATION_TEXT_COLOR=\"\"\nVITE_REACT_APP_AUTHORIZATION_BADGE_COLOR=\"\"\nVITE_REACT_APP_REVERIFICATION_TEXT_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_REVERIFICATION_BADGE_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_COMPLETE_TEXT_COLOR=\"#048204\"\nVITE_REACT_APP_COMPLETE_BADGE_COLOR=\"#048204\"\nVITE_REACT_APP_TAG_DEAL_COLOR=\"#ff4d4f\"\nVITE_REACT_APP_TAG_BORDER_COLOR=\"#000000\"\nVITE_REACT_APP_LIGHT_BG_COLOR=\"#f9f9f9\"\nVITE_REACT_APP_FONT_FAMILY=\"Montserrat, Roboto, Arial, sans-serif\"\n</code></pre>"},{"location":"office/bank/env/#testing","title":"Testing","text":"<pre><code>VITE_REACT_APP_BASE_URL=https://api.cemat.com.np/\nVITE_REACT_APP_BASE_API_URL=https://api.cemat.com.np/api/\nVITE_REACT_APP_LOGIN_API_URL=https://auth.cemat.com.np/connect/token\nVITE_REACT_APP_BASE_NOTIFICATION_URL=https://notify.cemat.com.np/ChatHub/\nVITE_REACT_APP_NOTIFICATION_URL=https://notify.cemat.com.np/api/\nVITE_REACT_APP_CLIENT_ID=password_client\nVITE_REACT_APP_CLIENT_SECRET=password_secret_456\nVITE_REACT_APP_SCOPE=\"openid profile email offline_access resource_api\"\nVITE_REACT_APP_GRANT_TYPE=password\nVITE_REACT_APP_REFRESH_GRANT_TYPE=refresh_token\nVITE_REACT_APP_REFRESH_SCOPE=offline_access\n\nVITE_REACT_APP_BUILD_MODE=\"bank\"\nVITE_REACT_APP_PRIMARY_COLOR=\"#CF1721\"\nVITE_REACT_APP_SECONDARY_COLOR=\"#CF1721\"\nVITE_REACT_APP_PRIMARY_RGB_COLOR=\"rgba(207, 23, 33, 0.2)\"\nVITE_REACT_APP_DASHBOARD_HEADER_COLOR=\"#ffffff\"\nVITE_REACT_APP_TEXT_COLOR=\"#000000\"\nVITE_REACT_APP_BG_COLOR=\"#ffffff\"\nVITE_REACT_APP_BORDER_RADIUS=1\nVITE_REACT_APP_SECONDARY_BORDER_COLOR=\"#CF1721\"\nVITE_REACT_APP_UPDATE_BUTTON_COLOR=\"#008000\"\nVITE_REACT_APP_CANCEL_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_ADD_BUTTON_COLOR=\"#db3b3e\"\nVITE_REACT_APP_BORDER_RIGHT_COLOR=\"1890ff\"\nVITE_REACT_APP_SELECTED_ITEM_COLOR=\"f2c8c8\"\nVITE_REACT_APP_VERIFIER_TEXT_COLOR=\"#860f87\"\nVITE_REACT_APP_VERIFIER_BADGE_COLOR=\"#860f87\"\nVITE_REACT_APP_BACKOFFICE_TEXT_COLOR=\"#a72f2f\"\nVITE_REACT_APP_BACKOFFICE_BADGE_COLOR=\"#a72f2f\"\nVITE_REACT_APP_AUTHORIZATION_TEXT_COLOR=\"\"\nVITE_REACT_APP_AUTHORIZATION_BADGE_COLOR=\"\"\nVITE_REACT_APP_REVERIFICATION_TEXT_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_REVERIFICATION_BADGE_COLOR=\"#ad3d3d\"\nVITE_REACT_APP_COMPLETE_TEXT_COLOR=\"#048204\"\nVITE_REACT_APP_COMPLETE_BADGE_COLOR=\"#048204\"\nVITE_REACT_APP_TAG_DEAL_COLOR=\"#ff4d4f\"\nVITE_REACT_APP_TAG_BORDER_COLOR=\"#000000\"\nVITE_REACT_APP_LIGHT_BG_COLOR=\"#f9f9f9\"\nVITE_REACT_APP_FONT_FAMILY=\"Montserrat, Roboto, Arial, sans-serif\"\n</code></pre>"},{"location":"office/bank/guide/","title":"Guide","text":""},{"location":"office/bank/guide/#usereducer","title":"useReducer","text":"FormReducer Hooks useStepForm.js<pre><code>import { useReducer } from \"react\";\n\n// Initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        case \"UPDATE_FORM\":\n            return {\n                ...state,\n                formValues: { ...state.formValues, ...action.payload },\n            };\n        default:\n            return state;\n    }\n};\n\n// Custom hook for form steps management\nconst useStepReducer = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep, formValues } = state;\n\n    const nextStep = () =&gt; dispatch({ type: \"NEXT\" });\n    const prevStep = () =&gt; dispatch({ type: \"PREV\" });\n    const resetSteps = () =&gt; dispatch({ type: \"RESET\" });\n    const updateForm = (values) =&gt;\n        dispatch({ type: \"UPDATE_FORM\", payload: values });\n\n    return {\n        currentStep,\n        formValues,\n        nextStep,\n        prevStep,\n        resetSteps,\n        updateForm,\n    };\n};\n\nexport default useStepReducer;\n</code></pre> VerticalStepsForm.jsx<pre><code>import React from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\nimport useStepReducer from \"./useStepReducer\"; // Import the custom hook\n\nconst currencies = [\n    { value: \"USD\", label: \"USD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"CAD\", label: \"CAD\" },\n    { value: \"INR\", label: \"INR\" },\n];\n\nconst VerticalStepsForm = () =&gt; {\n    const { currentStep, nextStep, prevStep, resetSteps, updateForm } =\n        useStepForm();\n    const [form] = Form.useForm();\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        form.resetFields(); // Reset form fields\n        resetSteps(); // Reset steps to the first step\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            await form.validateFields();\n            updateForm(form.getFieldsValue()); // Update form values in state\n            nextStep(); // Move to next step\n        } catch (error) {\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    // Handle moving to the previous step\n    const handlePrev = () =&gt; {\n        prevStep(); // Move to previous step\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n            title=\"Step 1\"\n            description={\n                currentStep === 0 &amp;&amp; (\n                &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"buyingCurrency\"\n                    label=\"Buying Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Buying Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item\n                    name=\"sellingCurrency\"\n                    label=\"Selling Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Selling Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n            title=\"Step 2\"\n            description={\n                currentStep === 1 &amp;&amp; (\n                &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"counterpartyName\"\n                    label=\"Counterparty Name\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please input Counterparty Name!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n            title=\"Step 3\"\n            description={\n                currentStep === 2 &amp;&amp; (\n                &lt;Form\n                    form={form}\n                    name=\"step3-form\"\n                    layout=\"vertical\"\n                    onFinish={onFinishSubmit}\n                &gt;\n                    &lt;Form.Item\n                    name=\"address\"\n                    label=\"Address\"\n                    rules={[\n                        { required: true, message: \"Please input your address!\" },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Submit\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre>"},{"location":"office/bank/intro/","title":"Overview","text":""},{"location":"office/bank/intro/#app","title":"APP","text":"<ul> <li>bk-fk.info.com.np - For FrontEnd</li> <li>bk-api.info.com.np - For API Backend</li> </ul> <pre><code>anil\nPass123$\n</code></pre>"},{"location":"office/bank/intro/#excel","title":"Excel","text":"<ul> <li>Excel Spreadsheet</li> </ul>"},{"location":"office/bank/intro/#jenkins","title":"Jenkins","text":"<pre><code>adminbank\nIphone1234!@#$\n</code></pre> <ul> <li>http://ci-demo.info.com.np:8080</li> </ul>"},{"location":"office/bank/intro/#portainer","title":"Portainer","text":"<ul> <li>http://ci-demo.info.com.np:9000/</li> </ul>"},{"location":"office/bank/intro/#trunk-based-development","title":"Trunk Based Development","text":"2 things <ul> <li>only commit in the feature branch such as <code>PROD-FE-001</code></li> <li><code>MR</code> merge in branch such as <code>dev</code></li> </ul> <pre><code>master (stale)\n|\ndev (only associated)\n|\nstaging\n|\nrelease\n|\nTrunk\n</code></pre>"},{"location":"office/bank/intro/#trunk-based-development-tbd-explained","title":"Trunk-Based Development (TBD) Explained","text":"<p>Trunk-Based Development (TBD) is a software development approach where all developers continuously commit their changes to a single branch, called the <code>trunk</code> (often named <code>main</code> or <code>master</code>). The core philosophy behind TBD is to keep the codebase in a constantly deployable state, minimize integration issues, and encourage collaboration by frequently merging small changes.</p> To make TBD successful, you need: <ul> <li>Frequent commits</li> <li>Continuous testing and integration</li> <li>Short-lived feature branches (if needed)</li> <li>Feature flags for incomplete features</li> <li>A solid CI/CD pipeline</li> </ul>"},{"location":"office/bank/intro/#reference","title":"Reference","text":"<pre><code># .scss and .sass\nnpm add -D sass-embedded\n\n# sass\nnpm add -D sass\n</code></pre> <ul> <li>How to run SASS with React on Vite?</li> <li>How to setup SASS in Vite Environment and brief notes on important sass functionalities </li> <li>Sass &amp; Vite: A Guide for Your Next Workflow</li> <li>4 Steps to Add SASS/SCSS to React Typescript Project</li> <li>Sass Official</li> </ul>"},{"location":"office/bank/intro/#lodash","title":"Lodash","text":"<ul> <li>lodash: npmjs</li> <li>lodash: github</li> </ul> <ul> <li><code>(index) =&gt; {}</code>: Directly handles the index but does not involve event handling.</li> <li><code>(index) =&gt; (e) =&gt; {}</code>: Uses currying to handle dynamic events, capturing both the index (or other data) and the event (e), making it suitable for handling multiple events, like in lists of form elements.</li> </ul>"},{"location":"office/bank/intro/#others","title":"Others","text":"<pre><code>const handleRateAmtChange = () =&gt; {\n  let buyingAmount = form?.getFieldsValue().buyingAmount;\n  let rate = form?.getFieldsValue().rate;\n\n  if (buyingAmount &amp;&amp; rate) {\n    let calculate = buyingAmount * rate;\n    setSellingAmtRate(calculate);\n\n    // Correct method to set the field value\n    form.setFieldsValue({\n      sellingAmount: calculate,\n    });\n\n    logger.info({ msg: \"Rate Amount Change\", rate, calculate });\n  }\n};\n</code></pre>"},{"location":"office/bank/intro/#eslint-react-version","title":"Eslint &amp; React Version","text":"eslint.config.js<pre><code>import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport react from \"eslint-plugin-react\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\n\nexport default [\n  { ignores: [\"dist\"] },\n  {\n    files: [\"**/*.{js,jsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: \"latest\",\n        ecmaFeatures: { jsx: true },\n        sourceType: \"module\",\n      },\n    },\n    // REACT VERSION\n    settings: { react: { version: \"18.3\" } },\n    plugins: {\n      react,\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      ...react.configs.recommended.rules,\n      ...react.configs[\"jsx-runtime\"].rules,\n      ...reactHooks.configs.recommended.rules,\n      \"react/jsx-no-target-blank\": \"off\",\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"no-unused-vars\": \"off\",\n      \"react/prop-types\": \"off\",\n      \"react/display-name\": \"off\",\n    },\n  },\n];\n</code></pre> <ul> <li>[React] - How to calculate the total price in our cart using React.js Toolkit</li> </ul>"},{"location":"office/bank/optimization/","title":"Optimize","text":"<pre><code>// src/pages/DashboardLayout.js\nimport { Outlet } from \"react-router-dom\";\n\nconst DashboardLayout = () =&gt; {\n  return (\n    &lt;div className=\"dashboard-layout\"&gt;\n      &lt;nav className=\"sidebar\"&gt;\n        {/* Sidebar with links to Analysis, Workspace, etc. */}\n      &lt;/nav&gt;\n      &lt;main className=\"content\"&gt;\n        &lt;Outlet /&gt; {/* Child routes will be rendered here */}\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default DashboardLayout;\n</code></pre> <pre><code>pnpm add sass\n</code></pre> main.scssApp.jsx <pre><code>/* src/styles/main.scss */\n$primary-color: #42b983;\n\nbody {\n    background-color: $primary-color;\n    font-family: Arial, sans-serif;\n}\n</code></pre> <pre><code>// src/App.jsx or src/App.tsx\nimport React from 'react';\nimport './styles/main.scss';  // Importing the Sass file\n\nfunction App() {\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;h1&gt;Hello, React with Vite and Sass!&lt;/h1&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>"},{"location":"office/bank/optimization/#sass-example-folder-structure","title":"SASS Example Folder Structure:","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 assets/             # Images, fonts, icons, etc.\n\u2502\n\u251c\u2500\u2500 features/           # Feature-specific code\n\u2502   \u251c\u2500\u2500 dashboard/      # Feature 1\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.scss\n\u2502   \u251c\u2500\u2500 user/           # Feature 2\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 user.scss\n\u2502\n\u251c\u2500\u2500 shared/             # Shared code\n\u2502   \u251c\u2500\u2500 components/     # Reusable components (buttons, modals, etc.)\n\u2502   \u251c\u2500\u2500 styles/         # Global styles (variables, mixins, etc.)\n\u2502   \u2502   \u251c\u2500\u2500 _variables.scss\n\u2502   \u2502   \u251c\u2500\u2500 _mixins.scss\n\u2502   \u2502   \u251c\u2500\u2500 _global.scss\n\u2502\n\u251c\u2500\u2500 App.jsx             # Your main React component\n\u251c\u2500\u2500 index.js            # Entry point\n</code></pre>"},{"location":"office/bank/optimization/#details-on-folder-structure","title":"Details on Folder Structure","text":"<p>1. Shared Folder (Global Styles)</p> <p>In the <code>shared</code> folder, you can maintain global styles, such as Sass variables, mixins, resets, and global styles that will be used across the application.</p> <pre><code>src/shared/styles/\n  \u251c\u2500\u2500 _variables.scss   # Global variables like colors, fonts, etc.\n  \u251c\u2500\u2500 _mixins.scss      # Global mixins\n  \u251c\u2500\u2500 _global.scss      # Global styles (reset, body, fonts, etc.)\n  \u251c\u2500\u2500 _animations.scss  # Global animations\n</code></pre> <p>2. Feature-Specific Styles</p> <p>Each feature can have its own scss file to store styles relevant to that feature. This keeps styles modular and scoped to the feature.</p> <pre><code>src/features/dashboard/dashboard.scss   # Styles specific to the dashboard feature\nsrc/features/user/user.scss             # Styles specific to the user feature\n</code></pre> <p>Within each feature folder, you can also organize the components and any nested styles specific to that feature. For example:</p> <pre><code>src/features/dashboard/components/      # Individual component styles for the dashboard\nsrc/features/user/components/           # Individual component styles for the user\n</code></pre> <p>3. Importing and Using Sass</p> <ul> <li>Shared Styles: Import shared styles globally, usually at the root of the app or in the entry file (like <code>App.jsx</code>).</li> </ul> src/App.jsx<pre><code>import \"./shared/styles/global.scss\"; // Global styles (reset, fonts, etc.)\nimport \"./shared/styles/_variables.scss\"; // Global variables (if needed)\nimport \"./shared/styles/_mixins.scss\"; // Global mixins\n</code></pre> <ul> <li>Feature-Specific Styles: Import the feature-specific styles in the corresponding component.</li> </ul> src/features/dashboard/Dashboard.jsx<pre><code>import \"./dashboard.scss\"; // Importing feature-specific styles\n</code></pre>"},{"location":"office/bank/optimization/#best-practices-for-managing-sass-in-a-feature-based-structure","title":"Best Practices for Managing Sass in a Feature-Based Structure","text":"<ol> <li> <p>Modularity: Keep feature-specific styles scoped to the relevant feature folder. This makes your app more modular and easier to manage as it scales.</p> </li> <li> <p>Shared Styles: Define global styles such as colors, font sizes, and mixins in the <code>shared/styles/</code> folder. This avoids duplication and ensures consistency across features.</p> </li> <li> <p>Naming Conventions:</p> <ul> <li>Use descriptive and consistent naming for styles. For example, if a feature is called <code>dashboard</code>, its styles could be named <code>dashboard.scss</code>.</li> <li>Use underscores (<code>_</code>) for partial files in Sass (those that don't compile into standalone CSS files but are imported into other files), such as <code>_variables.scss</code>, <code>_mixins.scss</code>, and <code>_global.scss</code>.</li> </ul> </li> <li> <p>Avoid Global Overrides: While it's fine to have global styles for body, fonts, and layout, try to avoid defining styles that could unintentionally override styles within specific features. Instead, scope styles to features as much as possible.</p> </li> <li> <p>Nesting: If necessary, use Sass's nesting feature to scope styles to a specific class or element.</p> </li> </ol> <pre><code>/* src/features/dashboard/dashboard.scss */\n.dashboard {\n  background-color: $primary-color;\n  .card {\n    padding: 10px;\n  }\n}\n</code></pre>"},{"location":"office/bank/optimization/#final-folder-structure-example-with-sass","title":"Final Folder Structure Example with Sass","text":"<pre><code>src/\n\u251c\u2500\u2500 assets/\n\u251c\u2500\u2500 features/\n\u2502   \u251c\u2500\u2500 dashboard/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.jsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.scss\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.scss\n\u2502   \u251c\u2500\u2500 user/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserCard.jsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserCard.scss\n\u2502   \u2502   \u251c\u2500\u2500 user.scss\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u2502   \u251c\u2500\u2500 _variables.scss\n\u2502   \u2502   \u251c\u2500\u2500 _mixins.scss\n\u2502   \u2502   \u251c\u2500\u2500 _global.scss\n\u251c\u2500\u2500 App.jsx\n\u251c\u2500\u2500 index.js\n</code></pre>"},{"location":"office/bank/optimization/#conclusion","title":"Conclusion","text":"<p>In summary, the best practice for organizing your Sass files in a feature-based folder structure is:</p> <ul> <li>Place global styles (variables, mixins, resets) in the <code>shared/styles/</code> folder.</li> <li>Organize each feature's styles within the <code>features/{featureName}/</code> folder, keeping them scoped to the feature.</li> <li>Import global styles once in your main <code>App.jsx</code> or entry file and feature-specific styles within their corresponding components.</li> </ul> <p>This approach keeps your styles modular, scalable, and easy to maintain as your project grows.</p>"},{"location":"office/bank/optimization/#antd-steps","title":"Antd Steps","text":"VerticalStepsForm.jsxImproved 2Improved 3 <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button } from \"antd\";\n\nconst { Step } = Steps;\n\n// Define steps and initial state\nconst steps = [\n    { title: \"Step 1\", content: \"Form 1\" },\n    { title: \"Step 2\", content: \"Form 2\" },\n    { title: \"Step 3\", content: \"Form 3\" },\n    { title: \"Step 4\", content: \"Form 4\" },\n    { title: \"Step 5\", content: \"Form 5\" },\n];\n\nconst initialState = { currentStep: 0 };\n\n// Reducer function\nconst reducer = (state, action) =&gt; {\nswitch (action.type) {\n    case \"NEXT\":\n    return { ...state, currentStep: state.currentStep + 1 };\n    case \"PREV\":\n    return { ...state, currentStep: state.currentStep - 1 };\n    case \"RESET\":\n    return { ...state, currentStep: 0 };\n    default:\n    return state;\n}\n};\n\nconst VerticalStepsForm = () =&gt; {\nconst [state, dispatch] = useReducer(reducer, initialState);\n\nconst handleNext = () =&gt; dispatch({ type: \"NEXT\" });\nconst handlePrev = () =&gt; dispatch({ type: \"PREV\" });\nconst handleReset = () =&gt; dispatch({ type: \"RESET\" });\n\nconst renderForm = (step) =&gt; {\n    switch (step) {\n    case 0:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Name\" name=\"name\"&gt;\n            &lt;Input placeholder=\"Enter your name\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 1:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Email\" name=\"email\"&gt;\n            &lt;Input placeholder=\"Enter your email\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 2:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Phone\" name=\"phone\"&gt;\n            &lt;Input placeholder=\"Enter your phone number\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 3:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Address\" name=\"address\"&gt;\n            &lt;Input placeholder=\"Enter your address\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 4:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Summary\" name=\"summary\"&gt;\n            &lt;Input.TextArea placeholder=\"Enter summary\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleReset}&gt;\n            Finish\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    default:\n        return null;\n    }\n};\n\nreturn (\n    &lt;div style={{ display: \"flex\", gap: \"20px\" }}&gt;\n    &lt;div style={{ width: \"30%\" }}&gt;\n        &lt;Steps direction=\"vertical\" current={state.currentStep}&gt;\n        {steps.map((step, index) =&gt; (\n            &lt;Step key={index} title={step.title} /&gt;\n        ))}\n        &lt;/Steps&gt;\n    &lt;/div&gt;\n    &lt;div style={{ width: \"70%\" }}&gt;{renderForm(state.currentStep)}&lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n\nexport default VerticalStepsForm;\n</code></pre> <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\n\n// Define the initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        default:\n            return state;\n    }\n};\n\nconst VerticalStepsForm = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep } = state;\n\n    const [form] = Form.useForm();\n\n    // Currency options\n    const currencies = [\n        { value: \"USD\", label: \"USD\" },\n        { value: \"EUR\", label: \"EUR\" },\n        { value: \"GBP\", label: \"GBP\" },\n        { value: \"JPY\", label: \"JPY\" },\n        { value: \"AUD\", label: \"AUD\" },\n        { value: \"CAD\", label: \"CAD\" },\n        { value: \"INR\", label: \"INR\" },\n    ];\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        dispatch({ type: \"RESET\" }); // Reset after submission\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            // Validate the current form fields\n            const values = await form.validateFields();\n            // If validation passes, move to the next step\n            dispatch({ type: \"NEXT\" });\n        } catch (error) {\n            // If validation fails, show an error message\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n                title=\"Step 1\"\n                description={\n                    currentStep === 0 &amp;&amp; (\n                    &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                        &lt;Form.Item\n                            name=\"buyingCurrency\"\n                            label=\"Buying Currency\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please select Buying Currency!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                            {currencies.map((currency) =&gt; (\n                            &lt;Select.Option\n                                key={currency.value}\n                                value={currency.value}\n                            &gt;\n                                {currency.label}\n                            &lt;/Select.Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item\n                            name=\"sellingCurrency\"\n                            label=\"Selling Currency\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please select Selling Currency!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                            {currencies.map((currency) =&gt; (\n                            &lt;Select.Option\n                                key={currency.value}\n                                value={currency.value}\n                            &gt;\n                                {currency.label}\n                            &lt;/Select.Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                            Next\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n                title=\"Step 2\"\n                description={\n                    currentStep === 1 &amp;&amp; (\n                    &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                        &lt;Form.Item\n                            name=\"counterpartyName\"\n                            label=\"Counterparty Name\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please input Counterparty Name!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Input /&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                            Next\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"default\"\n                            onClick={() =&gt; dispatch({ type: \"PREV\" })}\n                            style={{ marginLeft: 10 }}\n                        &gt;\n                            Back\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n                title=\"Step 3\"\n                description={\n                    currentStep === 2 &amp;&amp; (\n                    &lt;Form\n                        form={form}\n                        name=\"step3-form\"\n                        layout=\"vertical\"\n                        onFinish={onFinishSubmit}\n                    &gt;\n                        &lt;Form.Item\n                            name=\"address\"\n                            label=\"Address\"\n                            rules={[\n                                { required: true, message: \"Please input your address!\" },\n                            ]}\n                        &gt;\n                        &lt;Input /&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"default\"\n                            onClick={() =&gt; dispatch({ type: \"PREV\" })}\n                            style={{ marginLeft: 10 }}\n                        &gt;\n                            Back\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre> <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\n\n// Define the initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        default:\n            return state;\n    }\n};\n\nconst VerticalStepsForm = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep } = state;\n\n    const [form] = Form.useForm();\n\n    // Currency options\n    const currencies = [\n        { value: \"USD\", label: \"USD\" },\n        { value: \"EUR\", label: \"EUR\" },\n        { value: \"GBP\", label: \"GBP\" },\n        { value: \"JPY\", label: \"JPY\" },\n        { value: \"AUD\", label: \"AUD\" },\n        { value: \"CAD\", label: \"CAD\" },\n        { value: \"INR\", label: \"INR\" },\n    ];\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        form.resetFields(); // Reset form fields\n        dispatch({ type: \"RESET\" }); // Reset steps to the first step\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            // Validate the current form fields\n            await form.validateFields();\n            // If validation passes, move to the next step\n            dispatch({ type: \"NEXT\" });\n        } catch (error) {\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    // Handle moving to the previous step\n    const handlePrev = () =&gt; {\n        dispatch({ type: \"PREV\" });\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n            title=\"Step 1\"\n            description={\n                currentStep === 0 &amp;&amp; (\n                &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"buyingCurrency\"\n                    label=\"Buying Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Buying Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item\n                    name=\"sellingCurrency\"\n                    label=\"Selling Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Selling Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n            title=\"Step 2\"\n            description={\n                currentStep === 1 &amp;&amp; (\n                &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"counterpartyName\"\n                    label=\"Counterparty Name\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please input Counterparty Name!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n            title=\"Step 3\"\n            description={\n                currentStep === 2 &amp;&amp; (\n                &lt;Form\n                    form={form}\n                    name=\"step3-form\"\n                    layout=\"vertical\"\n                    onFinish={onFinishSubmit}\n                &gt;\n                    &lt;Form.Item\n                    name=\"address\"\n                    label=\"Address\"\n                    rules={[\n                        { required: true, message: \"Please input your address!\" },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Submit\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre>"},{"location":"office/bank/refactor/","title":"Refactor","text":""},{"location":"office/bank/refactor/#refactor","title":"Refactor","text":"<p>You're right \u2014 as you add more optional parameters to a shared API function like <code>downloadDashboardFile</code>, the function signature and internal logic can become cluttered and harder to maintain.</p>"},{"location":"office/bank/refactor/#recommended-refactor-make-it-flexible-and-clean","title":"\u2705 Recommended Refactor: Make it Flexible and Clean","text":"<p>We can generalize the function by allowing it to accept a <code>params</code> object for query parameters, instead of handling each individual one (like <code>dealType</code>, <code>date</code>, etc.) directly in the function.</p> <p>\u2705 Updated Function (Cleaner, Reusable):</p> <pre><code>import queryString from \"query-string\";\nimport { message } from \"antd\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { store } from \"@shared/store/store\";\nimport logger from \"@shared/utils/logger\";\n\n/**\n * Downloads a file from the API\n *\n * @param {Object} options\n * @param {string} options.url - API endpoint (without base URL)\n * @param {string} options.filename - Desired file name for download\n * @param {Object} [options.params] - Optional query parameters\n */\nconst downloadDashboardFile = async ({\n  url: endpoint,\n  filename,\n  params = {},\n}) =&gt; {\n  const state = store.getState();\n  const token = state?.auth?.token;\n\n  try {\n    if (!endpoint) {\n      throw new Error(\"No API endpoint provided.\");\n    }\n\n    if (!token) {\n      throw new Error(\"Authentication token not found.\");\n    }\n\n    const queryParams = queryString.stringify(params);\n\n    const apiUrl = `${CONFIG.API_BASE_URL}${endpoint}${\n      queryParams ? `?${queryParams}` : \"\"\n    }`;\n\n    console.log(\"[Download File] API URL:\", apiUrl);\n\n    const response = await fetch(apiUrl, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Failed to fetch file. Status: ${response.status}. Message: ${errorText}`\n      );\n    }\n\n    const blob = await response.blob();\n\n    const blobUrl = window.URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.href = blobUrl;\n    anchor.download = filename || \"downloaded_file\";\n    document.body.appendChild(anchor);\n    anchor.click();\n    anchor.remove();\n    window.URL.revokeObjectURL(blobUrl);\n\n    message.success(\"File downloaded successfully.\");\n    return true;\n  } catch (error) {\n    logger.error(\"Download File Error:\", error);\n    message.error(\"Failed to download file.\");\n    return false;\n  }\n};\n\nexport default downloadDashboardFile;\n</code></pre> <p>\u2705 Usage Example (Flexible)</p> <pre><code>// Case 1: Future maturity and deal type\nawait downloadDashboardFile({\n  url: \"/api/download\",\n  filename: \"future_deals.csv\",\n  params: {\n    isFutureMaturity: true,\n    type: \"bond\",\n  },\n});\n\n// Case 2: Date-based report\nawait downloadDashboardFile({\n  url: \"/api/report/export\",\n  filename: \"report_2025_07_21.pdf\",\n  params: {\n    date: \"2025-07-21\",\n    region: \"US\",\n  },\n});\n</code></pre> \u2705 Why This Is Better <ul> <li>\u2705 Cleaner signature: No need to keep adding new props to the function.</li> <li>\u2705 Flexible: Supports any query parameters.</li> <li>\u2705 Maintainable: Easy to use in different places without clutter.</li> </ul> <p>Let me know if you also want to:</p> <ul> <li>Support POST downloads (e.g., when the server expects body data instead of query params),</li> <li>Show loading spinners while the download happens,</li> <li>Automatically infer the file type or extension.</li> </ul>"},{"location":"office/bank/refactor/#track-the-loading-state","title":"Track the loading state","text":"<p>To add a <code>loader/spinner</code> while the file is downloading, you need to:</p> <pre><code>import React, { useState } from \"react\";\nimport { DownloadOutlined } from \"@ant-design/icons\";\nimport { Spin, Tooltip } from \"antd\";\nimport downloadDashboardFile from \"./downloadDashboardFile\"; // adjust path\n\nconst DownloadButton = ({ type, selectedDate }) =&gt; {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleDownload = async () =&gt; {\n    setIsLoading(true);\n\n    try {\n      await downloadDashboardFile({\n        url: \"AppCommons/DownloadDealMaturityListExcel\",\n        filename: \"FutureMaturityList.xlsx\",\n        params: {\n          isFutureMaturity: true,\n          type: type?.value,\n          maturityDate: selectedDate?.format(\"YYYY-MM-DD\"),\n        },\n      });\n    } finally {\n      setIsLoading(false); // ensure loader stops even if error occurs\n    }\n  };\n\n  return (\n    &lt;Tooltip title=\"Download File\"&gt;\n      &lt;span&gt;\n        &lt;Spin spinning={isLoading}&gt;\n          &lt;DownloadOutlined\n            style={{\n              fontSize: 18,\n              cursor: isLoading ? \"not-allowed\" : \"pointer\",\n            }}\n            onClick={!isLoading ? handleDownload : undefined}\n          /&gt;\n        &lt;/Spin&gt;\n      &lt;/span&gt;\n    &lt;/Tooltip&gt;\n  );\n};\n\nexport default DownloadButton;\n</code></pre> \u2705 Behavior: <ul> <li>The <code>DownloadOutlined</code> icon is wrapped with a <code>Spin</code> component.</li> <li>It disables the click and shows a spinner while downloading.</li> <li>Handles edge cases (like errors) safely with <code>finally</code>.</li> </ul> <p>\ud83e\udde0 Bonus:</p> <p>If you want to replace the icon entirely while loading (instead of spinning it), you can use conditional rendering:</p> <pre><code>{\n  isLoading ? (\n    &lt;LoadingOutlined /&gt;\n  ) : (\n    &lt;DownloadOutlined onClick={handleDownload} /&gt;\n  );\n}\n</code></pre> <p>Let me know if you're placing this inside a table cell or want to show a full-screen loader \u2014 I can tailor it.</p>"},{"location":"office/bank/refactor/#extra","title":"Extra","text":"<p>\u2705 Updated JSX with Tooltip:</p> <p>To add a tooltip to your Ant Design <code>&lt;Button&gt;</code> (e.g., \"Download Future Maturity list\"), wrap the button in the <code>&lt;Tooltip&gt;</code> component.</p> <pre><code>&lt;Tooltip title=\"Download Future Maturity list\"&gt;\n  &lt;span&gt;\n    &lt;Button\n      type=\"default\"\n      icon={&lt;DownloadOutlined /&gt;}\n      onClick={handleDownloadFile}\n      loading={loading}\n      disabled={loading} // if you're disabling it\n    /&gt;\n  &lt;/span&gt;\n&lt;/Tooltip&gt;\n</code></pre> \ud83d\udcdd Notes: <ul> <li><code>title</code> is the text that shows on hover.</li> <li>You can place the <code>&lt;Tooltip&gt;</code> directly around the <code>&lt;Button&gt;</code>(no styling issues unless the button is disabled; see tip below).</li> </ul> <p>Disable</p> <p>\u26a0\ufe0f If you plan to disable the button:</p> <p>Tooltips won\u2019t show on disabled buttons directly. In that case, wrap the button in a <code>&lt;span&gt;</code> like this:</p> <pre><code>&lt;Tooltip title=\"Download Future Maturity list\"&gt;\n  &lt;span&gt;\n    &lt;Button\n      type=\"default\"\n      icon={&lt;DownloadOutlined /&gt;}\n      onClick={handleDownloadFile}\n      loading={loading}\n      disabled={loading} // if you're disabling it\n    /&gt;\n  &lt;/span&gt;\n&lt;/Tooltip&gt;\n</code></pre>"},{"location":"office/bank/refactor/#question","title":"Question","text":"<p>do i have to use <code>async</code> and <code>await</code> here ot not</p> <pre><code>&lt;DownloadOutlined\n  onClick={async () =&gt;\n    await downloadDashboardFile({\n      url: \"AppCommons/DownloadDealMaturityListExcel\",\n      filename: \"FutureMaturityList.xlsx\",\n      params: {\n        isFutureMaturity: true,\n        type: type?.value,\n        maturityDate: selectedDate?.format(\"YYYY-MM-DD\"),\n      },\n    })\n  }\n/&gt;\n</code></pre> <p>\u2705 Short Answer:</p> <p>You do not have to use <code>async/await</code> here, but using it helps you handle errors or side effects more cleanly.</p> <p>\ud83e\udde0 Here's Why</p> <p>This line:</p> <pre><code>&lt;DownloadOutlined\n  onClick={async () =&gt;\n    await downloadDashboardFile({ ... })\n  }\n/&gt;\n</code></pre> <p>\u2026is technically equivalent to:</p> <pre><code>&lt;DownloadOutlined\n  onClick={() =&gt;\n    downloadDashboardFile({ ... })\n  }\n/&gt;\n</code></pre> <p>If you don\u2019t need to:</p> <ul> <li>do anything after the download finishes,</li> <li>or catch errors directly in this click handler,</li> </ul> <p>\ud83d\udc49 then you can safely remove <code>async</code>/<code>await</code>.</p> <p>\u2705 When to Use <code>async/await</code> in the Handler</p> <p>You should use <code>async/await</code> if you plan to:</p> <ul> <li>Show a spinner before and hide it after the download.</li> <li>Log or report success/failure.</li> <li>Perform additional logic after the file is downloaded.</li> </ul> Example with success/failure handling:<pre><code>&lt;DownloadOutlined\n  onClick={async () =&gt; {\n    const success = await downloadDashboardFile({\n      url: \"AppCommons/DownloadDealMaturityListExcel\",\n      filename: \"FutureMaturityList.xlsx\",\n      params: {\n        isFutureMaturity: true,\n        type: type?.value,\n        maturityDate: selectedDate?.format(\"YYYY-MM-DD\"),\n      },\n    });\n\n    if (success) {\n      console.log(\"Download completed\");\n    } else {\n      console.error(\"Download failed\");\n    }\n  }}\n/&gt;\n</code></pre> <p>\u2705 Conclusion</p> Case Should you use <code>async/await</code>? You just want to trigger the download \u274c No need You want to handle result or errors \u2705 Yes, use it <p>Let me know if you want a custom download button with a loading spinner or disabled state during download \u2014 it's a common enhancement!</p>"},{"location":"office/bank/sass/","title":"Sass","text":"bash<pre><code>pnpm add sass\n\n# .scss and .sass\nnpm add -D sass-embedded\n\n# sass\nnpm add -D sass\n</code></pre> <p>Deprecation [legacy-js-api]: The legacy JS API is deprecated and will be removed in Dart Sass 2.0.0.</p> Solved<pre><code>export default defineConfig({\n  /* Solved */\n  css: {\n    preprocessorOptions: {\n      scss: {\n        api: \"modern\",\n      },\n    },\n  },\n});\n</code></pre> Quote <p>No need to define <code>MODE</code> in <code>.env</code> files, as Vite automatically sets it.</p> <ul> <li>Vite env and mode</li> </ul>"},{"location":"office/bank/sass/#sass-folder-structure-for-feature-base-file-structure","title":"Sass Folder Structure for feature base file structure","text":"SCSS file structure UsageConclusion <pre><code>src/\n    shared/\n        styles/\n            _variables.scss        # Global variables (colors, fonts, etc.)\n            _mixins.scss           # Global mixins (reusable pieces of code)\n            _media-queries.scss    # Media queries and breakpoints\n            _base.scss             # Base styles (reset, normalization)\n            _typography.scss       # Typography settings (fonts, line heights, etc.)\n            _buttons.scss          # Button styles\n            _card.scss             # Card component styles\n            _grid.scss             # Grid layout system\n            _forms.scss            # Form element styles\n            _icons.scss            # Icon styles\n            _utilities.scss        # Utility classes (margins, paddings, etc.)\n            _theme.scss            # Theme styles (e.g., dark/light mode)\n            _animations.scss       # Animation keyframes and classes\n            _global.scss           # Global styles (import all files here)\n</code></pre> <pre><code>/* main.scss */\n@import 'shared/styles/variables';\n@import 'shared/styles/mixins';\n@import 'shared/styles/global';\n@import 'shared/styles/animations';\n@import 'shared/styles/media-queries';\n@import 'shared/styles/base';\n@import 'shared/styles/typography';\n@import 'shared/styles/buttons';\n@import 'shared/styles/card';\n@import 'shared/styles/grid';\n@import 'shared/styles/forms';\n@import 'shared/styles/icons';\n@import 'shared/styles/utilities';\n@import 'shared/styles/theme';\n</code></pre> <ul> <li>Base styles, typography, and utilities provide a solid foundation for your project.</li> <li>Component-specific styles (e.g., buttons, cards, forms) ensure reusability and consistency across UI components.</li> <li>Grid and layout styles make it easier to manage page structures and responsive layouts.</li> <li>Animations and media queries improve the user experience and provide responsiveness.</li> </ul> <p>Deprecation Warning: Sass <code>@import</code> rules are deprecated and will be removed in Dart Sass 3.0.</p> <p>The deprecation warning you are seeing is due to the fact that the @import rule in Sass is being deprecated and will eventually be removed in Dart Sass 3.0. The recommended approach is to replace <code>@import</code> with the newer <code>@use</code> rule, which offers better modularization and namespace management.</p> Key Differences Between @import and @use: <ul> <li>Namespace Management: <code>@use</code> automatically places the variables, mixins, and functions it imports into a namespace to avoid naming conflicts.With <code>@import</code>, everything is global by default.</li> <li>Performance: <code>@use</code> loads a file once per stylesheet, while <code>@import</code> can potentially load the same file multiple times, affecting performance.</li> <li>Organization: <code>@use</code> encourages more structured and modular SCSS by enforcing namespace rules.</li> </ul>"},{"location":"office/bank/sass/#how-to-migrate-from-import-to-use","title":"How to Migrate from @import to @use","text":"<p>Here\u2019s how you can migrate your current @import approach to @use.</p>"},{"location":"office/bank/sass/#1-use-usefor-scss-files","title":"1. Use <code>@use</code>for SCSS files","text":"<p>You should replace <code>@import</code> with <code>@use</code> in your SCSS files. Below are the steps you need to follow:</p> <ul> <li>Replace @import: Change your <code>@import</code> rules to <code>@use</code>.</li> <li>Namespace: When you use <code>@use</code>, it creates a namespace for the file being imported, unless you explicitly specify an alias.</li> </ul> <p>???+ example title=\"Changing @import to @use\"</p> <pre><code>=== \"Before (using @import)\"\n\n    ```scss\n    /* _global.scss */\n    @import 'variables';\n    @import 'mixins';\n    @import 'media-queries';\n\n    /* Your global styles */\n    ```\n\n=== \"After (using @use)\"\n\n    ```scss\n    /* _global.scss */\n    @use 'variables' as *; // This imports everything globally from 'variables'\n    @use 'mixins' as *;     // This imports everything globally from 'mixins'\n    @use 'media-queries' as mq; // 'mq' will be the namespace for media-queries\n\n    /* Your global styles */\n    ```\n\nIn this example, the `@use 'variables' as *;` statement brings all variables, mixins, and functions into the global scope (like `@import` did).\n\nFor files where you want to namespace them (like media queries), you can use an alias to prevent naming conflicts. Here, `@use 'media-queries' as mq;` means you\u2019ll reference any media query mixins like `mq.respond-to(md)`.\n</code></pre>"},{"location":"office/bank/sass/#2-adjust-your-imports-in-mainscss","title":"2. Adjust Your Imports in <code>main.scss</code>","text":"<p>In your <code>main.scss</code>, change your imports to <code>@use</code> as well.</p> Example Before (using @import)After (using @use) <pre><code>/* main.scss */\n@import 'shared/styles/variables';\n@import 'shared/styles/mixins';\n@import 'shared/styles/global';\n@import 'shared/styles/animations';\n@import 'shared/styles/media-queries';\n</code></pre> <pre><code>/* main.scss */\n@use 'shared/styles/variables' as *;\n@use 'shared/styles/mixins' as *;\n@use 'shared/styles/global' as *;\n@use 'shared/styles/animations' as *;\n@use 'shared/styles/media-queries' as mq; /* Using 'mq' as namespace for media queries */\n</code></pre>"},{"location":"office/bank/sass/#3-handling-specific-files-with-aliases","title":"3. Handling Specific Files with Aliases","text":"<p>You can also choose to alias specific files when using <code>@use</code> to avoid naming conflicts or create better structure.</p> ExampleExplanation <pre><code>/* Example with aliasing */\n@use 'shared/styles/variables' as v;\n@use 'shared/styles/mixins' as m;\n@use 'shared/styles/animations' as anim;\n@use 'shared/styles/media-queries' as mq;\n\nbody {\n    background-color: v.$primary-color;\n}\n\nh1 {\n    @include m.border-radius(5px);\n    animation: anim.fadeIn 1s ease-in-out;\n}\n\n@include mq.respond-to(sm) {\n    h1 {\n        font-size: 1.5rem;\n    }\n}\n</code></pre> <p>In this case:</p> <ul> <li>Variables are accessed via <code>v.$primary-color</code>.</li> <li>Mixins are accessed via <code>m.border-radius()</code>.</li> <li>Animations are accessed via <code>anim.fadeIn</code>.</li> <li>Media queries are accessed via <code>mq.respond-to()</code>.</li> </ul>"},{"location":"office/bank/sass/#4-handling-file-paths","title":"4. Handling File Paths","text":"<p>Ensure that the file paths are correct when using <code>@use</code>. For example, if your SCSS files are located in <code>src/shared/styles</code>, and you want to import them, you\u2019ll need to either specify the full relative path or configure your project to resolve the paths automatically.</p> <ul> <li>Relative Path: Use relative paths like <code>@use '../styles/variables';</code> or <code>@use '../../styles/variables';</code> depending on your file structure.</li> <li>Vite Configuration: If you're using Vite, you can configure SCSS path aliases to make your imports cleaner and shorter.</li> </ul> Vite ConfigUsage <pre><code>// vite.config.js\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n    plugins: [react()],\n    resolve: {\n        alias: {\n            \"@styles\": \"/src/shared/styles\", // Set up an alias for styles folder\n        },\n    },\n});\n</code></pre> <pre><code>@use '@styles/variables' as *;\n@use '@styles/mixins' as *;\n@use '@styles/media-queries' as mq;\n</code></pre>"},{"location":"office/bank/sass/#5-additional-notes","title":"5. Additional Notes","text":"<ul> <li>Avoid Overusing <code>@import</code>: With <code>@use</code>, the module is loaded only once, unlike <code>@import</code>, which can cause multiple loadings of the same file.</li> <li>No Global Variables: By default, <code>@use</code> keeps variables and mixins in the namespace. However, if you want to use them globally, use <code>as *</code> or reference them using the alias (e.g., <code>variables.$primary-color</code>).</li> </ul> Conclusion <p>The Sass team recommends using <code>@use</code> instead of <code>@import</code> for better modularization, namespacing, and performance. Transitioning to <code>@use</code> should be done gradually to ensure compatibility, but it's a good practice to start now to avoid issues when Sass fully deprecates <code>@import</code> in future versions.</p>"},{"location":"office/bank/sass/#reference","title":"Reference","text":"<ul> <li>The legacy JS API is deprecated and will be removed in Dart Sass 2.0.0</li> <li>Shared Options - css.preprocessorOptions </li> <li>Legacy JS API is deprecated message missing info   #2352</li> <li>@use</li> <li>@use &amp; @forward in SASS</li> <li>The @use feature of Sass: stackoverflow</li> </ul>"},{"location":"office/bank/ui-collapsible/","title":"UI collapsible","text":""},{"location":"office/bank/ui-collapsible/#ui-collapsible","title":"UI Collapsible","text":"Changes AllDeals.jsxAllMmds.jsxmft/components/Deals/index.jsxAllNfd.jsx AllDeals<pre><code>import { useSelector } from \"react-redux\";\nimport { Grid } from \"antd\";\n\nconst { lg } = useBreakpoint();\nconst { isCollapsedDealChat } = useSelector((state) =&gt; state.collapse);\n\nreturn (\n    // SEARCH WITH THIS =&gt; deals-inbox\n    &lt;Content className=\"deals-inbox\"&gt;\n        &lt;div\n            // CHANGE THIS\n            className={`list ${!lg &amp;&amp; !isCollapsedDealChat ? \"deal-listing--collapsed\" : \"deal-listing--expanded\"}`}\n            // style={{\n            //   width: \"400px\",\n            // }}\n            span={4}\n        &gt;\n            &lt;DealsList\n                updatedDealData={forexData}\n                width={120}\n                selectedItem={selectedItem}\n                setSelectedItem={setSelectedItem}\n                checkedItems={checkedItems}\n                setCheckedItems={setCheckedItems}\n                setIsChatNotification={setIsChatNotification}\n            /&gt;\n        &lt;/div&gt;\n        &lt;div\n            // CHANGE THIS\n            className={`listdetails ${!isCollapsedDealChat ? \"deal-listing-details--expand\" : \"deal-listing-details--collapse\"}`}\n            style={{\n                overflow: \"hidden\",\n            }}\n            span={20}\n        &gt;\n        {/* TESTING */}\n        &lt;/div&gt;\n    &lt;/Content&gt;\n)\n</code></pre> AllMmds<pre><code>import { useSelector } from \"react-redux\";\nimport { Grid } from \"antd\";\n\nconst { lg } = useBreakpoint();\nconst { isCollapsedDealChat } = useSelector((state) =&gt; state.collapse);\n\nreturn (\n    &lt;Content className=\"deals-inbox\"&gt;\n    &lt;div\n        // className=\"list\"\n        className={`list ${!lg &amp;&amp; !isCollapsedDealChat ? \"deal-listing--collapsed\" : \"deal-listing--expanded\"}`}\n        span={4}\n    &gt;\n        &lt;MmdsList\n            mmdData={mmdData}\n            width={120}\n            selectedItem={selectedItem}\n            setSelectedItem={setSelectedItem}\n            checkedItems={checkedItems}\n            setCheckedItems={setCheckedItems}\n        /&gt;\n    &lt;/div&gt;\n    &lt;div\n        // className=\"listdetails\"\n        className={`listdetails ${!isCollapsedDealChat ? \"deal-listing-details--expand\" : \"deal-listing-details--collapse\"}`}\n        style={{\n            overflow: \"hidden\",\n        }}\n        span={20}\n    &gt;\n    &lt;/div&gt;\n    &lt;/Content&gt;\n)\n</code></pre> AllMfts<pre><code>import { useSelector } from \"react-redux\";\nimport { Grid } from \"antd\";\n\nconst { lg } = useBreakpoint();\nconst { isCollapsedDealChat } = useSelector((state) =&gt; state.collapse);\n\nreturn (\n    &lt;Content className=\"deals-inbox\"&gt;\n        &lt;div\n            // className=\"list\"\n            className={`list ${!lg &amp;&amp; !isCollapsedDealChat ? \"deal-listing--collapsed\" : \"deal-listing--expanded\"}`}\n            span={4}\n        &gt;\n            &lt;MftList\n                dealData={dealData}\n                width={120}\n                selectedItem={selectedItem}\n                setSelectedItem={setSelectedItem}\n                checkedItems={checkedItems}\n                setCheckedItems={setCheckedItems}\n            /&gt;\n        &lt;/div&gt;\n        &lt;div\n            // className=\"listdetails\"\n            className={`listdetails ${!isCollapsedDealChat ? \"deal-listing-details--expand\" : \"deal-listing-details--collapse\"}`}\n            style={{\n                overflow: \"hidden\",\n            }}\n            span={20}\n        &gt;\n        &lt;/div&gt;\n    &lt;/Content&gt;\n)\n</code></pre> AllNfd<pre><code>import { useSelector } from \"react-redux\";\nimport { Grid } from \"antd\";\n\nconst { lg } = useBreakpoint();\nconst { isCollapsedDealChat } = useSelector((state) =&gt; state.collapse);\n\nreturn (\n    &lt;Content className=\"deals-inbox\"&gt;\n    &lt;div\n        // className=\"list\"\n        className={`list ${!lg &amp;&amp; !isCollapsedDealChat ? \"deal-listing--collapsed\" : \"deal-listing--expanded\"}`}\n        span={4}\n    &gt;\n        &lt;NfdList\n        nfdData={nfdData}\n        width={120}\n        selectedItem={selectedItem}\n        setSelectedItem={setSelectedItem}\n        checkedItems={checkedItems}\n        setCheckedItems={setCheckedItems}\n        /&gt;\n    &lt;/div&gt;\n    &lt;div\n        // className=\"listdetails\"\n        className={`listdetails ${!isCollapsedDealChat ? \"deal-listing-details--expand\" : \"deal-listing-details--collapse\"}`}\n        style={{\n            overflow: \"hidden\",\n        }}\n        span={20}\n    &gt;\n    &lt;/div&gt;\n    &lt;/Content&gt;\n)\n</code></pre>"},{"location":"office/bank/ui-collapsible/#for-animation","title":"For animation","text":""},{"location":"office/bank/usefull-code/","title":"Usefull Code","text":""},{"location":"office/bank/usefull-code/#usefull-code","title":"Usefull Code","text":"Success <p>To ensure that <code>setSelectedItem</code> is called only once and not triggered on every change to <code>data</code>, you can add a condition inside the <code>useEffect</code> to check if <code>selectedItem</code> is already set. If <code>selectedItem</code> is already populated, you can avoid setting it again.</p> <p>Here\u2019s an updated version of your code that makes sure <code>setSelectedItem</code> is called only once:</p> DealsList.jsx<pre><code>/*\n* POST SUBMIT SELECTING THE ITEM\n*/\nuseEffect(() =&gt; {\n    if (!selectedItem) {\n        const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n        if (itemToSelect) {\n            setSelectedItem(itemToSelect);\n        } else if (data?.length &gt; 0) {\n            setSelectedItem(data[0]);\n        }\n    }\n}, [formCreationId, data, selectedItem]);\n</code></pre> Explanation <ul> <li>The <code>useEffect</code> now checks if <code>selectedItem</code> is already set (if (<code>!selectedItem</code>)).</li> <li>If <code>selectedItem</code> is not set yet, it proceeds to find the item based on <code>formCreationId</code> and set the <code>selectedItem</code>.</li> <li>The <code>useEffect</code> will run whenever <code>formCreationId</code>, <code>data</code>, or <code>selectedItem</code> changes.</li> </ul> <p>This ensures that <code>setSelectedItem</code> is called only once when the component first renders, or when the <code>formCreationId</code> is updated. It won\u2019t get triggered on every data update if the <code>selectedItem</code> is already set.</p> Bug <pre><code>/*\n* POST SUBMIT SELECTING THE ITEM\n*/\nuseEffect(() =&gt; {\n    // const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n    // if (itemToSelect) {\n    //   setSelectedItem(itemToSelect);\n    // }\n    // else if (data?.length &gt; 0) {\n    //   setSelectedItem(data[0]);\n    // }\n\n    if (!formCreationId) {\n        setSelectedItem(data?.[0] || null);\n        return;\n    }\n    const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n    if (itemToSelect) {\n        setSelectedItem(itemToSelect);\n    } else if (data?.length &gt; 0) {\n        setSelectedItem(data[0]);\n    }\n}, [formCreationId, data]);\n</code></pre> Problem <ul> <li>Re-running on every change: Every time <code>formCreationId</code> or <code>data</code> changes, the <code>useEffect</code> runs, even if <code>setSelectedItem</code> doesn't need to be called again. For instance, if <code>formCreationId</code> is set multiple times, the effect will run again each time, even if the item to select doesn't change.</li> <li>No guard against redundant updates: There\u2019s no check to see if <code>selectedItem</code> has already been set, which can lead to unnecessary updates or resets of the selected item.</li> </ul> <p>The underlying issue is that the code doesn't account for the fact that <code>setSelectedItem</code> should ideally only be called once under certain conditions (e.g., when the component first mounts or when a relevant prop changes). Without such a guard, every change to <code>formCreationId</code> or <code>data</code> triggers a new update, even if it isn't necessary.</p> <p>Solution:</p> <p>To resolve this, you would add a check to ensure that setSelectedItem is only called when needed, preventing unnecessary updates to the state.</p>"},{"location":"office/bank/usefull-code/#definition","title":"DEFINITION","text":"<p>what difference between query and lazy query in rtk query. how to define them</p> <p>In RTK Query, which is part of Redux Toolkit, the two main types of queries are <code>query</code> and <code>lazy query</code>. Both are used for making API requests, but they differ in how and when they are triggered.</p>"},{"location":"office/bank/usefull-code/#1-query","title":"1. Query","text":"<p>A <code>query</code> is automatically triggered when the component using the <code>useQuery</code> hook renders (or when its dependencies change). It is typically used for fetching data that needs to be retrieved as soon as the component is mounted or when a dependency (such as an ID) changes.</p> <ul> <li>Automatic execution: A query is automatically executed when the component is rendered.</li> <li>When to use: Use it when you need to fetch data immediately or when the data should be fetched based on the component's lifecycle (e.g., when the component mounts).</li> </ul> <p>How to define a query:</p> jsx<pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst api = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api\" }),\n  endpoints: (builder) =&gt; ({\n    getUser: builder.query({\n      query: (id) =&gt; `user/${id}`,\n    }),\n  }),\n});\n\nexport const { useGetUserQuery } = api;\n</code></pre> <ul> <li>Triggering the query: In your component, the <code>useGetUserQuery</code> hook will automatically trigger the API request when the component renders or when the id dependency changes.</li> </ul> <pre><code>const { data, error, isLoading } = useGetUserQuery(userId);\n</code></pre>"},{"location":"office/bank/usefull-code/#2-lazy-query","title":"2. Lazy Query","text":"<p>A <code>lazy query</code> (or \"manual query\") allows you to trigger the API call manually rather than automatically on component render. It is useful when you want to trigger a request based on user interaction or other events (e.g., a button click).</p> <ul> <li>Manual execution: The query is only triggered when you explicitly call the <code>trigger</code> function returned by the hook.</li> <li>When to use: Use it when you want to control when the API call is made (e.g., after a user submits a form or clicks a button).</li> </ul> <p>How to define a lazy query:</p> <pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst api = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api\" }),\n  endpoints: (builder) =&gt; ({\n    getUser: builder.query({\n      query: (id) =&gt; `user/${id}`,\n    }),\n  }),\n});\n\nexport const { useLazyGetUserQuery } = api;\n</code></pre> <ul> <li>Triggering the query manually: In your component, you can now call the <code>trigger</code> function to make the request.</li> </ul> <pre><code>const [getUser, { data, error, isLoading }] = useLazyGetUserQuery();\n\nconst handleClick = () =&gt; {\n  getUser(userId); // Trigger the query manually when needed\n};\n</code></pre> <p>Here, the <code>getUser</code> function is returned as part of the <code>useLazyGetUserQuery</code> hook, and you call it explicitly (e.g., when the user clicks a button). It does not trigger the API request automatically on component mount like the regular <code>useGetUserQuery</code> does.</p>"},{"location":"office/bank/usefull-code/#key-differences","title":"Key Differences","text":"Feature Query Lazy Query Triggering Automatically triggered on component mount or dependency change Manually triggered by calling a function Use case Fetch data automatically when the component mounts Fetch data based on user actions (e.g., button click) Hook name <code>useGetUserQuery</code> <code>useLazyGetUserQuery</code> Return value <code>data</code>, <code>error</code>, <code>isLoading</code>, etc. A function to trigger the query and the same <code>data</code>, <code>error</code>, <code>isLoading</code> values"},{"location":"office/bank/usefull-code/#when-to-use-each","title":"When to Use Each","text":"<ul> <li> <p>Use a query when you need the data to be fetched automatically when the component renders or when a dependency changes (e.g., when the component is mounted or a prop changes).</p> </li> <li> <p>Use a lazy query when you need to fetch data based on an event like a button click, form submission, or some other user interaction.</p> </li> </ul>"},{"location":"office/bank/usefull-code/#example-scenario","title":"Example Scenario:","text":"<ul> <li> <p>Query Example: You are displaying user data as soon as the component is mounted. You might use a regular query (<code>useGetUserQuery</code>) to fetch the user's data as soon as the page loads.</p> </li> <li> <p>Lazy Query Example: You have a button that triggers the fetching of user data when clicked, such as when a user clicks \"Load User\". In this case, you would use <code>useLazyGetUserQuery</code> and call it manually when the button is clicked.</p> </li> </ul>"},{"location":"office/bank/1-domain/overview/","title":"Domain Knowledge","text":""},{"location":"office/bank/1-domain/swifMT/overview/","title":"Overview","text":""},{"location":"office/bank/1-domain/swifMT/overview/#overview","title":"Overview","text":"<pre><code>[User]\n   \u2193\n[Treasury Web UI]\n   \u2193\n[TMS Backend Logic]\n  \u2199\ufe0e        \u2193           \u2198\ufe0e\n[Core Banking] [RTGS (NRB)] [SWIFT/MT]\n   \u2193               \u2193               \u2193\n[NRB Reporting] [Settlement] [Deal Confirmation]\n</code></pre> <pre><code>                            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                            \u2502    \ud83d\udc64 User    \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                   \u2502\n                                   \u25bc\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502  Treasury Web UI   \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                                 \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   TMS Backend Logic      \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                             \u2502        \u2502                       \u2502        \u2502        \u2502\n                             \u25bc        \u25bc                       \u25bc        \u25bc        \u25bc\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502 Core       \u2502  \u2502  RTGS (NRB) \u2502   \u2502  SWIFT MT  \u2502 \u2502 Market Data  \u2502\n                     \u2502 Banking    \u2502  \u2502 Settlement  \u2502   \u2502 Messaging  \u2502 \u2502 (FX, Rates)  \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502        \u2502                       \u2502\n                             \u2502        \u2502                       \u25bc\n                             \u2502        \u2502              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                             \u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 NRB Reporting    \u2502\n                             \u2502                       \u2502 (Liquidity, FX)  \u2502\n                             \u2502                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Deal Confirmation  \u2502\n                    \u2502 &amp; Reconciliation   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 Audit &amp; Compliance \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502 MIS / Reporting    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"office/bank/1-domain/swifMT/updated/","title":"Hidden Text & Copy Icon","text":""},{"location":"office/bank/1-domain/swifMT/updated/#updated","title":"Updated","text":""},{"location":"office/bank/1-domain/swifMT/updated/#previous","title":"Previous","text":"<pre><code>const MtMessageModal = ({\n  open,\n  onClose,\n  onDownloadClickTxt,\n  onDownloadClick,\n  onDownloadClickMxTxt,\n  onDownloadClickMxPdf,\n  onRegenerateClick,\n  onCopyClick,\n  mtMessageData,\n  loading,\n  onDownloadTxtLoading,\n  onDownloadLoading,\n  onDownloadMxPdfLoading,\n  onDownloadMxTxtLoading,\n  onRegenerateLoading,\n  mtMessage,\n  dataFrom,\n}) =&gt; {\n  const currentPermission = useSelector((state) =&gt; state.auth.permissions);\n  return (\n    &lt;Modal\n      width={700}\n      title={\n        &lt;Flex gap=\"large\" wrap&gt;\n          {hasPermission(\n            currentPermission,\n            PERMISSIONS?.CAN_MT_DOWNLOAD_TXT\n          ) &amp;&amp; (\n            &lt;CustomButton\n              loading={onDownloadTxtLoading}\n              type=\"default\"\n              icon={&lt;DownloadOutlined /&gt;}\n              onClick={onDownloadClickTxt}\n              title=\"TXT\"\n            /&gt;\n          )}\n\n          &lt;CustomButton\n            loading={onDownloadLoading}\n            type=\"default\"\n            icon={&lt;DownloadOutlined /&gt;}\n            onClick={onDownloadClick}\n            title=\"PDF\"\n          /&gt;\n          {mtMessage === MTMESSAGE_TYPE.MT202 &amp;&amp;\n            dataFrom === DealTypeEnum.FOREX &amp;&amp; (\n              &lt;&gt;\n                &lt;CustomButton\n                  loading={onDownloadMxTxtLoading}\n                  type=\"default\"\n                  icon={&lt;DownloadOutlined /&gt;}\n                  onClick={onDownloadClickMxTxt}\n                  title=\"MX TXT\"\n                /&gt;\n                &lt;CustomButton\n                  loading={onDownloadMxPdfLoading}\n                  type=\"default\"\n                  icon={&lt;DownloadOutlined /&gt;}\n                  onClick={onDownloadClickMxPdf}\n                  title=\"MX PDF\"\n                /&gt;\n              &lt;/&gt;\n            )}\n\n          &lt;CustomButton\n            type=\"default\"\n            icon={&lt;CopyOutlined /&gt;}\n            onClick={onCopyClick}\n          /&gt;\n          {hasPermission(currentPermission, PERMISSIONS?.CAN_MT_REGENERATE) &amp;&amp; (\n            &lt;Tooltip title=\"MT Message Regerate\"&gt;\n              &lt;span style={{ display: \"inline-block\" }}&gt;\n                &lt;CustomButton\n                  type=\"default\"\n                  icon={&lt;RedoOutlined /&gt;}\n                  onClick={onRegenerateClick}\n                  loading={onRegenerateLoading}\n                /&gt;\n              &lt;/span&gt;\n            &lt;/Tooltip&gt;\n          )}\n        &lt;/Flex&gt;\n      }\n      open={open}\n      onCancel={onClose}\n      footer={null}\n    &gt;\n      &lt;Spin spinning={loading}&gt;\n        &lt;div\n          style={{\n            maxHeight: \"700px\",\n            overflow: \"auto\",\n          }}\n          dangerouslySetInnerHTML={{ __html: mtMessageData }}\n        /&gt;\n      &lt;/Spin&gt;\n    &lt;/Modal&gt;\n  );\n};\n\nexport default MtMessageModal;\n</code></pre>"},{"location":"office/bank/1-domain/swifMT/updated/#updated-modal-with-hidden-txt-button-and-copy-in-mtmessage-5","title":"Updated Modal with hidden <code>Txt button</code> and Copy in <code>mtMessage: 5</code>","text":"FOREX_DEAL.js<pre><code>export const MTMESSAGE_TYPE = {\n  UNDEFINED: 0,\n  MT300: 1,\n  MT202: 2,\n  MT320: 3,\n  MT399: 4,\n  RTG: 5,\n  MT103: 6,\n  MT199: 7,\n  MT299: 8,\n};\n</code></pre> <pre><code>const MtMessageModal = ({\n  open,\n  onClose,\n  onDownloadClickTxt,\n  onDownloadClick,\n  onDownloadClickMxTxt,\n  onDownloadClickMxPdf,\n  onRegenerateClick,\n  onCopyClick,\n  mtMessageData,\n  loading,\n  onDownloadTxtLoading,\n  onDownloadLoading,\n  onDownloadMxPdfLoading,\n  onDownloadMxTxtLoading,\n  onRegenerateLoading,\n  mtMessage,\n  dataFrom,\n}) =&gt; {\n  const currentPermission = useSelector((state) =&gt; state.auth.permissions);\n  return (\n    &lt;Modal\n      width={700}\n      title={\n        &lt;Flex gap=\"large\" wrap&gt;\n          {/* Added `mtMessage !== MTMESSAGE_TYPE?.RTG &amp;&amp;` for temporary only remove after\n           */}\n          {hasPermission(currentPermission, PERMISSIONS?.CAN_MT_DOWNLOAD_TXT) &amp;&amp;\n            mtMessage !== MTMESSAGE_TYPE?.RTG &amp;&amp; (\n              &lt;CustomButton\n                loading={onDownloadTxtLoading}\n                type=\"default\"\n                icon={&lt;DownloadOutlined /&gt;}\n                onClick={onDownloadClickTxt}\n                title=\"TXT\"\n              /&gt;\n            )}\n\n          &lt;CustomButton\n            loading={onDownloadLoading}\n            type=\"default\"\n            icon={&lt;DownloadOutlined /&gt;}\n            onClick={onDownloadClick}\n            title=\"PDF\"\n          /&gt;\n          {mtMessage === MTMESSAGE_TYPE.MT202 &amp;&amp;\n            dataFrom === DealTypeEnum.FOREX &amp;&amp; (\n              &lt;&gt;\n                &lt;CustomButton\n                  loading={onDownloadMxTxtLoading}\n                  type=\"default\"\n                  icon={&lt;DownloadOutlined /&gt;}\n                  onClick={onDownloadClickMxTxt}\n                  title=\"MX TXT\"\n                /&gt;\n                &lt;CustomButton\n                  loading={onDownloadMxPdfLoading}\n                  type=\"default\"\n                  icon={&lt;DownloadOutlined /&gt;}\n                  onClick={onDownloadClickMxPdf}\n                  title=\"MX PDF\"\n                /&gt;\n              &lt;/&gt;\n            )}\n\n          {/* FOR TEMPORAY ONLY */}\n          {mtMessage !== MTMESSAGE_TYPE?.RTG &amp;&amp; (\n            &lt;CustomButton\n              type=\"default\"\n              icon={&lt;CopyOutlined /&gt;}\n              onClick={onCopyClick}\n            /&gt;\n          )}\n\n          {/* &lt;CustomButton\n            type=\"default\"\n            icon={&lt;CopyOutlined /&gt;}\n            onClick={onCopyClick}\n          /&gt; */}\n\n          {hasPermission(currentPermission, PERMISSIONS?.CAN_MT_REGENERATE) &amp;&amp; (\n            &lt;Tooltip title=\"MT Message Regerate\"&gt;\n              &lt;span style={{ display: \"inline-block\" }}&gt;\n                &lt;CustomButton\n                  type=\"default\"\n                  icon={&lt;RedoOutlined /&gt;}\n                  onClick={onRegenerateClick}\n                  loading={onRegenerateLoading}\n                /&gt;\n              &lt;/span&gt;\n            &lt;/Tooltip&gt;\n          )}\n        &lt;/Flex&gt;\n      }\n      open={open}\n      onCancel={onClose}\n      footer={null}\n    &gt;\n      &lt;Spin spinning={loading}&gt;\n        &lt;div\n          style={{\n            maxHeight: \"700px\",\n            overflow: \"auto\",\n          }}\n          dangerouslySetInnerHTML={{ __html: mtMessageData }}\n        /&gt;\n      &lt;/Spin&gt;\n    &lt;/Modal&gt;\n  );\n};\n\nexport default MtMessageModal;\n</code></pre>"},{"location":"office/bank/approval/serialNo/","title":"Serial No","text":""},{"location":"office/bank/approval/serialNo/#serial-no","title":"Serial No","text":"DealsListDetails.jsx<pre><code>import {\n  BOOLEAN_VALUE,\n  BOOLEAN_STRINGS,\n  SETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\nconst { value } = useSelector((state) =&gt; state?.setting);\nconst isSerialNumNeeded =\nvalue[SETTINGS_KEYS.IS_SERIAL_NUMBER_NEEDED] || BOOLEAN_STRINGS.TRUE;\n\n{isSerialNumNeeded === BOOLEAN_STRINGS.TRUE &amp;&amp; (\n    &lt;Col\n        md={24}\n        xl={12}\n        style={{\n            textAlign: xl ? \"end\" : \"start\", // Align based on screen size\n        }}\n    &gt;\n        &lt;Text strong&gt;Serial. No. {dealData?.serialNumber}&lt;/Text&gt;\n    &lt;/Col&gt;\n)}\n&lt;/Row&gt;\n</code></pre>"},{"location":"office/bank/approval/timeline/","title":"Timeline","text":""},{"location":"office/bank/approval/timeline/#timeline","title":"Timeline","text":"forexSteps.js<pre><code>export const FOREX_STEPS = {\n  UNDEFINED: 0,\n  REQUESTED: 1,\n  MID_OFFICE_REQUEST: 2,\n  MIDOFFICE: 3,\n  VERIFY_REQUEST: 4,\n  VERIFIED: 5,\n  APPROVAL_REQUEST: 6,\n  APPROVED: 7,\n  ONHOLD: 8,\n  COMPLETE: 9,\n  CANCELLED: 10,\n  BACKOFFICE_VERIFICATION: 11,\n};\n</code></pre> DealType.js<pre><code>export const DealTypeEnum = {\n  FOREX: \"FOREX\",\n  MMD: \"MMD\",\n  MFT: \"MFT\",\n  NDF: \"NDF\",\n};\n\nexport const DealTypeBackendEnum = {\n  UNDEFINED: 0,\n  // Forex Market Deals\n  FMD: 1,\n  // Money Market Deals\n  MMD: 2,\n  // Mutual Fund Deals\n  MFD: 3,\n  // NDF Deals\n  NDF: 4,\n  // Currency Request Dealer\n  CURD: 5,\n  // Mutual Fund Request Dealer\n  MFTRD: 6,\n  // Currency Request Issuer\n  CURI: 7,\n  // Mutual Fund Request Issuer\n  MFTRI: 8,\n};\n\nexport const DEALSTEPS = {\n  DEALER: \"Dealer\",\n  MIDOFFICE: \"Mid-Office\",\n  VERIFIER: \"Verifier\",\n  AUTHORIZER: \"Authorizer\",\n  BACKOFFICER: \"Back-Office\",\n  BACKOFFICEREVERIFICATION: \"Back-Office Re\",\n  COMPLETE: \"Complete\",\n  CANCELLED: \"Cancelled\",\n};\n</code></pre>"},{"location":"office/bank/approval/timeline/#changes","title":"Changes","text":"DealsListDetails.js<pre><code>if (!isEmpty(dealData)) {\n  if (dealData?.currentStatus === FOREX_STEPS?.CANCELLED) {\n    switch (dealData?.previousStatus) {\n      // PREVOUS\n      // case FOREX_STEPS?.MID_OFFICE_REQUEST:\n      //     setStep(0);\n      //     break;\n      // case FOREX_STEPS?.VERIFY_REQUEST:\n      //     setStep(1);\n      //     break;\n      // case FOREX_STEPS?.APPROVAL_REQUEST:\n      //     setStep(2);\n      //     break;\n      // case FOREX_STEPS?.ONHOLD:\n      //     setStep(3);\n      //     break;\n      // case FOREX_STEPS?.BACKOFFICE_VERIFICATION:\n      //     setStep(4);\n      //     break;\n      // case FOREX_STEPS?.COMPLETE:\n      //     setStep(5);\n      //     break;\n      // default:\n      //     // Handle default case if needed\n      //     setStep(5);\n      //     break;\n\n      // UPDATED\n      case FOREX_STEPS?.VERIFY_REQUEST:\n        setStep(0);\n        break;\n      case FOREX_STEPS?.APPROVAL_REQUEST:\n        setStep(1);\n        break;\n      case FOREX_STEPS?.MID_OFFICE_REQUEST:\n        setStep(2);\n        break;\n      case FOREX_STEPS?.ONHOLD:\n        setStep(3);\n        break;\n      case FOREX_STEPS?.BACKOFFICE_VERIFICATION:\n        setStep(4);\n        break;\n      case FOREX_STEPS?.COMPLETE:\n        setStep(5);\n        break;\n      default:\n        // Handle default case if needed\n        setStep(5);\n        break;\n    }\n  } else {\n    switch (dealData?.currentStatus) {\n      // PREVIOUS\n      // case FOREX_STEPS?.MID_OFFICE_REQUEST:\n      //     setStep(0);\n      //     break;\n      // case FOREX_STEPS?.VERIFY_REQUEST:\n      //     setStep(1);\n      //     break;\n      // case FOREX_STEPS?.APPROVAL_REQUEST:\n      //     setStep(2);\n      //     break;\n      // case FOREX_STEPS?.ONHOLD:\n      //     setStep(3);\n      //     break;\n      // case FOREX_STEPS?.BACKOFFICE_VERIFICATION:\n      //     setStep(4);\n      //     break;\n      // case FOREX_STEPS?.COMPLETE:\n      //     setStep(6);\n      //     break;\n      // default:\n      //     // Handle default case if needed\n      //     setStep(6);\n      //     break;\n\n      // UPDATED\n      case FOREX_STEPS?.VERIFY_REQUEST:\n        setStep(0);\n        break;\n      case FOREX_STEPS?.APPROVAL_REQUEST:\n        setStep(1);\n        break;\n      case FOREX_STEPS?.MID_OFFICE_REQUEST:\n        setStep(2);\n        break;\n      case FOREX_STEPS?.ONHOLD:\n        setStep(3);\n        break;\n      case FOREX_STEPS?.BACKOFFICE_VERIFICATION:\n        setStep(4);\n        break;\n      case FOREX_STEPS?.COMPLETE:\n        setStep(6);\n        break;\n      default:\n        // Handle default case if needed\n        setStep(6);\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"office/bank/approval/timeline/#theory","title":"Theory","text":"<p>In Ant Design (antd), the <code>&lt;Steps&gt;</code> component starts indexing from <code>0</code> \u2014 just like arrays in JavaScript.</p> <pre><code>&lt;Steps current={1}&gt;\n  &lt;Step title=\"Step 1\" /&gt;\n  &lt;Step title=\"Step 2\" /&gt;\n  &lt;Step title=\"Step 3\" /&gt;\n&lt;/Steps&gt;\n</code></pre> <p>In this example:</p> <ul> <li><code>current={1}</code> means the second step is active (not the first).</li> <li>Steps are indexed: <code>Step 1 =&gt; index 0</code>, <code>Step 2 =&gt; index 1</code>, etc.</li> </ul>"},{"location":"office/bank/approval/timeline/#recommended-fix","title":"\u2705 Recommended Fix:","text":"Status UI Step Index (<code>&lt;Steps current={}&gt;</code>) <code>VERIFY_REQUEST</code> 0 <code>APPROVAL_REQUEST</code> 1 <code>MID_OFFICE_REQUEST</code> 2 <code>ONHOLD</code> 3 <code>BACKOFFICE_VERIFICATION</code> 4 <code>COMPLETE</code> 5 <p>If you want the first visible step to be the active one when it's <code>VERIFY_REQUEST</code>, then adjust your mapping like this:</p> <p>So you should either:</p> <ul> <li>Subtract 1 from <code>setStep(n)</code>, or</li> <li>Refactor the switch logic to use <code>0</code>-based values to match Ant Design.</li> </ul>"},{"location":"office/bank/approval/timeline/#timeline-updaed","title":"Timeline Updaed","text":"src/shared/components/DealsTimeline/index.jsx<pre><code>{\n  !isEmpty(timelineData?.midofficer?.approvers) &amp;&amp; (\n    &lt;Timeline.Item\n      dot={&lt;Avatar size=\"small\" icon={&lt;UserOutlined /&gt;} /&gt;}\n      color={token?.colorPrimary}\n      key=\"midofficer\"\n    &gt;\n      &lt;Title level={5} style={{ color: token?.colorPrimary, margin: \"0\" }}&gt;\n        {DEALSTEPS?.MIDOFFICE}\n      &lt;/Title&gt;\n      {timelineData?.midofficer?.approvers?.map((item) =&gt; {\n        if (data?.currentStatus == FOREX_STEPS?.MID_OFFICE_REQUEST) {\n          return (\n            &lt;DealsLogUser\n              key={item?.id}\n              userName={item?.fullName}\n              dateCreated={item?.approvedDate}\n              remarks={item?.approvedRemarks}\n              type=\"Verifier\"\n            /&gt;\n          );\n        }\n        if (\n          data?.currentStatus &gt;= FOREX_STEPS?.MIDOFFICE\n\n          // UPDATED HERE\n\n          // &amp;&amp;\n          // item?.isApproved\n        ) {\n          return (\n            &lt;DealsLogUser\n              key={item?.id}\n              userName={item?.fullName}\n              dateCreated={item?.approvedDate}\n              remarks={item?.approvedRemarks}\n              type=\"Verifier\"\n            /&gt;\n          );\n        }\n        if (data?.currentStatus == FOREX_STEPS?.CANCELLED) {\n          return (\n            &lt;DealsLogUser\n              key={item?.id}\n              userName={item?.fullName}\n              dateCreated={item?.approvedDate}\n              remarks={item?.approvedRemarks}\n              type=\"Verifier\"\n            /&gt;\n          );\n        }\n        return null;\n      })}\n    &lt;/Timeline.Item&gt;\n  );\n}\n</code></pre>"},{"location":"office/bank/approval/timeline/#reference","title":"Reference","text":""},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/","title":"LOGIN OPTIMIZE","text":""},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#useloginhandler","title":"<code>useLoginHandler</code>","text":"<p>You're currently making two separate API calls to the same endpoint (<code>Roles/GetUserPermission</code>) in your <code>pollingPermissionsApi</code>, but using two different queries:</p> <ul> <li><code>getPollingPermissions</code> \u2013 extracts the selected permission values.</li> <li><code>getPollingPermissionsForBranch</code> \u2013 extracts the <code>branch</code> object from the same response.</li> </ul> <p>Since both are requesting the same data, but transforming it differently, you're effectively hitting the API twice unnecessarily.</p>"},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#goal","title":"\u2705 Goal:","text":"<p>Make only one API call and extract both <code>permissions</code> and <code>branch</code> from it.</p>"},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#solution","title":"\u2705 Solution:","text":"<p>You should combine both pieces of logic (permission extraction + branch extraction) into a single endpoint (e.g. <code>getPollingPermissionsAndBranch</code>) and return both from <code>transformResponse</code>.</p>"},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#updated-code","title":"\u2705 Updated Code:","text":""},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#1-update-the-pollingpermissionsapi","title":"1. Update the <code>pollingPermissionsApi</code>:","text":"<pre><code>export const pollingPermissionsApi = createApi({\n  reducerPath: \"pollingPermissionsApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"PermissionAPI\"],\n  keepUnusedDataFor: 0,\n  endpoints: (builder) =&gt; ({\n    getPollingPermissionsAndBranch: builder.query({\n      query: ({ id }) =&gt; ({\n        url: `Roles/GetUserPermission`,\n        method: HTTP_METHODS.GET,\n      }),\n      transformResponse: (response) =&gt; {\n        if (!Array.isArray(response)) {\n          return { permissions: [], branch: null };\n        }\n\n        const permissions = response\n          ?.map((group) =&gt;\n            group?.permissions?.map((permission) =&gt; {\n              if (permission?.selected) {\n                return permission?.value;\n              }\n            })\n          )\n          .flat()\n          .filter(Boolean);\n\n        const branch = response.find((group) =&gt; group.branch)?.branch || null;\n\n        return {\n          permissions,\n          branch,\n        };\n      },\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          logger.error({ msg: \"Permission API Failed\", err });\n        }\n      },\n      providesTags: [\"PermissionAPI\"],\n    }),\n  }),\n});\n</code></pre>"},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#2-use-the-single-call-in-your-code","title":"2. Use the single call in your code:","text":"<pre><code>const result = await dispatch(\n  pollingPermissionsApi.endpoints.getPollingPermissionsAndBranch.initiate(\n    {\n      id: decodedToken?.sub,\n    },\n    {\n      subscribe: false,\n      forceRefetch: true,\n    }\n  )\n);\n\nconst data = result?.data;\n\ndispatch(setBranch(data?.branch));\n\ndispatch(\n  updatePermission({\n    permissions: data?.permissions,\n  })\n);\n</code></pre>"},{"location":"office/bank/auth/2025-09-16-useLoginHandler-optimize/#result","title":"\u2705 Result:","text":"<ul> <li>Only one API call is made to <code>Roles/GetUserPermission</code>.</li> <li> <p>You get both:</p> </li> <li> <p><code>permissions</code> (array of selected values)</p> </li> <li><code>branch</code> (branch object)</li> </ul> <p>Cleaner and more efficient.</p> <p>Let me know if you also want to memoize this data in the cache for re-use.</p>"},{"location":"office/bank/auth/central-logout/","title":"CENTRAL LOGOUT HELPER","text":""},{"location":"office/bank/auth/central-logout/#centralized-logout","title":"Centralized Logout","text":""},{"location":"office/bank/auth/central-logout/#previous","title":"Previous","text":"Need to replace this<pre><code>// 1. axiosBaseQuery.js\napi.dispatch(logout());\n\n// Dashboard.jsx (not used)\n// const handleLogout = () =&gt; {\n//   dispatch(logout());\n//   navigate(\"/\");\n// };\n\n// 2. Modal.jsx\nconst handleLogout = () =&gt; {\n  dispatch(stopSignalR());\n  dispatch(logout());\n  dispatch(clearBase64Data());\n  dispatch(resetState());\n  dispatch(logoutFromIdle());\n  dispatch(clearGlobalSetting());\n  dispatch(clearBageCount());\n  rememeberMe();\n};\n\n// 3. Header.jsx\nconst handleLogout = () =&gt; {\n  dispatch(stopSignalR());\n  dispatch(logout());\n  dispatch(clearBase64Data());\n  dispatch(resetState());\n  rememeberMe();\n  navigate(\"/\");\n};\n</code></pre> <pre><code>Session Timeout\n\nYou\u2019ve been inactive. Please enter your password.\n</code></pre> features/idle/Modal.jsx<pre><code>import {\n  hideIdleModal,\n  incrementIdleAttempts,\n  logoutFromIdle,\n} from \"@features/idle/services/idleSlice\";\n\nconst handleLogout = () =&gt; {\n  dispatch(stopSignalR());\n  dispatch(logout());\n  dispatch(clearBase64Data());\n  dispatch(resetState());\n  // DONOT FORGET TO ADD THIS IN =&gt; axiosBaseQuery.js\n  dispatch(logoutFromIdle());\n  //\n  dispatch(clearGlobalSetting());\n  dispatch(clearBageCount());\n  rememeberMe();\n};\n</code></pre> axiosBaseQuery.js<pre><code>// ADD THIS\nimport {\n  hideIdleModal,\n  incrementIdleAttempts,\n  logoutFromIdle,\n} from \"@features/idle/services/idleSlice\";\n\ntry {\n  if (data) {\n    api.dispatch(updateRefreshToken(data));\n    return { data };\n  } else {\n    logger.error({ msg: \"Unable to refresh token. Logged out.\" });\n    api.dispatch(logout());\n    api.dispatch(resetState());\n    api.dispatch(clearGlobalSetting());\n    api.dispatch(clearBageCount());\n    rememeberMe();\n    // ADD THIS\n    logoutFromIdle();\n  }\n} catch (error) {\n  logger.error({ msg: \"Error: \", error });\n  api.dispatch(logout());\n  api.dispatch(resetState());\n  api.dispatch(clearGlobalSetting());\n  api.dispatch(clearBageCount());\n  rememeberMe();\n  // ADD THIS\n  logoutFromIdle();\n}\n</code></pre>"},{"location":"office/bank/auth/central-logout/#updated","title":"Updated","text":"axiosBaseQuery.js<pre><code>// import { resetState } from \"@features/notifications/services/chatSlice\";\n// import { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\n// import { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\n\n// import rememeberMe from \"@shared/utils/rememberMe\";\n\n// import axiosInstance from \"./axiosInstance\";\nimport axiosInstance from \"@shared/services/axios/axiosInstance\";\n\nimport { performLogout } from \"@shared/utils/logoutHelper\";\n\ntry {\n  if (data) {\n    api.dispatch(updateRefreshToken(data));\n    return { data };\n  } else {\n    logger.error({ msg: \"Unable to refresh token. Logged out.\" });\n    // api.dispatch(logout());\n    // api.dispatch(resetState());\n    // api.dispatch(clearGlobalSetting());\n    // api.dispatch(clearBageCount());\n    // rememeberMe();\n    performLogout(api.dispatch);\n  }\n} catch (error) {\n  logger.error({ msg: \"Error: \", error });\n  // api.dispatch(logout());\n  // api.dispatch(resetState());\n  // api.dispatch(clearGlobalSetting());\n  // api.dispatch(clearBageCount());\n  // rememeberMe();\n  performLogout(api.dispatch);\n}\n</code></pre> Header.jsx<pre><code>import {\n  // resetState,\n  addBellNotifications,\n  addBellNotificationCount,\n  increaseBellNotificationCount,\n} from \"@features/notifications/services/chatSlice\";\n// import { stopSignalR } from \"@features/notifications/services/chatThunks\";\n// import { logout } from \"@features/auth/services/authSlice\";\n// import { clearBase64Data } from \"@features/profile/services/profileSlice\";\n// import rememeberMe from \"@shared/utils/rememberMe\";\n\nimport { performLogout } from \"@shared/utils/logoutHelper\";\n\nconst Header = ({ height }) =&gt; {\n  const handleLogout = () =&gt; {\n    // dispatch(stopSignalR());\n    // dispatch(logout());\n    // dispatch(clearBase64Data());\n    // dispatch(resetState());\n    // rememeberMe();\n    // navigate(\"/\");\n    performLogout(dispatch);\n  };\n};\n</code></pre> Modal.jsx<pre><code>import { stopSignalR } from \"@features/notifications/services/chatThunks\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport { clearBase64Data } from \"@features/profile/services/profileSlice\";\nimport rememeberMe from \"@shared/utils/rememberMe\";\nimport { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\nimport {\n  updateRefreshToken,\n  // logout\n} from \"@features/auth/services/authSlice\";\n\nexport default function IdleModal() {\n  const handleLogout = () =&gt; {\n    // dispatch(stopSignalR());\n    // dispatch(logout());\n    // dispatch(clearBase64Data());\n    // dispatch(resetState());\n    // dispatch(logoutFromIdle());\n    // dispatch(clearGlobalSetting());\n    // dispatch(clearBageCount());\n    // rememeberMe();\n    performLogout(dispatch);\n  };\n}\n</code></pre>"},{"location":"office/bank/auth/central-logout/#suggestion","title":"SUGGESTION","text":""},{"location":"office/bank/auth/central-logout/#for-futur-create-group-action-for-logouts","title":"FOR FUTUR Create GROUP ACTION FOR LOGOUTS","text":"<p>How can I create a centralized logout handler for RTK Query and React 18.</p> <ol> <li> <p>Encapsulate Logout Logic in a Reusable Function</p> <pre><code>// utils/logoutHelper.js\nimport {\n  logout,\n  resetState,\n  clearGlobalSetting,\n  clearBageCount,\n} from \"@features/yourFeature/yourSlice\"; // adjust imports\nimport { logoutFromIdle } from \"@features/idle/services/idleSlice\";\nimport { rememeberMe } from \"path-to-utils\"; // import your utility properly\n\nexport const performLogout = (dispatch) =&gt; {\n  dispatch(logout());\n  dispatch(resetState());\n  dispatch(clearGlobalSetting());\n  dispatch(clearBageCount());\n  dispatch(logoutFromIdle());\n  rememeberMe();\n};\n</code></pre> </li> <li> <p>Use This Function in React Components</p> <pre><code>import { useDispatch } from \"react-redux\";\nimport { performLogout } from \"utils/logoutHelper\";\n\nconst LogoutButton = () =&gt; {\n  const dispatch = useDispatch();\n\n  const handleLogout = () =&gt; {\n    dispatch(stopSignalR());\n    dispatch(clearBase64Data());\n    performLogout(dispatch);\n  };\n\n  return &lt;button onClick={handleLogout}&gt;Logout&lt;/button&gt;;\n};\n</code></pre> </li> <li> <p>Use This Function in RTK Query's Base Query for Global Error Handling</p> <p>Wrap your <code>fetchBaseQuery</code> to intercept errors globally (e.g., 401 Unauthorized) and call the centralized logout function:</p> <pre><code>import { fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { performLogout } from \"utils/logoutHelper\";\n\nconst baseQuery = fetchBaseQuery({ baseUrl: \"/api\" });\n\nconst baseQueryWithLogout = async (args, api, extraOptions) =&gt; {\n  const result = await baseQuery(args, api, extraOptions);\n\n  if (result.error &amp;&amp; result.error.status === 401) {\n    performLogout(api.dispatch);\n    // Optionally redirect or show a message\n  }\n\n  return result;\n};\n</code></pre> <p>Then use <code>baseQueryWithLogout</code> in your <code>createApi</code>:</p> <pre><code>const api = createApi({\n  baseQuery: baseQueryWithLogout,\n  endpoints: (builder) =&gt; ({\n    // your endpoints here\n  }),\n});\n</code></pre> </li> </ol> Why This Approach? <ul> <li>Single source of truth: Logout logic is maintained in one place.</li> <li>Reusability: Works in UI components and async API logic alike.</li> <li>Consistency: Ensures all logout side effects happen uniformly.</li> <li>Global error handling: RTK Query intercepts auth errors and triggers logout automatically.</li> </ul> Additional Tips <ul> <li>You can extend the helper to accept optional callbacks or parameters if needed.</li> <li>Consider adding user notifications or redirects inside the helper or after calling it.</li> <li>Make sure to properly import and handle any utilities like <code>rememeberMe</code>.</li> </ul> <p>This pattern aligns with best practices for handling global auth state and errors in RTK Query and React.</p>"},{"location":"office/bank/auth/central-logout/#reference","title":"Reference","text":"<ul> <li>Github: redux-state-sync</li> <li>Github: pubkey / broadcast-channel</li> <li>npmjs: redux-watch</li> <li>Perplexity: research about handling global logout</li> </ul>"},{"location":"office/bank/auth/login-refactored/","title":"Login  Refactored","text":""},{"location":"office/bank/auth/login-refactored/#refactored-modularized","title":"Refactored &amp; Modularized","text":"<p>Absolutely! Here is the full refactored and modularized code with all files put together so you can easily copy and use them.</p> <p>Plan:</p> <ul> <li><code>useLoginHandler.js</code> \u2014 Main hook, just orchestrates calls</li> <li><code>authHelpers.js</code> \u2014 Authentication-related helper functions (login, dispatch auth, persist localStorage)</li> <li><code>permissionHelpers.js</code> \u2014 Fetch &amp; dispatch permissions and branch</li> <li><code>settingsHelpers.js</code> \u2014 Fetch &amp; dispatch global settings</li> <li><code>errorHandler.js</code> \u2014 Error handling utility</li> </ul> <p>How to Use:</p> <p>Your main hook <code>useLoginHandler.js</code> is now clean and just orchestrates the flow. Helpers are clearly separated by concern and easier to maintain or test individually.</p>"},{"location":"office/bank/auth/login-refactored/#1-useloginhandlerjs","title":"1. <code>useLoginHandler.js</code>","text":"<pre><code>import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLoginMutation } from \"@features/auth/services/authApi\";\nimport { useLazyGetGlobalSettingsQuery } from \"@features/settings/services/globalSettingApi\";\n\nimport {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n} from \"./authHelpers\";\n\nimport { fetchPermissionsAndBranch } from \"./permissionHelpers\";\nimport { fetchGlobalSettings } from \"./settingsHelpers\";\nimport { handleLoginError } from \"./errorHandler\";\n\nconst useLoginHandler = () =&gt; {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const [login] = useLoginMutation();\n  const [getGlobalSettings] = useLazyGetGlobalSettingsQuery();\n\n  const handleLogin = async (username, password, remember) =&gt; {\n    setLoading(true);\n    try {\n      // Authenticate user and get token info\n      const user = await authenticateUser(login, username, password);\n      const decodedToken =\n        user &amp;&amp; JSON.parse(atob(user.access_token.split(\".\")[1]));\n\n      // Persist login info to localStorage if \"remember\" is true\n      persistUserInfo(username, remember);\n\n      // Dispatch auth info to redux store\n      dispatchUserAuth(dispatch, decodedToken, user);\n\n      // Fetch and dispatch permissions and branches\n      await fetchPermissionsAndBranch(dispatch);\n\n      // Fetch and dispatch global system settings\n      await fetchGlobalSettings(dispatch, getGlobalSettings);\n\n      return user;\n    } catch (err) {\n      // Show notification on login error\n      handleLoginError(err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, handleLogin };\n};\n\nexport default useLoginHandler;\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#2-authhelpersjs","title":"2. <code>authHelpers.js</code>","text":"<pre><code>import queryString from \"query-string\";\nimport { setAuth } from \"@features/auth/services/authSlice\";\nimport { OAUTH } from \"@shared/utils/config\";\nimport logger from \"@shared/utils/logger\";\n\nexport const authenticateUser = async (login, username, password) =&gt; {\n  const formData = queryString.stringify({\n    username,\n    password,\n    grant_type: OAUTH?.GRANT_TYPE,\n    client_id: OAUTH?.CLIENT_ID,\n    client_secret: OAUTH?.CLIENT_SECRET,\n    scope: OAUTH?.SCOPE,\n  });\n\n  const user = await login(formData).unwrap();\n  logger.info({ msg: \"Login successful\", username });\n\n  return user;\n};\n\nexport const persistUserInfo = (username, remember) =&gt; {\n  if (remember) {\n    localStorage.setItem(\"email\", username);\n    localStorage.setItem(\"remember\", true);\n  } else {\n    localStorage.setItem(\"remember\", false);\n  }\n};\n\nexport const dispatchUserAuth = (dispatch, decodedToken, user) =&gt; {\n  dispatch(\n    setAuth({\n      token: user?.access_token || null,\n      refresh: user?.refresh_token || null,\n      role: decodedToken?.role || null,\n      appUserId: decodedToken?.sub || null,\n      scope: decodedToken?.scope || null,\n      user: decodedToken?.username || null,\n      name: decodedToken?.name || null,\n      branch: decodedToken?.branch || null,\n      iat: decodedToken?.iat || null,\n      exp: decodedToken?.exp || null,\n    })\n  );\n};\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#3-permissionhelpersjs","title":"3. <code>permissionHelpers.js</code>","text":"<pre><code>import { pollingPermissionsApi } from \"@features/settings/services/settingApi\";\nimport { setBranch, updatePermission } from \"@features/auth/services/authSlice\";\n\nexport const fetchPermissionsAndBranch = async (dispatch) =&gt; {\n  const result = await dispatch(\n    pollingPermissionsApi.endpoints.getPollingPermissionsAndBranch.initiate(\n      undefined,\n      { subscribe: false, forceRefetch: true }\n    )\n  );\n\n  dispatch(setBranch(result?.data?.branch));\n  dispatch(updatePermission({ permissions: result?.data?.permissions }));\n};\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#4-settingshelpersjs","title":"4. <code>settingsHelpers.js</code>","text":"<pre><code>import { setGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\n\nexport const fetchGlobalSettings = async (dispatch, getGlobalSettings) =&gt; {\n  const settings = await getGlobalSettings().unwrap();\n  dispatch(setGlobalSetting({ value: settings }));\n};\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#5-errorhandlerjs","title":"5. <code>errorHandler.js</code>","text":"<pre><code>import { notify } from \"@shared/utils/notificationUtils\";\nimport { NotificationType } from \"@shared/utils/notification\";\n\nexport const handleLoginError = (err) =&gt; {\n  notify(\n    NotificationType.ERROR,\n    null,\n    err?.data?.error || \"Invalid Credentials\",\n    err?.data?.error_description ||\n      \"An unexpected error occurred during login.\",\n    2\n  );\n};\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#how-to-importuse","title":"How to import/use","text":"<p>Make sure the relative imports are correct depending on your project structure. For example:</p> <pre><code>import {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n} from \"./authHelpers\";\n\nimport { fetchPermissionsAndBranch } from \"./permissionHelpers\";\nimport { fetchGlobalSettings } from \"./settingsHelpers\";\nimport { handleLoginError } from \"./errorHandler\";\n</code></pre> <p>If you want, I can also help you with:</p> <ul> <li>Adding unit tests for these helpers</li> <li>Badge count modularization</li> <li>SignalR setup refactor</li> <li>Typescript typings (if you're using TS)</li> </ul>"},{"location":"office/bank/auth/login-refactored/#usage","title":"USAGE","text":"<p>\u2705 Goal</p> <p>Refactor the long <code>useLoginHandler</code> function you've pasted into a modular and clean version by using the helper files.</p> <p>\u2705 Step-by-step Migration Plan</p> <p>We will replace the logic inside your existing <code>useLoginHandler</code> by:</p> <ul> <li>Moving logic to appropriate helper files (auth, permissions, settings, errors).</li> <li>Keeping just the orchestration in <code>useLoginHandler</code>.</li> <li>Retaining your current features: badge count + SignalR.</li> </ul> <p>\u2705 1. Create These Helper Files (If not already done)</p> <ul> <li><code>authHelpers.js</code></li> <li><code>permissionHelpers.js</code></li> <li><code>settingsHelpers.js</code></li> <li><code>errorHandler.js</code></li> <li>(optional) <code>badgeHelpers.js</code> if you want to modularize badge logic.</li> </ul> <p>\u2705 2. Final Refactored <code>useLoginHandler.js</code></p> <p>Here's your updated <code>useLoginHandler.js</code>, keeping all your existing logic, but clean and modularized:</p> <pre><code>// useLoginHandler.js\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { useLoginMutation } from \"@features/auth/services/authApi\";\nimport { useLazyGetAllBadgeCountQuery } from \"@features/settings/services/counterBadgeApi\";\nimport { useLazyGetGlobalSettingsQuery } from \"@features/settings/services/globalSettingApi\";\n\nimport {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n} from \"./authHelpers\";\n\nimport { fetchPermissionsAndBranch } from \"./permissionHelpers\";\nimport { fetchGlobalSettings } from \"./settingsHelpers\";\nimport { fetchBadgeCount } from \"./badgeHelpers\";\nimport { handleLoginError } from \"./errorHandler\";\n\n// Optional: SignalR start\nimport { startSignalR } from \"@features/notifications/services/chatThunks\";\n\nconst useLoginHandler = () =&gt; {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const [login] = useLoginMutation();\n  const [getGlobalSettings] = useLazyGetGlobalSettingsQuery();\n  const [getAllBadgeCount] = useLazyGetAllBadgeCountQuery();\n\n  const handleLogin = async (username, password, remember) =&gt; {\n    setLoading(true);\n    try {\n      // Step 1: Authenticate user and decode token\n      const user = await authenticateUser(login, username, password);\n      const decodedToken = JSON.parse(atob(user.access_token.split(\".\")[1]));\n\n      // Step 2: Persist user credentials (if 'remember me')\n      persistUserInfo(username, remember);\n\n      // Step 3: Dispatch decoded token info to authSlice\n      dispatchUserAuth(dispatch, decodedToken, user);\n\n      // Step 4: Start SignalR (optional)\n      await dispatch(startSignalR());\n\n      // Step 5: Fetch and set permissions and branch\n      await fetchPermissionsAndBranch(dispatch);\n\n      // Step 6: Fetch and set global settings\n      await fetchGlobalSettings(dispatch, getGlobalSettings);\n\n      // Step 7: Fetch and set badge count\n      await fetchBadgeCount(dispatch, getAllBadgeCount);\n\n      return user;\n    } catch (err) {\n      handleLoginError(err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, handleLogin };\n};\n\nexport default useLoginHandler;\n</code></pre> <p>\u2705 3. Add This New Helper: <code>badgeHelpers.js</code></p> <pre><code>// badgeHelpers.js\nimport { setBadgeCount } from \"@features/settings/services/counterBadgeSlice\";\n\nexport const fetchBadgeCount = async (dispatch, getAllBadgeCount) =&gt; {\n  const badgeCounter = await getAllBadgeCount().unwrap();\n\n  dispatch(\n    setBadgeCount({\n      forexCount: badgeCounter?.forexCount,\n      moneyMarketCount: badgeCounter?.moneyMarketCount,\n      mutualFundCount: badgeCounter?.mutualFundCount,\n      ndfCount: badgeCounter?.ndfCount,\n      currencyMyListCount: badgeCounter?.currencyMyListCount,\n      currencyPendingCount: badgeCounter?.currencyPendingCount,\n      mftPendingCount: badgeCounter?.mftPendingCount,\n      mftMyListCount: badgeCounter?.mftMyListCount,\n    })\n  );\n};\n</code></pre> <p>\u2705 Summary</p> \u2705 You had... \u2705 Now you have... One huge <code>useLoginHandler</code> Clean orchestration function All logic tightly coupled Reusable helper functions Harder to test/maintain Easier to maintain &amp; test Badge count inline Modularized into <code>badgeHelpers.js</code> SignalR Still included \u2714\ufe0f <p>Optional Extras (if needed)</p> <ul> <li>Unit tests for each helper</li> <li>TypeScript conversion</li> <li>Error logging using <code>logger</code> module</li> <li>Dev vs Prod token mocks (if using fake token in dev)</li> </ul>"},{"location":"office/bank/auth/login-refactored/#defensive-programming","title":"DEFENSIVE PROGRAMMING","text":"<p>this is a real-world concern.</p> <p>You're asking:</p> <p>\ud83d\udcac \u201cWhat if one of the APIs like <code>fetchPermissionsAndBranch</code>, <code>fetchGlobalSettings</code>, or <code>fetchBadgeCount</code> fails? Will it break the entire login flow? How should I handle that?\u201d</p> <p>\u2705 Short Answer</p> <p>You should wrap each of those API calls in individual try-catch blocks to:</p> <ul> <li>Prevent a failure in one from breaking the others.</li> <li>Optionally notify the user or log the error.</li> </ul> <p>\u2705 Updated Code (Safe + Resilient Version)</p> <p>Here\u2019s how you update your <code>handleLogin</code> function to handle partial failures gracefully:</p> <pre><code>const handleLogin = async (username, password, remember) =&gt; {\n  setLoading(true);\n  try {\n    // Step 1: Authenticate user\n    const user = await authenticateUser(login, username, password);\n    const decodedToken = JSON.parse(atob(user.access_token.split(\".\")[1]));\n\n    // Step 2: Persist credentials\n    persistUserInfo(username, remember);\n\n    // Step 3: Dispatch auth\n    dispatchUserAuth(dispatch, decodedToken, user);\n\n    // Step 4: Start SignalR\n    await dispatch(startSignalR());\n\n    // Step 5: Permissions &amp; Branch\n    try {\n      await fetchPermissionsAndBranch(dispatch);\n    } catch (err) {\n      console.warn(\"Permission fetch failed\", err);\n      // optionally notify\n    }\n\n    // Step 6: Global Settings\n    try {\n      await fetchGlobalSettings(dispatch, getGlobalSettings);\n    } catch (err) {\n      console.warn(\"Global settings fetch failed\", err);\n      // optionally notify\n    }\n\n    // Step 7: Badge Count\n    try {\n      await fetchBadgeCount(dispatch, getAllBadgeCount);\n    } catch (err) {\n      console.warn(\"Badge count fetch failed\", err);\n      // optionally notify\n    }\n\n    return user;\n  } catch (err) {\n    handleLoginError(err);\n    return null;\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre> <p>\ud83d\udd0d Optional: User Notification on Partial Failures</p> <p>You can notify the user that login succeeded, but some data failed to load, like this:</p> <pre><code>notify(\n  NotificationType.WARNING,\n  \"Login Warning\",\n  \"Some settings failed to load. Please refresh or contact support.\"\n);\n</code></pre> <p>Use this inside any of the individual <code>catch</code> blocks above.</p> <p>\u2705 Benefits of This Approach</p> Feature Benefit Partial API failures Do not stop user from logging in Each step isolated Easier to debug and maintain User notified of issues No silent failures Logging (optional) Use <code>logger.warn()</code> or similar <p>Bonus Tip</p> <p>If these APIs are not hard-blocking for login, treat them as non-critical. This is what you\u2019re now doing.</p> <p>If any of them are critical, you can:</p> <ul> <li>Show a blocking error</li> <li>Redirect to a fallback page</li> <li>Or re-trigger retries</li> </ul> <p>Let me know if you'd like to go deeper into retry logic or fallback handling.</p>"},{"location":"office/bank/auth/login-refactored/#question","title":"QUESTION","text":"<p>\ud83d\udcac \u201cWhat if one of the APIs like <code>fetchPermissionsAndBranch</code>, <code>fetchGlobalSettings</code>, or <code>fetchBadgeCount</code> fails? Will it break the entire login flow? How should I handle that?\u201d does it break entire workflow if one falis or not</p> <p>Great question \u2014 let\u2019s break it down clearly so you understand exactly how JavaScript <code>async/await</code> and <code>try/catch</code> blocks behave in this scenario.</p> <p>\u2705 If You Do Not Handle Errors Separately</p> <p>Current code (without try/catch per step):</p> <pre><code>await fetchPermissionsAndBranch(dispatch);\nawait fetchGlobalSettings(dispatch, getGlobalSettings);\nawait fetchBadgeCount(dispatch, getAllBadgeCount);\n</code></pre> <p>\u274c What happens if <code>fetchGlobalSettings</code> fails?</p> <ul> <li>It throws an error.</li> <li>The entire <code>try</code> block is aborted.</li> <li>The next line (<code>fetchBadgeCount</code>) is never reached.</li> <li>The <code>catch</code> block for <code>handleLogin</code> runs.</li> <li>Result: Login fails completely, even if authentication succeeded.</li> </ul> <p>\ud83d\udd25 In short: Yes, it breaks the entire login workflow if even one fails.</p> <p>\u2705 If You Wrap Each Call in Its Own <code>try/catch</code></p> <p>Code example:</p> <pre><code>try {\n  await fetchPermissionsAndBranch(dispatch);\n} catch (err) {\n  console.warn(\"Permission fetch failed\", err);\n}\n\ntry {\n  await fetchGlobalSettings(dispatch, getGlobalSettings);\n} catch (err) {\n  console.warn(\"Global settings fetch failed\", err);\n}\n\ntry {\n  await fetchBadgeCount(dispatch, getAllBadgeCount);\n} catch (err) {\n  console.warn(\"Badge count fetch failed\", err);\n}\n</code></pre> <p>\ud83e\udde0 Recap</p> Approach What Happens if One Fails \u274c All in one <code>try</code> block Entire login breaks \u2705 Each call wrapped in <code>try/catch</code> Only that call fails, others continue <p>\u2705 Recommendation</p> <p>Refactor like this in your main <code>useLoginHandler</code>:</p> <pre><code>try {\n  await fetchPermissionsAndBranch(dispatch);\n} catch (err) {\n  console.error(\"Permissions fetch failed\", err);\n}\n\ntry {\n  await fetchGlobalSettings(dispatch, getGlobalSettings);\n} catch (err) {\n  console.error(\"Global settings fetch failed\", err);\n}\n\ntry {\n  await fetchBadgeCount(dispatch, getAllBadgeCount);\n} catch (err) {\n  console.error(\"Badge count fetch failed\", err);\n}\n</code></pre> <p>Let me know if you want an example that logs the error and still shows a \u201cLogin Success\u201d message with warnings \u2014 happy to add it.</p>"},{"location":"office/bank/auth/login-refactored/#full-code-with-notifications","title":"Full Code with Notifications","text":"<pre><code>const handleLogin = async (username, password, remember) =&gt; {\n  setLoading(true);\n  try {\n    // Step 1: Authenticate user\n    const user = await authenticateUser(login, username, password);\n    const decodedToken = JSON.parse(atob(user.access_token.split(\".\")[1]));\n\n    // Step 2: Persist credentials\n    persistUserInfo(username, remember);\n\n    // Step 3: Dispatch auth to Redux\n    dispatchUserAuth(dispatch, decodedToken, user);\n\n    // Step 4: Start SignalR connection\n    await dispatch(startSignalR());\n\n    // Step 5: Permissions &amp; Branch\n    try {\n      await fetchPermissionsAndBranch(dispatch);\n    } catch (err) {\n      console.warn(\"\u274c Permission fetch failed:\", err);\n      notify(\n        NotificationType.WARNING,\n        \"Permissions Unavailable\",\n        \"Some user permissions or branch info could not be loaded.\",\n        undefined,\n        3\n      );\n    }\n\n    // Step 6: Global Settings\n    try {\n      await fetchGlobalSettings(dispatch, getGlobalSettings);\n    } catch (err) {\n      console.warn(\"\u274c Global settings fetch failed:\", err);\n      notify(\n        NotificationType.WARNING,\n        \"Global Settings Error\",\n        \"System settings failed to load. Some features may not work correctly.\",\n        undefined,\n        3\n      );\n    }\n\n    // Step 7: Badge Count\n    try {\n      await fetchBadgeCount(dispatch, getAllBadgeCount);\n    } catch (err) {\n      console.warn(\"\u274c Badge count fetch failed:\", err);\n      notify(\n        NotificationType.WARNING,\n        \"Badge Count Error\",\n        \"Some dashboard badges failed to load.\",\n        undefined,\n        3\n      );\n    }\n\n    return user;\n  } catch (err) {\n    handleLoginError(err); // Notifies the user about auth failure\n    return null;\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#barrel-file","title":"Barrel FILE","text":"<p><code>index.js</code> \u2014 Barrel File for All Helpers</p> <pre><code>// index.js (barrel file)\n\nexport {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n} from \"./authHelpers\";\n\nexport { fetchPermissionsAndBranch } from \"./permissionHelpers\";\n\nexport { fetchGlobalSettings } from \"./settingsHelpers\";\n\nexport { fetchBadgeCount } from \"./badgeHelpers\";\n\nexport { handleLoginError } from \"./errorHandler\";\n</code></pre> <p>Then in your <code>useLoginHandler.js</code>, you can import everything from a single source:</p> <pre><code>import {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n  fetchPermissionsAndBranch,\n  fetchGlobalSettings,\n  fetchBadgeCount,\n  handleLoginError,\n} from \"./helpers\"; // or './helpers/index'\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#big-mistake-by-chatgpt","title":"BIG MISTAKE BY <code>CHATGPT</code>","text":"<p>\ud83d\udd0d What You Noticed</p> <p>You originally had:</p> <pre><code>import { jwtDecode } from \"jwt-decode\";\n\nconst decodedToken = jwtDecode(user?.access_token);\n</code></pre> <p>But in the refactored version, it was changed to:</p> <pre><code>const decodedToken = JSON.parse(atob(user.access_token.split(\".\")[1]));\n</code></pre> <p>Let\u2019s explain why that happened, and which one you should use.</p> <p>\u2705 Recommended: Use <code>jwt-decode</code></p> <pre><code>import { jwtDecode } from \"jwt-decode\";\nconst decodedToken = jwtDecode(user?.access_token);\n</code></pre> <p>\u274c <code>atob</code> version (not recommended for production)</p> <pre><code>const decodedToken = JSON.parse(atob(user.access_token.split(\".\")[1]));\n</code></pre> <p>So Why Was It Changed?</p> <ul> <li>It was likely replaced in the refactor for simplicity, or possibly:</li> <li>The person didn't want to import an extra dependency</li> <li>They were working in a small isolated code context</li> <li>It was a fast example (but not a production-safe one)</li> </ul> <p>\u2705 TL;DR</p> Approach Use? Reason <code>jwtDecode(token)</code> \u2705 Yes Safe, reliable, handles padding and URL encoding <code>JSON.parse(atob(...))</code> \u274c No Unsafe, brittle, breaks in edge cases and tests <pre><code>// src/shared/hooks/useLoginHandler.js\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { useLoginMutation } from \"@features/auth/services/authApi\";\nimport { useLazyGetAllBadgeCountQuery } from \"@features/settings/services/counterBadgeApi\";\nimport { useLazyGetGlobalSettingsQuery } from \"@features/settings/services/globalSettingApi\";\n\nimport { jwtDecode } from \"jwt-decode\"; // \u2705 Use this instead of atob\n\nimport {\n  authenticateUser,\n  persistUserInfo,\n  dispatchUserAuth,\n  fetchPermissionsAndBranch,\n  fetchGlobalSettings,\n  handleLoginError,\n} from \"@features/auth/utils\";\n\nimport logger from \"@shared/utils/logger\";\n\nconst useLoginHandler = () =&gt; {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n\n  const [login] = useLoginMutation();\n  const [getGlobalSettings] = useLazyGetGlobalSettingsQuery();\n  const [getAllBadgeCount] = useLazyGetAllBadgeCountQuery();\n\n  const handleLogin = async (username, password, remember) =&gt; {\n    setLoading(true);\n    try {\n      // Step 1: Login and decode token\n      const user = await authenticateUser(login, username, password);\n      const decodedToken = jwtDecode(user?.access_token); // \u2705 Safer decoding\n\n      // Step 2: Save credentials if \"remember me\" is checked\n      persistUserInfo(username, remember);\n\n      // Step 3: Update Redux auth state\n      dispatchUserAuth(dispatch, decodedToken, user);\n\n      // Step 4: Fetch permissions &amp; branch info\n      try {\n        await fetchPermissionsAndBranch(dispatch);\n      } catch (err) {\n        console.warn(\"Permission fetch failed\", err);\n      }\n\n      // Step 5: Load global settings\n      try {\n        await fetchGlobalSettings(dispatch, getGlobalSettings);\n      } catch (err) {\n        console.warn(\"Global settings fetch failed\", err);\n      }\n\n      return user;\n    } catch (err) {\n      handleLoginError(err);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, handleLogin };\n};\n\nexport default useLoginHandler;\n</code></pre>"},{"location":"office/bank/auth/login-refactored/#previous-code-fallback-if-anything-goes-wrong","title":"Previous Code || FALLBACK: if anything goes wrong","text":"useLoginHandler.js<pre><code>import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { message } from \"antd\";\nimport { jwtDecode } from \"jwt-decode\";\nimport queryString from \"query-string\";\n\nimport { useLoginMutation } from \"@features/auth/services/authApi\";\nimport {\n  setAuth,\n  updatePermission,\n  setBranch,\n} from \"@features/auth/services/authSlice\";\nimport { setBadgeCount } from \"@features/settings/services/counterBadgeSlice\";\nimport { setGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport { CONFIG, OAUTH } from \"@shared/utils/config\";\nimport { startSignalR } from \"@features/notifications/services/chatThunks\";\nimport { getFakeBranches } from \"@shared/utils/fakeBranches\";\nimport { pollingPermissionsApi } from \"@features/settings/services/settingApi\";\nimport { useLazyGetAllBadgeCountQuery } from \"@features/settings/services/counterBadgeApi\";\nimport { useLazyGetGlobalSettingsQuery } from \"@features/settings/services/globalSettingApi\";\n\nimport {\n  NotificationType,\n  NotificationPlacement,\n  NotificationDuration,\n} from \"@shared/utils/notification\";\nimport logger from \"@shared/utils/logger\";\n\nconst useLoginHandler = () =&gt; {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const [login] = useLoginMutation();\n  const [\n    getAllBadgeCount,\n    {\n      data: badgeCountData,\n      isLoading: isLoadingBadgeCount,\n      error: errorBadgeCount,\n    },\n  ] = useLazyGetAllBadgeCountQuery();\n\n  const [\n    getGlobalSettings,\n    {\n      data: globalSystemData,\n      isLoading: isGlobalSystemLoading,\n      error: errorGlobalSystem,\n    },\n  ] = useLazyGetGlobalSettingsQuery();\n\n  const handleLogin = async (username, password, remember) =&gt; {\n    setLoading(true);\n    try {\n      const formData = queryString.stringify({\n        username,\n        password,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      // FOR PRODUCTION\n      const user = await login(formData).unwrap();\n      const decodedToken = jwtDecode(user?.access_token);\n\n      logger.info({ msg: \"Login\", decodedToken, username, remember });\n      // localStorage.setItem(\"email\", email)\n\n      if (remember) {\n        localStorage.setItem(\"email\", username);\n        localStorage.setItem(\"remember\", true);\n      } else {\n        localStorage.setItem(\"remember\", false);\n      }\n\n      dispatch(\n        setAuth({\n          token: user?.access_token || null,\n          refresh: user?.refresh_token || null,\n          role: decodedToken?.role || null,\n          // permissions: decodedToken?.Permissions || null,\n          appUserId: decodedToken?.sub || null,\n          scope: decodedToken?.scope || null,\n          user: decodedToken?.username || null,\n          name: decodedToken?.name || null,\n          // branch: getFakeBranches() || null,\n          branch: decodedToken?.branch || null,\n          iat: decodedToken?.iat || null,\n          exp: decodedToken?.exp || null,\n        })\n      );\n\n      // await dispatch(startSignalR());\n      // const permisson = await dispatch(\n      //   pollingPermissionsApi.endpoints.getPollingPermissions.initiate(\n      //     {\n      //       id: decodedToken?.sub,\n      //     },\n      //     {\n      //       subscribe: false,\n      //       forceRefetch: true,\n      //     }\n      //   )\n      // );\n\n      // const branch = await dispatch(\n      //   pollingPermissionsApi.endpoints.getPollingPermissionsForBranch.initiate(\n      //     undefined,\n      //     {\n      //       subscribe: false,\n      //       forceRefetch: true,\n      //     }\n      //   )\n      // );\n\n      // dispatch(setBranch(branch?.data));\n      // // dispatch(setBranch({ branch: branch?.data }));\n      // dispatch(\n      //   updatePermission({\n      //     permissions: permisson?.data,\n      //   })\n      // );\n\n      // UPATED With Optimization\n      const result = await dispatch(\n        pollingPermissionsApi.endpoints.getPollingPermissionsAndBranch.initiate(\n          undefined,\n          { subscribe: false, forceRefetch: true }\n        )\n      );\n\n      // console.log(\"XXX RESULT BRANCH : \", result?.data?.branch);\n      // console.log(\"XXX RESULT PERMISSION: \", result?.data?.permissions);\n\n      dispatch(setBranch(result?.data?.branch));\n      dispatch(\n        updatePermission({\n          permissions: result?.data?.permissions,\n        })\n      );\n\n      // const badgeCounter = await getAllBadgeCount().unwrap();\n\n      // dispatch(\n      //   setBadgeCount({\n      //     forexCount: badgeCounter?.forexCount,\n      //     moneyMarketCount: badgeCounter?.moneyMarketCount,\n      //     mutualFundCount: badgeCounter?.mutualFundCount,\n      //     ndfCount: badgeCounter?.ndfCount,\n      //     currencyMyListCount: badgeCounter?.currencyMyListCount,\n      //     currencyPendingCount: badgeCounter?.currencyPendingCount,\n      //     mftPendingCount: badgeCounter?.mftPendingCount,\n      //     mftMyListCount: badgeCounter?.mftMyListCount,\n      //     // myListCount: 0,\n      //     // pendingCount: 0\n      //   }),\n      // );\n\n      const globalSystem = await getGlobalSettings().unwrap();\n      dispatch(\n        setGlobalSetting({\n          value: globalSystem,\n        })\n      );\n\n      return user;\n\n      // FOR DEVELOPMENT ONLY\n      // const user =\n      //   \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkJENjM2QzY4NzBDRjZCMzEwODJDOTdENjE5NkM2ODQzIiwidHlwIjoiYXQrand0In0.eyJpc3MiOiJodHRwOi8vYmstaWQyLmluZm8uY29tLm5wIiwibmJmIjoxNzM0MzMwNTgxLCJpYXQiOjE3MzQzMzA1ODEsImV4cCI6MTczNDMzNDE4MSwiYXVkIjoiQmFua2luZ0FwcEFQSSIsInNjb3BlIjpbIkJhbmtpbmdBcHBBUEkucmVhZCJdLCJhbXIiOlsicHdkIl0sImNsaWVudF9pZCI6IndlYmNsaWVudCIsInN1YiI6IjVjZjdhNzg2LTU5NTUtNDM5Zi1jOWQyLTA4ZGQxM2Q0NmEzMiIsImF1dGhfdGltZSI6MTczNDMzMDU4MSwiaWRwIjoibG9jYWwiLCJyb2xlIjoiQWRtaW4iLCJQZXJtaXNzaW9uIjpbIlRvZG9QZXJtaXNzaW9ucy5DYW5WaWV3RGF0YSIsIlRvZG9QZXJtaXNzaW9ucy5DYW5FZGl0RGF0YSJdLCJqdGkiOiI3Mzg2NTMzNENDRUFEQkYxN0REQjZFOTE0NUU5NjdDRSJ9.pau7GSjpRGSLbXQcDyjwXGj2mAheyaKw_FdyGRR8xg_JsMGuciIFX6qL_JHaAx-XbET0_DMvvm8M134oy52up55058eT7JzkC8b_PBvP9n2OW7Ev2kpdcbul9TcuBFvoDrhystq6OAV_iy_Tbqvvsts-KHGjrDo8UkZo1zNew5wADziOMwl8yqZj8hcNe_ahMeVjeALjfTeaSQcSj_CJq4oCBGwG35Zoc44EoSK51m9lPn7I5Y6SbgjZFcx6JQgVPMhqPp0y0TJpyGr9zlB7O8rd3X1U8cHNpEOu79AOwevfc6C-3SzSgRAuuvycwxVoA7dpdEe4DKsmPzYkdY28cQ\";\n      // const decodedToken = jwtDecode(user);\n      // dispatch(\n      //   setAuth({\n      //     token: user || null,\n      //     refresh: user || null,\n      //     role: decodedToken?.role || null,\n      //     scope: decodedToken?.scope || null,\n      //   })\n      // );\n      // return user;\n      // delete uptohere in production\n    } catch (err) {\n      notify(\n        NotificationType.ERROR,\n        null,\n        err?.data?.error || \"Invalid Credentials\",\n        err?.data?.error_description ||\n          \"An unexpected error occurred during login.\",\n        2\n      );\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, handleLogin };\n};\n\nexport default useLoginHandler;\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/","title":"Logout Refactored","text":""},{"location":"office/bank/auth/logout-refactored/#logout-refactored","title":"Logout Refactored","text":""},{"location":"office/bank/auth/logout-refactored/#previous","title":"PREVIOUS","text":"logoutHelper.js<pre><code>import { logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\nimport { logoutFromIdle } from \"@features/idle/services/idleSlice\";\nimport { stopSignalR } from \"@features/notifications/services/chatThunks\";\nimport { clearBase64Data } from \"@features/profile/services/profileSlice\";\n\nimport rememeberMe from \"@shared/utils/rememberMe\";\n\nexport const performLogout = (dispatch) =&gt; {\n  dispatch(logout());\n  dispatch(stopSignalR());\n  dispatch(logoutFromIdle());\n  dispatch(resetState());\n  dispatch(clearGlobalSetting());\n  dispatch(clearBageCount());\n  dispatch(clearBase64Data());\n  rememeberMe();\n};\n</code></pre> <p>Header.jsx</p> <pre><code>const handleLogout = () =&gt; {\n  performLogout(dispatch);\n};\n\nconst items = [\n  { key: \"1\", label: &lt;a onClick={onClickUserProfile}&gt;Profile&lt;/a&gt; },\n  {\n    key: \"2\",\n    label: &lt;a onClick={updatePassword}&gt;Update Password&lt;/a&gt;,\n  },\n  {\n    key: \"3\",\n    label: &lt;a onClick={onTutorial}&gt;Tutorial&lt;/a&gt;,\n  },\n  {\n    key: \"4\",\n    label: &lt;a onClick={handleLogout}&gt;Logout&lt;/a&gt;,\n  },\n];\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#now-updated","title":"NOW UPDATED","text":"<p>\ud83e\udde0 Split into:</p> <ul> <li><code>handleFullLogout(dispatch)</code> \u2192 handles just the API call.</li> <li><code>performLogout(dispatch)</code> \u2192 handles Redux state reset &amp; cleanup.</li> </ul> <pre><code>src/\n\u251c\u2500\u2500 features/\n\u2502   \u251c\u2500\u2500 auth/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2502       \u251c\u2500\u2500 authApi.js\n\u2502   \u2502       \u2514\u2500\u2500 authSlice.js\n\u2502   \u251c\u2500\u2500 idle/\n\u2502   \u2502   \u2514\u2500\u2500 services/idleSlice.js\n\u2502   \u251c\u2500\u2500 notifications/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2502       \u251c\u2500\u2500 chatSlice.js\n\u2502   \u2502       \u2514\u2500\u2500 chatThunks.js\n\u2502   \u251c\u2500\u2500 profile/\n\u2502   \u2502   \u2514\u2500\u2500 services/profileSlice.js\n\u2502   \u251c\u2500\u2500 settings/\n\u2502   \u2502   \u2514\u2500\u2500 services/\n\u2502   \u2502       \u251c\u2500\u2500 counterBadgeSlice.js\n\u2502   \u2502       \u2514\u2500\u2500 globalSettingSlice.js\n\u2502\n\u251c\u2500\u2500 shared/\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 rememberMe.js\n\u2502       \u251c\u2500\u2500 logger.js\n\u2502       \u251c\u2500\u2500 logoutUser.js        &lt;-- \u2705 utility for logout API\n\u2502       \u2514\u2500\u2500 logoutHelper.js      &lt;-- \u2705 main logout function\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#1-authapijs-rtk-query-api-setup","title":"1. <code>authApi.js</code> \u2014 RTK Query API Setup","text":"<pre><code>// @features/auth/services/authApi.js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api\" }),\n  endpoints: (builder) =&gt; ({\n    logoutApp: builder.mutation({\n      query: () =&gt; ({\n        url: \"/logout\",\n        method: \"POST\",\n      }),\n    }),\n  }),\n});\n\nexport const { useLogoutAppMutation } = authApi;\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#2-logoutuserjs-utility-function-to-handle-api-logout","title":"2. <code>logoutUser.js</code> \u2014 Utility function to handle API logout","text":"<pre><code>// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\n// \u2705 Only handles the API call\nexport const handleFullLogout = async (dispatch) =&gt; {\n  return await dispatch(authApi.endpoints.logoutApp.initiate()).unwrap();\n};\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#3-logouthelperjs-performs-full-logout-flow","title":"3. <code>logoutHelper.js</code> \u2014 Performs full logout flow","text":"<pre><code>// @shared/utils/logoutHelper.js\n\nimport { logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\nimport { logoutFromIdle } from \"@features/idle/services/idleSlice\";\nimport { stopSignalR } from \"@features/notifications/services/chatThunks\";\nimport { clearBase64Data } from \"@features/profile/services/profileSlice\";\n\nimport rememeberMe from \"@shared/utils/rememberMe\";\nimport logger from \"@shared/utils/logger\";\nimport { handleFullLogout } from \"./logoutUser\"; // \u2705 API-only utility\n\nexport const performLogout = async (dispatch) =&gt; {\n  try {\n    // \ud83d\udd10 1. Perform logout API call\n    await handleFullLogout(dispatch);\n\n    // \ud83d\udd04 2. Reset client-side state\n    dispatch(logout());\n    dispatch(stopSignalR());\n    dispatch(logoutFromIdle());\n    dispatch(resetState());\n    dispatch(clearGlobalSetting());\n    dispatch(clearBageCount());\n    dispatch(clearBase64Data());\n    rememeberMe();\n\n    // Optional: redirect, toast, etc.\n  } catch (err) {\n    logger.error({ msg: \"Logout API failed\", err });\n  }\n};\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#4-logoutbuttonjsx-using-the-logout-in-your-component","title":"4. <code>LogoutButton.jsx</code> \u2014 Using the logout in your component","text":"<pre><code>// @components/LogoutButton.jsx\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { performLogout } from \"@shared/utils/logoutHelper\";\n\nconst LogoutButton = () =&gt; {\n  const dispatch = useDispatch();\n\n  const handleClick = async () =&gt; {\n    await performLogout(dispatch);\n  };\n\n  return &lt;button onClick={handleClick}&gt;Logout&lt;/button&gt;;\n};\n\nexport default LogoutButton;\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#bonus-add-toastredirect-support-optional","title":"\u2705 Bonus: Add Toast/Redirect Support (optional)","text":"<p>You can easily modify <code>performLogout</code> to:</p> <ul> <li>Show a toast</li> <li>Redirect to login</li> <li>Clear cookies, etc.</li> </ul> <pre><code>import { useNavigate } from \"react-router-dom\";\n// ...\nnavigate(\"/login\");\n</code></pre>"},{"location":"office/bank/auth/logout-refactored/#summary","title":"\u2705 Summary","text":"File Responsibility <code>logoutUser.js</code> Contains <code>handleFullLogout(dispatch)</code> \u2014 API only <code>logoutHelper.js</code> Contains <code>performLogout(dispatch)</code> \u2014 full logout flow <code>LogoutButton.jsx</code> Calls <code>performLogout(dispatch)</code> on click"},{"location":"office/bank/auth/logout-refactored/#send-token-and-id-in-the-logout","title":"SEND Token and ID in the Logout","text":"<p>If your logout API requires:</p> <ul> <li>\u2705 A token in the request headers (e.g. <code>Authorization: Bearer &lt;token&gt;</code>)</li> <li>\u2705 An ID (e.g. <code>userId</code>) in the request body</li> </ul> <p>Then you need to modify:</p> <ul> <li>The RTK Query mutation (<code>logoutApp</code>)</li> <li>The <code>handleFullLogout(dispatch, userId, token)</code> utility</li> <li>The call to <code>performLogout(dispatch, userId, token)</code> to pass those values in</li> </ul> <p>\u2705 1. Update RTK Query API (<code>authApi.js</code>)</p> <pre><code>// @features/auth/services/authApi.js\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"/api\",\n    prepareHeaders: (headers, { getState }) =&gt; {\n      // You can also grab token from state here if needed\n      return headers;\n    },\n  }),\n  endpoints: (builder) =&gt; ({\n    logoutApp: builder.mutation({\n      query: ({ userId, token }) =&gt; ({\n        url: \"/logout\",\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`, // \u2705 Add token header\n        },\n        body: { userId }, // \u2705 Send payload\n      }),\n    }),\n  }),\n});\n\nexport const { useLogoutAppMutation } = authApi;\n</code></pre> <p>\u2705 2. Update <code>handleFullLogout(dispatch, userId, token)</code></p> <pre><code>// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\n// \u2705 Pass token and ID as args\nexport const handleFullLogout = async (dispatch, userId, token) =&gt; {\n  return await dispatch(\n    authApi.endpoints.logoutApp.initiate({ userId, token })\n  ).unwrap();\n};\n</code></pre> <p>\u2705 3. Update <code>performLogout(dispatch, userId, token)</code></p> <pre><code>// @shared/utils/logoutHelper.js\nimport { logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport { clearGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\nimport { clearBageCount } from \"@features/settings/services/counterBadgeSlice\";\nimport { logoutFromIdle } from \"@features/idle/services/idleSlice\";\nimport { stopSignalR } from \"@features/notifications/services/chatThunks\";\nimport { clearBase64Data } from \"@features/profile/services/profileSlice\";\n\nimport rememeberMe from \"@shared/utils/rememberMe\";\nimport logger from \"@shared/utils/logger\";\nimport { handleFullLogout } from \"./logoutUser\";\n\n// \u2705 Accept userId and token\nexport const performLogout = async (dispatch, userId, token) =&gt; {\n  try {\n    await handleFullLogout(dispatch, userId, token);\n\n    dispatch(logout());\n    dispatch(stopSignalR());\n    dispatch(logoutFromIdle());\n    dispatch(resetState());\n    dispatch(clearGlobalSetting());\n    dispatch(clearBageCount());\n    dispatch(clearBase64Data());\n    rememeberMe();\n  } catch (err) {\n    logger.error({ msg: \"Logout API failed\", err });\n  }\n};\n</code></pre> <p>\u2705 4. Use It in Your Component</p> <p>Now call it like this:</p> <pre><code>// @components/LogoutButton.jsx\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { performLogout } from \"@shared/utils/logoutHelper\";\n\nconst LogoutButton = () =&gt; {\n  const dispatch = useDispatch();\n\n  // Assume token and userId are stored in Redux\n  const token = useSelector((state) =&gt; state.auth.token);\n  const userId = useSelector((state) =&gt; state.auth.user?.id);\n\n  const handleClick = async () =&gt; {\n    await performLogout(dispatch, userId, token);\n  };\n\n  return &lt;button onClick={handleClick}&gt;Logout&lt;/button&gt;;\n};\n\nexport default LogoutButton;\n</code></pre> \ud83e\udde0 Tips <ul> <li>If your token is stored in <code>localStorage</code> or a cookie, you can also pass it from there.</li> <li>You could centralize token handling in <code>prepareHeaders()</code> if you want it applied globally.</li> <li>You might want to clear the token from storage after <code>performLogout</code>.</li> </ul> <p>\u2705 Final Summary</p> What How Token in header Pass via <code>Authorization</code> header inside <code>query()</code> userId in body Send via <code>body: { userId }</code> Dispatching mutation <code>dispatch(authApi.endpoints.logoutApp.initiate({ userId, token }))</code> Full flow <code>performLogout(dispatch, userId, token)</code> wraps everything cleanly"},{"location":"office/bank/auth/logout-refactored/#axiosbasequeryjs-snippet","title":"<code>axiosBaseQuery.js</code> Snippet","text":"<p>Here\u2019s the key section that makes it all work:</p> <pre><code>const state = api.getState(); // from RTK Query context\nconst token = state.auth?.token;\nconst userId = state.auth?.user?.id;\n\nawait performLogout(api.dispatch, userId, token);\n</code></pre> <p>This avoids hooks, respects React rules, and handles everything inside your non-React context (<code>axiosBaseQuery</code>).</p>"},{"location":"office/bank/auth/logout-refactored/#question","title":"Question","text":"<p><code>performLogout(api.dispatch);</code> but i have dispatch from the cusotm <code>axiosBaseQuery.js</code> also.</p> <p>Thanks for the clarification \u2014 you\u2019re calling <code>performLogout(api.dispatch)</code> from inside a custom <code>axiosBaseQuery.js</code>, which is used in RTK Query, and you're wondering how to pass a <code>token</code> and <code>userId</code> to <code>performLogout()</code> in that context.</p> <p>Let\u2019s break this down and give you the exact solution that works inside <code>axiosBaseQuery</code> \u2014 no React hooks involved.</p> <p>\u2705 Goal</p> <p>You want to:</p> <ul> <li>Call <code>performLogout(dispatch, userId, token)</code> inside your <code>axiosBaseQuery</code></li> <li>Use the RTK Query <code>api</code> object to get <code>dispatch</code></li> <li>Retrieve the token &amp; user ID (probably from <code>Redux state</code> or <code>localStorage</code>)</li> </ul> <p>\u2705 Step-by-Step Solution</p> <p>1. Your Custom <code>axiosBaseQuery.js</code></p> <p>Assuming your setup looks something like this:</p> <pre><code>// @shared/utils/axiosBaseQuery.js\nimport axios from \"axios\";\nimport { performLogout } from \"@shared/utils/logoutHelper\";\n\nconst axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, data, params }, api) =&gt; {\n    try {\n      const result = await axios({\n        url: baseUrl + url,\n        method,\n        data,\n        params,\n        headers: {\n          Authorization: `Bearer ${getToken()}`, // optional\n        },\n      });\n\n      return { data: result.data };\n    } catch (err) {\n      const status = err.response?.status;\n\n      // \ud83d\udd10 Handle auth-related errors globally\n      if (status === 401 || status === 403) {\n        const state = api.getState(); // \u2705 access state\n        const token = state.auth?.token;\n        const userId = state.auth?.user?.id;\n\n        await performLogout(api.dispatch, userId, token);\n      }\n\n      return {\n        error: {\n          status: err.response?.status,\n          data: err.response?.data || err.message,\n        },\n      };\n    }\n  };\n\nexport default axiosBaseQuery;\n</code></pre> <p>2. <code>performLogout(dispatch, userId, token)</code> Usage</p> <p>No changes are needed in <code>performLogout.js</code> if you already structured it like this:</p> <pre><code>export const performLogout = async (dispatch, userId, token) =&gt; {\n  try {\n    await handleFullLogout(dispatch, userId, token);\n\n    dispatch(logout());\n    dispatch(stopSignalR());\n    dispatch(logoutFromIdle());\n    dispatch(resetState());\n    dispatch(clearGlobalSetting());\n    dispatch(clearBageCount());\n    dispatch(clearBase64Data());\n    rememeberMe();\n  } catch (err) {\n    logger.error({ msg: \"Logout API failed\", err });\n  }\n};\n</code></pre> <p>3. <code>handleFullLogout.js</code> stays simple</p> <pre><code>// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\nexport const handleFullLogout = async (dispatch, userId, token) =&gt; {\n  return await dispatch(\n    authApi.endpoints.logoutApp.initiate({ userId, token })\n  ).unwrap();\n};\n</code></pre> <p>\u2705 Summary: Your Final <code>axiosBaseQuery.js</code> Snippet</p> <p>Here\u2019s the key section that makes it all work:</p> <pre><code>const state = api.getState(); // from RTK Query context\nconst token = state.auth?.token;\nconst userId = state.auth?.user?.id;\n\nawait performLogout(api.dispatch, userId, token);\n</code></pre> <p>This avoids hooks, respects React rules, and handles everything inside your non-React context (<code>axiosBaseQuery</code>).</p> <p>\ud83d\udd12 Optional: If Token Is in <code>localStorage</code></p> <p>Replace:</p> <pre><code>const token = state.auth?.token;\n</code></pre> <p>With:</p> <pre><code>const token = localStorage.getItem(\"accessToken\");\n</code></pre> <p>Or wherever your token is stored.</p>"},{"location":"office/bank/auth/logout-refactored/#what-is-prepareheaders-in-rtk-query","title":"\ud83d\udd10 What is <code>prepareHeaders()</code> in RTK Query?","text":"<p><code>prepareHeaders()</code> is a function you can define in your RTK Query <code>baseQuery</code> (like <code>fetchBaseQuery</code>) to automatically attach headers \u2014 such as your authentication token \u2014 to every request made through RTK Query.</p> <p>You can safely extend <code>prepareHeaders()</code> to also add the <code>Authorization</code> token \u2014 typically from:</p> <ul> <li>Redux state (<code>getState()</code>)</li> <li>OR <code>localStorage</code> (if you prefer that)</li> </ul> <pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { CONFIG } from \"@shared/utils/config\";\n\nexport const authApi = createApi({\n  reducerPath: \"authApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: CONFIG.BASE_URL,\n\n    prepareHeaders: (headers, { getState }) =&gt; {\n      // Set content type\n      headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n      // \u2705 Get token from Redux store\n      const token = getState()?.auth?.token;\n\n      if (token) {\n        headers.set(\"Authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    },\n  }),\n\n  endpoints: (builder) =&gt; ({\n    login: builder.mutation({\n      query: (credentials) =&gt; ({\n        url: \"\",\n        method: \"POST\",\n        body: credentials,\n      }),\n    }),\n\n    logoutApp: builder.mutation({\n      query: () =&gt; ({\n        url: \"api/Account/Logout\",\n        method: \"POST\",\n      }),\n    }),\n  }),\n});\n\nexport const { useLoginMutation, useLogoutAppMutation } = authApi;\n</code></pre> <p>\u2705 Now You Don\u2019t Need to Manually Pass the Token Anymore</p> <p>You can simplify your logout API call like this:</p> handleFullLogout.js<pre><code>// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\nexport const handleFullLogout = async (dispatch) =&gt; {\n  return await dispatch(authApi.endpoints.logoutApp.initiate()).unwrap();\n};\n</code></pre> <p>\u2705 No need to manually pass the token anymore \u2014 it\u2019s added via <code>prepareHeaders()</code>.</p> <p>\u2705 Bonus: If You Use <code>localStorage</code> for Token</p> <p>If you store the token outside Redux (e.g. in <code>localStorage</code>), replace <code>getState()</code> like this:</p> <pre><code>prepareHeaders: (headers) =&gt; {\n  headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    headers.set(\"Authorization\", `Bearer ${token}`);\n  }\n\n  return headers;\n},\n</code></pre> <p>\ud83e\udde0 TL;DR</p> <ul> <li>You're already using <code>prepareHeaders()</code> \u2705</li> <li>Extend it to add the token automatically to all authenticated requests \u2705</li> <li>Simplify <code>logoutApp</code> mutation \u2014 no need to pass token manually anymore \u2705</li> <li>Cleaner and more centralized code \u2705</li> </ul> <pre><code>// @features/auth/services/authApi.js\nlogoutApp: builder.mutation({\n  query: ({ userId }) =&gt; ({\n    url: \"api/Account/Logout\",\n    method: \"POST\",\n    body: { userId }, // \u2705 send userId in request body\n  }),\n}),\n\n\n// @shared/utils/logoutUser.js\nimport { authApi } from \"@features/auth/services/authApi\";\n\nexport const handleFullLogout = async (dispatch, userId) =&gt; {\n  return await dispatch(\n    authApi.endpoints.logoutApp.initiate({ userId })\n  ).unwrap();\n};\n\n\n// @shared/utils/logoutHelper.js\nimport { handleFullLogout } from \"./logoutUser\";\n// other imports...\n\nexport const performLogout = async (dispatch, userId) =&gt; {\n  try {\n    await handleFullLogout(dispatch, userId); // \u2705 only pass userId\n\n    // Reset app state\n    dispatch(logout());\n    dispatch(stopSignalR());\n    dispatch(logoutFromIdle());\n    dispatch(resetState());\n    dispatch(clearGlobalSetting());\n    dispatch(clearBageCount());\n    dispatch(clearBase64Data());\n    rememeberMe();\n  } catch (err) {\n    logger.error({ msg: \"Logout API failed\", err });\n  }\n};\n\n// axiosBaseQuery\nconst state = api.getState();\nconst userId = state.auth?.user?.id;\n\nawait performLogout(api.dispatch, userId);\n\n// React Component\nconst token = useSelector((state) =&gt; state.auth.token); // no longer needed\nconst userId = useSelector((state) =&gt; state.auth.user?.id);\n\nawait performLogout(dispatch, userId);\n</code></pre> What Do Need to send token? No \u2014 handled globally in <code>prepareHeaders()</code> Need to send userId? Yes \u2014 pass it in mutation body (<code>{ userId }</code>) What does <code>handleFullLogout()</code> accept? Just <code>dispatch, userId</code> What does <code>performLogout()</code> accept? Same \u2014 <code>dispatch, userId</code>"},{"location":"office/bank/auth/logout-refactored/#dropdown","title":"Dropdown","text":"<pre><code>import React, { useState } from \"react\";\nimport { performLogout } from \"@shared/utils/logoutHelper\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function DropdownMenu() {\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const userId = useSelector((state) =&gt; state.auth.user?.id);\n\n  const handleLogout = async () =&gt; {\n    setIsLoggingOut(true);\n\n    try {\n      await performLogout(dispatch, userId);\n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Logout failed\", error);\n    } finally {\n      setIsLoggingOut(false);\n    }\n  };\n\n  return (\n    &lt;div className=\"dropdown-menu\"&gt;\n      {/* Other dropdown items */}\n      &lt;button\n        onClick={handleLogout}\n        className=\"flex items-center gap-2 px-4 py-2 text-sm text-red-600 hover:bg-red-50 disabled:opacity-50\"\n        disabled={isLoggingOut}\n      &gt;\n        {isLoggingOut ? (\n          &lt;&gt;\n            &lt;Spinner size=\"sm\" /&gt; Logging out...\n          &lt;/&gt;\n        ) : (\n          &lt;&gt;\n            &lt;LogoutIcon /&gt; Logout\n          &lt;/&gt;\n        )}\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"office/bank/auth/overview/","title":"Overview","text":""},{"location":"office/bank/auth/overview/#overview","title":"Overview","text":"axiosBaseQuery.js<pre><code>import queryString from \"query-string\";\nimport axiosInstance from \"./axiosInstance\";\nimport { store } from \"@shared/store/store\";\nimport { updateRefreshToken, logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport logger from \"@shared/utils/logger\";\nimport { OAUTH_REFRESH, CONFIG } from \"@shared/utils/config\";\n\nexport const axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, meta, data, params, headers }, api) =&gt; {\n    try {\n      const result = await axiosInstance.base({\n        url: baseUrl + url,\n        method,\n        meta,\n        data,\n        params,\n        headers,\n      });\n\n      if (!result || !result.data) {\n        throw new Error(\"Invalid response structure from the server\");\n      }\n\n      return { data: result.data, meta: { ...meta, method } };\n    } catch (axiosError) {\n      const apiStatus = axiosError?.response?.status;\n      const detail =\n        axiosError?.response?.data?.detail ?? \"An unknown error occurred\";\n      const status = axiosError?.response?.data?.status ?? \"Error\";\n      const title =\n        axiosError?.response?.data?.title ?? \"An unknown error occurred\";\n      const type = axiosError?.response?.data?.type ?? \"Error\";\n      if (apiStatus === 401) {\n        const refreshToken = store.getState().auth.refresh;\n        const formData = queryString.stringify({\n          grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n          client_id: OAUTH_REFRESH?.CLIENT_ID,\n          client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n          scope: OAUTH_REFRESH?.SCOPE,\n          refresh_token: refreshToken,\n        });\n\n        try {\n          const refreshResult = await axiosInstance.login.post(\n            CONFIG.BASE_URL,\n            formData,\n            {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n              },\n            }\n          );\n          logger.info({ msg: \"REFRESH: \", refreshResult });\n\n          const { data } = refreshResult || {};\n\n          if (data) {\n            api.dispatch(updateRefreshToken(data));\n            return { data };\n          } else {\n            logger.error({ msg: \"Unable to refresh token. Logged out.\" });\n            api.dispatch(logout());\n            api.dispatch(resetState());\n          }\n        } catch (error) {\n          logger.error({ msg: \"Error: \", error });\n          api.dispatch(logout());\n          api.dispatch(resetState());\n        }\n      }\n\n      if (apiStatus === 400) {\n        const detail =\n          axiosError?.response?.data?.title ?? \"An unknown error occurred\";\n        const status = axiosError?.response?.data?.status ?? \"Error\";\n        return {\n          error: {\n            status: status,\n            data: {\n              type: type,\n              title: detail,\n              detail: title,\n            },\n          },\n        };\n      }\n\n      return {\n        error: {\n          status: status,\n          data: {\n            type: type,\n            title: detail,\n            detail: title,\n          },\n        },\n      };\n    }\n  };\n</code></pre>"},{"location":"office/bank/auth/overview/#iat-and-exp","title":"<code>iat</code> and <code>exp</code>","text":"<p>The <code>\"exp\"</code> and <code>\"iat\"</code> fields in a JWT (JSON Web Token) payload represent timestamps related to the token's validity period, expressed as the number of seconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).</p> <ul> <li> <p><code>\"iat\"</code> (Issued At): This claim indicates the exact time at which the token was issued. It helps the server determine the token's age and can be used to check the token's freshness or to prevent replay attacks. For example, <code>\"iat\": 1746762129</code> means the token was issued at the Unix timestamp 1746762129 seconds.</p> </li> <li> <p><code>\"exp\"</code> (Expiration Time): This claim specifies the time after which the token is no longer valid. It defines the token's expiration moment, ensuring that tokens cannot be used indefinitely. For example, \"exp\": 1746769329 means the token expires at the Unix timestamp 1746769329 seconds.</p> </li> </ul> <p>The difference between <code>\"exp\"</code> and <code>\"iat\"</code> represents the token's validity duration. In your example:</p> <ul> <li><code>exp</code> = 1746769329</li> <li><code>iat</code> = 1746762129</li> </ul> <p>The token is valid for <code>1746769329 - 1746762129 = 7200</code> seconds, which equals 2 hours.</p> <p>These timestamps are always in numeric Unix time format (seconds since epoch), which can be converted to human-readable date/time formats for interpretation.</p> <ul> <li>Stackoverflow: What format is the exp (Expiration Time) claim in a JWT</li> <li>JSON Web Token Claims</li> <li>What is the purpose of JSON Web Token (JWS)'s issued at \"iat\" field?</li> <li>Understanding JWT Issued At (iat) Claim: A Comprehensive Guide</li> <li>Do you really know JWT?</li> <li>JSON Web Key (JWK) expiration, not-before and issued-at times</li> <li>JSON Web Token (JWT)</li> <li>JWT Handbook PDF</li> <li>Official: Introduction to JSON Web Tokens</li> </ul>"},{"location":"office/bank/auth/passwordCheck/","title":"Password Check","text":""},{"location":"office/bank/auth/passwordCheck/#password-check","title":"Password Check","text":"<p>can i make this code more modular because it is doing two things</p>"},{"location":"office/bank/auth/passwordCheck/#old-code","title":"Old Code","text":"<pre><code>import { getPasswordCheck } from \"./authApi\"; // or adjust path\nimport { incrementIdleAttempts } from \"@/auth/authSlice\"; // adjust path\nimport { message } from \"antd\";\n\n/**\n * Check if password is correct.\n */\nexport const checkPassword = async (user, password, dispatch, attempts) =&gt; {\n  const result = await getPasswordCheck({ email: user, password }).unwrap();\n\n  if (!result?.isPasswordCorrect) {\n    dispatch(incrementIdleAttempts());\n    message.error(`Wrong password (${attempts + 1}/2)`);\n    if (attempts + 1 &gt;= 2) {\n      throw new Error(\"Too many incorrect attempts\");\n    }\n    return false;\n  }\n\n  return true;\n</code></pre> <p>Yes, you're absolutely right \u2014 this function is doing two distinct things:</p> <ol> <li>Validating the password via API (<code>getPasswordCheck</code>)</li> <li>Handling UI-side side effects and Redux dispatches (like showing errors, dispatching <code>incrementIdleAttempts</code>)</li> </ol> <p>To make your code more modular, you should follow Separation of Concerns \u2014 split logic into:</p> <ul> <li>Business logic (e.g., checking the password via API)</li> <li>Side effects/UI/State management (e.g., dispatching errors or showing messages)</li> </ul>"},{"location":"office/bank/auth/passwordCheck/#step-by-step-refactor","title":"Step-by-step Refactor","text":""},{"location":"office/bank/auth/passwordCheck/#1-create-a-pure-function-that-just-validates-the-password","title":"1. Create a pure function that just validates the password","text":"<p>\ud83d\udcc4 <code>auth/services/passwordService.js</code></p> <pre><code>import { getPasswordCheck } from \"./authApi\"; // or adjust path\n\n/**\n * Just checks the password validity via API.\n */\nexport const isPasswordValid = async (email, password) =&gt; {\n  const result = await getPasswordCheck({ email, password }).unwrap();\n  return result?.isPasswordCorrect ?? false;\n};\n</code></pre> <p>This function is pure \u2014 no <code>dispatch</code>, no <code>message</code>, no side effects.</p>"},{"location":"office/bank/auth/passwordCheck/#2-then-build-a-wrapper-function-or-use-it-in-a-componentservice-to-handle-side-effects","title":"2. Then build a wrapper function (or use it in a component/service) to handle side effects","text":"<p>\ud83d\udcc4 For example, inside a component or auth handler:</p> <pre><code>import { isPasswordValid } from \"@/auth/services/passwordService\";\nimport { incrementIdleAttempts } from \"@/auth/authSlice\";\nimport { message } from \"antd\";\n\n/**\n * Higher-level function to check password and handle UI/Redux.\n */\nexport const handlePasswordCheck = async (\n  email,\n  password,\n  dispatch,\n  attempts\n) =&gt; {\n  const isValid = await isPasswordValid(email, password);\n\n  if (!isValid) {\n    dispatch(incrementIdleAttempts());\n    message.error(`Wrong password (${attempts + 1}/2)`);\n\n    if (attempts + 1 &gt;= 2) {\n      throw new Error(\"Too many incorrect attempts\");\n    }\n\n    return false;\n  }\n\n  return true;\n};\n</code></pre>"},{"location":"office/bank/auth/passwordCheck/#benefits-of-this-approach","title":"Benefits of this approach","text":"Original Refactored One function does API call + handles UI state API call is separated from UI logic Harder to test Easier to write unit tests Tightly coupled with dispatch/message Reusable API check logic Harder to extend Easier to customize handling (e.g. show toast instead of <code>message.error</code>)"},{"location":"office/bank/auth/passwordCheck/#usage-example","title":"Usage Example","text":"<p>In your component or login handler:</p> <pre><code>import { handlePasswordCheck } from \"@/auth/services/handlePasswordCheck\";\n\nconst success = await handlePasswordCheck(email, password, dispatch, attempts);\n</code></pre>"},{"location":"office/bank/auth/refreshTokenPromise/","title":"Refresh Token Promise","text":""},{"location":"office/bank/auth/refreshTokenPromise/#refresh-token-promise","title":"Refresh Token Promise","text":""},{"location":"office/bank/auth/refreshTokenPromise/#issue","title":"Issue","text":"<pre><code>if (apiStatus === 401) {\n  const refreshToken = store.getState().auth.refresh;\n  const formData = queryString.stringify({\n    grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n    client_id: OAUTH_REFRESH?.CLIENT_ID,\n    client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n    scope: OAUTH_REFRESH?.SCOPE,\n    refresh_token: refreshToken,\n  });\n\n  try {\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      formData,\n      {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      }\n    );\n    logger.info({ msg: \"REFRESH: \", refreshResult });\n\n    const { data } = refreshResult || {};\n\n    if (data) {\n      api.dispatch(updateRefreshToken(data));\n      return { data };\n    } else {\n      logger.error({ msg: \"Unable to refresh token. Logged out.\" });\n      api.dispatch(logout());\n      api.dispatch(resetState());\n    }\n  } catch (error) {\n    logger.error({ msg: \"Error: \", error });\n    api.dispatch(logout());\n    api.dispatch(resetState());\n  }\n}\n</code></pre> Error <p>but the issue is in dashboard i have called two api it hits two api 401</p> <p>It sounds like you have a situation where two API calls from your dashboard both return a 401 Unauthorized status, and your token refresh logic is triggered twice concurrently. This can cause issues such as multiple refresh requests being sent simultaneously, race conditions, or inconsistent state updates.</p>"},{"location":"office/bank/auth/refreshTokenPromise/#problem-explanation","title":"Problem Explanation","text":"<p>When two API calls return 401 almost simultaneously, your current code triggers the token refresh logic twice independently. This leads to:</p> <ul> <li>Multiple refresh token requests sent to the server</li> <li>Possibly overwriting tokens incorrectly</li> <li>Potential logout/reset state if one refresh fails while the other is still pending</li> </ul>"},{"location":"office/bank/auth/refreshTokenPromise/#how-to-fix-implement-a-token-refresh-queue-or-lock","title":"How to Fix: Implement a Token Refresh Queue or Lock","text":"<p>You want to ensure that when a token refresh is already in progress, other API calls wait for the refresh to complete instead of triggering their own refresh requests.</p>"},{"location":"office/bank/auth/refreshTokenPromise/#approach-1-use-a-refresh-token-lock-singleton-refresh","title":"Approach 1: Use a Refresh Token Lock (Singleton Refresh)","text":"<p>You can create a shared promise that represents the ongoing refresh request. When a 401 happens, check if a refresh is already in progress:</p> <ul> <li>If yes, wait for that refresh promise to resolve and then retry the original request.</li> <li>If no, start the refresh request and store the promise.</li> </ul> Example Implementation<pre><code>let refreshTokenPromise = null;\n\nasync function handle401(api, apiStatus) {\n  if (apiStatus !== 401) return;\n\n  if (!refreshTokenPromise) {\n    const refreshToken = store.getState().auth.refresh;\n    const formData = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refreshToken,\n    });\n\n    refreshTokenPromise = axiosInstance.login\n      .post(CONFIG.BASE_URL, formData, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      })\n      .then((refreshResult) =&gt; {\n        const { data } = refreshResult || {};\n        if (data) {\n          api.dispatch(updateRefreshToken(data));\n          return data;\n        } else {\n          api.dispatch(logout());\n          api.dispatch(resetState());\n          throw new Error(\"Unable to refresh token. Logged out.\");\n        }\n      })\n      .catch((error) =&gt; {\n        api.dispatch(logout());\n        api.dispatch(resetState());\n        throw error;\n      })\n      .finally(() =&gt; {\n        refreshTokenPromise = null; // Reset lock after refresh completes\n      });\n  }\n\n  // Wait for the refresh token request to complete\n  const newTokenData = await refreshTokenPromise;\n  return { data: newTokenData };\n}\n</code></pre> How to Use <ul> <li>When you detect a 401, call <code>handle401(api, apiStatus)</code>.</li> <li>If a refresh is already in progress, the function waits for it to finish.</li> <li>If not, it triggers a refresh and shares the promise.</li> <li>After refresh, you can retry the original API requests with the new token.</li> </ul> Additional Tips <ul> <li>Retry original requests after refresh: After refreshing the token, retry the failed API calls with the new token.</li> <li>Centralize API calls: Use an axios interceptor or a centralized API handler to manage 401 errors and refresh logic.</li> <li>Handle refresh token expiry: If refresh token is invalid or expired, force logout.</li> <li>Debounce multiple refreshes: The lock pattern above effectively debounces multiple refresh calls.</li> </ul> <p>If you want, I can help you refactor your code to integrate this pattern fully, including retrying the failed requests automatically. Let me know!</p>"},{"location":"office/bank/auth/refreshTokenPromise/#refactored-axiosbasequery-with-refresh-token-lock","title":"Refactored <code>axiosBaseQuery</code> with Refresh Token Lock","text":"<pre><code>import queryString from \"query-string\";\nimport axiosInstance from \"./axiosInstance\";\nimport { store } from \"@shared/store/store\";\nimport { updateRefreshToken, logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport logger from \"@shared/utils/logger\";\nimport { OAUTH_REFRESH, CONFIG } from \"@shared/utils/config\";\n\nexport const axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, meta, data, params, headers }, api) =&gt; {\n    try {\n      const result = await axiosInstance.base({\n        url: baseUrl + url,\n        method,\n        meta,\n        data,\n        params,\n        headers,\n      });\n\n      if (!result || !result.data) {\n        throw new Error(\"Invalid response structure from the server\");\n      }\n\n      return { data: result.data, meta: { ...meta, method } };\n    } catch (axiosError) {\n      const apiStatus = axiosError?.response?.status;\n      const detail =\n        axiosError?.response?.data?.detail ?? \"An unknown error occurred\";\n      const status = axiosError?.response?.data?.status ?? \"Error\";\n      const title =\n        axiosError?.response?.data?.title ?? \"An unknown error occurred\";\n      const type = axiosError?.response?.data?.type ?? \"Error\";\n      if (apiStatus === 401) {\n        const refreshToken = store.getState().auth.refresh;\n        const formData = queryString.stringify({\n          grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n          client_id: OAUTH_REFRESH?.CLIENT_ID,\n          client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n          scope: OAUTH_REFRESH?.SCOPE,\n          refresh_token: refreshToken,\n        });\n\n        try {\n          const refreshResult = await axiosInstance.login.post(\n            CONFIG.BASE_URL,\n            formData,\n            {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n              },\n            }\n          );\n          logger.info({ msg: \"REFRESH: \", refreshResult });\n\n          const { data } = refreshResult || {};\n\n          if (data) {\n            api.dispatch(updateRefreshToken(data));\n            return { data };\n          } else {\n            logger.error({ msg: \"Unable to refresh token. Logged out.\" });\n            api.dispatch(logout());\n            api.dispatch(resetState());\n          }\n        } catch (error) {\n          logger.error({ msg: \"Error: \", error });\n          api.dispatch(logout());\n          api.dispatch(resetState());\n        }\n      }\n\n      if (apiStatus === 400) {\n        const detail =\n          axiosError?.response?.data?.title ?? \"An unknown error occurred\";\n        const status = axiosError?.response?.data?.status ?? \"Error\";\n        return {\n          error: {\n            status: status,\n            data: {\n              type: type,\n              title: detail,\n              detail: title,\n            },\n          },\n        };\n      }\n\n      return {\n        error: {\n          status: status,\n          data: {\n            type: type,\n            title: detail,\n            detail: title,\n          },\n        },\n      };\n    }\n  };\n</code></pre> <p>Thank you for sharing your full axiosBaseQuery implementation! To address the issue where multiple API calls trigger simultaneous 401 responses and cause multiple token refresh requests, you need to serialize the token refresh process so only one refresh request happens at a time, and other requests wait for that refresh to complete.</p> <p>Below is a refactored version of your code implementing a refresh token lock using a shared <code>promise</code>. This ensures:</p> <ul> <li>Only one refresh request is active at any time.</li> <li>Other 401-handling calls wait for the refresh to finish.</li> <li>After refresh, the original request is retried with the new token.</li> </ul> <p>Refactored <code>axiosBaseQuery</code> with Refresh Token Lock</p> js<pre><code>import queryString from \"query-string\";\nimport axiosInstance from \"./axiosInstance\";\nimport { store } from \"@shared/store/store\";\nimport { updateRefreshToken, logout } from \"@features/auth/services/authSlice\";\nimport { resetState } from \"@features/notifications/services/chatSlice\";\nimport logger from \"@shared/utils/logger\";\nimport { OAUTH_REFRESH, CONFIG } from \"@shared/utils/config\";\n\n// Shared promise to track ongoing refresh token request\nlet refreshTokenPromise = null;\n\nexport const axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, meta, data, params, headers }, api) =&gt; {\n    try {\n      // Perform the API request\n      const result = await axiosInstance.base({\n        url: baseUrl + url,\n        method,\n        meta,\n        data,\n        params,\n        headers,\n      });\n\n      if (!result || !result.data) {\n        throw new Error(\"Invalid response structure from the server\");\n      }\n\n      return { data: result.data, meta: { ...meta, method } };\n    } catch (axiosError) {\n      const apiStatus = axiosError?.response?.status;\n      const detail =\n        axiosError?.response?.data?.detail ?? \"An unknown error occurred\";\n      const status = axiosError?.response?.data?.status ?? \"Error\";\n      const title =\n        axiosError?.response?.data?.title ?? \"An unknown error occurred\";\n      const type = axiosError?.response?.data?.type ?? \"Error\";\n\n      if (apiStatus === 401) {\n        // If no refresh in progress, start one\n        if (!refreshTokenPromise) {\n          const refreshToken = store.getState().auth.refresh;\n          const formData = queryString.stringify({\n            grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n            client_id: OAUTH_REFRESH?.CLIENT_ID,\n            client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n            scope: OAUTH_REFRESH?.SCOPE,\n            refresh_token: refreshToken,\n          });\n\n          refreshTokenPromise = axiosInstance.login\n            .post(CONFIG.BASE_URL, formData, {\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n              },\n            })\n            .then((refreshResult) =&gt; {\n              const { data } = refreshResult || {};\n              if (data) {\n                api.dispatch(updateRefreshToken(data));\n                logger.info({ msg: \"Token refreshed successfully\", data });\n                return data;\n              } else {\n                logger.error({ msg: \"Unable to refresh token. Logging out.\" });\n                api.dispatch(logout());\n                api.dispatch(resetState());\n                throw new Error(\"Refresh token invalid\");\n              }\n            })\n            .catch((error) =&gt; {\n              logger.error({ msg: \"Refresh token error: \", error });\n              api.dispatch(logout());\n              api.dispatch(resetState());\n              throw error;\n            })\n            .finally(() =&gt; {\n              refreshTokenPromise = null; // Reset lock when done\n            });\n        }\n\n        try {\n          // Wait for refresh to complete\n          await refreshTokenPromise;\n\n          // Retry the original request with new token\n          // Update headers with new access token from store\n          const newAccessToken = store.getState().auth.access;\n          const retryHeaders = {\n            ...headers,\n            Authorization: `Bearer ${newAccessToken}`,\n          };\n\n          const retryResult = await axiosInstance.base({\n            url: baseUrl + url,\n            method,\n            meta,\n            data,\n            params,\n            headers: retryHeaders,\n          });\n\n          if (!retryResult || !retryResult.data) {\n            throw new Error(\"Invalid response structure from the server\");\n          }\n\n          return { data: retryResult.data, meta: { ...meta, method } };\n        } catch (retryError) {\n          // If retry fails, propagate error\n          return {\n            error: {\n              status: retryError?.response?.status || 401,\n              data: {\n                type: \"Unauthorized\",\n                title: \"Failed to refresh token or retry request\",\n                detail: retryError.message,\n              },\n            },\n          };\n        }\n      }\n\n      // Handle 400 errors specifically\n      if (apiStatus === 400) {\n        return {\n          error: {\n            status: status,\n            data: {\n              type: type,\n              title: detail,\n              detail: title,\n            },\n          },\n        };\n      }\n\n      // Default error return\n      return {\n        error: {\n          status: status,\n          data: {\n            type: type,\n            title: detail,\n            detail: title,\n          },\n        },\n      };\n    }\n  };\n</code></pre> Explanation <ul> <li>refreshTokenPromise: A module-level variable that holds the current refresh token request promise.</li> <li>When a 401 occurs, if <code>refreshTokenPromise</code> is null, we start a refresh request and assign the promise.</li> <li>If another 401 happens while refresh is in progress, it waits for the existing <code>refreshTokenPromise</code>.</li> <li>After refresh completes, the original request is retried with the updated access token.</li> <li>If refresh fails, the user is logged out and state reset.</li> <li>This prevents multiple simultaneous refresh requests and ensures all failed requests retry properly.</li> </ul> <p>???+ tip :Additional Recommendations\"</p> <pre><code>-   **Axios Interceptors**: Consider moving this logic into an axios response interceptor for cleaner separation.\n-   **Token Expiry Handling**: Handle cases where refresh token itself is expired or invalid.\n-   **Error Feedback**: Provide user feedback or UI notifications on logout or token expiry.\n-   **Testing**: Test with concurrent API calls triggering 401 to confirm only one refresh happens.\n</code></pre> <p>If you want, I can help you convert this into an axios interceptor or integrate with your Redux Toolkit Query setup for even smoother handling. Just ask!</p>"},{"location":"office/bank/auth/refreshTokenPromise/#how-do-i-calculate-the-expiration-time-for-a-jwt","title":"How do I calculate the expiration time for a JWT","text":"<p>To calculate the expiration time for a JWT, you need to decode the token and examine the \"exp\" (expiration) claim, which is a Unix timestamp representing the exact time the token expires. The expiration time is typically given in seconds since the Unix epoch (January 1, 1970).</p> Steps to Calculate JWT Expiration Time <ol> <li>Decode the JWT: Use a JWT decoding tool or library (such as jwt.io or jwt-decode) to decode the token and extract the <code>\"exp\"</code> claim.</li> <li>Interpret the <code>\"exp\"</code> value: The <code>\"exp\"</code> claim is a timestamp in seconds since epoch that indicates when the token expires.</li> <li> <p>Calculate remaining time: Subtract the current time (in seconds since epoch) from the <code>\"exp\"</code> value to get the remaining validity duration of the token.</p> <pre><code>Remaining time (seconds) = exp \u2212 current Unix time\n</code></pre> </li> <li> <p>Use the remaining time: This remaining time can be used to determine if the token is still valid or to set cache expiry or token refresh logic.</p> </li> </ol> Example <p>If your token has:</p> <ul> <li><code>\"exp\": 1746769329</code> (expiration timestamp)</li> <li>Current Unix time is, say, 1746765000 seconds</li> </ul> <p>Then:</p> <ul> <li> <p><code>1746769329 \u2212 1746765000 = 4329</code> seconds remaining</p> </li> <li> <p>This means the token will expire in approximately 1 hour and 12 minutes from now.</p> </li> </ul> Additional Notes <ul> <li> <p>The <code>\"iat\"</code> (issued at) claim shows when the token was issued, but for expiration you focus on <code>\"exp\"</code>.</p> </li> <li> <p>Because clock differences between client and server can cause issues, it's common to subtract a small buffer (e.g., a few seconds or minutes) from the remaining time to avoid using an expired token.</p> </li> <li> <p>If you want to cache the token, use the remaining time as the cache TTL (time-to-live).</p> </li> <li> <p>Libraries and frameworks often provide utilities to decode and check expiration automatically.</p> </li> </ul> <p>This method is standard across JWT implementations and is recommended for managing token lifetimes effectively</p> <ul> <li>How can I know when my JWT token will expire?</li> <li>Best way to check jwt token expire status if stored in localstorage</li> <li>How JWT Expiration works?</li> </ul>"},{"location":"office/bank/auth/refreshTokenPromise/#reference","title":"Reference","text":"<ul> <li>apistatus 401 refresh</li> </ul>"},{"location":"office/bank/auth/remember-me/","title":"Remember Me","text":""},{"location":"office/bank/auth/remember-me/#remember-me","title":"Remember ME","text":"<p>When users log out, the <code>username</code> and <code>password</code> fields on the login page should not be pre-filled with their credentials. This is a common misconception about the \"Remember Me\" functionality. Let's clarify how this works and how you can implement it securely.</p>"},{"location":"office/bank/auth/remember-me/#difference-remember-me-vs-autofill","title":"Difference \"Remember Me\" vs. Autofill","text":""},{"location":"office/bank/auth/remember-me/#1-remember-me-functionality","title":"1. \"Remember Me\" Functionality:","text":"<ul> <li>The \"Remember Me\" feature is primarily used to keep users logged in across sessions by storing a token in a cookie.</li> <li>This token allows the backend to recognize the user without requiring them to re-enter their credentials.</li> </ul>"},{"location":"office/bank/auth/remember-me/#2-autofill-functionality","title":"2. Autofill Functionality:","text":"<ul> <li>Autofill is a browser feature that stores usernames and passwords and automatically fills them into the login form when the user visits the login page again.</li> <li>This is managed by the browser and is separate from the \"Remember Me\" feature.</li> </ul>"},{"location":"office/bank/auth/remember-me/#key-points","title":"Key Points","text":""},{"location":"office/bank/auth/remember-me/#1-logout-handling","title":"1. Logout Handling:","text":"<ul> <li>When the user logs out, the frontend should clear the local state (username and password fields) and the backend should clear the session token.</li> <li>This ensures that the username and password fields are not pre-filled after logging out.</li> </ul>"},{"location":"office/bank/auth/remember-me/#2-browser-autofill","title":"2. Browser Autofill:","text":"<ul> <li>Users can still benefit from the browser's autofill feature, which stores their credentials securely and fills them in when they visit the login page again.</li> <li>This is a browser-managed feature and is separate from the \"Remember Me\" functionality.   By following these practices, you ensure that sensitive information is handled securely while providing a convenient user experience.</li> </ul>"},{"location":"office/bank/auth/remember-me/#how-does-the-remember-me-feature-work","title":"How does the 'Remember Me' feature work?","text":"<p>The \"Remember Me\" feature in web applications is designed to keep users logged in across multiple sessions without requiring them to re-enter their credentials each time.</p> <p>This functionality enhances user convenience while maintaining security. Here\u2019s a detailed explanation of how it typically works:</p>"},{"location":"office/bank/auth/remember-me/#question","title":"Question","text":"<ul> <li>How does \"remember me\" work on a login page</li> <li>Is it safe to use \"remember me\" on a login page</li> </ul>"},{"location":"office/bank/auth/remember-me/#reference","title":"Reference","text":"<ul> <li>Youtube: Remember me functionality in login page using PHP and MySQL</li> </ul>"},{"location":"office/bank/auth/rememberme/","title":"Remember me","text":""},{"location":"office/bank/auth/rememberme/#rememeber-me","title":"Rememeber Me","text":"Antd Login Form<pre><code>import React from \"react\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { Button, Checkbox, Form, Input, Flex } from \"antd\";\nconst App = () =&gt; {\n  const onFinish = (values) =&gt; {\n    console.log(\"Received values of form: \", values);\n  };\n  return (\n    &lt;Form\n      name=\"login\"\n      initialValues={{ remember: true }}\n      style={{ maxWidth: 360 }}\n      onFinish={onFinish}\n    &gt;\n      &lt;Form.Item\n        name=\"username\"\n        rules={[{ required: true, message: \"Please input your Username!\" }]}\n      &gt;\n        &lt;Input prefix={&lt;UserOutlined /&gt;} placeholder=\"Username\" /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item\n        name=\"password\"\n        rules={[{ required: true, message: \"Please input your Password!\" }]}\n      &gt;\n        &lt;Input\n          prefix={&lt;LockOutlined /&gt;}\n          type=\"password\"\n          placeholder=\"Password\"\n        /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item&gt;\n        &lt;Flex justify=\"space-between\" align=\"center\"&gt;\n          &lt;Form.Item name=\"remember\" valuePropName=\"checked\" noStyle&gt;\n            &lt;Checkbox&gt;Remember me&lt;/Checkbox&gt;\n          &lt;/Form.Item&gt;\n          &lt;a href=\"\"&gt;Forgot password&lt;/a&gt;\n        &lt;/Flex&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item&gt;\n        &lt;Button block type=\"primary\" htmlType=\"submit\"&gt;\n          Log in\n        &lt;/Button&gt;\n        or &lt;a href=\"\"&gt;Register now!&lt;/a&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\nexport default App;\n</code></pre>"},{"location":"office/bank/auth/rememberme/#utils-function","title":"Utils Function","text":"utils/rememberMe.js<pre><code>export default function rememeberMe() {\n  const rememberme = localStorage.getItem(\"remember\");\n  if (rememberme === \"false\") {\n    localStorage.removeItem(\"remember\");\n    localStorage.removeItem(\"email\");\n  }\n}\n</code></pre>"},{"location":"office/bank/auth/rememberme/#login-form","title":"Login Form","text":"LoginForm.jsx<pre><code>import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Checkbox,\n  Form,\n  Flex,\n  Input,\n  Tabs,\n  Typography,\n  theme,\n  Modal,\n} from \"antd\";\nimport { LockOutlined, UserOutlined } from \"@ant-design/icons\";\nimport { isEmpty } from \"lodash\";\n\nconst { TabPane } = Tabs;\nconst { Title, Text } = Typography;\n\nconst { useToken } = theme;\n\nconst LoginForm = ({ onFinish, loading }) =&gt; {\n  const [form] = Form.useForm();\n  const { token } = useToken();\n  const [rememberMe, setRememberMe] = useState(null);\n  const [isPostSubmitModalVisible, setIsPostSubmitModalVisible] =\n    useState(false);\n\n  const handleOk = () =&gt; {\n    setIsPostSubmitModalVisible(false);\n  };\n\n  // ADDED FOR REMEMBERME\n  useEffect(() =&gt; {\n    const storedEmail = localStorage.getItem(\"email\");\n    if (!isEmpty(storedEmail)) {\n      setRememberMe(true);\n      form.setFieldsValue({\n        username: storedEmail,\n        remember: true,\n      });\n    }\n  }, [form]);\n\n  return (\n    &lt;&gt;\n      &lt;div style={{ textAlign: \"center\", marginBottom: \"20px\" }}&gt;\n        &lt;Title\n          level={1}\n          style={{\n            fontSize: \"2.4em\",\n            marginBottom: \"1em\",\n            color: token?.colorPrimary,\n          }}\n        &gt;\n          TreMs\n        &lt;/Title&gt;\n        &lt;Title\n          level={2}\n          style={{\n            color: \"#5E5873\",\n            fontSize: \"1.8em\",\n            marginTop: \"20px\",\n            marginBottom: \"40px\",\n          }}\n        &gt;\n          Welcome to TreMs! \ud83d\udc4b\ud83c\udffb\n        &lt;/Title&gt;\n        &lt;Text style={{ fontWeight: \"500\", color: token?.colorPrimary }}&gt;\n          Please sign in to your account.\n        &lt;/Text&gt;\n      &lt;/div&gt;\n      &lt;Form\n        form={form}\n        initialValues={{ remember: rememberMe }}\n        onFinish={onFinish}\n        layout=\"vertical\"\n      &gt;\n        &lt;Form.Item\n          name=\"username\"\n          rules={[\n            { required: true, message: \"Please enter your Email\" },\n            { type: \"email\", message: \"Please enter a valid email\" },\n          ]}\n          // rules={[{ required: true, message: \"Please enter your username\" }]}\n        &gt;\n          &lt;Input\n            type=\"email\"\n            // type=\"text\"\n            size=\"large\"\n            placeholder=\"Enter Email\"\n            // placeholder=\"Enter Username\"\n            style={{ textAlign: \"center\" }}\n            prefix={\n              &lt;UserOutlined\n                style={{\n                  color: token?.colorPrimary,\n                  marginRight: \"8px\",\n                }}\n              /&gt;\n            }\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Form.Item\n          name=\"password\"\n          rules={[{ required: true, message: \"Please enter your password\" }]}\n        &gt;\n          &lt;Input.Password\n            placeholder=\"Enter Password\"\n            size=\"large\"\n            style={{ textAlign: \"center\" }}\n            prefix={\n              &lt;LockOutlined\n                style={{\n                  color: token?.colorPrimary,\n                  marginRight: \"8px\",\n                }}\n              /&gt;\n            }\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Flex justify=\"space-between\"&gt;\n          &lt;Form.Item name=\"remember\" valuePropName=\"checked\" label={null}&gt;\n            &lt;Checkbox\n              style={{\n                fontSize: \"14px\",\n                fontFamily: \"roboto\",\n                fontWeight: \"400\",\n              }}\n            &gt;\n              Remember me\n            &lt;/Checkbox&gt;\n          &lt;/Form.Item&gt;\n          &lt;Button\n            type=\"link\"\n            style={{ padding: 0, fontSize: \"12px\", fontFamily: \"roboto\" }}\n            onClick={() =&gt; {\n              setIsPostSubmitModalVisible(true);\n            }}\n          &gt;\n            Forgot Password?\n          &lt;/Button&gt;\n        &lt;/Flex&gt;\n\n        &lt;Form.Item&gt;\n          &lt;Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            size=\"large\"\n            block\n            loading={loading}\n            style={{ fontFamily: \"roboto\" }}\n          &gt;\n            {loading ? \"Signing in...\" : \"Sign In\"}\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      &lt;/Form&gt;\n      &lt;Modal\n        title={\"Please Contact Administrator.\"}\n        open={isPostSubmitModalVisible}\n        onOk={handleOk}\n        onCancel={handleOk}\n        okText={\"OK\"}\n        cancelText={\"Close\"}\n      /&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default LoginForm;\n</code></pre> Login.jsx<pre><code>import { Layout } from \"antd\";\nimport useLoginHandler from \"@shared/hooks/useLoginHandler\";\nimport { LoginHeader, LoginForm, LoginFooter } from \"./\";\n\nconst { Content } = Layout;\n\nconst Login = () =&gt; {\n  const { loading, handleLogin } = useLoginHandler();\n\n  const onFinish = async (values) =&gt; {\n    const { username, password, remember } = values;\n    await handleLogin(username, password, remember);\n  };\n\n  return (\n    &lt;Layout style={{ minHeight: \"100vh\", width: \"100%\" }}&gt;\n      &lt;LoginHeader /&gt;\n      &lt;Content\n        style={{\n          padding: \"50px 0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100%\",\n          height: `calc(100vh - 161px)`,\n          overflow: \"auto\",\n        }}\n      &gt;\n        &lt;div style={{ width: \"100%\", maxWidth: 420, padding: \"20px\" }}&gt;\n          &lt;LoginForm onFinish={onFinish} loading={loading} /&gt;\n        &lt;/div&gt;\n      &lt;/Content&gt;\n      &lt;LoginFooter /&gt;\n    &lt;/Layout&gt;\n  );\n};\n\nexport default Login;\n</code></pre>"},{"location":"office/bank/auth/rememberme/#hooks","title":"Hooks","text":"<pre><code>import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { jwtDecode } from \"jwt-decode\";\nimport queryString from \"query-string\";\nimport { useLoginMutation } from \"@features/auth/services/authApi\";\nimport { setAuth, updatePermission } from \"@features/auth/services/authSlice\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport { CONFIG, OAUTH } from \"@shared/utils/config\";\nimport logger from \"@shared/utils/logger\";\nimport { startSignalR } from \"@features/notifications/services/chatThunks\";\nimport { pollingPermissionsApi } from \"@features/settings/services/settingApi\";\nimport { message } from \"antd\";\n\nconst useLoginHandler = () =&gt; {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const [login] = useLoginMutation();\n\n  const handleLogin = async (username, password, remember) =&gt; {\n    setLoading(true);\n    try {\n      const formData = queryString.stringify({\n        username,\n        password,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      // FOR PRODUCTION\n      const user = await login(formData).unwrap();\n      const decodedToken = jwtDecode(user?.access_token);\n\n      logger.info({ msg: \"Login\", decodedToken, username, remember });\n\n      /***********************************************************/\n      // localStorage.setItem(\"email\", email)\n      if (remember) {\n        localStorage.setItem(\"email\", username);\n        localStorage.setItem(\"remember\", true);\n      } else {\n        localStorage.setItem(\"remember\", false);\n      }\n      /***********************************************************/\n\n      dispatch(\n        setAuth({\n          token: user?.access_token || null,\n          refresh: user?.refresh_token || null,\n          role: decodedToken?.role || null,\n          // permissions: decodedToken?.Permissions || null,\n          appUserId: decodedToken?.sub || null,\n          scope: decodedToken?.scope || null,\n          user: decodedToken?.username || null,\n          name: decodedToken?.name || null,\n        })\n      );\n      // await dispatch(startSignalR());\n      const permisson = await dispatch(\n        pollingPermissionsApi.endpoints.getPollingPermissions.initiate(\n          {\n            id: decodedToken?.sub,\n          },\n          {\n            subscribe: false,\n            forceRefetch: true,\n          }\n        )\n      );\n      dispatch(\n        updatePermission({\n          permissions: permisson?.data,\n        })\n      );\n      return user;\n    } catch (err) {\n      notify(\n        \"error\",\n        \"topRight\",\n        err?.data?.error || \"Invalid Credentials\",\n        err?.data?.error_description ||\n          \"An unexpected error occurred during login.\",\n        2\n      );\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, handleLogin };\n};\n\nexport default useLoginHandler;\n</code></pre>"},{"location":"office/bank/auth/rememberme/#logout","title":"Logout","text":"<pre><code>import rememeberMe from \"@shared/utils/rememberMe\";\n\n// CALL THIS\nrememeberMe();\n</code></pre>"},{"location":"office/bank/auth/rememberme/#reference","title":"Reference","text":"<ul> <li>MDN: Window: localStorage property</li> <li>W3schools: Window localStorage</li> <li>Antd Official: Form</li> <li>Ref form: ai</li> <li>geeksforgeeks: javascript localstorage</li> </ul>"},{"location":"office/bank/auth/session-timeout-fallback/","title":"Session Timeout Fallback","text":""},{"location":"office/bank/auth/session-timeout-fallback/#overview","title":"Overview","text":"<p>Yes, you can absolutely add a fallback login inside the <code>catch</code> block if the refresh token request fails \u2014 this is a common practice to re-authenticate users with their credentials when the refresh flow fails (for example, due to an expired or invalid refresh token).</p> <p>Here\u2019s how you can safely add the fallback login logic inside the <code>catch</code> block of your <code>handleSubmit</code> function:</p>"},{"location":"office/bank/auth/session-timeout-fallback/#modified-code-snippet-with-fallback-login","title":"\u2705 Modified Code Snippet with Fallback Login","text":"<pre><code>const handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // Attempt Refresh Token Flow\n    const formData = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      formData,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    const { data } = refreshResult || {};\n    if (!data?.access_token) throw new Error(\"Missing access token\");\n\n    const decodedToken = jwtDecode(data.access_token);\n\n    dispatch(\n      updateRefreshToken({\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        iat: decodedToken.iat,\n        exp: decodedToken.exp,\n      })\n    );\n\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated\");\n  } catch (error) {\n    logger.error({ msg: \"Refresh failed, trying fallback login\", error });\n\n    try {\n      // \ud83d\udd01 Fallback to Full Login\n      const loginFormData = queryString.stringify({\n        username: user,\n        password: trimmedPassword,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await axiosInstance.login.post(\n        CONFIG.BASE_URL,\n        loginFormData,\n        {\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        }\n      );\n\n      const { data } = loginResult || {};\n      if (!data?.access_token)\n        throw new Error(\"Login fallback failed: missing access token\");\n\n      const decodedToken = jwtDecode(data.access_token);\n\n      dispatch(\n        updateRefreshToken({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token,\n          iat: decodedToken.iat,\n          exp: decodedToken.exp,\n        })\n      );\n\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login fallback\");\n    } catch (loginError) {\n      logger.error({ msg: \"Fallback login failed\", loginError });\n      message.error(\"Re-authentication failed. Logging out...\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre> <p>\ud83d\udd0d Key Points:</p> <ul> <li>\u2705 You try the refresh flow first.</li> <li>\u274c If that fails (e.g., <code>expired/invalid</code> refresh token), the catch block attempts a full login using the provided password.</li> <li>\ud83e\uddfe Both refresh and login flows use the same token handling logic.</li> <li>\ud83d\udd10 Make sure you pass the <code>trimmedPassword</code> and not the original <code>password</code> for consistency.</li> </ul> <p>Let me know if you want to extract common logic (e.g., token handling) into a reusable function to clean things up.</p>"},{"location":"office/bank/auth/session-timeout-fallback/#simulate-error-for-testing-fallback","title":"Simulate error for testing fallback","text":"<p>To simulate a failure for testing the <code>catch</code> block, you can intentionally cause the refresh token request to fail, so the code falls into the catch and then attempts the fallback login.</p> <p>Here are a few safe and reversible ways to do this:</p>"},{"location":"office/bank/auth/session-timeout-fallback/#option-1-throw-an-error-manually","title":"\u2705 Option 1: Throw an Error Manually","text":"<p>Add a line right after the refresh request to force it to fail:</p> <pre><code>throw new Error(\"Simulated refresh token failure\");\n</code></pre> Example<pre><code>const refreshResult = await axiosInstance.login.post(\n  CONFIG.BASE_URL,\n  formData,\n  {\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n  }\n);\n\n// \ud83d\udd34 Force refresh failure for testing\nthrow new Error(\"Simulated refresh token failure\");\n</code></pre> <p>This will jump to the <code>catch</code> block, where the fallback login will ru</p> <p>\u2705 Option 2: Use Invalid Refresh Token Temporarily</p> <p>Change the <code>refresh_token</code> value to something invalid:</p> <pre><code>refresh_token: \"invalid_token_for_testing\",\n</code></pre> <p>This will cause the real request to fail naturally.</p> <p>\u2705 Option 3: Change the URL Temporarily</p> <p>Change <code>CONFIG.BASE_URL</code> to an invalid URL (like a typo):</p> <pre><code>CONFIG.BASE_URL = CONFIG.BASE_URL + \"/wrong-path\";\n</code></pre> <p>Again, this will force the <code>axiosInstance.login.post</code> to fail, triggering the catch.</p> <p>\u26a0\ufe0f Remember to Revert</p> <p>After testing, remove or revert the test failure condition so your production code runs normally again.</p>"},{"location":"office/bank/auth/session-timeout-fallback/#full-code","title":"Full Code","text":"<p>Sure! Below is the full version of your <code>handleSubmit</code> function, updated to include the manual <code>throw new Error()</code> to simulate a refresh failure right after the refresh token request.</p> <p>This allows you to test that your fallback login logic in the <code>catch</code> block works correctly.</p> <p>\u2705 Full Code with Simulated Refresh Token Failure</p> <pre><code>const handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // \ud83c\udf10 Attempt Refresh Token Flow\n    const formData = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      formData,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    // \u274c Simulate Refresh Failure for Testing\n    throw new Error(\"Simulated refresh token failure\");\n\n    const { data } = refreshResult || {};\n    if (!data?.access_token) throw new Error(\"Missing access token\");\n\n    const decodedToken = jwtDecode(data.access_token);\n\n    dispatch(\n      updateRefreshToken({\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        iat: decodedToken.iat,\n        exp: decodedToken.exp,\n      })\n    );\n\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated\");\n  } catch (error) {\n    logger.error({ msg: \"Refresh failed, trying fallback login\", error });\n\n    try {\n      // \ud83d\udd01 Fallback to Full Login\n      const loginFormData = queryString.stringify({\n        username: user,\n        password: trimmedPassword, // use trimmed version\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await axiosInstance.login.post(\n        CONFIG.BASE_URL,\n        loginFormData,\n        {\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        }\n      );\n\n      const { data } = loginResult || {};\n      if (!data?.access_token)\n        throw new Error(\"Login fallback failed: missing access token\");\n\n      const decodedToken = jwtDecode(data.access_token);\n\n      dispatch(\n        updateRefreshToken({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token,\n          iat: decodedToken.iat,\n          exp: decodedToken.exp,\n        })\n      );\n\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login fallback\");\n    } catch (loginError) {\n      logger.error({ msg: \"Fallback login failed\", loginError });\n      message.error(\"Re-authentication failed. Logging out...\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre> What You Need to Do <ol> <li> <p>Run this code as is. When <code>handleSubmit</code> is triggered:</p> <ul> <li>It will simulate a failed refresh.</li> <li>Then immediately try the fallback login (with <code>username</code> and <code>password</code>).</li> </ul> </li> <li> <p>Once tested, remove this line to return to normal behavior:</p> <pre><code>throw new Error(\"Simulated refresh token failure\");\n</code></pre> </li> </ol>"},{"location":"office/bank/auth/session-timeout-fallback/#simulate-fallback-login-failure","title":"Simulate Fallback Login Failure","text":"<p>Add this line inside the fallback login <code>try</code> block, just after the <code>login.post</code>:</p> <pre><code>throw new Error(\"Simulated fallback login failure\");\n</code></pre> <p>Full Code with Both Failures Simulated</p> <pre><code>const handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // \ud83c\udf10 Attempt Refresh Token Flow\n    const formData = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      formData,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    // \u274c Simulate Refresh Failure\n    throw new Error(\"Simulated refresh token failure\");\n\n    const { data } = refreshResult || {};\n    if (!data?.access_token) throw new Error(\"Missing access token\");\n\n    const decodedToken = jwtDecode(data.access_token);\n\n    dispatch(\n      updateRefreshToken({\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        iat: decodedToken.iat,\n        exp: decodedToken.exp,\n      })\n    );\n\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated\");\n  } catch (error) {\n    logger.error({ msg: \"Refresh failed, trying fallback login\", error });\n\n    try {\n      // \ud83d\udd01 Fallback to Full Login\n      const loginFormData = queryString.stringify({\n        username: user,\n        password: trimmedPassword,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await axiosInstance.login.post(\n        CONFIG.BASE_URL,\n        loginFormData,\n        {\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        }\n      );\n\n      // \u274c Simulate Fallback Login Failure\n      throw new Error(\"Simulated fallback login failure\");\n\n      const { data } = loginResult || {};\n      if (!data?.access_token)\n        throw new Error(\"Login fallback failed: missing access token\");\n\n      const decodedToken = jwtDecode(data.access_token);\n\n      dispatch(\n        updateRefreshToken({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token,\n          iat: decodedToken.iat,\n          exp: decodedToken.exp,\n        })\n      );\n\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login fallback\");\n    } catch (loginError) {\n      logger.error({ msg: \"Fallback login failed\", loginError });\n      message.error(\"Re-authentication failed. Logging out...\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre> \ud83e\uddea What This Will Do <ol> <li>First: Tries refresh token \u2014 fails due to simulated error.</li> <li>Then: Tries fallback login \u2014 also fails due to simulated error.</li> <li>Finally: Falls to the deepest <code>catch</code> block \u2192 logs out and shows error message.</li> </ol> <p>\u2705 After Testing:</p> <p>Once confirmed everything works:</p> <ul> <li>\u274c Remove or comment out:</li> </ul> <pre><code>throw new Error(\"Simulated refresh token failure\");\n</code></pre> <p>and</p> <pre><code>throw new Error(\"Simulated fallback login failure\");\n</code></pre> <p>Let me know if you want to display more detailed error messages or track different error states for analytics/debugging.</p>"},{"location":"office/bank/auth/session-timeout-fallback/#misc-enhance-error-tracking","title":"Misc | Enhance error tracking","text":"<p>Here's how to enhance error tracking and user feedback for both simulated and real failures \u2014 ideal for debugging or production monitoring.</p> <p>\u2705 Goals:</p> <ol> <li>Differentiate errors between refresh failure and fallback login failure.</li> <li>Log meaningful error details for devs.</li> <li>Show clear messages to the user.</li> </ol>"},{"location":"office/bank/auth/session-timeout-fallback/#updated-full-code-with-detailed-error-handling-and-messages","title":"\u2705 Updated Full Code with Detailed Error Handling and Messages","text":"<pre><code>const handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // \ud83c\udf10 Attempt Refresh Token Flow\n    const formData = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      formData,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    // \u274c Simulate Refresh Failure for Testing\n    throw new Error(\"Simulated refresh token failure\");\n\n    const { data } = refreshResult || {};\n    if (!data?.access_token)\n      throw new Error(\"Missing access token from refresh\");\n\n    const decodedToken = jwtDecode(data.access_token);\n\n    dispatch(\n      updateRefreshToken({\n        access_token: data.access_token,\n        refresh_token: data.refresh_token,\n        iat: decodedToken.iat,\n        exp: decodedToken.exp,\n      })\n    );\n\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated via refresh token\");\n  } catch (refreshError) {\n    logger.error({\n      msg: \"Refresh token flow failed\",\n      reason: refreshError?.message || refreshError,\n      error: refreshError,\n    });\n\n    message.warning(\"Session expired, retrying login...\");\n\n    try {\n      // \ud83d\udd01 Fallback to Full Login\n      const loginFormData = queryString.stringify({\n        username: user,\n        password: trimmedPassword,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await axiosInstance.login.post(\n        CONFIG.BASE_URL,\n        loginFormData,\n        {\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        }\n      );\n\n      // \u274c Simulate Fallback Login Failure for Testing\n      throw new Error(\"Simulated fallback login failure\");\n\n      const { data } = loginResult || {};\n      if (!data?.access_token)\n        throw new Error(\"Missing access token from login\");\n\n      const decodedToken = jwtDecode(data.access_token);\n\n      dispatch(\n        updateRefreshToken({\n          access_token: data.access_token,\n          refresh_token: data.refresh_token,\n          iat: decodedToken.iat,\n          exp: decodedToken.exp,\n        })\n      );\n\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login\");\n    } catch (loginError) {\n      logger.error({\n        msg: \"Fallback login failed\",\n        reason: loginError?.message || loginError,\n        error: loginError,\n      });\n\n      message.error(\"Re-authentication failed. Logging out for your security.\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback/#testing-checklist","title":"\ud83e\uddea Testing Checklist","text":"Step Simulated? Expected Outcome Refresh fails \u2705 Yes Shows: <code>Session expired, retrying login...</code> Fallback login fails \u2705 Yes Logs error + logs out Final user message \u2705 Yes \"Re-authentication failed. Logging out for your security.\""},{"location":"office/bank/auth/session-timeout-fallback/#after-testing","title":"\u2705 After Testing","text":"<p>Remove these lines to go back to normal:</p> <pre><code>throw new Error(\"Simulated refresh token failure\");\n</code></pre> <pre><code>throw new Error(\"Simulated fallback login failure\");\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback/#optional-send-errors-to-monitoring-tools","title":"\ud83d\udee0\ufe0f Optional: Send Errors to Monitoring Tools","text":"<p>You can easily send <code>refreshError</code> and <code>loginError</code> to tools like Sentry, LogRocket, or custom logging systems for production tracking.</p> Let me know if you want to: <ul> <li>Extract token handling logic into a reusable function,</li> <li>Add a retry mechanism,</li> <li>Or display custom error codes returned from the API.</li> </ul>"},{"location":"office/bank/auth/session-timeout-fallback/#resuable-code","title":"Resuable Code","text":"<p>Let\u2019s clean up and improve your code by extracting reusable logic \u2014 especially for handling tokens (decode + dispatch) \u2014 and optionally support a retry mechanism if needed.</p>"},{"location":"office/bank/auth/session-timeout-fallback/#goal","title":"Goal:","text":"<p>Refactor your code to:</p> <ol> <li>Reuse token handling (<code>jwtDecode</code>, dispatch, etc.)</li> <li>Keep <code>handleSubmit</code> clean and readable</li> <li>Prepare for future extensions (e.g. logging, retry limits)</li> </ol>"},{"location":"office/bank/auth/session-timeout-fallback/#step-1-extract-token-handling-to-utility-function","title":"Step 1: Extract Token Handling to Utility Function","text":"<p>Create a utility like:</p> <pre><code>// utils/auth.js\nexport const handleTokenResponse = (data, dispatch) =&gt; {\n  if (!data?.access_token) {\n    throw new Error(\"Missing access token\");\n  }\n\n  const decodedToken = jwtDecode(data.access_token);\n\n  dispatch(\n    updateRefreshToken({\n      access_token: data.access_token,\n      refresh_token: data.refresh_token,\n      iat: decodedToken.iat,\n      exp: decodedToken.exp,\n    })\n  );\n};\n</code></pre> <p>You can also add logging inside this if you want.</p>"},{"location":"office/bank/auth/session-timeout-fallback/#step-2-refactor-handlesubmit-to-use-it","title":"Step 2: Refactor <code>handleSubmit</code> to Use It","text":"<pre><code>import { handleTokenResponse } from \"@/utils/auth\"; // adjust path as needed\n\nconst handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // \ud83c\udf10 Attempt Refresh Token\n    const refreshForm = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      refreshForm,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    // \u274c Simulate Refresh Failure\n    throw new Error(\"Simulated refresh token failure\");\n\n    handleTokenResponse(refreshResult.data, dispatch);\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated via refresh token\");\n  } catch (refreshError) {\n    logger.error({\n      msg: \"Refresh token flow failed\",\n      reason: refreshError?.message || refreshError,\n    });\n\n    message.warning(\"Session expired, retrying login...\");\n\n    try {\n      // \ud83d\udd01 Fallback Full Login\n      const loginForm = queryString.stringify({\n        username: user,\n        password: trimmedPassword,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await axiosInstance.login.post(\n        CONFIG.BASE_URL,\n        loginForm,\n        {\n          headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        }\n      );\n\n      // \u274c Simulate Fallback Login Failure\n      throw new Error(\"Simulated fallback login failure\");\n\n      handleTokenResponse(loginResult.data, dispatch);\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login\");\n    } catch (loginError) {\n      logger.error({\n        msg: \"Fallback login failed\",\n        reason: loginError?.message || loginError,\n      });\n\n      message.error(\"Re-authentication failed. Logging out for your security.\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback/#why-this-helps","title":"\ud83e\udde0 Why This Helps","text":"Benefit Description \u2705 Reusability <code>handleTokenResponse()</code> can be reused anywhere \u2014 login, refresh, idle, etc. \u2705 Maintainability Keeps <code>handleSubmit()</code> easier to follow and debug \u2705 Expandable You can add retry logic, error logging, or metric tracking inside the utility"},{"location":"office/bank/auth/session-timeout-fallback/#bonus-retry-logic-optional","title":"\ud83d\udd04 Bonus: Retry Logic (Optional)","text":"<p>You can wrap fallback login with a retry mechanism like this:</p> <pre><code>const retry = async (fn, retries = 2) =&gt; {\n  let lastError;\n  for (let i = 0; i &lt; retries; i++) {\n    try {\n      return await fn();\n    } catch (err) {\n      lastError = err;\n    }\n  }\n  throw lastError;\n};\n</code></pre> <p>Then use it like:</p> <pre><code>await retry(() =&gt; axiosInstance.login.post(CONFIG.BASE_URL, loginForm, { ... }));\n</code></pre> <p>Let me know if you'd like me to:</p> <ul> <li>Add this retry wrapper fully into the flow</li> <li>Help you extract other reusable pieces (like form submission or error notifications)</li> <li>Make unit tests for these helpers</li> </ul> <p>You\u2019re on the right track!</p>"},{"location":"office/bank/auth/session-timeout-fallback/#retry-mechanism","title":"retry mechanism","text":"<p>Excellent! Let's now fully integrate the retry mechanism into your authentication flow, while keeping it clean, modular, and testable.</p> <p>\u2705 What We'll Do:</p> <ol> <li>Add a <code>retry()</code> utility for reattempting fallback login (or any async logic).</li> <li>Plug it into the <code>handleSubmit()</code> flow.</li> <li>Ensure token handling and error reporting are clear and modular.</li> </ol> <p>Step 1: Create Utility Helpers</p> <p><code>utils/auth.js</code></p> <pre><code>import jwtDecode from \"jwt-decode\";\nimport { updateRefreshToken } from \"@/store/actions\"; // adjust path\n\n/**\n * Handles token decoding and dispatching.\n */\nexport const handleTokenResponse = (data, dispatch) =&gt; {\n  if (!data?.access_token) {\n    throw new Error(\"Missing access token\");\n  }\n\n  const decodedToken = jwtDecode(data.access_token);\n\n  dispatch(\n    updateRefreshToken({\n      access_token: data.access_token,\n      refresh_token: data.refresh_token,\n      iat: decodedToken.iat,\n      exp: decodedToken.exp,\n    })\n  );\n};\n</code></pre> <p><code>utils/retry.js</code></p> <pre><code>/**\n * Retries a promise-returning function a specified number of times.\n */\nexport const retry = async (fn, retries = 2) =&gt; {\n  let lastError;\n  for (let i = 0; i &lt; retries; i++) {\n    try {\n      return await fn();\n    } catch (err) {\n      lastError = err;\n    }\n  }\n  throw lastError;\n};\n</code></pre> <p>Step 2: Refactor <code>handleSubmit</code> to Use Helpers</p> <pre><code>import { handleTokenResponse } from \"@/utils/auth\";\nimport { retry } from \"@/utils/retry\";\n\nconst handleSubmit = async () =&gt; {\n  const trimmedPassword = password.trim();\n  if (isEmpty(trimmedPassword)) return;\n\n  setLoading(true);\n\n  try {\n    const valid = await getPasswordCheck({\n      email: user,\n      password: trimmedPassword,\n    }).unwrap();\n\n    if (!valid?.isPasswordCorrect) {\n      dispatch(incrementIdleAttempts());\n      message.error(`Wrong password (${attempts + 1}/2)`);\n      if (attempts + 1 &gt;= 2) handleLogout();\n      return;\n    }\n\n    // \ud83c\udf10 Attempt Refresh Token\n    const refreshForm = queryString.stringify({\n      grant_type: OAUTH_REFRESH?.GRANT_TYPE,\n      client_id: OAUTH_REFRESH?.CLIENT_ID,\n      client_secret: OAUTH_REFRESH?.CLIENT_SECRET,\n      scope: OAUTH_REFRESH?.SCOPE,\n      refresh_token: refresh,\n    });\n\n    const refreshResult = await axiosInstance.login.post(\n      CONFIG.BASE_URL,\n      refreshForm,\n      {\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      }\n    );\n\n    // \u274c Simulate Refresh Failure\n    throw new Error(\"Simulated refresh token failure\");\n\n    handleTokenResponse(refreshResult.data, dispatch);\n    dispatch(hideIdleModal());\n    message.success(\"Re-authenticated via refresh token\");\n  } catch (refreshError) {\n    logger.error({\n      msg: \"Refresh token flow failed\",\n      reason: refreshError?.message || refreshError,\n    });\n\n    message.warning(\"Session expired, retrying login...\");\n\n    try {\n      // \ud83d\udd01 Retry fallback login up to 2 times\n      const loginForm = queryString.stringify({\n        username: user,\n        password: trimmedPassword,\n        grant_type: OAUTH?.GRANT_TYPE,\n        client_id: OAUTH?.CLIENT_ID,\n        client_secret: OAUTH?.CLIENT_SECRET,\n        scope: OAUTH?.SCOPE,\n      });\n\n      const loginResult = await retry(\n        () =&gt;\n          axiosInstance.login.post(CONFIG.BASE_URL, loginForm, {\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n          }),\n        2 // retry twice\n      );\n\n      // \u274c Simulate Fallback Login Failure\n      throw new Error(\"Simulated fallback login failure\");\n\n      handleTokenResponse(loginResult.data, dispatch);\n      dispatch(hideIdleModal());\n      message.success(\"Re-authenticated via login\");\n    } catch (loginError) {\n      logger.error({\n        msg: \"Fallback login failed\",\n        reason: loginError?.message || loginError,\n      });\n\n      message.error(\"Re-authentication failed. Logging out for your security.\");\n      handleLogout();\n    }\n  } finally {\n    setLoading(false);\n  }\n};\n</code></pre> <p>\ud83e\uddea Testing Again?</p> <p>To simulate failures:</p> <ul> <li>Refresh fail only: Keep this line:</li> </ul> <pre><code>throw new Error(\"Simulated refresh token failure\");\n</code></pre> <ul> <li>Login fail too: Keep this one:</li> </ul> <pre><code>throw new Error(\"Simulated fallback login failure\");\n</code></pre> <p>Comment or remove them to return to normal after testing.</p> <p>Done. You Now Have:</p> Feature Status Token handler utility \u2705 Retry utility \u2705 Fallback login with retry \u2705 Clean error logging \u2705 Modular and reusable code \u2705 <p>Would you like:</p> <ul> <li>A toast or UI element showing retry attempts?</li> <li>To store retry counts in state or localStorage?</li> <li>Unit tests for these utilities?</li> </ul> <p>Let me know how far you want to take it!</p>"},{"location":"office/bank/auth/session-timeout-fallback/#testing","title":"Testing","text":"<p>Great! Let\u2019s go all in and implement the following advanced features for your fallback login flow:</p> <p>\u2705 Plan</p> <p>1. Toast / UI Element for Retry Attempts</p> <p>\u2705 Shows the user how many times re-authentication is being retried.</p> <p>2. Store Retry Count in State or <code>localStorage</code></p> <p>\u2705 So retry attempts persist even on re-renders or accidental refreshes (your choice \u2014 we\u2019ll do both optionally).</p> <p>3. Unit Tests for Utilities</p> <p>\u2705 For <code>handleTokenResponse()</code> and <code>retry()</code> using Jest or Vitest.</p>"},{"location":"office/bank/auth/session-timeout-fallback2/","title":"Session Timeout Fallback 2","text":""},{"location":"office/bank/auth/session-timeout-fallback2/#overview","title":"Overview","text":"<p>Yes, you can and should add that <code>handleTokenResponse</code> function inside an <code>auth</code> folder \u2014 in fact, organizing utility functions like this is good practice.</p> <p>Here\u2019s how you can structure it:</p> <p>File structure example:</p> <pre><code>/src\n  /utils\n    /auth\n      tokenHandler.js    &lt;-- place the function here\n</code></pre> <p>Inside <code>tokenHandler.js</code>:</p> <pre><code>import jwtDecode from \"jwt-decode\"; // make sure to import jwtDecode\nimport { updateRefreshToken } from \"@/store/authSlice\"; // adjust import path as needed\n\nexport const handleTokenResponse = (data, dispatch) =&gt; {\n  if (!data?.access_token) {\n    throw new Error(\"Missing access token\");\n  }\n\n  const decodedToken = jwtDecode(data.access_token);\n\n  dispatch(\n    updateRefreshToken({\n      access_token: data.access_token,\n      refresh_token: data.refresh_token,\n      iat: decodedToken.iat,\n      exp: decodedToken.exp,\n    })\n  );\n};\n</code></pre> <p>Notes:</p> <ul> <li>Make sure you update the import paths (<code>updateRefreshToken</code>, etc.) relative to your project structure.</li> <li>Don't forget to also import and use <code>handleTokenResponse</code> in the place where you need it (e.g., after login or token refresh).</li> <li>If you\u2019re using this utility in multiple places, having it in a dedicated <code>auth</code> subfolder helps keep your logic modular and organized.</li> </ul>"},{"location":"office/bank/auth/session-timeout-fallback2/#updated-folder-structure","title":"Updated Folder Structure","text":"<p>Great! If your <code>auth</code> folder already contains <code>components/</code> and <code>services/</code>, then you're clearly organizing things well. To keep that structure clean and scalable, you can place your <code>handleTokenResponse</code> function inside a new folder (like utils/) or directly in the <code>services/</code> folder, depending on how you plan to use it.</p>"},{"location":"office/bank/auth/session-timeout-fallback2/#option-1-create-a-utils-folder-inside-auth","title":"\ud83d\udd27 Option 1: Create a <code>utils/</code> folder inside <code>auth/</code>","text":"<p>This is best if you want to separate pure utility logic (not directly tied to API calls) from service code.</p> <p>Structure:</p> <pre><code>/auth\n  /components\n  /services\n  /utils\n    tokenHandler.js\n</code></pre> <p>Then in <code>tokenHandler.js</code>:</p> <pre><code>// import jwtDecode from \"jwt-decode\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { updateRefreshToken } from \"@/store/authSlice\"; // adjust if needed\n\nexport const handleTokenResponse = (data, dispatch) =&gt; {\n  if (!data?.access_token) {\n    throw new Error(\"Missing access token\");\n  }\n\n  const decodedToken = jwtDecode(data.access_token);\n\n  dispatch(\n    updateRefreshToken({\n      access_token: data.access_token,\n      refresh_token: data.refresh_token,\n      iat: decodedToken.iat,\n      exp: decodedToken.exp,\n    })\n  );\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#option-2-place-it-inside-services","title":"\ud83d\udce6 Option 2: Place it inside <code>/services</code>","text":"<p>If the <code>handleTokenResponse</code> function is tightly related to your authentication API logic and used by your service functions (e.g., <code>login</code>, <code>refreshToken</code>, etc.), then placing it in <code>services/</code> is also reasonable.</p> <p>Structure:</p> <pre><code>/auth\n  /components\n  /services\n    tokenHandler.js\n</code></pre> <p>Just be consistent \u2014 utility logic that isn't a direct API call but supports service logic often lives in <code>/services</code> too.</p>"},{"location":"office/bank/auth/session-timeout-fallback2/#summary-recommendation","title":"\u2705 Summary Recommendation:","text":"<ul> <li>\ud83d\udcc1 Put <code>handleTokenResponse.js</code> inside <code>auth/utils/</code> if you want a clear utility separation.</li> <li>\ud83d\udcc1 Put it inside <code>auth/services/</code> if it's only used alongside service calls like <code>login/refresh</code>.</li> </ul> <p>Make sure all import paths are updated to reflect the new file location.</p>"},{"location":"office/bank/auth/session-timeout-fallback2/#advanced","title":"Advanced","text":""},{"location":"office/bank/auth/session-timeout-fallback2/#suggested-file-structure-for-modular-code","title":"\ud83d\uddc2 Suggested File Structure for Modular Code","text":"<pre><code>/auth\n  /services\n    checkPassword.js\n    attemptTokenRefresh.js\n    attemptFullLogin.js\n  /utils\n    tokenHandler.js         // contains handleTokenResponse\n</code></pre> <p>Or group them all into <code>auth/services/authFlow.js</code> if you prefer a single file with multiple exports.</p>"},{"location":"office/bank/auth/session-timeout-fallback2/#recommended-folder-structure-within-auth","title":"Recommended Folder Structure (within <code>auth/</code>)","text":"<pre><code>/auth\n  /components           \u2190 auth-related UI components (e.g. LoginModal)\n  /services             \u2190 logic that interacts with APIs or processes responses\n    authApi.js          \u2190 RTK Query endpoints or Axios wrappers for login, refresh, etc.\n    authFlow.js         \u2190 your new modular logic (password check, token refresh, etc.)\n  /utils\n    tokenHandler.js     \u2190 handleTokenResponse (jwtDecode &amp; Redux update)\n  authSlice.js          \u2190 Redux slice (auth state, reducers, actions)\n</code></pre> Quote <p>What Goes in Each File</p> <p>\ud83e\udde0 <code>authSlice.js</code></p> <ul> <li>Holds your Redux slice (via <code>createSlice</code>)</li> <li>Contains state like <code>access_token</code>, <code>refresh_token</code>, <code>user</code>, etc.</li> <li>Reducers: <code>updateRefreshToken</code>, <code>logout</code>, etc.</li> <li>Actions: exported for use elsewhere (e.g., <code>dispatch(updateRefreshToken(...)</code>))</li> </ul> <p>\u2705 You already have this \u2014 no changes needed here unless you're adding new reducers.</p> <p>\ud83d\udd0c <code>authApi.js</code></p> <ul> <li>Defines API logic (either via RTK Query endpoints or Axios wrappers)</li> <li> <p>Example functions:</p> <ul> <li><code>login()</code></li> <li><code>refreshToken()</code></li> <li><code>getPasswordCheck()</code></li> </ul> </li> </ul> <p>\u2705 Keep this as the source of raw API interactions, not higher-level flow logic.</p> <p>\ud83e\udde9 <code>authFlow.js</code> (New \u2014 you can create this)</p> <ul> <li> <p>Contains high-level modular logic like:</p> <ul> <li><code>checkPassword(...)</code></li> <li><code>attemptTokenRefresh(...)</code></li> <li><code>attemptFullLogin(...)</code></li> </ul> </li> <li> <p>These functions call <code>authApi.js</code> functions or Axios requests</p> </li> <li>Used inside your <code>handleSubmit</code> function</li> </ul> <p>\u2705 This is where the modular refactoring of <code>handleSubmit</code> lives.</p> <p>\ud83d\udd27 <code>tokenHandler.js</code> (inside <code>/utils</code>)</p> <ul> <li>Contains:</li> </ul> <pre><code>export const handleTokenResponse = (data, dispatch) =&gt; {\n// decode and dispatch to update Redux\n};\n</code></pre> <ul> <li>Pure utility, no UI or API side effects</li> </ul> <p>How to Wire It All Together</p> <p>Here\u2019s how you\u2019d use everything:</p> <pre><code>// Somewhere like LoginModal.jsx or IdleModal.jsx\n\nimport { handleTokenResponse } from \"@/auth/utils/tokenHandler\";\nimport {\n  checkPassword,\n  attemptTokenRefresh,\n  attemptFullLogin,\n} from \"@/auth/services/authFlow\";\nimport { updateRefreshToken } from \"@/auth/authSlice\";\nimport { getPasswordCheck } from \"@/auth/services/authApi\"; // if you're using RTK Query\n</code></pre> <p>\ud83e\uddfc Summary</p> File/Folders Responsibility <code>authSlice.js</code> Redux state + reducers for auth <code>authApi.js</code> Low-level API calls <code>authFlow.js</code> High-level login/refresh logic (modularized) <code>tokenHandler.js</code> Utility for decoding token &amp; updating Redux <code>components/</code> UI elements (modals, forms, etc.) <code>services/</code> Non-UI logic (API + flows) <code>utils/</code> Pure helpers/utilities"},{"location":"office/bank/auth/session-timeout-fallback2/#authflowjs","title":"<code>authFlow.js</code>","text":"<pre><code>/auth/services/authFlow.js\n</code></pre> <pre><code>// auth/services/authFlow.js\n\nimport queryString from \"query-string\";\nimport axiosInstance from \"@/lib/axios\"; // adjust if needed\nimport { OAUTH, OAUTH_REFRESH, CONFIG } from \"@/constants\"; // adjust if needed\nimport { getPasswordCheck } from \"./authApi\"; // if you're using RTK Query\nimport { incrementIdleAttempts } from \"@/auth/authSlice\"; // adjust if needed\nimport { message } from \"antd\";\nimport logger from \"@/utils/logger\"; // adjust or remove if not using\n\n/**\n * Check if password is correct.\n */\nexport const checkPassword = async (user, password, dispatch, attempts) =&gt; {\n  const result = await getPasswordCheck({ email: user, password }).unwrap();\n\n  if (!result?.isPasswordCorrect) {\n    dispatch(incrementIdleAttempts());\n    message.error(`Wrong password (${attempts + 1}/2)`);\n    if (attempts + 1 &gt;= 2) {\n      throw new Error(\"Too many incorrect attempts\");\n    }\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Attempt to refresh the token using the refresh token.\n */\nexport const attemptTokenRefresh = async (refreshToken) =&gt; {\n  const refreshForm = queryString.stringify({\n    grant_type: OAUTH_REFRESH.GRANT_TYPE,\n    client_id: OAUTH_REFRESH.CLIENT_ID,\n    client_secret: OAUTH_REFRESH.CLIENT_SECRET,\n    scope: OAUTH_REFRESH.SCOPE,\n    refresh_token: refreshToken,\n  });\n\n  const response = await axiosInstance.login.post(\n    CONFIG.BASE_URL,\n    refreshForm,\n    {\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    }\n  );\n\n  return response.data;\n};\n\n/**\n * Fallback full login using username and password.\n */\nexport const attemptFullLogin = async (username, password) =&gt; {\n  const loginForm = queryString.stringify({\n    username,\n    password,\n    grant_type: OAUTH.GRANT_TYPE,\n    client_id: OAUTH.CLIENT_ID,\n    client_secret: OAUTH.CLIENT_SECRET,\n    scope: OAUTH.SCOPE,\n  });\n\n  const response = await axiosInstance.login.post(CONFIG.BASE_URL, loginForm, {\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n  });\n\n  return response.data;\n};\n\n/**\n * Handle errors and log them consistently.\n */\nexport const logAuthError = (label, error) =&gt; {\n  logger?.error?.({\n    msg: `${label} failed`,\n    reason: error?.message || error,\n  });\n};\n</code></pre> <p>\ud83e\udde9 How to Use in Your Component</p> <p>Example usage in <code>handleSubmit</code>:</p> <pre><code>import {\n  checkPassword,\n  attemptTokenRefresh,\n  attemptFullLogin,\n  logAuthError,\n} from \"@/auth/services/authFlow\";\n\nimport { handleTokenResponse } from \"@/auth/utils/tokenHandler\";\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#slice-folder","title":"SLICE FOLDER","text":"<p>Yes, you absolutely can \u2014 and often should \u2014 create a dedicated slice/ folder for your Redux slices. This is especially useful in larger apps or when your feature folders contain multiple Redux-related files (like slices, selectors, thunks, etc.).</p> When to Create a slice/ Folder <p>You should consider making a <code>slice/</code> folder if:</p> <ul> <li>You have multiple slice files (<code>authSlice.js</code>, <code>userSlice.js</code>, etc.)</li> <li>You want to separate Redux logic from services, components, and utilities</li> <li>You follow a feature-based structure and want consistency</li> </ul>"},{"location":"office/bank/auth/session-timeout-fallback2/#recommended-structure","title":"\ud83d\uddc2 Recommended Structure","text":"<p>For your <code>auth</code> feature:</p> <pre><code>/auth\n  /slice\n    authSlice.js      \u2190 \u2705 Move it here\n  /services\n    authApi.js\n    authFlow.js\n  /utils\n    tokenHandler.js\n  /components\n</code></pre> <p>And update your <code>imports</code> accordingly:</p> <pre><code>// BEFORE\nimport { updateRefreshToken } from \"@/auth/authSlice\";\n\n// AFTER\nimport { updateRefreshToken } from \"@/auth/slice/authSlice\";\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#or-split-authflowjs","title":"OR SPLIT <code>authflow.js</code>","text":"<p>You can split this <code>authFlow.js</code> file into multiple, more modular files to improve maintainability, readability, and reusability.</p> <p>Here\u2019s a suggested structure to break this into multiple files, assuming you're using a modular file organization in your project:</p> <pre><code>auth/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 checkPassword.js\n\u2502   \u251c\u2500\u2500 tokenRefresh.js\n\u2502   \u251c\u2500\u2500 fullLogin.js\n\u2502   \u2514\u2500\u2500 logAuthError.js\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#authservices","title":"\ud83d\udcc1 <code>auth/services/</code>","text":"<p>New File Structure:</p> <pre><code>auth/\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 checkPassword.js\n\u2502   \u251c\u2500\u2500 tokenRefresh.js\n\u2502   \u251c\u2500\u2500 fullLogin.js\n\u2502   \u2514\u2500\u2500 logAuthError.js\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#1-checkpasswordjs","title":"1. <code>checkPassword.js</code>","text":"<pre><code>import { getPasswordCheck } from \"./authApi\"; // or adjust path\nimport { incrementIdleAttempts } from \"@/auth/authSlice\"; // adjust path\nimport { message } from \"antd\";\n\n/**\n * Check if password is correct.\n */\nexport const checkPassword = async (user, password, dispatch, attempts) =&gt; {\n  const result = await getPasswordCheck({ email: user, password }).unwrap();\n\n  if (!result?.isPasswordCorrect) {\n    dispatch(incrementIdleAttempts());\n    message.error(`Wrong password (${attempts + 1}/2)`);\n    if (attempts + 1 &gt;= 2) {\n      throw new Error(\"Too many incorrect attempts\");\n    }\n    return false;\n  }\n\n  return true;\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#2-tokenrefreshjs","title":"2. <code>tokenRefresh.js</code>","text":"<pre><code>import queryString from \"query-string\";\nimport axiosInstance from \"@/lib/axios\";\nimport { OAUTH_REFRESH, CONFIG } from \"@/constants\";\n\n/**\n * Attempt to refresh the token using the refresh token.\n */\nexport const attemptTokenRefresh = async (refreshToken) =&gt; {\n  const refreshForm = queryString.stringify({\n    grant_type: OAUTH_REFRESH.GRANT_TYPE,\n    client_id: OAUTH_REFRESH.CLIENT_ID,\n    client_secret: OAUTH_REFRESH.CLIENT_SECRET,\n    scope: OAUTH_REFRESH.SCOPE,\n    refresh_token: refreshToken,\n  });\n\n  const response = await axiosInstance.login.post(\n    CONFIG.BASE_URL,\n    refreshForm,\n    {\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    }\n  );\n\n  return response.data;\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#3-fullloginjs","title":"3. <code>fullLogin.js</code>","text":"<pre><code>import queryString from \"query-string\";\nimport axiosInstance from \"@/lib/axios\";\nimport { OAUTH, CONFIG } from \"@/constants\";\n\n/**\n * Fallback full login using username and password.\n */\nexport const attemptFullLogin = async (username, password) =&gt; {\n  const loginForm = queryString.stringify({\n    username,\n    password,\n    grant_type: OAUTH.GRANT_TYPE,\n    client_id: OAUTH.CLIENT_ID,\n    client_secret: OAUTH.CLIENT_SECRET,\n    scope: OAUTH.SCOPE,\n  });\n\n  const response = await axiosInstance.login.post(CONFIG.BASE_URL, loginForm, {\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n  });\n\n  return response.data;\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#4-logautherrorjs","title":"4. <code>logAuthError.js</code>","text":"<pre><code>import logger from \"@/utils/logger\"; // adjust if not using\n\n/**\n * Handle errors and log them consistently.\n */\nexport const logAuthError = (label, error) =&gt; {\n  logger?.error?.({\n    msg: `${label} failed`,\n    reason: error?.message || error,\n  });\n};\n</code></pre>"},{"location":"office/bank/auth/session-timeout-fallback2/#usage","title":"Usage","text":"<p>You can now import them wherever you need:</p> <pre><code>import { checkPassword } from \"@/auth/services/checkPassword\";\nimport { attemptTokenRefresh } from \"@/auth/services/tokenRefresh\";\nimport { attemptFullLogin } from \"@/auth/services/fullLogin\";\nimport { logAuthError } from \"@/auth/services/logAuthError\";\n</code></pre> <p>Let me know if you'd like to namespace them (e.g., <code>authServices.checkPassword</code>) or if you want to group them further.</p>"},{"location":"office/bank/basic/antd-chartd/","title":"antd chart","text":"Summary of Key AntV Graph and Network Packages <ul> <li>G6: Network and graph visualizations.</li> <li>X6: Diagrams and flowchart visualizations.</li> <li>L7: Geospatial data visualizations.</li> <li>F2: Mobile-friendly charts and graphs.</li> <li>G2: Grammar of graphics for general data visualization.</li> </ul> <pre><code>npm install @ant-design/charts --save\n\n# or\n\npnpm add @ant-design/charts\n</code></pre> Usage<pre><code>import React from \"react\";\nimport { Line } from \"@ant-design/charts\";\n\nconst Page: React.FC = () =&gt; {\n  const data = [\n    { year: \"1991\", value: 3 },\n    { year: \"1992\", value: 4 },\n    { year: \"1993\", value: 3.5 },\n    { year: \"1994\", value: 5 },\n    { year: \"1995\", value: 4.9 },\n    { year: \"1996\", value: 6 },\n    { year: \"1997\", value: 7 },\n    { year: \"1998\", value: 9 },\n    { year: \"1999\", value: 13 },\n  ];\n\n  const config = {\n    data,\n    height: 400,\n    xField: \"year\",\n    yField: \"value\",\n  };\n  return &lt;Line {...config} /&gt;;\n};\nexport default Page;\n</code></pre>"},{"location":"office/bank/basic/antd-chartd/#updated-code","title":"Updated Code","text":"<pre><code>const VerticalStepsForm = () =&gt; {\n  const {\n    currentStep,\n    formValues,\n    nextStep,\n    prevStep,\n    resetSteps,\n    updateForm,\n  } = useStepReducer();\n\n  const {\n    data: currencyData,\n    loading: currencyLoading,\n    error: currencyError,\n  } = useGetCurrencyQuery();\n\n  const [form] = Form.useForm();\n\n  const [buyingCurrency, setBuyingCurrency] = useState(null);\n  const [sellingCurrency, setSellingCurrency] = useState(null);\n\n  // Description\n  const description1 = currentStep === 0 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"buyingCurrency\"\n        label=\"Buying Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Buying Currency!\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          placeholder=\"Select Buying Currency\"\n          onChange={(value) =&gt; {\n            setBuyingCurrency(value);\n            console.log(\"value: \", value);\n          }}\n        &gt;\n          {currencyData &amp;&amp;\n            currencyData\n              .filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== sellingCurrency\n              )\n              .map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"sellingCurrency\"\n        label=\"Selling Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Selling Currency\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          placeholder=\"Select Selling Currency\"\n          onChange={(value) =&gt; {\n            setSellingCurrency(value);\n            console.log(\"Selling Selected: \", value);\n          }}\n        &gt;\n          {currencyData &amp;&amp;\n            currencyData\n              .filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== buyingCurrency\n              )\n              .map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item&gt;\n        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n          Next\n        &lt;/Button&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre> <p>Test</p> JSXuseFilteredCurrencies.js <pre><code>import React, { useState } from \"react\";\nimport { Form, Select } from \"antd\";\nimport useFilteredCurrencies from \"./useFilteredCurrencies\"; // Import the custom hook\n\nconst YourComponent = () =&gt; {\n    const [buyingCurrency, setBuyingCurrency] = useState(null);\n    const [sellingCurrency, setSellingCurrency] = useState(null);\n\n    const currencies = [\n        { value: \"USD\", label: \"Dollar\", isActive: true },\n        { value: \"EUR\", label: \"Euro\", isActive: true },\n        { value: \"INR\", label: \"Indian Rupee\", isActive: false },\n        { value: \"GBP\", label: \"British Pound\", isActive: true },\n        // Add more currencies here...\n    ];\n\n    // Use the custom hook to filter currencies\n    const filteredBuyingCurrencies = useFilteredCurrencies(\n        currencies,\n        sellingCurrency,\n        sellingCurrency\n    );\n    const filteredSellingCurrencies = useFilteredCurrencies(\n        currencies,\n        buyingCurrency,\n        buyingCurrency\n    );\n\n    return (\n        &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n            &lt;Form.Item\n                name=\"buyingCurrency\"\n                label=\"Buying Currency\"\n                rules={[{ required: true, message: \"Please select Buying Currency!\" }]}\n            &gt;\n                &lt;Select\n                    placeholder=\"Select Buying Currency\"\n                    value={buyingCurrency}\n                    onChange={setBuyingCurrency}\n                &gt;\n                    {filteredBuyingCurrencies.map((currency) =&gt; (\n                        &lt;Select.Option key={currency.value} value={currency.value}&gt;\n                        {currency.label}\n                        &lt;/Select.Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            &lt;Form.Item\n                name=\"sellingCurrency\"\n                label=\"Selling Currency\"\n                rules={[{ required: true, message: \"Please select Selling Currency\" }]}\n            &gt;\n                &lt;Select\n                    placeholder=\"Select Selling Currency\"\n                    value={sellingCurrency}\n                    onChange={setSellingCurrency}\n                &gt;\n                    {filteredSellingCurrencies.map((currency) =&gt; (\n                        &lt;Select.Option key={currency.value} value={currency.value}&gt;\n                        {currency.label}\n                        &lt;/Select.Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n    );\n};\n</code></pre> <pre><code>import { useMemo } from \"react\";\n\n// Custom hook to filter currencies for buying and selling\nconst useFilteredCurrencies = (currencies, selectedCurrency, excludeValue) =&gt; {\n    return useMemo(() =&gt; {\n        return currencies\n            .filter((currency) =&gt; currency.isActive &amp;&amp; currency.value !== excludeValue)\n            .map(({ value, label }) =&gt; ({\n                value,\n                label,\n            }));\n    }, [currencies, excludeValue]);\n};\n\nexport default useFilteredCurrencies;\n</code></pre>"},{"location":"office/bank/basic/antd-chartd/#added-util-code","title":"Added <code>util</code> code","text":"<p>You can create a utility function to find the <code>label</code> based on the <code>value</code>:</p> SyntaxCustomAdvanced <pre><code>const getLabelByValue = (value, options) =&gt; {\n    const option = options.find((option) =&gt; option.value === value);\n    return option ? option.label : null;\n};\n</code></pre> <pre><code>    const getLabelByValue = (id, options) =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option?.name : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <pre><code>const getLabelByValue = (id, options, property = \"name\") =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option[property] : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <pre><code>const label = getLabelByValue(1, options);  // Defaults to 'name'\n// or\nconst label = getLabelByValue(1, options, 'description');\n</code></pre> Tip <ul> <li><code>getLabelByValue</code> function: This function takes a value (e.g., the <code>id</code> or <code>value</code>) and maps it to the corresponding <code>label</code> from the banks array. It is used in the final step to display the readable label rather than the <code>id</code>.</li> <li>Displaying <code>label</code> in summary: In the final step (<code>description5</code>), instead of directly showing the <code>value</code> (e.g., <code>formValues.payFrom</code>), we use <code>getLabelByValue(formValues.payFrom, banks)</code> to get the label associated with that value.</li> <li>Updating the form state: The form state (<code>formValues</code>) is updated by selecting values (e.g., <code>payFrom</code>, <code>theyReceivedAt</code>, etc.) using the <code>onChange</code> event handler inside each <code>Select</code> component.</li> </ul> <p>This approach allows you to keep the internal <code>id</code> values while presenting the user-friendly <code>label</code> in the UI.</p> <pre><code>const description5 = currentStep === 4 &amp;&amp; (\n  &lt;Form form={form} className=\"form-step\" name=\"step5-form\" layout=\"vertical\"&gt;\n    &lt;Row gutter={40} style={{ marginBottom: \"2em\" }}&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Selling Currency&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues?.sellingCurrency}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Rate&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.rate}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Buying Currency&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.buyingCurrency}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Selling Value (NPR)&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.sellingAmount}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Counterparty name&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;\n            {/* {formValues.counterpartyName} */}\n            {getLabelByValue(formValues.counterpartyName, bank)}\n          &lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;We Pay From&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.payFrom}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Counter Party Name&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;\n            {getLabelByValue(formValues.counterpartyDealer, bankUser)}\n          &lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;They Receive at&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.theyReceivedAt}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Buying Amount (USD)&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.buyingAmount}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;We Receive at&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues?.weReceivedAt}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Form.Item&gt;\n      &lt;Button type=\"default\" onClick={handlePrev}&gt;\n        Back\n      &lt;/Button&gt;\n      &lt;Button type=\"primary\" onClick={handleNext} style={{ marginLeft: 10 }}&gt;\n        Next\n      &lt;/Button&gt;\n    &lt;/Form.Item&gt;\n  &lt;/Form&gt;\n);\n</code></pre>"},{"location":"office/bank/basic/antd-chartd/#advanced-code","title":"Advanced Code","text":"<p>Yes, you can make the <code>option?.name</code> dynamic by passing the property name as an argument to the <code>getLabelByValue</code> function. This way, instead of hardcoding <code>name</code>, you can access any property dynamically by referencing the property name passed to the function.</p> CodeExplanation <p>Here's how you can modify the code:</p> <pre><code>const getLabelByValue = (id, options, property = \"name\") =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option[property] : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <ol> <li>property = 'name': The <code>property</code> parameter is added with a default value of <code>'name'</code>, which means if no property is passed, it will default to <code>'name'</code>.</li> <li>option[property]: This accesses the dynamic property of the found <code>option</code>.</li> </ol> Example Usage <p>If you want to get the name:</p> <pre><code>const label = getLabelByValue(1, options);  // Defaults to 'name'\n</code></pre> <p>If you want to get a different property, such as description:</p> <pre><code>const label = getLabelByValue(1, options, 'description');\n</code></pre> <p>This makes the function flexible to return any dynamic property of the object within the <code>options</code> array.</p>"},{"location":"office/bank/basic/antd-chartd/#reference","title":"Reference","text":"<ul> <li>Ant Design Charts: AntV</li> <li>AntV Gallery</li> <li>What is the best approach to show a loader / error message / data? </li> </ul>"},{"location":"office/bank/basic/dynamic-refetch/","title":"Dynamic Refetch","text":""},{"location":"office/bank/basic/dynamic-refetch/#overview","title":"Overview","text":""},{"location":"office/bank/basic/dynamic-refetch/#basic-polling-with-rtk-query","title":"Basic polling with RTK Query","text":"<p>RTK Query allows you to add a <code>pollingInterval</code> option when calling the <code>query</code> hook:</p> <pre><code>const {\n  data: messageList,\n  isLoading: messageLoading,\n  error: messageError,\n  isFetching,\n} = useGetCurrencyRequestCreatorQuery(\n  {\n    status: selectedTab,\n    pageSize,\n    page: 1,\n    paymentType,\n    transactionType,\n    amount,\n    currencyId,\n    searchTerm,\n  },\n  {\n    skip: !pageSize,\n    pollingInterval: 10000, // in milliseconds (e.g., 10 seconds)\n  }\n);\n</code></pre> <p>This will poll every 10 seconds.</p>"},{"location":"office/bank/basic/dynamic-refetch/#refetch-method-from-the-hook","title":"<code>refetch</code> method from the hook.","text":"<p>Step-by-step solution:</p> <ul> <li>Destructure the <code>refetch</code> method from the hook.</li> <li>Use <code>useEffect</code> to watch <code>mftPendingCounter</code> and call <code>refetch</code> when it changes.</li> </ul> <pre><code>import { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst {\n  mftPendingCounter,\n  mftMyListCounter,\n  currencyMyListCounter,\n  currencyPendingCounter,\n} = useSelector((state) =&gt; state.counter);\n\nconst {\n  data: messageList,\n  isLoading: messageLoading,\n  error: messageError,\n  isFetching,\n  refetch,\n} = useGetCurrencyRequestCreatorQuery(\n  {\n    status: selectedTab,\n    pageSize,\n    page: 1,\n    paymentType,\n    transactionType,\n    amount,\n    currencyId,\n    searchTerm,\n  },\n  {\n    skip: !pageSize,\n  }\n);\n\n// \ud83d\udc47 Refetch the data when mftPendingCounter changes\nuseEffect(() =&gt; {\n  if (pageSize) {\n    refetch();\n  }\n}, [mftPendingCounter, refetch, pageSize]);\n</code></pre>"},{"location":"office/bank/basic/dynamic-refetch/#changes-file","title":"CHANGES FILE","text":"<pre><code>modified:   features/currencyIssuer/components/IssuerMessageList.jsx\nmodified:   features/currencyResponder/components/ResponderMessageList.jsx\nmodified:   features/mftIssuer/components/MftIssuerList.jsx\nmodified:   features/mftResponder/components/MftResponderList.jsx\n</code></pre>"},{"location":"office/bank/basic/file-upload/","title":"File Upload","text":""},{"location":"office/bank/basic/file-upload/#file-upload","title":"File Upload","text":"Edit<pre><code>const handleEditSubmit = async (values) =&gt; {\n  setIsLoadingButton(true);\n\n  formData.append(\"title\", values.title);\n  formData.append(\"description\", values.description);\n  formData.append(\"tutorialTypeId\", values.tutorialTypeId);\n  formData.append(\"youTubeLink\", values.youTubeLink);\n\n  console.log(\"FILEBANEL \", fileList);\n\n  if (values?.file &amp;&amp; fileList?.length &gt; 0) {\n    fileList.forEach((file, index) =&gt; {\n      if (file.originFileObj) {\n        formData.append(\"files\", file.originFileObj);\n      } else if (file.url) {\n        formData.append(\"fileold\", file.name);\n      }\n    });\n  }\n};\n</code></pre> Submit<pre><code>const handleSubmit = async (values) =&gt; {\n  logger.info({ msg: \"SUBMIT: \", values });\n  setIsLoadingButton(true);\n\n  formData.append(\"title\", values?.title);\n  formData.append(\"description\", values?.description);\n  formData.append(\"tutorialTypeId\", values?.tutorialTypeId);\n  formData.append(\"youTubeLink\", values?.youTubeLink);\n\n  if (values?.file &amp;&amp; fileList?.length &gt; 0) {\n    fileList.forEach((fileObj, index) =&gt; {\n      formData.append(\"file\", fileObj.originFileObj);\n    });\n  }\n\n  const uppdatedValues = {\n    ...values,\n    isActive: true,\n  };\n\n  try {\n    // await postTutorial(uppdatedValues).unwrap();\n    await postTutorial(formData).unwrap();\n    onCloseClick();\n  } catch (error) {\n    logger.error({ msg: \"Add Error: \", error });\n  } finally {\n    setIsLoadingButton(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/basic/file-upload/#theory","title":"Theory","text":""},{"location":"office/bank/basic/file-upload/#upload","title":"Upload","text":"<pre><code>&lt;Upload\n  listType=\"picture\"\n  accept=\".pdf,image/*\"\n  maxCount={4}\n  beforeUpload={() =&gt; false}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button&gt;Select File&lt;/Button&gt;\n&lt;/Upload&gt;\n</code></pre> <p>???+ tip\"\ud83d\udca1 Explanation\"</p> <pre><code>-   `accept=\".pdf,image/*\"` allows:\n\n    -   Any **PDF** file (`.pdf`)\n    -   Any **image type** (e.g., `.png`, `.jpeg`, `.webp`, etc.)\n\n-   `listType=\"picture\"` shows image thumbnails in the list.\n-   `beforeUpload={() =&gt; false}` prevents auto-upload (good for manual control).\n-   `maxCount={4}` limits the selection to 4 files.\n</code></pre>"},{"location":"office/bank/basic/file-upload/#previous-and-new-update-upload-logic","title":"Previous and New Update Upload Logic","text":"<p>To merge the previous file(s) and newly added file(s) and send them properly in your <code>handleEditSubmit</code>, you need to clarify whether:</p> <ol> <li>You're allowing multiple files, or just one.</li> <li>The backend expects the actual file object (binary) or just the filename (string).</li> <li>You want to retain previously uploaded files (i.e., user doesn\u2019t delete them on edit), and just add new ones.</li> </ol> <p>Assuming the most common case:</p> <ul> <li>You support multiple files.</li> <li>The backend expects actual file objects.</li> <li>You want to send all existing and new files together during edit.</li> </ul> <p>Here's how you can handle that:</p> Updated handleEditSubmit Logic<pre><code>const handleEditSubmit = async (values) =&gt; {\n  setIsLoadingButton(true);\n  const formData = new FormData();\n\n  formData.append(\"title\", values.title);\n  formData.append(\"description\", values.description);\n  formData.append(\"tutorialTypeId\", values.tutorialTypeId);\n  formData.append(\"youTubeLink\", values.youTubeLink);\n\n  console.log(\"FILEBANEL \", fileList);\n\n  // Append all files: existing + new\n  if (fileList &amp;&amp; fileList.length &gt; 0) {\n    fileList.forEach((file, index) =&gt; {\n      if (file.originFileObj) {\n        // Newly uploaded file\n        formData.append(\"files\", file.originFileObj);\n      } else if (file.url) {\n        // Previously uploaded file - send filename or ID if needed\n        formData.append(\"existingFiles[]\", file.url); // or file.filename depending on backend\n      }\n    });\n  }\n\n  try {\n    const response = await yourEditApiCall(formData); // replace with actual API function\n    console.log(\"Edit successful:\", response);\n  } catch (error) {\n    console.error(\"Edit failed:\", error);\n  } finally {\n    setIsLoadingButton(false);\n  }\n};\n</code></pre> \ud83d\udd0d Key Notes <ul> <li><code>file.originFileObj</code> is how Ant Design's <code>Upload</code> component stores new files.</li> <li><code>file.url</code> typically exists for already uploaded files.</li> <li>You may need to adjust <code>existingFiles[]</code> based on how your backend identifies previous uploads (URL, ID, filename).</li> <li>If you're using a custom backend, make sure it can differentiate between new file uploads and existing references.</li> </ul>"},{"location":"office/bank/basic/file-upload/#need-to-deep-down-researc","title":"Need to Deep Down Researc","text":"<pre><code>    {\n      title: \"File\",\n      dataIndex: \"file\",\n      key: \"file\",\n      render: (_, record) =&gt; {\n        // const items = record?.tutorialDocuments?.map((item, index) =&gt; ({\n        //   key: index,\n        //   label: item?.url,\n        // }));\n        // return (\n        //   &lt;&gt;\n        //     {console.log(\"FILE RECORD: \", items)}\n        //     &lt;Dropdown menu={{ items }} placement=\"bottom\"&gt;\n        //       Test{\" \"}\n        //     &lt;/Dropdown&gt;\n        //   &lt;/&gt;\n        // );\n        const documents = record?.tutorialDocuments || [];\n\n        console.log(\"XXXX: \", record?.tutorialDocuments);\n\n        const items = documents.map((item, index) =&gt; ({\n          key: index,\n          label: (\n            // &lt;a href={item?.url} target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n            &lt;span\n              // onClick={() =&gt; handleOpenInNewTab(item?.url)}\n              // href={`${CONFIG.BASE_API_URL}${item?.url}`}\n              // target=\"_blank\"\n              // rel=\"noopener noreferrer\"\n              style={{ cursor: \"pointer\" }}\n            &gt;\n              &lt;AllFileViewer\n                // file={`https://bk-api.info.com.np${item?.url}`}\n\n                // file={`https://bk-api.info.com.np${item?.url}`}\n                file={item?.url}\n                // file={`${CONFIG.BASE_API_URL}${item?.url}`}\n              /&gt;\n              {item?.fileDisplayName || `Document ${index + 1}`}\n            &lt;/span&gt;\n          ),\n        }));\n</code></pre> <pre><code>import \"react-pdf/dist/Page/TextLayer.css\";\nimport \"react-pdf/dist/Page/AnnotationLayer.css\";\n</code></pre> <p>VVIP: Support for annotations</p>"},{"location":"office/bank/basic/file-upload/#reference","title":"Reference","text":"<ul> <li>Perplexity: FileURLS</li> </ul>"},{"location":"office/bank/basic/mail-validation/","title":"MAIL Validation","text":""},{"location":"office/bank/basic/mail-validation/#mail-validation","title":"Mail Validation","text":"<pre><code>import { Form, Input } from \"antd\";\n\n&lt;Form name=\"emailForm\" initialValues={{ remember: true }}&gt;\n  &lt;Form.Item\n    name=\"email\"\n    label=\"Email\"\n    rules={[\n      { required: true, message: \"Please input your email!\" },\n      {\n        type: \"email\",\n        message: \"Please enter a valid email!\",\n      },\n      {\n        validator: (_, value) =&gt;\n          !value || value.endsWith(\"@test.com\")\n            ? Promise.resolve()\n            : Promise.reject(new Error(\"Email must end with @test.com\")),\n      },\n    ]}\n  &gt;\n    &lt;Input /&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;;\n</code></pre>"},{"location":"office/bank/basic/mail-validation/#safe-and-flexible-domain-validation","title":"\u2705 Safe and Flexible Domain Validation","text":"<p>If the user can set either:</p> <ul> <li><code>\"@test.com\"</code> or</li> <li><code>\"test.com\"</code> or even just <code>\"test\"</code></li> </ul> <p>...you\u2019ll need to normalize the domain value from <code>settings?.emailDomain</code> to make sure validation works consistently.</p> <pre><code>&lt;Form.Item\n  name=\"email\"\n  label=\"Email\"\n  getValueFromEvent={(e) =&gt; e.target.value.trim()}\n  rules={[\n    { required: true, message: \"Please input your email!\" },\n    { type: \"email\", message: \"Please enter a valid email!\" },\n    {\n      validator: (_, value) =&gt; {\n        const rawDomain = settings?.emailDomain || \"test.com\";\n\n        // Ensure domain starts with @ and has no extra spaces\n        const normalizedDomain =\n          \"@\" + rawDomain.replace(/^@/, \"\").trim().toLowerCase();\n\n        if (!value) return Promise.resolve();\n\n        if (!value.trim().toLowerCase().endsWith(normalizedDomain)) {\n          return Promise.reject(\n            new Error(`Email must end with ${normalizedDomain}`)\n          );\n        }\n\n        return Promise.resolve();\n      },\n    },\n  ]}\n&gt;\n  &lt;Input /&gt;\n&lt;/Form.Item&gt;\n</code></pre> <p>\ud83d\udd0d Explanation:</p> <ul> <li><code>rawDomain.replace(/^@/, '')</code>: Removes leading <code>@</code> if present.</li> <li><code>@ + domain</code>: Ensures comparison always checks for <code>@domain</code>.</li> <li><code>.trim().toLowerCase()</code>: Makes it case- and space-insensitive.</li> </ul> <p>\u2705 Example Inputs That Will Pass with <code>settings?.emailDomain = \"Test.com\"</code></p> <ul> <li><code>user@Test.com</code></li> <li><code>admin@test.com</code></li> <li><code>someone@TEST.COM</code></li> </ul>"},{"location":"office/bank/basic/mft-api-changes/","title":"MFT Changes API Update","text":""},{"location":"office/bank/basic/mft-api-changes/#mft-api-chages","title":"MFT API CHAGES","text":""},{"location":"office/bank/basic/mft-api-changes/#previously-mft-api-no-deal-type","title":"PREVIOUSLY MFT API : NO DEAL TYPE","text":"mftApi.js<pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\n\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport logger from \"@shared/utils/logger\";\nimport {\n  NotificationType,\n  NotificationPlacement,\n  NotificationDuration,\n} from \"@shared/utils/notification\";\n\nexport const mftApi = createApi({\n  reducerPath: \"mftApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"mftApi\"],\n  endpoints: (builder) =&gt; ({\n    postMft: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"MutualFundTransfer\",\n        method: HTTP_METHODS?.POST,\n        data,\n      }),\n      keepUnusedDataFor: 0,\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Your Money Fund Transfer was successfully submitted.\",\n            3\n          );\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the Mutual Fund Transfer Deal submission.\",\n            1\n          );\n        }\n      },\n    }),\n\n    getMftPagination: builder.query({\n      query: ({\n        page,\n        pageSize,\n        searchTerm,\n        CounterpartyId,\n        SearchDateFrom,\n        SearchDateTo,\n        Dealer,\n        currencyId,\n        dealDate,\n        valueDate,\n        sortOrder,\n        givenOrTaken,\n        sortBy,\n        filter,\n        showComments,\n      }) =&gt; {\n        const queryParams = queryString.stringify({\n          ...(page &amp;&amp; { pageCount: page }),\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n          ...(CounterpartyId &amp;&amp; { CounterpartyId }),\n          ...(SearchDateFrom &amp;&amp; { SearchDateFrom }),\n          ...(SearchDateTo &amp;&amp; { SearchDateTo }),\n          ...(Dealer &amp;&amp; { Dealer }),\n          ...(currencyId &amp;&amp; {\n            currencyId,\n          }),\n          ...(dealDate &amp;&amp; { dealDate }),\n          ...(valueDate &amp;&amp; { valueDate }),\n          ...(sortOrder &amp;&amp; { Sorting: sortOrder }),\n          ...(sortBy &amp;&amp; { SortBy: sortBy }),\n          ...(givenOrTaken &amp;&amp; { givenOrTaken }),\n          ...(filter &amp;&amp; { Filter: filter }),\n          ...(showComments &amp;&amp; { showComments }),\n        });\n\n        return {\n          url: `MutualFundTransfer/GetViaPagination?${queryParams}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n      keepUnusedDataFor: 0,\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Mutual Fund Transfer Deal List.\",\n            1\n          );\n        }\n      },\n    }),\n\n    getMftById: builder.query({\n      query: ({ id }) =&gt; {\n        return {\n          url: `MutualFundTransfer/${id}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Mutual Fund Transfer Deal.\",\n            1\n          );\n        }\n      },\n      providesTags: [\"mftApi\"],\n    }),\n\n    postMutualFundOperation: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"MutualFundTransfer/UpdateMutualFundOperation\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Approved successfully.\",\n            3\n          );\n          dispatch(mftApi.util.invalidateTags([\"mftApi\"]));\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the Mutual Fund Transfer Deal Approval.\",\n            1\n          );\n        }\n      },\n    }),\n    postCancelMutualFundOperation: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"MutualFundTransfer/CancelMutualFundOperation\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Deal Cancelled successfully.\",\n            3\n          );\n          dispatch(mftApi.util.invalidateTags([\"mftApi\"]));\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the Mutual Fund Transfer deal Cancel.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  usePostMftMutation,\n  useGetMftPaginationQuery,\n  useGetMftByIdQuery,\n  usePostMutualFundOperationMutation,\n  usePostCancelMutualFundOperationMutation,\n} = mftApi;\n</code></pre>"},{"location":"office/bank/basic/mft-api-changes/#mft","title":"MFT","text":""},{"location":"office/bank/basic/mft-api-changes/#component","title":"COMPONENT","text":"<pre><code>// DealListDetails.jsx\n\n{/* postMutualFundOperation */}\nif (\n    dealData?.currentStatus === FOREX_STEPS?.ONHOLD ||\n    dealData?.currentStatus === FOREX_STEPS?.MID_OFFICE_REQUEST ||\n    dealData?.currentStatus === FOREX_STEPS?.BACKOFFICE_VERIFICATION\n    ) {\n        submitValues = {\n            dealId: dealData?.id,\n            remarks: values.remarks,\n            file: base64Files,\n            // added\n            ...(dataFrom === DealTypeEnum.MFT &amp;&amp; {\n            mftType:\n                dealData?.mftType === MftType.MFTDeal\n                ? MftType.MFTDeal\n                : dealData?.mftType === MftType.MFTNostroDeal\n                    ? MftType.MFTNostroDeal\n                    : null,\n            }),\n        };\n    }\n\n    try {\n        // logger.info({ msg: \"SUBMIT Value: \", values, submitValues });\n        if (dataFrom === DealTypeEnum.FOREX) {\n            await postForexOperation(submitValues).unwrap();\n        } else if (dataFrom === DealTypeEnum.MMD) {\n            await postMoneyMarketOperation(submitValues).unwrap();\n        } else if (dataFrom === DealTypeEnum.MFT) {\n            await postMutualFundOperation(submitValues).unwrap();\n        } else if (dataFrom === DealTypeEnum.NDF) {\n            await postNDFOperation(submitValues).unwrap();\n        } else if (dataFrom === DealTypeEnum.FCD) {\n            await postFCDOperation(submitValues).unwrap();\n        }\n    }\n\n{/* postMutualFundOperation */}\n  const dealCancelSubmit = async (values) =&gt; {\n    await dealCancelForm.validateFields();\n\n    const submitValues = {\n      dealId: dealData?.id,\n      remarks: values.remarks,\n      // added\n      ...(dataFrom === DealTypeEnum.MFT &amp;&amp; {\n        mftType:\n          dealData?.mftType === MftType.MFTDeal\n            ? MftType.MFTDeal\n            : dealData?.mftType === MftType.MFTNostroDeal\n              ? MftType.MFTNostroDeal\n              : null,\n      }),\n    };\n\n    logger.info({ msg: \"DEAL CANCEL TEST XXX: \", submitValues });\n\n    try {\n      if (dataFrom === DealTypeEnum.FOREX) {\n        await postCancelForexOperation(submitValues).unwrap();\n      } else if (dataFrom === DealTypeEnum.MMD) {\n        await postCancelMMDOperation(submitValues).unwrap();\n      } else if (dataFrom === DealTypeEnum.MFT) {\n        await postCancelMutualFundOperation(submitValues).unwrap();\n      } else if (dataFrom === DealTypeEnum.NDF) {\n        await postCancelNdfOperation(submitValues).unwrap();\n      }\n      // message.success(\"Approved Successfully.\");\n    } catch (err) {\n      logger.error({ msg: \"Submit Error: \", err });\n    }\n</code></pre>"},{"location":"office/bank/basic/mft-api-changes/#form-submit","title":"FORM SUBMIT","text":"FORM POST<pre><code>// MFTForm.jsx\n\nconst onFinishSubmit = async (values) =&gt; {\n  // logger.info({ msg: \"SUBMIT: \", values });\n  setIsLoadingButton(true);\n  const dealDate = formatForexDealAndValueDate(values?.dealDate);\n  const valueDate = formatForexDealAndValueDate(values?.valueDate);\n  const dealTime = formatForexDealTime(values?.dealTime);\n\n  const transformValues = {\n    ...values,\n    dealDate,\n    valueDate,\n    dealTime,\n    ourDealerId,\n    dealAuthorizers: selectedApprovals,\n    dealVerifiers: selectedVerifier,\n    file: base64Files,\n    mftType: MftType.MFTNostroDeal,\n  };\n};\n</code></pre>"},{"location":"office/bank/basic/mft-api-changes/#comments","title":"COMMENTS","text":""},{"location":"office/bank/basic/mft-api-changes/#pagination-component","title":"Pagination COMPONENT","text":"PAGINATION"},{"location":"office/bank/basic/mft-api-changes/#api","title":"API","text":"<pre><code>getDealCommentsViaPagination: builder.query({\n  query: ({ dealId, dealType, pageSize, searchTerm, mftType }) =&gt; {\n    const queryParams = queryString.stringify({\n      dealId,\n      dealType,\n      pageSize,\n      ...(searchTerm &amp;&amp; { searchTerm }),\n      ...(typeof mftType !== \"undefined\" &amp;&amp; { mftType: mftType }),\n    });\n  })\n</code></pre>"},{"location":"office/bank/basic/mft-api-changes/#comments-component","title":"Comments COMPONENT","text":"DealsCommentField.jsx<pre><code>const onFinish = async (values) =&gt; {\n  await form.validateFields();\n  var submitValues = {\n    ...values,\n    dealId: dealId,\n    dealType: dealType,\n    // ADDED\n    ...(typeof mftType !== \"undefined\" &amp;&amp; { mftType: mftType }),\n  };\n};\n</code></pre>"},{"location":"office/bank/basic/mft-api-changes/#mft-nostro","title":"MFT Nostro","text":""},{"location":"office/bank/basic/mft-api-changes/#my-personal","title":"MY PERSONAL","text":"<p>\ud83d\udd01 Visual Diagram</p> <pre><code>User Sends Requests  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                 \u25bc\n                          [API Gateway]\n                           /         \\\n                          /           \\\n               Rate Limiting         Throttling\n                (Hard Limit)        (Traffic Control)\n                 \"Max 100/hr\"         \"Max 5/sec\"\n                    \u2502                     \u2502\n     If limit hit: 429 Error      If burst: Slow down / delay\n</code></pre> <p>Summary Table</p> Feature Rate Limiting Throttling Type Hard limit Flow control What happens? Requests blocked (429) Requests delayed or slowed Goal Prevent abuse Smooth out traffic bursts Use case Monthly/daily API quota Instantaneous burst handling <p>\ud83c\udd9a Throttle vs. Rate Limit: Major Differences</p> <p>The terms API throttling and rate limiting are closely related, but they have distinct meanings and serve different purposes in managing API traffic.</p> Feature Rate Limiting Throttling Definition Sets a fixed limit on how many requests a client can make in a given time period. Controls the speed or frequency of requests by delaying or rejecting excess ones. Purpose Prevent abuse and overuse of APIs by defining usage caps. Smooth out traffic spikes and protect backend resources. Behavior Blocks or rejects requests once the limit is hit. May delay or queue requests instead of rejecting them immediately. Implementation \"You can make 100 requests per hour.\" \"You can make 10 requests per second; extra requests will be delayed.\" Analogy Like a speed limit sign: don\u2019t exceed this number. Like a traffic light: controls how many cars go through at a time."},{"location":"office/bank/basic/mft-api-changes/#bank","title":"BANK","text":"<p>In the banking system\u2014especially in interbank communication and financial messaging \u2014 standardized message types are used to ensure secure, structured, and automated communication between banks, financial institutions, clearing houses, and central banks.</p> <p>Here\u2019s a breakdown of the main types of messages used in banking, especially in the context of <code>SWIFT</code>, <code>ISO 20022</code>, and <code>RTGS systems</code></p>"},{"location":"office/bank/basic/mft-api-changes/#1-swift-message-types-mt-messages","title":"\ud83e\uddfe 1. SWIFT Message Types (MT messages)","text":"<p>SWIFT (Society for Worldwide Interbank Financial Telecommunication) uses a standardized messaging system, identified by <code>MTxxx codes</code> (Message Type).</p> Message Type Purpose Example Code MT1xx Customer payments and cheques MT103 (Customer Transfer) MT2xx Financial institution transfers MT202 (Bank-to-bank transfer) MT3xx Treasury markets (forex, swaps, etc.) MT300 (Forex deal) MT4xx Collection and cash letters MT400 (Advice of Payment) MT5xx Securities markets MT540 (Trade Settlement) MT6xx Precious metals and commodities MT600 (Commodity Trade Confirmation) MT7xx Documentary credits (Trade Finance) MT700 (Letter of Credit) MT9xx Cash management and customer status MT940 (Account Statement)"},{"location":"office/bank/basic/mft-api-changes/#2-iso-20022-message-types-mx-messages","title":"\ud83c\udf10 2. ISO 20022 Message Types (MX messages)","text":"<p>A newer, XML-based messaging standard replacing MT in many systems (e.g. SEPA, SWIFT gpi, TARGET2).</p> Category Description Example Message pacs. Payments Clearing and Settlement <code>pacs.008</code> (Credit Transfer) pain. Payments Initiation (from customers) <code>pain.001</code> (Payment request) camt. Cash Management <code>camt.053</code> (Bank Statement) acmt. Account Management <code>acmt.023</code> (Account opening) semt. Securities Maintenance <code>semt.002</code> reda. Reference Data <code>reda.001</code>"},{"location":"office/bank/basic/mft-api-changes/#3-rtgs-specific-message-types-eg-nepal-india-etc","title":"\ud83d\udd01 3. RTGS-Specific Message Types (e.g., Nepal, India, etc.)","text":"<p>Real-Time Gross Settlement systems often use customized message formats or adapt from SWIFT/ISO 20022:</p> Type Usage Example (India\u2019s RTGS) Customer Payment Transfer from one customer to another NEFT/RTGS using <code>MT103</code> / <code>pacs.008</code> Interbank Transfer Between two banks <code>MT202</code> / <code>pacs.009</code> Acknowledgment / Response Confirm transaction Response messages like ACK, NACK, or status updates"},{"location":"office/bank/basic/mft-api-changes/#summary","title":"\ud83e\udde0 Summary","text":"System Standard Message Types Example SWIFT MT MT103, MT202, MT940 ISO 20022 MX (XML) pacs.008, pain.001, camt.053 RTGS Varies Often uses MT/ISO formats National Systems Custom or ISO-based e.g. ConnectIPS in Nepal, SEPA in Europe <p>If you want examples from a specific country's system (like Nepal\u2019s RTGS or India\u2019s NEFT/RTGS), I can provide localized message flow and samples too.</p>"},{"location":"office/bank/basic/mft-api-changes/#nepal","title":"NEPAL","text":"<p>In Nepal, banking systems use a combination of ISO 20022 message formats and custom integration messages within platforms like <code>connectRTGS</code> and <code>connectIPS/NPI</code>. Here's a detailed breakdown:</p> <ul> <li><code>connectRTGS</code> uses ISO 20022 for bank-to-bank, high-value RTGS messages.</li> <li><code>connectIPS/NPI</code> employs JSON-wrapped ISO messages for retail, batch, and scheduled transfers.</li> <li>Status tracking is detailed and structured (statuses like <code>ACSP</code>, <code>RJCT</code>, etc.).</li> </ul>"},{"location":"office/bank/basic/mft-api-changes/#question-different-file","title":"QUESTION DIFFERENT FILE","text":"<p>what i need to know before building banking web application for treasury department</p> <p>Building a banking web application for a Treasury Department is a high-stakes, security-critical project. Treasury operations involve cash management, fund transfers, liquidity planning, investments, and risk control, often at institutional or government level. Here's what you must know before you start:</p> <p>\u2705 1. Understand Treasury Functions</p> <p>Start by understanding what your Treasury Department needs. Common functions include:</p> Treasury Function Description Cash Management Monitoring balances, liquidity, fund positioning Payments &amp; Transfers Initiating interbank transfers (e.g., via RTGS, NEFT) Investment Tracking Managing term deposits, government bonds, etc. FX and Hedging Handling foreign exchange and derivatives (if applicable) Risk Management Tracking exposure to market, credit, and liquidity risk Reporting Real-time dashboards, reconciliation, audit trails <p>\ud83d\udd10 2. Security &amp; Compliance Requirements</p> <p>Treasury applications handle large volumes of money, so:</p> <p>\ud83d\udd12 Implement strong security controls:</p> <ul> <li>Multi-factor authentication (MFA)</li> <li>End-to-end encryption (TLS 1.2+)</li> <li>Role-based access control (RBAC)</li> <li>Audit logging of all transactions</li> </ul> <p>\ud83d\udcdc Ensure regulatory compliance:</p> <ul> <li>AML/CFT (Anti-Money Laundering / Counter Financing of Terrorism)</li> <li>KYC (Know Your Customer)</li> <li>Local central bank policies (e.g., NRB in Nepal)</li> <li>Audit &amp; reporting standards (SOX, IFRS)</li> </ul> <p>\ud83c\udfe6 3. Banking &amp; Payment System Integrations</p> <p>You\u2019ll need to integrate with systems like:</p> System Purpose RTGS High-value real-time transfers NCHL / ConnectRTGS Nepal\u2019s payment infrastructure SWIFT / ISO 20022 For international/multi-bank settlements Core Banking System To access account balances, ledger, etc. Treasury Management System (TMS) Optional \u2014 if automating investments/liquidity <p>\u2699\ufe0f 4. Architecture &amp; Technical Decisions</p> <p>\ud83d\udcbb Core Tech Stack:</p> <ul> <li>Frontend: React.js, Angular, or Vue (with strong UI/UX for finance)</li> <li>Backend: Node.js / .NET / Java Spring Boot</li> <li>Database: PostgreSQL / Oracle / MS SQL (with encryption at rest)</li> <li>APIs: REST + secure middleware (SSL, HMAC, JWT)</li> <li>Message Standards: ISO 20022 (pacs.008, camt.053), MT formats (if SWIFT)</li> </ul> <p>\ud83e\uddf1 Architectural Musts:</p> <ul> <li>Microservices (for scalability and fault isolation)</li> <li>Queue systems (e.g., Kafka or RabbitMQ) for async transaction handling</li> <li>Real-time dashboards (e.g., with WebSockets or SignalR)</li> <li>High Availability and Disaster Recovery (HA/DR)</li> <li>Load balancing and failover mechanisms</li> </ul> <p>\ud83d\udcca 5. Key Modules You May Need</p> Module Name Key Functions User &amp; Role Management Access control, audit logs Account Management Linking bank accounts, balances Payment Initiation Domestic (RTGS/NCHL), International (SWIFT) Fund Positioning Cash projections, inflow/outflow tracking Reconciliation Match internal vs bank statements (camt.053) Reports &amp; Audits Transaction logs, compliance reports Alerts &amp; Notifications For approvals, settlement failures, etc. <p>\ud83d\udd01 6. Workflow &amp; Authorization Logic</p> <p>Implement maker-checker-approver flow:</p> <ul> <li>\ud83e\uddd1\u200d\ud83d\udcbb Maker: Initiates transaction</li> <li>\ud83d\udc68\u200d\ud83d\udcbc Checker: Verifies</li> <li>\ud83e\uddd1\u200d\u2696\ufe0f Approver: Authorizes and submits</li> </ul> <p>This is mandatory in treasury and bank-grade apps.</p> <p>\ud83e\uddea 7. Testing &amp; Environment Needs</p> <ul> <li>\u2705 Unit, integration, and UAT environments</li> <li>\ud83d\udd04 Load testing (simulate real-time fund transfers)</li> <li>\ud83d\udd10 Security testing (penetration tests, OWASP top 10)</li> <li>\ud83d\udccb Audit trail verification and tamper detection</li> </ul> <p>\ud83c\udf10 8. Knowledge of Local Context (Nepal)</p> <p>Familiarity with:</p> <ul> <li>Nepal Rastra Bank regulations</li> <li><code>connectRTGS</code> and <code>NCHL/NPI</code> APIs</li> <li>Local holidays and cut-off times for settlement</li> <li>Reporting formats required by NRB</li> </ul> <p>\u2705 Final Tip</p> <p>Talk to treasury end-users (accountants, auditors, treasury heads). Their real-world processes will shape your design decisions more than any documentation.</p> <p>\ud83c\udfd7\ufe0f Sample Architecture Diagram for Treasury Web Application</p> <p>Below is a text-based diagram of a secure and modular architecture for a Treasury banking system. (I can also generate a visual version if needed.)</p> <pre><code>                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502   Treasury Users      \u2502\n                        \u2502 (Maker/Checker/Admin) \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                          [Web Frontend]\n                         React / Angular UI\n                                 \u2502\n                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502       API Gateway     \u2502\n                      \u2502  (HTTPS, Auth, Audit) \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                        \u2502                         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User &amp; Auth     \u2502   \u2502 Treasury Engine    \u2502    \u2502 Notification      \u2502\n\u2502 - Login / MFA   \u2502   \u2502 - RTGS Initiation  \u2502    \u2502 - Email/SMS/Alerts\u2502\n\u2502 - Roles / ACL   \u2502   \u2502 - Fund Transfers   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502 - Cash Flow Report \u2502\n                      \u2502 - Reconciliation   \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                        [Middleware Services]\n                JWT Auth, Logging, Validation Layer\n                                \u2502\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                        \u2502                        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Core Banking\u2502         \u2502 connectRTGS \u2502         \u2502  Database Layer \u2502\n\u2502 Integration \u2502         \u2502 / NCHL APIs \u2502         \u2502 PostgreSQL / SQL\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u2705 Feature Checklist Template (Excel-style layout)</p> Category Feature Description Priority Done User Management Role-based access (Maker, Checker, Admin) High \u2b1c MFA &amp; login auditing High \u2b1c Banking Ops Fund transfer via connectRTGS/NCHL High \u2b1c Account linking &amp; verification Medium \u2b1c Transaction search &amp; filtering High \u2b1c Reconciliation Import camt.053 bank statements High \u2b1c Match internal vs external transactions High \u2b1c Reporting Daily cash flow report High \u2b1c Audit log export (CSV/PDF) High \u2b1c Security TLS 1.2+, HMAC token validation Critical \u2b1c IP whitelisting, force password rotation Medium \u2b1c Approvals Maker \u2192 Checker \u2192 Approver flow High \u2b1c Monitoring Real-time dashboard for fund status Medium \u2b1c Failure alerts to ops/admins Medium \u2b1c"},{"location":"office/bank/basic/notification/","title":"CONSTANT","text":""},{"location":"office/bank/basic/notification/#avoid-repeated-code","title":"Avoid Repeated Code","text":""},{"location":"office/bank/basic/notification/#step-1-create-enums-for-type-and-placement","title":"Step 1: Create Enums for Type and Placement","text":"<pre><code>// notification.constants.js (or .ts if using TypeScript)\n\nexport const NotificationType = {\n  SUCCESS: \"success\",\n  ERROR: \"error\",\n  INFO: \"info\",\n  WARNING: \"warning\",\n} as const;\n\nexport const NotificationPlacement = {\n  TOP_LEFT: \"topLeft\",\n  TOP_RIGHT: \"topRight\",\n  BOTTOM_LEFT: \"bottomLeft\",\n  BOTTOM_RIGHT: \"bottomRight\",\n} as const;\n</code></pre> <pre><code>// notification.constants.js\n\nexport const NotificationTypeEnum = {\n  SUCCESS: \"success\",\n  ERROR: \"error\",\n  INFO: \"info\",\n  WARNING: \"warning\",\n};\n\nexport const NotificationPlacementEnum = {\n  TOP_LEFT: \"topLeft\",\n  TOP_RIGHT: \"topRight\",\n  BOTTOM_LEFT: \"bottomLeft\",\n  BOTTOM_RIGHT: \"bottomRight\",\n};\n</code></pre>"},{"location":"office/bank/basic/notification/#step-2-use-enums-in-notify-function","title":"Step 2: Use Enums in notify Function","text":"<p>Update your <code>notify</code> function like this:</p> <pre><code>import { notification, message } from \"antd\";\nimport {\n  NotificationType,\n  NotificationPlacement,\n} from \"./notification.constants\"; // adjust path\n\nnotification.config({\n  placement: NotificationPlacement.TOP_RIGHT,\n  duration: 3,\n});\n\nexport const notify = (\n  type = NotificationType.INFO,\n  placement = NotificationPlacement.TOP_RIGHT,\n  message = \"Notification\",\n  description = \"No details provided.\",\n  duration = 3\n) =&gt; {\n  const validTypes = Object.values(NotificationType);\n\n  if (!validTypes.includes(type)) {\n    console.error(\n      `Invalid notification type: \"${type}\". Valid types are: ${validTypes.join(\n        \", \"\n      )}`\n    );\n    return;\n  }\n\n  notification[type]({\n    placement,\n    message,\n    description,\n    duration,\n  });\n};\n\n// or\n\n//\u2705 Solution: Fallback Inside the Function Body\n//Update your function to explicitly check for invalid or falsy placement:\n\nexport const notify = (\n  type = NotificationType.INFO,\n  placement,\n  message = \"Notification\",\n  description = \"No details provided.\",\n  duration\n) =&gt; {\n  const validTypes = [\"success\", \"error\", \"info\", \"warning\"];\n\n  if (!validTypes.includes(type)) {\n    console.error(\n      `Invalid notification type: \"${type}\". Valid types are: ${validTypes.join(\n        \", \"\n      )}`\n    );\n    return;\n  }\n\n  // Fallback if placement is null or undefined\n  const resolvedPlacement = placement || NotificationPlacement.BOTTOM_LEFT;\n\n  notification[type]({\n    placement: resolvedPlacement,\n    message,\n    description,\n    duration,\n  });\n};\n</code></pre>"},{"location":"office/bank/basic/notification/#bonus-typescript-enums-alternative","title":"Bonus (TypeScript Enums Alternative)","text":"<p>If you're using TypeScript, you could go a bit stricter:</p> <pre><code>export enum NotificationTypeEnum {\n  SUCCESS = \"success\",\n  ERROR = \"error\",\n  INFO = \"info\",\n  WARNING = \"warning\",\n}\n\nexport enum NotificationPlacementEnum {\n  TOP_LEFT = \"topLeft\",\n  TOP_RIGHT = \"topRight\",\n  BOTTOM_LEFT = \"bottomLeft\",\n  BOTTOM_RIGHT = \"bottomRight\",\n}\n</code></pre>"},{"location":"office/bank/basic/notification/#updated-in-codebase","title":"Updated in codebase","text":"<pre><code>import {\n  NotificationType,\n  NotificationPlacement,\n  NotificationDuration,\n} from \"@shared/utils/notification\";\n\nnotify(\n  NotificationType.SUCCESS,\n  NotificationPlacement.BOTTOM_RIGHT,\n  \"Success\",\n  \"Province was successfully submitted.\",\n  NotificationDuration.DEFAULT\n);\n\n// or\n\nnotify(\n  NotificationType.SUCCESS,\n  null,\n  \"Success\",\n  \"Province was successfully submitted.\",\n  NotificationDuration.DEFAULT\n);\n\n// SUCCESS\nnotify(\n    NotificationType.SUCCESS,\n    null,\n    ...\n)\n\n// ERROR\nnotify(\n    NotificationType.ERROR,\n    null,\n    ...\n)\n</code></pre> <pre><code>All the transaction should immediately display on the screen :arrow_right: Bishow 24 ( Websocket )\n\nCurrency Rate Request ma Rate Uploads garda rate ko side ma MArgin  and Trading Display hunu paryo jasma, Margin case (Mid rate of currency -rate uploaded by user{buyt case: MId rate vanda buy rate thorai vaye PRofit , or Mid rate vanda buy rate increase vaye loss} ) in Trading CAse(Difference rate*Amount) trading loss or profit will be calculated:arrow_right: Bishow 24\n\nAccount should logout inn every 15 min :arrow_right: Bishow 24\n(edited)\n</code></pre>"},{"location":"office/bank/basic/profile-picture/","title":"Profile Picture","text":""},{"location":"office/bank/basic/profile-picture/#profile-pic","title":"Profile PIC","text":"<pre><code>    getUserProfilePicture: builder.query({\n      query: ({ userId }) =&gt; ({\n        url: `FileStorages/GetUserProfilePicture/${userId}`,\n        method: HTTP_METHODS.GET,\n        // added responseType and headers\n        responseType: \"blob\",\n        headers: {\n          Accept: \"image/jpeg\",\n        },\n        // added this also\n        responseHandler: async (response) =&gt; {\n          const blob = await response.blob();\n          return blob;\n        },\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n          // const { data } = await queryFulfilled;\n          // console.log('Query result:', data);\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during profile picture retrieval.\",\n            1\n          );\n        }\n      },\n    }),\n</code></pre> axiosBaseQury.js<pre><code>export const axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  // added responseType\n  async ({ url, method, meta, data, params, headers, responseType }, api) =&gt; {\n    try {\n      // logger.info({ msg: \"VALUE: \", baseUrl });\n      const result = await axiosInstance.base({\n        url: baseUrl + url,\n        method,\n        meta,\n        data,\n        params,\n        headers,\n        // added\n        responseType: responseType || \"json\",\n      });\n\n      if (!result || !result.data) {\n        throw new Error(\"Invalid response structure from the server\");\n      }\n\n      return { data: result.data, meta: { ...meta, method } };\n    }\n  }\n</code></pre> <pre><code>useEffect(() =&gt; {\n  if (userProfilePictureData instanceof Blob) {\n    const objectUrl = URL.createObjectURL(userProfilePictureData);\n    setNewImageFile(objectUrl);\n    console.log(\"objectUrl: \", objectUrl);\n    return () =&gt; URL.revokeObjectURL(objectUrl);\n  }\n}, [userProfilePictureData]);\n\n&lt;Image\n  src={newImageFile || \"\"}\n  preview={false}\n  width={120}\n  height={120}\n  style={{ borderRadius: \"50%\", objectFit: \"cover\" }}\n  alt=\"Profile\"\n/&gt;;\n</code></pre>"},{"location":"office/bank/basic/profile-picture/#hooks","title":"Hooks","text":"<p>Sure! I will help you convert this code into a custom hook that handles fetching the profile picture with a Bearer token.</p> <p>This custom hook will:</p> <ul> <li>Handle the image fetch logic with <code>axios</code>.</li> <li>Manage the image URL (<code>objectURL</code>) and loading state.</li> <li>Clean up the image URL when the component is unmounted.</li> </ul>"},{"location":"office/bank/basic/profile-picture/#create-custom-hookuseprofilepicturejs","title":"\u2705 Create Custom Hook:<code>useProfilePicture.js</code>","text":"<p>Here's how we can convert the code into a custom hook:</p> useProfilePicture.js<pre><code>// useProfilePicture.js\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst useProfilePicture = (userId, token) =&gt; {\n  const [imgUrl, setImgUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    if (!userId || !token) return; // If userId or token is missing, don't fetch\n\n    const fetchProfilePicture = async () =&gt; {\n      setLoading(true);\n      setError(null); // Reset error state on new request\n\n      try {\n        const response = await axios.get(\n          `https://your-api.com/FileStorages/GetUserProfilePicture/${userId}`,\n          {\n            responseType: \"blob\",\n            headers: {\n              Accept: \"image/jpeg\",\n              Authorization: `Bearer ${token}`, // Send Bearer token here\n            },\n            withCredentials: true, // Optional, use if needed for cookies/auth\n          }\n        );\n\n        const blob = response.data;\n        const objectUrl = URL.createObjectURL(blob); // Create an object URL for the Blob\n        setImgUrl(objectUrl); // Store the URL in state\n      } catch (error) {\n        console.error(\"\u274c Failed to fetch image\", error);\n        setError(\"Failed to load profile picture\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProfilePicture();\n\n    // Clean up the object URL on unmount\n    return () =&gt; {\n      if (imgUrl) {\n        URL.revokeObjectURL(imgUrl);\n      }\n    };\n  }, [userId, token]); // Re-run effect if userId or token changes\n\n  return { imgUrl, loading, error };\n};\n\nexport default useProfilePicture;\n</code></pre>"},{"location":"office/bank/basic/profile-picture/#how-to-use-this-custom-hook-in-a-component","title":"\u2705 How to Use This Custom Hook in a Component","text":"<p>Now, you can use this custom hook in your React component to fetch and display the user's profile picture.</p> <p>Here's how you can implement it:</p> <pre><code>// ProfilePicture.jsx\nimport React from \"react\";\nimport { Image, Spin, Alert } from \"antd\";\nimport useProfilePicture from \"./useProfilePicture\";\n\nconst ProfilePicture = ({ userId, token }) =&gt; {\n  const { imgUrl, loading, error } = useProfilePicture(userId, token);\n\n  return (\n    &lt;div&gt;\n      {loading &amp;&amp; &lt;Spin tip=\"Loading profile picture...\" /&gt;}\n      {error &amp;&amp; &lt;Alert message={error} type=\"error\" /&gt;}\n      {imgUrl &amp;&amp; (\n        &lt;Image\n          src={imgUrl}\n          width={150}\n          height={150}\n          alt=\"User Profile\"\n          style={{ borderRadius: \"8px\" }}\n        /&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default ProfilePicture;\n</code></pre> \u2705 Key Points <ul> <li>Custom Hook: <code>useProfilePicture</code> encapsulates the logic of fetching the profile picture, handling loading, and cleaning up the URL.</li> <li>Return Value: The hook returns the <code>imgUrl</code>, <code>loading</code>, and <code>error</code> states, which the component can use.</li> <li>Reactivity: If the <code>userId</code> or <code>token</code> changes, the hook will automatically refetch the profile picture.</li> </ul> \u2705 Example Usage:<pre><code>// In your parent component\n&lt;ProfilePicture userId=\"your-user-id-here\" token=\"your-bearer-token-here\" /&gt;\n</code></pre> \u2705 Benefits of Using This Custom Hook: <ul> <li> <p>Separation of Concerns: The component is cleaner and focused on rendering, while the custom hook handles all the logic of fetching the image.</p> </li> <li> <p>Reusability: You can reuse this hook in other components where you need to fetch a user's profile picture, and you can pass different <code>userId</code> and <code>token</code>.</p> </li> <li> <p>Simplified Error Handling: It\u2019s easier to handle loading and error states without repeating the same logic in multiple components.</p> </li> </ul> <pre><code>&lt;Image\n  src={imgUrl}\n  width={150}\n  height={150}\n  alt=\"User Profile\"\n  style={{ borderRadius: \"8px\" }}\n  fallback=\"https://ui-avatars.com/api/?name=No+Image\"\n/&gt;\n</code></pre> <pre><code>import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport logger from \"@shared/utils/logger\";\nimport { CONFIG } from \"@shared/utils/config\";\n\nconst useProfilePicture = () =&gt; {\n  const userId = useSelector((state) =&gt; state.auth.appUserId);\n  const token = useSelector((state) =&gt; state.auth.token);\n\n  const [imgUrl, setImgUrl] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    if (!userId || !token) return;\n\n    const localStorageKey = `profilePic_${userId}`;\n    const timestampKey = `${localStorageKey}_timestamp`;\n    const cacheExpiryMinutes = 60; // You can change this\n\n    const loadCachedImage = () =&gt; {\n      const cached = localStorage.getItem(localStorageKey);\n      const timestamp = localStorage.getItem(timestampKey);\n\n      if (cached &amp;&amp; timestamp) {\n        const age = (Date.now() - parseInt(timestamp, 10)) / (1000 * 60); // in minutes\n        if (age &lt; cacheExpiryMinutes) {\n          setImgUrl(cached);\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    const fetchProfilePicture = async () =&gt; {\n      setLoading(true);\n      setError(null);\n\n      try {\n        console.log(\"CALLED API\");\n\n        const response = await axios.get(\n          `${CONFIG?.API_BASE_URL}FileStorages/GetUserProfilePicture/${userId}`,\n          {\n            responseType: \"blob\",\n            headers: {\n              Accept: \"image/jpeg\",\n              Authorization: `Bearer ${token}`,\n            },\n            withCredentials: true,\n          }\n        );\n\n        const blob = response?.data;\n        const reader = new FileReader();\n\n        reader.onloadend = () =&gt; {\n          const base64data = reader.result;\n          localStorage.setItem(localStorageKey, base64data);\n          localStorage.setItem(timestampKey, Date.now().toString());\n          setImgUrl(base64data);\n        };\n\n        reader.readAsDataURL(blob);\n      } catch (error) {\n        logger.error({ msg: \"Failed to fetch image: \", error });\n        setError(\"Failed to load profile picture\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const alreadyCached = loadCachedImage();\n    if (!alreadyCached) {\n      fetchProfilePicture();\n    }\n  }, [userId, token]);\n\n  return { imgUrl, loading, error };\n};\n\nexport default useProfilePicture;\n</code></pre>"},{"location":"office/bank/basic/react-player/","title":"React Player","text":""},{"location":"office/bank/basic/react-player/#react-player","title":"React Player","text":"<pre><code>pnpm add react-player antd\n</code></pre> <pre><code>import React, { useState } from \"react\";\nimport { Modal, Space } from \"antd\";\nimport { EditTwoTone } from \"@ant-design/icons\";\nimport ReactPlayer from \"react-player\";\n\nconst VideoTable = ({ data }) =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentVideoUrl, setCurrentVideoUrl] = useState(\"\");\n\n  const onViewClick = (record) =&gt; {\n    setCurrentVideoUrl(record.videoUrl); // Assuming video URL is in the record\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () =&gt; {\n    setIsModalOpen(false);\n    setCurrentVideoUrl(\"\");\n  };\n\n  const columns = [\n    {\n      title: \"Action\",\n      width: 100,\n      render: (_, record) =&gt; (\n        &lt;Space&gt;\n          &lt;EditTwoTone onClick={() =&gt; onViewClick(record)} /&gt;\n        &lt;/Space&gt;\n      ),\n    },\n  ];\n\n  return (\n    &lt;&gt;\n      {/* Your table goes here, passing `columns` and `data` */}\n      &lt;Modal\n        open={isModalOpen}\n        onCancel={handleModalClose}\n        footer={null}\n        width={800}\n      &gt;\n        {currentVideoUrl &amp;&amp; (\n          &lt;ReactPlayer url={currentVideoUrl} controls width=\"100%\" /&gt;\n        )}\n      &lt;/Modal&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default VideoTable;\n</code></pre> <pre><code>const data = [\n  {\n    key: \"1\",\n    name: \"Video 1\",\n    videoUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n  },\n  // more rows...\n];\n</code></pre> <pre><code>npm install react-youtube\n# or\nyarn add react-youtube\n</code></pre>"},{"location":"office/bank/basic/react-player/#nullish-coalescing-operator-logical-or-operator-logical-and-operator","title":"Nullish Coalescing Operator (<code>??</code>), Logical OR Operator (<code>||</code>), Logical AND Operator (<code>&amp;&amp;</code>)","text":"<p>Nullish Coalescing Operator (<code>??</code>)</p> <ul> <li>Returns the right-hand operand only if the left-hand operand is null or undefined.</li> <li>If the left operand is any other value\u2014including falsy values like <code>0</code>, <code>false</code>, or an empty string <code>\"\"</code>\u2014it returns the left operand.</li> <li>It is used to provide default values when a variable might be <code>null</code> or <code>undefined</code> without mistakenly overriding valid falsy values.</li> </ul> <pre><code>import { createApi } from \"@reduxjs/toolkit/query\";\n\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport logger from \"@shared/utils/logger\";\n\nexport const tutorialApi = createApi({\n  reducerPath: \"tutorialApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"tutorial\"],\n  endpoints: (builder) =&gt; ({\n    getTutorialPagination: builder.query({}),\n    putTutorial: builder.mutation({}),\n    deleteTutorial: builder.mutation({}),\n    getTuturialTagListing: builder.query({}),\n    putTutorialTag: builder.mutation({}),\n    deleteTutorialTag: builder.mutation({}),\n  }),\n});\n\nexport const {\n  useGetTutorialPaginationQuery,\n  usePutTutorialMuation,\n  useDeleteTutorialMutation,\n  useGetTuturialTagListingQuery,\n  usePutTutorialTagMutation,\n  useDeleteTutorialTagMutation,\n} = tutorialApi;\n</code></pre>"},{"location":"office/bank/basic/react-player/#theory","title":"Theory","text":""},{"location":"office/bank/basic/react-player/#other","title":"Other","text":"<p>To reset <code>setSelectedTutorialCategory</code> to <code>null</code> after clearing the selection in your Ant Design <code>&lt;Select /&gt;</code> component, you can use the <code>onClear</code> prop.</p> <p>\u2705 Solution:</p> <p>Update your <code>&lt;Select /&gt;</code> like this:</p> <pre><code>&lt;Select\n  showSearch\n  allowClear\n  placeholder=\"Select Category\"\n  onChange={(value) =&gt; {\n    logger.info({ msg: \"Category Select: \", value });\n    setSelectedTutorialCategory(value);\n  }}\n  onClear={() =&gt; {\n    logger.info({ msg: \"Category Cleared\" });\n    setSelectedTutorialCategory(null);\n  }}\n  filterOption={(input, option) =&gt;\n    option.children.toLowerCase().includes(input.toLowerCase())\n  }\n&gt;\n  {tutorialCategoryListing?.map((item) =&gt; (\n    &lt;Select.Option key={item.id} value={item.id}&gt;\n      {item?.typeName}\n    &lt;/Select.Option&gt;\n  ))}\n&lt;/Select&gt;\n</code></pre> <p>\ud83d\udd0d Explanation:</p> <ul> <li><code>allowClear</code> enables the clear (\u00d7) icon.</li> <li><code>onClear</code> is triggered when the user clicks the clear icon.</li> <li>We set the selected value to <code>null</code> in <code>onClear</code>.</li> </ul> <pre><code>onError={() =&gt; {\n    setIsLoadingVideoPlayer(false);\n    Modal.error({\n        title: \"Video Error\",\n        content: \"Unable to load this video.\",\n    });\n}}\n</code></pre>"},{"location":"office/bank/basic/react-player/#reference","title":"Reference","text":"<ul> <li>NPM</li> <li>Issue: ReactPlayer.canPlay() doesnt work on blobs </li> <li>How to Implement Custom Controls with React-Player</li> <li>Top 7 Examples of \"react-player in functional component\" in JavaScript</li> <li> <p>Stackoverflow: how to make only one video play at a time using react player</p> </li> <li> <p>Perplexity: nulllishing</p> </li> </ul>"},{"location":"office/bank/basic/redux-async/","title":"SYNC","text":""},{"location":"office/bank/basic/redux-async/#redux-storage-async","title":"Redux Storage <code>async</code>","text":"<p>Redux Persist does not sync state across different browser tabs or browser windows by default. It is designed to persist your Redux state to storage (like <code>localStorage</code>, <code>sessionStorage</code>, or other engines), so that when a page is reloaded or reopened in the same tab, the Redux state is rehydrated from storage.</p> Why it doesn't sync across tabs <p>Each tab runs in its own JS context, so changes made to Redux state in one tab won't automatically propagate to other open tabs. Even though Redux Persist stores data in <code>localStorage</code>, Redux itself doesn't know when that data changes elsewhere.</p>"},{"location":"office/bank/basic/redux-async/#how-to-sync-redux-across-tabs","title":"How to sync Redux across tabs","text":"<p>To enable cross-tab syncing, you can use:</p>"},{"location":"office/bank/basic/redux-async/#option-1-use-the-storage-event","title":"Option 1: Use the <code>storage</code> event","text":"<p>Browsers emit a <code>storage</code> event when <code>localStorage</code> is modified in another tab.</p> <p>You can use this to manually update the Redux state:</p> <pre><code>window.addEventListener(\"storage\", (event) =&gt; {\n  if (event.key === \"persist:root\") {\n    // Optional: debounce this if needed\n    const newState = JSON.parse(event.newValue);\n    store.dispatch({\n      type: \"LOAD_EXTERNAL_STATE\",\n      payload: newState,\n    });\n  }\n});\n</code></pre> <p>You'd also need a reducer to handle that <code>LOAD_EXTERNAL_STATE</code> action and replace your state.</p>"},{"location":"office/bank/basic/redux-async/#option-2-use-libraries-for-tab-synchronization","title":"Option 2: Use libraries for tab synchronization","text":"<p>There are libraries that help with this:</p> <ul> <li>redux-state-sync</li> <li>broadcast-channel</li> </ul> <p>These tools allow Redux actions or state to be broadcast across tabs using either <code>localStorage</code> or newer APIs like <code>BroadcastChannel</code>.</p>"},{"location":"office/bank/basic/redux-async/#summary","title":"Summary","text":"Feature Redux Persist Redux Sync (manually or with lib) Persists state on reload \u2705 \u2705 Syncs across browser tabs \u274c \u2705 (with extra setup) Works out of the box \u2705 \u274c"},{"location":"office/bank/basic/redux-async/#example","title":"Example","text":""},{"location":"office/bank/basic/redux-async/#1-project-setup","title":"1. Project Setup","text":"bash<pre><code>npm install @reduxjs/toolkit react-redux redux-persist redux-state-sync\n</code></pre>"},{"location":"office/bank/basic/redux-async/#2-srcstorejs","title":"2. <code>src/store.js</code>","text":"src/store.js<pre><code>import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport {\n  createStateSyncMiddleware,\n  initMessageListener,\n} from \"redux-state-sync\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport yourSlice from \"./slices/yourSlice\";\n\nconst rootReducer = combineReducers({\n  yourSlice,\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"yourSlice\"],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst syncConfig = {\n  whitelist: [\"yourSlice/setValue\"],\n};\n\nconst middleware = (getDefaultMiddleware) =&gt;\n  getDefaultMiddleware({ serializableCheck: false }).concat(\n    createStateSyncMiddleware(syncConfig)\n  );\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware,\n});\n\ninitMessageListener(store);\n\nexport const persistor = persistStore(store);\n</code></pre> <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: \"\",\n};\n\nconst yourSlice = createSlice({\n  name: \"yourSlice\",\n  initialState,\n  reducers: {\n    setValue: (state, action) =&gt; {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setValue } = yourSlice.actions;\nexport default yourSlice.reducer;\n</code></pre>"},{"location":"office/bank/basic/redux-async/#3-srcslicesyourslicejs","title":"3. <code>src/slices/yourSlice.js</code>","text":"<pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  value: \"\",\n};\n\nconst yourSlice = createSlice({\n  name: \"yourSlice\",\n  initialState,\n  reducers: {\n    setValue: (state, action) =&gt; {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { setValue } = yourSlice.actions;\nexport default yourSlice.reducer;\n</code></pre>"},{"location":"office/bank/basic/redux-async/#4-srcindexjs-react-app-entry","title":"4. src/index.js (React App Entry)","text":"<pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport App from \"./App\";\nimport { store, persistor } from \"./store\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  &lt;Provider store={store}&gt;\n    &lt;PersistGate loading={null} persistor={persistor}&gt;\n      &lt;App /&gt;\n    &lt;/PersistGate&gt;\n  &lt;/Provider&gt;\n);\n</code></pre>"},{"location":"office/bank/basic/redux-async/#5-srcappjs-demo-ui","title":"5. src/App.js (Demo UI)","text":"<pre><code>import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setValue } from \"./slices/yourSlice\";\n\nfunction App() {\n  const value = useSelector((state) =&gt; state.yourSlice.value);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) =&gt; dispatch(setValue(e.target.value));\n\n  return (\n    &lt;div style={{ padding: 20 }}&gt;\n      &lt;h1&gt;Cross\u2011Tab Sync Demo&lt;/h1&gt;\n      &lt;input\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        placeholder=\"Type something\"\n        style={{ padding: 8, width: 300, fontSize: 16 }}\n      /&gt;\n      &lt;p style={{ marginTop: 20 }}&gt;\n        Current value: &lt;strong&gt;{value}&lt;/strong&gt;\n      &lt;/p&gt;\n      &lt;p&gt;Try opening another tab and typing too\u2014updates sync automatically!&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"office/bank/basic/redux-async/#how-it-works","title":"How It Works","text":"Feature Description redux-persist Saves <code>yourSlice.value</code> to <code>localStorage</code> under the key <code>persist:root</code>. redux-state-sync Broadcasts <code>yourSlice/setValue</code> actions across tabs using <code>storage</code> or <code>BroadcastChannel</code>. initMessageListener Listens in other tabs and dispatches the action to update their Redux store."},{"location":"office/bank/basic/redux-async/#testing","title":"Testing","text":"<ol> <li>Run the app (e.g., <code>npm start</code>).</li> <li>Open it in two browser tabs.</li> <li>Type into the input in one tab.</li> <li>The other tab will update instantly \u2014 synchronized across both.</li> </ol>"},{"location":"office/bank/basic/transformResponse/","title":"transformResponse","text":""},{"location":"office/bank/basic/transformResponse/#transformresponse","title":"transformResponse","text":"<pre><code>    getMMDExchangeRate: builder.query({\n      query: ({ currencyId, counterpartyId }) =&gt; {\n        const queryParams = queryString.stringify({\n          currencyId,\n          counterpartyId,\n        });\n\n        return {\n          url: `MoneyMarketDeal/CounterPartyWithCurrencyPairExchangeRate?${queryParams}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n\n      /********************************/\n      // UPDATED\n      transformResponse: (response) =&gt; {\n        try {\n          const dealAmountLimitNPR = response?.dealAmountLimitNpr;\n          const outstandingAmountLimitNPR =\n            response?.outstandingDealAmountLimitNpr;\n          const actualAmountLimitNpr = Number(\n            Big(dealAmountLimitNPR).minus(Big(outstandingAmountLimitNPR))\n          );\n\n          const transformValues = {\n            ...response,\n            actualAmountLimitNpr,\n          };\n\n          return transformValues;\n        } catch (err) {\n          logger.error({ msg: \"Error\", err });\n        }\n      },\n      /*********************************/\n      keepUnusedDataFor: 0,\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Currencypair Exchange.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n</code></pre>"},{"location":"office/bank/basic/transformResponse/#tips","title":"Tips","text":""},{"location":"office/bank/basic/transformResponse/#updated-transformresponse-with-faker-randomization","title":"Updated transformResponse with Faker Randomization:**","text":"<pre><code>import { faker } from '@faker-js/faker';\n\ngetByIdTutorial: builder.query({\n  query: ({ id }) =&gt; ({\n    url: `Tutorial/${id}`,\n    method: HTTP_METHODS.GET,\n  }),\n  transformResponse: (response) =&gt; {\n    const possibleUrls = [\n      \"https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf\",\n      \"https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\",\n    ];\n\n    // Get a random number of files: 0, 1, or 2\n    const count = faker.number.int({ min: 0, max: possibleUrls.length });\n\n    // Shuffle and pick the first `count` items\n    const shuffled = faker.helpers.shuffle(possibleUrls);\n    const selectedUrls = shuffled.slice(0, count);\n\n    const files = selectedUrls.map((url) =&gt; ({\n      url,\n      name: url.split(\"/\").pop(),\n    }));\n\n    return {\n      ...response,\n      file: files,\n    };\n  },\n}),\n</code></pre> \ud83d\udd0d Explanation: <ul> <li><code>faker.number.int({ min: 0, max: 2 })</code> randomly returns 0, 1, or 2.</li> <li><code>faker.helpers.shuffle()</code> ensures random selection.</li> <li>The final response gets 0\u20132 file objects each time.</li> </ul>"},{"location":"office/bank/basic/upload-images-type/","title":"Upload Images Validation","text":""},{"location":"office/bank/basic/upload-images-type/#upload-images-type","title":"Upload Images Type","text":"Question <pre><code>&lt;Upload\n    listType=\"picture\"\n    accept=\"image/*\"\n    maxCount={1}\n    beforeUpload={() =&gt; false}\n    fileList={fileList}\n    onChange={onHandleChange}\n&gt;\n</code></pre> <ul> <li>accept <code>png</code> and <code>jpg</code>  but it acceps <code>gif</code> also</li> </ul>"},{"location":"office/bank/basic/upload-images-type/#scenario","title":"Scenario","text":"<p>You're encountering an issue where your <code>&lt;Upload&gt;</code> component accepts <code>GIFs</code>, even though you've specified:</p> <pre><code>accept = \"image/*\";\n</code></pre> <p>This syntax (<code>image/*</code>) tells the file input to accept any image format, which includes:</p> <ul> <li><code>.png</code></li> <li><code>.jpg / .jpeg</code></li> <li><code>.gif</code></li> <li><code>.webp</code>, etc.</li> </ul> <p>To restrict it to only <code>.png</code> and <code>.jpg</code>, you need to explicitly list those MIME types or extensions.</p>"},{"location":"office/bank/basic/upload-images-type/#fix","title":"\u2705 Fix","text":"<p>Update your <code>accept</code> prop to:</p> <pre><code>accept = \".png,.jpg,.jpeg\";\n</code></pre> <pre><code>&lt;Upload\n  listType=\"picture\"\n  accept=\".png,.jpg,.jpeg\"\n  maxCount={1}\n  beforeUpload={() =&gt; false}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;\n</code></pre> <p>This way, GIFs and other formats like <code>.webp</code>won't even be selectable in the file dialog.</p> <p>Let me know if you also want to validate on the beforeUpload hook (e.g. in case someone bypasses the dialog filter).</p>"},{"location":"office/bank/basic/upload-images-type/#constant","title":"CONSTANT","text":""},{"location":"office/bank/basic/upload-images-type/#basic","title":"BASIC","text":"<p>Absolutely \u2014 defining a constant for accepted file types is a clean and reusable approach. You can store the accepted image types in a constant and reuse it wherever needed in your project.</p>"},{"location":"office/bank/basic/upload-images-type/#example-define-reusable-constant","title":"Example: Define Reusable Constant","text":"<ol> <li> <p>Create a constants file</p> <p>You can create a <code>constants.js</code> or <code>uploadConstants.js</code> file:</p> <pre><code>// uploadConstants.js\n\nexport const ACCEPTED_IMAGE_TYPES = \".png,.jpg,.jpeg\";\n</code></pre> </li> <li> <p>Use it in your <code>Upload</code> component</p> <pre><code>import { ACCEPTED_IMAGE_TYPES } from \"./uploadConstants\";\n\n&lt;Upload\n  listType=\"picture\"\n  accept={ACCEPTED_IMAGE_TYPES}\n  maxCount={1}\n  beforeUpload={() =&gt; false}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;;\n</code></pre> </li> </ol>"},{"location":"office/bank/basic/upload-images-type/#bonus-add-mime-type-validation-optional","title":"\u2705 Bonus: Add MIME type validation (optional)","text":"<p>You can also add validation in <code>beforeUpload</code> to guard against users bypassing the <code>accept</code> filter:</p> <pre><code>const ACCEPTED_TYPES_ARRAY = [\"image/jpeg\", \"image/png\"];\n\nconst beforeUpload = (file) =&gt; {\n  const isAcceptedType = ACCEPTED_TYPES_ARRAY.includes(file.type);\n  if (!isAcceptedType) {\n    message.error(\"Only JPG and PNG files are allowed!\");\n  }\n  return isAcceptedType || Upload.LIST_IGNORE;\n};\n</code></pre> <p>Let me know if you'd like to extract more logic or handle drag-and-drop edge cases too.</p>"},{"location":"office/bank/basic/upload-images-type/#advanced","title":"Advanced","text":"<p>Great thinking \u2014 if your app has conditional upload types (e.g. sometimes only images, sometimes PDFs or videos), you can still keep everything clean and reusable by structuring your constants to support different upload contexts.</p>"},{"location":"office/bank/basic/upload-images-type/#step-by-step-reusable-upload-type-constants-flexible","title":"Step-by-Step: Reusable Upload Type Constants (Flexible)","text":"<ol> <li> <p>Define constants for different file types</p> <p>Create a constants file like <code>uploadTypes.js</code>:</p> <pre><code>// uploadTypes.js\n\nexport const ACCEPTED_FILE_TYPES = {\n  IMAGES: {\n    extensions: \".png,.jpg,.jpeg\",\n    mimeTypes: [\"image/png\", \"image/jpeg\"],\n  },\n  DOCUMENTS: {\n    extensions: \".pdf,.doc,.docx\",\n    mimeTypes: [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ],\n  },\n  VIDEOS: {\n    extensions: \".mp4,.mov\",\n    mimeTypes: [\"video/mp4\", \"video/quicktime\"],\n  },\n  // Add more groups as needed\n};\n</code></pre> </li> <li> <p>Use dynamically based on condition</p> <p>In your component:</p> <pre><code>import { ACCEPTED_FILE_TYPES } from \"./uploadTypes\";\n\nconst uploadType = \"IMAGES\"; // or 'DOCUMENTS', 'VIDEOS', etc \u2014 maybe from props or context\n\nconst { extensions, mimeTypes } = ACCEPTED_FILE_TYPES[uploadType];\n\nconst beforeUpload = (file) =&gt; {\n  const isAccepted = mimeTypes.includes(file.type);\n  if (!isAccepted) {\n    message.error(`Invalid file type. Allowed: ${extensions}`);\n  }\n  return isAccepted || Upload.LIST_IGNORE;\n};\n\n&lt;Upload\n  listType=\"picture\"\n  accept={extensions}\n  maxCount={1}\n  beforeUpload={beforeUpload}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;;\n</code></pre> </li> </ol>"},{"location":"office/bank/basic/upload-images-type/#bonus-type-safety-if-using-typescript","title":"\u2705 Bonus: Type Safety (if using TypeScript)","text":"<pre><code>export type UploadType = \"IMAGES\" | \"DOCUMENTS\" | \"VIDEOS\";\n\nexport const ACCEPTED_FILE_TYPES: Record&lt;\n  UploadType,\n  {\n    extensions: string;\n    mimeTypes: string[];\n  }\n&gt; = {\n  IMAGES: {\n    extensions: \".png,.jpg,.jpeg\",\n    mimeTypes: [\"image/png\", \"image/jpeg\"],\n  },\n  DOCUMENTS: {\n    extensions: \".pdf,.doc,.docx\",\n    mimeTypes: [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ],\n  },\n  VIDEOS: {\n    extensions: \".mp4,.mov\",\n    mimeTypes: [\"video/mp4\", \"video/quicktime\"],\n  },\n};\n</code></pre> <p>Let me know if you want a utility function to handle <code>beforeUpload</code> or preview logic too \u2014 happy to help build it out further.</p>"},{"location":"office/bank/basic/upload-images-type/#using-beforeupload","title":"Using <code>beforeUpload</code>","text":"Question <p>if i donot use the <code>beforeupload</code>. using this</p> <pre><code>const uploadType = 'IMAGES';\nconst { extensions, mimeTypes } = ACCEPTED_FILE_TYPES[uploadType];\n</code></pre> <p>wont be problem.</p> <p>No, it won't be a problem at all \u2014 you're totally fine to use:</p> <pre><code>const uploadType = \"IMAGES\";\nconst { extensions, mimeTypes } = ACCEPTED_FILE_TYPES[uploadType];\n</code></pre> <p>even if you don\u2019t use <code>beforeUpload</code>.</p>"},{"location":"office/bank/basic/upload-images-type/#heres-what-happens","title":"Here's what happens:","text":"<p>If you only use:</p> <pre><code>&lt;Upload\n    accept={extensions} // e.g., '.png,.jpg,.jpeg'\n    ...\n&gt;\n</code></pre> <p>Then the native file dialog will filter files based on <code>accept</code>. That means:</p> <ul> <li>The user won\u2019t be able to select disallowed files via the dialog.</li> <li>\u2705 Works as expected for most use cases.</li> </ul>"},{"location":"office/bank/basic/upload-images-type/#important-caveat","title":"\u26a0\ufe0f Important caveat:","text":"<p><code>accept</code> is a UI-level filter only. It does not prevent drag-and-drop or programmatic file uploads.</p> <p>So while this is enough in most cases, users can still technically bypass it:</p> <ul> <li>Drag in a <code>.gif</code> even if <code>.gif</code> isn't allowed.</li> <li>Use browser dev tools to override restrictions.</li> </ul>"},{"location":"office/bank/basic/upload-images-type/#recommended-practice","title":"\u2705 Recommended Practice:","text":"<p>If you're confident that users won\u2019t drag in incorrect files or you're in a trusted/internal environment, just using <code>accept={extensions}</code> is enough.</p> <p>But if it's a public-facing app or you want stronger control, it's best to also add:</p> <pre><code>beforeUpload = { beforeUpload };\n</code></pre> <p>with a check using <code>mimeTypes</code>.</p>"},{"location":"office/bank/basic/upload-images-type/#tldr","title":"TL;DR","text":"Feature Native <code>accept</code> only With <code>beforeUpload</code> File dialog filtering \u2705 Yes \u2705 Yes Drag-and-drop protection \u274c No \u2705 Yes Full control &amp; custom validation \u274c No \u2705 Yes <p>Let me know if you want to create a reusable <code>getBeforeUploadValidator()</code> helper \u2014 can save boilerplate across components.</p>"},{"location":"office/bank/basic/upload-images-type/#implementation-resuable-validation","title":"Implementation resuable Validation","text":"<p>Let's create a reusable helper function called <code>getBeforeUploadValidator()</code> that works with your <code>ACCEPTED_FILE_TYPES</code> constant and ensures files match the allowed MIME types.</p>"},{"location":"office/bank/basic/upload-images-type/#basic_1","title":"BASIC","text":"<ol> <li> <p>Your <code>uploadTypes.js</code> (or <code>uploadConstants.js</code>)</p> <pre><code>// uploadTypes.js\n\nexport const ACCEPTED_FILE_TYPES = {\n  IMAGES: {\n    extensions: \".png,.jpg,.jpeg\",\n    mimeTypes: [\"image/png\", \"image/jpeg\"],\n  },\n  DOCUMENTS: {\n    extensions: \".pdf,.doc,.docx\",\n    mimeTypes: [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ],\n  },\n  VIDEOS: {\n    extensions: \".mp4,.mov\",\n    mimeTypes: [\"video/mp4\", \"video/quicktime\"],\n  },\n};\n</code></pre> </li> <li> <p>Reusable Validator Helper</p> <p>You can create this in <code>uploadUtils.js</code>:</p> <pre><code>// uploadUtils.js\nimport { message } from \"antd\";\nimport { ACCEPTED_FILE_TYPES } from \"./uploadTypes\";\n\nexport const getBeforeUploadValidator = (uploadType) =&gt; {\n  const typeConfig = ACCEPTED_FILE_TYPES[uploadType];\n\n  if (!typeConfig) {\n    console.warn(`Unknown upload type: ${uploadType}`);\n    return () =&gt; Upload.LIST_IGNORE;\n  }\n\n  const { mimeTypes, extensions } = typeConfig;\n\n  return (file) =&gt; {\n    const isValid = mimeTypes.includes(file.type);\n\n    if (!isValid) {\n      message.error(`Invalid file type. Only allowed: ${extensions}`);\n    }\n\n    return isValid || Upload.LIST_IGNORE;\n  };\n};\n</code></pre> </li> <li> <p>Using it in your Component</p> <pre><code>import { ACCEPTED_FILE_TYPES } from \"./uploadTypes\";\nimport { getBeforeUploadValidator } from \"./uploadUtils\";\n\nconst uploadType = \"IMAGES\"; // or 'DOCUMENTS', 'VIDEOS', etc\nconst { extensions } = ACCEPTED_FILE_TYPES[uploadType];\n\n&lt;Upload\n  listType=\"picture\"\n  accept={extensions}\n  beforeUpload={getBeforeUploadValidator(uploadType)}\n  maxCount={1}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;;\n</code></pre> </li> </ol> Benefits of This Approach <ul> <li>\ud83d\udd01 Reusable: One utility works across all upload types.</li> <li>\ud83d\udca1 Clear: All valid types are defined in one place (<code>ACCEPTED_FILE_TYPES</code>).</li> <li>\ud83d\udee1\ufe0f Safe: Prevents invalid files via drag-and-drop or custom hacks.</li> <li>\ud83e\uddfc Clean: Easy to maintain or extend with new file types.</li> </ul> <p>Let me know if you want to:</p> <ul> <li>Add file size limits to this validator.</li> <li>Support multiple upload types at once (e.g. images and PDFs).</li> <li>Convert to TypeScript (for stricter typing).</li> </ul>"},{"location":"office/bank/basic/upload-images-type/#advanced_1","title":"ADVANCED","text":"<p>Step-by-Step: Centralizing Upload Type Keys</p> <ol> <li> <p>Update your constants file (e.g. <code>uploadTypes.js</code>)</p> <pre><code>// uploadTypes.js\n\n// Export these for consistency and reuse\nexport const UPLOAD_TYPE_KEYS = {\n  IMAGES: \"IMAGES\",\n  DOCUMENTS: \"DOCUMENTS\",\n  VIDEOS: \"VIDEOS\",\n  // Add more if needed\n};\n\nexport const ACCEPTED_FILE_TYPES = {\n  [UPLOAD_TYPE_KEYS.IMAGES]: {\n    extensions: \".png,.jpg,.jpeg\",\n    mimeTypes: [\"image/png\", \"image/jpeg\"],\n  },\n  [UPLOAD_TYPE_KEYS.DOCUMENTS]: {\n    extensions: \".pdf,.doc,.docx\",\n    mimeTypes: [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ],\n  },\n  [UPLOAD_TYPE_KEYS.VIDEOS]: {\n    extensions: \".mp4,.mov\",\n    mimeTypes: [\"video/mp4\", \"video/quicktime\"],\n  },\n};\n</code></pre> </li> <li> <p>Use it in your component</p> <pre><code>import { ACCEPTED_FILE_TYPES, UPLOAD_TYPE_KEYS } from \"./uploadTypes\";\nimport { getBeforeUploadValidator } from \"./uploadUtils\";\n\nconst uploadType = UPLOAD_TYPE_KEYS.IMAGES;\n\nconst { extensions } = ACCEPTED_FILE_TYPES[uploadType];\n\n&lt;Upload\n  listType=\"picture\"\n  accept={extensions}\n  beforeUpload={getBeforeUploadValidator(uploadType)}\n  maxCount={1}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;;\n</code></pre> <pre><code>const MyUploader = () =&gt; {\nconst uploadType = UPLOAD_TYPE_KEYS.IMAGES;\nconst { extensions } = ACCEPTED_FILE_TYPES[uploadType];\n\nreturn (\n    &lt;Upload accept={extensions} ... &gt;\n    Upload\n    &lt;/Upload&gt;\n);\n};\n</code></pre> </li> </ol> Why this is good practice Benefit Explanation \u2705 Consistency Prevents typos in string values like <code>'IMAGES'</code> \u2705 Autocomplete If you're using an IDE, you'll get better auto-complete \u2705 Easier Refactor If you want to rename <code>'IMAGES'</code> \u2192 <code>'IMAGE_FILES'</code>, just update in one place \u2705 Scalable Easier to manage more types in larger projects"},{"location":"office/bank/basic/upload-images-type/#size-validation","title":"Size Validation","text":"<p>Update <code>ACCEPTED_FILE_TYPES</code></p> <p>Add a <code>maxSizeMB</code> or <code>maxSizeBytes</code> field to each upload type:</p> <pre><code>// uploadTypes.js\n\nexport const ACCEPTED_FILE_TYPES = {\n  IMAGES: {\n    extensions: \".png,.jpg,.jpeg\",\n    mimeTypes: [\"image/png\", \"image/jpeg\"],\n    maxSizeMB: 5, // 5MB limit\n  },\n  DOCUMENTS: {\n    extensions: \".pdf,.doc,.docx\",\n    mimeTypes: [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ],\n    maxSizeMB: 10,\n  },\n  VIDEOS: {\n    extensions: \".mp4,.mov\",\n    mimeTypes: [\"video/mp4\", \"video/quicktime\"],\n    maxSizeMB: 50,\n  },\n};\n</code></pre> <p>Update <code>getBeforeUploadValidator()</code></p> <pre><code>// uploadUtils.js\nimport { message, Upload } from \"antd\";\nimport { ACCEPTED_FILE_TYPES } from \"./uploadTypes\";\n\nexport const getBeforeUploadValidator = (uploadType) =&gt; {\n  const typeConfig = ACCEPTED_FILE_TYPES[uploadType];\n\n  if (!typeConfig) {\n    console.warn(`Unknown upload type: ${uploadType}`);\n    return () =&gt; Upload.LIST_IGNORE;\n  }\n\n  const { mimeTypes, extensions, maxSizeMB } = typeConfig;\n\n  return (file) =&gt; {\n    const isMimeTypeValid = mimeTypes.includes(file.type);\n    if (!isMimeTypeValid) {\n      message.error(`Invalid file type. Only allowed: ${extensions}`);\n      return Upload.LIST_IGNORE;\n    }\n\n    const isSizeValid = file.size / 1024 / 1024 &lt;= maxSizeMB; // Convert bytes to MB\n    if (!isSizeValid) {\n      message.error(`File must be smaller than ${maxSizeMB}MB`);\n      return Upload.LIST_IGNORE;\n    }\n\n    return true;\n  };\n};\n</code></pre> <p>Summary</p> Feature Implementation File Type Check Via <code>mimeTypes.includes(file.type)</code> File Size Check Via <code>file.size / 1024 / 1024 &lt;= maxSizeMB</code> Reusability Fully reusable with centralized config"},{"location":"office/bank/basic/upload-images-type/#option-1-pass-dynamic-maxsizemb-as-a-param-to-the-validator","title":"Option 1: Pass Dynamic <code>maxSizeMB</code> as a Param to the Validator","text":"<p>This is the cleanest way if the size limit depends on external conditions (like props, user selection, etc.).</p> <p>\ud83d\udee0 Updated <code>getBeforeUploadValidator</code> (with optional override)</p> <pre><code>// uploadUtils.js\n\nexport const getBeforeUploadValidator = (uploadType, options = {}) =&gt; {\n  const typeConfig = ACCEPTED_FILE_TYPES[uploadType];\n\n  if (!typeConfig) {\n    console.warn(`Unknown upload type: ${uploadType}`);\n    return () =&gt; Upload.LIST_IGNORE;\n  }\n\n  const { mimeTypes, extensions, maxSizeMB: defaultMaxSizeMB } = typeConfig;\n  const maxSizeMB = options.maxSizeMB ?? defaultMaxSizeMB;\n\n  return (file) =&gt; {\n    const isMimeTypeValid = mimeTypes.includes(file.type);\n    if (!isMimeTypeValid) {\n      message.error(`Invalid file type. Only allowed: ${extensions}`);\n      return Upload.LIST_IGNORE;\n    }\n\n    const isSizeValid = file.size / 1024 / 1024 &lt;= maxSizeMB;\n    if (!isSizeValid) {\n      message.error(`File must be smaller than ${maxSizeMB}MB`);\n      return Upload.LIST_IGNORE;\n    }\n\n    return true;\n  };\n};\n</code></pre> <p>In Your Component (Example with Dynamic Size Limit)</p> <pre><code>import { ACCEPTED_FILE_TYPES, UPLOAD_TYPE_KEYS } from \"./uploadTypes\";\nimport { getBeforeUploadValidator } from \"./uploadUtils\";\n\nconst uploadType = UPLOAD_TYPE_KEYS.IMAGES;\n\n// Example: dynamic max size based on user or context\nconst isPremiumUser = true;\nconst maxSizeMB = isPremiumUser ? 5 : 2;\n\nconst { extensions } = ACCEPTED_FILE_TYPES[uploadType];\n\n&lt;Upload\n  accept={extensions}\n  beforeUpload={getBeforeUploadValidator(uploadType, { maxSizeMB })}\n  maxCount={1}\n  fileList={fileList}\n  onChange={onHandleChange}\n&gt;\n  &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n&lt;/Upload&gt;;\n</code></pre>"},{"location":"office/bank/basic/counter/overview/","title":"CounterBadge - Overview","text":""},{"location":"office/bank/basic/counter/overview/#overview","title":"Overview","text":"<pre><code>const Sidebar = ({ collapsed, height, width }) =&gt; {\n  const { forexCounter, moneyMarketCounter, mutualFundCounter, ndfCounter } =\n    useSelector((state) =&gt; state.counter);\n\n  const items = [\n    {\n      key: APP_ROUTES.DEALS,\n      label: \"Approval Deals\",\n      icon: &lt;BankOutlined /&gt;,\n      children: [\n        {\n          key: APP_ROUTES.FOREX_DEAL,\n          // label: \"Forex\",\n          label: (\n            &lt;Flex\n              justify=\"space-between\"\n              align=\"center\"\n              style={{ width: \"100%\" }}\n            &gt;\n              &lt;span&gt;Forex&lt;/span&gt;\n              &lt;Badge count={forexCounter} size=\"small\" showZero /&gt;\n            &lt;/Flex&gt;\n          ),\n          requiredpermissions: [PERMISSIONS.CAN_VIEW_FOREX_ALL_DEAL],\n        },\n        {\n          key: APP_ROUTES.MMD_DEAL,\n          // label: \"MMD\",\n          label: (\n            &lt;Flex\n              justify=\"space-between\"\n              align=\"center\"\n              style={{ width: \"100%\" }}\n            &gt;\n              &lt;span&gt;MMD&lt;/span&gt;\n              &lt;Badge count={moneyMarketCounter} size=\"small\" showZero /&gt;\n            &lt;/Flex&gt;\n          ),\n          requiredpermissions: [PERMISSIONS.CAN_VIEW_MMD_DEAL],\n        },\n        {\n          key: APP_ROUTES.MFT_DEAL,\n          // label: \"MFT\",\n          label: (\n            &lt;Flex\n              justify=\"space-between\"\n              align=\"center\"\n              style={{ width: \"100%\" }}\n            &gt;\n              &lt;span&gt;MFT&lt;/span&gt;\n              &lt;Badge count={mutualFundCounter} size=\"small\" showZero /&gt;\n            &lt;/Flex&gt;\n          ),\n          requiredpermissions: [PERMISSIONS.CAN_VIEW_MFT_DEAL],\n        },\n        {\n          key: APP_ROUTES.NDF_DEAL,\n          // label: \"NDF\",\n          label: (\n            &lt;Flex\n              justify=\"space-between\"\n              align=\"center\"\n              style={{ width: \"100%\" }}\n            &gt;\n              &lt;span&gt;NDF&lt;/span&gt;\n              &lt;Badge count={ndfCounter} size=\"small\" showZero /&gt;\n            &lt;/Flex&gt;\n          ),\n          requiredpermissions: [PERMISSIONS.CAN_VIEW_NFD_DEAL],\n        },\n      ],\n    },\n  ];\n};\n</code></pre>"},{"location":"office/bank/basic/counter/overview/#slice","title":"Slice","text":"counterBadgeSlice.js<pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nconst counterBadgeSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    forexCounter: null,\n    moneyMarketCounter: null,\n    mutualFundCounter: null,\n    ndfCounter: null,\n  },\n  reducers: {\n    setBadgeCount: (state, action) =&gt; {\n      state.forexCounter = action.payload?.forexCount;\n      state.moneyMarketCounter = action.payload?.moneyMarketCount;\n      state.mutualFundCounter = action.payload?.mutualFundCount;\n      state.ndfCounter = action.payload?.ndfCount;\n    },\n    clearBageCount: (state) =&gt; {\n      state.forexCounter = null;\n      state.moneyMarketCounter = null;\n      state.mutualFundCounter = null;\n      state.ndfCounter = null;\n    },\n  },\n});\n\nexport const { setBadgeCount } = counterBadgeSlice.actions;\nexport default counterBadgeSlice.reducer;\n</code></pre>"},{"location":"office/bank/basic/counter/overview/#api","title":"API","text":"counterBadgeApi.js<pre><code>import { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { createApi } from \"@reduxjs/toolkit/query/react\";\n\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport logger from \"@shared/utils/logger\";\nimport { notify } from \"@shared/utils/notificationUtils\";\n\nexport const counterBadgeApi = createApi({\n  reducerPath: \"counterBadgeApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  endpoints: (builder) =&gt; ({\n    getAllBadgeCount: builder.query({\n      query: () =&gt; ({\n        url: `Badge`,\n        method: HTTP_METHODS.GET,\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during Cunter API.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n});\n\nexport const { useLazyGetAllBadgeCountQuery } = counterBadgeApi;\n</code></pre>"},{"location":"office/bank/basic/counter/overview/#reference","title":"Reference","text":""},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/","title":"Infinite Scroll RTK","text":""},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#infinited-scroll","title":"Infinited Scroll","text":"<pre><code>import React from \"react\";\nimport { Select, Spin } from \"antd\";\nimport { useGetReferenceMMDPaginationInfiniteQuery } from \"./mmdFormApi\";\n\nconst { Option } = Select;\n\nfunction InfiniteScrollSelect() {\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } =\n    useGetReferenceMMDPaginationInfiniteQuery({\n      pageSize: 20,\n      searchTerm: \"\", // or controlled search term\n    });\n\n  // Flatten all pages of results into one array\n  const options = data?.pages.flatMap((page) =&gt; page.results) || [];\n\n  // Scroll handler to detect near bottom and trigger fetchNextPage\n  const handlePopupScroll = (e) =&gt; {\n    const target = e.target;\n    if (\n      hasNextPage &amp;&amp;\n      !isFetchingNextPage &amp;&amp;\n      target.scrollTop + target.offsetHeight &gt;= target.scrollHeight - 10\n    ) {\n      fetchNextPage();\n    }\n  };\n\n  return (\n    &lt;Select\n      showSearch\n      style={{ width: 300 }}\n      placeholder=\"Select an option\"\n      onPopupScroll={handlePopupScroll}\n      loading={isFetchingNextPage}\n      filterOption={false} // disable built-in filtering if you do server search\n      // onSearch={handleSearch} // optional: implement server-side search\n      notFoundContent={isFetchingNextPage ? &lt;Spin size=\"small\" /&gt; : null}\n    &gt;\n      {options.map((item) =&gt; (\n        &lt;Option key={item.id} value={item.id}&gt;\n          {item.name}\n        &lt;/Option&gt;\n      ))}\n    &lt;/Select&gt;\n  );\n}\n\nexport default InfiniteScrollSelect;\n</code></pre> <pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { CONFIG } from \"@shared/utils/config\";\n\nexport const mmdFormApi = createApi({\n  reducerPath: \"mmdFormApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"mmdForm\"], // &lt;-- should be an array\n  endpoints: (builder) =&gt; ({\n    getReferenceMMDPagination: builder.infiniteQuery({\n      query: ({ pageParam = 1, pageSize, searchTerm }) =&gt; {\n        const queryParams = queryString.stringify({\n          pageCount: pageParam,\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n        });\n\n        return {\n          url: `MoneyMarketDeal/GetViaPagination?${queryParams}`,\n          method: \"GET\",\n        };\n      },\n\n      infiniteQueryOptions: {\n        initialPageParam: 1,\n        getNextPageParam: (lastPage, allPages) =&gt; {\n          if (lastPage.currentPage &lt; lastPage.totalPages) {\n            return lastPage.currentPage + 1;\n          }\n          return undefined;\n        },\n      },\n    }),\n  }),\n});\n\n// Correct hook name for infiniteQuery\nexport const { useGetReferenceMMDPaginationInfiniteQuery } = mmdFormApi;\n</code></pre>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#summary","title":"Summary","text":"Checkpoint Action/Confirm RTK Query version Upgrade to <code>@reduxjs/toolkit</code> 2.6.0 or later Hook usage Use <code>useGetReferenceMMDPaginationInfiniteQuery</code> API response shape Confirm <code>currentPage</code> and <code>totalPages</code> exist Base query returns <code>{ data }</code> Ensure <code>axiosBaseQuery</code> returns <code>{ data: ... }</code> Debug logs Add <code>console.log</code> inside <code>getNextPageParam</code>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#description","title":"Description","text":"<pre><code>export const mmdFormApi = createApi({\n  reducerPath: \"mmdFormApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: \"mmdForm\",\n  endpoints: (builder) =&gt; ({\n    getReferenceMMDPagination: builder.infiniteQuery({\n      // QUERY\n      query: ({ pageParam = 1, pageSize, searchTerm }) =&gt; {\n        const queryParams = queryString.stringify({\n          pageCount: pageParam,\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n        });\n\n        return {\n          url: `MoneyMarketDeal/GetViaPagination?${queryParams}`,\n          method: \"GET\",\n        };\n      },\n      // END QUERY\n\n      // QUERY\n      infiniteQueryOptions: {\n        initialPageParam: 1,\n        getNextPageParam: (lastPage) =&gt; {\n          // Assuming your API response includes info about next page or total pages\n          // For example, if lastPage has currentPage and totalPages:\n          console.log(\"XXX LAST PAGE\", lastPage);\n          if (lastPage.currentPage &lt; lastPage.totalPages) {\n            return lastPage.currentPage + 1;\n          }\n          return undefined; // no more pages\n        },\n      },\n      // END INFINITE QUERY\n    }),\n  }),\n});\n</code></pre>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#how-hasnextpage-property-works","title":"How <code>hasNextPage</code> property Works?","text":"<p>The <code>hasNextPage</code> property you see in the result of <code>useGetReferenceMMDPaginationInfiniteQuery</code> is a boolean value automatically provided by RTK Query's infinite query hook. It is not a function; it is a computed property that tells you whether another page of data is available to fetch.</p> How does <code>hasNextPage</code> work? <ul> <li> <p>RTK Query determines the value of <code>hasNextPage</code> based on the return value of your <code>getNextPageParam</code> function in the infiniteQueryOptions of your endpoint.</p> </li> <li> <p>If your <code>getNextPageParam</code> returns a value (such as the next page number or cursor), <code>hasNextPage</code> will be true.</p> </li> <li> <p>If your <code>getNextPageParam</code> returns undefined (or null, false, or a falsy value), <code>hasNextPage</code> will be false.</p> </li> </ul> <p>Example from the docs:</p> <p>If <code>getNextPageParam</code> returns <code>undefined</code>, then <code>hasNextPage</code> will be false and you should not call <code>fetchNextPage</code> anymore.</p> In summary <ul> <li> <p><code>hasNextPage</code> is a boolean, not a function.</p> </li> <li> <p>It is automatically calculated by RTK Query using your <code>getNextPageParam</code> logic.</p> </li> <li> <p>Use it to control when to call <code>fetchNextPage</code> in your UI (for example, when the user scrolls to the bottom).</p> </li> </ul> <p>Reference from the official docs:</p> <p>\"hasNextPage and hasPreviousPage boolean properties are returned to determine if there is a next or previous page. ... To prevent this, we need to return a false value (undefined, 0 null, false) in getNextPageParam when no data is left. This way, the hasNextPage returned property will be equal to false when there is no data left...\"</p>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#issue-youtube-working","title":"ISSUE YOUTUBE WORKING","text":""},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#final-implementation","title":"FINAL IMPLEMENTATION","text":"DealsForm.jsx<pre><code>import { useGetReferenceMMDPaginationInfiniteQuery } from \"../../services/mmdformApi\";\n\n/***********************************************/\n/*\n * SCROLL\n */\nconst {\n  data: rollData,\n  fetchNextPage: fetchRollNextPage,\n  hasNextPage: hasRollNextPage,\n  isFetchingNextPage: isFetchingRollNextPage,\n  error: rollError,\n  isLoading: isLoadingRoll,\n} = useGetReferenceMMDPaginationInfiniteQuery({\n  pageSize: 20,\n  searchTerm: \"\",\n});\n\nconst allResults = rollData?.pages?.flatMap((page) =&gt; page.items) || [];\n\nconst handlePopupScroll = (e) =&gt; {\n  const target = e.target;\n  if (\n    hasRollNextPage &amp;&amp;\n    !isFetchingRollNextPage &amp;&amp;\n    target.scrollTop + target.offsetHeight &gt;= target.scrollHeight - 10\n  ) {\n    fetchRollNextPage();\n  }\n};\n/***********************************************/\n\n&lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n  &lt;Form.Item\n    name=\"select\"\n    label=\"Select Roll\"\n    rules={[{ required: false, message: \"\" }]}\n  &gt;\n    &lt;Select\n      showSearch\n      style={{ width: 300 }}\n      placeholder=\"Select an option\"\n      onPopupScroll={handlePopupScroll}\n      loading={isFetchingRollNextPage}\n      filterOption={false} // disable built-in filtering if you do server search\n      // onSearch={handleSearch} // optional: implement server-side search\n      notFoundContent={isFetchingRollNextPage ? &lt;Spin size=\"small\" /&gt; : null}\n    &gt;\n      {allResults.map((item) =&gt; (\n        &lt;Option key={item.id} value={item.id}&gt;\n          {item.ourPayBankAccountSwiftCode}\n        &lt;/Option&gt;\n      ))}\n    &lt;/Select&gt;\n  &lt;/Form.Item&gt;\n&lt;/Col&gt;;\n</code></pre> mmdformApi.js<pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport logger from \"@shared/utils/logger\";\n\nexport const mmdFormApi = createApi({\n  reducerPath: \"mmdFormApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: \"mmdForm\",\n  endpoints: (builder) =&gt; ({\n    getReferenceMMDPagination: builder.infiniteQuery({\n      query: ({ pageParam = 1, pageSize, searchTerm }) =&gt; {\n        const queryParams = queryString.stringify({\n          pageCount: pageParam,\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n        });\n\n        return {\n          url: `MoneyMarketDeal/GetViaPagination?${queryParams}`,\n          method: \"GET\",\n        };\n      },\n\n      infiniteQueryOptions: {\n        initialPageParam: 1,\n        getNextPageParam: (lastPage) =&gt; {\n          if (lastPage.currentPage &lt; lastPage.totalPages) {\n            return lastPage.currentPage + 1;\n          }\n          return undefined;\n        },\n      },\n    }),\n  }),\n});\n\nexport const { useGetReferenceMMDPaginationInfiniteQuery } = mmdFormApi;\n</code></pre>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#api-testingin","title":"API TESTINGIN","text":"<pre><code>GetViaPagination\n</code></pre> <p>Full Example: Server-Side Search + Infinite Scroll with AntD Select &amp; RTK Query</p> <pre><code>import React, { useState, useEffect, useCallback } from \"react\";\nimport { Select, Spin } from \"antd\";\nimport debounce from \"lodash.debounce\";\nimport { useGetReferenceMMDPaginationInfiniteQuery } from \"./mmdFormApi\";\n\nconst { Option } = Select;\n\nfunction InfiniteSearchableSelect() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Debounce search input to avoid too many requests\n  const debouncedSearch = useCallback(\n    debounce((value) =&gt; {\n      setSearchTerm(value);\n    }, 300),\n    []\n  );\n\n  // Fetch data with RTK Query infinite query hook, passing searchTerm\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage, isLoading } =\n    useGetReferenceMMDPaginationInfiniteQuery({\n      pageSize: 20,\n      searchTerm,\n    });\n\n  // Flatten pages into one array of options\n  const options = data?.pages.flatMap((page) =&gt; page.results) || [];\n\n  // Handle scrolling to load more\n  const handlePopupScroll = (e) =&gt; {\n    const target = e.target;\n    if (\n      hasNextPage &amp;&amp;\n      !isFetchingNextPage &amp;&amp;\n      target.scrollTop + target.offsetHeight &gt;= target.scrollHeight - 10\n    ) {\n      fetchNextPage();\n    }\n  };\n\n  // Handle search input change\n  const handleSearch = (value) =&gt; {\n    debouncedSearch(value);\n  };\n\n  return (\n    &lt;Select\n      showSearch\n      placeholder=\"Select an option\"\n      filterOption={false} // disable built-in filtering\n      onSearch={handleSearch} // handle search input\n      onPopupScroll={handlePopupScroll} // infinite scroll\n      loading={isFetchingNextPage}\n      notFoundContent={isFetchingNextPage ? &lt;Spin size=\"small\" /&gt; : null}\n      style={{ width: 300 }}\n      // Optional: allow clearing selection\n      allowClear\n    &gt;\n      {options.map((item) =&gt; (\n        &lt;Option key={item.id} value={item.id}&gt;\n          {item.name}\n        &lt;/Option&gt;\n      ))}\n    &lt;/Select&gt;\n  );\n}\n\nexport default InfiniteSearchableSelect;\n</code></pre>"},{"location":"office/bank/basic/infiniteQuery/infinte-scroll/#reference","title":"Reference","text":"<ul> <li>Official: Infinite Queries</li> <li>Blog: Infinite scrolling with React Query</li> <li>Official: createApi</li> <li>Github: RTKQ \"infinite query\" potential use cases and concerns</li> <li>Github: Implementing infinite scroll with RTK Query #1163</li> <li>Infinite Queries</li> <li>Stackoveflow: React-query useInfiniteQuery: getNextPageParam not working</li> <li>Stackoverflow: TanStack useInfiniteQuery caching fetchNextPage to fetch the first page</li> <li>Paginated &amp; Infinite Queries</li> <li>React Query - Infinite Queries</li> <li>React Query:\u4f55\u65f6\u4f7f\u7528 useInfiniteQuery \u6216 usePaginatedQuery \u8fdb\u884c\u5206\u9875</li> <li>Stackoverflow: why react-query fetchNextPage not working</li> <li>YOUTUBE: Resolving the useInfiniteQuery Issue: Understanding getNextPageParam in React Query</li> </ul> <p>perplexity</p> <ul> <li>SEARCH DOCS</li> </ul>"},{"location":"office/bank/basic/infiniteQuery/overview/","title":"Overview","text":""},{"location":"office/bank/basic/infiniteQuery/table/","title":"Table","text":""},{"location":"office/bank/basic/infiniteQuery/table/#antd-table","title":"Antd Table","text":""},{"location":"office/bank/basic/infiniteQuery/table/#table","title":"Table","text":"PreviousDealTransaction.jsx<pre><code>import { useEffect, useRef, useState } from \"react\";\nimport { Table, Spin } from \"antd\";\nimport dayjs from \"dayjs\";\n\nimport { intCurencyFormatter } from \"@shared/utils/currencyFormatter\";\nimport { useGetPreviousDealTransactionInfiniteQuery } from \"../../services/mmdformApi\";\n\nconst PreviousDealTransaction = ({ counterPartyId }) =&gt; {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const scrollContainerRef = useRef(null);\n\n  const {\n    data: transactionData,\n    fetchNextPage: transactionNextPage,\n    hasNextPage: hasTransactionNextPage,\n    isFetchingNextPage: isFetchingTransactionNextPage,\n    error: transactionError,\n    isLoading: isLoadingTransaction,\n  } = useGetPreviousDealTransactionInfiniteQuery(\n    {\n      pageSize: 10,\n      searchTerm,\n      counterPartyId,\n    },\n    {\n      skip: !counterPartyId,\n    }\n  );\n\n  const allResults =\n    transactionData?.pages?.flatMap((page) =&gt; page.items) || [];\n\n  // Infinite Scroll: detect scroll to bottom\n  const handleScroll = () =&gt; {\n    const container = scrollContainerRef.current;\n\n    if (!container || isFetchingTransactionNextPage || !hasTransactionNextPage)\n      return;\n\n    const { scrollTop, scrollHeight, clientHeight } = container;\n\n    // Trigger fetch when 90% scrolled\n    console.log(\n      \"scrollTop + clientHeight &gt;= scrollHeight - 100: \",\n      scrollTop + clientHeight &gt;= scrollHeight - 100\n    );\n    if (\n      scrollTop + clientHeight &gt;= scrollHeight - 100 &amp;&amp;\n      hasTransactionNextPage &amp;&amp;\n      !isFetchingTransactionNextPage\n    ) {\n      transactionNextPage();\n    }\n  };\n\n  useEffect(() =&gt; {\n    const container = scrollContainerRef.current;\n    if (container) {\n      container.addEventListener(\"scroll\", handleScroll);\n      return () =&gt; container.removeEventListener(\"scroll\", handleScroll);\n    }\n  }, [\n    transactionNextPage,\n    hasTransactionNextPage,\n    isFetchingTransactionNextPage,\n  ]);\n\n  return (\n    &lt;div\n      ref={scrollContainerRef}\n      style={{\n        height: 300,\n        overflow: \"auto\",\n      }}\n    &gt;\n      &lt;Table\n        rowKey=\"id\"\n        columns={[\n          {\n            title: \"S.N\",\n            dataIndex: \"index\",\n            key: \"index\",\n            render: (_, __, index) =&gt; index + 1,\n          },\n          {\n            title: \"Amount\",\n            dataIndex: \"amount\",\n            render: (amount) =&gt; {\n              if (amount &lt; 0) {\n                return (\n                  &lt;span style={{ color: \"red\" }}&gt;\n                    ({intCurencyFormatter(Math.abs(amount))})\n                  &lt;/span&gt;\n                );\n              }\n              return intCurencyFormatter(amount);\n            },\n          },\n          {\n            title: \"Deal Date\",\n            dataIndex: \"dealDate\",\n            render: (date) =&gt; dayjs(date).format(\"YYYY/MM/DD\"),\n          },\n          { title: \"Reference Number\", dataIndex: \"referenceNumber\" },\n        ]}\n        dataSource={allResults}\n        pagination={false}\n        loading={isLoadingTransaction &amp;&amp; !transactionData}\n      /&gt;\n\n      {isFetchingTransactionNextPage &amp;&amp; (\n        &lt;div style={{ textAlign: \"center\", padding: 16 }}&gt;\n          &lt;Spin /&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default PreviousDealTransaction;\n</code></pre>"},{"location":"office/bank/basic/infiniteQuery/table/#api","title":"API","text":"mmdformApi.js<pre><code>export const mmdFormApi = createApi({\n  reducerPath: \"mmdFormApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: \"mmdForm\",\n  endpoints: (builder) =&gt; ({\n    getReferenceMMDPagination: builder.infiniteQuery({\n      query: ({ pageParam = 1, queryArg }) =&gt; {\n        const { pageSize, searchTerm } = queryArg;\n\n        const queryParams = queryString.stringify({\n          pageCount: pageParam,\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n        });\n\n        return {\n          url: `MoneyMarketDeal/GetRollViaPagination?${queryParams}`,\n          method: \"GET\",\n        };\n      },\n\n      infiniteQueryOptions: {\n        initialPageParam: 1,\n        getNextPageParam: (lastPage) =&gt; {\n          if (lastPage.currentPage &lt; lastPage.totalPages) {\n            return lastPage.currentPage + 1;\n          }\n          return undefined;\n        },\n      },\n    }),\n\n    getPreviousDealTransaction: builder.infiniteQuery({\n      query: ({ pageParam = 1, queryArg }) =&gt; {\n        const { pageSize, searchTerm, counterPartyId } = queryArg;\n\n        const queryParams = queryString.stringify({\n          pageCount: pageParam,\n          CounterpartyId: counterPartyId,\n          ...(pageSize &amp;&amp; { pageSize }),\n          ...(searchTerm &amp;&amp; { searchTerm }),\n        });\n\n        return {\n          url: `MoneyMarketDeal/PreviousDealTransaction?${queryParams}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n\n      infiniteQueryOptions: {\n        initialPageParam: 1,\n        getNextPageParam: (lastPage) =&gt; {\n          if (lastPage.currentPage &lt; lastPage.totalPages) {\n            return lastPage.currentPage + 1;\n          }\n          return undefined;\n        },\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetReferenceMMDPaginationInfiniteQuery,\n  useLazyGetListingByIdQuery,\n  useLazyGetMMDExchangeRateQuery,\n  useGetPreviousDealTransactionInfiniteQuery,\n} = mmdFormApi;\n</code></pre> Note <ul> <li>For <code>InifiniteQuery</code>, use <code>InfiniteQuery</code> at the end of the API.</li> </ul>"},{"location":"office/bank/basic/issue/rate-loader-issue/","title":"Rate Loader Issue in Forex/MMD","text":""},{"location":"office/bank/basic/issue/rate-loader-issue/#rate-loader-issue-fixed","title":"Rate Loader Issue Fixed","text":"<pre><code>const debouncedTriggerGetApprovalPerson = useCallback(\n  debounce((payload) =&gt; {\n    triggerGetApprovalPerson(payload);\n\n    // THIS SOLVED LODER ISSUE: infinite loading issue\n    setIsDebouncingStatus(false);\n  }, 3000),\n\n  [triggerGetApprovalPerson]\n);\n</code></pre>"},{"location":"office/bank/basic/issue/stale-state-issue/","title":"Stale State","text":""},{"location":"office/bank/basic/issue/stale-state-issue/#state-state-issue","title":"State State Issue","text":"<p><code>useEffect</code> \u2014 this helps clarify the context. You\u2019re computing <code>npDiffAmount</code> and storing it in a state variable <code>borrowingFormula</code>, which is then used in a form validator. But you're running into an issue where the validator is reading a stale value of <code>borrowingFormula</code>.</p>"},{"location":"office/bank/basic/issue/stale-state-issue/#why-this-still-breaks","title":"\ud83d\udd0d Why This Still Breaks","text":"<p>Even though the formula is correct and updates <code>borrowingFormula</code> properly, the validator doesn\u2019t reactively update when <code>borrowingFormula</code> changes. Here's the reason:</p> <ul> <li> <p>Form validation rules are usually set once during render.</p> </li> <li> <p>Unless you re-render the field or trigger <code>validateFields()</code> again, it will capture stale values from closure, such as <code>borrowingFormula</code> from the time of registration.</p> </li> </ul>"},{"location":"office/bank/basic/issue/stale-state-issue/#solutions-recap-adapted-for-your-code","title":"\u2705 Solutions Recap (Adapted for Your Code)","text":""},{"location":"office/bank/basic/issue/stale-state-issue/#option-1-use-a-ref-for-borrowingformula","title":"\u2705 Option 1: Use a <code>ref</code> for <code>borrowingFormula</code>","text":"<p>Instead of this:</p> <pre><code>const [borrowingFormula, setBorrowingFormula] = useState(null);\n</code></pre> <p>Do this:</p> <pre><code>const borrowingFormulaRef = useRef(null);\n</code></pre> <p>Update the <code>ref</code> inside your <code>useEffect</code>:</p> <pre><code>borrowingFormulaRef.current = {\n  npDiffAmount: Number(difference).toFixed(4),\n  frDiffAmount: Number(diffrenceFr).toFixed(4),\n};\n</code></pre> <p>And in your form <code>rules</code>:</p> <pre><code>validator: (_, value) =&gt; {\n  const npDiffAmount = parseFloat(\n    borrowingFormulaRef.current?.npDiffAmount || 0\n  );\n  if (\n    npDiffAmount &lt; 0 &amp;&amp;\n    isMMDCreateAfterExceedingCounterpartyLimit === \"false\" &amp;&amp;\n    dealType === 2\n  ) {\n    return Promise.reject(\n      new Error(\n        \"Deal amount cannot be accepted because the NPR limit is negative and creation after exceeding counterparty limit is not allowed.\"\n      )\n    );\n  }\n  return Promise.resolve();\n};\n</code></pre>"},{"location":"office/bank/basic/issue/stale-state-issue/#option-2-recalculate-npdiffamount-directly-in-the-validator-best-if-all-required-values-are-in-form","title":"\u2705 Option 2: Recalculate <code>npDiffAmount</code> directly in the validator (best if all required values are in form)","text":"<p>If you can access <code>dealAmount</code>, <code>midRate</code>, <code>limit</code>, etc., inside the validator (from the form or props), then compute <code>npDiffAmount</code> right there, instead of relying on <code>useEffect</code>.</p> <p>This removes the dependency on a state/ref and ensures always-fresh values.</p>"},{"location":"office/bank/basic/issue/stale-state-issue/#bonus-tip-ensure-useeffect-runs-at-the-right-time","title":"\ud83d\udd01 Bonus Tip: Ensure <code>useEffect</code> Runs at the Right Time","text":"<p>Make sure <code>dealAmount</code> and <code>mmdExchangeRateBorrowing</code> are not stale themselves (i.e., ensure <code>dealAmount</code> updates before you need validation). If form state and <code>dealAmount</code> are separate, you may need to watch values or use <code>onValuesChange</code> from antd to sync them.</p>"},{"location":"office/bank/basic/issue/stale-state-issue/#tldr","title":"\u2705 TL;DR","text":"<p>Use a <code>ref</code> instead of <code>useState</code> to store <code>borrowingFormula</code>, so the validator can access the latest value. Or recalculate <code>npDiffAmount</code> directly inside the validator if possible.</p> <p>Let me know if you'd like a working code snippet for either approach!</p>"},{"location":"office/bank/basic/issue/stale-state-issue/#other","title":"Other","text":"<pre><code>&lt;Form.Item\n  label={\n    &lt;&gt;\n      Deal Amount: {getLabelByValue(dealCurrencyId, currency, \"code\") ?? \"\"}\n      {limitStatus === \"OverLimit\" ? (\n        &lt;span style={{ color: \"red\", padding: \"0 4px\" }}&gt;\n          ({limitStatus} :{\" \"}\n          {intCurencyFormatter(\n            mmdExchangeRateBorrowing?.currencyDealAmountLimit\n          )}\n          )\n        &lt;/span&gt;\n      ) : (\n        limitStatus &amp;&amp; (\n          &lt;span style={{ color: \"green\", padding: \"0 4px\" }}&gt;\n            ({limitStatus} :{\" \"}\n            {intCurencyFormatter(\n              mmdExchangeRateBorrowing?.currencyDealAmountLimit\n            )}\n            )\n          &lt;/span&gt;\n        )\n      )}\n      {/* ...rest of your label JSX */}\n    &lt;/&gt;\n  }\n  name={DealFormEnum?.DEAL_AMOUNT}\n  rules={[\n    {\n      required: isDevelopmentMode,\n      message: \"Please Enter Deal Amount\",\n    },\n    {\n      validator: (_, value, callback) =&gt; {\n        // Access the form values to check the flag \"MMD.CreateAfterExceedingCounterpartyLimit\"\n        // Assuming you have access to form instance or can get the value from context\n        const createAfterLimit = form.getFieldValue(\n          \"MMD.CreateAfterExceedingCounterpartyLimit\"\n        );\n\n        if (\n          mmdExchangeRateBorrowing?.actualAmountLimitNpr &lt; 0 &amp;&amp;\n          createAfterLimit === false\n        ) {\n          return Promise.reject(\n            new Error(\n              \"Deal amount cannot be accepted because the NPR limit is negative and creation after exceeding counterparty limit is not allowed.\"\n            )\n          );\n        }\n        return Promise.resolve();\n      },\n    },\n  ]}\n/&gt;\n</code></pre>"},{"location":"office/bank/basic/issue/stale-state-issue/#reference","title":"Reference","text":"<ul> <li>RTK Query Usage</li> </ul>"},{"location":"office/bank/basic/issue/solved/permission-response/","title":"Permission","text":""},{"location":"office/bank/basic/issue/solved/permission-response/#permission","title":"Permission","text":"<pre><code>// features\nimport {\n  MoneyMarketDealModeEnum,\n  MoneyMarketDealTypeEnum,\n  DealModeEnum,\n  BasisOfCountingEnum,\n  DealFormEnum,\n  // ADDED\n  MMD_ROLL_TYPE,\n} from \"@features/mmd/utils/constants\";\nimport { useLazyGetListingByIdQuery } from \"@features/mmd/services/mmdformApi\";\n\n// Instance\nconst [form] = Form.useForm();\nconst [form2] = Form.useForm();\n\n/* ROLL */\nconst [\n  triggerListingReferenceById,\n  {\n    data: listingIdData,\n    isLoading: isListingDataLoading,\n    isError: isListingError,\n  },\n] = useLazyGetListingByIdQuery();\n\n/* ROLL OVER */\nuseEffect(() =&gt; {\n  const transformValues = {\n    counterParty: {\n      id: listingIdData?.counterPartyId,\n      name: listingIdData?.counterPartyName,\n    },\n    counterPartyDealer: {\n      id: listingIdData?.counterPartyDealerId,\n      name: listingIdData?.counterPartyDealerName,\n    },\n    dealCurrency: {\n      id: listingIdData?.dealCurrencyId,\n      name: listingIdData?.dealCurrencyCode,\n    },\n    basisOfCounting: listingIdData?.basisOfCounting === 360 ? 1 : 2,\n  };\n\n  console.log(\"listingIdData: \", listingIdData);\n  console.log(\"transformValues: \", transformValues);\n\n  form.setFieldsValue({\n    [DealFormEnum?.COUNTERPARTY]: transformValues?.counterParty?.id,\n    // [DealFormEnum?.COUNTERPARTY_BANK]: transformValues?.counterPartyDealer\n    //   ? {\n    //       id: transformValues?.counterPartyDealer?.id,\n    //       value: transformValues?.counterPartyDealer?.name,\n    //     }\n    //   : undefined,\n    [DealFormEnum.COUNTERPARTY_BANK]: transformValues?.counterPartyDealer?.id\n      ? {\n          value: transformValues.counterPartyDealer.id,\n          label: transformValues.counterPartyDealer.name,\n        }\n      : undefined,\n  });\n  // const formValues = {\n  //   [DealFormEnum.COUNTERPARTY]: transformValues?.counterParty\n  //     ? {\n  //         value: transformValues.counterParty.id,\n  //         label: transformValues.counterParty.name,\n  //       }\n  //     : undefined,\n  //   [DealFormEnum.COUNTERPARTY_BANK]: transformValues?.counterPartyDealer\n  //     ? {\n  //         value: transformValues.counterPartyDealer.id,\n  //         label: transformValues.counterPartyDealer.name,\n  //       }\n  //     : undefined,\n  //   [DealFormEnum.CONTACT_NUMBER]: listingIdData?.contactNumber,\n  // };\n\n  // console.log(\"Setting form values:\", formValues); // Debug\n  // form.setFieldsValue(formValues);\n}, [listingIdData, form]);\n\nreturn (\n    &lt;&gt;\n      &lt;Form\n        form={form}\n        // onValuesChange={handleValuesChange}\n        layout=\"vertical\"\n        className=\"currency-exchange-steps\"\n        onValuesChange={(changedValues, allValues) =&gt; {\n          // console.log(\n          //   \"changedValues[DealFormEnum?.FRESH_ROLL]: \",\n          //   changedValues[DealFormEnum?.FRESH_ROLL]\n          // );\n          // console.log(\n          //   \"MoneyMarketDealTypeEnum?.ROLL: \",\n          //   MoneyMarketDealTypeEnum?.ROLL\n          // );\n          if (\n            changedValues[DealFormEnum?.FRESH_ROLL] ===\n            MoneyMarketDealTypeEnum?.ROLL\n          ) {\n            const fieldsToReset = Object.keys(allValues).filter(\n              (field) =&gt; field !== DealFormEnum.FRESH_ROLL\n            );\n\n            // form.resetFields(fieldsToReset);\n          } else {\n            // console.log(\n            //   \"MoneyMarketDealTypeEnum?.ROLL: \",\n            //   MoneyMarketDealTypeEnum?.ROLL\n            // );\n            // const fieldsToReset = Object.keys(allValues).filter(\n            //   (field) =&gt; field !== DealFormEnum.FRESH_ROLL\n            // );\n            // console.log(\"FIELD TO RESET: \", fieldsToReset);\n            // form.resetFields(fieldsToReset);\n          }\n        }}\n        onFinish={onFinishSubmit}\n    &gt;\n             {/* IF ROLL */}\n          {!isDevelopmentMode &amp;&amp;\n          freshOrRollWatch === MoneyMarketDealTypeEnum?.ROLL ? (\n            &lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n              &lt;Form.Item\n                name=\"select\"\n                label=\"Select Reference Roll\"\n                rules={[{ required: false, message: \"\" }]}\n              &gt;\n                &lt;Select\n                  showSearch\n                  allowClear\n                  placeholder=\"Select an option\"\n                  onPopupScroll={handlePopupScroll}\n                  loading={isFetchingRollNextPage}\n                  filterOption={false} // disable built-in filtering if you do server search\n                  onSearch={handleSearch} // optional: implement server-side search\n                  notFoundContent={\n                    isFetchingRollNextPage ? &lt;Spin size=\"small\" /&gt; : null\n                  }\n                  onChange={(value) =&gt; {\n                    // handleSelect(value, DealFormEnum?.COUNTERPARTY);\n                    // handleUpdate();\n                    console.log(\"VALUE: \", value);\n                    triggerListingReferenceById({ id: value });\n                  }}\n                  // disabled={freshOrRollWatch === MoneyMarketDealTypeEnum?.ROLL}\n                &gt;\n                  {allResults.map((item) =&gt; (\n                    &lt;Option key={item.id} value={item.id}&gt;\n                      {item.ourPayBankAccountSwiftCode}\n                    &lt;/Option&gt;\n                  ))}\n                &lt;/Select&gt;\n              &lt;/Form.Item&gt;\n            &lt;/Col&gt;\n          ) : null}\n\n            {/* TYPE */}\n          {!isDevelopmentMode &amp;&amp;\n            freshOrRollWatch === MoneyMarketDealTypeEnum?.ROLL &amp;&amp; (\n              &lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n                &lt;Form.Item\n                  label=\"Roll Type\"\n                  name={DealFormEnum?.ROLL_TYPE}\n                  rules={[\n                    {\n                      required: isDevelopmentMode,\n                      message: \"Please Select Roll Type\",\n                    },\n                  ]}\n                &gt;\n                  &lt;Select\n                    allowClear\n                    showSearch\n                    filterOption={(input, option) =&gt;\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Roll/Type Type\"\n                    // disabled={\n                    //   freshOrRollWatch === MoneyMarketDealTypeEnum?.ROLL\n                    // }\n                    // onChange={handleUpdate}\n                  &gt;\n                    &lt;Option value={MMD_ROLL_TYPE?.PRINCIPLE_ONLY}&gt;\n                      Principle\n                    &lt;/Option&gt;\n                    &lt;Option value={MMD_ROLL_TYPE?.PRINCIPLE_INTEREST}&gt;\n                      Principle Interest\n                    &lt;/Option&gt;\n                  &lt;/Select&gt;\n                &lt;/Form.Item&gt;\n              &lt;/Col&gt;\n            )}\n          {/* END ROLL */}\n    &lt;/Form&gt;\n)\n</code></pre> <pre><code>disabled={freshOrRollWatch === MoneyMarketDealTypeEnum?.ROLL}\n</code></pre>"},{"location":"office/bank/basic/multipart/upload/","title":"Multipart \ud83d\udce6 - Upload","text":""},{"location":"office/bank/basic/multipart/upload/#upload","title":"Upload","text":""},{"location":"office/bank/basic/multipart/upload/#sending-multipart-data","title":"Sending Multipart Data","text":"Test<pre><code>import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Form, Input, Upload, Button } from \"antd\";\n\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport useFileUpload from \"@shared/hooks/useFileUpload\";\n\nimport { usePostUserProfilePictureMutation } from \"@features/internals/services/chunkApi\";\n\nimport MMDTabIndex from \"../../mmd/components/tabs/TabIndex\";\n\nexport default function TestUpload() {\n  const appUserId = useSelector((state) =&gt; state.auth.appUserId);\n  const [postProfilePicture] = usePostUserProfilePictureMutation();\n  const [form] = Form.useForm();\n  const MAX_UPLOAD = 1;\n  // const {\n  //   base64Files,\n  //   fileList,\n  //   handleFileChange,\n  //   handleRemoveFile,\n  //   resetFiles,\n  // } = useFileUpload(MAX_UPLOAD);\n\n  const [fileList, setFileList] = useState([]);\n\n  const onHandleChange = (value) =&gt; {\n    let newFileList = [...value.fileList];\n    newFileList = newFileList.map((file) =&gt; {\n      if (file.response) {\n        file.url = file.response.url;\n      }\n      return file;\n    });\n    setFileList(newFileList);\n  };\n\n  const onFinish = async (values) =&gt; {\n    // console.log(\"TYPES\", { ...values, file: base64Files });\n    // console.log(\"Received values of form: \", values, base64Files);\n\n    const formData = new FormData();\n    formData.append(\"title\", values.title);\n    if (values?.file &amp;&amp; fileList?.length &gt; 0) {\n      formData.append(\"file\", fileList[0].originFileObj);\n    }\n\n    try {\n      await postProfilePicture({ formData, id: appUserId }).unwrap();\n    } catch (err) {\n      console.log(\"Error\", err);\n    }\n  };\n\n  return (\n    &lt;&gt;\n      &lt;Form name=\"test\" form={form} onFinish={onFinish}&gt;\n        {/* &lt;Form.Item label=\"Field A\" name=\"input1\"&gt;\n          &lt;Input placeholder=\"input placeholder\" /&gt;\n        &lt;/Form.Item&gt;\n        &lt;Form.Item label=\"Field B\" name=\"input2\"&gt;\n          &lt;Input placeholder=\"input placeholder\" /&gt;\n        &lt;/Form.Item&gt;\n        &lt;Form.Item&gt;\n          &lt;Upload\n            maxCount={MAX_UPLOAD}\n            accept=\"image/*,.pdf\"\n            beforeUpload={handleFileChange}\n            listType=\"text\"\n            fileList={fileList}\n            onRemove={handleRemoveFile}\n            showUploadList={{\n              showRemoveIcon: true,\n            }}\n          &gt;\n            &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Click to Upload&lt;/Button&gt;\n          &lt;/Upload&gt;\n        &lt;/Form.Item&gt; */}\n\n        &lt;Form.Item label=\"Title\" name=\"title\"&gt;\n          &lt;Input placeholder=\"input placeholder\" /&gt;\n        &lt;/Form.Item&gt;\n        &lt;Form.Item\n          label=\"Image\"\n          name=\"file\"\n          fileList={fileList}\n          rules={[{ required: true, message: \"Please upload an image\" }]}\n        &gt;\n          &lt;Upload\n            listType=\"picture\"\n            accept=\"image/*\"\n            maxCount={1}\n            beforeUpload={() =&gt; false}\n            onChange={onHandleChange}\n          &gt;\n            &lt;Button&gt;Select Image&lt;/Button&gt;\n          &lt;/Upload&gt;\n        &lt;/Form.Item&gt;\n        &lt;Form.Item&gt;\n          &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n            Submit\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      &lt;/Form&gt;\n      &lt;hr /&gt;\n      {/* &lt;MMDTabIndex /&gt; */}\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"office/bank/basic/multipart/upload/#display-image-in-upload-antd","title":"Display Image in <code>Upload</code> antd","text":"<pre><code>import { useState } from \"react\";\nimport {\n  PlusOutlined,\n  EditTwoTone,\n  EyeTwoTone,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Input,\n  Select,\n  Space,\n  Divider,\n  Table,\n  Button,\n  Flex,\n  Form,\n  Row,\n  Col,\n  Typography,\n  Drawer,\n  Image,\n  Upload,\n} from \"antd\";\n\nimport {\n  useGetCountryQuery,\n  useGetProvinceByIdQuery,\n  useGetProvinceQuery,\n  usePostProvinceMutation,\n  usePutProvinceMutation,\n} from \"@features/settings/services/settingApi\";\n\nimport OneLineParagraph from \"@shared/components/Typography/OneLineParagraph\";\nimport withDrawer from \"@shared/hooks/withDrawer\";\nimport CustomButton from \"@shared/components/Button/CustomButton\";\nimport useDrawerReducer from \"@shared/hooks/useDrawerReducer\";\nimport CustomTable from \"@shared/components/Table/CustomTable\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { MODES } from \"@features/settings/utils/constants\";\nimport logger from \"@shared/utils/logger\";\n\nconst { Paragraph } = Typography;\n\nexport default function WebsiteLogo() {\n  const {\n    drawerVisible,\n    drawerMode,\n    selectedRecord,\n    onAdd,\n    onView,\n    onUpdate,\n    onClose,\n  } = useDrawerReducer();\n\n  const [form] = Form.useForm();\n\n  const [editSelectedId, setEditSelectedId] = useState(null);\n  const [viewSelectedId, setViewSelectedId] = useState(null);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  const [fileList, setFileList] = useState([\n    {\n      uid: \"-1\",\n      name: \"profile-picture.png\",\n      status: \"done\",\n      url: `${CONFIG.BASE_API_URL}/attachments/profile-pictures/be9b1e9e-0212-42c8-bfd2-75702092207c.PNG`,\n    },\n  ]);\n\n  const isView = drawerMode === MODES.VIEW;\n\n  const { data, isLoading, isError } = useGetProvinceQuery();\n  const {\n    data: viewModeData,\n    isLoading: isLoadingViewMode,\n    isError: isErrorViewMode,\n  } = useGetProvinceByIdQuery(\n    {\n      id: viewSelectedId,\n    },\n    {\n      skip: !viewSelectedId,\n    }\n  );\n  const {\n    data: editModeData,\n    isLoading: isLoadingEditMode,\n    isError: isErrorEditMode,\n  } = useGetProvinceByIdQuery(\n    {\n      id: editSelectedId,\n    },\n    {\n      skip: !editSelectedId,\n    }\n  );\n\n  const onCloseClick = () =&gt; {\n    form.resetFields();\n    onClose();\n    setEditSelectedId(null);\n    setViewSelectedId(null);\n  };\n\n  const onUpdateClick = (value) =&gt; {\n    onUpdate(value);\n    setEditSelectedId(value?.id);\n  };\n\n  const onViewClick = (value) =&gt; {\n    onView(value);\n    setViewSelectedId(value?.id);\n  };\n\n  const onChange = ({ fileList: newFileList }) =&gt; {\n    setFileList(newFileList);\n  };\n\n  const onHandleChange = (value) =&gt; {\n    let newFileList = [...value.fileList];\n    newFileList = newFileList.map((file) =&gt; {\n      if (file.response) {\n        file.url = file.response.url;\n      }\n      return file;\n    });\n    setFileList(newFileList);\n  };\n\n  const handleSubmit = async (values) =&gt; {};\n\n  const handleEditSubmit = async (values) =&gt; {};\n\n  //   const data = [\n  //     {\n  //       key: \"1\",\n  //       provinceName: \"Prabhu Bank\",\n  //       countryName: \"test.jpg\",\n  //     },\n  //   ];\n\n  const columns = [\n    {\n      title: \"S.N\",\n      dataIndex: \"serial\",\n      key: \"serial\",\n      width: \"80px\",\n      render: (_, __, index) =&gt; index + 1,\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"provinceName\",\n      key: \"provinceName\",\n    },\n    {\n      title: \"Logo\",\n      dataIndex: \"countryName\",\n      key: \"countryName\",\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (_, record) =&gt; (\n        &lt;Space size=\"middle\"&gt;\n          &lt;EyeTwoTone onClick={() =&gt; onViewClick(record)} /&gt;\n          &lt;EditTwoTone /&gt;\n        &lt;/Space&gt;\n      ),\n    },\n  ];\n\n  const commonFields = (\n    &lt;&gt;\n      &lt;Form.Item\n        label=\"Province Name\"\n        name=\"provinceName\"\n        rules={[{ message: \"Please enter Title\" }]}\n      &gt;\n        &lt;Input disabled={isView} /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item\n        label=\"Country\"\n        name=\"countryName\"\n        rules={[{ message: \"Select the Logo\" }]}\n      &gt;\n        &lt;Upload\n          //   action=\"/endpoint\"\n          listType=\"picture\"\n          fileList={fileList}\n          onChange={onChange}\n        &gt;\n          &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload&lt;/Button&gt;\n        &lt;/Upload&gt;\n      &lt;/Form.Item&gt;\n    &lt;/&gt;\n  );\n\n  const viewFields = (\n    &lt;Row&gt;\n      &lt;Col span={24}&gt;\n        &lt;Paragraph className=\"drawer-name\"&gt;Province Name&lt;/Paragraph&gt;\n        {console.log(\"viewModeData: \", viewModeData?.provinceName)}\n      &lt;/Col&gt;\n      &lt;Col span={24}&gt;\n        &lt;OneLineParagraph className=\"drawer-value\"&gt;\n          {viewModeData?.provinceName}\n        &lt;/OneLineParagraph&gt;\n      &lt;/Col&gt;\n      &lt;Col span={24}&gt;\n        &lt;Paragraph className=\"drawer-name\"&gt;Country&lt;/Paragraph&gt;\n      &lt;/Col&gt;\n      &lt;Col span={24}&gt;\n        &lt;Image\n          src={`${CONFIG.BASE_API_URL}attachments/profile-pictures/8f1da666-d9da-4134-b794-e30ff10ae4f9.jpeg`}\n        /&gt;\n        &lt;Image\n          src={`${CONFIG.BASE_API_URL}attachments/profile-pictures/be9b1e9e-0212-42c8-bfd2-75702092207c.PNG`}\n        /&gt;\n\n        {/* src=\"http://bk-api.info.com.np/api/filestorages/GetUserProfilePicture/1b06a918-4e81-4c57-138d-08dd41b2aa8d.png\" */}\n        {/* {console.log(\"TEST: \",{CONFIG.BASE_API_URL}/attachments/profile-pictures/be9b1e9e-0212-42c8-bfd2-75702092207c.PNG\")} */}\n        {/* profilePictureUrl   \"http://bk-api.info.com.np/api/filestorages/GetUserProfilePicture/1b06a918-4e81-4c57-138d-08dd41b2aa8d\" */}\n      &lt;/Col&gt;\n    &lt;/Row&gt;\n  );\n\n  return (\n    &lt;div&gt;\n      {data?.length &lt;= 1 &amp;&amp; (\n        &lt;Flex justify=\"end\"&gt;\n          &lt;CustomButton\n            type=\"primary\"\n            title=\"Add Logo\"\n            onClick={() =&gt; {\n              // form.resetFields();\n              // onAdd();\n            }}\n            icon={&lt;PlusOutlined /&gt;}\n          /&gt;\n        &lt;/Flex&gt;\n      )}\n\n      &lt;Divider&gt;&lt;/Divider&gt;\n      &lt;CustomTable\n        loading={isLoading}\n        columns={columns}\n        data={data}\n        pagination={false}\n        onChange={null}\n      /&gt;\n\n      &lt;EnhancedDrawer\n        drawerVisible={drawerVisible}\n        drawerMode={drawerMode}\n        onClose={onCloseClick}\n        isLoadingButton={isLoadingButton}\n        handleSubmit={handleSubmit}\n        handleEditSubmit={handleEditSubmit}\n        form={form}\n        selectedRecord={selectedRecord}\n        commonFields={commonFields}\n        viewFields={viewFields}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nconst EnhancedDrawer = withDrawer(Drawer);\n</code></pre>"},{"location":"office/bank/basic/multipart/upload/#itemrender","title":"itemRender","text":"<pre><code>{...(isEditOnly &amp;&amp; {\n  itemRender: (originNode, file) =&gt; {\n    const [thumbnail, info, actions] = originNode.props.children;\n    const className = info.props.className || \"\";\n    const newInfo = (\n      &lt;span\n        className={className}\n        style={{ cursor: \"default\", color: \"inherit\" }}\n      &gt;\n        {file?.fileDisplayName || file?.name}\n      &lt;/span&gt;\n    );\n\n    return React.cloneElement(\n      originNode,\n      {},\n      thumbnail,\n      newInfo,\n      actions\n    );\n  },\n})}\n</code></pre> <pre><code>&lt;Form.Item\n  label=\"File\"\n  name=\"file\"\n  rules={[{ required: false, message: \"Please upload an File\" }]}\n&gt;\n  &lt;Upload\n    listType=\"picture\"\n    accept=\".pdf,image/*\"\n    maxCount={4}\n    beforeUpload={() =&gt; false}\n    fileList={fileList}\n    onChange={onHandleChange}\n    {...(isEditOnly &amp;&amp; {\n      /*\n       * METHOD 1\n       */\n      // itemRender: (originNode, file) =&gt; {\n      //   const fullUrl = `${CONFIG.BASE_API_URL}${file.url}`;\n      //   return (\n      //     &lt;div&gt;\n      //       {/* &lt;a href={fullUrl} target=\"_blank\" rel=\"noopener noreferrer\"&gt;\n      //           {file.name}\n      //         &lt;/a&gt; */}\n      //       &lt;span&gt;{file?.fileDisplayName}&lt;/span&gt;\n      //     &lt;/div&gt;\n      //   );\n      // },\n      /*\n       *\n       *******************************************************************************\n       *\n       */\n      /*\n       * METHOD 2\n       * THIS REMOVES THE CLICKABLE href but UI DELETE icon not showing in proper place\n       */\n      // itemRender: (originNode, file) =&gt; {\n      //   const [thumbnail, , actions] = originNode.props.children; // skip original info\n      //   // Replace info (which is the clickable &lt;a&gt;) with plain &lt;span&gt;\n      //   const newInfo = &lt;span&gt;{file.name}&lt;/span&gt;;\n      //   return React.cloneElement(originNode, {}, thumbnail, newInfo, actions);\n      // },\n      /*\n       *\n       *******************************************************************************\n       *\n       */\n      /*\n       * METHOD 3\n       * IT IS WORKING but small issue: but in edit mode after uploading new file, the file stays in the file.name not in file.displayname\n       */\n      // itemRender: (originNode, file) =&gt; {\n      //   const [thumbnail, info, actions] = originNode.props.children;\n      //   // Extract original className from info, so styles remain consistent\n      //   const className = info.props.className || \"\";\n      //   // Create a non-clickable span but keep className and style from original info\n      //   const newInfo = (\n      //     &lt;span\n      //       className={className}\n      //       style={{ cursor: \"default\", color: \"inherit\" }}\n      //     &gt;\n      //       {file.fileDisplayName}\n      //     &lt;/span&gt;\n      //   );\n      //   return React.cloneElement(originNode, {}, thumbnail, newInfo, actions);\n      // },\n      /*\n       *\n       *******************************************************************************\n       *\n       * METHOD 4\n       * thumnail url: is clickable so if user clicks the url then there will be problem\n       *\n       *******************************************************************************\n       *\n       */\n      // itemRender: (originNode, file) =&gt; {\n      //   const [thumbnail, info, actions] = originNode.props.children;\n      //   const className = info.props.className || \"\";\n      //   const newInfo = (\n      //     &lt;span\n      //       className={className}\n      //       style={{ cursor: \"default\", color: \"inherit\" }}\n      //     &gt;\n      //       {file?.fileDisplayName || file?.name}\n      //     &lt;/span&gt;\n      //   );\n      //   return React.cloneElement(originNode, {}, thumbnail, newInfo, actions);\n      // },\n      /*\n       *\n       *******************************************************************************\n       *\n       * METHOD 5\n       * Working\n       *\n       *******************************************************************************\n       *\n       */\n      itemRender: (originNode, file) =&gt; {\n        const [thumbnail, info, actions] = originNode.props.children;\n\n        const cleanThumbnail = React.cloneElement(thumbnail, {\n          ...thumbnail.props,\n          onClick: undefined,\n          href: undefined,\n          style: { cursor: \"default\", ...thumbnail.props.style },\n        });\n\n        const className = info.props.className || \"\";\n        const newInfo = (\n          &lt;span\n            className={className}\n            style={{ cursor: \"default\", color: \"inherit\" }}\n          &gt;\n            {file?.fileDisplayName || file?.name}\n          &lt;/span&gt;\n        );\n\n        return React.cloneElement(\n          originNode,\n          {},\n          cleanThumbnail,\n          newInfo,\n          actions\n        );\n      },\n    })}\n  &gt;\n    &lt;Button&gt;Select Image&lt;/Button&gt;\n  &lt;/Upload&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code> {...(isEditOnly &amp;&amp; {\n  itemRender: (originNode, file) =&gt; {\n    const [thumbnail, info, actions] = originNode.props.children;\n\n    // \ud83d\udfe1 Remove onClick/href from thumbnail\n    const cleanThumbnail = React.cloneElement(thumbnail, {\n      ...thumbnail.props,\n      onClick: undefined, // remove onClick handler\n      href: undefined, // remove href if it exists\n      style: { cursor: \"default\", ...thumbnail.props.style },\n    });\n\n    // \ud83d\udfe1 Replace clickable link info with plain text but keep layout\n    const className = info.props.className || \"\";\n    const newInfo = (\n      &lt;span\n        className={className}\n        style={{ cursor: \"default\", color: \"inherit\" }}\n      &gt;\n        {file?.fileDisplayName || file?.name}\n      &lt;/span&gt;\n    );\n\n    return React.cloneElement(\n      originNode,\n      {},\n      cleanThumbnail,\n      newInfo,\n      actions\n    );\n  },\n})}\n</code></pre>"},{"location":"office/bank/basic/multipart/upload/#reference","title":"Reference","text":"<ul> <li>Upload: plexity</li> <li>Official: Antd Image</li> <li>Official: Antd upload</li> <li>Reference</li> </ul>"},{"location":"office/bank/basic/polling/manual/","title":"Polling - Manual","text":""},{"location":"office/bank/basic/polling/manual/#manual-polling","title":"Manual Polling","text":"<p>In RTK Query (Redux Toolkit Query), you can manually start and stop long polling (or more broadly, polling intervals) by using options like <code>refetchInterval</code>, and controlling it dynamically via conditions or component state.</p>"},{"location":"office/bank/basic/polling/manual/#basic","title":"Basic","text":""},{"location":"office/bank/basic/polling/manual/#how-to-startstop-polling-manually","title":"How to Start/Stop Polling Manually","text":"<p>RTK Query doesn't have a literal \"start/stop\" method for polling, but you can achieve the same effect by toggling the <code>refetchInterval</code> based on a condition.</p> Example<pre><code>const [polling, setPolling] = useState(false);\n\nconst { data, isLoading } = useGetDataQuery(undefined, {\n  pollingInterval: polling ? 5000 : 0, // polling every 5s if true, otherwise off\n});\n</code></pre> <p>Then, control it with buttons or events:</p> <pre><code>&lt;button onClick={() =&gt; setPolling(true)}&gt;Start Polling&lt;/button&gt;\n&lt;button onClick={() =&gt; setPolling(false)}&gt;Stop Polling&lt;/button&gt;\n</code></pre>"},{"location":"office/bank/basic/polling/manual/#how-it-works","title":"How It Works","text":"<ul> <li><code>pollingInterval: 0</code> disables polling.</li> <li><code>pollingInterval: N</code> (e.g. 5000) sets the interval in milliseconds.</li> <li>Changing the value automatically restarts or stops polling.</li> </ul>"},{"location":"office/bank/basic/polling/manual/#alternative-refetchonfocus-refetchonreconnect","title":"Alternative: refetchOnFocus, refetchOnReconnect","text":"<p>You can also set RTK Query to refetch based on user interactions or network status, which is not manual polling but can complement your UX.</p> <pre><code>useGetDataQuery(undefined, {\n  refetchOnFocus: true,\n  refetchOnReconnect: true,\n});\n</code></pre>"},{"location":"office/bank/basic/polling/manual/#intermediate","title":"Intermediate","text":"<p>In RTK Query, manual control of polling (i.e. start and stop on demand) is achieved using the <code>pollingInterval</code> option \u2014 and by toggling that value based on your own state.</p> <p>While RTK Query doesn\u2019t provide explicit <code>.startPolling()</code> or <code>.stopPolling()</code> methods, you can fully control polling manually by managing the polling interval conditionally.</p> Step-by-Step: Manual Polling Control in RTK Query <ol> <li> <p>Use <code>useState</code> to track whether polling is on or off</p> <pre><code>const [isPolling, setIsPolling] = useState(false);\n</code></pre> </li> <li> <p>Use <code>useQuery</code> (or auto-generated hook) with conditional <code>pollingInterval</code></p> <pre><code>const { data, refetch, isFetching } = useGetUsersQuery(undefined, {\n    pollingInterval: isPolling ? 5000 : 0, // Poll every 5s or stop\n});\n</code></pre> </li> <li> <p>Create buttons or events to toggle</p> <pre><code>&lt;Button onClick={() =&gt; setIsPolling(true)}&gt;Start Polling&lt;/Button&gt;\n&lt;Button onClick={() =&gt; setIsPolling(false)}&gt;Stop Polling&lt;/Button&gt;\n</code></pre> </li> </ol> <p>\ud83d\udd01 What Happens Under the Hood</p> <ul> <li>RTK Query watches the <code>pollingInterval</code> value \u2014 changing it restarts or stops the polling.</li> <li>Setting it to <code>0</code> effectively turns off polling.</li> <li>Changing it to a number (e.g. <code>5000</code>) starts polling on that interval in milliseconds.</li> </ul> <p>\ud83e\udde0 Bonus: Refetch on demand</p> <p>You can also always allow a manual refetch via the <code>refetch()</code> method:</p> <pre><code>&lt;Button onClick={() =&gt; refetch()}&gt;Manual Refresh&lt;/Button&gt;\n</code></pre>"},{"location":"office/bank/branch/back-swift-office/","title":"BackOffice - back-swift-office","text":""},{"location":"office/bank/branch/back-swift-office/#back-swift-office-pagination","title":"Back Swift Office PAGINATION","text":"<pre><code>export const useBackOfficeColumn = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n\n  //   PAGINATION\n  const [pagination, setPagination] = useState({ current: 1, pageSize: 1 });\n\n  const handleOpenModal = useCallback((record) =&gt; {\n    setSelectedRecord(record);\n    setIsModalOpen(true);\n\n    // PAGINATION\n    setPagination((prev) =&gt; ({ ...prev, current: 1 }));\n  }, []);\n\n  const handleCloseModal = useCallback((record) =&gt; {\n    setSelectedRecord(null);\n    setIsModalOpen(false);\n  }, []);\n\n  // \ud83d\udfe2 Fetch documents when pagination or record changes\n  useEffect(() =&gt; {\n    if (selectedRecord) {\n      triggerFetchDocuments({\n        id: selectedRecord.id,\n        pageSize: pagination.pageSize,\n        page: pagination.current,\n      });\n    }\n  }, [pagination, selectedRecord, triggerFetchDocuments]);\n};\n</code></pre> <pre><code>import { useState, useCallback, useEffect } from \"react\";\nimport { Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\nimport {\n  useLazyGetTestBackOfficePaginationQuery,\n  usePostTestUploadBackOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nconst { Text } = Typography;\n\nexport const useBackOfficeColumn = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n\n  const [pagination, setPagination] = useState({ current: 1, pageSize: 10 });\n\n  const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n    useLazyGetTestBackOfficePaginationQuery();\n\n  const [uploadFiles, { isLoading: uploading }] =\n    usePostTestUploadBackOfficeMutation();\n\n  // \ud83d\udfe1 Fetch documents when modal opens\n  const handleOpenModal = useCallback((record) =&gt; {\n    setSelectedRecord(record);\n    setPagination((prev) =&gt; ({ ...prev, current: 1 })); // Optional: reset to page 1\n    setIsModalOpen(true);\n  }, []);\n\n  // \ud83d\udd34 Modal close cleanup\n  const handleCloseModal = useCallback(() =&gt; {\n    setSelectedRecord(null);\n    setIsModalOpen(false);\n  }, []);\n\n  // \ud83d\udfe2 Fetch documents when pagination or record changes\n  useEffect(() =&gt; {\n    if (selectedRecord) {\n      triggerFetchDocuments({\n        id: selectedRecord.id,\n        pageSize: pagination.pageSize,\n        page: pagination.current,\n      });\n    }\n  }, [pagination, selectedRecord, triggerFetchDocuments]);\n\n  // \ud83d\udfe0 Upload files handler\n  const handleUpload = async (files) =&gt; {\n    const formData = new FormData();\n    files.forEach((file, index) =&gt; {\n      formData.append(`files${index + 1}`, file);\n    });\n\n    await uploadFiles({ id: selectedRecord.id, formData }).unwrap();\n\n    // Refetch after upload\n    triggerFetchDocuments({\n      id: selectedRecord.id,\n      pageSize: pagination.pageSize,\n      page: pagination.current,\n    });\n  };\n\n  // \ud83d\udfe3 Table column config\n  const backOfficeCol = {\n    title: \"Back Office Documents\",\n    key: \"documents\",\n    render: (_, record) =&gt; (\n      &lt;div style={{ textAlign: \"center\" }}&gt;\n        &lt;UploadOutlined\n          style={{ cursor: \"pointer\" }}\n          onClick={() =&gt; handleOpenModal(record)}\n        /&gt;\n      &lt;/div&gt;\n    ),\n    fixed: \"right\",\n  };\n\n  return {\n    backOfficeCol,\n    modal: (\n      &lt;UploadDocuments\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        record={selectedRecord}\n        title=\"Back Office\"\n        onUpload={handleUpload}\n        uploading={uploading}\n        documents={documentsData?.items || []}\n        loading={isLoading}\n        pagination={pagination}\n        setPagination={setPagination}\n      /&gt;\n    ),\n  };\n};\n</code></pre> <p>\u2705 What Was Fixed / Added</p> Problem Fix Pagination not triggering API Added <code>useEffect</code> that watches <code>pagination</code> &amp; <code>selectedRecord</code> Modal not resetting page Optional reset to <code>page 1</code> on modal open Upload doesn't refresh Added refetch after successful upload Missing cursor on icon Added <code>cursor: \"pointer\"</code> to <code>UploadOutlined</code>"},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/","title":"Deal Report List - BACKOFFICE, SWIFT DOC","text":""},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#backoffice-swift-upload-column","title":"BackOffice Swift Upload Column","text":""},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#updated-with-base64-upload-useswiftofficecolumnjsx","title":"Updated with Base64 Upload <code>useSwiftOfficeColumn.jsx</code>","text":"<p><code>features/dealReportList/hooks/useSwiftOfficeColumn.jsx</code></p> NOW <code>base64</code>PREVIOUS <code>multipart</code> useSwiftOfficeColumn.jsx<pre><code>import { useState, useEffect, useCallback } from \"react\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\nimport { useUploadOperationMutation } from \"@features/dealReportList/utils/dealReportApi\";\n\nimport {\n    useLazyGetTestSwiftOfficePaginationQuery,\n    usePostTestUploadSwiftOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\n// added\nimport useFileUpload from \"@shared/hooks/useFileUpload\";\n\nexport const useSwiftOfficeColumn = () =&gt; {\n    // added\n    const {\n        base64Files,\n        fileList,\n        handleFileChange,\n        handleRemoveFile,\n        resetFiles,\n    } = useFileUpload(4);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedRecord, setSelectedRecord] = useState(null);\n\n    const [pagination, setPagination] = useState({ current: 1, pageSize: 1 });\n\n    // hooks\n    const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n        useLazyGetTestSwiftOfficePaginationQuery();\n    // const [uploadFiles, { isLoading: uploading }] =\n    //   usePostTestUploadSwiftOfficeMutation();\n\n    const [uploadFiles, { isLoading: uploading }] = useUploadOperationMutation();\n\n    const handleOpenModal = useCallback((record) =&gt; {\n        setSelectedRecord(record);\n        setIsModalOpen(true);\n        setPagination((prev) =&gt; ({ ...prev, current: 1 }));\n    }, []);\n\n    const handleCloseModal = useCallback((record) =&gt; {\n        setSelectedRecord(null);\n        setIsModalOpen(false);\n    }, []);\n\n    const swiftOfficeCol = {\n        title: \"Swift Office Documents\",\n        key: \"documents\",\n        render: (_, record) =&gt; (\n            &lt;div style={{ textAlign: \"center\" }}&gt;\n                &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;\n            &lt;/div&gt;\n        ),\n        fixed: \"right\",\n    };\n\n    const columns = [\n        {\n            title: \"S.N\",\n            dataIndex: \"serial\",\n            key: \"serial\",\n            width: \"80px\",\n            render: (_text, _record, index) =&gt; {\n                return (pagination.current - 1) * pagination.pageSize + index + 1;\n            },\n        },\n        { title: \"Counter Party\", dataIndex: \"counterParty\", key: \"counterParty\" },\n    ];\n\n    const handleUpload = async (files) =&gt; {\n        const formData = new FormData();\n\n        files.forEach((index, file) =&gt; {\n            formData.append(`files${index + 1}`, file);\n        });\n\n        await uploadFiles({ id: selectedRecord.id, file: base64Files }).unwrap();\n    };\n\n    useEffect(() =&gt; {\n        if (selectedRecord) {\n            triggerFetchDocuments({\n                id: selectedRecord.id,\n                pageSize: pagination.pageSize,\n                page: pagination.current,\n            });\n        }\n    }, [pagination, selectedRecord, triggerFetchDocuments]);\n\n    return {\n        swiftOfficeCol,\n        modal: (\n            &lt;UploadDocuments\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                record={selectedRecord}\n                title=\"Swift Office\"\n                onUpload={handleUpload}\n                uploading={uploading}\n                documents={documentsData?.items || []}\n                loading={isLoading}\n                pagination={pagination}\n                setPagination={setPagination}\n                columns={columns}\n                // add for file upload\n                base64Files={base64Files}\n                fileList={fileList}\n                handleFileChange={handleFileChange}\n                handleRemoveFile={handleRemoveFile}\n                resetFiles={resetFiles}\n            /&gt;\n        ),\n    };\n};\n</code></pre> useSwiftOfficeColumn.jsx<pre><code>import { useState, useEffect, useCallback } from \"react\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\n\nimport {\n    useLazyGetTestSwiftOfficePaginationQuery,\n    usePostTestUploadSwiftOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nexport const useSwiftOfficeColumn = () =&gt; {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedRecord, setSelectedRecord] = useState(null);\n\n    const [pagination, setPagination] = useState({ current: 1, pageSize: 1 });\n\n    // hooks\n    const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n        useLazyGetTestSwiftOfficePaginationQuery();\n    const [uploadFiles, { isLoading: uploading }] =\n        usePostTestUploadSwiftOfficeMutation();\n\n    const handleOpenModal = useCallback((record) =&gt; {\n        setSelectedRecord(record);\n        setIsModalOpen(true);\n        setPagination((prev) =&gt; ({ ...prev, current: 1 }));\n    }, []);\n\n    const handleCloseModal = useCallback((record) =&gt; {\n        setSelectedRecord(null);\n        setIsModalOpen(false);\n    }, []);\n\n    const swiftOfficeCol = {\n        title: \"Swift Office Documents\",\n        key: \"documents\",\n        render: (_, record) =&gt; (\n            &lt;div style={{ textAlign: \"center\" }}&gt;\n                &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;\n            &lt;/div&gt;\n        ),\n        fixed: \"right\",\n    };\n\n    const columns = [\n        {\n            title: \"S.N\",\n            dataIndex: \"serial\",\n            key: \"serial\",\n            width: \"80px\",\n            render: (_text, _record, index) =&gt; {\n                return (pagination.current - 1) * pagination.pageSize + index + 1;\n            },\n        },\n        { title: \"Counter Party\", dataIndex: \"counterParty\", key: \"counterParty\" },\n    ];\n\n    const handleUpload = async (files) =&gt; {\n        const formData = new FormData();\n\n        files.forEach((index, file) =&gt; {\n            formData.append(`files${index + 1}`, file);\n        });\n\n        await uploadFiles({ id: selectedRecord.id, formData }).unwrap();\n    };\n\n    useEffect(() =&gt; {\n        if (selectedRecord) {\n            triggerFetchDocuments({\n                id: selectedRecord.id,\n                pageSize: pagination.pageSize,\n                page: pagination.current,\n            });\n        }\n    }, [pagination, selectedRecord, triggerFetchDocuments]);\n\n    return {\n        swiftOfficeCol,\n        modal: (\n            &lt;UploadDocuments\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                record={selectedRecord}\n                title=\"Swift Office\"\n                onUpload={handleUpload}\n                uploading={uploading}\n                documents={documentsData?.items || []}\n                loading={isLoading}\n                pagination={pagination}\n                setPagination={setPagination}\n                columns={columns}\n            /&gt;\n        ),\n    };\n};\n</code></pre>"},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#updated-with-base64-upload-usebackofficecolumnjsx","title":"Updated with Base64 Upload <code>useBackOfficeColumn.jsx</code>","text":"<p><code>features/dealReportList/hooks/useBackOfficeColumn.jsx</code></p> NOW <code>base64</code>PREVIOUS <code>multipart</code> useBackOfficeColumn.jsx<pre><code>import { useState, useEffect, useCallback } from \"react\";\nimport { Typography, Popconfirm, Space } from \"antd\";\nimport { UploadOutlined, EyeTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\nimport {\n    useLazyGetTestBackOfficePaginationQuery,\n    usePostTestUploadBackOfficeMutation,\n    useDeleteTestBackOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nimport useFileUpload from \"@shared/hooks/useFileUpload\";\n\nconst { Text } = Typography;\n\nexport const useBackOfficeColumn = () =&gt; {\n    const {\n        base64Files,\n        fileList,\n        handleFileChange,\n        handleRemoveFile,\n        resetFiles,\n    } = useFileUpload(4);\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedRecord, setSelectedRecord] = useState(null);\n\n    const [pagination, setPagination] = useState({ current: 1, pageSize: 100 });\n\n    const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n        useLazyGetTestBackOfficePaginationQuery();\n    const [uploadFiles, { isLoading: uploading }] =\n        usePostTestUploadBackOfficeMutation();\n\n    const [\n        deleteDeal,\n        {\n            isLoading: isLoadingDelete,\n            isError: isErrorDelete,\n            error: errorDelete,\n            isSuccess: isSuccessDelete,\n        },\n    ] = useDeleteTestBackOfficeMutation();\n\n    const handleOpenModal = useCallback((record) =&gt; {\n        setSelectedRecord(record);\n        setIsModalOpen(true);\n        setPagination((prev) =&gt; ({ ...prev, current: 1 }));\n    }, []);\n\n    const handleCloseModal = useCallback((record) =&gt; {\n        setSelectedRecord(null);\n        setIsModalOpen(false);\n    }, []);\n\n    const handleUpload = async (files) =&gt; {\n        const formData = new FormData();\n\n        files.forEach((file, index) =&gt; {\n            formData.append(`files${index + 1}`, file);\n        });\n\n        await uploadFiles({ id: selectedRecord.id, formData }).unwrap();\n    };\n\n    const backOfficeCol = {\n        title: \"Back Office Documents\",\n        key: \"documents\",\n        render: (_, record) =&gt; (\n        &lt;div style={{ textAlign: \"center\" }}&gt;\n            {/* View Details */}\n            &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;\n        &lt;/div&gt;\n        ),\n        fixed: \"right\",\n    };\n\n    const columns = [\n        {\n            title: \"S.N\",\n            dataIndex: \"serial\",\n            key: \"serial\",\n            width: \"80px\",\n            render: (_text, _record, index) =&gt; {\n                return (pagination.current - 1) * pagination.pageSize + index + 1;\n            },\n        },\n        { title: \"File Name\", dataIndex: \"filename\", key: \"filename\" },\n        {\n            title: \"Action\",\n            fixed: \"right\",\n            key: \"action\",\n            width: 150,\n            render: (_, record) =&gt; {\n                return (\n                    &lt;Space&gt;\n                        &lt;a\n                            href=\"https://bk-api.info.com.np/attachments/forex/deal-chat-files/c9f04d04-98d2-4202-90af-7b3ce3191fd8.pdf\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        &gt;\n                            &lt;EyeTwoTone /&gt;\n                        &lt;/a&gt;\n\n                        {record?.id === record?.creatorId &amp;&amp; (\n                            &lt;Popconfirm\n                                title=\"Are you sure to delete this item?\"\n                                okText=\"Yes\"\n                                cancelText=\"No\"\n                                onConfirm={async () =&gt; {\n                                    try {\n                                        await deleteDeal({\n                                            id: record.id,\n                                            payload: { isActive: true },\n                                        }).unwrap();\n                                    } catch (error) {\n                                        console.error(\"Delete failed:\", error);\n                                    }\n                                }}\n                            &gt;\n                                &lt;DeleteTwoTone\n                                    twoToneColor=\"#eb2f96\"\n                                    style={{ cursor: \"pointer\" }}\n                                /&gt;\n                            &lt;/Popconfirm&gt;\n                        )}\n                    &lt;/Space&gt;\n                );\n            },\n        },\n    ];\n\n    useEffect(() =&gt; {\n        if (selectedRecord) {\n            triggerFetchDocuments({\n                id: selectedRecord.id,\n                pageSize: pagination.pageSize,\n                page: pagination.current,\n            });\n        }\n    }, [pagination, selectedRecord, triggerFetchDocuments]);\n\n    return {\n        backOfficeCol,\n        modal: (\n            &lt;UploadDocuments\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                record={selectedRecord}\n                title=\"Back Office\"\n                onUpload={handleUpload}\n                uploading={uploading}\n                documents={documentsData || []}\n                loading={isLoading}\n                pagination={pagination}\n                setPagination={setPagination}\n                columns={columns}\n                base64Files={base64Files}\n                fileList={fileList}\n                handleFileChange={handleFileChange}\n                handleRemoveFile={handleRemoveFile}\n                resetFiles={resetFiles}\n            /&gt;\n        ),\n    };\n};\n</code></pre> useBackOfficeColumn.jsx<pre><code>import { useState, useEffect, useCallback } from \"react\";\nimport { Typography, Popconfirm, Space } from \"antd\";\nimport { UploadOutlined, EyeTwoTone, DeleteTwoTone } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\nimport {\n    useLazyGetTestBackOfficePaginationQuery,\n    usePostTestUploadBackOfficeMutation,\n    useDeleteTestBackOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nconst { Text } = Typography;\n\nexport const useBackOfficeColumn = () =&gt; {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedRecord, setSelectedRecord] = useState(null);\n    const [pagination, setPagination] = useState({ current: 1, pageSize: 100 });\n\n    const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n        useLazyGetTestBackOfficePaginationQuery();\n    const [uploadFiles, { isLoading: uploading }] =\n        usePostTestUploadBackOfficeMutation();\n    const [\n        deleteDeal,\n        {\n            isLoading: isLoadingDelete,\n            isError: isErrorDelete,\n            error: errorDelete,\n            isSuccess: isSuccessDelete,\n        },\n    ] = useDeleteTestBackOfficeMutation();\n\n    const handleOpenModal = useCallback((record) =&gt; {\n        setSelectedRecord(record);\n        setIsModalOpen(true);\n        setPagination((prev) =&gt; ({ ...prev, current: 1 }));\n    }, []);\n\n    const handleCloseModal = useCallback((record) =&gt; {\n        setSelectedRecord(null);\n        setIsModalOpen(false);\n    }, []);\n\n    const handleUpload = async (files) =&gt; {\n        const formData = new FormData();\n\n        files.forEach((file, index) =&gt; {\n            formData.append(`files${index + 1}`, file);\n        });\n        await uploadFiles({ id: selectedRecord.id, formData }).unwrap();\n    };\n\n    const backOfficeCol = {\n        title: \"Back Office Documents\",\n        key: \"documents\",\n        render: (_, record) =&gt; (\n            &lt;div style={{ textAlign: \"center\" }}&gt;\n                &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;{\" \"}\n            &lt;/div&gt;\n        ),\n        fixed: \"right\",\n    };\n\n    const columns = [\n        {\n            title: \"S.N\",\n            dataIndex: \"serial\",\n            key: \"serial\",\n            width: \"80px\",\n            render: (_text, _record, index) =&gt; {\n                return (pagination.current - 1) * pagination.pageSize + index + 1;\n            },\n        },\n        { title: \"File Name\", dataIndex: \"filename\", key: \"filename\" },\n        {\n            title: \"Action\",\n            fixed: \"right\",\n            key: \"action\",\n            width: 150,\n            render: (_, record) =&gt; {\n                return (\n                    &lt;Space&gt;\n                        &lt;a\n                            href=\"https://bk-api.info.com.np/attachments/forex/deal-chat-files/c9f04d04-98d2-4202-90af-7b3ce3191fd8.pdf\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        &gt;\n                        &lt;EyeTwoTone /&gt;\n                        &lt;/a&gt;\n\n                        {record?.id === record?.creatorId &amp;&amp; (\n                            &lt;Popconfirm\n                                title=\"Are you sure to delete this item?\"\n                                okText=\"Yes\"\n                                cancelText=\"No\"\n                                onConfirm={async () =&gt; {\n                                try {\n                                    await deleteDeal({\n                                    id: record.id,\n                                    payload: { isActive: true },\n                                    }).unwrap();\n                                } catch (error) {\n                                    console.error(\"Delete failed:\", error);\n                                }\n                                }}\n                            &gt;\n                                &lt;DeleteTwoTone\n                                    twoToneColor=\"#eb2f96\"\n                                    style={{ cursor: \"pointer\" }}\n                                /&gt;\n                            &lt;/Popconfirm&gt;\n                        )}\n                    &lt;/Space&gt;\n                );\n            },\n        },\n    ];\n\n    useEffect(() =&gt; {\n        if (selectedRecord) {\n            triggerFetchDocuments({\n                id: selectedRecord.id,\n                pageSize: pagination.pageSize,\n                page: pagination.current,\n            });\n        }\n    }, [pagination, selectedRecord, triggerFetchDocuments]);\n\n    return {\n        backOfficeCol,\n        modal: (\n            &lt;UploadDocuments\n                isOpen={isModalOpen}\n                onClose={handleCloseModal}\n                record={selectedRecord}\n                title=\"Back Office\"\n                onUpload={handleUpload}\n                uploading={uploading}\n                documents={documentsData || []}\n                loading={isLoading}\n                pagination={pagination}\n                setPagination={setPagination}\n                columns={columns}\n            /&gt;\n        ),\n    };\n};\n</code></pre>"},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#uploaddocumentsjsx","title":"<code>UploadDocuments.jsx</code>","text":"<p><code>features/dealReportList/components/shared/UploadDocuments.jsx\"</code></p> NOW <code>base64</code>PREVIOUS <code>multipart</code> UploadDocuments.jsx<pre><code>import { useState, useEffect } from \"react\";\nimport { Button, Divider, Modal, Upload, Table } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport CustomTable from \"@shared/components/Table/CustomTable\";\n\nconst UploadDocuments = ({\n    isOpen,\n    onClose,\n    record,\n    title,\n    onUpload,\n    uploading,\n    documents,\n    loading,\n    pagination,\n    setPagination,\n    columns,\n    base64Files,\n    fileList,\n    handleFileChange,\n    handleRemoveFile,\n    resetFiles,\n}) =&gt; {\n    // const [fileList, setFileList] = useState([]);\n    // const [uploading, setUploading] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isOpen) {\n        // setFileList([]);\n        // setUploading(false);\n        resetFiles();\n        }\n    }, [isOpen]);\n\n    // const props = {\n    //   onRemove: (file) =&gt; {\n    //     const index = fileList.indexOf(file);\n    //     const newFileList = fileList.slice();\n    //     newFileList.splice(index, 1);\n    //     setFileList(newFileList);\n    //   },\n    //   beforeUpload: (file) =&gt; {\n    //     setFileList([...fileList, file]);\n    //     return false;\n    //   },\n    //   fileList,\n    // };\n\n    // const columns = [\n    //   {\n    //     title: \"S.N\",\n    //     dataIndex: \"serial\",\n    //     key: \"serial\",\n    //     width: \"80px\",\n    //     render: (_text, _record, index) =&gt; {\n    //       return (pagination.current - 1) * pagination.pageSize + index + 1;\n    //     },\n    //   },\n    //   { title: \"Counter Party\", dataIndex: \"counterParty\", key: \"counterParty\" },\n    // ];\n\n    const handleUpload = async () =&gt; {\n        await onUpload(fileList);\n        // setFileList([]);\n        resetFiles();\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Modal\n            open={isOpen}\n            title={\n                title\n                    ? `${title}: ${record?.counterPartyName}`\n                    : `${record?.counterPartyName}`\n                }\n            width=\"60%\"\n            maskClosable={false}\n            onOk={onClose}\n            onCancel={onClose}\n            footer={null}\n        &gt;\n            &lt;&gt;\n            {/* &lt;Upload {...props}&gt; */}\n            &lt;Upload\n                multiple={true}\n                maxCount={2}\n                accept=\"image/*,.pdf\"\n                beforeUpload={handleFileChange}\n                listType=\"text\"\n                fileList={fileList}\n                onRemove={handleRemoveFile}\n                showUploadList={{\n                    showRemoveIcon: true,\n                }}\n            &gt;\n                &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload File&lt;/Button&gt;\n            &lt;/Upload&gt;\n\n            {fileList?.length !== 0 &amp;&amp; (\n                &lt;Button\n                    type=\"primary\"\n                    onClick={handleUpload}\n                    loading={uploading}\n                    style={{ marginTop: 16 }}\n                &gt;\n                {uploading ? \"Uploading...\" : \"Upload\"}\n                &lt;/Button&gt;\n            )}\n\n            &lt;Divider /&gt;\n            &lt;/&gt;\n\n            &lt;CustomTable\n                columns={columns}\n                data={documents?.items || []}\n                scroll={{ y: 400 }}\n                pagination={{\n                    current: pagination.current,\n                    pageSize: pagination.pageSize,\n                    total: documents?.total,\n                    onChange: (page, pageSize) =&gt; {\n                        setPagination({ current: page, pageSize });\n                    },\n                }}\n            /&gt;\n        &lt;/Modal&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default UploadDocuments;\n</code></pre> UploadDocuments.jsx<pre><code>import { useState, useEffect } from \"react\";\nimport { Button, Divider, Modal, Upload, Table } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport CustomTable from \"@shared/components/Table/CustomTable\";\n\nconst UploadDocuments = ({\n    isOpen,\n    onClose,\n    record,\n    title,\n    onUpload,\n    uploading,\n    documents,\n    loading,\n    pagination,\n    setPagination,\n    columns,\n}) =&gt; {\n\n    const [fileList, setFileList] = useState([]);\n    // const [uploading, setUploading] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isOpen) {\n            setFileList([]);\n            // setUploading(false);\n        }\n    }, [isOpen]);\n\n    const props = {\n        onRemove: (file) =&gt; {\n            const index = fileList.indexOf(file);\n            const newFileList = fileList.slice();\n            newFileList.splice(index, 1);\n            setFileList(newFileList);\n        },\n        beforeUpload: (file) =&gt; {\n            setFileList([...fileList, file]);\n            return false;\n        },\n        fileList,\n    };\n\n    // const columns = [\n    //   {\n    //     title: \"S.N\",\n    //     dataIndex: \"serial\",\n    //     key: \"serial\",\n    //     width: \"80px\",\n    //     render: (_text, _record, index) =&gt; {\n    //       return (pagination.current - 1) * pagination.pageSize + index + 1;\n    //     },\n    //   },\n    //   { title: \"Counter Party\", dataIndex: \"counterParty\", key: \"counterParty\" },\n    // ];\n\n    const handleUpload = async () =&gt; {\n        await onUpload(fileList);\n        setFileList([]);\n    };\n\n    return (\n        &lt;&gt;\n            &lt;Modal\n                open={isOpen}\n                title={\n                    title\n                        ? `${title}: ${record?.counterPartyName}`\n                        : `${record?.counterPartyName}`\n                }\n                width=\"60%\"\n                maskClosable={false}\n                onOk={onClose}\n                onCancel={onClose}\n                footer={null}\n            &gt;\n                &lt;&gt;\n                &lt;Upload {...props}&gt;\n                    &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Upload File&lt;/Button&gt;\n                &lt;/Upload&gt;\n\n                {fileList.length !== 0 &amp;&amp; (\n                    &lt;Button\n                        type=\"primary\"\n                        onClick={handleUpload}\n                        loading={uploading}\n                        style={{ marginTop: 16 }}\n                    &gt;\n                        {uploading ? \"Uploading...\" : \"Upload\"}\n                    &lt;/Button&gt;\n                )}\n\n                &lt;Divider /&gt;\n                &lt;/&gt;\n\n                &lt;CustomTable\n                    columns={columns}\n                    data={documents?.items || []}\n                    scroll={{ y: 400 }}\n                    pagination={{\n                        current: pagination.current,\n                        pageSize: pagination.pageSize,\n                        total: documents?.total,\n                        onChange: (page, pageSize) =&gt; {\n                        setPagination({ current: page, pageSize });\n                        },\n                    }}\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default UploadDocuments;\n</code></pre>"},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#api-sample","title":"API SAMPLE","text":"uploadDocumentsApi.js<pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport {\n  NotificationType,\n  NotificationPlacement,\n  NotificationDuration,\n} from \"@shared/utils/notification\";\n\nexport const uploadDocumentsApi = createApi({\n  reducerPath: \"uploadDocumentsApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"uploadDocumentsApi\"],\n  endpoints: (builder) =&gt; ({\n    getDealReportBackOfficeDocumentsById: builder.query({\n      query: ({ page, pageSize, type, searchTerm }) =&gt; {\n        const queryParam = queryString.stringify({\n          page,\n          pageSize,\n          type,\n          ...(searchTerm &amp;&amp; { search: searchTerm }),\n        });\n\n        return {\n          url: `AppCommons/GetDealMaturityList?${queryParam}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n      providesTags: [\"uploadDocumentsApi\"],\n      keepUnusedDataFor: 0,\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the today Deal Report list.\",\n            1\n          );\n        }\n      },\n    }),\n\n    // WITH MULTIPART\n    uploadDealReports: builder.mutation({\n      query: (files) =&gt; {\n        const formData = new FormData();\n        files.forEach((file) =&gt; {\n          formData.append(\"files\", file);\n        });\n\n        return {\n          url: `AppCommons/UploadDealReports`,\n          method: HTTP_METHODS.POST,\n          data: formData,\n        };\n      },\n      invalidatesTags: [\"uploadDocumentsApi\"],\n\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Excel files uploaded successfully.\",\n            NotificationDuration.SHORT\n          );\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Upload Failed\",\n            err?.error?.data?.title ||\n              \"An error occurred while uploading the Excel files.\",\n            NotificationDuration.SHORT\n          );\n        }\n      },\n    }),\n\n    // WITH BASE64\n    uploadOperation: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"ForexDeal/UpdateForexOperation\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Approved successfully.\",\n            3\n          );\n          dispatch(forexApi.util.invalidateTags([\"Forex\"]));\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the Forex deal Approval.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n});\n</code></pre>"},{"location":"office/bank/branch/deal-report-list-backoffice-swift-doc/#api-implementation","title":"API Implementation","text":"dealReportApi.js<pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport queryString from \"query-string\";\n\nimport { axiosBaseQuery } from \"@shared/services/axios/axiosBaseQuery\";\nimport { HTTP_METHODS } from \"@shared/utils/httpMethods\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport { notify } from \"@shared/utils/notificationUtils\";\nimport {\n  NotificationType,\n  NotificationPlacement,\n  NotificationDuration,\n} from \"@shared/utils/notification\";\nimport logger from \"@shared/utils/logger\";\n\nexport const dealReportApi = createApi({\n  reducerPath: \"dealReportApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"dealReportApi\"],\n  endpoints: (builder) =&gt; ({\n    getDealReportBackOfficeDocumentsById: builder.query({\n      query: ({ page, pageSize, type, searchTerm }) =&gt; {\n        const queryParam = queryString.stringify({\n          page,\n          pageSize,\n          type,\n          ...(searchTerm &amp;&amp; { search: searchTerm }),\n        });\n\n        return {\n          url: `AppCommons/GetDealMaturityList?${queryParam}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n      providesTags: [\"dealReportApi\"],\n      keepUnusedDataFor: 0,\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the today Deal Report list.\",\n            1\n          );\n        }\n      },\n    }),\n\n    uploadDealReports: builder.mutation({\n      query: (files) =&gt; {\n        const formData = new FormData();\n        files.forEach((file) =&gt; {\n          formData.append(\"files\", file);\n        });\n\n        return {\n          url: `AppCommons/UploadDealReports`,\n          method: HTTP_METHODS.POST,\n          data: formData,\n        };\n      },\n      invalidatesTags: [\"dealReportApi\"],\n\n      async onQueryStarted(arg, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Excel files uploaded successfully.\",\n            NotificationDuration.SHORT\n          );\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Upload Failed\",\n            err?.error?.data?.title ||\n              \"An error occurred while uploading the Excel files.\",\n            NotificationDuration.SHORT\n          );\n        }\n      },\n    }),\n\n    uploadOperation: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"ForexDeal/UpdateForexOperation\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n          notify(\n            NotificationType.SUCCESS,\n            null,\n            \"Success\",\n            \"Approved successfully.\",\n            3\n          );\n          dispatch(forexApi.util.invalidateTags([\"Forex\"]));\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during the Forex deal Approval.\",\n            1\n          );\n        }\n      },\n    }),\n  }),\n});\n\nexport const {\n  useGetDealReportBackOfficeDocumentsByIdQuery,\n  useUploadOperationMutation,\n} = dealReportApi;\n</code></pre>"},{"location":"office/bank/branch/one-route-mft-currency/","title":"Branch - ONE ROUTE MFT CURRENCY","text":""},{"location":"office/bank/branch/one-route-mft-currency/#one-route-mft-currency","title":"One Route MFT &amp; Currency","text":"<p>Here\u2019s a step-by-step approach to modularize and improve reusability:</p>"},{"location":"office/bank/branch/one-route-mft-currency/#1-extract-the-dropdown-filtering-logic-into-a-custom-hook","title":"1. Extract the dropdown filtering logic into a custom hook","text":"<p>Create a hook like <code>useFilteredDropdownItems</code> that accepts <code>dropdownItems</code> and <code>permissions</code> and returns filtered items + selected key state.</p> <pre><code>// hooks/useFilteredDropdownItems.js\nimport { useState, useEffect } from \"react\";\n\nexport function useFilteredDropdownItems(dropdownItems, permissions) {\n  const filteredDropdownItems = dropdownItems.filter((item) =&gt;\n    permissions.includes(item.permission)\n  );\n\n  const [selectedKey, setSelectedKey] = useState(\n    filteredDropdownItems[0]?.key || null\n  );\n\n  useEffect(() =&gt; {\n    if (!filteredDropdownItems.find((item) =&gt; item.key === selectedKey)) {\n      setSelectedKey(\n        filteredDropdownItems.length &gt; 0 ? filteredDropdownItems[0].key : null\n      );\n    }\n  }, [filteredDropdownItems, selectedKey]);\n\n  return { filteredDropdownItems, selectedKey, setSelectedKey };\n}\n</code></pre>"},{"location":"office/bank/branch/one-route-mft-currency/#2-create-a-reusable-dropdownselector-component","title":"2. Create a reusable DropdownSelector component","text":"<p>This will encapsulate the dropdown UI and handle selection internally or via props.</p> <pre><code>// components/DropdownSelector.js\nimport React from \"react\";\nimport { Dropdown, Typography, Space } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\n\nconst DropdownSelector = ({ items, selectedKey, onSelect }) =&gt; {\n  if (!items || items.length === 0) return null;\n\n  return (\n    &lt;Dropdown\n      menu={{\n        items,\n        defaultSelectedKeys: [selectedKey],\n        onClick: ({ key }) =&gt; onSelect(key),\n      }}\n    &gt;\n      &lt;Typography.Link&gt;\n        &lt;Space&gt;\n          Selectable\n          &lt;DownOutlined /&gt;\n        &lt;/Space&gt;\n      &lt;/Typography.Link&gt;\n    &lt;/Dropdown&gt;\n  );\n};\n\nexport default DropdownSelector;\n</code></pre>"},{"location":"office/bank/branch/one-route-mft-currency/#3-use-the-custom-hook-and-dropdownselector-in-your-main-component","title":"3. Use the custom hook and DropdownSelector in your main component","text":"<pre><code>import { useSelector } from \"react-redux\";\nimport { Grid } from \"antd\";\n\nimport { componentMap, dropdownItems } from \"./utils/componentMap\";\nimport { getComponentByKey } from \"../utils/componentMapper\";\n\nimport DropdownSelector from \"./components/DropdownSelector\";\nimport { useFilteredDropdownItems } from \"./hooks/useFilteredDropdownItems\";\n\nconst { useBreakpoint } = Grid;\n\nconst BranchCurrencyRequest = () =&gt; {\n  const permissions = useSelector((state) =&gt; state.auth.permissions) || [];\n  const { filteredDropdownItems, selectedKey, setSelectedKey } =\n    useFilteredDropdownItems(dropdownItems, permissions);\n\n  const SelectedComponent = getComponentByKey(selectedKey, componentMap);\n  const { lg, xl } = useBreakpoint();\n\n  return (\n    &lt;&gt;\n      Branch Currency Request\n      &lt;DropdownSelector\n        items={filteredDropdownItems}\n        selectedKey={selectedKey}\n        onSelect={setSelectedKey}\n      /&gt;\n      &lt;div style={{ marginTop: 20 }}&gt;\n        {SelectedComponent ? &lt;SelectedComponent /&gt; : null}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default BranchCurrencyRequest;\n</code></pre> <p>Benefits of this modular approach:</p> <ul> <li>Custom hook <code>useFilteredDropdownItems</code> isolates filtering and selected key state, reusable in other dropdown scenarios with permission-based filtering.</li> <li>DropdownSelector component reusable for any dropdown UI that needs a list of items and selection handler.</li> <li>Main component <code>BranchCurrencyRequest</code> only focuses on wiring things together, clean and readable.</li> </ul> <p>Optional improvements:**</p> <ul> <li>You could move permission constants and dropdown items to separate config files.</li> <li>Add PropTypes or TypeScript typings.</li> <li>Add tests for the hook and dropdown component.</li> </ul>"},{"location":"office/bank/branch/rendering-components/","title":"RENDERING DYNAMIC COMP","text":""},{"location":"office/bank/branch/rendering-components/#rendering-components-in-react-jsx-elements-vs-component-references","title":"Rendering Components in React: JSX Elements vs Component References","text":"<p>React Component Rendering Guide</p> <p>When you want to render components dynamically in React, understanding the difference between JSX elements and component references is important.</p>"},{"location":"office/bank/branch/rendering-components/#1-jsx-elements","title":"1. JSX Elements","text":"<p>If your component map stores JSX elements, for example:</p> <pre><code>const componentMap = {\n  1: &lt;Dealer /&gt;,\n  2: &lt;Maker /&gt;,\n};\n</code></pre> <p>Your function to get a component might return JSX directly:</p> <pre><code>const getComponentByKey = (key, componentMap) =&gt; componentMap[key] || null;\n</code></pre> <p>Then you can render it directly in JSX:</p> <pre><code>{\n  getComponentByKey(selectedKey, componentMap);\n}\n</code></pre>"},{"location":"office/bank/branch/rendering-components/#2-component-references","title":"2. Component References","text":"<p>If your component map stores component references (functions or classes), for example:</p> <pre><code>const componentMap = {\n  1: Dealer,\n  2: Maker,\n};\n</code></pre> <p>Your function returns the component itself:</p> <pre><code>const getComponentByKey = (key, componentMap) =&gt; componentMap[key] || null;\n</code></pre> <p>Then you need to render it like this:</p> <pre><code>const SelectedComponent = getComponentByKey(selectedKey, componentMap);\n\n{\n  SelectedComponent ? &lt;SelectedComponent /&gt; : null;\n}\n</code></pre>"},{"location":"office/bank/branch/rendering-components/#summary","title":"Summary","text":"Approach Description How to render JSX Elements (<code>&lt;Dealer /&gt;</code>) Already JSX, can be rendered directly <code>{getComponentByKey(key, map)}</code> Component References (<code>Dealer</code>) Components as functions/classes <code>&lt;SelectedComponent /&gt;</code>"},{"location":"office/bank/branch/rendering-components/#best-practice","title":"Best Practice","text":"<p>Use component references instead of JSX elements in your mapping because it provides more flexibility (e.g., passing props).</p>"},{"location":"office/bank/branch/upload-backoffice-which-is-best/","title":"BackOffice - WHAT IS BEST","text":""},{"location":"office/bank/branch/upload-backoffice-which-is-best/#which-is-best","title":"Which is Best","text":"<pre><code>postTestUploadBackOffice: builder.mutation({\n    query: ({ id, files }) =&gt; {\n        const formData = new FormData();\n        files.forEach((file) =&gt; {\n            formData.append(\"files\", file); });\n            return {\n                url: /backoffice/upload/${id},\n                method: HTTP_METHODS.POST, data: formData,\n            };\n    },\n})\n\nconst handleUpload = async (files) =&gt; {\n    const formData = new FormData();\n    files.forEach((file) =&gt; {\n        formData.append(\"files\", file); });\n        await uploadFiles(formData).unwrap();\n        // triggerFetchDocuments({ id: selectedRecord.id }); };\n}}\n</code></pre> <p>why we are uisng formData and forEach in both components and api. can i do only in the components or api. which is best and why</p> <p>Excellent question \u2014 and you're thinking in exactly the right way!</p> <p>You're observing duplication of FormData <code>logic</code> both:</p> <ul> <li>in the component (<code>handleUpload</code>)</li> <li>and in the RTK Query mutation</li> </ul> <p>Let\u2019s clarify:</p>"},{"location":"office/bank/branch/upload-backoffice-which-is-best/#whats-actually-happening","title":"\ud83d\udd0d What\u2019s Actually Happening?","text":"<p>\u2705 Your component does:</p> <pre><code>const formData = new FormData();\nfiles.forEach((file) =&gt; {\n  formData.append(\"files\", file);\n});\nawait uploadFiles(formData);\n</code></pre> <p>\u2705 Your RTK Query mutation does:</p> <pre><code>query: ({ id, files }) =&gt; {\n  const formData = new FormData();\n  files.forEach((file) =&gt; {\n    formData.append(\"files\", file);\n  });\n  return {\n    url: `/backoffice/upload/${id}`,\n    method: \"POST\",\n    data: formData,\n  };\n};\n</code></pre> <p>So yes, if you're already building <code>FormData</code> in the component, doing it again in the mutation is redundant.</p>"},{"location":"office/bank/branch/upload-backoffice-which-is-best/#so-where-should-you-build-the-formdata","title":"\u2753So Where Should You Build the FormData?","text":"<p>\u2705 Best Practice: Build <code>FormData</code> in the Component (UI layer)</p> <p>And keep your API layer (RTK Query) dumb \u2014 just send the request.</p> <p>\u2705 Why This Is Better</p> Reason Explanation \ud83d\udd0d Clarity Keeps your component in control of what it's sending. \ud83e\uddea Testability You can easily test the mutation by passing <code>FormData</code> directly. \ud83d\udd01 Reusability RTK mutation becomes reusable for other places that might send pre-built data. \u2705 Avoids Hidden Logic No hidden transformations inside API layer \u2014 clear expectations. \ud83d\udce6 No Redundant Work You don\u2019t loop twice or wrap <code>FormData</code> multiple times."},{"location":"office/bank/branch/upload-backoffice-which-is-best/#final-version-cleaned-up","title":"\u2705 Final Version \u2014 Cleaned Up","text":""},{"location":"office/bank/branch/upload-backoffice-which-is-best/#rtk-mutation-simple","title":"\ud83d\udd27 RTK Mutation (Simple)","text":"<pre><code>postTestUploadBackOffice: builder.mutation({\n  query: ({ id, formData }) =&gt; ({\n    url: `/backoffice/upload/${id}`,\n    method: HTTP_METHODS.POST,\n    data: formData,\n  }),\n  invalidatesTags: [\"backoffice\"],\n});\n</code></pre> <p>\u2705 Accepts <code>{ id, formData }</code> directly \u2014 no <code>forEach</code> here.</p>"},{"location":"office/bank/branch/upload-backoffice-which-is-best/#component-upload-logic","title":"\ud83d\udd27 Component Upload Logic","text":"<pre><code>const handleUpload = async (files) =&gt; {\n  const formData = new FormData();\n  files.forEach((file) =&gt; {\n    formData.append(\"files\", file);\n  });\n\n  await uploadFiles({ id: selectedRecord.id, formData }).unwrap();\n  triggerFetchDocuments({ id: selectedRecord.id });\n};\n</code></pre> <p>\u2705 Component builds the <code>FormData</code> once and clearly knows what's being sent.</p>"},{"location":"office/bank/branch/upload-backoffice-which-is-best/#tldr-which-is-better","title":"\u2705 TL;DR \u2014 Which is Better?","text":"Option Recommended? Why Build <code>FormData</code> in component \u2705 Yes More explicit, testable, reusable Build <code>FormData</code> in RTK mutation \u274c Only if files are always passed as raw <code>files[]</code> Adds hidden logic and tight coupling"},{"location":"office/bank/branch/upload-backoffice/","title":"BackOffice - UPDATE","text":""},{"location":"office/bank/branch/upload-backoffice/#upload-backoffice","title":"Upload BackOffice","text":"<pre><code>  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   src/features/dealReportList/components/shared/UploadDocuments.jsx\n        modified:   src/features/forex/components/table/ForexLists.jsx\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n        src/features/dealReportList/utils/\n        src/features/forex/hooks/useBackOfficeColumn.jsx\n</code></pre>"},{"location":"office/bank/branch/upload-backoffice/#when-to-use-each-approach","title":"\ud83d\udd0d When to Use Each Approach","text":"Approach Description Pros Cons Pass hooks into component (what you're doing now) <code>UploadDocuments</code> controls fetching/uploading Self-contained logic, flexible Less reusable, tightly coupled to data fetching Use hooks in parent, pass data as props <code>useBackOfficeColumn</code> handles data fetching/uploading Clear separation of concerns, more reusable/pure UI More props to pass, slight increase in boilerplate"},{"location":"office/bank/branch/upload-backoffice/#recommended-refactor-if-you-want-uploaddocuments-to-be-purely-ui","title":"\u2705 Recommended Refactor (if you want UploadDocuments to be purely UI)","text":""},{"location":"office/bank/branch/upload-backoffice/#1-in-usebackofficecolumnjsx","title":"1. In <code>useBackOfficeColumn.jsx</code>:","text":"<pre><code>import {\n  useLazyGetTestBackOfficePaginationQuery,\n  usePostTestUploadBackOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nexport const useBackOfficeColumn = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n\n  const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n    useLazyGetTestBackOfficePaginationQuery();\n\n  const [uploadFiles, { isLoading: uploading }] =\n    usePostTestUploadBackOfficeMutation();\n\n  const handleOpenModal = useCallback(\n    (record) =&gt; {\n      setSelectedRecord(record);\n      setIsModalOpen(true);\n      triggerFetchDocuments({ id: record.id }); // Fetch here\n    },\n    [triggerFetchDocuments]\n  );\n\n  const handleCloseModal = useCallback(() =&gt; {\n    setSelectedRecord(null);\n    setIsModalOpen(false);\n  }, []);\n\n  const handleUpload = async (files) =&gt; {\n    const formData = new FormData();\n    files.forEach((file) =&gt; {\n      formData.append(\"files\", file);\n    });\n\n    await uploadFiles(formData).unwrap();\n    triggerFetchDocuments({ id: selectedRecord.id }); // refresh list after upload\n  };\n\n  const backOfficeCol = {\n    title: \"Back Office Documents\",\n    key: \"documents\",\n    render: (_, record) =&gt; (\n      &lt;div style={{ textAlign: \"center\" }}&gt;\n        &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;\n      &lt;/div&gt;\n    ),\n    fixed: \"right\",\n  };\n\n  return {\n    backOfficeCol,\n    modal: (\n      &lt;UploadDocuments\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        record={selectedRecord}\n        title=\"Back Office\"\n        onUpload={handleUpload}\n        uploading={uploading}\n        documents={documentsData?.items || []}\n        loading={isLoading}\n      /&gt;\n    ),\n  };\n};\n</code></pre>"},{"location":"office/bank/branch/upload-backoffice/#2-in-uploaddocumentsjsx","title":"2. In <code>UploadDocuments.jsx</code>","text":"<pre><code>const UploadDocuments = ({\n  isOpen,\n  onClose,\n  record,\n  title,\n  onUpload,\n  uploading,\n  documents,\n  loading,\n}) =&gt; {\n  const [fileList, setFileList] = useState([]);\n\n  useEffect(() =&gt; {\n    if (!isOpen) {\n      setFileList([]);\n    }\n  }, [isOpen]);\n\n  const uploadProps = {\n    onRemove: (file) =&gt; {\n      const newFileList = fileList.filter((f) =&gt; f.uid !== file.uid);\n      setFileList(newFileList);\n    },\n    beforeUpload: (file) =&gt; {\n      setFileList((prevList) =&gt; [...prevList, file]);\n      return false;\n    },\n    fileList,\n  };\n\n  const handleUpload = async () =&gt; {\n    await onUpload(fileList);\n    setFileList([]);\n  };\n\n  const columns = [\n    {\n      title: \"S.N\",\n      dataIndex: \"serial\",\n      key: \"serial\",\n      render: (_, __, i) =&gt; i + 1,\n    },\n    { title: \"File Name\", dataIndex: \"fileName\", key: \"fileName\" },\n    { title: \"Uploaded At\", dataIndex: \"uploadedAt\", key: \"uploadedAt\" },\n  ];\n\n  return (\n    &lt;Modal\n      open={isOpen}\n      title={`${title}: ${record?.counterPartyName}`}\n      width=\"60%\"\n      maskClosable={false}\n      onCancel={onClose}\n      footer={null}\n    &gt;\n      &lt;Upload {...uploadProps}&gt;\n        &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Select File(s)&lt;/Button&gt;\n      &lt;/Upload&gt;\n\n      {fileList.length &gt; 0 &amp;&amp; (\n        &lt;Button\n          type=\"primary\"\n          onClick={handleUpload}\n          loading={uploading}\n          style={{ marginTop: 16 }}\n        &gt;\n          {uploading ? \"Uploading...\" : \"Upload\"}\n        &lt;/Button&gt;\n      )}\n\n      &lt;Divider /&gt;\n\n      &lt;CustomTable\n        columns={columns}\n        data={documents}\n        loading={loading}\n        pagination={false}\n      /&gt;\n    &lt;/Modal&gt;\n  );\n};\n\nexport default UploadDocuments;\n</code></pre>"},{"location":"office/bank/branch/upload-backoffice/#advantages-of-this-refactor","title":"\u2705 Advantages of This Refactor","text":"<ul> <li><code>UploadDocuments</code> is now a pure UI component \u2014 it has no idea where data comes from.</li> <li>All business logic (upload, query) stays in <code>useBackOfficeColumn</code>, making it easier to test and control.</li> <li>You can reuse <code>UploadDocuments</code> anywhere else (e.g., for another document type) without changes.</li> </ul>"},{"location":"office/bank/branch/upload-backoffice/#tldr","title":"\ud83e\udde0 TL;DR","text":"<p>You asked:</p> <p>Why send the hooks to the component instead of the data?</p> <p>\ud83d\udc49 Answer: It's more scalable and maintainable to do the fetching/mutations in the hook and pass the data and handlers to a dumb/presentational component like <code>UploadDocuments</code>.</p> <p>Great question \u2014 choosing between the two approaches depends on what you're optimizing for: simplicity, reusability, testability, or encapsulation.</p> <p>But since you're asking for a recommendation...</p>"},{"location":"office/bank/branch/upload-backoffice/#recommended-approach-for-you","title":"\u2705 Recommended Approach for You","text":"<p>\ud83d\udc49 I recommend: handling fetching and uploading in the hook (<code>useBackOfficeColumn</code> or <code>useSwiftOfficeColumn</code>) and passing the data + handlers as props to <code>UploadDocuments</code>.</p> \ud83d\udd0d Why This Is the Better Fit for Your Case <p>1. \u2705 Cleaner Separation of Concerns</p> <ul> <li> <p><code>UploadDocuments</code> becomes a dumb/presentational component \u2014 its only job is to show a modal and UI.</p> </li> <li> <p>The hook handles all the logic: fetching, uploading, and managing state.</p> </li> </ul> <p>2. \u2705 More Reusable UI</p> <ul> <li> <p>You can use <code>UploadDocuments</code> elsewhere (e.g., other modules, preview-only mode, read-only viewers) without needing to pass hooks.</p> </li> <li> <p>It becomes framework-agnostic: just give it data and functions.</p> </li> </ul> <p>3. \u2705 Testable</p> <ul> <li> <p>You can easily test <code>UploadDocuments</code> with mock data/functions.</p> </li> <li> <p>No need to mock RTK Query inside it.</p> </li> </ul> <p>4. \u2705 Avoids Hook Rules Confusion</p> <ul> <li> <p>You're not trying to dynamically call hooks (<code>useLazyQuery()</code>) inside a component that might be reused in different contexts.</p> </li> <li> <p>Prevents runtime errors like: <code>useLazyQuery is not iterable</code>.</p> </li> </ul> \ud83d\udeab Why Not Passing Hooks into the Component? <p>Passing hooks like <code>useLazyQuery</code> or <code>useUploadMutation</code> into a child component:</p> <ul> <li>Tightly couples that component to Redux RTK Query (not reusable outside Redux context)</li> <li>Makes it harder to test</li> <li>May break rules of hooks (if misused inside conditional logic)</li> </ul> <p>The Ideal Structure (Recap)</p> <p>In <code>useBackOfficeColumn</code> (container):</p> <ul> <li> <p>Handles:</p> </li> <li> <p>Fetching data (<code>useLazyGetTestBackOfficePaginationQuery</code>)</p> </li> <li>Uploading data (<code>usePostTestUploadBackOfficeMutation</code>)</li> <li>Managing modal state</li> <li>Passing clean props to <code>UploadDocuments</code></li> </ul> <p>In <code>UploadDocuments</code> (presentational):</p> <ul> <li> <p>Renders:</p> </li> <li> <p>File uploader</p> </li> <li>Upload button</li> <li> <p>Table of documents</p> </li> <li> <p>Receives:</p> </li> <li> <p><code>documents</code>, <code>loading</code>, <code>uploading</code></p> </li> <li><code>onUpload</code>, <code>onClose</code></li> </ul> <p>\u2705 Summary</p> Trait Handle in hook (Recommended) UI rendering <code>UploadDocuments</code> Data fetching &amp; upload logic <code>useBackOfficeColumn</code>, etc. Reusability \u2705 High Testability \u2705 High Complexity \u274c Slightly more boilerplate Best for production apps \u2705 Yes"},{"location":"office/bank/branch/upload-backoffice/#code","title":"CODE","text":"<p>UploadDocuments.jsx</p> <p>Make this purely presentational \u2014 no hooks, no queries/mutations.</p> <pre><code>// UploadDocuments.jsx\nimport { useState, useEffect } from \"react\";\nimport { Button, Divider, Modal, Upload } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport CustomTable from \"@shared/components/Table/CustomTable\";\n\nconst UploadDocuments = ({\n  isOpen,\n  onClose,\n  record,\n  title,\n  onUpload,\n  uploading,\n  documents,\n  loading,\n}) =&gt; {\n  const [fileList, setFileList] = useState([]);\n\n  useEffect(() =&gt; {\n    if (!isOpen) {\n      setFileList([]);\n    }\n  }, [isOpen]);\n\n  const uploadProps = {\n    onRemove: (file) =&gt; {\n      const newFileList = fileList.filter((f) =&gt; f.uid !== file.uid);\n      setFileList(newFileList);\n    },\n    beforeUpload: (file) =&gt; {\n      setFileList((prevList) =&gt; [...prevList, file]);\n      return false;\n    },\n    fileList,\n  };\n\n  const handleUpload = async () =&gt; {\n    await onUpload(fileList);\n    setFileList([]);\n  };\n\n  const columns = [\n    {\n      title: \"S.N\",\n      dataIndex: \"serial\",\n      key: \"serial\",\n      width: 80,\n      render: (_, __, index) =&gt; index + 1,\n    },\n    {\n      title: \"File Name\",\n      dataIndex: \"fileName\",\n      key: \"fileName\",\n    },\n    {\n      title: \"Uploaded At\",\n      dataIndex: \"uploadedAt\",\n      key: \"uploadedAt\",\n    },\n  ];\n\n  return (\n    &lt;Modal\n      open={isOpen}\n      title={\n        title\n          ? `${title}: ${record?.counterPartyName}`\n          : `${record?.counterPartyName}`\n      }\n      width=\"60%\"\n      maskClosable={false}\n      onCancel={onClose}\n      footer={null}\n    &gt;\n      &lt;Upload {...uploadProps}&gt;\n        &lt;Button icon={&lt;UploadOutlined /&gt;}&gt;Select File(s)&lt;/Button&gt;\n      &lt;/Upload&gt;\n\n      {fileList.length &gt; 0 &amp;&amp; (\n        &lt;Button\n          type=\"primary\"\n          onClick={handleUpload}\n          loading={uploading}\n          style={{ marginTop: 16 }}\n        &gt;\n          {uploading ? \"Uploading...\" : \"Upload\"}\n        &lt;/Button&gt;\n      )}\n\n      &lt;Divider /&gt;\n\n      &lt;CustomTable\n        columns={columns}\n        data={documents}\n        loading={loading}\n        pagination={false}\n      /&gt;\n    &lt;/Modal&gt;\n  );\n};\n\nexport default UploadDocuments;\n</code></pre> <p>2. Update <code>useSwiftOfficeColumn.jsx</code></p> <p>This file will manage:</p> <ul> <li>Modal state</li> <li>Lazy fetching of documents</li> <li>Uploading files</li> <li>Passing all required props to <code>UploadDocuments</code></li> </ul> <pre><code>// useSwiftOfficeColumn.jsx\n\nimport { useState, useCallback } from \"react\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport UploadDocuments from \"@features/dealReportList/components/shared/UploadDocuments\";\n\nimport {\n  useLazyGetTestSwiftOfficePaginationQuery,\n  usePostTestUploadSwiftOfficeMutation,\n} from \"@features/internals/services/testReportApi\";\n\nexport const useSwiftOfficeColumn = () =&gt; {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState(null);\n\n  const [triggerFetchDocuments, { data: documentsData, isLoading }] =\n    useLazyGetTestSwiftOfficePaginationQuery();\n\n  const [uploadFiles, { isLoading: uploading }] =\n    usePostTestUploadSwiftOfficeMutation();\n\n  const handleOpenModal = useCallback(\n    (record) =&gt; {\n      setSelectedRecord(record);\n      setIsModalOpen(true);\n      triggerFetchDocuments({ id: record.id });\n    },\n    [triggerFetchDocuments]\n  );\n\n  const handleCloseModal = useCallback(() =&gt; {\n    setIsModalOpen(false);\n    setSelectedRecord(null);\n  }, []);\n\n  const handleUpload = async (files) =&gt; {\n    const formData = new FormData();\n    files.forEach((file) =&gt; {\n      formData.append(\"files\", file);\n    });\n\n    await uploadFiles(formData).unwrap();\n    triggerFetchDocuments({ id: selectedRecord.id }); // refresh after upload\n  };\n\n  const swiftOfficeCol = {\n    title: \"Swift Office Documents\",\n    key: \"documents\",\n    render: (_, record) =&gt; (\n      &lt;div style={{ textAlign: \"center\" }}&gt;\n        &lt;UploadOutlined onClick={() =&gt; handleOpenModal(record)} /&gt;\n      &lt;/div&gt;\n    ),\n    fixed: \"right\",\n  };\n\n  return {\n    swiftOfficeCol,\n    modal: (\n      &lt;UploadDocuments\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n        record={selectedRecord}\n        title=\"Swift Office\"\n        onUpload={handleUpload}\n        uploading={uploading}\n        documents={documentsData?.items || []}\n        loading={isLoading}\n      /&gt;\n    ),\n  };\n};\n</code></pre> <p>\u2705 3. Result</p> <p>You now have a clean architecture:</p> <ul> <li>\ud83e\udde0 Logic (fetching/mutations/state) in <code>useSwiftOfficeColumn</code></li> <li>\ud83c\udfa8 UI-only component <code>UploadDocuments</code></li> <li>\ud83d\udd01 Can reuse <code>UploadDocuments</code> with other hooks like Back Office or other future modules</li> </ul> <p>Summary</p> File Role <code>UploadDocuments.jsx</code> Presentational modal with upload button and table <code>useSwiftOfficeColumn.jsx</code> Manages modal state, calls API, handles file upload <code>useBackOfficeColumn.jsx</code> Follows the same pattern for Back Office"},{"location":"office/bank/clickup/2024-11-02-task/","title":"Week 1","text":"<p>fasdf</p>"},{"location":"office/bank/clickup/2024-12-03-tuesday-task/","title":"2024/12/03-Tuesday","text":"<ul> <li>Main Content Layout fixed scrolling all the layout, now only scrolling the content area only.</li> <li>Merge and Feedback for Tsering code for User Navbar and Form.</li> </ul>"},{"location":"office/bank/clickup/2024-12-04-wednesday-task/","title":"2024/12/04-Wednesday","text":"<ul> <li>Create a Forex Buying and Selling Form.</li> <li>Added Route for Forex Route.</li> </ul>"},{"location":"office/bank/form/2025-09-11-disbale-upload-rate-logic-in-mft/","title":"Disable Upload Rate Logic","text":""},{"location":"office/bank/form/2025-09-11-disbale-upload-rate-logic-in-mft/#disable-the-upload-rate-in-mft-form","title":"Disable the Upload Rate in MFT Form","text":"<pre><code>import {\n  useLazyGetForexApprovalPersonQuery,\n  useGetCurrencyPairExchangeRateQuery,\n} from \"@features/forex/services/forexApi\";\n\n/*\n * No need to Fetch the currencyPairExchangeRateData in the mft form, so commented for now.\n */\n// const {\n//   data: currencyPairExchangeRateData,\n//   isLoading: currencyPairExchangeRateDataLoading,\n//   error: currencyPairExchangeRateDataError,\n//   isFetching: iscurrencyPairExchangeRateFetching,\n// } = useGetCurrencyPairExchangeRateQuery({ refetchOnMountOrArgChange: true });\n\n/*\n * if the there is not currency pair data,\n * Redirect users to Rate page to upload rate first.\n */\n\n/*\n * No need to Fetch the currencyPairExchangeRateData in the mft form, so commented for now\n */\n\n// if (\n//   currencyPairExchangeRateDataLoading ||\n//   iscurrencyPairExchangeRateFetching\n// ) {\n//   return (\n//     &lt;div\n//       style={{\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         // height: \"100vh\",\n//       }}\n//     &gt;\n//       &lt;Spin size=\"large\" /&gt;\n//     &lt;/div&gt;\n//   );\n// }\n\n// if (\n//   Array.isArray(currencyPairExchangeRateData) &amp;&amp;\n//   currencyPairExchangeRateData.length === 0\n// ) {\n//   return (\n//     &lt;CustomResult\n//       status=\"warning\"\n//       title=\"Please Upload Rate\"\n//       extra={\n//         &lt;Link to={APP_ROUTES?.SETTING_RATES}&gt;\n//           &lt;Button type=\"primary\"&gt;Go to Rates&lt;/Button&gt;\n//         &lt;/Link&gt;\n//       }\n//     /&gt;\n//   );\n// }\n</code></pre>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/","title":"Form - CBS ADDED in MFT","text":""},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#cbs","title":"CBS","text":"DealListDetails.jsx<pre><code>// DealListDetails.jsx\nimport { Checkbox } from \"antd\";\n\n// ADDED\nconst [isCoreBankingRequired, setIsCoreBankingRequired] = useState(false);\nconst onToggleCoreBanking = () =&gt; {\n  setIsCoreBankingRequired((prev) =&gt; !prev);\n};\n\nsubmitValues = {\n  dealId: dealData?.id,\n  remarks: values.remarks,\n  file: base64Files,\n  // ADDED\n  ...(values?.cbs &amp;&amp; { cbs: values.cbs }),\n};\n\n{\n  /*\n   * FOR FUTUR\n   * remove this dataFrom === DealTypeEnum.MFT\n   */\n}\n{\n  dealData?.currentStatus === FOREX_STEPS?.ONHOLD &amp;&amp;\n    dataFrom === DealTypeEnum.MFT &amp;&amp; (\n      &lt;&gt;\n        {/* &lt;p style={{ marginBottom: 0 }}&gt;Enable Core Banking System&lt;/p&gt; */}\n        &lt;Checkbox\n          checked={isCoreBankingRequired}\n          onChange={() =&gt; setIsCoreBankingRequired((prev) =&gt; !prev)}\n        &gt;\n          Enable Core Banking System\n        &lt;/Checkbox&gt;\n        {isCoreBankingRequired &amp;&amp; (\n          &lt;Form.Item\n            name=\"cbsReference\"\n            label=\"Core Banking System\"\n            rules={[{ required: false, message: \"\" }]}\n            style={{ marginTop: \"12px\" }}\n          &gt;\n            &lt;Input placeholder=\"Enter CBS value\" /&gt;\n          &lt;/Form.Item&gt;\n        )}\n      &lt;/&gt;\n    );\n}\n\ntry {\n// logger.info({ msg: \"SUBMIT Value: \", values, submitValues });\nif (dataFrom === DealTypeEnum.FOREX) {\n    await postForexOperation(submitValues).unwrap();\n} else if (dataFrom === DealTypeEnum.MMD) {\n    await postMoneyMarketOperation(submitValues).unwrap();\n} else if (dataFrom === DealTypeEnum.MFT) {\n    // TEST\n    console.log(\"XXX SUBMIT MFT: \" submitValues)\n    await postMutualFundOperation(submitValues).unwrap();\n} else if (dataFrom === DealTypeEnum.NDF) {\n    await postNDFOperation(submitValues).unwrap();\n} else if (dataFrom === DealTypeEnum.FCD) {\n    await postFCDOperation(submitValues).unwrap();\n}\n}\n</code></pre>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#theory","title":"THEORY","text":"<p>To only include <code>cbs</code> in the <code>submitValues</code> object if <code>values.cbs</code> exists, you can conditionally add the key using object spread syntax.</p>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#recommended-way-clean-and-concise","title":"\u2705 Recommended Way (Clean and Concise)","text":"<pre><code>const submitValues = {\n  dealId: dealData?.id,\n  remarks: values.remarks,\n  file: base64Files,\n  ...(values?.cbs &amp;&amp; { cbs: values.cbs }),\n};\n</code></pre>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#how-it-works","title":"\ud83d\udd0d How It Works","text":"<ul> <li><code>...(values?.cbs &amp;&amp; { cbs: values.cbs })</code></li> <li>\u2192 Only spreads <code>{ cbs: values.cbs }</code> into <code>submitValues</code> if <code>values.cbs</code> is truthy.</li> </ul>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#optional-check-for-non-empty-string","title":"\ud83e\udde0 Optional: Check for non-empty string","text":"<p>If you want to include <code>cbs</code> only when it's not an empty string, <code>null</code>, or <code>undefined</code>:</p> <pre><code>...(values?.cbs?.trim() &amp;&amp; { cbs: values.cbs.trim() })\n</code></pre> <p>Let me know if cbs can be <code>0</code>, <code>false</code>, or if it needs stricter checks.</p>"},{"location":"office/bank/form/2025-12-03-cbs-textfield-added/#difference-between-valuescbs-valuescbstrim","title":"Difference between <code>...(values?.cbs &amp;&amp; \u2026)</code> &amp; <code>...(values?.cbs?.trim() &amp;&amp; \u2026)</code>","text":"Input <code>...(values?.cbs &amp;&amp; \u2026)</code> <code>...(values?.cbs?.trim() &amp;&amp; \u2026)</code> <code>\"abc\"</code> \u2705 <code>cbs: \"abc\"</code> \u2705 <code>cbs: \"abc\"</code> <code>\"  abc  \"</code> \u2705 <code>cbs: \"abc\"</code> \u2705 <code>cbs: \"abc\"</code> <code>\"    \"</code> \u274c <code>cbs: \"\"</code> (bad) \u274c Key omitted (good) <code>undefined</code> \u274c Key omitted \u274c Key omitted"},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/","title":"Form - isMultipleVeifierRequired Checkbox","text":""},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/#ismultiplerverifierrequired-state","title":"<code>isMultiplerVerifierRequired</code> State","text":""},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/#component","title":"Component","text":"<pre><code>import { Checkbox, Typography } from \"antd\";\nimport { PERMISSIONS } from \"@shared/constants/PERMISSIONS\";\n\nconst { Text } = Typography;\n\nconst { permissions } = useSelector((state) =&gt; state.auth);\n\n/*\n * IF this is true and multiple verifiers is selected then in the deal approves,\n * it enforces only one verifier approves other verifiers doesn't need to approve that deal.\n */\n\nconst [isMutipleVerifierRequired, setIsMultipleVerifierRequired] =\n  useState(false);\n\n/*\n * Added For Viewing the All Verifier is Required Checkbox\n */\nconst hasPermissionMultipleVerifierCheckbox = permissions?.includes(\n  PERMISSIONS.CAN_VIEW_MULTIPLE_VERIFIER_CHECKBOX\n);\n\n// PostSubmit\nconst handleOk = () =&gt; {\n  setIsPostSubmitModalVisible(false);\n  // ADDED\n  setIsMultipleVerifierRequired(false);\n  form.resetFields();\n  navigate(APP_ROUTES?.FOREX_DEAL, { state: { formCreationId } });\n};\n\nconst handleCancel = () =&gt; {\n  setIsPostSubmitModalVisible(false);\n  // ADDED\n  setIsMultipleVerifierRequired(false);\n  form.resetFields();\n};\n\nconst submitValues = {\n  ...values,\n  isEditable: true,\n  dealDate: dealDate,\n  valueDate: valueDate,\n  dealTime: dealTime,\n  dealAuthorizers: selectedApprovals,\n  dealVerifiers: selectedVerifier,\n  file: base64Files,\n  // ADD THIS\n  //  isMultipleVerifier: isMutipleVerifierRequired,\n  isSingleVerifier: isMutipleVerifierRequired,\n};\n\n&lt;Col className={`${hasPermissionMultipleVerifierCheckbox &amp;&amp; \"verifierCol\"}`}&gt;\n  {hasPermissionMultipleVerifierCheckbox &amp;&amp; (\n    &lt;Checkbox\n      style={{ marginBottom: \"24px\" }}\n      checked={isMutipleVerifierRequired}\n      onChange={(e) =&gt; {\n        // setIsMultipleVerifierRequired(e.target.checked);\n        // UPDATED WITH DEFENSIVE PROGRAMMIN\n        const isChecked = !!e?.target?.checked;\n        setIsMultipleVerifierRequired(isChecked);\n      }}\n    &gt;\n      &lt;Text className=\"verifierCheckbox\" type=\"secondary\"&gt;\n        All Verifier is Required\n      &lt;/Text&gt;\n    &lt;/Checkbox&gt;\n  )}\n&lt;/Col&gt;;\n</code></pre>"},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/#permissions","title":"PERMISSIONS","text":"<pre><code>export const PERMISSIONS = {\n  // ADDED\n  CAN_VIEW_MULTIPLE_VERIFIER_CHECKBOX: \"Permissions.MultipleVerifier.CanView\",\n};\n</code></pre>"},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/#scss","title":"SCSS","text":"<pre><code>// FOREX FORM\n.verifierCol .ant-form-item {\n  margin-bottom: 10px;\n}\n\n.verifierCheckbox {\n  font-size: 0.825rem;\n}\n</code></pre>"},{"location":"office/bank/form/2025-12-04-isMultipleVeifierRequired-state/#with-defensive-programming","title":"\u2705 With Defensive Programming","text":"<p>You ensure that only a clean boolean (<code>true</code> or <code>false</code>) is ever set:</p> <pre><code>const isChecked = !!e?.target?.checked;\nsetIsMultipleVerifierRequired(isChecked);\n</code></pre> <ul> <li>If <code>checked</code> is <code>true</code> \u2192 remains <code>true</code></li> <li>If <code>checked</code> is <code>false</code> \u2192 remains <code>false</code></li> <li>If <code>checked</code> is <code>undefined</code>, <code>null</code>, or any falsy value \u2192 coerced to <code>false</code></li> <li>If <code>e</code> or <code>e.target</code> is <code>null</code> or <code>undefined</code> \u2192 avoids crashing</li> </ul> <p>Summary</p> Situation Without Defensive Code With <code>!!e?.target?.checked</code> <code>e.target.checked = true</code> \u2705 <code>true</code> \u2705 <code>true</code> <code>e.target.checked = false</code> \u2705 <code>false</code> \u2705 <code>false</code> <code>e.target.checked = undefined</code> \u26a0\ufe0f State becomes <code>undefined</code> \u2705 Becomes <code>false</code> <code>e = undefined</code> or <code>e.target = null</code> \u274c Crashes with error \u2705 Safely returns <code>false</code> <p>So, yes, using defensive programming like <code>!!e?.target?.checked</code> is a small change that avoids big future bugs. It's a good habit in UI programming.</p>"},{"location":"office/bank/form/approvers-verifiers/","title":"Form - Approvers Verifiers","text":""},{"location":"office/bank/form/approvers-verifiers/#last-update","title":"Last Update","text":"ForexForm.jsx<pre><code>// Side Effects\nuseEffect(() =&gt; {\n  if (transationTypeWatch === TRANSACTION_TYPE.BUY) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.SELLING_CURRENCY]: undefined,\n    });\n    const isBuyingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.BUYING_CURRENCY,\n    ]);\n    if (isBuyingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isBuyingCurrencySelected });\n    }\n  } else if (transationTypeWatch === TRANSACTION_TYPE.SELL) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.BUYING_CURRENCY]: undefined,\n    });\n    const isSellingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.SELLING_CURRENCY,\n    ]);\n    if (isSellingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isSellingCurrencySelected });\n    }\n  }\n\n  form.setFieldsValue({\n    [FOREX_DEAL?.SELLING_AMOUNT]: undefined,\n    [FOREX_DEAL?.BUYING_AMOUNT]: undefined,\n    //\n    [FOREX_DEAL?.DEAL_APPROVERS]: null,\n    [FOREX_DEAL.DEAL_VERIFIERS]: null,\n  });\n  setApprovalOptions([]);\n  setVerifierOptions([]);\n  setSelectedApprovals([]);\n  setSelectedVerifier([]);\n}, [transationTypeWatch, form]);\n\nconst debouncedTriggerGetApprovalPerson = useCallback(\n  debounce((payload) =&gt; {\n    triggerGetApprovalPerson(payload);\n  }, 3000),\n  [triggerGetApprovalPerson]\n);\n\nuseEffect(() =&gt; {\n  const currentFormValues = form.getFieldsValue();\n  const buyingAmountValue = currentFormValues[FOREX_DEAL?.BUYING_AMOUNT];\n  const sellingAmountValue = currentFormValues[FOREX_DEAL?.SELLING_AMOUNT];\n\n  if (\n    transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n    buyingAmountValue !== \"undefined\" &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    !isNaN(sellingAmountValue) &amp;&amp;\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: sellingAmountValue,\n        sellingCurrencyId: buyingCurrencyWatch,\n      });\n  } else if (\n    transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n    sellingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    !isNaN(buyingAmountValue) &amp;&amp;\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: buyingAmountValue,\n        sellingCurrencyId: sellingCurrencyWatch,\n      });\n  }\n}, [\n  buyingAmountWatch,\n  sellingAmountWatch,\n\n  buyingCurrencyWatch,\n  sellingCurrencyWatch,\n  transationTypeWatch,\n  debouncedTriggerGetApprovalPerson,\n  form,\n]);\n\n// useEffect(() =&gt; {\n//   if (isSkipVerifierApprover) return null;\n//   if (!isSkipVerifierApprover) {\n//     if (\n//       transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n//       debouncedBuyingAmount &amp;&amp;\n//       buyingCurrencyWatch &amp;&amp;\n//       sellingCurrencyWatch\n//     ) {\n//       debouncedTriggerGetApprovalPerson({\n//         sellingAmount: debouncedSellingAmount,\n//         sellingCurrencyId: buyingCurrencyWatch,\n//       });\n//     } else if (\n//       transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n//       debouncedSellingAmount &amp;&amp;\n//       buyingCurrencyWatch &amp;&amp;\n//       sellingCurrencyWatch\n//     ) {\n//       debouncedTriggerGetApprovalPerson({\n//         sellingAmount: debouncedBuyingAmount,\n//         sellingCurrencyId: sellingCurrencyWatch,\n//       });\n//     }\n//   }\n// }, [\n//   debouncedBuyingAmount,\n//   debouncedSellingAmount,\n//   buyingCurrencyWatch,\n//   sellingCurrencyWatch,\n//   transationTypeWatch,\n//   debouncedTriggerGetApprovalPerson,\n//   isSkipVerifierApprover,\n// ]);\n</code></pre> processAmount.js<pre><code>const processAmount = (amount) =&gt; {\n  const parsedAmount = parseFloat(amount);\n\n  // Check if parsedAmount is a valid number and not NaN\n  if (!isNaN(parsedAmount)) {\n    return parsedAmount.toFixed(4); // Return the formatted value\n  }\n\n  // Return null for invalid input\n  return null;\n};\n\nexport default processAmount;\n</code></pre> <p>Updated this logic in the the <code>ForexForm.js</code></p> ForexForm.jsx<pre><code>useEffect(() =&gt; {\n  const currentFormValues = form.getFieldsValue();\n  const buyingAmountValue = currentFormValues[FOREX_DEAL?.BUYING_AMOUNT];\n  const sellingAmountValue = currentFormValues[FOREX_DEAL?.SELLING_AMOUNT];\n\n  // Helper function to handle the logic of checking if a value is a valid number\n  const processAmount = (amount) =&gt; {\n    const parsedAmount = parseFloat(amount);\n    if (!isNaN(parsedAmount)) {\n      return parsedAmount.toFixed(4); // Return the formatted value if it's a valid number\n    }\n    return null; // Return null if the amount is not valid\n  };\n\n  // Transaction logic for 'BUY'\n  if (\n    transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n    buyingAmountValue !== undefined &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    const formattedSellingAmount = processAmount(sellingAmountValue);\n    if (formattedSellingAmount !== null) {\n      console.log(\"sellingAmountValue: \", formattedSellingAmount);\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedSellingAmount,\n        sellingCurrencyId: buyingCurrencyWatch,\n      });\n    } else {\n      console.log(\"Invalid sellingAmountValue\");\n    }\n  }\n\n  // Transaction logic for 'SELL'\n  else if (\n    transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n    sellingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    const formattedBuyingAmount = processAmount(buyingAmountValue);\n    if (formattedBuyingAmount !== null) {\n      console.log(\"buyingAmountValue: \", formattedBuyingAmount);\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedBuyingAmount,\n        sellingCurrencyId: sellingCurrencyWatch,\n      });\n    } else {\n      console.log(\"Invalid buyingAmountValue\");\n    }\n  }\n}, [\n  buyingAmountWatch,\n  sellingAmountWatch,\n  buyingCurrencyWatch,\n  sellingCurrencyWatch,\n  transationTypeWatch,\n  debouncedTriggerGetApprovalPerson,\n  form,\n]);\n</code></pre>"},{"location":"office/bank/form/approvers-verifiers/#utility-function","title":"Utility Function","text":"<pre><code>export function newCurrentVerifiers(data) {\n  if (!Array.isArray(data)) return [];\n\n  const { VERIFIER } = HIERARCHY_LEVEL_STATUS || {};\n\n  // return data.filter((item) =&gt; item?.levelStatus === VERIFIER);\n\n  const filteredVerifiers = data\n    .filter((item) =&gt; item?.levelStatus === VERIFIER)\n    .sort((a, b) =&gt; a?.approvalOrderNumber - b?.approvalOrderNumber);\n\n  return filteredVerifiers;\n}\n\nexport function newCurrentApprovers(data) {\n  if (!Array.isArray(data)) return [];\n\n  const { APPROVER } = HIERARCHY_LEVEL_STATUS || {};\n\n  // return data.filter((item) =&gt; item?.levelStatus === APPROVER);\n\n  const filteredApprovers = data\n    .filter((item) =&gt; item?.levelStatus === APPROVER)\n    .sort((a, b) =&gt; a?.approvalOrderNumber - b?.approvalOrderNumber);\n\n  return filteredApprovers;\n}\n</code></pre>"},{"location":"office/bank/form/counter-party-limit/","title":"Form - \ud83e\udec0CounterParty","text":""},{"location":"office/bank/form/counter-party-limit/#counter-party-limits","title":"Counter Party Limits","text":""},{"location":"office/bank/form/counter-party-limit/#tabfreshformjsx","title":"<code>TabFreshForm.jsx</code>","text":"<pre><code>// NEW ADDED\nimport useCounterPartyLimit from \"@shared/hooks/useCounterPartyLimit\";\n\nconst {\n  baseCurrencyData,\n  isBaseCurrencyDataLoading,\n  limitData,\n  isLimitDataLoading,\n} = useCounterPartyLimit({\n  baseCurrencyId: dealCurrencyId,\n  counterpartyId,\n  dealType,\n  dealAmount,\n});\n</code></pre>"},{"location":"office/bank/form/counter-party-limit/#usecounterpartylimitjs","title":"<code>useCounterPartyLimit.js</code>","text":"<pre><code>import { useEffect, useMemo } from \"react\";\n\nimport { useLazyGetMMDExchangeRateQuery } from \"@features/mmd/services/mmdformApi\";\nimport { useGetCounterPartyTransactionLimitsQuery } from \"@features/settings/services/settingApi\";\nimport { MoneyMarketDealModeEnum } from \"@features/mmd/utils/constants\";\nimport logger from \"@shared/utils/logger\";\n\nconst useCounterPartyLimit = ({\n  baseCurrencyId,\n  counterpartyId,\n  dealType,\n  dealAmount,\n}) =&gt; {\n  const [\n    getMMDExchangeRate,\n    { data: MMDExchangeRateData, isLoading: isLoadingMMDExchageRate },\n  ] = useLazyGetMMDExchangeRateQuery();\n\n  const {\n    data: counterPartyTransactionLimitData,\n    isLoading: isCounterPartyTransactionLimitDataLoading,\n    error: counterPartyTransactionLimitDataError,\n  } = useGetCounterPartyTransactionLimitsQuery(\n    {\n      counterpartyId: counterpartyId,\n    },\n    {\n      skip: !counterpartyId,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const covertCurrencyToBase = useMemo(() =&gt; {\n    const baseAmountRate = MMDExchangeRateData?.midRate;\n    // Map\n    const bankLimitData = counterPartyTransactionLimitData[0];\n\n    if (baseCurrencyId !== bankLimitData?.currencyId) {\n      return dealAmount * baseAmountRate;\n    }\n    return null;\n  }, [\n    MMDExchangeRateData,\n    counterPartyTransactionLimitData,\n    baseCurrencyId,\n    dealAmount,\n  ]);\n\n  logger.info({\n    msg: \"HOOKS INSIDE LOGS \",\n    covertCurrencyToBase,\n    AMOUNT: dealAmount,\n    MIDRATE: MMDExchangeRateData?.midRate,\n  });\n\n  // CurrencyExchangeRate\n  useEffect(() =&gt; {\n    if (\n      baseCurrencyId &amp;&amp;\n      counterpartyId &amp;&amp;\n      dealType === MoneyMarketDealModeEnum.Lending\n    ) {\n      getMMDExchangeRate({\n        currencyId: baseCurrencyId,\n        counterpartyId: counterpartyId,\n      });\n    }\n  }, [baseCurrencyId, counterpartyId, dealType, getMMDExchangeRate]);\n\n  return {\n    baseCurrencyData: MMDExchangeRateData,\n    isBaseCurrencyDataLoading: isLoadingMMDExchageRate,\n    limitData: counterPartyTransactionLimitData,\n    isLimitDataLoading: isCounterPartyTransactionLimitDataLoading,\n  };\n};\n\nexport default useCounterPartyLimit;\n</code></pre>"},{"location":"office/bank/form/counter-party-limit/#demo","title":"DEMO","text":"<p>\ud83e\uddee What Is \"Rate Conversion\"?</p> <p>Let\u2019s say you receive an exchange rate like 1 USD = 2300 MMK, and you want to convert an amount (e.g., 100 USD) to MMK inside your hook.</p> <p>You can add the conversion logic right after fetching <code>MMDExchangeRateData</code>, and expose a helper function or pre-converted value from the hook.</p> <pre><code>import { useEffect, useMemo } from \"react\";\nimport { useLazyGetMMDExchangeRateQuery } from \"@features/mmd/services/mmdformApi\";\nimport { useGetCounterPartyTransactionLimitsQuery } from \"@features/settings/services/settingApi\";\nimport { MoneyMarketDealModeEnum } from \"@features/mmd/utils/constants\";\n\nconst useCounterPartyLimit = ({\n  baseCurrencyId,\n  counterpartyId,\n  dealType,\n  amount = 0,\n}) =&gt; {\n  const [\n    getMMDExchangeRate,\n    { data: MMDExchangeRateData, isLoading: isLoadingMMDExchageRate },\n  ] = useLazyGetMMDExchangeRateQuery();\n\n  const {\n    data: counterPartyTransactionLimitData,\n    isLoading: isCounterPartyTransactionLimitDataLoading,\n    error: counterPartyTransactionLimitDataError,\n  } = useGetCounterPartyTransactionLimitsQuery(\n    { counterpartyId },\n    {\n      skip: !counterpartyId,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  useEffect(() =&gt; {\n    if (\n      baseCurrencyId &amp;&amp;\n      counterpartyId &amp;&amp;\n      dealType === MoneyMarketDealModeEnum.Lending\n    ) {\n      getMMDExchangeRate({ currencyId: baseCurrencyId, counterpartyId });\n    }\n  }, [baseCurrencyId, counterpartyId, dealType, getMMDExchangeRate]);\n\n  // \ud83d\udcb1 Currency Conversion Logic (e.g. amount * rate)\n  const convertedAmount = useMemo(() =&gt; {\n    const rate = MMDExchangeRateData?.exchangeRate; // adjust key if different\n    if (rate &amp;&amp; amount &gt; 0) {\n      return amount * rate;\n    }\n    return null;\n  }, [MMDExchangeRateData, amount]);\n\n  return {\n    baseCurrencyData: MMDExchangeRateData,\n    isBaseCurrencyDataLoading: isLoadingMMDExchageRate,\n    limitData: counterPartyTransactionLimitData,\n    isLimitDataLoading: isCounterPartyTransactionLimitDataLoading,\n    limitDataError: counterPartyTransactionLimitDataError,\n    convertedAmount, // \ud83d\udc48 expose this to component\n  };\n};\n\nexport default useCounterPartyLimit;\n</code></pre> <p>Usage</p> <pre><code>const MyComponent = () =&gt; {\n  const [amount, setAmount] = useState(100); // user input\n  const { convertedAmount } = useCounterPartyLimit({\n    baseCurrencyId: \"USD\",\n    counterpartyId: \"123\",\n    dealType: MoneyMarketDealModeEnum.Lending,\n    amount,\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;Input\n        type=\"number\"\n        value={amount}\n        onChange={(e) =&gt; setAmount(Number(e.target.value))}\n      /&gt;\n      &lt;p&gt;\n        Converted Amount: {convertedAmount ? convertedAmount.toFixed(2) : \"N/A\"}\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"office/bank/form/file-upload/","title":"File Upload","text":""},{"location":"office/bank/form/hooks/","title":"Form - Hooks","text":""},{"location":"office/bank/form/hooks/#hooks","title":"Hooks","text":"<pre><code>import { useEffect } from \"react\";\n\nconst isEmpty = (arr) =&gt; !arr || arr.length === 0;\n\n/**\n * Custom hook to sync verifiers and approvers arrays with form fields.\n *\n * @param {Object} params\n * @param {Array} params.verifiers - Array of verifier IDs\n * @param {Array} params.approvers - Array of approver IDs\n * @param {Object} params.form - Ant Design form instance (or similar)\n * @param {string} params.approversField - form field name for approvers\n * @param {string} params.verifiersField - form field name for verifiers\n */\nfunction useSyncVerifierApprover({\n  verifiers,\n  approvers,\n  form,\n  approversField,\n  verifiersField,\n}) {\n  useEffect(() =&gt; {\n    if (!form) return;\n\n    let newApprovers = [...(approvers || [])];\n    let newVerifiers = [...(verifiers || [])];\n\n    if (newVerifiers.every((id) =&gt; newApprovers.includes(id))) {\n      // Find common ID\n      const commonId = newVerifiers.find((id) =&gt; newApprovers.includes(id));\n      if (commonId !== undefined) {\n        // Remove one occurrence of commonId from approvers\n        const index = newApprovers.indexOf(commonId);\n        if (index !== -1) {\n          newApprovers.splice(index, 1);\n        }\n        // Set verifiers to only commonId\n        newVerifiers = [commonId];\n      }\n    } else {\n      // Select one verifier ID not in approvers\n      const unmatchedVerifier = newVerifiers.find(\n        (id) =&gt; !newApprovers.includes(id)\n      );\n      newVerifiers = unmatchedVerifier !== undefined ? [unmatchedVerifier] : [];\n      // newApprovers stays as is\n    }\n\n    // Update form fields\n    form.setFieldsValue({\n      [approversField]: !isEmpty(newApprovers) ? newApprovers : null,\n      [verifiersField]: !isEmpty(newVerifiers) ? newVerifiers : null,\n    });\n  }, [verifiers, approvers, form, approversField, verifiersField]);\n}\n\nexport default useSyncVerifierApprover;\n</code></pre>"},{"location":"office/bank/form/hooks/#testing","title":"Testing","text":"<pre><code>import { useEffect } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport {\n  currentApprovers,\n  newCurrentApprovers,\n  currentVerifiers,\n  newCurrentVerifiers,\n  findUsersByIds,\n} from \"@features/forex/utils/forexRoles\";\nimport { VERIFIER_TYPES } from \"@features/forex/utils/STATUS\";\nimport {\n  FOREX_DEAL,\n  TRANSACTION_TYPE,\n  DEAL_MODE,\n} from \"@features/forex/utils/FOREX_DEAL\";\n\nfunction useVerifierApproverFormSync({\n  verifierOptions,\n  approvalOptions,\n  form,\n  approversField,\n  verifiersField,\n}) {\n  useEffect(() =&gt; {\n    if (!form) return;\n\n    // Extract verifier IDs\n    let verifiersIdOnly =\n      verifierOptions?.map((item) =&gt; item?.aspNetUserId) || [];\n    // Find verifier user objects\n    let verifiersList = findUsersByIds(\n      verifiersIdOnly,\n      verifierOptions,\n      VERIFIER_TYPES.VERIFIERS\n    );\n\n    let approversIdOnly = approvalOptions.map((item) =&gt; item?.aspNetUserId);\n    let approversList = findUsersByIds(\n      approversIdOnly,\n      approvalOptions,\n      VERIFIER_TYPES.APPROVERS\n    );\n\n    let newApprovers = [...(approversIdOnly || [])];\n    let newVerifiers = [...(verifiersIdOnly || [])];\n\n    if (newVerifiers.every((id) =&gt; newApprovers.includes(id))) {\n      // Find common ID\n      const commonId = newVerifiers.find((id) =&gt; newApprovers.includes(id));\n\n      if (commonId !== undefined) {\n        // Create copies to avoid mutating original arrays\n        const newApprovers = [...approversIdOnly];\n        const index = newApprovers.indexOf(commonId);\n        if (index !== -1) {\n          newApprovers.splice(index, 1);\n        }\n\n        const newVerifiers = [commonId];\n\n        // VERIFY CONSOLE BEFORE\n        // console.log(\"MATCHED: Updated approversIdOnly:\", newApprovers);\n        // console.log(\"MATCHED: Updated verfiersIdOnly:\", newVerifiers);\n\n        // Update form fields based on new arrays\n        // form.setFieldsValue({\n        //   [FOREX_DEAL.DEAL_APPROVERS]: !isEmpty(newVerifiers) ? newVerifiers : null,\n        //   [FOREX_DEAL.DEAL_VERIFIERS]: !isEmpty(newApprovers) ? newApprovers : null,\n        // });\n      }\n    } else {\n      // Select one verifier ID not in approvers\n      const unmatchedVerifier = newVerifiers.find(\n        (id) =&gt; !newApprovers.includes(id)\n      );\n      newVerifiers = unmatchedVerifier !== undefined ? [unmatchedVerifier] : [];\n      // newApprovers stays as is\n\n      // VERIFY CONSOLE BEFORE\n      // console.log(\"UNMATCHED: Selected unmatched verifier ID:\", unmatchedVerifier);\n      // console.log(\"UNMATCHED: Updated verfiersIdOnly:\", newVerifiers);\n      // console.log(\"UNMATCHED: Updated approversIdOnly:\", newApprovers);\n\n      // form.setFieldsValue({\n      //   [approversField]: !isEmpty(newApprovers) ? newApprovers : null,\n      //   [verifiersField]: !isEmpty(newVerifiers) ? newVerifiers : null,\n      // });\n    }\n  }, [verifierOptions, approvalOptions, form, approversField, verifiersField]);\n}\n\nexport default useVerifierApproverFormSync;\n</code></pre> USAGE<pre><code>// USAGE\nimport useSyncVerifierApprover from \"./useSyncVerifierApprover\";\n\nconst [form] = Form.useForm();\n\n// Use the custom hook to sync form fields\nuseSyncVerifierApprover({\n  verifiers: verifierOptions,\n  approvers: approvalOptions,\n  form,\n  approversField: FOREX_DEAL.DEAL_APPROVERS,\n  verifiersField: FOREX_DEAL.DEAL_VERIFIERS,\n});\n</code></pre> <ul> <li>APPROVERS VERFIER CUSTOM HOOK</li> </ul>"},{"location":"office/bank/form/hooks/#stage-1-test","title":"STAGE 1: Test","text":"<pre><code>import { useEffect } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport {\n  currentApprovers,\n  newCurrentApprovers,\n  currentVerifiers,\n  newCurrentVerifiers,\n  findUsersByIds,\n} from \"@features/forex/utils/forexRoles\";\nimport { VERIFIER_TYPES } from \"@features/forex/utils/STATUS\";\nimport {\n  FOREX_DEAL,\n  TRANSACTION_TYPE,\n  DEAL_MODE,\n} from \"@features/forex/utils/FOREX_DEAL\";\n\nfunction useVerifierApproverFormSync({\n  verifierOptions = [],\n  approvalOptions = [],\n  form,\n  approversField,\n  verifiersField,\n}) {\n  useEffect(() =&gt; {\n    if (!form) return;\n\n    // Defensive defaults to empty arrays\n    const verifiers = verifierOptions || [];\n    const approvers = approvalOptions || [];\n\n    console.log(\"VERIFIERS: \", verifiers);\n\n    // Extract verifier IDs\n    let verifiersIdOnly = verifiers?.map((item) =&gt; item?.aspNetUserId) || [];\n    let approversIdOnly = approvers.map((item) =&gt; item?.aspNetUserId);\n\n    let newApprovers = [...(approversIdOnly || [])];\n    let newVerifiers = [...(verifiersIdOnly || [])];\n\n    if (newVerifiers.every((id) =&gt; newApprovers.includes(id))) {\n      const commonId = newVerifiers.find((id) =&gt; newApprovers.includes(id));\n\n      if (commonId !== undefined) {\n        const newApprovers = [...approversIdOnly];\n        const index = newApprovers.indexOf(commonId);\n        if (index !== -1) {\n          newApprovers.splice(index, 1);\n        }\n\n        const newVerifiers = [commonId];\n\n        const newVerifierList = findUsersByIds(\n          newVerifiers,\n          approvers,\n          VERIFIER_TYPES.APPROVERS\n        );\n\n        const newApproverList = findUsersByIds(\n          newApprovers,\n          approvers,\n          VERIFIER_TYPES.APPROVERS\n        );\n\n        console.log(\"XXX NEW verifierList: \", newVerifierList);\n        console.log(\"XXX NEW approversList: \", newApproverList);\n\n        // VERIFY CONSOLE BEFORE\n        console.log(\"XXX MATCHED: Updated approversIdOnly:\", newApprovers);\n        console.log(\"XXX MATCHED: Updated verfiersIdOnly:\", newVerifiers);\n\n        // Update form fields based on new arrays\n        // form.setFieldsValue({\n        //   [FOREX_DEAL.DEAL_APPROVERS]: !isEmpty(newVerifiers) ? newVerifiers : null,\n        //   [FOREX_DEAL.DEAL_VERIFIERS]: !isEmpty(newApprovers) ? newApprovers : null,\n        // });\n      }\n    } else {\n      const unmatchedVerifier = newVerifiers.find(\n        (id) =&gt; !newApprovers.includes(id)\n      );\n      newVerifiers = unmatchedVerifier !== undefined ? [unmatchedVerifier] : [];\n      // newApprovers stays as is\n\n      // VERIFY CONSOLE BEFORE\n      console.log(\n        \"XXX UNMATCHED: Selected unmatched verifier ID:\",\n        unmatchedVerifier\n      );\n      console.log(\"XXX UNMATCHED: Updated verfiersIdOnly:\", newVerifiers);\n      console.log(\"XXX UNMATCHED: Updated approversIdOnly:\", newApprovers);\n\n      // form.setFieldsValue({\n      //   [approversField]: !isEmpty(newApprovers) ? newApprovers : null,\n      //   [verifiersField]: !isEmpty(newVerifiers) ? newVerifiers : null,\n      // });\n    }\n  }, [verifierOptions, approvalOptions, form, approversField, verifiersField]);\n}\n\nexport default useVerifierApproverFormSync;\n</code></pre>"},{"location":"office/bank/form/hooks/#recommended-pattern","title":"Recommended pattern","text":""},{"location":"office/bank/form/hooks/#1-modify-your-hook-to-return-the-processed-data-instead-of-setting-form-fields-directly","title":"1. Modify your hook to return the processed data instead of setting form fields directly:","text":"<pre><code>function useVerifierApproverFormSync({\n  verifierOptions = [],\n  approvalOptions = [],\n}) {\n  // Process and compute newApprovers, newVerifiers, etc.\n\n  // Return computed values\n  return {\n    newApprovers, // array of IDs\n    newVerifiers, // array of IDs\n    newApproverList, // array of user objects if needed\n    newVerifierList,\n  };\n}\n</code></pre>"},{"location":"office/bank/form/hooks/#2-in-your-parent-component-call-the-hook-and-update-the-form","title":"2. In your parent component, call the hook and update the form:","text":"<pre><code>const { newApprovers, newVerifiers } = useVerifierApproverFormSync({\n  verifierOptions,\n  approvalOptions,\n});\n\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    [approversField]: newApprovers.length ? newApprovers : null,\n    [verifiersField]: newVerifiers.length ? newVerifiers : null,\n  });\n}, [newApprovers, newVerifiers, form, approversField, verifiersField]);\n</code></pre>"},{"location":"office/bank/form/hooks/#benefits","title":"Benefits","text":"<ul> <li>The hook is pure and easy to test.</li> <li>The parent controls when and how the form updates.</li> <li>You avoid unexpected side effects inside hooks.</li> </ul>"},{"location":"office/bank/form/hooks/#summary","title":"Summary","text":"Approach Description Setting form in hook Possible but mixes concerns, harder to debug Returning data from hook and setting form in parent Cleaner, more maintainable, recommended"},{"location":"office/bank/form/hooks/#reference","title":"Reference","text":"<ul> <li>NEW</li> </ul> <ol> <li>Refactored Hook: useVerifierApproverFormSync</li> </ol> <p>This hook does not set form values directly. Instead, it processes the inputs and returns the updated approvers and verifiers IDs and user objects.</p> <pre><code>import { useMemo } from \"react\";\nimport { isEmpty } from \"lodash\";\nimport { findUsersByIds } from \"@features/forex/utils/forexRoles\";\nimport { VERIFIER_TYPES } from \"@features/forex/utils/STATUS\";\n\nfunction useVerifierApproverFormSync({\n  verifierOptions = [],\n  approvalOptions = [],\n}) {\n  // useMemo to avoid unnecessary recalculations\n  const { newApprovers, newVerifiers, newApproverList, newVerifierList } =\n    useMemo(() =&gt; {\n      const verifiers = verifierOptions || [];\n      const approvers = approvalOptions || [];\n\n      const verifiersIdOnly = verifiers.map((item) =&gt; item?.aspNetUserId) || [];\n      const approversIdOnly = approvers.map((item) =&gt; item?.aspNetUserId) || [];\n\n      let newApprovers = [...approversIdOnly];\n      let newVerifiers = [...verifiersIdOnly];\n\n      if (newVerifiers.every((id) =&gt; newApprovers.includes(id))) {\n        const commonId = newVerifiers.find((id) =&gt; newApprovers.includes(id));\n\n        if (commonId !== undefined) {\n          newApprovers = [...approversIdOnly];\n          const index = newApprovers.indexOf(commonId);\n          if (index !== -1) {\n            newApprovers.splice(index, 1);\n          }\n          newVerifiers = [commonId];\n        }\n      } else {\n        const unmatchedVerifier = newVerifiers.find(\n          (id) =&gt; !newApprovers.includes(id)\n        );\n        newVerifiers =\n          unmatchedVerifier !== undefined ? [unmatchedVerifier] : [];\n        // newApprovers stays as is\n      }\n\n      const newVerifierList = findUsersByIds(\n        newVerifiers,\n        verifiers,\n        VERIFIER_TYPES.VERIFIERS\n      );\n      const newApproverList = findUsersByIds(\n        newApprovers,\n        approvers,\n        VERIFIER_TYPES.APPROVERS\n      );\n\n      return { newApprovers, newVerifiers, newApproverList, newVerifierList };\n    }, [verifierOptions, approvalOptions]);\n\n  return { newApprovers, newVerifiers, newApproverList, newVerifierList };\n}\n\nexport default useVerifierApproverFormSync;\n</code></pre> <ol> <li>Refactored Parent Component Usage</li> </ol> <p>In the parent component, you call the hook and then update the form values inside a useEffect when the returned data changes.</p> <pre><code>import React, { useEffect } from \"react\";\nimport { Form } from \"antd\";\nimport useVerifierApproverFormSync from \"./useVerifierApproverFormSync\";\nimport { FOREX_DEAL } from \"@features/forex/utils/FOREX_DEAL\";\n\nfunction ParentComponent({ verifierOptions, approvalOptions }) {\n  const [form] = Form.useForm();\n\n  // Get processed approvers and verifiers from the hook\n  const { newApprovers, newVerifiers, newApproverList, newVerifierList } =\n    useVerifierApproverFormSync({\n      verifierOptions,\n      approvalOptions,\n    });\n\n  // Sync form values whenever newApprovers or newVerifiers change\n  useEffect(() =&gt; {\n    if (!form) return;\n\n    form.setFieldsValue({\n      [FOREX_DEAL.DEAL_APPROVERS]: !newApprovers.length ? null : newApprovers,\n      [FOREX_DEAL.DEAL_VERIFIERS]: !newVerifiers.length ? null : newVerifiers,\n    });\n  }, [newApprovers, newVerifiers, form]);\n\n  return &lt;Form form={form}&gt;{/* Your form fields here */}&lt;/Form&gt;;\n}\n\nexport default ParentComponent;\n</code></pre> <p>Benefits of this approach</p> <ul> <li>The hook is pure and only returns data.</li> <li>The parent component controls the form state update.</li> <li>Easier to test and maintain.</li> <li>Avoids side effects inside the hook.</li> </ul>"},{"location":"office/bank/form/hooks/#reference_1","title":"Reference","text":"<ul> <li> <p>Backwards For Loops</p> </li> <li> <p>Best way to set commonId inside an array</p> </li> <li> <p>Interview Question</p> </li> </ul>"},{"location":"office/bank/form/mmd/","title":"Form - MMD","text":""},{"location":"office/bank/form/mmd/#new-feature-updated","title":"NEW Feature Updated","text":"<pre><code>  // active tab\n  const [activeTab, setActiveTab] = useState(\"1\");\n\n  return (\n    &lt;&gt;\n      &lt;Tabs\n        defaultActiveKey=\"1\"\n        onChange={(key) =&gt; {\n          setActiveTab(key);\n          form.resetFields();\n          form2.resetFields();\n          setApprovalOptions([]);\n          setVerifierOptions([]);\n          setSelectedApprovals([]);\n          setSelectedVerifier([]);\n        }}\n        items={[\n          {\n            key: \"1\",\n            label: \"Fresh\",\n            children: ()\n            /*\n             * OPTMIZATION LATER\n             */\n\n            // children: (&lt;FreshForm /&gt;)\n          },\n          {\n            key: \"2\",\n            label: \"Roll\",\n            children: ()\n            /*\n             * OPTMIZATION LATER\n             */\n\n            // children: (&lt;RollForm /&gt;)\n          }\n        ]}\n        /&gt;\n    &lt;/&gt;\n  )\n</code></pre> NewDealsForm.jsx<pre><code>const [form2] = Form.useForm();\n\n// FORM2\nconst dealCurrencyIdWatch2 = Form.useWatch(DealFormEnum?.DEAL_CURRENCY, form2);\nconst freshOrRollWatch2 = Form.useWatch(DealFormEnum?.FRESH_ROLL, form2);\nconst interestAmountWatch2 = Form.useWatch(DealFormEnum?.INTEREST_AMOUNT, form);\nconst dealAmountwatch2 = Form.useWatch(DealFormEnum?.DEAL_AMOUNT, form2) ?? 0;\nconst valueDateWatch2 = Form.useWatch(DealFormEnum?.VALUE_DATE, form2) ?? 0;\nconst numberOfDaysWatch2 =\n  Form.useWatch(DealFormEnum?.NUMBER_OF_DAYS, form2) ?? 0;\nconst interestRateWatch2 =\n  Form.useWatch(DealFormEnum?.INTEREST_RATE, form2) ?? 0;\nconst maturityDateWatch2 =\n  Form.useWatch(DealFormEnum?.MATURITY_DATE, form2) ?? 0;\nconst basisOfCountingWatch2 =\n  Form.useWatch(DealFormEnum?.COUNTING_TYPE, form2) ?? 0;\nconst TotalAccumulateAmountWatch2 =\n  Form.useWatch(DealFormEnum?.TOTAL_VALUE, form2) ?? 0;\n\n// Fresh Roll Type\nconst [rollType, setRollType] = useState(null);\n\n// FORM 2\nuseEffect(() =&gt; {\n  // console.log(\"referenceListingData: \", referenceListingData);\n  if (referenceListingData) {\n    const transformValues = {\n      counterParty: {\n        id: referenceListingData?.counterPartyId,\n        name: referenceListingData?.counterPartyName,\n      },\n      counterPartyDealer: {\n        id: referenceListingData?.counterPartyDealerId,\n        name: referenceListingData?.counterPartyDealerName,\n      },\n      dealCurrency: {\n        id: referenceListingData?.dealCurrencyId,\n        name: referenceListingData?.dealCurrencyCode,\n      },\n      basisOfCounting:\n        referenceListingData?.basisOfCounting === 360\n          ? BasisOfCountingEnum?.Actual365\n          : BasisOfCountingEnum?.Actual360,\n      interestRate: referenceListingData?.interestRate,\n      interestAmount: referenceListingData?.interestAmount,\n      numberOfDays: referenceListingData?.numberOfDays,\n\n      theyReceivedAt: {\n        id: referenceListingData?.counterpartyReceiveBankAccount?.id,\n        name: referenceListingData?.counterpartyReceiveBankAccount?.accountName,\n      },\n      weReceivedAt: {\n        id: referenceListingData?.ourReceiveBankAccount?.id,\n        name: referenceListingData?.ourReceiveBankAccount?.accountName,\n      },\n      wePayFrom: {\n        id: referenceListingData?.ourPayBankAccount?.id,\n        name: referenceListingData?.ourPayBankAccount?.accountName,\n      },\n      dealChat: referenceListingData?.dealChat,\n      maturityDate: referenceListingData?.maturityDate,\n      valueDate: referenceListingData?.valueDate,\n    };\n\n    form2.setFieldsValue({\n      [DealFormEnum.COUNTERPARTY]: transformValues?.counterParty\n        ? {\n            value: transformValues.counterParty.id,\n            label: transformValues.counterParty.name,\n          }\n        : undefined,\n      [DealFormEnum.COUNTERPARTY_BANK]: transformValues?.counterPartyDealer\n        ? {\n            value: transformValues.counterPartyDealer.id,\n            label: transformValues.counterPartyDealer.name,\n          }\n        : undefined,\n      [DealFormEnum?.DEAL_CURRENCY]: transformValues?.dealCurrency\n        ? {\n            value: transformValues.dealCurrency.id,\n            label: transformValues.dealCurrency.name,\n          }\n        : undefined,\n      [DealFormEnum?.INTEREST_RATE]: transformValues?.interestRate,\n      [DealFormEnum?.INTEREST_AMOUNT]: transformValues?.interestAmount,\n      [DealFormEnum?.NUMBER_OF_DAYS]: transformValues?.numberOfDays,\n      [DealFormEnum?.DEAL_AMOUNT]: transformValues?.dealAmount,\n      [DealFormEnum?.COUNTING_TYPE]: transformValues?.basisOfCounting,\n      [DealFormEnum?.COUNTERPARTY_RECEIVED_BANK]:\n        transformValues?.theyReceivedAt\n          ? {\n              value: transformValues?.theyReceivedAt?.id,\n              label: transformValues?.theyReceivedAt?.name,\n            }\n          : undefined,\n      [DealFormEnum?.OUR_RECEIVED_BANK]: transformValues?.weReceivedAt\n        ? {\n            value: transformValues?.weReceivedAt?.id,\n            label: transformValues?.weReceivedAt?.name,\n          }\n        : undefined,\n      [DealFormEnum?.PAY_FROM]: transformValues?.wePayFrom\n        ? {\n            value: transformValues?.wePayFrom?.id,\n            label: transformValues?.wePayFrom?.name,\n          }\n        : undefined,\n      [DealFormEnum?.DEAL_CHAT]: transformValues?.dealChat,\n    });\n\n    switch (rollType) {\n      case MMD_ROLL_TYPE?.PRINCIPLE_ONLY:\n        form2.setFieldsValue({\n          [DealFormEnum?.MATURITY_DATE]: dayjs(),\n          [DealFormEnum?.VALUE_DATE]: dayjs(transformValues?.maturityDate),\n          [DealFormEnum?.DEAL_AMOUNT]: referenceListingData?.amount,\n        });\n        break;\n      case MMD_ROLL_TYPE?.PRINCIPLE_INTEREST: {\n        const calculateSI = calculatePrincipleInterestSI(\n          referenceListingData?.numberOfDays,\n          referenceListingData?.basisOfCounting,\n          referenceListingData?.amount,\n          referenceListingData?.interestRate\n        );\n\n        form2.setFieldsValue({\n          [DealFormEnum?.MATURITY_DATE]: dayjs(),\n          [DealFormEnum?.VALUE_DATE]: dayjs(transformValues?.maturityDate),\n          [DealFormEnum?.DEAL_AMOUNT]: calculateSI,\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  }\n}, [referenceListingData, rollType, form2]);\n</code></pre> <pre><code>// NECESSAY TO NULL IF THE TOTALAMOUNT IS 0\nuseEffect(() =&gt; {\n  if (TotalAccumulateAmountWatch || TotalAccumulateAmountWatch2 === 0) {\n    setVerifierOptions([]);\n    setApprovalOptions([]);\n    setSelectedApprovals([]);\n    setSelectedVerifier([]);\n  }\n}, [TotalAccumulateAmountWatch, TotalAccumulateAmountWatch2]);\n</code></pre> <pre><code>try {\n  // await postMMD(transformValues).unwrap();\n\n  // ADDED IF/ELSE CONDITION\n  let response;\n  if (activeTab === \"1\") {\n    response = await postMMD(transformValues).unwrap();\n  } else {\n    response = await postMMD(freshRollTransformValues).unwrap();\n    console.log(\"JSON: \", JSON.stringify(freshRollTransformValues));\n  }\n  // const response = await postMMD(transformValues).unwrap();\n  setFormCreationId(response?.id);\n  setIsPostSubmitModalVisible(true);\n\n  form.resetFields();\n  setApprovalOptions([]);\n  setVerifierOptions([]);\n  setSelectedApprovals([]);\n  setSelectedVerifier([]);\n} catch (err) {\n  logger.error({ msg: \"Error\", err });\n} finally {\n  setIsLoadingButton(false);\n}\n</code></pre>"},{"location":"office/bank/form/mmd/#disable-logic-in-formitem","title":"Disable Logic in Form.Item","text":"<pre><code>&lt;Form.Item\n  label=\"Fresh/Roll\"\n  name={DealFormEnum?.FRESH_ROLL}\n  rules={[\n    {\n      required: isDevelopmentMode,\n      message: \"Please Select Fresh/Roll Type\",\n    },\n  ]}\n&gt;\n  &lt;Select\n    allowClear\n    showSearch\n    filterOption={(input, option) =&gt;\n      option.children.toLowerCase().includes(input.toLowerCase())\n    }\n    placeholder=\"Select Fresh/Roll Type\"\n    /*\n     *  ADDED THIS LOGIC FOR DISABLE\n     */\n\n    // Commented this becuase the defaultValue is  uncontrolled component\n    // defaultValue={MoneyMarketDealTypeEnum?.FRESH}\n    disabled={true}\n  &gt;\n    &lt;Option value={MoneyMarketDealTypeEnum?.FRESH}&gt;Fresh&lt;/Option&gt;\n    &lt;Option value={MoneyMarketDealTypeEnum?.ROLL}&gt;Roll&lt;/Option&gt;\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/bank/form/mmd/#utils","title":"UTILS","text":"formulas<pre><code>// ADDED\nexport const calculatePrincipleInterestSI = (\n  numOfDays,\n  basisOfCounting,\n  principal,\n  rate\n) =&gt; {\n  const time = calculateTime(numOfDays, basisOfCounting);\n  const interest = calculateSimpleInterest(principal, rate, time);\n\n  return principal + interest;\n};\n</code></pre>"},{"location":"office/bank/form/mmd/#hooks","title":"HOOKS","text":"<p>How to Separate Logic &amp; UI in React Using Custom Hook</p> <p>Creating React custom hooks with Pieces</p> <p>You can create a custom hook in a separate file and use it in your components for better code organization and reusability. Here\u2019s how you can do it with your <code>useDealFormWatches</code> logic:</p>"},{"location":"office/bank/form/mmd/#1-create-a-new-file-for-your-hook-eg-usedealformwatchesjs","title":"1. Create a new file for your hook (e.g., <code>useDealFormWatches.js</code>):","text":"<pre><code>// useDealFormWatches.js\n\nimport { Form } from \"your-form-library\"; // replace with your actual import path\nimport { DealFormEnum } from \"your-enum-file\"; // replace with your actual import path\n\nexport function useDealFormWatches(form) {\n  return {\n    dealCurrencyId: Form.useWatch(DealFormEnum?.DEAL_CURRENCY, form),\n    freshOrRoll: Form.useWatch(DealFormEnum?.FRESH_ROLL, form),\n    interestAmount: Form.useWatch(DealFormEnum?.INTEREST_AMOUNT, form),\n    dealAmount: Form.useWatch(DealFormEnum?.DEAL_AMOUNT, form) ?? 0,\n    valueDate: Form.useWatch(DealFormEnum?.VALUE_DATE, form) ?? 0,\n    numberOfDays: Form.useWatch(DealFormEnum?.NUMBER_OF_DAYS, form) ?? 0,\n    interestRate: Form.useWatch(DealFormEnum?.INTEREST_RATE, form) ?? 0,\n    maturityDate: Form.useWatch(DealFormEnum?.MATURITY_DATE, form) ?? 0,\n    basisOfCounting: Form.useWatch(DealFormEnum?.COUNTING_TYPE, form) ?? 0,\n    totalAccumulateAmount: Form.useWatch(DealFormEnum?.TOTAL_VALUE, form) ?? 0,\n  };\n}\n</code></pre> UPDATED<pre><code>import { Form } from \"antd\";\nimport { DealFormEnum } from \"@features/mmd/utils/constants\";\n\nexport default function useDealFormWatches(form) {\n  // List of all fields you want to watch collectively\n  const allFields = [\n    DealFormEnum.DEAL_CURRENCY,\n    DealFormEnum.FRESH_ROLL,\n    DealFormEnum.INTEREST_AMOUNT,\n    DealFormEnum.DEAL_AMOUNT,\n    DealFormEnum.VALUE_DATE,\n    DealFormEnum.NUMBER_OF_DAYS,\n    DealFormEnum.INTEREST_RATE,\n    DealFormEnum.MATURITY_DATE,\n    DealFormEnum.COUNTING_TYPE,\n    DealFormEnum.TOTAL_VALUE,\n  ];\n\n  return {\n    // Watch all fields as an object (keys are field names, values are current values)\n    allFields: Form.useWatch(allFields, form),\n\n    // Individual watches for convenience\n    dealCurrencyId: Form.useWatch(DealFormEnum.DEAL_CURRENCY, form),\n    freshOrRoll: Form.useWatch(DealFormEnum.FRESH_ROLL, form),\n    interestAmount: Form.useWatch(DealFormEnum.INTEREST_AMOUNT, form),\n    dealAmount: Form.useWatch(DealFormEnum.DEAL_AMOUNT, form) ?? 0,\n    valueDate: Form.useWatch(DealFormEnum.VALUE_DATE, form) ?? 0,\n    numberOfDays: Form.useWatch(DealFormEnum.NUMBER_OF_DAYS, form) ?? 0,\n    interestRate: Form.useWatch(DealFormEnum.INTEREST_RATE, form) ?? 0,\n    maturityDate: Form.useWatch(DealFormEnum.MATURITY_DATE, form) ?? 0,\n    basisOfCounting: Form.useWatch(DealFormEnum.COUNTING_TYPE, form) ?? 0,\n    totalAccumulateAmount: Form.useWatch(DealFormEnum.TOTAL_VALUE, form) ?? 0,\n  };\n}\n\n/*********************************************************************************/\n// INSIDE COMPONENT\nconst {\n  allFields,\n  dealCurrencyId,\n  freshOrRoll,\n  // ...other fields\n} = useDealFormWatches(form);\n\n// Effect for all fields changes\nuseEffect(() =&gt; {\n  console.log(\"Some field changed:\", allFields);\n  // Do something when any of the watched fields changes\n}, [allFields]);\n\n// Effect for particular field only\nuseEffect(() =&gt; {\n  console.log(\"dealCurrencyId changed:\", dealCurrencyId);\n  // Do something only when dealCurrencyId changes\n}, [dealCurrencyId]);\n\n/*********************************************************************************/\n// UPDATED AGAIN\nconst [freshForm] = Form.useForm();\nconst [rollForm] = Form.useForm();\n\nconst dispatch = useDispatch();\nconst navigate = useNavigate();\n\n// API\nconst { selectedIds, handleSelect } = useFormSelectIds();\n\n// Watch all fields for freshForm with a unique name\nconst { allFields: freshAllFields } = useDealFormWatches(freshForm);\n\n// Watch all fields for rollForm with a unique name\nconst { allFields: rollAllFields } = useDealFormWatches(rollForm);\n</code></pre>"},{"location":"office/bank/form/mmd/#2-import-and-use-your-hook-in-your-component","title":"2. Import and use your hook in your component:","text":"<pre><code>import { useDealFormWatches } from \"./useDealFormWatches\";\n\nconst freshFormWatches = useDealFormWatches(freshForm);\nconst rollFormWatches = useDealFormWatches(rollForm);\n</code></pre> Why this is good practice: <ul> <li>Keeps your component files clean and focused on UI logic.</li> <li>Makes your form-watching logic reusable and testable.</li> </ul> <p>Follows the recommended separation of concerns for custom hooks.</p> <ul> <li>Stackoverflow: Using a React hook in separate file to the component</li> <li>Separation of concerns with custom React hooks </li> <li>Official: Reusing Logic with Custom Hooks</li> <li>Official Legacy: Building Your Own Hooks</li> <li>Stackoverflow: Custom Hooks inside Javascript Class</li> <li>W3schols: React Custom Hooks</li> <li>How to Create Hooks In Javascript (Simple Examples)</li> <li>Reddit: Custom hooks folder structure </li> <li>How to Separate Logic &amp; UI in React Using Custom Hook</li> <li>React Custom Hook - useFetch </li> <li>Creating React custom hooks with Pieces</li> <li>FAQ: The Effect Hook - Separate Hooks for Separate Effects</li> <li>Official Legacy: Rules of Hooks</li> </ul>"},{"location":"office/bank/form/mmd/#need-to-update","title":"Need to Update","text":"<p>How to improve and DRY (Don't Repeat Yourself) your code</p> <p>You can extract the common logic into a reusable function and call it from a single <code>useEffect</code> for each form. This improves readability and maintainability.</p> <p>Step 1: Extract common logic into a function</p> <pre><code>function updateFormWithApprovals({\n  form,\n  approvalOptions,\n  verifierOptions,\n  setSelectedVerifier,\n  setSelectedApprovals,\n}) {\n  const verifiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  const verifiersList = findUsersByIds(\n    verifiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n  setSelectedVerifier(verifiersList);\n\n  if (!isEmpty(verifiersIdOnly)) {\n    form.setFieldsValue({\n      [DealFormEnum.DEAL_APPROVERS]: verifiersIdOnly,\n    });\n  } else {\n    form.setFieldsValue({\n      [DealFormEnum.DEAL_APPROVERS]: null,\n    });\n  }\n\n  const approversIdOnly = approvalOptions.map((item) =&gt; item?.aspNetUserId);\n  const approversList = findUsersByIds(\n    approversIdOnly,\n    approvalOptions,\n    VERIFIER_TYPES.APPROVERS\n  );\n  const firstApprover = approversList[0];\n  setSelectedApprovals([firstApprover]);\n\n  form.setFieldsValue({\n    [DealFormEnum.FRESH_ROLL]: MoneyMarketDealTypeEnum.FRESH,\n  });\n\n  if (!isEmpty(approversIdOnly)) {\n    form.setFieldsValue({\n      [DealFormEnum.DEAL_VERIFIERS]:\n        approversIdOnly[0] === verifiersIdOnly[0]\n          ? approversIdOnly.length &gt; 1\n            ? approversIdOnly[1]\n            : null\n          : approversIdOnly[0],\n    });\n  } else {\n    form.setFieldsValue({\n      [DealFormEnum.DEAL_VERIFIERS]: null,\n    });\n  }\n}\n</code></pre> <p>Step 2: Use this function in your effects</p> <pre><code>useEffect(() =&gt; {\n  if (approvalPersonData) {\n    const listVerifiers = newCurrentVerifiers(approvalPersonData);\n    setVerifierOptions(listVerifiers);\n\n    const verifiersListing = newCurrentApprovers(approvalPersonData);\n    setApprovalOptions(verifiersListing);\n    setIsDebouncingStatus(false);\n  }\n}, [approvalPersonData]);\n\nuseEffect(() =&gt; {\n  updateFormWithApprovals({\n    form: freshForm,\n    approvalOptions,\n    verifierOptions,\n    setSelectedVerifier,\n    setSelectedApprovals,\n  });\n}, [approvalOptions, verifierOptions, freshForm]);\n\nuseEffect(() =&gt; {\n  updateFormWithApprovals({\n    form: rollForm,\n    approvalOptions,\n    verifierOptions,\n    setSelectedVerifier,\n    setSelectedApprovals,\n  });\n}, [approvalOptions, verifierOptions, rollForm]);\n</code></pre> Benefits of this approach <ul> <li> <p>Single source of truth: The logic to update forms is in one place.</p> </li> <li> <p>Less code duplication: Easier to maintain and less error-prone.</p> </li> <li> <p>Clear separation: <code>useEffect</code> hooks just call the updater function with appropriate params.</p> </li> </ul> Additional tips <ul> <li> <p>You might want to memoize <code>updateFormWithApprovals</code> with <code>useCallback</code> if you pass it around or if you want to prevent unnecessary re-renders.</p> </li> <li> <p>Ensure that <code>setSelectedVerifier</code> and <code>setSelectedApprovals</code> are stable (e.g., from <code>useState</code> or <code>useReducer</code>) or memoized.</p> </li> </ul> <p>If you want, I can help you refactor further or optimize performance!</p>"},{"location":"office/bank/form/new-logic/","title":"Form - New Logic","text":""},{"location":"office/bank/form/new-logic/#new-logic","title":"New Logic","text":"<p><code>pg: 521-567</code></p> ForexForm.js<pre><code>useEffect(() =&gt; {\n  let verfiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  let verifiersList = findUsersByIds(\n    verfiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n  setSelectedVerifier(verifiersList);\n  // setSelectedVerifierIdOnly(verfiersIdOnly);\n\n  if (!isEmpty(verfiersIdOnly)) {\n    form.setFieldsValue({\n      [FOREX_DEAL.DEAL_APPROVERS]: verfiersIdOnly,\n    });\n  } else {\n    form.setFieldsValue({\n      [FOREX_DEAL.DEAL_APPROVERS]: null,\n    });\n  }\n\n  let approversIdOnly = approvalOptions.map((item) =&gt; item?.aspNetUserId);\n  let approversList = findUsersByIds(\n    approversIdOnly,\n    approvalOptions,\n    VERIFIER_TYPES.APPROVERS\n  );\n  const firstApprovers = approversList[0];\n\n  setSelectedApprovals([firstApprovers]);\n\n  if (!isEmpty(approversIdOnly)) {\n    form.setFieldsValue({\n      // [FOREX_DEAL.DEAL_VERIFIERS]: approversIdOnly[0],\n      [FOREX_DEAL.DEAL_VERIFIERS]: !isEmpty(approversIdOnly)\n        ? approversIdOnly[0] === verfiersIdOnly[0]\n          ? approversIdOnly?.length &gt; 1\n            ? approversIdOnly[1]\n            : null\n          : approversIdOnly[0]\n        : null,\n    });\n  } else {\n    form.setFieldsValue({\n      [FOREX_DEAL.DEAL_VERIFIERS]: null,\n    });\n  }\n}, [approvalOptions, verifierOptions, form]);\n</code></pre>"},{"location":"office/bank/form/rate-input-difference/","title":"Form - Rate input Difference","text":""},{"location":"office/bank/form/rate-input-difference/#rate-input-difference","title":"Rate input Difference","text":"Question <p>When a user manually modifies the Rate input field, the system should display the difference between the original system-provided rate and the user-entered rate, indicating whether the change was an increase or a decrease.</p> ForexForm.jsx<pre><code>const [rateInrementDecrement, setRateInrementDecrement] = useState({\n  percentage: null,\n  difference: null,\n});\nconst [currentRate, setCurrentRate] = useState(null);\n\nuseEffect(() =&gt; {\n  if (rateConversionData) {\n    setIsMultiplicationStatus(rateConversionData?.IsMultiply);\n\n    /**************************************/\n    // ADDED\n    setCurrentRate(rateConversionData?.Rate);\n\n    form.setFieldsValue({\n      [FOREX_DEAL.RATE]: rateConversionData?.Rate,\n      [FOREX_DEAL.SELLING_AMOUNT]: 0,\n      [FOREX_DEAL.BUYING_AMOUNT]: 0,\n      [FOREX_DEAL.DEAL_APPROVERS]: null,\n      [FOREX_DEAL.DEAL_VERIFIERS]: null,\n    });\n    setApprovalOptions([]);\n    setVerifierOptions([]);\n    setSelectedApprovals([]);\n    setSelectedVerifier(null);\n  }\n}, [rateConversionData, form]);\n\n/*\n * If the Rate Converstion API ERROR set null\n */\nuseEffect(() =&gt; {\n  if (rateConversionError) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.RATE]: null,\n      [FOREX_DEAL.DEAL_APPROVERS]: null,\n      [FOREX_DEAL.DEAL_VERIFIERS]: null,\n    });\n    setIsMultiplicationStatus(null);\n    setApprovalOptions([]);\n    setVerifierOptions([]);\n    setSelectedApprovals([]);\n    setSelectedVerifier(null);\n\n    /**************************************/\n    setCurrentRate(null);\n    // also added this\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n  }\n}, [rateConversionError, form]);\n\n// Side Effects\nuseEffect(() =&gt; {\n  if (transationTypeWatch === TRANSACTION_TYPE.BUY) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.SELLING_CURRENCY]: undefined,\n    });\n    const isBuyingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.BUYING_CURRENCY,\n    ]);\n    if (isBuyingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isBuyingCurrencySelected });\n    }\n\n    /********************************************************************/\n    // ADDED\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n  } else if (transationTypeWatch === TRANSACTION_TYPE.SELL) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.BUYING_CURRENCY]: undefined,\n    });\n    const isSellingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.SELLING_CURRENCY,\n    ]);\n    if (isSellingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isSellingCurrencySelected });\n    }\n\n    /********************************************************************/\n    // ADDED\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n  }\n\n  form.setFieldsValue({\n    [FOREX_DEAL?.SELLING_AMOUNT]: undefined,\n    [FOREX_DEAL?.BUYING_AMOUNT]: undefined,\n    //\n    [FOREX_DEAL?.DEAL_APPROVERS]: null,\n    [FOREX_DEAL.DEAL_VERIFIERS]: null,\n  });\n  setApprovalOptions([]);\n  setVerifierOptions([]);\n  setSelectedApprovals([]);\n  setSelectedVerifier([]);\n}, [transationTypeWatch, form]);\n\n// INCREMENT / DECREMENT\nuseEffect(() =&gt; {\n  if (buyingCurrencyWatch === undefined || sellingCurrencyWatch === undefined) {\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n    return;\n  }\n\n  if (currentRate != null) {\n    const calculate = Number(rateAmountWatch) - Number(currentRate);\n    const percentageChange = (calculate / Number(currentRate)) * 100;\n\n    setRateInrementDecrement({\n      percentage: percentageChange.toFixed(2),\n      difference: calculate.toFixed(2),\n    });\n  }\n}, [rateAmountWatch, currentRate, buyingCurrencyWatch, sellingCurrencyWatch]);\n\n{\n  values?.[FOREX_DEAL.TRANSACTION_TYPE] === TRANSACTION_TYPE.BUY ? (\n    &lt;&gt;\n      {/********************************************************************************/}\n      &lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n        &lt;Form.Item\n          name={FOREX_DEAL.RATE}\n          // label=\"Rate\"\n          label={\n            &lt;&gt;\n              &lt;span style={{ marginRight: \"4px\" }}&gt;Rate:&lt;/span&gt;{\" \"}\n              {rateInrementDecrement?.difference &gt; 0 ? (\n                &lt;span style={{ color: \"green\" }}&gt;\n                  Increase by {Math.abs(rateInrementDecrement?.percentage)} % ({\" \"}\n                  {Math.abs(rateInrementDecrement?.difference)} )\n                &lt;/span&gt;\n              ) : rateInrementDecrement?.difference &lt; 0 ? (\n                &lt;span style={{ color: \"red\" }}&gt;\n                  Decrease by {Math.abs(rateInrementDecrement?.percentage)} % ({\" \"}\n                  {Math.abs(rateInrementDecrement?.difference)} )\n                &lt;/span&gt;\n              ) : (\n                \"\"\n              )}\n            &lt;/&gt;\n          }\n          rules={[{ required: false, message: \"Please Enter Rate\" }]}\n          // className=\"no-updown\"\n          controls={false}\n        &gt;\n          &lt;InputNumber\n            min={0}\n            style={{ width: \"100%\" }}\n            // onChange={handleRateAmountOperation}\n            controls={false}\n            keyboard={false}\n            formatter={(value) =&gt; intCurrencyRateFormatter(value)}\n          /&gt;\n        &lt;/Form.Item&gt;\n      &lt;/Col&gt;;\n    &lt;/&gt;\n  ) : (\n    &lt;&gt;\n      {/********************************************************************************/}\n      &lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n        &lt;Form.Item\n          name={FOREX_DEAL.RATE}\n          // label=\"Rate\"\n          label={\n            &lt;&gt;\n              &lt;span style={{ marginRight: \"4px\" }}&gt;Rate:&lt;/span&gt;{\" \"}\n              {rateInrementDecrement?.difference &gt; 0 ? (\n                &lt;span style={{ color: \"green\" }}&gt;\n                  Increase by {Math.abs(rateInrementDecrement?.percentage)} % ({\" \"}\n                  {Math.abs(rateInrementDecrement?.difference)} )\n                &lt;/span&gt;\n              ) : rateInrementDecrement?.difference &lt; 0 ? (\n                &lt;span style={{ color: \"red\" }}&gt;\n                  Decrease by {Math.abs(rateInrementDecrement?.percentage)} % ({\" \"}\n                  {Math.abs(rateInrementDecrement?.difference)} )\n                &lt;/span&gt;\n              ) : (\n                \"\"\n              )}\n            &lt;/&gt;\n          }\n          rules={[{ required: false, message: \"Please Enter Rate\" }]}\n          controls={false}\n        &gt;\n          &lt;InputNumber\n            style={{ width: \"100%\" }}\n            controls={false}\n            keyboard={false}\n            formatter={(value) =&gt; intCurrencyRateFormatter(value)}\n          /&gt;\n        &lt;/Form.Item&gt;\n      &lt;/Col&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"office/bank/form/rate-input-difference/#tips","title":"Tips","text":"<p>To remove <code>-</code> or <code>+</code> signs from JavaScript numbers and get only the absolute numeric value, you can use the <code>Math.abs()</code> function.</p> <p>\u2705 Use <code>Math.abs()</code> to remove <code>-</code> sign:</p> <pre><code>let num = -42;\nlet positiveNum = Math.abs(num); // 42\n\nlet anotherNum = +37; // stays 37\nlet cleanNum = Math.abs(anotherNum); // still 37\n</code></pre> <ul> <li><code>Math.abs()</code> returns the absolute value (always positive).</li> <li>It removes the negative sign, and a <code>+</code> prefix has no effect anyway.</li> </ul> <p>\u2705 If you're working with a string (like <code>\"+42\"</code> or <code>\"-42\"</code>):</p> <p>Use <code>parseFloat()</code> or <code>Number()</code> after stripping symbols if needed:</p> <pre><code>let str = \"-42.5\";\nlet cleaned = Math.abs(parseFloat(str)); // 42.5\n\nlet str2 = \"+18.9\";\nlet cleaned2 = Math.abs(Number(str2)); // 18.9\n</code></pre> \ud83d\udd0d Example: Cleaning up input<pre><code>function cleanNumber(input) {\n  return Math.abs(Number(input));\n}\n\nconsole.log(cleanNumber(\"-12.34\")); // 12.34\nconsole.log(cleanNumber(\"+56\")); // 56\n</code></pre> <p>how to check a number is postive or negative in js</p> <p>multiple chaining with the <code>?</code> (ternary operator).</p>"},{"location":"office/bank/form/rate-input-difference/#ternary-operator-basics","title":"\ud83d\udd01 Ternary Operator Basics","text":"<p>The ternary operator syntax is:</p> <pre><code>condition ? valueIfTrue : valueIfFalse;\n</code></pre> <p>This is the same as:</p> <pre><code>if (condition) {\n  return valueIfTrue;\n} else {\n  return valueIfFalse;\n}\n</code></pre>"},{"location":"office/bank/form/rate-input-difference/#chaining-ternaries-nested-ternaries","title":"\ud83c\udf3f Chaining Ternaries (Nested Ternaries)","text":"<p>You can chain ternary operators when you have multiple conditions to check, like an<code>if...else</code> <code>if...else</code> ladder.</p> <p>\u2705 Example: Grading System</p> <pre><code>const score = 85;\n\nconst grade = score &gt;= 90 ? \"A\" :\n              score &gt;= 80 ? \"B\" :\n              score &gt;= 70 ? \"C\" :\n              score &gt;= 60 ? \"D\" : \"F\";\n\nconsole.log(grade); // Output: \"B\"\n</code></pre> <p>This checks:</p> <ul> <li>If <code>score &gt;= 90</code>, return <code>\"A\"</code></li> <li>Else if <code>score &gt;= 80</code>, return <code>\"B\"</code></li> <li>...and so on.</li> </ul>"},{"location":"office/bank/form/rate-input-difference/#formatting-tip-for-clarity","title":"\ud83d\udca1 Formatting Tip (for clarity)","text":"<p>Nested ternaries can quickly get unreadable. To make it easier to follow, format them clearly:</p> <pre><code>const label = value &gt; 100 ? \"High\" :\n              value &gt; 50  ? \"Medium\" :\n              value &gt; 0   ? \"Low\" :\n              \"None\";\n</code></pre>"},{"location":"office/bank/form/rate-input-difference/#caution","title":"\u26a0\ufe0f Caution","text":"<p>Avoid deep or overly complex chains. If it starts looking confusing, it's better to use regular <code>if...else</code> <code>if...else</code> blocks.</p>"},{"location":"office/bank/form/rate-input-difference/#example-with-currentrate","title":"\ud83e\uddea Example with currentRate","text":"<p>Let's say you want to label a rate like this:</p> <ul> <li><code>\"High\"</code> if rate &gt; 10</li> <li><code>\"Moderate\"</code> if between 1\u201310</li> <li><code>\"Low\"</code> if between -10 and 0</li> <li><code>\"Negative\"</code> if &lt; -10</li> </ul> <pre><code>const label = currentRate &gt; 10 ? \"High\" :\n              currentRate &gt; 0  ? \"Moderate\" :\n              currentRate &gt; -10 ? \"Low\" :\n              \"Negative\";\n</code></pre>"},{"location":"office/bank/form/rate-input-difference/#reference","title":"Reference","text":"<ul> <li>Perplexity Formula</li> <li>W3schools: JavaScript Math.sign()</li> <li>Javascript Program to Check if a number is Positive, Negative, or Zero</li> </ul>"},{"location":"office/bank/form/rateMinMaxValidator/","title":"Form - Rate Min/Max Validator Promise","text":""},{"location":"office/bank/form/rateMinMaxValidator/#rate-minmax-validator","title":"Rate Min/Max Validator","text":""},{"location":"office/bank/form/rateMinMaxValidator/#question","title":"Question","text":"<p>Do you need to explicitly return <code>Promise.resolve()</code> at the end of an <code>async</code> function?</p> <p>No, you do not need to explicitly return <code>Promise.resolve()</code> in an <code>async</code> function.</p> Why? <ul> <li>An <code>async</code> function always returns a promise.</li> <li>If you return a value (or nothing), the promise automatically resolves with that value.</li> <li>If you throw an error inside an <code>async</code> function, the promise rejects with that error.</li> </ul> <p>So this:</p> <pre><code>export const validateMinMaxRate = (minRate, maxRate) =&gt; {\n  return async (_, value) =&gt; {\n    if (value === undefined || value === null) return; // implicitly resolves with undefined\n\n    if (typeof value !== \"number\") {\n      throw new Error(\"Value must be a number\"); // rejects promise\n    }\n\n    if (value &lt; minRate) {\n      throw new Error(`Value must be at least ${minRate}`); // rejects promise\n    }\n\n    if (value &gt; maxRate) {\n      throw new Error(`Value must be at most ${maxRate}`); // rejects promise\n    }\n\n    // No need to explicitly return Promise.resolve()\n  };\n};\n</code></pre> <p>is equivalent to:</p> <pre><code>export const validateMinMaxRate = (minRate, maxRate) =&gt; {\n  return (_, value) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n      if (value === undefined || value === null) return resolve();\n\n      if (typeof value !== \"number\") {\n        return reject(new Error(\"Value must be a number\"));\n      }\n\n      if (value &lt; minRate) {\n        return reject(new Error(`Value must be at least ${minRate}`));\n      }\n\n      if (value &gt; maxRate) {\n        return reject(new Error(`Value must be at most ${maxRate}`));\n      }\n\n      resolve();\n    });\n  };\n};\n</code></pre> Summary <ul> <li>Using <code>async/await</code> syntax, no need to manually return <code>Promise.resolve()</code>.</li> <li>Just return or finish the function without throwing to resolve.</li> <li>Throw errors to reject.</li> </ul>"},{"location":"office/bank/form/rateMinMaxValidator/#defensive-programming","title":"Defensive Programming","text":"<p>Defensive programming means writing code that anticipates and safely handles unexpected or invalid inputs, such as <code>null</code>, <code>undefined</code>, or incorrect types.</p> <p>In your validator, if <code>minRate</code> or <code>maxRate</code> is <code>null</code>, <code>undefined</code>, or not a number, the current code will behave unpredictably because comparisons like <code>value &lt; minRate</code> will not work as expected and may cause runtime errors or incorrect validation</p>"},{"location":"office/bank/form/rateMinMaxValidator/#final","title":"Final","text":"validateMinMaxRate.js<pre><code>export const validateMinMaxRate = (minRate, maxRate) =&gt; {\n  if (typeof minRate !== \"number\" || isNaN(minRate)) {\n    throw new Error(\"minRate must be a valid number\");\n  }\n  if (typeof maxRate !== \"number\" || isNaN(maxRate)) {\n    throw new Error(\"maxRate must be a valid number\");\n  }\n  if (minRate &gt; maxRate) {\n    throw new Error(\"minRate cannot be greater than maxRate\");\n  }\n\n  return async (_, value) =&gt; {\n    if (value === undefined || value === null) return;\n\n    if (typeof value !== \"number\") {\n      throw new Error(\"Value must be a number\");\n    }\n\n    // Check if value is less than minRate (exclusive)\n    if (value &lt; minRate) {\n      throw new Error(`Value must be at least ${minRate}`);\n    }\n\n    // Check if value is greater than maxRate (exclusive)\n    if (value &gt; maxRate) {\n      throw new Error(`Value must be at most ${maxRate}`);\n    }\n  };\n};\n</code></pre>"},{"location":"office/bank/form/rateMinMaxValidator/#theory","title":"Theory","text":"<pre><code>&lt;Form.Item\n  name=\"confirm\"\n  label=\"Confirm Password\"\n  dependencies={[\"password\"]}\n  hasFeedback\n  rules={[\n    {\n      required: true,\n      message: \"Please confirm your password!\",\n    },\n    ({ getFieldValue }) =&gt; ({\n      validator(_, value) {\n        if (!value || getFieldValue(\"password\") === value) {\n          return Promise.resolve();\n        }\n        return Promise.reject(\n          new Error(\"The new password that you entered do not match!\")\n        );\n      },\n    }),\n  ]}\n&gt;\n  &lt;Input.Password /&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/bank/form/rateMinMaxValidator/#reference","title":"Reference","text":"<ul> <li>Perplexity Form antd Validators</li> </ul>"},{"location":"office/bank/form/super-loader/","title":"Form - Loader","text":""},{"location":"office/bank/form/super-loader/#super-loader","title":"Super Loader","text":"<pre><code>const { Text } = Typography;\n\n// debouncing\nconst [isDebouncingStatus, setIsDebouncingStatus] = useState(false);\n\nconst [\n  triggerGetApprovalPerson,\n  {\n    data: approvalPersonData,\n    isLoading: approvalPersonLoading,\n    isError: approvalPersonError,\n    isFetching: approvalPersonFetching,\n    // added\n    isSuccess: approvalPersonSuccess,\n    isUninitialized,\n    currentData,\n  },\n] = useLazyGetForexApprovalPersonQuery();\n\n&lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n  &lt;MultiSelectField\n    label={\n      &lt;&gt;\n        Verifier{\" \"}\n        &lt;Text type=\"secondary\"&gt;\n          {buyingAmountWatch !== 0 &amp;&amp; (\n            &lt;&gt;\n              (\n              {getLabelByValue(\n                values?.[FOREX_DEAL.BUYING_CURRENCY],\n                currency,\n                \"code\"\n              ) ?? \"\"}\n              : {approvalPersonFetching ||\n              isUninitialized ||\n              approvalPersonLoading ||\n              isDebouncingStatus ? (\n                &lt;Spin tip=\"Loading\" size=\"small\" spinning /&gt;\n              ) : !isUninitialized &amp;&amp;\n                !approvalPersonFetching &amp;&amp;\n                approvalPersonSuccess &amp;&amp;\n                currentData ? (\n                intCurencyFormatter(buyingAmountWatch)\n              ) : (\n                \"-\"\n              )})\n            &lt;/&gt;\n          )}\n        &lt;/Text&gt;\n      &lt;/&gt;\n    }\n    name=\"verifierIds\"\n    placeholder=\"Select Verifier\"\n    options={verifierOptions}\n    loading={approvalPersonLoading}\n    selectedValues={selectedVerifier}\n    onChange={handleVerifierChange}\n    isEnabled={isSkipVerifierApprover}\n  /&gt;\n&lt;/Col&gt;;\n\nuseEffect(() =&gt; {\n  const currentFormValues = form.getFieldsValue();\n  const buyingAmountValue = currentFormValues[FOREX_DEAL?.BUYING_AMOUNT];\n  const sellingAmountValue = currentFormValues[FOREX_DEAL?.SELLING_AMOUNT];\n\n  if (\n    transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n    buyingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    // const formattedSellingAmount = processAmount(sellingAmountValue);\n    // Updated\n    const formattedSellingAmount = processAmount(buyingAmountValue);\n    if (formattedSellingAmount !== null) {\n      logger.info(\"sellingAmountValue: \", formattedSellingAmount);\n\n      // ADDED NEW\n      setIsDebouncingStatus(true);\n\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedSellingAmount,\n        sellingCurrencyId: buyingCurrencyWatch,\n      });\n    } else {\n      logger.info(\"Invalid sellingAmountValue\");\n    }\n  } else if (\n    transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n    sellingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    // const formattedBuyingAmount = processAmount(buyingAmountValue);\n    // Updated\n    const formattedBuyingAmount = processAmount(sellingAmountValue);\n    if (formattedBuyingAmount !== null) {\n      logger.info(\"buyingAmountValue: \", formattedBuyingAmount);\n\n      // ADDED NEW\n      setIsDebouncingStatus(true);\n\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedBuyingAmount,\n        sellingCurrencyId: sellingCurrencyWatch,\n      });\n    } else {\n      logger.info(\"Invalid buyingAmountValue\");\n    }\n  }\n}, [\n  buyingAmountWatch,\n  sellingAmountWatch,\n  buyingCurrencyWatch,\n  sellingCurrencyWatch,\n  transationTypeWatch,\n  debouncedTriggerGetApprovalPerson,\n  form,\n]);\n\n&lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n  &lt;MultiSelectField\n    label={\n      &lt;&gt;\n        Verifier{\" \"}\n        &lt;Text type=\"secondary\" style={{ padding: \"0 6px\" }}&gt;\n          {buyingAmountWatch !== 0 &amp;&amp; (\n            &lt;&gt;\n              (\n              {getLabelByValue(\n                values?.[FOREX_DEAL.BUYING_CURRENCY],\n                currency,\n                \"code\"\n              ) ?? \"\"}\n              : {approvalPersonFetching ||\n              isUninitialized ||\n              approvalPersonLoading ||\n              isDebouncingStatus ? (\n                &lt;Spin tip=\"Loading\" size=\"small\" spinning /&gt;\n              ) : !isUninitialized &amp;&amp;\n                !approvalPersonFetching &amp;&amp;\n                approvalPersonSuccess &amp;&amp;\n                currentData ? (\n                intCurencyFormatter(buyingAmountWatch)\n              ) : (\n                \"-\"\n              )})\n            &lt;/&gt;\n          )}\n        &lt;/Text&gt;\n      &lt;/&gt;\n    }\n    name=\"verifierIds\"\n    placeholder=\"Select Verifier\"\n    options={verifierOptions}\n    loading={approvalPersonLoading}\n    selectedValues={selectedVerifier}\n    onChange={handleVerifierChange}\n    isEnabled={isSkipVerifierApprover}\n  /&gt;\n&lt;/Col&gt;;\n\n&lt;Col xs={24} sm={24} md={24} lg={24} xl={24} style={{ textAlign: \"right\" }}&gt;\n  &lt;Form.Item&gt;\n    &lt;Button\n      type=\"primary\"\n      htmlType=\"submit\"\n      loading={isLoadingButton}\n      disabled={approvalPersonFetching}\n      style={{\n        marginTop: \"30px\",\n      }}\n    &gt;\n      Submit\n    &lt;/Button&gt;\n  &lt;/Form.Item&gt;\n&lt;/Col&gt;;\n</code></pre>"},{"location":"office/bank/form/tolaranceReset/","title":"Form - Tolerance Reset Value","text":""},{"location":"office/bank/form/tolaranceReset/#tolarance-rate-reset","title":"Tolarance Rate Reset","text":"<pre><code>const [tolaranceValue, setTolaranceValue] = useState({\n  min: null,\n  max: null,\n});\n\n// INCREMENT / DECREMENT\nuseEffect(() =&gt; {\n  if (buyingCurrencyWatch === undefined || sellingCurrencyWatch === undefined) {\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n    setTolaranceValue({\n      min: null,\n      max: null,\n    });\n    return;\n  }\n\n  if (currentRate != null) {\n    const calculate = Number(rateAmountWatch) - Number(currentRate);\n    const percentageChange = (calculate / Number(currentRate)) * 100;\n\n    setRateInrementDecrement({\n      percentage: percentageChange.toFixed(2),\n      difference: calculate.toFixed(2),\n    });\n  }\n}, [rateAmountWatch, currentRate, buyingCurrencyWatch, sellingCurrencyWatch]);\n\nuseEffect(() =&gt; {\n  if (rateConversionData) {\n    setIsMultiplicationStatus(rateConversionData?.IsMultiply);\n    setCurrentRate(rateConversionData?.Rate);\n    setTolaranceValue({\n      min: rateConversionData?.tolaranceMin,\n      max: rateConversionData?.tolaranceMax,\n    });\n    form.setFieldsValue({\n      [NDFEnum.RATE]: rateConversionData?.Rate,\n      [NDFEnum.SELLING_AMOUNT]: 0,\n      [NDFEnum.BUYING_AMOUNT]: 0,\n      [NDFEnum.DEAL_APPROVERS]: null,\n      [NDFEnum.DEAL_VERIFIERS]: null,\n    });\n    setApprovalOptions([]);\n    setVerifierOptions([]);\n    setSelectedApprovals([]);\n    setSelectedVerifier(null);\n  }\n}, [rateConversionData, form]);\n\nuseEffect(() =&gt; {\n  if (!sellingCurrencyWatch) {\n    setIsMultiplicationStatus(null);\n    form.setFieldsValue({\n      [NDFEnum.DEAL_APPROVERS]: null,\n      [NDFEnum.DEAL_VERIFIERS]: null,\n    });\n    setApprovalOptions([]);\n    setVerifierOptions([]);\n    setTolaranceValue({\n      min: null,\n      max: null,\n    });\n  }\n}, [sellingCurrencyWatch, form]);\n\n/*\n * If the Rate Converstion API ERROR set null\n */\nuseEffect(() =&gt; {\n  if (rateConversionError) {\n    form.setFieldsValue({\n      [NDFEnum?.RATE]: null,\n      [NDFEnum.DEAL_APPROVERS]: null,\n      [NDFEnum.DEAL_VERIFIERS]: null,\n    });\n    setIsMultiplicationStatus(null);\n    setApprovalOptions([]);\n    setVerifierOptions([]);\n    setSelectedApprovals([]);\n    setSelectedVerifier(null);\n    setCurrentRate(null);\n    setRateInrementDecrement({\n      percentage: null,\n      difference: null,\n    });\n    setTolaranceValue({\n      min: null,\n      max: null,\n    });\n  }\n}, [rateConversionError, form]);\n\n\nreturn (\n    &lt;&gt;\n    &lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n        &lt;Form.Item\n            name={NDFEnum.RATE}\n            label={\n                &lt;&gt;\n                    &lt;span style={{ marginRight: \"4px\" }}&gt;\n                        Rate:\n                        {/* {rateConversionData?.tolaranceMin &amp;&amp; (\n                          &lt;&gt;\n                            {\" \"}\n                            Tolarance Min/Max:{\" \"}\n                            {rateConversionData?.tolaranceMin}\n                          &lt;/&gt;\n                        )}\n                        {rateConversionData?.tolaranceMax &amp;&amp; (\n                          &lt;&gt;\n                            {\"/\"}\n                            {rateConversionData?.tolaranceMax}\n                          &lt;/&gt;\n                        )} */}\n\n                        {tolaranceValue?.min &amp;&amp; (\n                          &lt;&gt;\n                            {\" \"}\n                            Tolarance Min/Max:{\" \"}\n                            {rateConversionData?.tolaranceMin}\n                          &lt;/&gt;\n                        )}\n                        {tolaranceValue?.max &amp;&amp; (\n                          &lt;&gt;\n                            {\"/\"}\n                            {/* (Tolarance Max:  */}\n                            {tolaranceValue?.max}\n                          &lt;/&gt;\n                        )}\n                    &lt;/span&gt;\n                &lt;/&gt;\n            }\n            rules={[\n                { required: true, message: \"Please Enter Rate\" },\n                {\n                    validator: validateMinMaxRate(\n                        // rateConversionData?.tolaranceMin,\n                        // rateConversionData?.tolaranceMax\n                        tolaranceValue?.min || 0,\n                        tolaranceValue?.max || 999\n                    ),\n                },\n            ]}\n            controls={false}\n        /&gt;\n            &lt;InputNumber /&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Col&gt;\n)\n</code></pre>"},{"location":"office/bank/form/tolaranceReset/#reference","title":"Reference","text":"<ul> <li>Perperxity</li> </ul>"},{"location":"office/bank/form/tolerance-rate-input/","title":"Form - Tolerance Min/Max Amount Rate","text":""},{"location":"office/bank/form/tolerance-rate-input/#tolerance-mixmax-rate-input","title":"Tolerance <code>Mix</code>/<code>Max</code> Rate input","text":"<pre><code>import { faker } from \"@faker-js/faker\";\n\n  tagTypes: [\"Rate\"],\n  endpoints: (builder) =&gt; ({\n    getCurrencyRateWithOperation: builder.query({\n      query: ({ buyCurrencyId, sellCurrencyId, dType }) =&gt; {\n        const queryParams = queryString.stringify({\n          buyCurrencyId,\n          sellCurrencyId,\n          dType,\n        });\n        return {\n          url: `CurrencyPairExchangeRate/GetRateByCurrencyPair?${queryParams}`,\n          method: HTTP_METHODS.GET,\n        };\n      },\n      transformResponse: (res) =&gt; {\n        const randomDecimal = faker.number.float({ min: 1, max: 200 });\n        const number = Number(randomDecimal.toFixed(2));\n        const transformedNum = { ...res, valued: number };\n        console.log(\"return value: \", transformedNum);\n        return transformedNum;\n      },\n    })\n  })\n</code></pre> <pre><code> transformResponse: (res) =&gt; {\n  const randomDecimal = faker.number.float({ min: 100, max: 200 });\n  const tolaranceMin = faker.number.float({ min: 0, max: 50 });\n  const numberMax = Number(randomDecimal.toFixed(2));\n  const numberMin = Number(tolaranceMin.toFixed(2));\n  const transformedNum = {\n    ...res,\n    tolaranceMax: numberMax,\n    tolaranceMin: numberMin,\n  };\n  console.log(\"return value: \", transformedNum);\n  return transformedNum;\n},\n</code></pre> <pre><code>{\n  console.log(\"INPUT NUMBER: \", rateConversionData);\n}\n&lt;InputNumber\n  min={rateConversionData?.tolaranceMax || 0}\n  style={{ width: \"100%\" }}\n  controls={false}\n  keyboard={false}\n  formatter={(value) =&gt; intCurrencyRateFormatter(value)}\n/&gt;;\n\n/**************************************************/\n// UPDATED WITH tolaranceMin, tolaranceMax\n&lt;InputNumber\n  min={rateConversionData?.tolaranceMin || 0}\n  max={rateConversionData?.tolaranceMax || 999}\n  style={{ width: \"100%\" }}\n  controls={false}\n  keyboard={false}\n  formatter={(value) =&gt; intCurrencyRateFormatter(value)}\n/&gt;;\n</code></pre>"},{"location":"office/bank/form/tolerance-rate-input/#reference","title":"Reference","text":"<ul> <li>FakerJS: Random Value between 1 to 200</li> </ul>"},{"location":"office/bank/form/verifiers-not-selected/","title":"Form - Verifier Not Selecting atfirst","text":""},{"location":"office/bank/form/verifiers-not-selected/#verifier-not-select","title":"Verifier Not Select","text":""},{"location":"office/bank/form/verifiers-not-selected/#forex","title":"Forex","text":"ForexForm.jsx<pre><code>useEffect(() =&gt; {\n  let verfiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  let verifiersList = findUsersByIds(\n    verfiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n\n  /*******************************************/\n  // CHANGES\n\n  // setSelectedVerifier(verifiersList);\n  // setSelectedVerifierIdOnly(verfiersIdOnly);\n\n  setSelectedVerifier([]);\n  setSelectedVerifierIdOnly([]);\n\n  if (!isEmpty(verfiersIdOnly)) {\n    form.setFieldsValue({\n      // [FOREX_DEAL.DEAL_APPROVERS]: verfiersIdOnly,\n      [FOREX_DEAL.DEAL_APPROVERS]: null,\n    });\n  } else {\n    form.setFieldsValue({\n      [FOREX_DEAL.DEAL_APPROVERS]: null,\n    });\n  }\n  /*******************************************/\n});\n</code></pre>"},{"location":"office/bank/form/verifiers-not-selected/#mft","title":"MFT","text":"MFTForm.jsx<pre><code>useEffect(() =&gt; {\n  let verfiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  let verifiersList = findUsersByIds(\n    verfiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n  // setSelectedVerifier(verifiersList);\n\n  // UPDATED FOR NOT SELECTING VERIFIER\n  setSelectedVerifier([]);\n\n  if (!isEmpty(verfiersIdOnly)) {\n    form.setFieldsValue({\n      // [MFTFormEnum.DEAL_APPROVERS]: verfiersIdOnly,\n      // UPDATED\n      [MFTFormEnum.DEAL_APPROVERS]: null,\n    });\n  } else {\n    form.setFieldsValue({\n      [MFTFormEnum.DEAL_APPROVERS]: null,\n    });\n  }\n\n  /* */\n});\n</code></pre>"},{"location":"office/bank/form/verifiers-not-selected/#ndf","title":"NDF","text":"NewForm.jsx<pre><code>useEffect(() =&gt; {\n  let verfiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  let verifiersList = findUsersByIds(\n    verfiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n  // setSelectedVerifier(verifiersList);\n  // setSelectedVerifierIdOnly(verfiersIdOnly);\n\n  // UPDATED\n  setSelectedVerifier([]);\n  setSelectedVerifierIdOnly([]);\n\n  if (!isEmpty(verfiersIdOnly)) {\n    form.setFieldsValue({\n      // [NDFEnum.DEAL_APPROVERS]: verfiersIdOnly,\n      [NDFEnum.DEAL_APPROVERS]: null,\n    });\n  } else {\n    form.setFieldsValue({\n      [NDFEnum.DEAL_APPROVERS]: null,\n    });\n  }\n  /**/\n});\n</code></pre>"},{"location":"office/bank/form/verifiers-not-selected/#mmd","title":"MMD","text":"updateFormWithApprovals.js<pre><code>export default function updateFormWithApprovals({\n  form,\n  approvalOptions,\n  verifierOptions,\n  setSelectedVerifier,\n  setSelectedApprovals,\n}) {\n  const verifiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n  const verifiersList = findUsersByIds(\n    verifiersIdOnly,\n    verifierOptions,\n    VERIFIER_TYPES.VERIFIERS\n  );\n  // setSelectedVerifier(verifiersList);\n\n  // UPDATED\n  setSelectedVerifier([]);\n\n  if (!isEmpty(verifiersIdOnly)) {\n    form.setFieldsValue({\n      // [DealFormEnum.DEAL_APPROVERS]: verifiersIdOnly,\n      // UPDATED\n      [DealFormEnum.DEAL_APPROVERS]: null,\n    });\n  } else {\n    form.setFieldsValue({\n      [DealFormEnum.DEAL_APPROVERS]: null,\n    });\n  }\n\n  /* */\n}\n</code></pre>"},{"location":"office/bank/form/verifiers-not-selected/#reference","title":"Reference","text":""},{"location":"office/bank/permission/2025-12-08-permission-settings/","title":"PERMISSION SETTINGS","text":""},{"location":"office/bank/permission/2025-12-08-permission-settings/#permission-settings","title":"Permission Settings","text":"Previous Code <p>NEW ADDED Features</p> <ul> <li>Collapases ALL by Default.</li> <li>A-Z asceding wise groupname</li> </ul>"},{"location":"office/bank/permission/2025-12-08-permission-settings/#fix-sort-data-before-mapping","title":"Fix: Sort data before mapping","text":"<p>Just add a <code>sort()</code> before the <code>map()</code>:</p> <pre><code>const treeData = data\n  .slice() // makes a shallow copy so original data isn't mutated\n  .sort((a, b) =&gt; a.groupName.localeCompare(b.groupName)) // sort A\u2013Z\n  .map((group) =&gt; ({\n    title: group.groupName,\n    key: group.groupName,\n    children: group.permissions\n      .sort((a, b) =&gt; a.value.localeCompare(b.value)) // also sort permissions A\u2013Z\n      .map((permission) =&gt; ({\n        title: permission.value,\n        key: permission.value,\n      })),\n  }));\n</code></pre> \ud83d\udd0d Why use <code>.slice()</code>? <p>Calling <code>sort()</code> directly on <code>data</code> mutates the original array. <code>.slice()</code> creates a shallow copy so your prop stays untouched \u2014 good practice, especially with props.</p>"},{"location":"office/bank/permission/2025-12-08-permission-settings/#collapse-all-button","title":"\"Collapse All\" button","text":"<pre><code>&lt;Button onClick={() =&gt; setExpandedKeys([])}&gt;Collapse All&lt;/Button&gt;\n</code></pre> <pre><code>&lt;Form.Item\n  name=\"permissions\"\n  label=\"Permissions\"\n  rules={[\n    {\n      required: true,\n      message: \"Please select at least one permission!\",\n    },\n  ]}\n&gt;\n  &lt;div style={{ marginBottom: 8 }}&gt;\n    &lt;Button onClick={() =&gt; setExpandedKeys([])} size=\"small\"&gt;\n      Collapse All\n    &lt;/Button&gt;\n  &lt;/div&gt;\n\n  &lt;Tree\n    checkable\n    checkedKeys={checkedKeys}\n    onCheck={onCheck}\n    expandedKeys={expandedKeys}\n    onExpand={onExpand}\n    treeData={treeData}\n  /&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>&lt;Button\n  onClick={() =&gt;\n    setExpandedKeys(data.map((group) =&gt; group.groupName))\n  }\n  size=\"small\"\n  style={{ marginRight: 8 }}\n&gt;\n  Expand All\n&lt;/Button&gt;\n&lt;Button onClick={() =&gt; setExpandedKeys([])} size=\"small\"&gt;\n  Collapse All\n&lt;/Button&gt;\n</code></pre>"},{"location":"office/bank/permission/bank-app-permission/","title":"Bank App Permission","text":""},{"location":"office/bank/permission/bank-app-permission/#bank-app-permission","title":"Bank App Permission","text":"Tip jsx<pre><code>{hasPermission(currentPermission, PERMISSIONS?.CAN_UPDATE_CURRENCY) &amp;&amp; ( ... )}\n</code></pre> Rates/index.jsx<pre><code>import { PERMISSIONS } from \"@shared/constants/PERMISSIONS\";\nimport { hasPermission } from \"@shared/utils/hasPermission\";\n\nconst currentPermission = useSelector((state) =&gt; state.auth.permissions);\n\n{\n  hasPermission(currentPermission, PERMISSIONS?.CAN_CREATE_RATES) &amp;&amp; (\n    &lt;Flex justify=\"space-between\"&gt;\n      &lt;DatePicker\n        defaultValue={dayjs()}\n        onChange={onDatePicker}\n        disabledDate={disabledDate}\n      /&gt;\n\n      &lt;Flex gap={30}&gt;\n        &lt;CustomButton\n          type=\"primary\"\n          title=\"Download Sample Excel\"\n          onClick={onDownloadClick}\n          icon={&lt;DownloadOutlined /&gt;}\n        /&gt;\n        &lt;CustomButton\n          type=\"primary\"\n          title=\"Upload Rates\"\n          onClick={() =&gt; {\n            form.resetFields();\n            onAdd();\n          }}\n          icon={&lt;PlusOutlined /&gt;}\n        /&gt;\n      &lt;/Flex&gt;\n    &lt;/Flex&gt;\n  );\n}\n</code></pre> utils/hasPermission.js<pre><code>function hasPermission(listOfCurrentPermission, targetPermission) {\n  if (\n    !Array.isArray(listOfCurrentPermission) &amp;&amp;\n    typeof targetPermission !== \"string\"\n  )\n    return false;\n\n  return listOfCurrentPermission?.includes(targetPermission);\n}\n\nexport { hasPermission };\n</code></pre> <pre><code>&lt;Space&gt;\n  {viewSelectedId === record.id &amp;&amp; currencyDataForViewLoading ? (\n    &lt;LoadingOutlined /&gt;\n  ) : (\n    &lt;EyeTwoTone onClick={() =&gt; onViewClick(record)} /&gt;\n  )}\n  {hasPermission(currentPermission, PERMISSIONS?.CAN_EDIT_CURRENCY) &amp;&amp;\n    (updateSelectedId === record.id &amp;&amp; currencyDataForUpdateLoading ? (\n      &lt;LoadingOutlined /&gt;\n    ) : (\n      &lt;EditTwoTone onClick={() =&gt; onUpdateClick(record)} /&gt;\n    ))}\n\n  {hasPermission(currentPermission, PERMISSIONS?.CAN_DELETE_CURRENCY) &amp;&amp; (\n    &lt;Popconfirm\n      title=\"Delete the currency\"\n      description=\"Are you sure to delete this currency?\"\n      onConfirm={() =&gt; {\n        handleDelete(record);\n      }}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    &gt;\n      &lt;DeleteTwoTone /&gt;\n    &lt;/Popconfirm&gt;\n  )}\n&lt;/Space&gt;\n</code></pre>"},{"location":"office/bank/permission/bank-app-permission/#api","title":"API","text":""},{"location":"office/bank/permission/bank-app-permission/#issue","title":"Issue","text":"<pre><code>endpoints: (builder) =&gt; ({\n  getPollingPermissions: builder.query({\n    query: ({ id }) =&gt; ({\n      // url: `Roles/${id}/permissions`,\n      url: `Roles/GetUserPermission`,\n      method: HTTP_METHODS.GET,\n    }),\n    transformResponse: (response) =&gt; {\n      const transformed = response\n        ?.map((group) =&gt;\n          group?.permissions?.map((permission) =&gt; {\n            if (permission?.selected) {\n              return permission?.value;\n            }\n          })\n        )\n        .flat()\n        .filter(Boolean);\n      return transformed;\n    },\n  }),\n});\n</code></pre> Bug <p>TypeError: <code>response.map</code> is not a function transformResponse <code>settingApi.js:1794</code></p> <p>The error <code>TypeError: response.map is not a function</code> means that the <code>response</code> you are trying to call <code>.map()</code> on is not an array. The <code>.map()</code> method is only available on arrays, so if response is an <code>object</code>, <code>null</code>, <code>undefined</code>, or any other type, this error will occur.</p>"},{"location":"office/bank/permission/bank-app-permission/#solution-how-to-fix-this-error","title":"Solution: How to Fix This Error","text":"<p>1. Verify the Response Shape</p> <p>Check what the actual response looks like from the API endpoint <code>Roles/GetUserPermission</code>. You can do this by:</p> <ul> <li> <p>Logging the response before <code>.map()</code>:</p> <pre><code>transformResponse: (response) =&gt; {\nconsole.log(\"API response:\", response);\n// rest of your code\n};\n</code></pre> </li> <li> <p>Or inspecting the network tab in your browser dev tools to see the JSON structure.</p> </li> </ul> <p>2. Adjust the Code Based on Response Structure</p> <p>If the response is an object (not an array), you cannot call <code>.map()</code> directly on it.</p> <p>For example, if the response looks like:</p> js<pre><code>{\n  \"groups\": [\n    {\n      \"permissions\": [\n        { \"selected\": true, \"value\": \"read\" },\n        { \"selected\": false, \"value\": \"write\" }\n      ]\n    },\n    {\n      \"permissions\": [\n        { \"selected\": true, \"value\": \"delete\" }\n      ]\n    }\n  ]\n}\n</code></pre> <p>Then you should do:</p> js<pre><code>transformResponse: (response) =&gt; {\n  const groups = response.groups || [];\n  const transformed = groups\n    .map((group) =&gt;\n      group.permissions\n        .filter((permission) =&gt; permission.selected)\n        .map((permission) =&gt; permission.value)\n    )\n    .flat();\n  return transformed;\n};\n</code></pre> <p>3. Defensive Programming: Check if Response is Array</p> <p>If sometimes the response is an array and sometimes not, add a guard</p> <pre><code>transformResponse: (response) =&gt; {\n  if (!Array.isArray(response)) {\n    // handle the case where response is not an array\n    return [];\n  }\n  const transformed = response\n    .map((group) =&gt;\n      group.permissions\n        .filter((permission) =&gt; permission.selected)\n        .map((permission) =&gt; permission.value)\n    )\n    .flat();\n  return transformed;\n};\n</code></pre> <ul> <li>Reference </li> <li>Reference 1</li> </ul>"},{"location":"office/bank/permission/intro/","title":"Intro","text":""},{"location":"office/bank/permission/intro/#intro","title":"Intro","text":"useUpdatePermissions.js<pre><code>import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { updatePermission } from \"@features/auth/services/authSlice\";\nimport { useGetPollingPermissionsQuery } from \"@features/settings/services/settingApi\";\nimport { extractSelectedPermissions } from \"@shared/utils/permissionListing\";\n\nconst useUpdatePermissions = () =&gt; {\n  const dispatch = useDispatch();\n  const currentPermissions = useSelector((state) =&gt; state.auth.permissions);\n  const appUserId = useSelector((state) =&gt; state.auth.appUserId);\n  const {\n    data: newPermissions,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useGetPollingPermissionsQuery(\n    { id: appUserId },\n    {\n      pollingInterval: 30000,\n    }\n  );\n\n  useEffect(() =&gt; {\n    if (\n      newPermissions &amp;&amp;\n      JSON.stringify(newPermissions) !== JSON.stringify(currentPermissions)\n    ) {\n      dispatch(\n        updatePermission({\n          permissions: newPermissions,\n        })\n      );\n    }\n  }, [newPermissions, currentPermissions, dispatch]);\n\n  return {\n    isLoading,\n    isError,\n    error,\n    refetch,\n  };\n};\n\nexport default useUpdatePermissions;\n</code></pre> authSlice.js<pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n// import logger from \"@shared/utils/logger\";\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    token: null,\n    refresh: null,\n    role: null,\n    permissions: null,\n    appUserId: null,\n    scope: null,\n    isAuthenticated: false,\n  },\n  reducers: {\n    setAuth: (state, action) =&gt; {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.refresh = action.payload.refresh;\n      state.role = action.payload.role;\n      state.permissions = action.payload.permissions;\n      state.appUserId = action.payload.appUserId;\n      state.scope = action.payload.scope;\n      state.isAuthenticated = true;\n    },\n    logout: (state) =&gt; {\n      state.user = null;\n      state.token = null;\n      state.refresh = null;\n      state.role = null;\n      state.permissions = null;\n      state.appUserId = null;\n      state.scope = null;\n      state.isAuthenticated = false;\n    },\n    updateRefreshToken: (state, action) =&gt; {\n      const { access_token, refresh_token } = action.payload;\n      state.refresh = refresh_token;\n      state.token = access_token;\n    },\n    updatePermission: (state, action) =&gt; {\n      // const { permissions } = action.payload;\n      // state.permissions = permissions;\n    },\n  },\n});\n\nexport const { setAuth, logout, updateRefreshToken, updatePermission } =\n  authSlice.actions;\nexport default authSlice.reducer;\n</code></pre> MainLayout<pre><code>import { useState, useCallback } from \"react\";\nimport { Layout } from \"antd\";\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from \"@ant-design/icons\";\n// added\nimport useUpdatePermissions from \"@shared/hooks/useUpdatePermissions\";\nimport { Header, Sidebar } from \"../DashbordLayout\";\n\nconst { Content } = Layout;\n\nconst MainLayout = ({ children }) =&gt; {\n  // added\n  // const { isLoading, isError, error } = useUpdatePermissions();\n  const [collapsed, setCollapsed] = useState(false);\n};\n</code></pre> <p><code>features/settings/services/settings.api</code></p> <pre><code>export const pollingPermissionsApi = createApi({\n  reducerPath: \"permissionsApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"PermissionAPI\"],\n  endpoints: (builder) =&gt; ({\n    getPollingPermissions: builder.query({\n      query: ({ id }) =&gt; ({\n        url: `Roles/${id}/permissions`,\n        method: HTTP_METHODS.GET,\n      }),\n      transformResponse: (response) =&gt; {\n        const transformed = response\n          .map((group) =&gt;\n            group.permissions.map((permission) =&gt; permission.value)\n          )\n          .flat();\n        return transformed;\n      },\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Permissions List.\",\n            1\n          );\n        }\n      },\n      providesTags: [\"PermissionAPI\"],\n    }),\n  }),\n});\n\nexport const { useGetPollingPermissionsQuery } = pollingPermissionsApi;\n</code></pre> <pre><code>const debounceQueryBuying = useDebounce(buyingAmountWatch, 3000);\n\nuseEffect(() =&gt; {\n  if (\n    isSkipVerifierApprover ||\n    !debouncedQuery ||\n    !sellingAmountWatch ||\n    !buyingAmountWatch\n  ) {\n    return;\n  }\n  const isBuyTransaction = transationTypeWatch === TRANSACTION_TYPE.BUY;\n  const sellingAmount = isBuyTransaction ? debouncedQuery : debounceQueryBuying;\n  const sellingCurrencyId = isBuyTransaction\n    ? sellingCurrencyWatch\n    : buyingCurrencyWatch;\n\n  // if (transationTypeWatch === TRANSACTION_TYPE.BUY) {\n  //   triggerGetApprovalPerson({\n  //     debouncedQuery,\n  //     sellingCurrencyWatch,\n  //   });\n  // } else if (transationTypeWatch === TRANSACTION_TYPE.SELL) {\n  //   triggerGetApprovalPerson({\n  //     debounceQueryBuying,\n  //     buyingCurrencyWatch,\n  //   });\n  // }\n\n  console.log(\"XXX BUY: \", debouncedQuery, sellingCurrencyWatch);\n  console.log(\"XXX SELL: \", debounceQueryBuying, buyingCurrencyWatch);\n}, [\n  debouncedQuery,\n  triggerGetApprovalPerson,\n  sellingAmountWatch,\n  buyingAmountWatch,\n  sellingCurrencyWatch,\n  buyingCurrencyWatch,\n  isSkipVerifierApprover,\n  transationTypeWatch,\n  debounceQueryBuying,\n]);\n</code></pre>"},{"location":"office/bank/permission/isBankUser/","title":"isBankUser","text":""},{"location":"office/bank/permission/isBankUser/#isbankuser","title":"isBankUser","text":"src/shared/utils/isBankUser.js<pre><code>import { isEmpty, isObject } from \"lodash\";\n\nexport function isBranchUser(branch) {\n  return !isEmpty(branch) &amp;&amp; isObject(branch);\n}\n</code></pre> ExchangeRateContainer.jsx<pre><code>import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { DatePicker, Empty, Spin, Typography, theme, Flex } from \"antd\";\nimport dayjs from \"dayjs\";\n\n// features\nimport { useGetForexMidValueReportQuery } from \"@features/forex/services/forexApi\";\nimport ExchangeRateChart from \"@features/dashboard/components/Chart/ExchangeRateChart\";\nimport NotificationComponent from \"@features/notifications/components/NotificationComponent\";\nimport { isBranchUser } from \"@shared/hooks/isBranchUser\";\n\nconst { Title } = Typography;\nconst { useToken } = theme;\n\nconst ExchangeRateContainer = () =&gt; {\n  const { token } = useToken();\n\n  // IMP for isBranchUser\n  const { branch } = useSelector((state) =&gt; state.auth);\n\n  const [valueDate, setValueDate] = useState(null);\n\n  useEffect(() =&gt; {\n    const yesterday = dayjs().subtract(1, \"day\").format(\"YYYY-MM-DD\");\n    setValueDate(yesterday);\n  }, []);\n  const onDatePicker = (date, dateString) =&gt; {\n    setValueDate(dateString);\n  };\n\n  const disabledDate = (current) =&gt; {\n    return current &amp;&amp; current.isAfter(dayjs(), \"day\");\n  };\n\n  const { data, isLoading, error, isFetching } = useGetForexMidValueReportQuery(\n    {\n      valueDate,\n    },\n    {\n      skip: !valueDate,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  return (\n    &lt;div className=\"barchart_container\"&gt;\n      {!isBranchUser(branch) ? (\n        &lt;&gt;\n          &lt;Flex justify=\"space-between\" align=\"center\"&gt;\n            &lt;DatePicker\n              defaultValue={dayjs().subtract(1, \"day\")}\n              onChange={onDatePicker}\n              disabledDate={disabledDate}\n            /&gt;\n            &lt;Title\n              level={5}\n              align=\"center\"\n              style={{ color: token?.colorPrimary, margin: \"0\" }}\n            &gt;\n              Forex Report\n            &lt;/Title&gt;\n          &lt;/Flex&gt;\n\n          {!error &amp;&amp; data ? (\n            isLoading ? (\n              &lt;Spin size=\"large\" /&gt;\n            ) : (\n              &lt;ExchangeRateChart data={data} /&gt;\n            )\n          ) : (\n            &lt;Empty description={false} /&gt;\n          )}\n        &lt;/&gt;\n      ) : null}\n    &lt;/div&gt;\n  );\n};\n\nexport default ExchangeRateContainer;\n</code></pre>"},{"location":"office/bank/permission/showing-permissions-listing/","title":"Show Permission Listing","text":""},{"location":"office/bank/permission/showing-permissions-listing/#showing-permission-in-profile","title":"Showing Permission in Profile","text":"<p>Absolutely \u2014 adding defensive programming ensures your utility functions don't break even if the input is malformed, missing, or unexpected. Here's an enhanced and robust version of your <code>permissionUtils.js</code>:</p> permissionUtils.js<pre><code>// utils/permissionUtils.js\n\n/**\n * Safely formats a raw permission string into a readable object.\n * Example: \"Permissions.Application.CanViewDashboard\"\n * \u2192 { key: \"Permissions.Application.CanViewDashboard\", category: \"Application\", action: \"Can View Dashboard\" }\n *\n * @param {string} perm - Raw permission string\n * @returns {{ key: string, category: string, action: string }} or null\n */\nexport const formatPermission = (perm) =&gt; {\n  if (typeof perm !== \"string\" || !perm.includes(\".\")) {\n    console.warn(\"Invalid permission format:\", perm);\n    return null;\n  }\n\n  const parts = perm.split(\".\");\n\n  if (parts.length &lt; 3) {\n    console.warn(\"Incomplete permission key:\", perm);\n    return null;\n  }\n\n  const category = parts[1];\n  const actionRaw = parts[2];\n\n  const readableAction = actionRaw\n    .replace(/([A-Z])/g, \" $1\")\n    .replace(/^./, (str) =&gt; str.toUpperCase())\n    .trim();\n\n  return {\n    key: perm,\n    category,\n    action: readableAction,\n  };\n};\n\n/**\n * Groups formatted permissions by their category.\n *\n * @param {Array&lt;{key: string, category: string, action: string}&gt;} permissions\n * @returns {Object.&lt;string, Array&lt;{key: string, action: string}&gt;&gt;}\n */\nexport const groupPermissionsByCategory = (permissions) =&gt; {\n  const grouped = {};\n\n  if (!Array.isArray(permissions)) {\n    console.warn(\"Expected an array of permissions, got:\", typeof permissions);\n    return grouped;\n  }\n\n  permissions.forEach((permObj) =&gt; {\n    if (!permObj || typeof permObj !== \"object\") return;\n\n    const { category, action, key } = permObj;\n\n    if (!category || !action || !key) return;\n\n    if (!grouped[category]) {\n      grouped[category] = [];\n    }\n\n    grouped[category].push({ key, action });\n  });\n\n  return grouped;\n};\n</code></pre>"},{"location":"office/bank/permission/showing-permissions-listing/#code","title":"Code","text":""},{"location":"office/bank/permission/showing-permissions-listing/#removed-warning","title":"Removed Warning","text":"<p>You're seeing this warning because Ant Design v5+ (or its dependency <code>rc-collapse</code>) is deprecating the old <code>children</code>-based <code>Collapse.Panel</code> usage in favor of a new <code>items</code>-based API.</p> Why This Happens <p>You're currently using:</p> <pre><code>&lt;Collapse&gt;\n    &lt;Panel header=\"Application\"&gt;...&lt;/Panel&gt;\n&lt;/Collapse&gt;\n</code></pre> <p>But the new recommended way is to use the <code>items</code> prop like:</p> <pre><code>&lt;Collapse items={[{ key: '1', label: 'Application', children: (...) }]} /&gt;\n</code></pre>"},{"location":"office/bank/permission/showing-permissions-listing/#warning","title":"Warning","text":"<pre><code>&lt;Collapse accordion&gt;\n  {Object.entries(groupedPermissions).map(([category, perms]) =&gt; (\n    &lt;Panel header={category} key={category}&gt;\n      &lt;ul&gt;\n        {perms.map(({ key, action }) =&gt; (\n          &lt;li key={key}&gt;{action}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/Panel&gt;\n  ))}\n&lt;/Collapse&gt;\n</code></pre>"},{"location":"office/bank/permission/showing-permissions-listing/#no-warning","title":"No Warning","text":"<pre><code>&lt;Collapse\n  accordion\n  items={Object.entries(groupedPermissions).map(([category, perms]) =&gt; ({\n    key: category,\n    label: category,\n    children: (\n      &lt;ul style={{ marginLeft: \"16px\", paddingLeft: 0 }}&gt;\n        {perms.map(({ key, action }) =&gt; (\n          &lt;li key={key}&gt;\n            &lt;Text&gt;{action}&lt;/Text&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    ),\n  }))}\n&gt;&lt;/Collapse&gt;\n</code></pre>"},{"location":"office/bank/permission/showing-permissions-listing/#full-code","title":"Full Code","text":"UserProfile/index.jsx<pre><code>import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Divider, Flex, Typography, Row, Col, theme, Collapse } from \"antd\";\n\nimport { useGetUserProfileInformationQuery } from \"@features/profile/services/profileApi\";\nimport ProfilePicture from \"@features/profile/components/UserProfile/ProfilePicture\";\nimport {\n  formatPermission,\n  groupPermissionsByCategory,\n} from \"@features/profile/utils/permissionUtils.js\";\n\nconst { Title, Text } = Typography;\nconst { useToken } = theme;\n\nconst { Panel } = Collapse;\n\nconst UserProfile = () =&gt; {\n  const { token } = useToken();\n  const { appUserId, permissions } = useSelector((state) =&gt; state.auth);\n  const test = useSelector((state) =&gt; state.auth);\n\n  console.log(\"TEST: \", appUserId, JSON.stringify(permissions));\n\n  const { base64Data: imageUrl } = useSelector((state) =&gt; state.profile);\n\n  const {\n    data: userProfileData,\n    isLoading,\n    error: isProfileDataError,\n    isFetching,\n  } = useGetUserProfileInformationQuery(\n    {\n      id: appUserId,\n    },\n    {\n      skip: !appUserId,\n    }\n  );\n\n  const formattedPermissions = permissions?.map(formatPermission) || [];\n  const groupedPermissions = groupPermissionsByCategory(formattedPermissions);\n\n  return (\n    &lt;div style={{ padding: \"24px\", backgroundColor: token?.lightBGColor }}&gt;\n      &lt;Flex\n        align=\"center\"\n        justify=\"space-between\"\n        style={{ marginBottom: \"16px\" }}\n      &gt;\n        &lt;Title level={3} style={{ margin: 0 }}&gt;\n          Update Profile\n        &lt;/Title&gt;\n      &lt;/Flex&gt;\n\n      &lt;Row\n        style={{\n          background: \"#fff\",\n          borderRadius: \"8px\",\n          padding: \"24px\",\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.05)\",\n        }}\n      &gt;\n        &lt;Col xs={24} sm={12} md={12} lg={6} xl={4}&gt;\n          {appUserId &amp;&amp; (\n            &lt;ProfilePicture appUserId={appUserId} imageUrl={imageUrl} /&gt;\n          )}\n        &lt;/Col&gt;\n        &lt;Col xs={24} sm={12} md={12} lg={18} xl={20}&gt;\n          &lt;Title level={4} style={{ marginBottom: 4 }}&gt;\n            {userProfileData?.fullName}\n          &lt;/Title&gt;\n          &lt;Text strong&gt;{userProfileData?.positionName}&lt;/Text&gt;\n        &lt;/Col&gt;\n      &lt;/Row&gt;\n\n      &lt;Divider /&gt;\n\n      &lt;div\n        style={{\n          background: \"#fff\",\n          padding: \"24px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.05)\",\n          marginTop: \"24px\",\n        }}\n      &gt;\n        &lt;Row gutter={[24, 16]}&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Full Name:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.fullName}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Email:&lt;/Text&gt; &lt;Text&gt;{userProfileData?.email}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Department:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.department}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Phone Number:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.phoneNumber}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Approval Limit:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.approvalLimit?.toLocaleString()}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Outstanding Limit:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.outstandingLimit?.toLocaleString()}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Position:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.positionName}&lt;/Text&gt;\n          &lt;/Col&gt;\n          &lt;Col xs={24} md={12}&gt;\n            &lt;Text strong&gt;Reporting Manager:&lt;/Text&gt;{\" \"}\n            &lt;Text&gt;{userProfileData?.reportingManagerName}&lt;/Text&gt;\n          &lt;/Col&gt;\n        &lt;/Row&gt;\n      &lt;/div&gt;\n\n      &lt;Divider /&gt;\n\n      &lt;div\n        style={{\n          background: \"#fff\",\n          padding: \"24px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.05)\",\n          marginTop: \"24px\",\n        }}\n      &gt;\n        &lt;Title level={4}&gt;User Permissions&lt;/Title&gt;\n        &lt;Collapse\n          accordion\n          items={Object.entries(groupedPermissions).map(\n            ([category, perms]) =&gt; ({\n              key: category,\n              label: category,\n              children: (\n                &lt;ul style={{ marginLeft: \"16px\", paddingLeft: 0 }}&gt;\n                  {perms?.map(({ key, action }) =&gt; (\n                    &lt;li key={key}&gt;\n                      &lt;Text&gt;{action}&lt;/Text&gt;\n                    &lt;/li&gt;\n                  ))}\n                &lt;/ul&gt;\n              ),\n            })\n          )}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default UserProfile;\n</code></pre>"},{"location":"office/bank/permission/streaming-updates/","title":"RTK Streaming Update","text":""},{"location":"office/bank/permission/streaming-updates/#streaming-updates","title":"Streaming Updates","text":"<pre><code> docker ps\npermission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.48/containers/json\": dial unix /var/run/docker.sock: connect: permission denied\n(dating-django-api) ninja@ninja:~/Documents/DEVELOPMENT/dating-django-api$ sudo usermod -aG docker $USER\n</code></pre> <p>!!! bug \"docker ps permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.48/containers/json\": dial unix /var/run/docker.sock: connect: permission denied how to give docker permission so i donot use the sudo docker ps\"</p> <p>Solution</p> <p>The error you're seeing indicates that your user does not have the necessary permissions to access Docker without using <code>sudo</code>. The Docker daemon socket (<code>/var/run/docker.sock</code>) is owned by the <code>root</code> user by default, and only users in the <code>docker</code> group have permission to access it without <code>sudo</code>.</p> <p>To resolve this issue, you need to add your user to the docker group. Here's how you can do it:</p> <ol> <li> <p>Add your user to the docker group:</p> <p>Run the following command, replacing <code>&lt;your_username&gt;</code> with your actual username (or use <code>$USER</code> for the current user):</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>The <code>-aG</code> option appends your user to the <code>docker</code> group.</p> </li> <li> <p>Log out and log back in:</p> <p>After adding the user to the <code>docker</code> group, you need to log out and log back in, or you can simply restart your system to apply the changes.</p> </li> <li> <p>Verify the permissions:</p> <p>After logging back in, you can verify that the permissions are set correctly by running:</p> <pre><code>docker ps\n</code></pre> <p>This should work without needing to use <code>sudo</code> anymore.</p> </li> </ol> <p>If you want to avoid logging out and logging back in, you can also run:</p> <pre><code>newgrp docker\n</code></pre> <p>This will activate the new group membership for your current session without needing a full logout.</p>"},{"location":"office/bank/permission/streaming-updates/#updates","title":"UPDATES","text":"<p>Which Database is Best for a Django Dating App?</p> <p>For a Django dating application API, PostgreSQL is by far the most recommended database. It offers:</p> <ul> <li>ACID compliance (data consistency).</li> <li>Full-text search and geospatial data support (important for features like location-based matching).</li> <li>Scalability to handle the growth of your user base.</li> <li>Excellent integration with Django, making it easy to manage with migrations.</li> </ul> <p>Steps to Set Up PostgreSQL with Django:</p> <ol> <li> <p>Install PostgreSQL:</p> <p>In your <code>requirements.txt</code> or <code>Pipfile</code>, include <code>psycopg2</code> (the PostgreSQL adapter for Python):</p> <pre><code>pipenv install psycopg2\n</code></pre> </li> <li> <p>Update <code>settings.py</code> to use PostgreSQL as the database backend:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'your_db_name',\n        'USER': 'your_db_user',\n        'PASSWORD': 'your_db_password',\n        'HOST': 'localhost',  # or your PostgreSQL container's IP\n        'PORT': '5432',  # Default PostgreSQL port\n    }\n}\n</code></pre> </li> <li> <p>Run migrations: Once PostgreSQL is set up, don't forget to run:</p> <pre><code>python manage.py migrate\n</code></pre> </li> </ol> conclusion <ul> <li>PostgreSQL is the best choice for a Django dating application API, thanks to its scalability, support for relational data, and advanced features like full-text search and geospatial support.</li> <li>MySQL is also a good option but has fewer advanced features than PostgreSQL.</li> <li>SQLite is fine for local development but not recommended for production.</li> <li>MongoDB or Cassandra could be considered if your application requires handling unstructured data at a very large scale, but they aren't the best fit for a relational app like a dating app.</li> </ul>"},{"location":"office/bank/permission/streaming-updates/#reference","title":"Reference","text":"<ul> <li>Official: Streaming updates</li> </ul>"},{"location":"office/bank/security/oauth-pkce/overview/","title":"Overview","text":""},{"location":"office/bank/security/oauth-pkce/overview/#overview","title":"Overview","text":"<p>PKCE (Proof Key for Code Exchange) flow \u2014 that's the best and most secure way to do OAuth in React or any other Single Page Application (SPA). Let's break it down so you can understand how to use it \ud83d\ude80</p>"},{"location":"office/bank/security/oauth-pkce/overview/#what-is-pkce","title":"What Is PKCE?","text":"<p>PKCE (pronounced \"pixy\") is an extension to the OAuth 2.0 Authorization Code Flow, designed specifically for public clients like React apps \u2014 where you can\u2019t securely store a <code>client_secret</code>.</p> <p>It replaces the need for a <code>client_secret</code> by using a temporary, one-time-use secret (called a code verifier + challenge) that only your React app knows.</p>"},{"location":"office/bank/security/oauth-pkce/overview/#how-pkce-works-simplified-flow","title":"\ud83d\udd10 How PKCE Works (Simplified Flow)","text":"<ol> <li>React app generates a code verifier + challenge</li> <li>User is redirected to login (Auth server\u2019s /authorize endpoint)</li> <li>User logs in and is redirected back to your app with an auth code</li> <li>React app exchanges the code + code verifier for an access token</li> <li>React stores token (e.g. in <code>memory</code>) and uses it to call APIs</li> </ol>"},{"location":"office/bank/security/oauth-pkce/overview/#tools-that-help-in-react","title":"\ud83d\udce6 Tools That Help in React","text":"<p>Most of this is handled by libraries. Use one of:</p> <ul> <li>Auth0 SPA SDK</li> <li>oidc-client-ts \u2013 works well with IdentityServer, Azure AD</li> <li>@azure/msal-browser \u2013 for Microsoft Identity</li> </ul>"},{"location":"office/bank/security/oauth-pkce/overview/#example-using-oidc-client-ts","title":"\ud83d\udd27 Example Using oidc-client-ts","text":"<ol> <li> <p>Install the library</p> <pre><code>npm install oidc-client-ts\n</code></pre> </li> <li> <p>Setup PKCE flow</p> <pre><code>import { UserManager } from \"oidc-client-ts\";\n\nconst userManager = new UserManager({\n  authority: \"https://your-auth-server.com\", // URL of your identity server\n  client_id: \"your-client-id\",\n  redirect_uri: \"http://localhost:3000/callback\",\n  response_type: \"code\",\n  scope: \"openid profile api.read\",\n  post_logout_redirect_uri: \"http://localhost:3000/\",\n  // PKCE is enabled by default\n});\n</code></pre> </li> <li> <p>Start Login</p> <pre><code>userManager.signinRedirect();\n</code></pre> </li> <li> <p>Handle Callback</p> <pre><code>userManager.signinRedirectCallback().then((user) =&gt; {\n  console.log(\"Access token:\", user.access_token);\n});\n</code></pre> </li> </ol>"},{"location":"office/bank/security/oauth-pkce/overview/#benefits-of-pkce","title":"\u2705 Benefits of PKCE","text":"Benefit Description \ud83d\udd12 No client secret required Safe for browser apps \ud83d\udee1 Prevents code injection Uses code challenge to verify app \ud83d\udce6 Works with all major providers Auth0, Azure AD, IdentityServer"},{"location":"office/bank/security/oauth-pkce/overview/#tldr-what-you-should-do-now","title":"\ud83e\udde0 TL;DR \u2014 What You Should Do Now","text":"<ol> <li>Remove any <code>client_secret</code> usage in React</li> <li>Use a library like <code>oidc-client-ts</code> or Auth0 SDK</li> <li>Use Authorization Code Flow with PKCE</li> <li>Never store tokens in localStorage if possible (use memory or HTTP-only cookies)</li> </ol> <p>If you tell me:</p> <ul> <li>Which OAuth provider you're using (Auth0, IdentityServer, Azure AD, etc.)</li> <li>Your app\u2019s domain (localhost or deployed?)</li> <li>Whether you have a backend</li> </ul> <p>I can give you copy-paste working code tailored to your setup. Want that?</p>"},{"location":"office/bank/security/oauth-pkce/overview/#reference","title":"Reference","text":"<ul> <li>oidc-client-ts, npmjs</li> <li>oidc-client-ts</li> </ul>"},{"location":"office/bank/security/storage/overview/","title":"Overview","text":""},{"location":"office/bank/settings/2025-09-08-import-user/","title":"Import User","text":""},{"location":"office/bank/settings/2025-09-08-import-user/#import-user","title":"Import User","text":""},{"location":"office/bank/settings/2025-09-08-import-user/#api","title":"API","text":"settingApi.js<pre><code>query: ({ data }) =&gt; ({\n    url: `Users/UploadUserDetailsFromExcel`,\n    method: \"POST\",\n    data,\n    headers: {\n        \"Content-Type\": \"multipart/form-data\",\n    },\n    responseType: \"arraybuffer\",\n}),\n</code></pre>"},{"location":"office/bank/settings/2025-09-08-import-user/#component","title":"COMPONENT","text":"Previous Code<pre><code>const handleImportSubmit = async (values) =&gt; {\n  logger.info({ msg: \"SUBMIT: \", values });\n  setIsLoadingButton(true);\n\n  try {\n    if (values.dragger &amp;&amp; values.dragger.length &gt; 0) {\n      const file = values.dragger[0].originFileObj; // Get file object\n      const fileFormData = new FormData();\n      fileFormData.append(\"file\", file); // Append file to FormData\n\n      // await uploadUserDetailsFromExcel({\n      //   data: fileFormData,\n      // }).unwrap();\n\n      const response = await uploadUserDetailsFromExcel({\n        data: fileFormData,\n      }).unwrap();\n\n      if (!response.ok) {\n        const blog = new Blob([response], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n\n        confirmAndDownload(blog, \"UserDetails.xlsx\");\n      }\n\n      importform.resetFields();\n      importonClose();\n    }\n  } catch (error) {\n    logger.error({ msg: \"Add Error: \", error });\n  } finally {\n    setIsLoadingButton(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/settings/2025-09-08-import-user/#theory","title":"THEORY","text":"<p>Since you're receiving all responses as <code>ArrayBuffer</code> due to <code>responseType: 'arraybuffer'</code>, you cannot use <code>response.ok</code> (it doesn\u2019t exist on raw <code>ArrayBuffer</code>).</p> <p>You need to decode the <code>ArrayBuffer</code> response and check:</p> <ul> <li>If it's JSON with <code>\"message\"</code>, <code>\"successCount\"</code>, and <code>\"failedCount\"</code> \u2192 \u2705 Success \u2192 don't download</li> <li>If it's not JSON or doesn\u2019t have those keys \u2192 \u274c Likely Excel binary \u2192 download it</li> </ul>"},{"location":"office/bank/settings/2025-09-08-import-user/#heres-your-updated-and-working-handleimportsubmit","title":"\u2705 Here\u2019s your updated and working handleImportSubmit:","text":"<pre><code>const handleImportSubmit = async (values) =&gt; {\n  logger.info({ msg: \"SUBMIT: \", values });\n  setIsLoadingButton(true);\n\n  try {\n    if (values.dragger &amp;&amp; values.dragger.length &gt; 0) {\n      const file = values.dragger[0].originFileObj;\n      const fileFormData = new FormData();\n      fileFormData.append(\"file\", file);\n\n      // Send the request - response will be ArrayBuffer\n      const response = await uploadUserDetailsFromExcel({\n        data: fileFormData,\n      }).unwrap();\n\n      console.log(\"Raw Response:\", response);\n\n      let isJson = false;\n\n      try {\n        // Decode ArrayBuffer to string\n        const decoder = new TextDecoder(\"utf-8\");\n        const jsonText = decoder.decode(response);\n        const parsed = JSON.parse(jsonText);\n\n        const hasExpectedKeys =\n          parsed &amp;&amp;\n          typeof parsed === \"object\" &amp;&amp;\n          \"message\" in parsed &amp;&amp;\n          \"successCount\" in parsed &amp;&amp;\n          \"failedCount\" in parsed;\n\n        if (hasExpectedKeys) {\n          isJson = true;\n          console.log(\"\u2705 Upload success:\", parsed);\n        }\n      } catch (err) {\n        // Not JSON \u2014 Excel file or malformed\n        isJson = false;\n      }\n\n      if (!isJson) {\n        const blob = new Blob([response], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        });\n\n        confirmAndDownload(blob, \"UserDetails.xlsx\");\n      }\n\n      importform.resetFields();\n      importonClose();\n    }\n  } catch (error) {\n    logger.error({ msg: \"Add Error: \", error });\n  } finally {\n    setIsLoadingButton(false);\n  }\n};\n</code></pre>"},{"location":"office/bank/settings/2025-09-08-import-user/#key-fixes-improvements","title":"\u2705 Key Fixes &amp; Improvements:","text":"Fix Why \ud83d\udd04 Replaced <code>if (!response.ok)</code> <code>ok</code> doesn\u2019t exist on <code>ArrayBuffer</code> \ud83d\udce6 Used <code>TextDecoder</code> + <code>JSON.parse</code> To safely detect if response is JSON \ud83d\udce5 <code>Blob([response])</code> only when not JSON Prevents accidental download of text \ud83e\uddfc Clean structure Handles form reset &amp; modal close on success"},{"location":"office/bank/settings/2025-09-08-import-user/#optional-improvement-logging","title":"\u2705 Optional Improvement (Logging)","text":"<p>You can add logging to help debug what\u2019s going on:</p> <pre><code>console.log(\"\ud83e\uddfe Decoded JSON:\", jsonText);\nconsole.log(\"\ud83d\udce6 Treated as Excel file:\", !isJson);\n</code></pre>"},{"location":"office/bank/settings/2025-09-08-import-user/#reference","title":"Reference","text":"<ul> <li>ArrayBuffer</li> </ul>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/","title":"Setting Key Def-Programming","text":""},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#setting-keys-defensive-programming","title":"Setting Keys Defensive Programming","text":"<pre><code>export const BOOLEAN_STRINGS = {\n    TRUE: \"true\", FALSE: \"false\",\n};\n\nexport const BOOLEAN_VALUE = {\n    TRUE: true, FALSE: false,\n};\n\nconst { value } = useSelector((state) =&gt; state?.setting);\nconst isCBSReferenceNeeded = value[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED] || BOOLEAN_STRINGS.TRUE;\n</code></pre> <p>is this safe and defensive if the values doesnt comes</p> <p>The expression you're using:</p> <pre><code>const isCBSReferenceNeeded =\n  value[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED] || BOOLEAN_STRINGS.TRUE;\n</code></pre> <p>is not fully safe or defensive \u2014 especially if <code>value</code> or the key doesn't exist or has unexpected data types.</p>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#lets-break-it-down","title":"\ud83e\udde0 Let's break it down:","text":"<ol> <li> <p><code>value</code> is extracted from Redux:</p> <pre><code>const { value } = useSelector((state) =&gt; state?.setting);\n</code></pre> </li> <li> <p>Then you try to access:</p> <pre><code>value[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED];\n</code></pre> <p>and fall back to:</p> <pre><code>BOOLEAN_STRINGS.TRUE;\n</code></pre> </li> </ol>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#potential-issues","title":"\ud83d\uded1 Potential Issues:","text":"<ol> <li> <p><code>value</code> might be undefined or null:</p> <p>If <code>state?.setting</code> is undefined or doesn't contain <code>value</code>, then <code>value</code> is <code>undefined</code>, and accessing <code>value[...key]</code> will throw an error.</p> </li> <li> <p>Falsy value fallback is unsafe:</p> <p>You're using the <code>||</code> operator to fall back to <code>\"true\"</code>:</p> <pre><code>value[...key] || BOOLEAN_STRINGS.TRUE\n</code></pre> <p>But what if the value is intentionally <code>\"false\"</code> (a string)? That\u2019s falsy, so the fallback will override it with <code>\"true\"</code>, which is wrong logic.</p> <p>Example:</p> <pre><code>value[...key] = \"false\"   // falsy\n=&gt; fallback to \"true\"     // incorrect\n</code></pre> </li> </ol>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#safe-and-defensive-version","title":"\u2705 Safe and Defensive Version","text":"<p>Here\u2019s a much safer and more intentional approach:</p> <pre><code>const settingValue = value?.[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED];\n\n// If the value is explicitly \"true\" or \"false\", use it, otherwise fall back\nconst isCBSReferenceNeeded =\n  settingValue === BOOLEAN_STRINGS.TRUE ||\n  (settingValue !== BOOLEAN_STRINGS.FALSE &amp;&amp; BOOLEAN_STRINGS.TRUE);\n</code></pre> <p>Alternatively, if you want the final result as a boolean:</p> <pre><code>const settingValue = value?.[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED];\n\n// Converts \"true\" \u2192 true, \"false\" \u2192 false, fallback to true\nconst isCBSReferenceNeeded =\n  settingValue === BOOLEAN_STRINGS.TRUE\n    ? true\n    : settingValue === BOOLEAN_STRINGS.FALSE\n    ? false\n    : true; // default fallback\n</code></pre>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#even-better-normalize-upstream","title":"\ud83e\udde9 Even Better: Normalize Upstream","text":"<p>Instead of dealing with <code>\"true\"</code>/<code>\"false\"</code> strings downstream, consider normalizing values when loading settings, converting them into real booleans right away.</p> <p>That way, consumers don\u2019t have to parse or default-check every time.</p>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#summary","title":"\u2705 Summary","text":"<ul> <li>\u274c Your current code is not safe if <code>value</code> is undefined or if the setting is <code>\"false\"</code>.</li> <li>\u2705 Use <code>value?.[...]</code> safely.</li> <li>\u2705 Check explicitly for <code>\"true\"</code> or <code>\"false\"</code>.</li> <li>\u2705 Consider normalizing the setting values to booleans earlier in your code.</li> </ul>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#theory","title":"Theory","text":"<p>\ud83e\udde9 Even Better: Normalize Upstream show me</p> <p>Great \u2014 let's walk through how to normalize your settings upstream, so your app logic can safely and consistently work with booleans (instead of <code>\"true\"</code>/<code>\"false\"</code> strings) everywhere downstream.</p> <p>\u2705 Goal:</p> <p>Transform incoming setting values like this:</p> <pre><code>{\n  IS_CBS_REFERENCE_NEEDED: \"true\", // string\n  FEATURE_X_ENABLED: \"false\",      // string\n}\n</code></pre> <p>Into this:</p> <pre><code>{\n  IS_CBS_REFERENCE_NEEDED: true,\n  FEATURE_X_ENABLED: false,\n}\n</code></pre>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#step-by-step-normalize-settings","title":"\ud83e\udde9 Step-by-Step: Normalize Settings","text":"<p>Assume you're fetching settings from an API or localStorage, and dispatching to Redux.</p> <p>1. Define a utility function to normalize booleans</p> <pre><code>// utils/normalizeSettings.ts\nimport { BOOLEAN_STRINGS, BOOLEAN_VALUE } from \"./constants\";\n\nexport function normalizeBooleanSettings(settings) {\n  const normalized = {};\n\n  for (const key in settings) {\n    const value = settings[key];\n    if (value === BOOLEAN_STRINGS.TRUE) {\n      normalized[key] = true;\n    } else if (value === BOOLEAN_STRINGS.FALSE) {\n      normalized[key] = false;\n    } else {\n      // Fallback behavior \u2014 you can choose what to do here\n      normalized[key] = value;\n    }\n  }\n\n  return normalized;\n}\n</code></pre> <p>This keeps the fallback flexible \u2014 if the value is not <code>\"true\"</code>/<code>\"false\"</code>, it passes through unchanged.</p> <p>2. Use this in your Redux slice or settings loader</p> <pre><code>import { normalizeBooleanSettings } from \"./utils/normalizeSettings\";\n\n// Example: thunk or reducer action\ndispatch({\n  type: \"LOAD_SETTINGS_SUCCESS\",\n  payload: normalizeBooleanSettings(rawSettingsFromApiOrStorage),\n});\n</code></pre> <p>3. Consume settings safely downstream</p> <p>Now in your component:</p> <pre><code>const { value } = useSelector((state) =&gt; state?.setting);\n\n// \u2705 already a boolean!\nconst isCBSReferenceNeeded =\n  value?.[SETTINGS_KEYS.IS_CBS_REFERENCE_NEEDED] ?? true;\n</code></pre> <p>No need to check for strings or manually coerce values anymore. Simple and type-safe.</p>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#optional-enhancements","title":"\ud83e\udde0 Optional Enhancements","text":"<p>A. Only normalize known boolean keys</p> <p>To avoid accidentally normalizing non-boolean settings, you could restrict normalization to specific keys:</p> <pre><code>const BOOLEAN_KEYS = [\n  \"IS_CBS_REFERENCE_NEEDED\",\n  \"FEATURE_X_ENABLED\",\n  // add others here\n];\n\nexport function normalizeBooleanSettings(settings) {\n  const normalized = { ...settings };\n\n  for (const key of BOOLEAN_KEYS) {\n    const value = settings[key];\n    if (value === BOOLEAN_STRINGS.TRUE) {\n      normalized[key] = true;\n    } else if (value === BOOLEAN_STRINGS.FALSE) {\n      normalized[key] = false;\n    }\n  }\n\n  return normalized;\n}\n</code></pre>"},{"location":"office/bank/settings/2025-09-09-settings-key-defensive-programming/#summary_1","title":"\u2705 Summary","text":"\u2705 Before \u2705 After Use strings like <code>\"true\"</code> / <code>\"false\"</code> all over the app Convert to real booleans once, at the source Requires manual fallback handling everywhere Consume values as safe <code>boolean</code> values Easy to introduce logic bugs Defensive and robust"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/","title":"CounterParty Add/Edit Checkbox","text":""},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#settings-added-checkbox-in-the-counterparty","title":"Settings Added Checkbox in the Counterparty","text":"<p><code>CounterParty/index.jsx</code></p> <pre><code>{\n    title: \"Value\",\n    dataIndex: \"value\",\n    key: \"vlaue\",\n},\n</code></pre> <pre><code>/***********************************************************************************\n * 0. Imported Checkbox form antd.\n ***********************************************************************************/\nimport {\n  Checkbox,\n} from \"antd\";\n\n/***********************************************************************************\n * 1. Handle Submit.\n ***********************************************************************************/\nconst handleSubmitCounterpartyMTSpecialField = async (values) =&gt; {\n  logger.info({ msg: \"SUBMIT: \", values });\n  setIsLoadingButton(true);\n\n    // ADDED NEW\n  if (!values.isChecked) {\n    values.value = null;\n  }\n\n  const uppdatedValues = {\n    ...values,\n    counterPartyId: viewSelectedMTType?.id,\n  };\n\n  console.log(\"SUBMIT: \", uppdatedValues);\n\n  // try {\n  //   await postCounterPartyMtSpecialField(uppdatedValues).unwrap();\n  //   setViewFormType(null);\n  // } catch (error) {\n  //   logger.error({ msg: \"Add Error: \", error });\n  // } finally {\n  //   setIsLoadingButton(false);\n  // }\n};\n\nconst handleEditCounterpartyMTSpecialField = async (values) =&gt; {\n  logger.info({ msg: \"SUBMIT: \", values, updateSelectedFormTypeId });\n  setIsLoadingButton(true);\n\n  const uppdatedValues = {\n    ...values,\n    counterPartyId: viewSelectedMTType?.id,\n  };\n\n  console.log(\"EDIT: \", uppdatedValues);\n  // try {\n  //   await putCounterPartyMtSpecialField({\n  //     id: updateSelectedFormTypeId,\n  //     data: uppdatedValues,\n  //   }).unwrap();\n  //   setViewFormType(null);\n  // } catch (error) {\n  //   logger.error({ msg: \"Add Error: \", error });\n  // } finally {\n  //   setIsLoadingButton(false);\n  // }\n};\n\n\n/***********************************************************************************\n * 2. Form Item New Added Declarative.\n ***********************************************************************************/\n\n// OLD REMOVED\n{/*\n&lt;Form.Item\n    label=\"Value\"\n    name=\"value\"\n    rules={[{ required: true, message: \"Please Enter Value\" }]}\n&gt;\n    &lt;Input\n        disabled={isView}\n        // formatter={(value) =&gt; intCurencyFormatter(value)}\n        style={{\n        width: \"100%\",\n        }}\n    /&gt;\n&lt;/Form.Item&gt;\n*/}\n\n// PALCED WITH NEW\n &lt;Form.Item name=\"isChecked\" valuePropName=\"checked\"&gt;\n    &lt;Checkbox&gt;Show Field&lt;/Checkbox&gt;\n&lt;/Form.Item&gt;\n\n&lt;Form.Item dependencies={[\"isChecked\"]}&gt;\n    {({ getFieldValue }) =&gt;\n        getFieldValue(\"isChecked\") ? (\n        &lt;Form.Item\n            name=\"value\"\n            label=\"Value\"\n            rules={[{ required: true, message: \"Required if checked\" }]}\n        &gt;\n            &lt;Input /&gt;\n        &lt;/Form.Item&gt;\n        ) : null\n    }\n&lt;/Form.Item&gt;\n\n\n/***********************************************************************************\n * 3. Fix the key name.\n ***********************************************************************************/\n\n{\n    title: \"Value\",\n    dataIndex: \"value\",\n    key: \"vlaue\",\n    key: \"value\",\n},\n</code></pre>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#recommended-approach-declarative-controlled","title":"\u2705 Recommended Approach (Declarative + Controlled)","text":"<p>Since you're already managing the checkbox state in <code>useState</code>, the cleanest declarative method is to conditionally render the <code>Form.Item</code> inside the JSX like this:</p> <pre><code>import React, { useState } from \"react\";\nimport { Form, Input, Checkbox } from \"antd\";\n\nconst MyForm = () =&gt; {\n  const [form] = Form.useForm();\n  const [isMTValueRequired, setIsMTValueRequired] = useState(false);\n\n  return (\n    &lt;Form form={form} layout=\"vertical\"&gt;\n      &lt;Form.Item&gt;\n        &lt;Checkbox\n          checked={isMTValueRequired}\n          onChange={() =&gt; setIsMTValueRequired((prev) =&gt; !prev)}\n        &gt;\n          CBS Reference Number\n        &lt;/Checkbox&gt;\n      &lt;/Form.Item&gt;\n\n      {isMTValueRequired &amp;&amp; (\n        &lt;Form.Item\n          name=\"cbs\"\n          label=\"CBS Reference Number\"\n          rules={[\n            { required: true, message: \"CBS Reference Number is required\" },\n          ]}\n          style={{ marginTop: 12, marginBottom: 8 }}\n        &gt;\n          &lt;Input placeholder=\"Enter CBS value\" maxLength={30} /&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n};\n\nexport default MyForm;\n</code></pre>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#alternative-fully-declarative-with-shouldupdate","title":"\ud83d\udd04 Alternative (Fully Declarative with <code>shouldUpdate</code>)","text":"<p>If you want to use Ant Design's internal Form state (without external <code>useState</code>) to conditionally show a field based on a form value, you can use <code>Form.Item</code> with <code>shouldUpdate</code>.</p> <p>\u2705 Declarative version using form values:</p> <pre><code>&lt;Form form={form} layout=\"vertical\"&gt;\n  {/* Checkbox field */}\n  &lt;Form.Item name=\"isMTValueRequired\" valuePropName=\"checked\"&gt;\n    &lt;Checkbox&gt;CBS Reference Number&lt;/Checkbox&gt;\n  &lt;/Form.Item&gt;\n\n  {/* Conditional field based on checkbox */}\n  &lt;Form.Item\n    shouldUpdate={(prev, curr) =&gt;\n      prev.isMTValueRequired !== curr.isMTValueRequired\n    }\n  &gt;\n    {({ getFieldValue }) =&gt;\n      getFieldValue(\"isMTValueRequired\") ? (\n        &lt;Form.Item\n          name=\"cbs\"\n          label=\"CBS Reference Number\"\n          rules={[\n            { required: true, message: \"CBS Reference Number is required\" },\n          ]}\n          style={{ marginTop: 12, marginBottom: 8 }}\n        &gt;\n          &lt;Input placeholder=\"Enter CBS value\" maxLength={30} /&gt;\n        &lt;/Form.Item&gt;\n      ) : null\n    }\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;\n</code></pre>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#summary-of-options","title":"\ud83d\udd0d Summary of Options","text":"Method Approach Uses <code>useState</code>? Controlled by Form? Declarative? Scalability Best Use Case 1. <code>useState</code> + Conditional JSX Basic React toggle \u2705 Yes \u274c No \u274c Imperative Good for small forms Simple UI control 2. <code>Form.Item</code> + <code>shouldUpdate</code> Semi-declarative \u274c No \u2705 Yes \u2705 Partially More scalable Reacting to multiple fields 3. <code>Form.Item</code> + <code>dependencies</code> Fully declarative \u274c No \u2705 Yes \u2705 Fully \u2b50\u2b50\u2b50\u2b50\u2b50 Best Forms that rely on interdependent values <p>Choose the second (<code>shouldUpdate</code>) method if you want to keep everything inside the Ant Design Form ecosystem.</p>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#recommended-formitem-with-dependencies","title":"\ud83c\udfc6 Recommended: <code>Form.Item</code> with <code>dependencies</code>","text":""},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#why-its-the-best","title":"\u2705 Why It\u2019s the Best:","text":"<ol> <li> <p>Fully Declarative:</p> <ul> <li>Keeps all logic inside the <code>Form</code>, no external state or side-effects.</li> <li>Clear what depends on what \u2014 the dependencies are declared explicitly.</li> </ul> </li> <li> <p>More Scalable:</p> <ul> <li>As your form grows, this pattern becomes easier to manage.</li> <li>Reactively tracks changes without needing to manually handle state.</li> </ul> </li> <li> <p>Better Integration with <code>Form</code> API:</p> <ul> <li>You can access validation, form submission, initial values, and reset easily.</li> <li>Works seamlessly with <code>form.setFieldsValue()</code> or <code>form.resetFields()</code>.</li> </ul> </li> <li> <p>Cleaner and Less Error-Prone:</p> <ul> <li>Reduces risk of state mismatches between your UI and the form's internal state.</li> </ul> </li> </ol>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#why-you-should-avoid-the-usestate-method-for-forms","title":"\ud83d\udc4e Why You Should Avoid the <code>useState</code> Method for Forms","text":"<ul> <li>Duplicates logic: You're tracking state in React and in <code>Form</code>.</li> <li>More boilerplate and harder to maintain.</li> <li>Doesn\u2019t work well with dynamic validations or when resetting the form.</li> <li>Causes unnecessary re-renders.</li> </ul>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#when-to-use-each","title":"\u2705 When to Use Each","text":"Scenario Best Method Simple toggle outside of a form (UI-only) <code>useState</code> Showing/hiding fields based on other form values <code>dependencies</code> Complex condition involving multiple fields <code>shouldUpdate</code> or custom hooks inside <code>Form.Item</code>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#example-recap-best-practice","title":"\u2705 Example Recap (Best Practice):","text":"<pre><code>&lt;Form.Item name=\"isChecked\" valuePropName=\"checked\"&gt;\n  &lt;Checkbox&gt;Show Field&lt;/Checkbox&gt;\n&lt;/Form.Item&gt;\n\n&lt;Form.Item dependencies={['isChecked']}&gt;\n  {({ getFieldValue }) =&gt;\n    getFieldValue('isChecked') ? (\n      &lt;Form.Item\n        name=\"field\"\n        label=\"Conditional Field\"\n        rules={[{ required: true, message: 'Required if checked' }]}\n      &gt;\n        &lt;Input /&gt;\n      &lt;/Form.Item&gt;\n    ) : null\n  }\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#misc","title":"Misc","text":"<p>Great \u2014 since you're specifically asking for a purely declarative Ant Design (<code>antd</code>) approach using <code>Form.Item</code>, here's how you can conditionally show form fields based on other form field values using Ant Design\u2019s <code>Form.Item</code> with the <code>shouldUpdate</code> prop or <code>dependencies</code>.</p> <p>\u2705 Solution Using <code>Form.Item</code> with <code>dependencies</code> (Purely Declarative)</p> <p>Ant Design provides a declarative way to show/hide form fields based on other fields using:</p> <ul> <li><code>Form.Item dependencies={['fieldName']}</code></li> <li>The render prop pattern inside that <code>Form.Item</code></li> </ul> <p>This avoids any useState or manual re-renders.</p> <p>\ud83d\udd27 Working Example (Declarative, No useState)</p> <pre><code>import React from \"react\";\nimport { Form, Input, Checkbox } from \"antd\";\n\nconst DeclarativeForm = () =&gt; {\n  return (\n    &lt;Form layout=\"vertical\"&gt;\n      {/* Checkbox Field */}\n      &lt;Form.Item name=\"isMTValueRequired\" valuePropName=\"checked\"&gt;\n        &lt;Checkbox&gt;CBS Reference Number&lt;/Checkbox&gt;\n      &lt;/Form.Item&gt;\n\n      {/* Conditionally show CBS field based on checkbox value */}\n      &lt;Form.Item dependencies={[\"isMTValueRequired\"]}&gt;\n        {({ getFieldValue }) =&gt;\n          getFieldValue(\"isMTValueRequired\") ? (\n            &lt;Form.Item\n              name=\"cbs\"\n              label=\"CBS Reference Number\"\n              rules={[\n                { required: true, message: \"CBS Reference Number is required\" },\n              ]}\n              style={{ marginTop: 12, marginBottom: 8 }}\n            &gt;\n              &lt;Input placeholder=\"Enter CBS value\" maxLength={30} /&gt;\n            &lt;/Form.Item&gt;\n          ) : null\n        }\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n\nexport default DeclarativeForm;\n</code></pre> \u2705 What\u2019s Happening: <ul> <li><code>name=\"isMTValueRequired\"</code> stores the checkbox value in the form.</li> <li>The second <code>Form.Item</code> with <code>dependencies={['isMTValueRequired']}</code> watches that field.</li> <li>It uses <code>getFieldValue</code> to check the value, and conditionally renders the input field.</li> </ul> <p>\ud83d\udca1 Why This Is \"Declarative\"</p> <ul> <li>No use of <code>useState</code>.</li> <li>All control is inside <code>Form.Item</code>.</li> <li>Reactively responds to form value changes.</li> <li>Clean and scalable.</li> </ul>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#enhancing-the-pattern","title":"\u2705 Enhancing the Pattern:","text":"<p>We will:</p> <ol> <li>Dynamically change validation rules based on the checkbox.</li> <li>Completely hide the field (from DOM/layout), not just conditionally render it.</li> </ol> <p>\ud83d\udca1 What We'll Use:</p> <ul> <li><code>Form.Item dependencies={['checkboxField']}</code> \u2014 to reactively track changes.</li> <li><code>getFieldValue()</code> \u2014 to dynamically check checkbox value.</li> <li><code>rules</code> and <code>hidden</code> props \u2014 to control visibility and validation.</li> </ul> <p>\u2705 Final Declarative Example</p> <pre><code>import React from \"react\";\nimport { Form, Input, Checkbox } from \"antd\";\n\nconst DynamicForm = () =&gt; {\n  return (\n    &lt;Form layout=\"vertical\"&gt;\n      {/* Checkbox to control visibility and validation */}\n      &lt;Form.Item name=\"showField\" valuePropName=\"checked\"&gt;\n        &lt;Checkbox&gt;Show CBS Reference Number&lt;/Checkbox&gt;\n      &lt;/Form.Item&gt;\n\n      {/* CBS Reference Number input: hidden &amp; validated based on checkbox */}\n      &lt;Form.Item dependencies={[\"showField\"]}&gt;\n        {({ getFieldValue }) =&gt; {\n          const isVisible = getFieldValue(\"showField\");\n          return (\n            &lt;Form.Item\n              name=\"cbs\"\n              label=\"CBS Reference Number\"\n              rules={\n                isVisible\n                  ? [\n                      {\n                        required: true,\n                        message: \"CBS Reference Number is required\",\n                      },\n                    ]\n                  : []\n              }\n              hidden={!isVisible} // this hides it from layout, not just conditionally renders\n            &gt;\n              &lt;Input placeholder=\"Enter CBS Reference Number\" maxLength={30} /&gt;\n            &lt;/Form.Item&gt;\n          );\n        }}\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n\nexport default DynamicForm;\n</code></pre> <p>\ud83d\udd0d Key Points:</p> Feature How It Works <code>dependencies</code> Tracks checkbox value reactively inside the form. <code>rules</code> Applies validation only if checkbox is checked. <code>hidden</code> Hides the field from both layout and DOM (more graceful than <code>null</code>). <p>\ud83e\uddfc Optional Enhancement: Clear Field When Hidden</p> <p>If you want to clear the input value when the checkbox is unchecked, add this logic:</p> <pre><code>if (!isVisible) {\n  form.setFieldsValue({ cbs: undefined });\n}\n</code></pre> <p>Just make sure to get access to <code>form</code> instance:</p> <pre><code>const [form] = Form.useForm();\n\n&lt;Form form={form} ... &gt;\n</code></pre> <p>\u2705 Summary</p> Behavior Technique Show/hide form fields <code>hidden</code> prop Dynamic validation rules <code>rules</code> inside <code>dependencies</code> block Fully declarative logic \u2705 Yes \u2014 no <code>useState</code> needed <pre><code>import React, { useEffect } from \"react\";\nimport { Form, Input, Checkbox, Button, message } from \"antd\";\n\nconst DeclarativeDynamicForm = () =&gt; {\n  const [form] = Form.useForm();\n\n  // Simulate prefilled values from backend\n  useEffect(() =&gt; {\n    // Example: assume user already opted in and has a value\n    form.setFieldsValue({\n      showCBS: true,\n      cbs: \"ABC123456\",\n    });\n  }, [form]);\n\n  const onFinish = (values) =&gt; {\n    console.log(\"Form submitted with values:\", values);\n    message.success(\"Form submitted successfully!\");\n  };\n\n  return (\n    &lt;Form\n      form={form}\n      layout=\"vertical\"\n      onFinish={onFinish}\n      initialValues={{\n        showCBS: false,\n        cbs: \"\",\n      }}\n    &gt;\n      {/* Checkbox to show/hide CBS input */}\n      &lt;Form.Item name=\"showCBS\" valuePropName=\"checked\"&gt;\n        &lt;Checkbox&gt;Show CBS Reference Number&lt;/Checkbox&gt;\n      &lt;/Form.Item&gt;\n\n      {/* CBS Input: Dynamic validation and visibility */}\n      &lt;Form.Item dependencies={[\"showCBS\"]}&gt;\n        {({ getFieldValue }) =&gt; {\n          const isVisible = getFieldValue(\"showCBS\");\n\n          // Clear the value if hidden\n          if (!isVisible) {\n            form.setFieldsValue({ cbs: undefined });\n          }\n\n          return (\n            &lt;Form.Item\n              name=\"cbs\"\n              label=\"CBS Reference Number\"\n              rules={\n                isVisible\n                  ? [\n                      {\n                        required: true,\n                        message: \"CBS Reference Number is required\",\n                      },\n                    ]\n                  : []\n              }\n              hidden={!isVisible}\n            &gt;\n              &lt;Input placeholder=\"Enter CBS Reference Number\" maxLength={30} /&gt;\n            &lt;/Form.Item&gt;\n          );\n        }}\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item&gt;\n        &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n          Submit Form\n        &lt;/Button&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n\nexport default DeclarativeDynamicForm;\n</code></pre>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#when-to-use-shouldupdate-vs-dependenciesischecked-in-ant-design-forms-is-key-to-building-reliable-and-dynamic-forms","title":"when to use <code>shouldUpdate</code> vs <code>dependencies={[\"isChecked\"]}</code> in Ant Design forms is key to building reliable and dynamic forms.","text":"<p>\u2705 Quick Summary</p> Feature <code>dependencies={[\"isChecked\"]}</code> <code>shouldUpdate</code> Re-renders on field change \u2705 Yes (only for listed fields) \u2705 Yes (on any field or custom logic) Ideal for simple dependencies \u2705 Yes \u274c Overkill Can compare multiple fields \u274c No (only fields listed) \u2705 Yes Works reliably with initialValues \u274c Sometimes inconsistent (runs too early) \u2705 More reliable on mount Allows complex logic \u274c Only simple one-field checks \u2705 Can do `if (A B &amp;&amp; !C)` Readability / Simplicity \u2705 Cleaner for one field \u274c Slightly more verbose <p>\u2705 Use <code>dependencies={[\"fieldName\"]}</code> When:</p> <ul> <li>You need to show/hide or update a field based on a single other field</li> <li>You don't need to compare multiple fields</li> <li>You want simpler code and aren't doing complex checks</li> <li>You don\u2019t rely on <code>initialValues</code> immediately</li> </ul> \u2705 Example: Show field if checkbox is checked<pre><code>&lt;Form.Item dependencies={[\"isChecked\"]}&gt;\n  {({ getFieldValue }) =&gt;\n    getFieldValue(\"isChecked\") ? (\n      &lt;Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}&gt;\n        &lt;Input /&gt;\n      &lt;/Form.Item&gt;\n    ) : null\n  }\n&lt;/Form.Item&gt;\n</code></pre> <p>\u2705 Use <code>shouldUpdate</code> When:</p> <ul> <li>You need to compare multiple fields</li> <li>You want to check complex conditions</li> <li>You rely on <code>initialValues</code> being already set</li> <li>You want more control over when the form item re-renders</li> </ul> \u2705 Example: Show field if isChecked OR value exists<pre><code>&lt;Form.Item shouldUpdate&gt;\n  {({ getFieldValue }) =&gt; {\n    const isChecked = getFieldValue(\"isChecked\");\n    const value = getFieldValue(\"value\");\n\n    if (isChecked || (value &amp;&amp; value.trim() !== \"\")) {\n      return (\n        &lt;Form.Item name=\"value\" label=\"Value\" rules={[{ required: true }]}&gt;\n          &lt;Input /&gt;\n        &lt;/Form.Item&gt;\n      );\n    }\n\n    return null;\n  }}\n&lt;/Form.Item&gt;\n</code></pre> <p>\ud83e\udde0 Real-World Guideline</p> Scenario Use Show/hide field based on 1 checkbox toggle <code>dependencies</code> Validate or show field if checkbox is checked or value is prefilled <code>shouldUpdate</code> Conditionally update field A based on fields B and C <code>shouldUpdate</code> Want to keep form logic simple and clear <code>dependencies</code> Need to wait for initialValues to be set before checking a value <code>shouldUpdate</code>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#important-note-on-dependencies","title":"\ud83d\udea8 Important Note on <code>dependencies</code>","text":"<p>It sometimes runs too early, especially on first mount, when initialValues haven\u2019t populated yet \u2014 meaning:</p> <pre><code>getFieldValue(\"value\");\n</code></pre> <p>might return <code>undefined</code> even if <code>initialValues</code> has value.</p> <p>In such cases, <code>shouldUpdate</code> is more reliable.</p>"},{"location":"office/bank/settings/2025-09-11-setting-counterparty-add-checkbox/#tldr-decision-chart","title":"\u2705 TL;DR Decision Chart","text":"<pre><code>One field affects another?  \u2192 Use dependencies\n\nMultiple fields involved?   \u2192 Use shouldUpdate\n\nNeed to support edit mode?  \u2192 Use shouldUpdate\n\nWant simpler code?          \u2192 Use dependencies (if enough)\n</code></pre>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/","title":"Intial Loading vs Infinite Loader SOlved","text":""},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#separating-initial-and-paginated-loading-state-in-infinite-scroll-ui","title":"Separating Initial and Paginated Loading State in Infinite Scroll UI","text":"<p>Fix: CustomTable Not Loading on Filter When Using InfiniteScroll</p>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#real-time-example","title":"Real Time Example","text":"<pre><code>users\n- index.jsx\n</code></pre> <pre><code>const onFilterSubmit = async (values) =&gt; {\n  logger.info({ msg: \"VALUES: \", values });\n  setSearchTerm(values?.searchTerm);\n  setSearchValue(values?.searchTerm);\n  setFilterRole(values?.roles);\n  setFilterReportingManager(values?.reportingManagerId);\n  setFilterDepartment(values?.departmentId);\n  setFilterBranch(values?.branchId);\n  setStaffId(values?.employeeId);\n  setMail(values?.mail);\n  setName(values?.name);\n  !forexLoading &amp;&amp; setFilterModel(false);\n};\n\nconst {\n  data: usersData,\n  isLoading: usersDataLoading,\n  isError: usersDataError,\n  isFetching: usersDataFetching,\n} = useGetUsersPaginationQuery(\n  {\n    searchTerm: searchTerm,\n    roles: filterRole,\n    pageSize: pageSize,\n    reportingManagerId: filterReportingManager,\n    departmentId: filterDepartment,\n    branchId: filterBranch,\n    pageCount: pageCount,\n    staffId: staffId,\n    name: name,\n    mail: mail,\n  },\n  { skip: !pageSize }\n);\n</code></pre> ADDED CODE<pre><code>const [isInitialLoading, setIsInitialLoading] = useState(false);\n\nuseEffect(() =&gt; {\n  if (!usersDataLoading &amp;&amp; !usersDataFetching &amp;&amp; isInitialLoading) {\n    setIsInitialLoading(false);\n  }\n}, [usersDataLoading, usersDataFetching]);\n\nconst onFilterClear = async (values) =&gt; {\n  // ADDED THIS TO FALSE\n  setIsInitialLoading(false);\n  /* END */\n\n  setSelectedDepartment(null);\n  filterForm.resetFields();\n};\n\nconst onSearch = (value, _e, info) =&gt; {\n  /*\n   * ADDED THIS\n   */\n  const trimmedValue = value?.trim();\n  if (!isEmpty(trimmedValue)) {\n    setSearchTerm(trimmedValue);\n    setIsInitialLoading(true);\n  } else {\n    setSearchTerm(null);\n  }\n  /* UPTO HERE */\n\n  // logger.info({ msg: \"Search: \", info, value });\n  // setSearchTerm(searchValue);\n};\n\nconst onFilterSubmit = async (values) =&gt; {\n  logger.info({ msg: \"VALUES: \", values });\n\n  // ADDED THIS FILTER INITIAL LOADING TO TRUE\n  setIsInitialLoading(true);\n  /* END */\n\n  setSearchTerm(values?.searchTerm);\n  setSearchValue(values?.searchTerm);\n  setFilterRole(values?.roles);\n  setFilterReportingManager(values?.reportingManagerId);\n  setFilterDepartment(values?.departmentId);\n  setFilterBranch(values?.branchId);\n  setStaffId(values?.employeeId);\n  setMail(values?.mail);\n  setName(values?.name);\n  !forexLoading &amp;&amp; setFilterModel(false);\n};\n\n&lt;InfiniteScroll&gt;\n  &lt;CustomTable\n    scroll={{ x: 1500 }}\n    // loading={usersDataLoading}\n\n    // ADDED THIS isInitialLoading\n    loading={usersDataLoading || isInitialLoading}\n    //\n\n    columns={columns}\n    data={dataList}\n    pagination={false}\n  /&gt;\n&lt;/InfiniteScroll&gt;;\n</code></pre> <p>Thanks for the detailed code. You're dealing with a common issue in infinite scroll + filtering UIs:</p>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#problem","title":"\"Problem\"","text":"<ul> <li> <p>When search/filter is applied, your table doesn't show loading state (since <code>loading={usersDataLoading}</code> doesn't catch all updates).</p> </li> <li> <p>When you change it to <code>loading={usersDataLoading || usersDataFetching}</code>, it causes the table to show loading state even during \"load more\", which is not ideal (as data appends, not replaces).</p> </li> </ul>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#solution","title":"\u2705 Solution:","text":"<p>You need to differentiate between:</p> <ol> <li>Initial loading for filters/search</li> <li>Pagination loading (load more)</li> </ol>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#fix-strategy","title":"\ud83d\udd27 Fix Strategy:","text":"<p>Create separate states for:</p> <ul> <li><code>isInitialLoading</code> \u2013 when filters/search are applied</li> <li><code>isPaginationLoading</code> \u2013 when scrolling to load more</li> </ul>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#step-by-step-implementation","title":"\u2705 Step-by-step Implementation:","text":"<ol> <li> <p>Add a state to track filter/search loading:</p> <pre><code>const [isInitialLoading, setIsInitialLoading] = useState(false);\n</code></pre> </li> <li> <p>Update <code>onFilterSubmit</code> to reset pagination and show loading:</p> <pre><code>const onFilterSubmit = async (values) =&gt; {\n  logger.info({ msg: \"VALUES: \", values });\n\n  setIsInitialLoading(true);\n  setPageSize(10); // Reset pagination\n  setSearchTerm(values?.searchTerm);\n  setSearchValue(values?.searchTerm);\n  setFilterRole(values?.roles);\n  setFilterReportingManager(values?.reportingManagerId);\n  setFilterDepartment(values?.departmentId);\n  setFilterBranch(values?.branchId);\n  setStaffId(values?.employeeId);\n  setMail(values?.mail);\n  setName(values?.name);\n\n  !forexLoading &amp;&amp; setFilterModel(false);\n};\n</code></pre> </li> <li> <p>Use <code>useEffect</code> to detect end of initial loading:</p> <pre><code>useEffect(() =&gt; {\n  if (!usersDataLoading &amp;&amp; !usersDataFetching &amp;&amp; isInitialLoading) {\n    setIsInitialLoading(false);\n  }\n}, [usersDataLoading, usersDataFetching]);\n</code></pre> </li> <li> <p>Adjust the <code>CustomTable</code> loading prop:</p> <pre><code>&lt;CustomTable\n  scroll={{ x: 1500 }}\n  loading={isInitialLoading}\n  columns={columns}\n  data={dataList}\n  pagination={false}\n/&gt;\n</code></pre> </li> <li> <p>Keep pagination loading in <code>InfiniteScroll</code>:</p> <pre><code>```jsx\n&lt;InfiniteScroll\n    dataLength={dataList?.length}\n    next={loadMoreData}\n    hasMore={usersData?.hasNext}\n    loader={\n        loading &amp;&amp; (\n            &lt;Skeleton\n            avatar\n            paragraph={{ rows: 1 }}\n            active\n            /&gt;\n        )\n    }\n    endMessage={!isEmpty(dataList) &amp;&amp; &lt;Divider plain&gt;End&lt;/Divider&gt;}\n    scrollableTarget=\"scrollableDiv\"\n&gt;\n```\n</code></pre> </li> </ol> <p>\u2705 Final Outcome:</p> <ul> <li>When you search or filter, <code>CustomTable</code> shows a loading state.</li> <li>When you scroll to load more, the loader below shows, and the table doesn't flicker.</li> <li>Clean separation of concerns between filter-based and scroll-based data fetching.</li> </ul> <p>Let me know if you want to debounce the filter inputs or reset scroll position when filtering \u2014 those are common enhancements.</p>"},{"location":"office/bank/settings/2025-12-06-separating-initial-loading-vs-paginate-infinite-scroll-in-table/#last-tip","title":"LAST TIP","text":"<pre><code>// const [isInitialLoading, setIsInitialLoading] = useState(false);\nconst [isInitialLoading, setIsInitialLoading] = useState(true);\n</code></pre> <p>Because when switching the navigation it solves the loading the table.</p>"},{"location":"office/bank/settings/delete-users/","title":"Delete Users","text":""},{"location":"office/bank/settings/delete-users/#delete-users","title":"Delete Users","text":""},{"location":"office/bank/settings/delete-users/#previous","title":"Previous","text":"<pre><code>// index.jsx\nconst handleDelete = async (values) =&gt; {\n  const deleteValue = {\n    ...values,\n    isActive: false,\n  };\n  const id = { id: values?.id };\n  try {\n    await deleteUsers(id).unwrap();\n  } catch (error) {\n    logger.info({ msg: \"Delete Error: \", error });\n  }\n};\n\n{\n  hasPermission(currentPermission, PERMISSIONS?.CAN_DELETE_USERS) &amp;&amp;\n    record?.isDeletable &amp;&amp; (\n      &lt;Popconfirm\n        title=\"Delete the users\"\n        description=\"Are you sure to delete this users?\"\n        onConfirm={() =&gt; {\n          handleDelete(record);\n        }}\n        okText=\"Yes\"\n        cancelText=\"No\"\n      &gt;\n        &lt;DeleteTwoTone /&gt;\n      &lt;/Popconfirm&gt;\n    );\n}\n\n// settings.jsx\ndeleteUsers: builder.mutation({\n    query: ({ id }) =&gt; ({\n        url: `Users/${id}`,\n        method: HTTP_METHODS.DELETE,\n    }),\n    invalidateTags: [\"Users\"],\n    async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n            await queryFulfilled;\n        } catch (err) {\n            notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n                \"An unexpected error occurred getting the User.\",\n            1,\n            );\n        }\n    },\n}),\n</code></pre>"},{"location":"office/bank/settings/delete-users/#modfied","title":"Modfied","text":"<pre><code>modified:   src/features/settings/components/Users/index.jsx\nmodified:   src/features/settings/services/settingApi.js\n</code></pre>"},{"location":"office/bank/settings/delete-users/#indexjsx","title":"<code>index.jsx</code>","text":"<pre><code>import {\n    Modal,\n} from \"antd\";\n\nconst Users = () =&gt; {\n  const [deleteForm] = Form.useForm();\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [selectedDeleteRecord, setSelectedDeleteRecord] = useState(null);\n\n\n    const handleDelete = async (values) =&gt; {\n        // logger.info({ msg: \"DELETE: \", values });\n\n        /*********** ADDED **********/\n        const formValues = await deleteForm.validateFields();\n        const deleteValue = {\n            ...selectedDeleteRecord,\n            remarks: formValues.remarks,\n            isActive: false,\n        };\n        /**************************/\n\n        // const deleteValue = {\n        //   ...values,\n        //   isActive: false,\n        // };\n        logger.info({ msg: \"DELETE: \", values, deleteValue });\n\n        try {\n            // await deleteUsers({id}).unwrap();\n            // logger.info({ msg: \"DELETE: \", values, deleteValue });\n            await deleteUsers({ id: deleteValue?.id, data: deleteValue }).unwrap();\n        } catch (error) {\n            logger.info({ msg: \"Delete Error: \", error });\n        }\n    };\n\n    /********** MODAL **************/\n    const showDeleteModal = (record) =&gt; {\n        setSelectedDeleteRecord(record);\n        setIsDeleteModalOpen(true);\n    };\n    const handleDeleteModal = () =&gt; {\n        deleteForm.resetFields();\n        setIsDeleteModalOpen(false);\n        setSelectedDeleteRecord(null);\n    };\n    /******************************/\n\n\n    const columns = [\n        {\n            title: \"Action\",\n            fixed: \"right\",\n            width: 100,\n            render: (_, record) =&gt; {\n                return (\n                    {hasPermission(currentPermission, PERMISSIONS?.CAN_DELETE_USERS) &amp;&amp;\n                    record?.isDeletable &amp;&amp; (\n                        // &lt;Popconfirm\n                        //   title=\"Delete the users\"\n                        //   description=\"Are you sure to delete this users?\"\n                        //   onConfirm={() =&gt; {\n                        //     handleDelete(record);\n                        //   }}\n                        //   okText=\"Yes\"\n                        //   cancelText=\"No\"\n                        // &gt;\n                        //   &lt;DeleteTwoTone /&gt;\n                        // &lt;/Popconfirm&gt;\n                        &lt;DeleteTwoTone onClick={() =&gt; showDeleteModal(record)} /&gt;\n                    )}\n                )\n            }\n        }\n    ]\n\n    return (\n        &lt;&gt;\n            &lt;Modal\n                title={`Delete the ${selectedDeleteRecord?.fullName &amp;&amp; selectedDeleteRecord?.fullName} user`}\n                open={isDeleteModalOpen}\n                onOk={() =&gt; handleDelete(selectedDeleteRecord)}\n                onCancel={handleDeleteModal}\n                okText=\"Yes, Delete\"\n                cancelText=\"Cancel\"\n            &gt;\n                &lt;Form form={deleteForm} layout=\"vertical\"&gt;\n                &lt;Form.Item\n                    name=\"remarks\"\n                    label=\"Remarks\"\n                    rules={[{ required: true, message: \"Please provide a remark\" }]}\n                &gt;\n                    &lt;Input.TextArea rows={3} placeholder=\"Enter remarks\" /&gt;\n                &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n};\n</code></pre>"},{"location":"office/bank/settings/delete-users/#settingsapijs","title":"<code>settingsApi.js</code>","text":"<pre><code>deleteUsers: builder.mutation({\n    query: ({ id, data }) =&gt; ({\n        // url: `Users/${id}`,\n        url: `Users/edit/${id}`,\n        // method: HTTP_METHODS.DELETE,\n        method: HTTP_METHODS.PUT,\n        data,\n    }),\n    invalidateTags: [\"Users\"],\n    async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n            await queryFulfilled;\n        } catch (err) {\n            notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n                \"An unexpected error occurred getting the User.\",\n            1\n            );\n        }\n    },\n}),\n</code></pre>"},{"location":"office/bank/settings/globalSettings/","title":"Global Settings","text":""},{"location":"office/bank/settings/globalSettings/#global-settings","title":"Global Settings","text":"<pre><code>updateGlobalSetting: (state, action) =&gt; {\n  const settingsArray = action.payload?.value || [];\n  const settingsMap = Object.fromEntries(\n    settingsArray.map((item) =&gt; [item.keyName, item.value])\n  );\n  state.value = settingsMap;\n},\n</code></pre> <pre><code>const globalSettingSlice = createSlice({\n  name: \"setting\",\n  initialState: {\n    value: null, // key-value map\n    raw: null, // full array (optional)\n  },\n  reducers: {\n    updateGlobalSetting: (state, action) =&gt; {\n      const settingsArray = action.payload?.value || [];\n      state.raw = settingsArray;\n      state.value = Object.fromEntries(\n        settingsArray.map((item) =&gt; [item.keyName, item.value])\n      );\n    },\n\n    // \u2705 NEW: Update a single key in the key-value map\n    updateSingleSetting: (state, action) =&gt; {\n      const { key, value, fullItem } = action.payload;\n      if (state.value) {\n        state.value[key] = value;\n      }\n\n      // Optional: also update raw array if you're using it\n      if (state.raw) {\n        const index = state.raw.findIndex((item) =&gt; item.keyName === key);\n        if (index !== -1) {\n          state.raw[index] = fullItem ?? { ...state.raw[index], value };\n        } else {\n          state.raw.push(fullItem ?? { keyName: key, value });\n        }\n      }\n    },\n\n    clearGlobalSetting: (state) =&gt; {\n      state.value = null;\n      state.raw = null;\n    },\n  },\n});\n\nexport const { updateGlobalSetting, updateSingleSetting, clearGlobalSetting } =\n  globalSettingSlice.actions;\nexport default globalSettingSlice.reducer;\n</code></pre>"},{"location":"office/bank/settings/globalSettings/#test","title":"Test","text":"<pre><code>// Initial state\nconst initialState = {\n  value: null,\n};\n\n// Reducers\nconst globalSettingSlice = createSlice({\n  name: \"setting\",\n  initialState,\n  reducers: {\n    updateGlobalSetting: (state, action) =&gt; {\n      const settingsData = action.payload?.value || [];\n      const settingsMap = Object.fromEntries(\n        settingsData.map((item) =&gt; [item.keyName, item.value])\n      );\n      state.value = settingsMap; // &lt;-- sets the map\n    },\n    updateSingleSetting: (state, action) =&gt; {\n      const { keyName, value } = action.payload;\n\n      console.log(\n        \"Current state value inside updateSingleSetting:\",\n        state.value\n      );\n\n      if (!state.value) {\n        state.value = {};\n      }\n      state.value[keyName] = value; // &lt;-- updates a single key\n    },\n  },\n});\n</code></pre>"},{"location":"office/bank/settings/globalSettings/#usage-in-components","title":"USAGE IN COMPONENTS","text":"<pre><code>import { updateSingleSetting } from \"@features/settings/services/globalSettingSlice\";\n\ndispatch(updateSingleSetting(updatedValues));\n</code></pre> CONSTANTS<pre><code>const BOOLEAN_STRINGS = {\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\nconst SETTINGS_KEYS = {\n  IS_VERIFIER_NEEDED: \"IsVerifierNeeded\",\n};\n\nconst SETTINGS_KEYS = {\n  IS_VERIFIER_NEEDED: \"IsVerifierNeeded\",\n  // Add more keys as needed\n};\n\n/******************************/\nconst isVerifierNeeded = value[SETTINGS_KEYS.IS_VERIFIER_NEEDED] || \"false\";\n/******************************/\n\nconst rawValue =\n  value[SETTINGS_KEYS.IS_VERIFIER_NEEDED] ?? BOOLEAN_STRINGS.FALSE;\nconst isVerifierNeeded = rawValue === BOOLEAN_STRINGS.TRUE;\n</code></pre>"},{"location":"office/bank/settings/globalSettings/#misc","title":"Misc","text":"<pre><code>const newSettingsData = {}; // Empty object\n\nconsole.log(isEmpty(newSettingsData)); // true\nconsole.log(!isEmpty(newSettingsData)); // false\n</code></pre>"},{"location":"office/bank/settings/polling-setting/","title":"Polling Settings","text":""},{"location":"office/bank/settings/polling-setting/#polling-setting","title":"Polling Setting","text":""},{"location":"office/bank/settings/polling-setting/#component","title":"Component","text":"useGlobalSettings.js<pre><code>import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { isEmpty } from \"lodash\";\n\nimport { updatePermission } from \"@features/auth/services/authSlice\";\nimport { useGetPollingGlobalSettingsQuery } from \"@features/settings/services/globalSettingApi\";\nimport { updateGlobalSetting } from \"@features/settings/services/globalSettingSlice\";\n\nimport { CONFIG } from \"@shared/utils/config\";\nimport {\n  POLLING_INTERVAL_5S,\n  POLLING_INTERVAL_1MIN,\n  POLLING_INTERVAL_5MIN,\n} from \"@shared/utils/config\";\n\nconst useGlobalSettings = () =&gt; {\n  const isDevelopmentMode = CONFIG.MODE === \"development\" ? true : false;\n  const dispatch = useDispatch();\n  const { value } = useSelector((state) =&gt; state.setting);\n\n  const {\n    data: newSettingsData,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useGetPollingGlobalSettingsQuery(undefined, {\n    pollingInterval: isDevelopmentMode\n      ? POLLING_INTERVAL_1MIN\n      : POLLING_INTERVAL_5MIN,\n  });\n\n  useEffect(() =&gt; {\n    if (\n      !isEmpty(newSettingsData) &amp;&amp;\n      JSON.stringify(newSettingsData) !== JSON.stringify(value)\n    ) {\n      dispatch(updateGlobalSetting(newSettingsData));\n    }\n  }, [newSettingsData, value, dispatch]);\n\n  return { isLoading, isError, error, refetch };\n};\n\nexport default useGlobalSettings;\n</code></pre>"},{"location":"office/bank/settings/polling-setting/#api","title":"API","text":"settingApi.js<pre><code>export const globalSettingApi = createApi({\n  reducerPath: \"globalSettingApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"settings\"],\n  keepUnusedDataFor: 0,\n  endpoints: (builder) =&gt; ({\n    getPollingGlobalSettings: builder.query({\n      query: () =&gt; ({\n        url: `AppSystemSettings`,\n        method: HTTP_METHODS.GET,\n      }),\n      transformResponse: (response) =&gt; {\n        if (!Array.isArray(response)) {\n          return {};\n        }\n\n        const transformData = Object.fromEntries(\n          response?.map((item) =&gt; [item?.keyName, item?.value])\n        );\n\n        return transformData;\n      },\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            NotificationType.ERROR,\n            null,\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred during Globall API.\",\n            1\n          );\n        }\n      },\n      providesTags: [\"settings\"],\n    }),\n  }),\n});\n</code></pre>"},{"location":"office/bank/settings/polling-setting/#slice","title":"Slice","text":"globalSettingSlice.js<pre><code>import { createSlice } from \"@reduxjs/toolkit\";\nimport logger from \"@shared/utils/logger\";\n\nconst globalSettingSlice = createSlice({\n  name: \"setting\",\n  initialState: {\n    value: null,\n  },\n\n  reducers: {\n    setGlobalSetting: (state, action) =&gt; {\n      const settingsData = action.payload?.value || [];\n      const settingsMap = Object.fromEntries(\n        settingsData?.map((item) =&gt; [item?.keyName, item?.value])\n      );\n      state.value = settingsMap;\n    },\n    updateGlobalSetting: (state, action) =&gt; {\n      state.value = action?.payload;\n    },\n    updateSingleSetting: (state, action) =&gt; {\n      logger.info({ msg: \"UPDATE SINGLE SETTING: \", action, state });\n      const { dataType, id, keyName, value } = action.payload;\n\n      if (!state.value) {\n        state.value = {};\n      }\n      state.value[keyName] = value;\n    },\n    clearGlobalSetting: (state) =&gt; {\n      state.value = null;\n    },\n  },\n});\n\nexport const {\n  setGlobalSetting,\n  updateGlobalSetting,\n  updateSingleSetting,\n  clearGlobalSetting,\n} = globalSettingSlice.actions;\n\nexport default globalSettingSlice.reducer;\n</code></pre>"},{"location":"office/bank/settings/polling-setting/#usage","title":"Usage","text":"<pre><code>const MainLayout = ({ children }) =&gt; {\n  const { isLoading, isError, error } = useUpdatePermissions();\n\n  // POLLING SETTINGS INTERVALE\n  // const { isLoadingSettings, isErrorSettings, errorSettings } =\n  //   useGlobalSettings();\n};\n</code></pre>"},{"location":"office/bank/settings/rate-template/","title":"Rate Template","text":""},{"location":"office/bank/settings/rate-template/#rate-template","title":"Rate Template","text":""},{"location":"office/bank/settings/rate-template/#folder-structure-suggestion","title":"Folder Structure Suggestion:","text":"<pre><code>/components\n  /Templates\n    TemplatePrabhu.jsx\n    TemplateNimb.jsx\n    index.js \u2190 (exports all templates)\n  YourComponent.jsx\n/constants\n  settingsKeys.js\n</code></pre>"},{"location":"office/bank/settings/rate-template/#example","title":"Example","text":"<pre><code>import { useSelector } from \"react-redux\";\nimport { Spin } from \"antd\";\nimport TemplatePrabhu from \"./TemplatePrabhu\";\nimport TemplateNimb from \"./TemplateNimb\";\nimport { SETTINGS_KEYS } from \"../constants\";\n\nconst templateMap = {\n  Template01: TemplatePrabhu,\n  Template02: TemplateNimb,\n};\n\nconst YourComponent = ({\n  currencyPairExchangeRateDataLoading,\n  currencyPairExchangeRateData,\n  pagination,\n  handleTableChange,\n}) =&gt; {\n  const { value } = useSelector((state) =&gt; state?.setting);\n\n  const selectedTemplateKey = value?.[SETTINGS_KEYS.RATE_TEMPLATE_TYPE];\n\n  // Show spinner while waiting for 'value' to be loaded\n  if (!value) {\n    return (\n      &lt;div style={{ textAlign: \"center\", padding: \"2rem\" }}&gt;\n        &lt;Spin size=\"large\" /&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  const SelectedTemplateComponent =\n    templateMap[selectedTemplateKey] || TemplatePrabhu;\n\n  return (\n    &lt;SelectedTemplateComponent\n      isLoading={currencyPairExchangeRateDataLoading}\n      data={currencyPairExchangeRateData}\n      pagination={pagination}\n      onChange={handleTableChange}\n    /&gt;\n  );\n};\n\nexport default YourComponent;\n</code></pre> <p>Explanation:</p> <ul> <li>The spinner (<code>&lt;Spin size=\"large\" /&gt;</code>) will be centered with some padding while the <code>value</code> from the Redux store is not yet available.</li> <li>Once <code>value</code> is ready, the appropriate template component is rendered.</li> </ul>"},{"location":"office/bank/settings/rate-template/#api","title":"API","text":"<p>You want to do the following:</p> <ul> <li>Use the Redux <code>value?.[SETTINGS_KEYS.RATE_TEMPLATE_TYPE]</code> to determine which template to use (<code>Template01</code>, <code>Template02</code>).</li> <li>Use that same value in the API call (<code>useGetCurrencyPairExchangeRateQuery</code>), but only if the key is valid (exists in <code>templateMap</code>).</li> <li>If it's not one of the valid keys (not in <code>templateMap</code>), pass <code>null</code> or skip sending it.</li> </ul> <pre><code>import { useSelector } from \"react-redux\";\nimport { Spin } from \"antd\";\nimport TemplatePrabhu from \"./TemplatePrabhu\";\nimport TemplateNimb from \"./TemplateNimb\";\nimport { SETTINGS_KEYS } from \"../constants\";\nimport { useGetCurrencyPairExchangeRateQuery } from \"../api\"; // Adjust as needed\n\nconst templateMap = {\n  Template01: TemplatePrabhu,\n  Template02: TemplateNimb,\n};\n\nconst YourComponent = ({ selectedDate, pagination, handleTableChange }) =&gt; {\n  const { value } = useSelector((state) =&gt; state?.setting);\n\n  const selectedTemplateKey = value?.[SETTINGS_KEYS.RATE_TEMPLATE_TYPE];\n\n  // \u2705 Only pass the template key if it's in the map, else pass null\n  const validTemplateKey = templateMap[selectedTemplateKey]\n    ? selectedTemplateKey\n    : null;\n\n  const {\n    data: currencyPairExchangeRateData,\n    isLoading: currencyPairExchangeRateDataLoading,\n    error: currencyPairExchangeRateDataError,\n    isFetching,\n  } = useGetCurrencyPairExchangeRateQuery(\n    {\n      date: selectedDate,\n      type: validTemplateKey, // \u2705 Only valid type sent\n    },\n    {\n      skip: !selectedDate,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  // Show spinner while settings are loading\n  if (!value) {\n    return (\n      &lt;div style={{ textAlign: \"center\", padding: \"2rem\" }}&gt;\n        &lt;Spin size=\"large\" tip=\"Loading template...\" /&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  const SelectedTemplateComponent =\n    templateMap[selectedTemplateKey] || TemplatePrabhu;\n\n  return (\n    &lt;SelectedTemplateComponent\n      isLoading={currencyPairExchangeRateDataLoading}\n      data={currencyPairExchangeRateData}\n      pagination={pagination}\n      onChange={handleTableChange}\n    /&gt;\n  );\n};\n\nexport default YourComponent;\n</code></pre> <p>\u2705 Summary of Logic</p> Step What Happens <code>selectedTemplateKey</code> Pulled from Redux setting <code>validTemplateKey</code> Sent to API only if it's a valid key in <code>templateMap</code> <code>type</code> param in query Will be <code>\"Template01\"</code>, <code>\"Template02\"</code>, or <code>null</code> Rendering Shows spinner until settings are ready; defaults to <code>TemplatePrabhu</code> if key invalid"},{"location":"office/bank/settings/rate-template/#final-optimized-version","title":"Final Optimized Version","text":"<p>\u2705 Only run the query if <code>selectedDate</code> is present AND <code>validTemplateKey</code> is valid. Otherwise, skip the query entirely to avoid unnecessary API calls.</p> <pre><code>import { useSelector } from \"react-redux\";\nimport { Spin } from \"antd\";\nimport TemplatePrabhu from \"./TemplatePrabhu\";\nimport TemplateNimb from \"./TemplateNimb\";\nimport { SETTINGS_KEYS } from \"../constants\";\nimport { useGetCurrencyPairExchangeRateQuery } from \"../api\"; // Adjust as needed\n\nconst templateMap = {\n  Template01: TemplatePrabhu,\n  Template02: TemplateNimb,\n};\n\nconst YourComponent = ({ selectedDate, pagination, handleTableChange }) =&gt; {\n  const { value } = useSelector((state) =&gt; state?.setting);\n\n  const selectedTemplateKey = value?.[SETTINGS_KEYS.RATE_TEMPLATE_TYPE];\n\n  // \u2705 Only use key if it's valid (i.e., exists in the templateMap)\n  const validTemplateKey = templateMap[selectedTemplateKey]\n    ? selectedTemplateKey\n    : null;\n\n  // \u2705 Query only if both selectedDate and validTemplateKey are available\n  const shouldFetch = Boolean(selectedDate &amp;&amp; validTemplateKey);\n\n  const {\n    data: currencyPairExchangeRateData,\n    isLoading: currencyPairExchangeRateDataLoading,\n    error: currencyPairExchangeRateDataError,\n    isFetching,\n  } = useGetCurrencyPairExchangeRateQuery(\n    {\n      date: selectedDate,\n      type: validTemplateKey,\n    },\n    {\n      skip: !shouldFetch,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  // Spinner while settings (value) not yet loaded\n  if (!value) {\n    return (\n      &lt;div style={{ textAlign: \"center\", padding: \"2rem\" }}&gt;\n        &lt;Spin size=\"large\" tip=\"Loading template...\" /&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // \u2705 Always default to TemplatePrabhu if the template key is invalid\n  const SelectedTemplateComponent =\n    templateMap[selectedTemplateKey] || TemplatePrabhu;\n\n  return (\n    &lt;SelectedTemplateComponent\n      isLoading={currencyPairExchangeRateDataLoading}\n      data={currencyPairExchangeRateData}\n      pagination={pagination}\n      onChange={handleTableChange}\n    /&gt;\n  );\n};\n\nexport default YourComponent;\n</code></pre> <p>\ud83d\udd0d Summary of Improvements:</p> Feature Behavior \u2705 Template validation Only valid keys from <code>templateMap</code> are used \u2705 Query control <code>skip</code> is true if <code>selectedDate</code> or template key is missing \u2705 UX Shows Ant Design spinner until <code>value</code> from Redux is available \u2705 Fallback Always uses <code>TemplatePrabhu</code> if key is invalid or missing <p>Let me know if you'd like to:</p> <ul> <li>Show an error message if <code>currencyPairExchangeRateDataError</code> exists</li> <li>Handle <code>isFetching</code> differently than <code>isLoading</code></li> <li>Use suspense with lazy loading templates (for performance)</li> </ul>"},{"location":"office/bank/settings/redux-localStorage-sync/","title":"Redux localStorageSync","text":""},{"location":"office/bank/settings/redux-localStorage-sync/#redux-local-storage-sync","title":"Redux Local Storage SYNC","text":"<pre><code>.concat(\n    createStateSyncMiddleware({\n        predicate: (action) =&gt;\n            action.type.startsWith(\"auth/\") ||\n            action.type.startsWith(\"profile/\") ||\n            // ADD THIS settting\n            action.type.startsWith(\"setting/\") ||\n            //\n            action.type.startsWith(\"idle/\"),\n    }),\n)\n</code></pre> <p>it changes the value of the redux <code>localStorage</code> in the component but why is not showing in the <code>localStorage</code>?</p>"},{"location":"office/bank/settings/redux-localStorage-sync/#full-code","title":"Full Code","text":""},{"location":"office/bank/settings/redux-localStorage-sync/#storejs","title":"<code>store.js</code>","text":"<pre><code>import {\n  createStateSyncMiddleware,\n  initMessageListener,\n  withReduxStateSync,\n} from \"redux-state-sync\";\n\nconst persistedAuthReducer = persistReducer(persistConfig, rootReducer);\nconst syncedReducer = withReduxStateSync(persistedAuthReducer);\n\nexport const store = configureStore({\n  reducer: syncedReducer,\n\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          FLUSH,\n          REHYDRATE,\n          PAUSE,\n          PERSIST,\n          PURGE,\n          REGISTER,\n          \"usersApi/executeMutation/fulfilled\",\n        ],\n        ignoredPaths: [\"usersApi.mutations\"],\n      },\n    })\n      .concat(\n        createStateSyncMiddleware({\n          predicate: (action) =&gt;\n            action.type.startsWith(\"auth/\") ||\n            action.type.startsWith(\"profile/\") ||\n            action.type.startsWith(\"idle/\"),\n        })\n      )\n      .concat(loggerMiddleware),\n});\n</code></pre>"},{"location":"office/bank/settings/research/","title":"Research","text":""},{"location":"office/bank/settings/research/#research","title":"Research","text":"<p>Correct Way to Enable Polling in RTK Query</p> <p>RTK Query supports polling out of the box. Here's the proper way to set it up:</p> Example<pre><code>// In your service file\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const settingsApi = createApi({\n  reducerPath: \"settingsApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api/\" }),\n  endpoints: (builder) =&gt; ({\n    getSettings: builder.query({\n      query: () =&gt; \"settings\",\n    }),\n  }),\n});\n\nexport const { useGetSettingsQuery } = settingsApi;\n</code></pre> <p>In your component:</p> <pre><code>const { data, isLoading, isError } = useGetSettingsQuery(undefined, {\n  pollingInterval: 10000, // 10 seconds\n});\n</code></pre>"},{"location":"office/bank/settings/research/#rtk-query-argument-behavior","title":"\ud83d\udd0d RTK Query Argument Behavior","text":"<p>In RTK Query, the first parameter of the hook like useGetSettingsQuery(arg) is the argument passed to your endpoint's query function.</p> <pre><code>useGetSettingsQuery(undefined, { pollingInterval: 10000 }); // \u2705\nuseGetSettingsQuery({ pollingInterval: 10000 }); // \u274c this passes pollingInterval as the arg!\n</code></pre> <p>\u26a0\ufe0f Common Mistake That Breaks Polling</p> <p>This will break the query:</p> <pre><code>useGetSettingsQuery({ pollingInterval: 10000 }); // \u274c WRONG\n</code></pre> <p>Because you're passing an object as the <code>arg</code>, not the options. That will make RTK Query think you're passing a real query argument (which might not make sense for the endpoint), and the actual polling options are ignored.</p> <p>\u2705 Correct Usage When No Args Are Needed</p> <pre><code>useGetSettingsQuery(undefined, {\n  pollingInterval: 10000,\n});\n\n// or\n\nuseGetSettingsQuery(null, {\n  pollingInterval: 10000,\n});\n\n// or\n\nuseGetSettingsQuery(void 0, {\n  pollingInterval: 10000,\n});\n</code></pre> <p>If the query doesn't use input.</p> <p>Sumary</p> Parameter Position Type Role <code>args</code> First Any Input to your query (e.g. ID, filters) <code>options</code> Second Object Config <p>\u2705 TL;DR</p> <p>If your query expects no argument, then:</p> <ul> <li><code>useGetSettingsQuery()</code> \u2705</li> <li><code>useGetSettingsQuery(undefined, { pollingInterval: 10000 })</code> \u2705</li> <li><code>useGetSettingsQuery({ pollingInterval: 10000 })</code> \u274c (this is a common mistake)</li> </ul> <p>Always make sure the first parameter is the query arg, second is the options object.</p>"},{"location":"office/bank/settings/research/#rtk-query-options-cheat-sheet","title":"\ud83e\uddfe RTK Query <code>options</code> Cheat Sheet","text":""},{"location":"office/bank/settings/research/#for-usequery-like-usegetsettingsquery","title":"\ud83d\udd39 For <code>useQuery</code> (like <code>useGetSettingsQuery()</code>)","text":"Option Type Description <code>skip</code> boolean If <code>true</code>, disables the query entirely (no fetch, no cache update). <code>pollingInterval</code> number Interval in ms to re-fetch data periodically. <code>0</code> disables polling. <code>refetchOnMountOrArgChange</code> boolean If <code>true</code>, re-fetches data when component mounts or <code>args</code> change. <code>refetchOnFocus</code> boolean If <code>true</code>, re-fetches when window/tab regains focus. <code>refetchOnReconnect</code> boolean If <code>true</code>, re-fetches when the device comes back online. <code>selectFromResult</code> function Lets you pick part of the query result to reduce rerenders. <code>forceRefetch</code> boolean Forces the request to bypass the cache and re-fetch from the server."},{"location":"office/bank/settings/research/#for-usemutation-like-useupdatesettingsmutation","title":"\ud83d\udd38 For <code>useMutation</code> (like <code>useUpdateSettingsMutation()</code>)","text":"Option Type Description <code>selectFromResult</code> function Same as in queries; lets you customize what the hook returns. <p>\ud83d\udd39 What is args?</p> <ul> <li><code>args</code> (short for arguments) is the first parameter you pass to a query or mutation hook.</li> <li>It is passed to the <code>query</code> or <code>mutation</code> function you defined in your API slice.</li> <li>It determines what data to fetch or mutate.</li> </ul> <ol> <li>When you fetch something by ID:</li> </ol> <pre><code>// API slice\ngetUser: builder.query({\n  query: (id) =&gt; `users/${id}`,\n});\n\n// Usage\nuseGetUserQuery(123); // 123 is the \"args\"\n</code></pre> <ol> <li>When no input is needed:</li> </ol> <pre><code>getSettings: builder.query({\n  query: () =&gt; \"settings\",\n});\n\n// Usage\nuseGetSettingsQuery(); // args is undefined\nuseGetSettingsQuery(undefined); // same\n</code></pre> <p>What is options?</p> <ul> <li><code>options</code> is the second parameter to the hook.</li> <li>It configures how the hook behaves \u2014 it does not affect the query string or data sent to the server.</li> <li> <p>It includes things like:</p> <ul> <li><code>pollingInterval</code></li> <li><code>refetchOnMountOrArgChange</code></li> <li><code>skip</code></li> <li><code>refetchOnFocus</code></li> <li><code>refetchOnReconnect</code></li> </ul> </li> </ul> <pre><code>useGetSettingsQuery(undefined, {\n  pollingInterval: 10000,\n  refetchOnMountOrArgChange: true,\n});\n</code></pre> <p>\u2705 Order and Signature</p> <p>All RTK Query hook functions follow this signature:</p> <pre><code>useQueryHook(args?, options?)\n</code></pre> Parameter Position Required? Description <code>args</code> First optional Input used by the endpoint's query fn <code>options</code> Second optional Controls hook behavior (polling, etc.) <p>\u26a0\ufe0f Incorrect Order = Bugs</p> <p>If you pass <code>options</code> in the first position by mistake, it will be treated as <code>args</code>, which breaks your query logic.</p> <p>\u274c Wrong</p> <pre><code>useGetSettingsQuery({ pollingInterval: 10000 }); // options passed as args\n</code></pre> <p>\u2705 Correct</p> <pre><code>useGetSettingsQuery(undefined, { pollingInterval: 10000 }); // right order\n</code></pre> <p>\ud83e\udde0 Summary</p> Term Meaning Passed To Affects <code>args</code> Input for the query/mutation Passed as 1st param to hook API endpoint URL/data <code>options</code> Hook behavior/settings Passed as 2nd param to hook Hook behavior (polling, etc.)"},{"location":"office/bank/settings/research/#callbacks-vs-promises-vs-asyncawait-detailed-comparison","title":"Callbacks vs. Promises vs. Async/Await: Detailed Comparison","text":""},{"location":"office/bank/settings/using-global-settings/","title":"Usage Settings Keys","text":""},{"location":"office/bank/settings/using-global-settings/#usage-global-settings","title":"Usage Global Settings","text":"Previous Changes in Forex Form ForexForm.js<pre><code>import { useSelector } from \"react-redux\";\n\nconst { value } = useSelector((state) =&gt; state?.setting);\n\nconst isVerifierNeeded = value[\"isVerifierNeeded\"] || \"false\";\n\nconst onFinishSubmit = async (values) =&gt; {\n    //   console.log(\"isVerifierNeeded: \", isVerifierNeeded, typeof isVerifierNeeded);\n\n    if (isVerifierNeeded === \"false\") {\n        delete submitValues.dealVerifiers;\n    }\n};\n\n// RENDERING LOGIC\n{isVerifierNeeded === \"true\" &amp;&amp; (\n    &lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n    &lt;MultiSelectField\n        label={\n        &lt;&gt;\n            Verifier{\" \"}\n            &lt;/&gt;\n        }\n    )\n}\n</code></pre>"},{"location":"office/bank/settings/using-global-settings/#constants","title":"Constants","text":"constants.js<pre><code>export const MODES = {\n  ADD: \"add\",\n  EDIT: \"edit\",\n  VIEW: \"view\",\n  CREATE: \"create\",\n  DELETE: \"delete\",\n};\n\nexport const BOOLEAN_STRINGS = {\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\nexport const BOOLEAN_VALUE = {\n  TRUE: true,\n  FALSE: false,\n};\n\nexport const SETTINGS_KEYS = {\n  IS_VERIFIER_NEEDED: \"IsVerifierNeeded\",\n  IS_AUTODEALAPPROVER_ENABLE: \"IsAutoDealApproverEnable\",\n  MMD_CREATE_AFTER_EXCEEDING_COUNTERPARTY_LIMIT:\n    \"MMD.CreateAfterExceedingCounterpartyLimit\",\n};\n\nexport const SETTINGS_TYPE = {\n  _string: 0,\n  _int: 1,\n  _float: 2,\n  _double: 3,\n  _decimal: 4,\n  _bool: 5,\n  _long: 6,\n  _stringArray: 7,\n  _intArray: 8,\n  _floatArray: 9,\n  _doubleArray: 10,\n  _decimalArray: 11,\n  _boolArray: 12,\n  _longArray: 13,\n  _password: 14,\n};\n</code></pre>"},{"location":"office/bank/settings/using-global-settings/#is_verifier_needed-settings-keys-usage","title":"<code>IS_VERIFIER_NEEDED</code> SETTINGS Keys USAGE","text":"<pre><code>const { value } = useSelector((state) =&gt; state?.setting);\n\nconst isMMDCreateAfterExceedingCounterpartyLimit =\n  value[\"MMD.CreateAfterExceedingCounterpartyLimit\"] || \"false\";\n</code></pre> updated<pre><code>// 1.\nimport {\n  BOOLEAN_STRINGS,\n  SETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\n// 2.\nconst { value } = useSelector((state) =&gt; state?.setting);\nconst isVerifierNeeded =\n  value[SETTINGS_KEYS.IS_VERIFIER_NEEDED] || BOOLEAN_STRINGS.FALSE;\n\n// 3.\nif (isVerifierNeeded === BOOLEAN_STRINGS.FALSE) {\n  delete submitValues.dealVerifiers;\n}\n\n// 4.\n{isVerifierNeeded === BOOLEAN_STRINGS.TRUE &amp;&amp; (\n    &lt;Col xs={24} sm={24} md={24} lg={24} xl={24}&gt;\n    &lt;MultiSelectField/&gt;\n    )\n}\n</code></pre>"},{"location":"office/bank/settings/using-global-settings/#is_autodealapprover_enable-settings-keys-usage","title":"<code>IS_AUTODEALAPPROVER_ENABLE</code> SETTINGS Keys USAGE","text":""},{"location":"office/bank/settings/using-global-settings/#forexformjsx-form","title":"<code>ForexForm.jsx</code> Form","text":"ForexForm.jsx<pre><code>import {\n  BOOLEAN_VALUE,\n  BOOLEAN_STRINGS,\n  SETTINGS_KEYS,\n} from \"@features/settings/utils/constants\";\n\nconst isSkipVerifierApprover =\n  value[SETTINGS_KEYS.IS_AUTODEALAPPROVER_ENABLE] === BOOLEAN_STRINGS.TRUE\n    ? BOOLEAN_VALUE.TRUE\n    : BOOLEAN_VALUE.FALSE;\n\n// SKIP Verifier, Approvers\n// const [isSkipVerifierApprover, setIsSkipVerifierApprover] = useState(false);\n\n// useEffect(() =&gt; {\n//   if (!isEmpty(appSystemSettingsData)) {\n//     const isEnable =\n//       appSystemSettingsData.find(\n//         (setting) =&gt; setting.keyName === \"IsAutoDealApproverEnable\",\n//       )?.value === \"true\";\n//     setIsSkipVerifierApprover(isEnable);\n//   }\n// }, [appSystemSettingsData]);\n</code></pre>"},{"location":"office/bank/settings/using-global-settings/#mmd-tabindexjsx-form","title":"MMD <code>TabIndex.jsx</code> Form","text":"TabIndex.jsx<pre><code>export default function MMDTabIndex() {\n  const { appUserId: ourDealerId } = useSelector((state) =&gt; state?.auth);\n  const { value } = useSelector((state) =&gt; state?.setting);\n\n  // const [isSkipVerifierApprover, setIsSkipVerifierApprover] = useState(false);\n  const isSkipVerifierApprover =\n    value[SETTINGS_KEYS.IS_AUTODEALAPPROVER_ENABLE] === BOOLEAN_STRINGS.TRUE\n      ? BOOLEAN_VALUE.TRUE\n      : BOOLEAN_VALUE.FALSE;\n\n  // Effect\n  const debouncedTriggerGetApprovalPerson = useCallback(\n    debounce((payload) =&gt; {\n      triggerGetApprovalPerson(payload);\n      // UPDATED: Issue Loading in the Loader\n      setIsDebouncingStatus(false);\n    }, 3000),\n    [triggerGetApprovalPerson]\n  );\n\n  useEffect(() =&gt; {\n    if (\n      // !isSkipVerifierApprover &amp;&amp;\n      totalAccumulateAmountFreshWatch &amp;&amp;\n      dealCurrencyIdFreshWatch\n    ) {\n      const amount = processAmount(totalAccumulateAmountFreshWatch);\n      logger.info({ msg: \"Called\" });\n      if (amount !== null) {\n        setIsDebouncingStatus(true);\n        debouncedTriggerGetApprovalPerson({\n          sellingAmount: amount,\n          sellingCurrencyId: dealCurrencyIdFreshWatch,\n        });\n      }\n    }\n  }, [\n    totalAccumulateAmountFreshWatch,\n    debouncedTriggerGetApprovalPerson,\n    dealCurrencyIdFreshWatch,\n    // isSkipVerifierApprover,\n  ]);\n\n  useEffect(() =&gt; {\n    if (\n      // !isSkipVerifierApprover &amp;&amp;\n      totalAccumulateAmountRollWatch &amp;&amp;\n      dealCurrencyIdRollWatch\n    ) {\n      const amount = processAmount(totalAccumulateAmountRollWatch);\n\n      if (amount !== null) {\n        setIsDebouncingStatus(true);\n        debouncedTriggerGetApprovalPerson({\n          sellingAmount: amount,\n          sellingCurrencyId: dealCurrencyIdRollWatch?.value,\n        });\n      }\n    }\n  }, [\n    totalAccumulateAmountRollWatch,\n    debouncedTriggerGetApprovalPerson,\n    dealCurrencyIdRollWatch,\n    // isSkipVerifierApprover,\n  ]);\n}\n</code></pre>"},{"location":"office/bank/utils/forex-label/","title":"Forex Label Util","text":""},{"location":"office/bank/utils/forex-label/#forex-label","title":"Forex Label","text":""},{"location":"office/bank/utils/forex-label/#js","title":"JS","text":"<pre><code>import { FOREX_STEPS } from \"@shared/utils/forexSteps\";\n\n/**\n *  USE this if you want to use the FOREX_STEPS\n */\n// export function getForexStepLabel(status) {\n//   return (\n//     Object.keys(FOREX_STEPS).find((key) =&gt; FOREX_STEPS[key] === status) ||\n//     \"UNKNOWN\"\n//   );\n// }\n\n/* CUSTOM STATUS LABEL, Copied form FOREX_STEPS */\nconst STATUS_LABELS = {\n  0: \"Not Started\",\n  1: \"Requested\",\n  2: \"Mid Office\",\n  3: \"Mid Office\",\n  4: \"Verifier\",\n  5: \"Verified\",\n  6: \"Approver\",\n  7: \"Approved\",\n  8: \"On Hold\",\n  9: \"Completed\",\n  10: \"Cancelled\",\n  11: \"Back Office\",\n};\n\n/**\n * Get a human-readable Forex status label from its numeric value.\n */\n\nexport function getForexStepLabel(statusCode) {\n  return STATUS_LABELS[statusCode] || \"\";\n}\n</code></pre>"},{"location":"office/bank/utils/forex-label/#component","title":"Component","text":"<pre><code>import { getForexStepLabel } from \"@shared/utils/getForexStepLabel\";\n\nconst baseColumns = [\n  {\n    title: \"S/N\",\n    key: \"serialNumber\",\n    render: (_, __, index) =&gt; {\n      return &lt;span&gt;{currentPage * 10 - 10 + (index + 1)}&lt;/span&gt;;\n    },\n  },\n  {\n    title: \"Status\",\n    dataIndex: \"currentStatus\",\n    key: \"currentStatus\",\n    render: (statusCode) =&gt; {\n      return &lt;span&gt;{getForexStepLabel(statusCode)}&lt;/span&gt;;\n    },\n  },\n];\n</code></pre>"},{"location":"office/codesnapshot/antd-drawer/","title":"antd drawer","text":"<p>Certainly! You can create a drawer for adding todos, similar to how the <code>SearchModal</code> was implemented. Using an Ant Design <code>Drawer</code> provides a more compact and visually distinct way to present forms compared to a modal.</p> <p>Here\u2019s how you can implement an <code>AddTodoDrawer</code> component that allows users to add a todo.</p> Step 1Step 2 <p>Step 1: Create the Add Todo Drawer Component</p> <p>Create a new file called <code>AddTodoDrawer.js</code>:</p> <pre><code>// AddTodoDrawer.js\nimport React from \"react\";\nimport { Drawer, Form, Input, Button } from \"antd\";\n\nconst AddTodoDrawer = ({ visible, onClose, onFinish }) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            title=\"Add Todo\"\n            placement=\"right\"\n            onClose={onClose}\n            visible={visible}\n            footer={null}\n        &gt;\n            &lt;Form form={form} onFinish={onFinish}&gt;\n                &lt;Form.Item\n                    label=\"Todo Title\"\n                    name=\"title\"\n                    rules={[{ required: true, message: \"Please input the todo title!\" }]}\n                &gt;\n                    &lt;Input /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Add Todo\n                    &lt;/Button&gt;\n                    &lt;Button style={{ marginLeft: 8 }} onClick={onClose}&gt;\n                        Cancel\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Drawer&gt;\n    );\n};\n\nexport default AddTodoDrawer;\n</code></pre> <p>Step 2: Update the Dashboard Component</p> <p>Now, update your <code>DashboardTodo</code> component to use the new <code>AddTodoDrawer</code>:</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { Button } from \"antd\";\nimport ResuableCard from \"../../components/Card/ResuableCard\";\nimport { PlusCircleTwoTone, CopyTwoTone, SearchOutlined } from \"@ant-design/icons\";\nimport SearchModal from \"../../components/SearchModal\"; // Assuming you have this\nimport AddTodoDrawer from \"../../components/AddTodoDrawer\"; // Import the AddTodoDrawer\n\nconst DashboardTodo = () =&gt; {\n    const dispatch = useDispatch();\n    const { todos, hasTodos, loading, error } = useSelector((state) =&gt; state.dashboardTodo);\n\n    const [isAddDrawerVisible, setIsAddDrawerVisible] = useState(false);\n    const [isSearchModalVisible, setIsSearchModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        const source = axios.CancelToken.source();\n        dispatch(dashboardTodoService(source.token));\n\n        return () =&gt; {\n            source.cancel();\n        };\n    }, [dispatch]);\n\n    const handleTodoAdd = () =&gt; {\n        setIsAddDrawerVisible(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        console.log(\"New Todo:\", values);\n        // Here you would typically dispatch an action to add the todo\n        // dispatch(addTodoAction(values));\n        setIsAddDrawerVisible(false);\n    };\n\n    return (\n        &lt;&gt;\n            &lt;ResuableCard\n                title=\"Todo\"\n                content={&lt;p&gt;Your todo content here.&lt;/p&gt;} // Adjust as necessary\n                extra={[\n                    &lt;SearchOutlined key=\"search\" onClick={() =&gt; setIsSearchModalVisible(true)} /&gt;,\n                    &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n                ]}\n                icon={\n                    &lt;Link to=\"/todo\"&gt;\n                        &lt;CopyTwoTone key=\"navigate\" /&gt;\n                    &lt;/Link&gt;\n                }\n            /&gt;\n\n            {/* Add Todo Drawer */}\n            &lt;AddTodoDrawer\n                visible={isAddDrawerVisible}\n                onClose={() =&gt; setIsAddDrawerVisible(false)}\n                onFinish={onFinish}\n            /&gt;\n\n            {/* Search Modal for Todos */}\n            &lt;SearchModal\n                open={isSearchModalVisible}\n                onClose={() =&gt; setIsSearchModalVisible(false)}\n                todos={todos}\n            /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <p>Explanation</p> <ol> <li> <p>AddTodoDrawer Component:</p> <ul> <li>This component uses an Ant Design <code>Drawer</code> to present the form for adding a todo.</li> <li>It accepts <code>visible</code>, <code>onClose</code>, and <code>onFinish</code> props.</li> <li>The form inside the drawer includes a title input and buttons for submission and cancellation.</li> </ul> </li> <li> <p>DashboardTodo Component:</p> <ul> <li>The <code>isAddDrawerVisible</code> state controls the visibility of the <code>AddTodoDrawer</code>.</li> <li>The <code>handleTodoAdd</code> function opens the drawer.</li> <li>The <code>onFinish</code> function handles form submission and closes the drawer after the todo is added.</li> </ul> </li> </ol> <p>Conclusion</p> <p>Using a <code>Drawer</code> for adding todos provides a sleek, modern interface that doesn't block the main content, making it easier for users to interact with your application. You can customize the styles and functionality further based on your requirements.</p>"},{"location":"office/codesnapshot/antd-drawer/#question","title":"Question","text":""},{"location":"office/codesnapshot/antd-drawer/#q1","title":"Q.1:","text":"<pre><code>why AddTodoDrawer has defined form in in it and  SearchModal defined form in the parent component. and why AddTodoDrawer use onFinish and SearchModal use onOk\n</code></pre> <p>The distinction between how the AddTodoDrawer and SearchModal manage their forms and handle events is mainly about their intended use cases and design choices. Here\u2019s a breakdown of why they\u2019re structured differently:</p> 1. Form Management2. Event Naming <p><code>AddTodoDrawer</code>:</p> <ul> <li>Internal Form Management: The <code>AddTodoDrawer</code> has its own form defined within it. This design is appropriate because the drawer is responsible for collecting new todo data (title, etc.) and directly handling that input.</li> <li>Self-Contained Logic: It encapsulates all the logic needed for adding a todo, including form validation, submission, and state management related to that specific action.</li> </ul> <p><code>SearchModal</code>:</p> <ul> <li>External Form Management: In contrast, the <code>SearchModal</code> is primarily used for searching existing todos, and it might not require complex form handling like adding a new todo.</li> <li>Event Propagation: It\u2019s designed to communicate with the parent component rather than handle form submissions itself. This allows the parent to maintain control over the todo list and how search results are managed.</li> </ul> <p><code>onFinish (AddTodoDrawer)</code>:</p> <ul> <li>The onFinish prop is used to signify the completion of the form submission process, which is a standard naming convention in Ant Design. It indicates that the form is successfully validated and ready to submit its data.</li> </ul> <p><code>onOk (SearchModal)</code>:</p> <ul> <li>The onOk prop is often used in modals to signify an affirmative action (like \"Okay\" or \"Confirm\"). This makes sense for a modal that might have multiple actions, and onOk implies a specific action taken in response to user input.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#summary-of-choices","title":"Summary of Choices","text":"<ol> <li> <p>Purpose-Driven Design:</p> <ul> <li>The AddTodoDrawer is more complex in terms of data handling, requiring its own state management. Therefore, it includes the form internally.</li> <li>The SearchModal, on the other hand, is more about interaction with existing data rather than managing new data input.</li> </ul> </li> <li> <p>Event Handling:</p> <ul> <li>Different naming conventions (<code>onFinish</code> for form submissions and <code>onOk</code> for confirming actions) reflect their distinct roles within the application. Each naming choice aims to improve clarity and understanding of the component\u2019s purpose.</li> </ul> </li> </ol>"},{"location":"office/codesnapshot/antd-drawer/#conclusion","title":"Conclusion","text":"<p>These design decisions reflect typical best practices in React component architecture, emphasizing separation of concerns and clear communication between components. By organizing components in this way, you can maintain a more scalable and understandable codebase.</p>"},{"location":"office/codesnapshot/antd-drawer/#q2","title":"Q.2:","text":"<p><code>what is the best choicce and why</code></p> <p>The best choice between using internal form management versus relying on the parent component to manage state and handle events largely depends on the specific use case and desired functionality of your application. Here\u2019s a breakdown of considerations for each approach:</p> When to Use Internal Form Management (e.g., in <code>AddTodoDrawer</code>) <p>Pros:</p> <ul> <li>Encapsulation: The component manages its own state, making it self-contained. This is useful for components that are highly interactive or need complex validation.</li> <li>Simpler API: The component exposes a straightforward API (like <code>onFinish</code>) for handling form submissions, reducing the need for the parent component to manage form state.</li> <li>Reusability: The component can be reused elsewhere without relying on parent components to manage its internal state.</li> </ul> <p>Cons:</p> <ul> <li>Less Control: The parent component has less control over the form state and submission process. If you need to coordinate actions between multiple components, it can become cumbersome.</li> <li>Complexity in State Management: If the form\u2019s state needs to interact with other parts of the application, this encapsulation can lead to additional complexity in state management.</li> </ul> When to Use External Form Management (e.g., in <code>SearchModal</code>) <p>Pros:</p> <ul> <li>Centralized Control: The parent component has full control over the data and can manage state changes, making it easier to coordinate between multiple components.</li> <li>Simpler Components: Individual components can remain simpler and focused on their primary purpose without managing additional state.</li> <li>Easier Data Handling: If the search results affect other components, it\u2019s easier to update state centrally.</li> </ul> <p>Cons:</p> <ul> <li>Tight Coupling: The modal or drawer becomes dependent on the parent component\u2019s state, making it less reusable in different contexts.</li> <li>More Boilerplate: You may need to pass more props and handlers around, which can lead to more boilerplate code.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#best-choice","title":"Best Choice","text":"<p>Use Internal Form Management when:</p> <ul> <li>The component needs to handle its own complex form state and validations.</li> <li>The component is intended to be reusable in multiple contexts without requiring external state management.</li> </ul> <p>Use External Form Management when:</p> <ul> <li>You need centralized control over the data or need to share data between multiple components.</li> <li>The form is relatively simple and can be effectively managed by the parent.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#conclusion_1","title":"Conclusion","text":"<p>In many cases, the best choice is context-dependent. For example, a complex form for adding new data (like the <code>AddTodoDrawer</code>) is best handled internally, while a simpler search functionality (like the <code>SearchModal</code>) can benefit from external management.</p> <p>Ultimately, the choice should align with the principles of maintainability, scalability, and clarity in your codebase. Strive for a balance that allows components to be both reusable and maintainable while minimizing complexity in data flow.</p>"},{"location":"office/codesnapshot/antd-modal/","title":"antd modal","text":"<p>Creating a reusable modal component that can dynamically accept forms and their functionalities is a great approach to enhance code maintainability and reusability. Here\u2019s a standard practice to achieve this using Ant Design, React, and functional components.</p> Step 1Step 2Explanation <p>Create a Reusable Modal Component</p> <p>You can create a <code>ReusableModal</code> component that accepts props for the title, visibility, form components, and submission handling.</p> <pre><code>// ReusableModal.js\nimport React from 'react';\nimport { Modal } from 'antd';\n\nconst ReusableModal = ({ visible, title, onCancel, onOk, children }) =&gt; {\n    return (\n        &lt;Modal\n            title={title}\n            visible={visible}\n            onCancel={onCancel}\n            footer={null} // Control footer visibility from the parent\n        &gt;\n            {children}\n            &lt;div style={{ display: 'flex', justifyContent: 'flex-end' }}&gt;\n                &lt;button onClick={onCancel} style={{ marginRight: '8px' }}&gt;\n                    Cancel\n                &lt;/button&gt;\n                &lt;button onClick={onOk} type=\"primary\"&gt;\n                    Submit\n                &lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/Modal&gt;\n    );\n};\n\nexport default ReusableModal;\n</code></pre> <p>Use the Reusable Modal in Your Component</p> <p>You can then use this <code>ReusableModal</code> in your <code>DashboardTodo</code> component, injecting the form dynamically.</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { Form, Input, Button } from \"antd\";\nimport { dashboardTodoService } from \"../../redux/features/dashboard/services\";\nimport ErrorMessage from \"../../components/ImageGallery/ErrorMessage\";\nimport LoadingSpinner from \"../../components/ImageGallery/LoadingSpinner\";\nimport ReusableModal from \"../../components/ReusableModal\";\nimport ResuableCard from \"../../components/Card/ResuableCard\";\nimport { DownloadOutlined, PlusCircleTwoTone, CopyTwoTone } from \"@ant-design/icons\";\n\nconst DashboardTodo = () =&gt; {\nconst dispatch = useDispatch();\nconst { todos, hasTodos, loading, error } = useSelector((state) =&gt; state.dashboardTodo);\n\nconst [isModalVisible, setIsModalVisible] = useState(false);\nconst [form] = Form.useForm();\n\nuseEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n    dispatch(dashboardTodoService(source.token));\n\n    return () =&gt; {\n        source.cancel();\n    };\n}, [dispatch]);\n\nif (loading) {\n    return &lt;LoadingSpinner /&gt;;\n}\n\nif (error) {\n    return &lt;ErrorMessage message={error} /&gt;;\n}\n\nif (!hasTodos) {\n    return &lt;div&gt;No Todos Available&lt;/div&gt;;\n}\n\nconst handleAdd = () =&gt; {\n    setIsModalVisible(true);\n};\n\nconst handleOk = () =&gt; {\n    form\n    .validateFields()\n    .then(values =&gt; {\n        console.log(\"New Todo:\", values);\n        // Dispatch addTodo action here\n\n        // Close the modal\n        setIsModalVisible(false);\n        form.resetFields();\n    })\n    .catch(info =&gt; {\n        console.log('Validation Failed:', info);\n    });\n};\n\n    return (\n        &lt;&gt;\n            &lt;ResuableCard\n                title=\"Todo List\"\n                content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n                extra={[\n                    &lt;DownloadOutlined key=\"download\" /&gt;,\n                    &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                ]}\n                icon={&lt;CopyTwoTone /&gt;}\n            /&gt;\n\n            &lt;ReusableModal\n                visible={isModalVisible}\n                title=\"Add Todo\"\n                onCancel={() =&gt; setIsModalVisible(false)}\n                onOk={handleOk}\n            &gt;\n                &lt;Form form={form}&gt;\n                    &lt;Form.Item\n                        label=\"Todo Title\"\n                        name=\"title\"\n                        rules={[{ required: true, message: 'Please input the todo title!' }]}\n                    &gt;\n                        &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/ReusableModal&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <ol> <li> <p>ReusableModal Component:</p> <ul> <li>The <code>ReusableModal</code> accepts <code>visible</code>, <code>title</code>, <code>onCancel</code>, <code>onOk</code>, and <code>children</code> props.</li> <li>This allows the parent component to control the modal's visibility and actions while allowing dynamic content via <code>children</code>.</li> </ul> </li> <li> <p>Using the Modal:</p> <ul> <li>In the <code>DashboardTodo</code> component, the modal is displayed when the \"Add\" button is clicked.</li> <li>The form inside the modal is defined using Ant Design\u2019s <code>Form</code> component.</li> </ul> </li> <li> <p>Form Submission:</p> <ul> <li>The <code>handleOk</code> function validates the form fields. Upon successful validation, it logs the new todo and resets the form fields.</li> </ul> </li> </ol>"},{"location":"office/codesnapshot/antd-modal/#standard-practices","title":"Standard Practices","text":"<ul> <li>Separation of Concerns: Keeping the modal and the form separate promotes reusability. The modal can be reused across different components with different forms.</li> <li>Dynamic Content: By passing <code>children</code> to the modal, you can inject any form or content as needed.</li> <li>Controlled Components: Using Ant Design's <code>Form</code> ensures validation and state management are handled effectively.</li> <li>Clear Functionality: Define clear functions for handling modal visibility and form submission, making it easy to understand and maintain.</li> </ul>"},{"location":"office/codesnapshot/antd-modal/#further-enhancements","title":"Further Enhancements","text":"<ul> <li>Custom Footer: Allow passing a custom footer if you need different buttons or actions.</li> <li>Error Handling: Implement better error handling and user feedback.</li> <li>Styling: Enhance the modal\u2019s styling as needed to fit your application\u2019s design.</li> </ul>"},{"location":"office/codesnapshot/antd-modal/#react-router-dom","title":"react-router-dom","text":"<p>To navigate from the <code>/dashboard</code> route to the <code>/todo</code> route when clicking an icon, you can use the <code>useHistory</code> hook from react-router-dom (for versions 5 and below) or <code>useNavigate</code> from react-router-dom (for version 6 and above). Here\u2019s how to implement this in your application.</p> Step 1Step 2Step 3 <p>Step 1: Install react-router-dom</p> <p>If you haven't already, ensure that react-router-dom is installed in your project:</p> <pre><code>npm install react-router-dom\n</code></pre> <p>Step 2: Set Up Routing in Your Application</p> <p>Make sure your main application file has routing set up. Here's a basic example using React Router:</p> <pre><code>// App.js or your main component\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Todo from './Todo'; // Your Todo component\n\nconst App = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;Switch&gt;\n                &lt;Route path=\"/dashboard\" component={Dashboard} /&gt;\n                &lt;Route path=\"/todo\" component={Todo} /&gt;\n            &lt;/Switch&gt;\n        &lt;/Router&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>Step 3: Modify the Icon Click Handler</p> <p>Now, in your <code>DashboardTodo</code> component, modify the icon's click handler to navigate to the <code>/todo</code> route.</p> For React Router v6:For React Router v5:Explanation <pre><code>import { useNavigate } from \"react-router-dom\";\n\n// Inside your DashboardTodo component\nconst DashboardTodo = () =&gt; {\n    const navigate = useNavigate();\n\n    const handleNavigateToTodo = () =&gt; {\n        navigate(\"/todo\"); // Navigate to the /todo route\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo List\"\n            content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n            extra={[\n                &lt;DownloadOutlined key=\"download\" /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;, // Navigate on click\n            ]}\n            icon={&lt;CopyTwoTone /&gt;}\n        /&gt;\n        {/* ... other components */}\n        &lt;/&gt;\n    );\n};\n</code></pre> <p>If you're using version 5, you would do something like this:</p> <pre><code>import { useHistory } from \"react-router-dom\";\n\n// Inside your DashboardTodo component\nconst DashboardTodo = () =&gt; {\n    const history = useHistory();\n\n    const handleNavigateToTodo = () =&gt; {\n        history.push(\"/todo\"); // Navigate to the /todo route\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo List\"\n            content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n            extra={[\n                &lt;DownloadOutlined key=\"download\" /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;, // Navigate on click\n            ]}\n            icon={&lt;CopyTwoTone /&gt;}\n        /&gt;\n        {/* ... other components */}\n        &lt;/&gt;\n    );\n};\n</code></pre> <ol> <li> <p>Navigation Hook:</p> <ul> <li>Use <code>useNavigate</code> (v6) or <code>useHistory</code> (v5) to programmatically navigate to different routes.</li> </ul> </li> <li> <p>Click Handler:</p> <ul> <li>The <code>handleNavigateToTodo</code> function is called when the icon is clicked, redirecting the user to the <code>/todo</code> route.</li> </ul> </li> <li> <p>Icon Integration:</p> <ul> <li>Attach the click handler to the desired icon in the <code>extra</code> prop of your <code>ReusableCard</code>.</li> </ul> </li> </ol> <p>This setup will allow you to navigate seamlessly between the dashboard and todo components when the respective icons are clicked.</p>"},{"location":"office/codesnapshot/antd-modal/#so-when-to-use-and-historypush","title":"so when to use  and history.push.","text":"<p>Using <code>&lt;Link&gt;</code> and <code>history.push</code> (or <code>navigate</code> in React Router v6) serves similar purposes\u2014navigating between routes in a React application\u2014but they are suited for different scenarios. Here\u2019s a breakdown of when to use each:</p> When to Use <code>&lt;Link&gt;</code>When to Use <code>history.push</code> (or <code>navigate</code>) <ol> <li> <p>Static Navigation:</p> <ul> <li>Use <code>&lt;Link&gt;</code> when you have static navigation elements, such as links in a navigation bar, menu, or list items.</li> <li>It provides better accessibility, as it renders an anchor (<code>&lt;a&gt;</code>) tag.</li> </ul> <pre><code>import { Link } from 'react-router-dom';\n\nconst Navigation = () =&gt; (\n    &lt;nav&gt;\n        &lt;Link to=\"/dashboard\"&gt;Dashboard&lt;/Link&gt;\n        &lt;Link to=\"/todo\"&gt;Todo&lt;/Link&gt;\n    &lt;/nav&gt;\n);\n</code></pre> </li> <li> <p>Declarative Navigation:</p> <ul> <li><code>&lt;Link&gt;</code> is declarative and easier to read. It handles navigation without needing to manage state or event handling manually. It also automatically handles active styling when using NavLink.</li> </ul> </li> <li> <p>Multiple Links:</p> <ul> <li>If you need multiple links on a page, <code>&lt;Link&gt;</code> is simpler and cleaner than managing click events for each.</li> </ul> </li> </ol> <ol> <li> <p>Programmatic Navigation:</p> <ul> <li>Use <code>history.push</code> (v5) or <code>navigate</code> (v6) when you need to navigate based on certain conditions or events (e.g., after a form submission, button click, or an API response).</li> </ul> <pre><code>const handleSubmit = () =&gt; {\n    // Do some processing\n    history.push(\"/success\");\n};\n</code></pre> </li> <li> <p>Conditional Navigation:</p> <ul> <li>When navigation depends on user actions, like authentication or responses from API calls, using <code>history.push</code> or <code>navigate</code> allows for more control.</li> </ul> </li> <li> <p>Dynamic Routes:</p> <ul> <li>If you need to navigate to a route that includes dynamic parameters (e.g., user IDs), you can easily construct the path using string interpolation.</li> </ul> <pre><code>const handleNavigateToUser = (userId) =&gt; {\n    navigate(`/users/${userId}`);\n};\n</code></pre> </li> </ol> <p>Summary</p> <ul> <li>Use  for simple, declarative navigation where no additional logic is required. It's suitable for static links in your UI.</li> <li>Use <code>history.push</code> or <code>navigate</code> for programmatic navigation, especially when user interactions or conditions determine when to navigate. This allows for greater flexibility and control over the navigation process.</li> </ul> <p>Both methods can coexist in your application depending on the context, allowing you to choose the best approach for each scenario.</p>"},{"location":"office/codesnapshot/axios-cancel/","title":"Axios Cancellation","text":"<pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiForGetGallery } from \"./api\";\nimport axios from \"axios\";\n\nexport const getPhotosService = createAsyncThunk(\n  \"gallery/getPhotosService\",\n  async (signal, { rejectWithValue }) =&gt; {\n    try {\n      const response = await apiForGetGallery(signal);\n      return response;\n    } catch (err) {\n      if (axios.isCancel(err)) {\n        // return rejectWithValue(\"Request was cancelled\");\n        return rejectWithValue(null);\n      }\n      return rejectWithValue(err.message);\n    }\n  }\n);\n</code></pre> <p>When using <code>axios</code>, it's common to handle cancellations of requests, especially in cases where you want to avoid unnecessary state updates when the component unmounts or when the request is no longer needed.</p> <p>In your code, you're already checking for cancellations using <code>axios.isCancel(err)</code>. If you want to \"silently\" handle this by not rejecting with a specific value (like <code>\"Request was cancelled\"</code>), returning <code>rejectWithValue(null)</code> is acceptable, especially if you want to ignore these cases in the consuming component.</p> SolutionStandard Practice <p>Here's a clean way to handle this:</p> <pre><code>export const getPhotosService = createAsyncThunk(\n    \"gallery/getPhotosService\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await apiForGetGallery(signal);\n            return response;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                // Optionally log or handle the cancellation quietly\n                return rejectWithValue(null); // or simply return; if you prefer to do nothing\n            }\n            return rejectWithValue(err.message);\n        }\n    }\n);\n</code></pre> <ol> <li>Silencing Cancellations: Returning <code>null</code> or simply doing nothing is fine if you want to ignore cancellations. It depends on your application needs.</li> <li>Logging: Sometimes it's helpful to log the cancellation for debugging purposes, so consider adding a console log if that fits your needs.</li> <li>State Handling: Ensure that your application\u2019s state management can handle <code>null</code> values gracefully, or simply avoid state updates if you choose not to reject at all.</li> <li>Documentation: Commenting on why you\u2019re handling it this way can be helpful for future maintainers of your code.</li> </ol> <p>Overall, it\u2019s about balancing clarity, performance, and your specific application requirements.</p>"},{"location":"office/codesnapshot/codesnap/","title":"Intro","text":""},{"location":"office/codesnapshot/codesnap/#reducer","title":"REDUCER","text":""},{"location":"office/codesnapshot/codesnap/#infinite-scolling-reverse","title":"Infinite Scolling <code>reverse</code>","text":""},{"location":"office/codesnapshot/codesnap/#rtk","title":"RTK","text":""},{"location":"office/codesnapshot/improvement/","title":"Improvement","text":"services.jsslice.js <pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiForGetGallery } from \"./api\";\nimport axios from \"axios\";\n\nexport const getPhotosService = createAsyncThunk(\n\"gallery/getPhotosService\",\nasync (signal, { rejectWithValue }) =&gt; {\n    try {\n    const response = await apiForGetGallery(signal);\n    return response;\n    } catch (err) {\n    if (axios.isCancel(err)) {\n        return rejectWithValue(\"Request was cancelled\");\n    }\n    return rejectWithValue(err.message);\n    }\n}\n);\n</code></pre> <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\nimport { getPhotosService } from \"./services\";\n\nconst gallerySlice = createSlice({\nname: \"gallery\",\ninitialState: {\n    items: [],\n    loading: false,\n    error: null,\n},\nextraReducers: (builder) =&gt; {\n    builder\n    .addCase(getPhotosService.pending, (state) =&gt; {\n        state.loading = true;\n        state.error = null;\n    })\n    .addCase(getPhotosService.fulfilled, (state, action) =&gt; {\n        // console.log(\"SLICE: \", action.payload);\n        state.loading = false;\n        state.items = action.payload;\n    })\n    .addCase(getPhotosService.rejected, (state, action) =&gt; {\n        state.loading = false;\n        state.error = action.error.message;\n    });\n},\n});\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Your Redux slice and service for fetching gallery photos look solid! Here\u2019s a brief overview and some suggestions for improvement or clarity:</p> Overview <ol> <li> <p>Service (<code>services.js</code>):</p> </li> <li> <p>Utilizes <code>createAsyncThunk</code> for handling asynchronous requests.</p> </li> <li> <p>Uses axios to make API calls and properly handles cancellation of requests.</p> </li> <li> <p>Slice (<code>slice.js</code>):</p> </li> <li> <p>Defines the initial state with <code>items</code>, <code>loading</code>, and <code>error</code>.</p> </li> <li>Manages state transitions for the async actions: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>.</li> </ol>"},{"location":"office/codesnapshot/improvement/#suggestions-for-improvement","title":"Suggestions for Improvement","text":"<ol> <li> <p>Error Handling:</p> <ul> <li>In the <code>rejected</code> case, you might want to ensure you return a meaningful error message. Currently, it uses <code>action.error.message</code>, but if you want to access the custom message from <code>rejectWithValue</code>, you should use <code>action.payload</code> instead.</li> </ul> <pre><code>.addCase(getPhotosService.rejected, (state, action) =&gt; {\n    state.loading = false;\n    state.error = action.payload; // Use payload for custom error messages\n});\n</code></pre> </li> <li> <p>Type Safety (if using TypeScript):</p> <ul> <li>If your project uses TypeScript, consider adding types for the state and actions to improve maintainability.</li> </ul> </li> <li> <p>Additional State Management:</p> <ul> <li>Consider adding a <code>refresh</code> or <code>reset</code> action to clear the state, especially if users can trigger the fetching of new photos multiple times.</li> </ul> </li> <li> <p>Memoizing Selectors:</p> <ul> <li>If you plan to select parts of the state frequently, using reselect can help with performance by memoizing the selectors.</li> </ul> </li> <li> <p>Handling Empty States:</p> <ul> <li>Consider adding a state to handle scenarios where no photos are returned, so the UI can provide appropriate feedback to users.</li> </ul> <p>Here\u2019s a small update incorporating some of these suggestions:</p> <pre><code>.addCase(getPhotosService.rejected, (state, action) =&gt; {\n    state.loading = false;\n    state.error = action.payload || \"An error occurred\"; // Fallback error message\n});\n</code></pre> <p>Overall, your implementation is clear and follows Redux best practices.</p> <p>Handling empty states is a great way to enhance user experience. You can manage this by adding a new piece of state to track whether any photos were fetched. Here's how you can modify your slice to incorporate this:</p> Step 1Step 2Step 3Summary <p>Step 1: Update Initial State</p> <p>Add a <code>hasPhotos</code> boolean to the initial state:</p> <pre><code>initialState: {\n    items: [],\n    loading: false,\n    error: null,\n    hasPhotos: false, // New state to track if photos are available\n},\n</code></pre> <p>Step 2: Update Fulfilled Case</p> <p>In the <code>fulfilled</code> case of your async thunk, set <code>hasPhotos</code> based on the length of the fetched items:</p> <pre><code>.addCase(getPhotosService.fulfilled, (state, action) =&gt; {\n    state.loading = false;\n    state.items = action.payload;\n    state.hasPhotos = action.payload.length &gt; 0; // Set hasPhotos based on the payload\n});\n</code></pre> <p>Step 3: Handle Empty State in UI</p> <p>In your UI component, you can now check hasPhotos to provide feedback. For example:</p> <pre><code>const GalleryComponent = () =&gt; {\n    const { items, loading, error, hasPhotos } = useSelector((state) =&gt; state.gallery);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;; // Feedback for empty state\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre> <p>By adding the <code>hasPhotos</code> state, you provide a clear indication in the UI when there are no photos available, improving the overall user experience. This pattern helps to maintain clarity and provides users with meaningful feedback based on the state of their request. If you have any more questions or need further assistance, feel free to ask!</p> </li> </ol>"},{"location":"office/codesnapshot/improvement/#using-reselect","title":"Using Reselect","text":"<p>Using reselect for creating memoized selectors can enhance performance and maintainability in your Redux applications</p> <p>Sure! Here\u2019s how to set up both reselect and Redux Toolkit (RTK) for creating memoized selectors. You can choose either approach based on your needs.</p>"},{"location":"office/codesnapshot/improvement/#1-using-reselect-with-rtk","title":"1. Using Reselect with RTK","text":"Step 1Step 2Step 3Step 4 <p>Step 1: Install Reselect</p> <p>First, if you haven't already, install the reselect library:</p> <pre><code>npm install reselect\n</code></pre> <p>Step 2: Create Your Slice</p> <p>Here\u2019s an example of a Redux slice for your gallery:</p> <pre><code>// gallerySlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst gallerySlice = createSlice({\n    name: \"gallery\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n        hasPhotos: false,\n    },\n    reducers: {\n        // Define your reducers here\n    },\n});\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Step 3: Create Selectors Using Reselect</p> <p>Now, create a separate file for your selectors:</p> <pre><code>// selectors.js\nimport { createSelector } from 'reselect';\n\nconst selectGalleryState = (state) =&gt; state.gallery;\n\nexport const selectItems = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.items\n);\n\nexport const selectLoading = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.loading\n);\n\nexport const selectError = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.error\n);\n\nexport const selectHasPhotos = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.hasPhotos\n);\n</code></pre> <p>Step 4: Use Selectors in Your Component</p> <p>Now you can use these selectors in your components:</p> <pre><code>// GalleryComponent.js\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    selectItems,\n    selectLoading,\n    selectError,\n    selectHasPhotos,\n} from './selectors';\n\nconst GalleryComponent = () =&gt; {\n    const items = useSelector(selectItems);\n    const loading = useSelector(selectLoading);\n    const error = useSelector(selectError);\n    const hasPhotos = useSelector(selectHasPhotos);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;;\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"office/codesnapshot/improvement/#2-using-rtk-without-reselect","title":"2. Using RTK Without Reselect","text":"<p>If you decide to create simple selectors directly within your slice without using reselect, you can do it as follows:</p> Step 1Step 2 <p>Step 1\": Create Your Slice with Simple Selectors</p> <p>You can include selectors directly in your slice file:</p> <pre><code>// gallerySlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst gallerySlice = createSlice({\n    name: \"gallery\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n        hasPhotos: false,\n    },\n    reducers: {\n        // Define your reducers here\n    },\n});\n\n// Simple selectors\nexport const selectGallery = (state) =&gt; state.gallery;\nexport const selectItems = (state) =&gt; selectGallery(state).items;\nexport const selectLoading = (state) =&gt; selectGallery(state).loading;\nexport const selectError = (state) =&gt; selectGallery(state).error;\nexport const selectHasPhotos = (state) =&gt; selectGallery(state).hasPhotos;\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Step 2: Use Selectors in Your Component</p> <p>You can use the same <code>GalleryComponent</code> as shown earlier, but now directly accessing the selectors from the slice:</p> <pre><code>// GalleryComponent.js\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectItems, selectLoading, selectError, selectHasPhotos } from './gallerySlice';\n\nconst GalleryComponent = () =&gt; {\n    const items = useSelector(selectItems);\n    const loading = useSelector(selectLoading);\n    const error = useSelector(selectError);\n    const hasPhotos = useSelector(selectHasPhotos);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;;\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre> <p>Where to Place the Files</p> <ul> <li><code>gallerySlice.js</code>: This file can be placed in your <code>features</code> or <code>slices</code> directory, depending on your project structure.</li> <li><code>selectors.js</code>: If you're using <code>reselect</code>, you can create a separate <code>selectors.js</code> file in the same directory as your slice or within a dedicated selectors directory.</li> </ul>"},{"location":"office/codesnapshot/improvement/#summary","title":"Summary","text":"<p>Both approaches have their merits. Using <code>reselect</code> can help with performance in larger applications, while simple selectors are perfectly fine for smaller or less complex applications. Choose the approach that best fits your project needs! Let me know if you have further questions!</p>"},{"location":"office/codesnapshot/improvement/#react-18","title":"React 18","text":"<p>React 18 introduced several exciting features that enhance performance and usability. Here are the main highlights:</p> <ol> <li> <p>Concurrent Rendering: React 18 allows React to work on multiple tasks simultaneously, making rendering more efficient and improving the user experience, especially for large applications.</p> </li> <li> <p>Automatic Batching: Updates within the same event loop are batched automatically, reducing the number of renders and improving performance.</p> </li> <li> <p>Transition API: This API helps manage UI transitions more effectively, allowing developers to mark certain updates as non-urgent, which helps keep the app responsive.</p> </li> <li> <p>Suspense for Data Fetching: React 18 extends Suspense to work with data fetching, making it easier to handle asynchronous operations and provide a better loading experience.</p> </li> <li> <p>Streaming Server Rendering: Improved support for server-side rendering (SSR) allows React to send HTML to the client in chunks, which can lead to faster loading times.</p> </li> <li> <p>New Hooks: Introduction of new hooks like <code>useTransition</code> and <code>useDeferredValue</code> for better state management during concurrent rendering.</p> </li> <li> <p>React Server Components: Although still experimental, this feature allows developers to create components that run on the server, reducing the amount of JavaScript sent to the client.</p> </li> </ol> <p>These features collectively enhance performance, usability, and the developer experience, making React applications more efficient and responsive.</p>"},{"location":"office/codesnapshot/improvement/#error-boundry","title":"Error Boundry","text":"ErrorBoundaryComponent <pre><code>import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true }; // Update state to indicate an error has occurred\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.error(\"Error caught by Error Boundary:\", error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n        return &lt;h2&gt;Something went wrong with loading the image.&lt;/h2&gt;;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n</code></pre> <pre><code>import React from \"react\";\nimport ErrorBoundary from \"./ErrorBoundary\"; // Import your ErrorBoundary\nimport DashboardPicture from \"./Picture\";\nimport DashboardTodo from \"./Todo\";\n\nconst Dashboard = () =&gt; {\n    return (\n        &lt;&gt;\n            &lt;h1&gt; Welcome to Dashboard &lt;/h1&gt;\n            &lt;ErrorBoundary&gt;\n                &lt;DashboardPicture /&gt;\n            &lt;/ErrorBoundary&gt;\n            &lt;DashboardTodo /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default Dashboard;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/","title":"Logging In React","text":"Recommendation <ol> <li> <p>Development Phase: Use console logging to understand how often requests are being canceled and ensure that your application is behaving as expected.</p> </li> <li> <p>Production Phase: If cancellations are well understood and not problematic, consider switching to returning <code>null</code> to keep the console clean. If you still want visibility, you could use a logging library that allows you to control the log levels (e.g., only log cancellations in debug mode).</p> </li> </ol> <p>In summary, a balanced approach often works best: log cancellations during development, then refine your handling for production based on what you\u2019ve learned.</p>"},{"location":"office/codesnapshot/loggin-in-react/#logging-library","title":"Logging Library","text":"<p>There are several logging libraries you can use in React that work well in both development and production environments. Here are some popular options:</p> <ol> <li> <p>Winston</p> <ul> <li>Description: A versatile logging library for Node.js that can also be used in the browser.</li> <li>Features: Supports multiple transports (e.g., file, console, HTTP), custom formatting, and log levels.</li> <li>Use Case: Great for complex applications requiring advanced logging features.</li> </ul> </li> <li> <p>Log4js</p> <ul> <li>Description: A logging framework inspired by log4j, offering a rich set of features.</li> <li>Features: Supports multiple appenders (e.g., console, file), categories, and layouts.</li> <li>Use Case: Suitable for applications needing structured logging.</li> </ul> </li> <li> <p>pino</p> <ul> <li>Description: A fast and low-overhead logging library for Node.js, with browser support.</li> <li>Features: High performance, JSON output, and easy integration with various transports.</li> <li>Use Case: Ideal for performance-sensitive applications.</li> </ul> </li> <li> <p>React Logger</p> <ul> <li>Description: A lightweight logger specifically designed for React applications.</li> <li>Features: Simple API, can log messages to the console or send them to a server.</li> <li>Use Case: Good for basic logging needs in React apps.</li> </ul> </li> <li> <p>Sentry</p> <ul> <li>Description: Primarily an error tracking service, Sentry also provides logging capabilities.</li> <li>Features: Automatic error capturing, performance monitoring, and contextual logging.</li> <li>Use Case: Great for applications where error tracking and logging are combined.</li> </ul> </li> <li> <p>LogRocket</p> <ul> <li>Description: A logging and monitoring service that captures logs along with user sessions.</li> <li>Features: Records user sessions, network requests, and errors, allowing you to replay sessions.</li> <li>Use Case: Useful for understanding user behavior and diagnosing issues.</li> </ul> </li> <li> <p>Bunyan</p> <ul> <li>Description: A simple and fast JSON logging library for Node.js.</li> <li>Features: Provides a structured logging format, log levels, and supports streams.</li> <li>Use Case: Good for applications needing structured log output.</li> </ul> </li> </ol> <p>Recommendations for Development and Production</p> <ul> <li>Development: Use libraries like <code>console</code> for basic logging or <code>Winston/Log4js</code> for more structured logs.</li> <li>Production: Consider using <code>Sentry</code> or <code>LogRocket</code> for error tracking and session replay, and complement them with a logging library like <code>pino</code> for performance.</li> </ul> <p>Configurable Log Levels</p> <p>Regardless of the library you choose, you can often configure log levels (e.g., debug, info, error) to control what gets logged in different environments. This allows you to log more detailed information during development while keeping production logs cleaner.</p>"},{"location":"office/codesnapshot/loggin-in-react/#logging","title":"Logging","text":"<p>For logging in a React app that works well in both development and production, the best approach combines a lightweight, browser-compatible logging library with good configurability. Here are two excellent options: loglevel and winston (with a focus on browser compatibility).</p>"},{"location":"office/codesnapshot/loggin-in-react/#option-1-using-loglevel","title":"Option 1: Using loglevel","text":"<p>loglevel is a simple, lightweight logging library designed for browser use. It allows you to set different log levels and works well for both development and production environments.</p> InstallationConfigurationUsage in Components <pre><code>npm install loglevel\n</code></pre> <p>Create a logger configuration file:</p> <pre><code>// src/utils/logger.js\nimport log from 'loglevel';\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Set the log level based on the environment\nlog.setLevel(isProduction ? 'error' : 'debug');\n\n// Optionally, you can customize log messages\nif (!isProduction) {\n    log.getLogger().setLevel('debug');\n}\n\nexport default log;\n</code></pre> <p>You can now use this logger in your components:</p> <pre><code>// src/components/ComponentA.jsx\nimport React, { useEffect } from 'react';\nimport logger from '../utils/logger';\n\nconst ComponentA = () =&gt; {\n    useEffect(() =&gt; {\n        logger.info('ComponentA has mounted');\n\n        // Simulate an error\n        try {\n            throw new Error('Simulated error');\n        } catch (error) {\n            logger.error(`An error occurred in ComponentA: ${error.message}`);\n        }\n\n        return () =&gt; {\n            logger.info('ComponentA will unmount');\n        };\n    }, []);\n\n    return &lt;div&gt;Component A&lt;/div&gt;;\n};\n\nexport default ComponentA;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#sentry-and-logrocket","title":"<code>Sentry</code> and <code>LogRocket</code>","text":"<p>For a medium-sized application, choosing between Sentry and LogRocket depends on your specific needs and priorities. Here are some considerations to help you decide:</p> Considerations for Medium-Sized Apps <ol> <li> <p>Error Tracking and Performance Monitoring:</p> <p>Choose Sentry if:</p> <ul> <li>You want robust error tracking with detailed stack traces and alerts.</li> <li>You need to monitor application performance and identify bottlenecks.</li> <li>Catching and resolving errors quickly is a priority for your team.</li> <li>You want real-time notifications when new errors occur.</li> </ul> </li> <li> <p>User Experience Insights:</p> <p>Choose LogRocket if:</p> <ul> <li>Understanding user interactions and behaviors is crucial for your application.</li> <li>You want to replay user sessions to diagnose UI/UX issues visually.</li> <li>You\u2019re looking to improve user experience based on actual usage patterns.</li> <li>You need to debug issues related to specific user actions.</li> </ul> </li> </ol> Recommendation <p>Given that your app is medium-sized, you might want to consider starting with Sentry for the following reasons:</p> <ul> <li>Immediate Benefits: Sentry provides essential error tracking and performance monitoring, which can help you quickly address issues that may affect your users.</li> <li>Lower Overhead: Sentry is straightforward to integrate and can provide immediate value without the complexity of visual debugging.</li> <li>Scalability: As your application grows, Sentry's features can help you manage more complex error tracking and monitoring needs.</li> </ul> <p>Future Consideration</p> <p>Once you have Sentry set up and are comfortable with it, you can always consider adding LogRocket later if you find you need more insights into user interactions or if you face frequent UI/UX issues.</p> <p>Summary</p> <ul> <li>Start with Sentry for error tracking and performance monitoring.</li> <li>Consider LogRocket later if you need deeper insights into user behavior and session replays.</li> </ul> <p>This approach allows you to establish a solid foundation for monitoring and debugging while keeping your initial setup manageable.</p> <p>To use Sentry in your React application, you'll need to follow these steps to set it up and start capturing errors and performance data. Here's a detailed guide:</p>"},{"location":"office/codesnapshot/loggin-in-react/#step-1-create-a-sentry-account-and-project","title":"Step 1: Create a Sentry Account and Project","text":"<pre><code>Sign Up for Sentry:\n    Go to Sentry's website and create an account if you don't have one.\n\nCreate a New Project:\n    Once logged in, create a new project. Choose \"JavaScript\" as the platform and select \"React\" as the framework.\n\nGet Your DSN:\n    After creating the project, Sentry will provide you with a DSN (Data Source Name). You'll need this to configure Sentry in your app.\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-2-install-sentry-sdk","title":"Step 2: Install Sentry SDK","text":"<p>In your React project, install the Sentry SDK:</p> <pre><code>npm install @sentry/react @sentry/tracing\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-3-configure-sentry-in-your-application","title":"Step 3: Configure Sentry in Your Application","text":"<p>You\u2019ll want to initialize Sentry in your application, typically in your main entry file (like <code>index.js</code> or <code>App.js</code>).</p> <p>Example Configuration in index.js:</p> <pre><code>// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"YOUR_SENTRY_DSN\", // Replace with your actual DSN\n  integrations: [new Integrations.BrowserTracing()],\n  // Optional: adjust the tracesSampleRate to control the amount of performance data sent to Sentry\n  tracesSampleRate: 1.0, // Capture 100% of transactions for performance monitoring\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\"));\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-4-capture-errors-in-your-components","title":"Step 4: Capture Errors in Your Components","text":"<p>Sentry automatically captures unhandled exceptions and unhandled promise rejections. However, you can also manually capture errors in your components.</p> <p>Example: Capturing Errors in a Component:</p> <pre><code>// src/components/ComponentA.jsx\nimport React, { useEffect } from \"react\";\nimport * as Sentry from \"@sentry/react\";\n\nconst ComponentA = () =&gt; {\n  useEffect(() =&gt; {\n    try {\n      // Simulate an error\n      throw new Error(\"Simulated error in ComponentA\");\n    } catch (error) {\n      Sentry.captureException(error);\n    }\n  }, []);\n\n  return &lt;div&gt;Component A&lt;/div&gt;;\n};\n\nexport default ComponentA;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-5-adding-error-boundaries-optional","title":"Step 5: Adding Error Boundaries (Optional)","text":"<p>You can wrap your components with Sentry\u2019s <code>ErrorBoundary</code> to automatically capture errors in the component tree.</p> <p>Example: Using Sentry Error Boundary:</p> <pre><code>// src/App.js\nimport React from \"react\";\nimport * as Sentry from \"@sentry/react\";\nimport ComponentA from \"./components/ComponentA\";\n\nconst App = () =&gt; (\n  &lt;Sentry.ErrorBoundary fallback={&lt;h1&gt;Something went wrong&lt;/h1&gt;}&gt;\n    &lt;ComponentA /&gt;\n    {/* Other components can go here */}\n  &lt;/Sentry.ErrorBoundary&gt;\n);\n\nexport default App;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-6-testing-your-setup","title":"Step 6: Testing Your Setup","text":"<ol> <li> <p>Trigger an Error:</p> <ul> <li>You can trigger an error in your app by using the code provided in the component example.</li> </ul> </li> <li> <p>Check Sentry Dashboard:</p> <ul> <li>After triggering an error, go to your Sentry dashboard to see if the error was captured. It should appear under the Issues tab in your project.</li> </ul> </li> </ol> <p>Summary</p> <ol> <li>Create an Account and Project on Sentry and get your DSN.     Install the Sentry SDK in your React project.     Initialize Sentry in your main entry file.     Capture Errors manually in components or use Sentry\u2019s ErrorBoundary.     Test your setup to ensure errors are being reported to Sentry.</li> </ol> <p>With these steps, you should have a functional Sentry integration in your React application, allowing you to monitor errors and performance effectively!</p>"},{"location":"office/codesnapshot/router-dom/","title":"router dom","text":"<pre><code>import { useNavigate } from \"react-router-dom\";\n\nconst navigate = useNavigate();\n\nconst handleNavigateToTodo = () =&gt; {\n  navigate(\"/todo\"); // Navigate to the /todo route\n};\n\nreturn (\n  &lt;&gt;\n    &lt;ResuableCard\n      title=\"Todo\"\n      content={todosContent}\n      extra={[\n        &lt;SearchOutlined /&gt;,\n        &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n      ]}\n      icon={\n        &lt;&gt;\n          &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n        &lt;/&gt;\n      }\n    /&gt;\n  &lt;/&gt;\n);\n</code></pre> <p>You can use <code>&lt;Link&gt;</code> instead of <code>useNavigate</code>, but the choice between the two depends on your specific requirements. Here's a breakdown of your code with both options, along with recommendations.</p> Using <code>&lt;Link&gt;</code>Using <code>useNavigate</code>Comparison <p>If you want to navigate to the <code>/todo</code> route when clicking on the icon, you can use <code>&lt;Link&gt;</code> like this:</p> <pre><code>import { Link } from \"react-router-dom\";\n\n// Inside your component\nreturn (\n    &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={todosContent}\n            extra={[\n                &lt;SearchOutlined /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n            ]}\n            icon={\n                &lt;Link to=\"/todo\"&gt;\n                    &lt;CopyTwoTone key=\"navigate\" /&gt;\n                &lt;/Link&gt;\n            }\n        /&gt;\n    &lt;/&gt;\n);\n</code></pre> <p>Using <code>useNavigate</code> allows you to handle more complex logic or conditions before navigating. For example:</p> <pre><code>import { useNavigate } from \"react-router-dom\";\n\nconst MyComponent = () =&gt; {\n    const navigate = useNavigate();\n\n    const handleNavigateToTodo = () =&gt; {\n        // You might have some logic here before navigating\n        navigate(\"/todo\");\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={todosContent}\n            extra={[\n                &lt;SearchOutlined /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n            ]}\n            icon={\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n            }\n        /&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre> <ol> <li> <p>Using <code>&lt;Link&gt;</code>:</p> <p>Pros: -   Simpler for straightforward navigation. -   Better for SEO and accessibility since it renders a clickable anchor element.</p> <p>Cons: -   Less flexible for complex logic (e.g., conditional navigation based on form submission).</p> </li> <li> <p>Using <code>useNavigate</code>:</p> <p>Pros: -   Allows for programmatic control and conditional logic before navigation. -   Useful if you need to perform actions (like validation) before navigating.</p> <p>Cons: -   Slightly more verbose than  for simple use cases.</p> </li> </ol> <p>Recommendation</p> <ul> <li>Use <code>&lt;Link&gt;</code>: If the navigation is straightforward (just moving to another route) and you don't need any additional logic or conditions.</li> <li>Use <code>useNavigate</code>: If you have conditions to check or need to perform actions before navigating (like validation, API calls, or complex routing logic).</li> </ul> <p>In your case, if clicking the icon is purely for navigation without additional checks, <code>&lt;Link&gt;</code> might be the better and cleaner option. If you have some logic you need to run before navigating, stick with <code>useNavigate</code>.</p>"},{"location":"office/codesnapshot/router-dom/#example","title":"Example","text":"<p>Certainly! Here\u2019s a practical example demonstrating how to use <code>useNavigate</code> with some conditional logic before navigating to another route. This example will include checking if a user is authenticated before allowing them to navigate to the <code>/todo</code> page.</p> ExampleExplanation <p>Example: Conditional Navigation Based on Authentication</p> <p>Assume you have a simple authentication check in your application. If the user is not authenticated, you might want to show an alert or redirect them to a login page instead of navigating to the <code>/todo</code> page.</p> <pre><code>import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { message } from 'antd'; // For user feedback\nimport { CopyTwoTone, PlusCircleTwoTone } from '@ant-design/icons';\nimport ResuableCard from './ResuableCard'; // Your reusable card component\n\nconst DashboardTodo = () =&gt; {\n    const navigate = useNavigate();\n\n    // Simulating an authentication state\n    const isAuthenticated = false; // Change this to simulate authentication\n\n    const handleNavigateToTodo = () =&gt; {\n        if (isAuthenticated) {\n            navigate(\"/todo\"); // Navigate if authenticated\n        } else {\n            message.warning(\"You need to be logged in to access the Todo page.\"); // Feedback for the user\n            // Optionally, you can navigate to a login page\n            // navigate(\"/login\");\n        }\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={&lt;p&gt;Your todo content here.&lt;/p&gt;}\n            extra={[\n                &lt;PlusCircleTwoTone key=\"add\" onClick={() =&gt; console.log('Add Todo')} /&gt;,\n            ]}\n            icon={\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n            }\n        /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <ol> <li> <p>Authentication Check:</p> <ul> <li>The <code>isAuthenticated</code> variable simulates the authentication state. In a real application, you would likely fetch this from your application's state (e.g., Redux or Context API).</li> </ul> </li> <li> <p>handleNavigateToTodo:</p> <ul> <li>This function checks if the user is authenticated.</li> <li>If they are, it uses <code>navigate(\"/todo\")</code> to redirect to the Todo page.</li> <li>If not, it shows a warning message using Ant Design's message component, informing the user that they need to log in.</li> </ul> </li> <li> <p>User Feedback:</p> <ul> <li>The <code>message.warning</code> function provides immediate feedback to the user, enhancing the user experience.</li> </ul> </li> <li> <p>Optional Navigation:</p> <ul> <li>You can also include an optional navigation to a login page if desired (commented out in this example).</li> </ul> </li> </ol> <p>When to Use This Pattern</p> <p>This pattern is particularly useful when you want to protect certain routes (like <code>/todo</code>) and ensure users meet certain conditions (like being authenticated) before accessing them. It allows for a more controlled and user-friendly navigation experience.</p>"},{"location":"office/codesnapshot/slice/","title":"Slice","text":""},{"location":"office/ispl/issue/","title":"Issue Login LateReason","text":""},{"location":"office/ispl/issue/#issue","title":"Issue","text":"<p>It looks like your app is continuously hitting the API at <code>https://cqnoval.info.com.np/api/app/attendance/CheckOutDailyAttendance</code> when users visit a route directly (like <code>http://localhost:3000/#/fsadfsadf/</code>) without being logged in. This is likely due to the component that makes the API call being mounted even though the user isn't authenticated.</p>"},{"location":"office/ispl/issue/#root-cause","title":"Root Cause","text":"<p>Your logic is rendering the <code>LateAttendence</code> component unconditionally when <code>shouldShowLateModalTest</code> is <code>true</code>, without checking for authentication (<code>token</code>). That means:</p> <ol> <li> <p>API call is triggered inside the <code>LateAttendence</code> component (most likely in <code>useEffect</code>).</p> </li> <li> <p>Since the route matches and renders this component, it runs regardless of user auth status.</p> </li> <li> <p>If the response again triggers something that causes a re-render, or the condition remains true, it can result in continuous API calls.</p> </li> </ol>"},{"location":"office/ispl/issue/#solution","title":"Solution","text":"<p>You must ensure the user is authenticated before rendering components that make API calls. Here's how you can structure it:</p> <p>\u2705 Fix with Conditional Rendering Based on Auth Token</p> App.js<pre><code>const shouldShowLateModal = checkDailyAttendenceResponse?.isLateReasonNeeded;\n\nif (!token) {\n  return &lt;Redirect to=\"/\" /&gt;;\n}\n\nif (shouldShowLateModalTest) {\n  return (\n    &lt;LateAttendence\n      id={checkDailyAttendenceResponse?.attendanceDetailId}\n      data={checkDailyAttendenceResponse?.attendanceIn}\n      leaveReasonPopUp={checkDailyAttendenceResponse?.isLeaveReasonNeeded}\n      leaveStartdate={checkDailyAttendenceResponse?.leaveStartDate}\n      leaveEndDate={checkDailyAttendenceResponse?.leaveEndDate}\n    /&gt;\n  );\n}\n\n// return (\n//   &lt;Route\n//     {...rest}\n//     render={(props) =&gt; React.cloneElement(onlyChild, { ...rest, ...props })}\n//   /&gt;\n// );\nreturn (\n  &lt;Route\n    {...rest}\n    render={(props) =&gt;\n      token ? (\n        React.cloneElement(onlyChild, { ...rest, ...props })\n      ) : (\n        &lt;Redirect to=\"/\" /&gt;\n      )\n    }\n  /&gt;\n);\n</code></pre>"},{"location":"office/ispl/issue/#additional-suggestions","title":"Additional Suggestions","text":"<p>\u2705 Protect API calls inside components with token checks:</p> <pre><code>useEffect(() =&gt; {\n  if (!token) return;\n\n  // make API call here\n}, [token]);\n</code></pre> <ul> <li>\u2705 Avoid using <code>shouldShowLateModalTest = true</code> for testing in production-like environments.</li> <li>\u2705 Track and prevent infinite re-renders or API loops by using proper dependencies in <code>useEffect</code>.</li> </ul>"},{"location":"office/ispl/issue/#v5","title":"V5","text":"RedirectRoute.js<pre><code>import { Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst RedirectRoute = ({ children }) =&gt; {\n  const isAuthenticated = true;\n  if (!isAuthenticated) {\n    return children;\n  }\n  return &lt;Redirect to=\"/dashboard\" /&gt;;\n};\n\nexport default RedirectRoute;\n\n// USED IN COMPONENT\n&lt;Switch&gt;\n  &lt;Route\n    path=\"/\"\n    exact\n    render={() =&gt; (\n      &lt;RedirectRoute&gt;\n        &lt;WelcomeView /&gt;\n      &lt;/RedirectRoute&gt;\n    )}\n  /&gt;\n&lt;/Switch&gt;;\n</code></pre> <pre><code>const Routes = ({ token }) =&gt; {\n\n\n  const renderSwitch = () =&gt; {\n    return (\n      &lt;Switch&gt;\n        {/* &lt;Route path=\"/\" exact&gt;\n          &lt;WelcomeView /&gt;\n        &lt;/Route&gt; */}\n        &lt;Route\n          path=\"/\"\n          exact\n          render={() =&gt; (\n            &lt;RedirectRoute&gt;\n              &lt;WelcomeView /&gt;\n            &lt;/RedirectRoute&gt;\n          )}\n        /&gt;\n\n        {console.log(\n          \"checkDailyAttendenceResponse: \",\n          checkDailyAttendenceResponse\n        )}\n\n        {/* {!isEmpty(checkDailyAttendenceResponse) &amp;&amp; ( */}\n        {!isEmpty(token) &amp;&amp; (\n          &lt;LateAttendence\n            id={checkDailyAttendenceResponse?.attendanceDetailId}\n            data={checkDailyAttendenceResponse?.attendanceIn}\n            leaveReasonPopUp={checkDailyAttendenceResponse?.isLeaveReasonNeeded}\n            leaveStartdate={checkDailyAttendenceResponse?.leaveStartDate}\n            leaveEndDate={checkDailyAttendenceResponse?.leaveEndDate}\n          /&gt;\n        )}\n  )}\n\n}\n</code></pre> <pre><code>import { useSelector } from \"react-redux\";\nimport { isEmpty } from \"lodash\";\nimport { Redirect } from \"react-router-dom\";\n\nconst RedirectRoute = ({ children }) =&gt; {\n  const { token } = useSelector(({ auth }) =&gt; auth);\n\n  //   const isAuthenticated = true;\n  const isAuthenticated = isEmpty(token) ? false : true;\n\n  if (!isAuthenticated) {\n    return children;\n  }\n  return &lt;Redirect to=\"/dashboard\" /&gt;;\n};\n\nexport default RedirectRoute;\n</code></pre>"},{"location":"office/ispl/issue/#addedchanges-file","title":"ADDED/CHANGES FILE","text":"Routes.js<pre><code>const Routes = ({ token }) =&gt; {\n  const location = useLocation();\n  const { LimitedRoleDemo, isLimitedRoleMailBox, isLimitedRoleForICCL } =\n    useRoles();\n  const { checkDailyAttendenceResponse, checkDailyAttendenceResponseLoading } =\n    useSelector((state) =&gt; state.auth);\n\n  // ADDED\n  const checkInDataTest = JSON.parse(sessionStorage.getItem(\"checkInData\"));\n  const isLateReasonNeeded = sessionStorage.getItem(\"isLateReasonNeeded\");\n  const isLeaveReasonNeeded = sessionStorage.getItem(\"isLeaveReasonNeeded\");\n\n  const renderSwitch = () =&gt; {\n    return (\n      &lt;Switch&gt;\n\n       {/************************************************/}\n        {/* &lt;Route path=\"/\" exact&gt;\n          &lt;WelcomeView /&gt;\n        &lt;/Route&gt; */}\n        &lt;Route\n          path=\"/\"\n          exact\n          render={() =&gt; (\n            &lt;RedirectRoute&gt;\n              &lt;WelcomeView /&gt;\n            &lt;/RedirectRoute&gt;\n          )}\n        /&gt;\n\n        {!isEmpty(checkInDataTest) &amp;&amp;\n          (isLateReasonNeeded === \"true\" || isLeaveReasonNeeded === \"true\") &amp;&amp; (\n            &lt;LateAttendence\n              id={checkInDataTest?.attendanceDetailId}\n              data={checkInDataTest?.attendanceIn}\n              leaveReasonPopUp={checkInDataTest?.isLeaveReasonNeeded}\n              leaveStartdate={checkInDataTest?.leaveStartDate}\n              leaveEndDate={checkInDataTest?.leaveEndDate}\n            /&gt;\n        )}\n       {/************************************************/}\n\n    )\n  }\n};\n</code></pre> Welcome.js<pre><code>export default function Welcome() {\n  const [userName, setUserName] = useState();\n  const { token } = useSelector((state) =&gt; state.auth);\n  const { checkDailyAttendenceResponse, checkDailyAttendenceResponseLoading } =\n    useSelector((state) =&gt; state.auth);\n  const { LimitedRoleDemo, isLimitedRoleMailBox } = useRoles();\n\n  // if (!isTokenExpired(token)) {\n  //   if (!isEmpty(checkDailyAttendenceResponse)) {\n  //     if (checkDailyAttendenceResponse?.isLateReasonNeeded === true) {\n  //       return (\n  //         &lt;LateAttendence\n  //           id={checkDailyAttendenceResponse?.attendanceDetailId}\n  //           data={checkDailyAttendenceResponse?.attendanceIn}\n  //           leaveReasonPopUp={checkDailyAttendenceResponse?.isLeaveReasonNeeded}\n  //           leaveStartdate={checkDailyAttendenceResponse?.leaveStartDate}\n  //           leaveEndDate={checkDailyAttendenceResponse?.leaveEndDate}\n  //         /&gt;\n  //       );\n  //     } else if (checkDailyAttendenceResponse?.isLateReasonNeeded === false) {\n  //       // return &lt;Redirect to=\"dashBoard\" /&gt;;\n  //       return (\n  //         &lt;Redirect\n  //           to={\n  //             LimitedRoleDemo\n  //               ? \"demoRoute\"\n  //               : isLimitedRoleMailBox\n  //               ? \"home\"\n  //               : \"dashBoard\"\n  //           }\n  //         /&gt;\n  //       );\n  //     }\n  //   }\n  // }\n\n  return (\n    &lt;div className=\"centered-view\"&gt;\n      &lt;div className=\"centered-container\"&gt;\n        &lt;LoginForm\n          userName={userName}\n          checkDailyAttendenceResponseLoading={\n            checkDailyAttendenceResponseLoading\n          }\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> Home/action.js<pre><code>export const attendenceLateReasonAdd = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(HOME_TYPES.ATTENDENCE_LATE_REASON_ADD));\n    const response = await homeServices.attendenceLateReasonAdd(body);\n    if (response?.isSuccess) {\n      const { data } = response;\n      dispatch(success(HOME_TYPES.ATTENDENCE_LATE_REASON_ADD, response?.data));\n      /************************************************************/\n      if (data) {\n        sessionStorage.setItem(\"isLateReasonNeeded\", JSON.stringify(false));\n        sessionStorage.setItem(\"isLeaveReasonNeeded\", JSON.stringify(false));\n      }\n      /************************************************************/\n    } else {\n      dispatch(error(response?.errorMessage));\n    }\n    dispatch(finish(HOME_TYPES.ATTENDENCE_LATE_REASON_ADD));\n  };\n};\n</code></pre> Redirect.jsx<pre><code>import { useSelector } from \"react-redux\";\nimport { isEmpty } from \"lodash\";\nimport { Redirect } from \"react-router-dom\";\n\nconst RedirectRoute = ({ children }) =&gt; {\n  const { token } = useSelector(({ auth }) =&gt; auth);\n\n  const isAuthenticated = isEmpty(token) ? false : true;\n\n  if (!isAuthenticated) {\n    return children;\n  }\n  return &lt;Redirect to=\"/dashboard\" /&gt;;\n};\n\nexport default RedirectRoute;\n</code></pre>"},{"location":"office/ispl/issue/#for-future","title":"FOR FUTURE","text":"<p>\ud83d\udea8 Option 2: Block Routing Entirely (Optional)</p> <p>You can programmatically block routing if needed, using a custom hook with React Router\u2019s <code>history.listen</code>:</p> useBlockNavigationIfLate.js<pre><code>import { useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { UserContext } from \"../context/UserContext\";\n\nconst useBlockNavigationIfLate = () =&gt; {\n  const history = useHistory();\n  const { isLateCheckIn } = useContext(UserContext);\n\n  useEffect(() =&gt; {\n    if (!isLateCheckIn) return;\n\n    const unblock = history.block((tx) =&gt; {\n      // Prevent route change\n      return false;\n    });\n\n    return () =&gt; unblock();\n  }, [history, isLateCheckIn]);\n};\n\nexport default useBlockNavigationIfLate;\n</code></pre> <p>Then call this hook in <code>App.js</code> or any layout component:</p> <pre><code>useBlockNavigationIfLate();\n</code></pre>"},{"location":"office/ispl/package/","title":"Package","text":""},{"location":"office/ispl/package/#api","title":"API","text":""},{"location":"office/ispl/package/#query-string","title":"query-string","text":"<pre><code>npm i query-string\n</code></pre> <pre><code>import queryString from 'query-string';\n</code></pre> Pictures Note <ul> <li>query-string</li> <li>What is Query String? What are its advantages and limitations? </li> </ul>"},{"location":"office/ispl/package/#reducer","title":"REDUCER","text":""},{"location":"office/ispl/package/#action","title":"ACTION","text":""},{"location":"office/ispl/package/#antd-message","title":"antd <code>message</code>","text":"<pre><code>import { message } from 'antd';\n</code></pre>"},{"location":"office/ispl/pdf/","title":"PDF","text":""},{"location":"office/ispl/pdf/#pdf","title":"PDF","text":""},{"location":"office/ispl/pdf/#test","title":"Test","text":"<pre><code>\"dependencies\": {\n    \"react\": \"^18.3.0\",\n    \"react-dom\": \"^18.3.0\",\n    \"react-pdf\": \"^9.2.1\"\n},\n</code></pre> <pre><code>import { useState } from \"react\";\nimport \"./App.css\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\npdfjs.GlobalWorkerOptions.workerSrc =\n  \"https://cdn.jsdelivr.net/npm/pdfjs-dist@4.8.69/build/pdf.worker.mjs\";\n\n// Set local worker path for Vite\npdfjs.GlobalWorkerOptions.workerSrc = \"/pdf.worker.mjs\";\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n\n  return (\n    &lt;&gt;\n      &lt;Document file=\"sample.pdf\" onLoadError={console.error}&gt;\n        &lt;Page pageNumber={pageNumber} /&gt;\n      &lt;/Document&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>\ud83d\udd25 In Vite, you do not use <code>process.env.PUBLIC_URL</code>. You just reference it directly as <code>/filename</code>.</p>"},{"location":"office/ispl/pdf/#updated","title":"Updated","text":"<pre><code>const AllFileViewer = (props) =&gt; {\n  const { file, height, width } = props;\n  const { token } = useSelector((state) =&gt; state.auth);\n\n  // UPDATED\n  const memoizedFile = useMemo(() =&gt; {\n    if (!file) return null;\n\n    return {\n      url: file,\n      httpHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n  }, [file, token]);\n\n  &lt;Document\n    // file={{\n    // url: \"https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf\",\n    //   withCredentials: true,\n    //   headers: { Authorization: `Bearer ${token}` },\n    // }}\n    // file={file}\n    file={memoizedFile}\n    onLoadSuccess={onDocumentLoadSuccess}\n    onClick={handleOpenFile}\n  &gt;\n    &lt;Page key={`page_${currentPage}`} pageNumber={currentPage} /&gt;\n  &lt;/Document&gt;;\n};\n</code></pre>"},{"location":"office/ispl/pdf/#cq","title":"CQ","text":""},{"location":"office/ispl/pdf/#usage","title":"Usage","text":"<pre><code>import AllFileViewer from \"components/Documents/allFileViewer\";\nimport { cqBaseUrl } from \"utils/config\";\n\nconst { token } = useSelector((state) =&gt; state.auth);\n\n&lt;AllFileViewer\n  file={file}\n  cqBaseUrl={cqBaseUrl}\n  token={token}\n  height={600}\n  width={900}\n/&gt;;\n</code></pre>"},{"location":"office/ispl/pdf/#code","title":"CODE","text":"<pre><code>\"pdfjs-dist\": \"^2.6.347\",\n\"react-pdf\": \"^4.2.0\",\n\n\"react\": \"^17.0.1\",\n\"react-dom\": \"^17.0.1\",\n\n\"redux\": \"^4.0.5\",\n</code></pre> allFileViewer.js<pre><code>import React, { useState } from \"react\";\nimport { Modal, Button, Space, Popconfirm } from \"antd\";\nimport {\n  EyeOutlined,\n  CloseOutlined,\n  LeftOutlined,\n  RightOutlined,\n  DownloadOutlined,\n  DeleteOutlined,\n  QuestionCircleOutlined,\n} from \"@ant-design/icons\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\n\npdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\n\nconst AllFileViewer = (props) =&gt; {\n  const {\n    file,\n    cqBaseUrl,\n    token,\n    height,\n    width,\n    type,\n    isShowFileName,\n    showDelete,\n    onDeleteClick,\n  } = props;\n\n  const [modalVisible, setModalVisible] = useState(false);\n  const [pdfLoaded, setPdfLoaded] = useState(false);\n  const [numPages, setNumPages] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // const isPdf = file.fileName.toLowerCase().endsWith(\".pdf\");\n  // const isImage = /\\.(jpg|jpeg|png|gif)$/i.test(file.fileName);\n  const isPdf = file?.displayFileName.toLowerCase().endsWith(\".pdf\");\n  const isImage = /\\.(jpg|jpeg|png|gif)$/i.test(file?.displayFileName);\n\n  const handleOpenFile = async () =&gt; {\n    setModalVisible(true);\n  };\n\n  const handleCloseModal = () =&gt; {\n    setModalVisible(false);\n  };\n\n  const onDocumentLoadSuccess = ({ numPages }) =&gt; {\n    setNumPages(numPages);\n    setPdfLoaded(true);\n  };\n\n  const handleNextPage = () =&gt; {\n    if (currentPage &lt; numPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const handlePreviousPage = () =&gt; {\n    if (currentPage &gt; 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const handleDownload = () =&gt; {\n    const link = document.createElement(\"a\");\n    link.href = `${cqBaseUrl}/${file.viewFileURL}${token}`;\n    link.target = \"_blank\";\n    link.download = \"downloaded.pdf\";\n    link.click();\n  };\n\n  return (\n    &lt;&gt;\n      &lt;div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-evenly\",\n        }}\n      &gt;\n        {showDelete &amp;&amp; (\n          &lt;Popconfirm\n            onConfirm={onDeleteClick}\n            title=\"Delete the file\"\n            description=\"Are you sure to delete this file?\"\n            icon={\n              &lt;QuestionCircleOutlined\n                style={{\n                  color: \"red\",\n                }}\n              /&gt;\n            }\n          &gt;\n            &lt;DeleteOutlined style={{ cursor: \"pointer\", marginRight: \"8px\" }} /&gt;\n          &lt;/Popconfirm&gt;\n        )}\n\n        &lt;EyeOutlined\n          style={{ cursor: \"pointer\", marginRight: \"8px\" }}\n          onClick={handleOpenFile}\n        /&gt;\n        &lt;DownloadOutlined onClick={handleDownload} /&gt;\n        &lt;div\n          className=\"hr_fileName\"\n          style={{\n            maxWidth: \"140px\",\n            textOverflow: \"ellipsis\",\n            color: \"#616161\",\n            overflow: \"hidden\",\n            marginLeft: \"6px\",\n            fontSize: 12,\n          }}\n        &gt;\n          {/* {file?.displayFileName.slice(0, 8) + file?.displayFileName.slice(-4)} */}\n          {isShowFileName === false\n            ? null\n            : file?.displayFileName.slice(0, 8) +\n              file?.displayFileName.slice(-4)}\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;Modal\n        visible={modalVisible}\n        title={\n          &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n            &lt;span&gt;Document Viewer&lt;/span&gt;\n            &lt;span onClick={handleCloseModal}&gt;\n              &lt;CloseOutlined /&gt;\n            &lt;/span&gt;\n          &lt;/div&gt;\n        }\n        footer={null}\n        closable={false}\n        onCancel={handleCloseModal}\n        width={width ? width : 900}\n      &gt;\n        {modalVisible &amp;&amp; (\n          &lt;&gt;\n            {isPdf ? (\n              &lt;div\n                style={{\n                  height: height ? `${height}px` : \"600px\",\n                  width: \"100%\",\n                  overflowX: \"scroll\",\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n                className=\"test\"\n              &gt;\n                &lt;Document\n                  file={`${cqBaseUrl}/${file.viewFileURL}${token}`}\n                  onLoadSuccess={onDocumentLoadSuccess}\n                  onClick={handleOpenFile}\n                &gt;\n                  &lt;Page key={`page_${currentPage}`} pageNumber={currentPage} /&gt;\n                &lt;/Document&gt;\n              &lt;/div&gt;\n            ) : isImage ? (\n              &lt;img\n                src={`${cqBaseUrl}/${file.viewFileURL}${token}`}\n                alt=\"File\"\n                style={{\n                  width: \"100%\",\n                  height: height ? `${height}px` : \"600px\",\n                  objectFit: \"contain\",\n                }}\n              /&gt;\n            ) : (\n              &lt;div&gt;Unsupported file type. You can download the file:&lt;/div&gt;\n            )}\n            &lt;Space\n              style={{\n                width: \"100%\",\n                justifyContent: \"space-between\",\n                marginTop: \"10px\",\n              }}\n            &gt;\n              {isPdf &amp;&amp; (\n                &lt;div&gt;\n                  &lt;Button\n                    onClick={handlePreviousPage}\n                    disabled={currentPage === 1}\n                    style={{ marginRight: \"8px\" }}\n                  &gt;\n                    &lt;LeftOutlined /&gt; Previous Page\n                  &lt;/Button&gt;\n                  &lt;Button\n                    onClick={handleNextPage}\n                    disabled={currentPage === numPages}\n                  &gt;\n                    Next Page &lt;RightOutlined /&gt;\n                  &lt;/Button&gt;\n                &lt;/div&gt;\n              )}\n\n              &lt;Button\n                onClick={handleDownload}\n                style={{ background: \"#0096FF\", color: \"white\" }}\n              &gt;\n                &lt;DownloadOutlined /&gt;\n                Download File\n              &lt;/Button&gt;\n            &lt;/Space&gt;\n          &lt;/&gt;\n        )}\n      &lt;/Modal&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default AllFileViewer;\n</code></pre>"},{"location":"office/ispl/pdf/#usefull-cdn-options-links","title":"Usefull CDN Options | Links","text":"<ul> <li>pdfjs-dist 4.8.69: pdf.workder.mjs</li> <li>jsDelivr: Working</li> <li>cdnjs: not working</li> </ul>"},{"location":"office/ispl/pdf/#reference","title":"Reference","text":"<ul> <li>mozzila pdf.js: Github</li> <li>Main Package: react-pdf</li> </ul>"},{"location":"office/ispl/validate-reason/","title":"Validate Reason Promise","text":""},{"location":"office/ispl/validate-reason/#validate-reason-cq","title":"Validate Reason CQ","text":""},{"location":"office/ispl/validate-reason/#component","title":"Component","text":"LateAttendance.js<pre><code>import { useWordChecker } from \"react-word-checker\";\n\nconst { words, isLoading, wordExists } = useWordChecker(\"en\");\n\n&lt;Form form={form} onFinish={onFinish}&gt;\n  &lt;div style={{ fontWeight: \"600\" }}&gt;Late Reason :&lt;/div&gt;\n  &lt;Form.Item\n    className=\"login--late__reason\"\n    rules={[\n      {\n        required: true,\n        message: \"Please justify the reason\",\n      },\n      {\n        validator: validateReason(10, 2, wordExists),\n      },\n    ]}\n    name=\"attendanceLateReason\"\n    // label=\"Late Reason\"\n  &gt;\n    &lt;TextArea rows={4} style={{ fontSize: \"15px\" }} /&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;;\n</code></pre>"},{"location":"office/ispl/validate-reason/#logic","title":"Logic","text":"validateReason.js<pre><code>// export const validateReason = (minChars, minWords) =&gt; ({\n//     validator: (_, value) =&gt; {\n//       const words = value.trim().split(/\\s+/);\n//       const characterCount = value.trim().length;\n//       const wordCount = words.length;\n\n//       if (characterCount &lt; minChars || wordCount &lt; minWords) {\n//         return Promise.reject(\n//           new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n//         );\n//       }\n//       return Promise.resolve();\n//     },\n//   });\n\nexport const validateReason = (minChars, minWords, wordExists) =&gt; {\n  return async (_, value) =&gt; {\n    if (!value || typeof value !== \"string\") {\n      return Promise.reject(new Error(\"Please enter a valid reason\"));\n    }\n\n    const cleanedValue = value.replace(/[^a-zA-Z\\s]/g, \"\").trim();\n    const words = cleanedValue.split(/\\s+/);\n    const characterCount = cleanedValue.length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n      return Promise.reject(\n        new Error(\n          `Please justify the reason with at least ${minChars} characters and ${minWords} words`\n        )\n      );\n    }\n\n    const allSame =\n      words.length &gt; 0 &amp;&amp; words.every((word) =&gt; word === words[0]);\n    if (allSame) {\n      return Promise.reject(\n        new Error(\"Please use meaningful and varied words\")\n      );\n    }\n\n    try {\n      const wordChecks = await Promise.all(\n        words.map((word) =&gt; wordExists(word.trim().toLowerCase()))\n      );\n\n      const invalidWords = wordChecks.filter((valid) =&gt; !valid);\n      const validWords = wordChecks.filter((valid) =&gt; valid);\n\n      if (validWords.length &lt;= 0) {\n        return Promise.reject(\n          new Error(\"Please use atleast one valid English words in your reason\")\n        );\n      }\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(new Error(\"Validation failed. Please try again.\"));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-noticeboard-after-4pm/","title":"Dashboard Model: show after 4pm","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-noticeboard-after-4pm/#dashboard-noticeboard-after-4pm-to-sent-all-users","title":"Dashboard Noticeboard after 4pm to sent all users","text":"<p>Abstract</p> old Codenew CodeAlternative Method DraggableHome.js<pre><code>const DraggableHome = forwardRef(({ navbarRef }, ref) =&gt; {\n\n\n{/* ADDED */}\nconst isAfter4PM = () =&gt; {\n    const now = moment();\n    const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0);\n    return now.isAfter(fourPM);\n};\n\nreturn (\n    &lt;&gt;\n    &lt;div className=\"dashboards dashing\" ref={ref}&gt;\n        &lt;Layout\n            ....\n        /&gt;\n        {noticeBoard?.totalCount === 0 ? (\n        \"\"\n        ) : (\n        &lt;&gt;\n            {!isEmpty(noticeBoard) &amp;&amp; (\n            &lt;&gt;\n                &lt;div\n                    style={{\n                        marginTop: \"-10px\",\n                        backgroundColor: \"white\",\n                        marginBottom: \"14px\",\n                        borderRadius: \"8px\",\n                    }}\n                &gt;\n                    &lt;div className=\"dashboard_notice_board_top\"&gt;\n                        &lt;div\n                            className=\"dashboard_notice_title\"\n                            style={{ width: \"4%\", marginLeft: \"5px\" }}\n                        &gt;\n                            Notice|\n                        &lt;/div&gt;\n                        &lt;marquee className=\"marquee_tag_dashboard\"&gt;\n                            {noticeBoard?.items?.map((data, i) =&gt; (\n                                &lt;span className=\"title_dashboard_notice\" key={i}&gt;\n                                {data?.title}\n                                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${data?.description}`}&lt;/span&gt;\n                                &lt;/span&gt;\n                            ))}\n                        &lt;/marquee&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* ADDED */}\n                {isAfter4PM() &amp;&amp; &lt;NoticeBoardModal noticeBoard={noticeBoard} /&gt;}\n            &lt;/&gt;\n            )}\n        &lt;/&gt;\n        )}\n    &lt;/&gt;\n    )\n});\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        console.log(\"xxx item xxx: \", item)\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;&gt;\n                    {/* &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt; */}\n\n                    &lt;Modal\n                        title={visibleItem?.title}\n                        visible={isModalVisible}\n                        onCancel={handleModalCancel}\n                        footer={null}\n                    &gt;\n                        &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                    &lt;/Modal&gt;\n                &lt;/&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\nimport moment from 'moment';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        // Function to check if current time is after 4 PM\n        const checkTimeToShowModal = () =&gt; {\n            const now = moment();\n            const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0); // 4 PM today\n            if (now.isAfter(fourPM)) {\n                setIsModalVisible(true);\n            } else {\n                setIsModalVisible(false);\n            }\n        };\n\n        checkTimeToShowModal(); // Initial check when component mounts\n\n        // Set interval to check the time every minute\n        const interval = setInterval(() =&gt; {\n            checkTimeToShowModal();\n        }, 60000); // Check every minute\n\n        return () =&gt; {\n            clearInterval(interval); // Clear interval on component unmount\n        };\n    }, []);\n\n    useEffect(() =&gt; {\n        // Update modal visibility based on noticeBoard\n        if (isModalVisible &amp;&amp; !isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n            } else {\n                setVisibleItem(null);\n            }\n        }\n    }, [isModalVisible, currentIndex, noticeBoard]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt;\n            )}\n            {isModalVisible &amp;&amp; (\n                &lt;Modal\n                    title={visibleItem?.title}\n                    visible={isModalVisible}\n                    onCancel={handleModalCancel}\n                    footer={null}\n                &gt;\n                    &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                &lt;/Modal&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/internal-message-only-system-to-show-in-tos/","title":"Internal Message: only system user to show","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/internal-message-only-system-to-show-in-tos/#internal-only-the-system-users-to-be-shown-in-internal-message-section","title":"Internal : Only the System Users to be shown in Internal Message section","text":"<p>after clicking select all option . only the Internal users are selected</p> <p>By Default all the users in included in internal section . If the user is not to be added in the internal section then it will be tagged as not inlcude in internal section . </p> <p>Tip</p> <p>/organizationStructure/userReportingManagerUserListing</p> <p><code>IsExcludedInternalMessage</code> should be present in the response</p> old CodeUpdated Code Email/Includes/ReplyChatBox.js<pre><code>useEffect(() =&gt; {\n    if (chatBox) {\n        if (selectTosInternal) {\n        let allParticipantsId = allParticipants?.map(\n            (participant) =&gt; participant?.appUserId\n        );\n        let newQuickMessageParticipantDtos = allParticipants?.map(\n            (participant) =&gt; ({\n            participantUserId: participant?.appUserId,\n            })\n        );\n\n        //added\n        let isExcludedParticipantDtos = allParticipants\n            .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n            .map(participant =&gt; participant?.appUserId);\n\n        setQuickMessageParticipantDtosTo(newQuickMessageParticipantDtos);\n        form.setFieldsValue({\n            // participantTos: allParticipantsId,\n            // added\n            participantTos: isExcludedParticipantDtos,\n        });\n        } else {\n        form.setFieldsValue({\n            participantTos: [],\n        });\n        }\n    }\n}, [selectTosInternal]);\n</code></pre> <pre><code>let isExcludedParticipantDtos = allParticipantsId\n  .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n  .map(participant =&gt; participant?.appUserId);\n\nform.setFieldsValue({ \n    participantTos: isExcludedParticipantDtos,\n})\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/re-sent-outbox-mail/","title":"Re-sent & Reset Mail in Outbox","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/re-sent-outbox-mail/#re-sent-mail-outbox","title":"Re-sent Mail outbox","text":"MailMessageCenterHeader.js<pre><code>// line-number: 1025\n\n{/* added */}\n{selectedMailTypeAndMailData?.typeSystemName === OUTBOX &amp;&amp; (\n    &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n        multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n        \"disabled\"\n        } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n        if (currentSelectedMailMessage?.id) {\n            dispatch(resetOutboxMailFailureCount(currentSelectedMailMessage?.id))\n        }\n        }}\n    &gt;\n        &lt;Image src={trash} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n        Resend\n        &lt;/p&gt;\n    &lt;/div&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n\n        if (response.isSuccess) {\n          message.success(\"Successfully updated company\");\n          dispatch(\n              success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n          );\n          // added here\n          await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n          dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/circular-planning-highlight-person-contact-list/","title":"Circularplanning Highlighted contact list","text":"<pre><code>git diff --name-only\n\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nconst Companies = ({\n    ...\n    // added\n    selectedCompanyAttentionToIds,\n}) =&gt; {\n\n    const cols = [\n        ...\n        {\n            title: \"Person Name\",\n            key: \"personFullName\",\n            render: (record) =&gt; {\n                // return record.personFullName == \" \"\n                //   ? \"No Person\"\n                //   : record.personFullName;\n                const isAttention = selectedCompanyAttentionToIds.includes(record?.contactPersonId);\n\n                return (\n                &lt;span style={{ color: isAttention ? 'red' : 'inherit' }}&gt;\n                    {record.personFullName || \"No Person\"}\n                &lt;/span&gt;\n                );\n            },\n        },\n        ...\n    ]\n}\n</code></pre> <pre><code>//  src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\nconst Tender = ({\n        ...\n    }) =&gt; {\n\n    // added\n    const [selectedCompanyAttentionToIds, setSelectedCompanyAttentionToIds] = useState([]);\n\n    const rowEventhandlerscompany = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                // added\n                let attentionTo = JSON.parse(record?.attentionTo);\n                if(!isEmpty(attentionTo)) {\n                    let id = attentionTo?.map((item) =&gt; item?.AttentionId);\n                    setSelectedCompanyAttentionToIds(id)\n                }\n            },\n        };\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;Tabs\n                className=\"global-tabs-wrapper tender-tabs-wrapper\"\n                defaultActiveKey=\"1\"\n                size=\"large\"\n                activeKey={selectedBusinessTabPaneKey}\n                onChange={handleTabChange}\n            &gt;\n                &lt;TabPane\n                    tab=\"Circular Planning\"\n                    key=\"7\"\n                    className={`summary-wrapper ${showChat &amp;&amp; \"chatOpen\"}`}\n                &gt;\n                &lt;Companies\n                    getDetails={getDetails}\n                    searchEmailTender={searchEmailTender}\n                    rowEventhandlers={rowEventhandlerscompany}\n                    companyId={contactCompanyId}\n                    emailReferenceId={emailReferenceId}\n                    selectedTenderRowId={selectedTenderRowId}\n                    isCircular={isCircularTabStatus}\n                    selectedBusinessTabPaneKey={selectedBusinessTabPaneKey}\n                    // added\n                    selectedCompanyAttentionToIds={selectedCompanyAttentionToIds}\n                /&gt;\n                &lt;/TabPane&gt;\n            &lt;/Tabs&gt;\n        &lt;/div&gt;\n    );\n}\n\n\nexport default Tender;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/","title":"Dashboard Daily Diary Sorting: Task Edit and Internal Message","text":"<p>Dashboard Daily Dairy Table Sorting in Title, Ref, Created date</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#solved","title":"Solved","text":"_dashboard.css<pre><code>.dashboard_task-daily .ant-table-column-sorters, \n.dashboard_task-daily &gt; .ant-table-column-sorters-with-tooltip &gt; .ant-table-column-sorters &gt; span:first-child  {\n  width: 100%;\n}\n</code></pre> todolist.js<pre><code>const columns = [\n    ...\n    {\n        // title: \"Tasks\",\n        title: \n            (\n                &lt;div\n\n                    style={{ \n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        width: \"100%\",  \n                    }}\n                &gt;\n                    &lt;span\n                        style={{\n                            width: \"100%\",\n                            textAlign: \"left\"\n                        }}\n                    &gt;Tasks&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"tasks\",\n            width: \"40%\",\n            // added\n            fixed: \"left\",\n            // sorter: true,\n            sorter: (a, b) =&gt; a.subject.localeCompare(b.subject),\n            ...\n    },\n    {\n        title: \n            (\n                &lt;div\n\n                style={{ \n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    width: \"100%\",  \n                }}\n                &gt;\n                &lt;span\n                    style={{\n                    width: \"100%\",\n                    textAlign: \"left\"\n                    }}\n                &gt;Ref&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"red\",\n            width: \"10%\",\n            // added\n            sorter: (a, b) =&gt; a.referenceCode.localeCompare(b.referenceCode),\n            ...\n    },\n    {\n      title: \n        (\n            &lt;div\n\n            style={{ \n                display: \"flex\",\n                justifyContent: \"space-between\",\n                width: \"100%\",  \n            }}\n            &gt;\n            &lt;span\n                style={{\n                width: \"100%\",\n                textAlign: \"left\"\n                }}\n            &gt;Created Date&lt;/span&gt;\n            &lt;/div&gt;\n        ),\n        // added\n        className: \"dashboard_task-daily\",\n        key: \"created\",\n        width: \"15%\",\n        // added\n        sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)),\n        ...\n    }\n]\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#example","title":"Example","text":""},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-date","title":"Using <code>Date</code>","text":"<pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; new Date(a.creationTime) - new Date(b.creationTime), // Custom sorter for creationTime\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>sorter: (a, b): This defines a custom sorting function for the creationTime. The function compares two values (<code>a</code> and <code>b</code>) based on the <code>creationTime</code>.</li> <li>new Date(a.creationTime) and new Date(b.creationTime):     The Date object converts the string <code>creationTime</code> into a JavaScript Date.     Subtracting one date from another returns the difference in milliseconds, which the sorter uses to determine the order.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-moment","title":"Using <code>moment</code>","text":"<p>Yes, you can use <code>Moment.js</code> to handle date parsing and comparison for sorting the <code>creationTime</code>. <code>Moment.js</code> provides a convenient way to handle dates, especially for formatting and parsing.</p> <pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)), // Custom sorter using Moment.js\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>moment(a.creationTime): This converts the <code>creationTime</code> into a Moment.js object.</li> <li>moment(a.creationTime).diff(moment(b.creationTime)):<ul> <li>The <code>.diff()</code> method compares the two dates and returns the difference in milliseconds.</li> <li>The <code>sorter</code> will use this difference to order the rows.</li> </ul> </li> </ul> Why Use Moment.js? <ul> <li>Flexibility: Moment.js provides more robust parsing, particularly when handling various date formats.</li> <li>Accuracy: It handles time zones and more advanced date operations if needed, which can be useful if your dates have additional complexity.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/","title":"Scrollable Issue and Flip","text":"<p>Tender list is not scrollable in tablet view after tab is changed</p> <p><code>Tender/Projects</code> in the Dashboard</p> _dasboard.scss<pre><code>/* page-num: 604 */\n\n.flip-card-front,\n.flip-card-back {\n  /* ISSUE position */\n  /* position: absolute; */\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n}\n</code></pre> <p>This generates new bug in the <code>Today's Appointments</code> dashboard which is scrollable.</p> <p><code>Today's Appointments</code> inline <code>flip-card</code> remove the <code>overflow property</code></p> event.js<pre><code>// line-num: 123\n\nreturn (\n    &lt;div\n      class=\"flip-card\"\n      style={\n        type === \"public\"\n            //   ? { height: \"340px\", overflow: \"auto\" }\n            //   : { height: \"363px\", overflow: \"auto\" }\n            ? { height: \"340px\" }\n            : { height: \"363px\" }\n      }\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#card-flip-issue","title":"Card Flip Issue","text":"tenders.js<pre><code>const [isFlipped, setIsFlipped] = useState(false);\n\nconst TenderLists = ({ classNames }) =&gt; {\n  return (\n    &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n      &lt;div\n        class=\"flip-card-inner\"\n        style={{ transform: `rotateY(${rotate * 180}deg)` }}\n      &gt;\n        &lt;div className=\"flip-card-front\"&gt;&lt;/div&gt;\n        &lt;div className=\"flip-card-back\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <pre><code>// Tenders/Projects\n&lt;h4 className=\"dashboards__body--title\"&gt;\n    {/* {tenderHistory\n        ? \"Tenders\"\n        : tenderFourth\n        ? \"Tenders\"\n        : \"Tenders\"} */}\n    Tenders/Projects\n    &lt;span\n        onClick={() =&gt; {\n            // setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n    &gt;\n        &lt;img\n        src=\"./assets/svg/toggle-arrow.svg\"\n        height={15}\n        alt=\"complete\"\n        /&gt;\n    &lt;/span&gt;\n&lt;/h4&gt;\n\n\n// Projects/Tenders\n &lt;div className=\"dashboards__bodyWrap\"&gt;\n    &lt;h4 className=\"dashboards__body--title\"&gt;\n        Projects/Tenders\n        &lt;span\n        onClick={() =&gt; {\n            setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n        &gt;\n        &lt;img\n            src=\"./assets/svg/toggle-arrow.svg\"\n            height={15}\n            alt=\"complete\"\n        /&gt;\n        &lt;/span&gt;\n    &lt;/h4&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#new","title":"NEW","text":"_dashboard.scss<pre><code>/* _dashboard.scss:1158 */\n\n@media only screen and (max-width: 1462px) {\n  .tour2 {\n    /* comment this */\n    /* height: 530px !important; */\n  }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#finally-solve-it","title":"Finally Solve it","text":"tenders.jsflip-card-frontflip-card-back <pre><code>const TenderLists = ({ classNames }) =&gt; {\n// added\nconst [isFlippedBack, setIsFlippedBack] = useState(false);\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                className=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n                &lt;div className=\"flip-card-front\"&gt;\n                    {/* UPDATED */}\n                &lt;/div&gt;\n\n                &lt;div className=\"flip-card-back\"&gt;\n                    {/* UPDATED */}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre> <pre><code>&lt;div className=\"flip-card-front\"&gt;\n    &lt;span\n        onClick={() =&gt; {\n            setRotate(rotate + 1);\n            // added\n            setIsFlippedBack((prev) =&gt; !prev);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n    &gt;&lt;/span&gt;\n\n    &lt;ul\n        className=\"dashboards__todolists\"\n        // added\n        style={{\n            position: !isFlippedBack ? \"relative\" : \"static\",\n            zIndex: !isFlippedBack ? 2 : \"auto\",\n        }}\n    &gt;&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div className=\"flip-card-back\"&gt;\n    &lt;div\n        style={{\n            backfaceVisibility: \"hidden\",\n        }}\n    &gt;\n        {/* ADDED */}\n        &lt;span\n            onClick={() =&gt; {\n                setRotate(rotate + 1);\n                // added\n                setIsFlippedBack((prev) =&gt; !prev);\n            }}\n            style={{\n                marginLeft: \"10px\",\n                height: \"30px\",\n                marginBottom: \"10px\",\n            }}\n        &gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#what-is-the-main-reason-that-is-blocking-scrolling","title":"What is the main reason that is blocking scrolling","text":"<p>The main reasons that can block scrolling on a webpage include:</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#1-css-properties","title":"1. CSS Properties:","text":"<ul> <li>Setting <code>overflow: hidden;</code> on the body or a container element will prevent scrolling.</li> <li><code>position: fixed; or position: absolute;</code> can lock the scroll position, especially when applied to body or html elements.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#2-modal-or-overlay-components","title":"2. Modal or Overlay Components:","text":"<ul> <li>Many libraries (like Ant Design, Bootstrap, etc.) often disable background scrolling when a modal, drawer, or overlay is open by modifying the body\u2019s scroll behavior.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#3-javascript-interference","title":"3. JavaScript Interference:","text":"<ul> <li>Adding event listeners to block default scrolling behavior, such as using <code>e.preventDefault()</code> in a <code>wheel</code> or <code>touchmove</code> event.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#4-browser-specific-issues","title":"4. Browser-Specific Issues:","text":"<ul> <li>Certain browser settings or extensions may impact scrolling functionality.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#5-viewport-meta-tags","title":"5. Viewport Meta Tags:","text":"<ul> <li>On mobile, incorrect settings for viewport (e.g., <code>user-scalable=no</code>) can interfere with scrolling.</li> </ul> <p>Checking these areas can help you resolve scrolling issues in your application. Would you like to check the code to identify the specific cause?</p>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/","title":"isCircular conditional rendering","text":""},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#conditionally-rendering-iscircular-using-logical-and","title":"Conditionally Rendering <code>isCircular</code> using <code>Logical AND</code>","text":"<p>Remove Template and Send for Approval from Tender Company Tab its only needed in Circular Planing</p> companies.js <p><code>OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> <pre><code>// 1278\n{isCircular &amp;&amp; (\n&lt;&gt;\n    &lt;div style={{ display: \"flex\" }}&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; {\n        {\n        setIsTemplateModalOpen(true)\n        };\n        dispatch(actionForGetAllCircularPlanningTemplate())\n    }\n    } style={{ marginRight: \"8px\" }}&gt;\n        Template\n    &lt;/Button&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n        Send for Approval\n    &lt;/Button&gt;\n    &lt;/div&gt;\n&lt;/&gt;)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#lifting-the-state-up","title":"Lifting the state up","text":"<p><code>OfficeResource/Reference/Tabs/TenderTabs/index.js</code></p> <pre><code>const Tender = ({})\n\nconst [isCircularTabStatus, setIsCircularTabStatus] = useState(false);\n\n\n// 149\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n\n    if (key === \"2\") {\n      tenderCommunication();\n      updateMailOriginState(\"communication\");\n      setIsCircularTabStatus(false);\n    } else if (key === \"3\") {\n      tenderCommunication();\n      updateMailOriginState(\"companies\");\n    } else if(key === \"7\") {\n      setIsCircularTabStatus(true);\n    }\n    else {\n      // console.log(\"I'm other tab\");\n      setIsCircularTabStatus(false);\n    }\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/","title":"RegExp Validation in Mail","text":""},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/#regex-validation-in-mail","title":"Regex validation in Mail","text":"<p>There is error while sending email with \" double quote in the email address.</p> ComposeEmailDrawer.js <pre><code>// pg: 812\n// const reg = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n// solved\nconst reg = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/","title":"Conditionally Showing Button","text":""},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/#showing-button-on-condition","title":"Showing Button on Condition","text":"<p>Save button display on yesterdays and todays date only for now and other edit buttons keep as it is for now.</p> <p>Solved</p> ParentChildren <pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const [selectedAdvancedSearchDate, setSelectedAdvancedSearchDate] = useState(moment().format('YYYY-MM-DD'));\n\n    const onAdvanSearchFinish = (values) =&gt; {\n        ...\n        setSelectedAdvancedSearchDate(selectedDate)\n        ...\n    }\n\n    const handleResetAdvancedSearch = () =&gt; {\n        ...\n        let todayDate = moment().format('YYYY-MM-DD');\n        setSelectedAdvancedSearchDate(todayDate);\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"dashboards__body--main\"&gt;\n                &lt;DailyDairy\n                ...\n                selectedAdvancedSearchDate={selectedAdvancedSearchDate}\n                setSelectedAdvancedSearchDate={setSelectedAdvancedSearchDate}\n                /&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p><code>Home/DashboardComponents/MainDashboard/DailyDairy/index.jsx</code></p> <pre><code>function DailyDairy (props) {\n\n    let {\n        data,\n        loading,\n        setSelectedRecordData,\n        setIsDailyDairyModalOpen,\n        showResetButton,\n        // added\n        selectedAdvancedSearchDate,\n        setSelectedAdvancedSearchDate,\n    } = props;\n\n\n    // added\n    const today = moment().format('YYYY-MM-DD');\n    const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');\n\n    const isValidDate = (date) =&gt; {\n        console.log(\"Date params: \", date);\n        return date === today || date === yesterday;\n    };\n    const isDateValid = selectedAdvancedSearchDate === today || selectedAdvancedSearchDate === yesterday;\n\n\n    return (\n        &lt;&gt;\n            {/* added  isDateValid */}\n            {isDateValid &amp;&amp; (\n                &lt;Content\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"end\",\n                        paddingTop: \"8px\",\n                    }}\n                &gt;\n                    {/* {!loading &amp;&amp; data != null &amp;&amp; !showResetButton &amp;&amp; !isEmpty(data.items) &amp;&amp; ( */}\n                    {!loading &amp;&amp; data != null  &amp;&amp; !isEmpty(data.items) &amp;&amp; (\n                        &lt;Button\n                            type=\"primary\"\n                            onClick={handleTodaySaveDiary}\n                            style={{\n                                padding: \"0px 10px\"\n                            }}\n                        &gt;\n                            Save\n                        &lt;/Button&gt;\n                    )}\n                &lt;/Content&gt;\n            )}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/tender-module-task-edit-and-im/","title":"Tender Module: Task Edit and Internal Message","text":"<p>In Tender Section : Task Section there is no edit and Message Section .</p> TodoList.js<pre><code>const ToDoLists = (props) =&gt; {\n    // added\n    const [showUpdateTask, setShowUpdateTask] = useState(false);\n    const [updateTaskRecord, setUpdateTaskRecord] = useState(false);\n\n    // setShowUpdateTask, setUpdateTaskRecord\n    const columns = getTodoColumns({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord });\n\n\n    // added\n    useEffect(() =&gt; {\n        if(showUpdateTask) {\n        console.log(\"true\")\n        // console.log(\"updateTaskRecord: \", updateTaskRecord)\n        form.setFieldsValue({\n            subject: updateTaskRecord?.subject,\n            // referenceId: updateTaskRecord,\n            // dueDate: updateTaskRecord,\n            // organizerEventPriorityId: updateTaskRecord,\n            // todoEventStatusId: updateTaskRecord,\n        })\n        } else {\n            // console.log(\"false\")\n            form.resetFields()\n        }\n    }, [showUpdateTask])\n\n    return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;Table\n          columns={columns}\n          // rowKey=\"appUserId\"\n          rowKey={(record) =&gt; record.id}\n          // rowClassName={setTaskClassName}\n          className={`organizer__table contact-table task-table toto-table`}\n          dataSource={dataSource}\n          loading={{\n            indicator: (\n              &lt;img src={LogoImage} height=\"auto\" width=\"50px\" alt=\"logo\" /&gt;\n            ),\n            spinning: todoEventsLoading,\n          }}\n          pagination={false}\n        /&gt;\n\n\n        {(showAddTask || showUpdateTask) &amp;&amp; (\n          &lt;Form\n            form={form}\n            name=\"basic\"\n            initialValues={{\n              remember: true,\n            }}\n            layout=\"inline\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            // initialValues={worker}\n            className=\"task__form \"\n          &gt;\n            &lt;div className=\"add-task-form-item\"&gt;\n              &lt;Form.Item\n                className=\"task-form-item\"\n                name=\"subject\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"  \",\n                  },\n                ]}\n              &gt;\n                &lt;Input\n                  placeholder=\"Please enter subject\"\n                  bordered={false}\n                  autoFocus={true}\n                /&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n            &lt;div className=\"add-task-form-item add-update-task-wrapper\"&gt;\n              &lt;Form.Item className=\"task-form-item task-action-wrapper task-action-right\"&gt;\n                &lt;Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CheckOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n              &lt;Form.Item className=\"task-form-item task-action-cross\"&gt;\n                &lt;Button\n                  type=\"dotted\"\n                  onClick={() =&gt; {\n                    // setShowAddTask(!showAddTask);\n                    setShowAddTask(false);\n                    setShowUpdateTask(false);\n                  }}\n                  bordered={false}\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CloseOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n          &lt;/Form&gt;\n        )}\n\n\n\n\n        {showAddTask ? (\n          \"\"\n        ) : (\n          &lt;Button\n            onClick={() =&gt; {\n              handleAddTask();\n              setShowUpdateTask(false);\n              form.resetFields();\n            }}\n            type=\"text\"\n            size=\"small\"\n          &gt;\n            &lt;span style={{ fontSize: 14 }}&gt; + Add Task&lt;/span&gt;\n          &lt;/Button&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> TodoColumns.js<pre><code>// added\n// setShowUpdateTask, setUpdateTaskRecord\nconst getTodoColumns = ({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord }) =&gt; {\nconst dispatch = useDispatch;\n  return [\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (record) =&gt; {\n        return (&lt;&gt;\n            &lt;EditTwoTone \n              onClick={() =&gt; {\n                setShowUpdateTask(true);\n                setShowAddTask(false);\n                setUpdateTaskRecord(record);\n              }}\n            /&gt;\n        &lt;/&gt;)\n      }\n    }\n  ];\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/","title":"Added Properties in Circular Mail","text":""},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/#overview","title":"Overview","text":"<p>Added IsCircularPlanning and CircularPlanningReferenceId properties while sending circular mail from tender module</p> TICKET ISSUE <p><code>#86eqr1jgz [in review] Added IsCircularPlanning and CircularPlanningReferenceId properties while sending circular mail from tender module</code></p> ComposeEmailDrawer.jsx<pre><code>const onFinish = async (centerTypeSystemName, isClose) =&gt; {\n    if () {\n\n    } else {\n      try {\n        let body = {\n          body: bodyData,\n           /* Added */\n          ...(applicationTypeStatus === \"tenderModule\" &amp;&amp; {\n            IsCircularPlanning: true,\n            CircularPlanningReferenceId:\n              persistTenderMailDataResp?.refCode?.[0]?.id || null,\n          }),\n        }\n      }\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/#donot-close-window-after-sending-mail","title":"DONOT CLOSE WINDOW AFTER SENDING MAIL","text":"<pre><code>useEffect(() =&gt; {\n  if (!isEmpty(composeEmailResp) &amp;&amp; closeWindow === \"newEmail\") {\n    setTimeout(() =&gt; {\n      // COMMENT THIS\n      //   window.close();\n      //   window.location.reload();\n    }, 1000);\n  }\n}, [composeEmailResp, closeWindow]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(composeCircularEmailResp)) {\n    // COMMENT THIS\n    // window.close();\n  }\n}, [composeCircularEmailResp]);\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/23-subsector-tendermodule/","title":"Sub Sector in tender Mail","text":"<p>Need to Add Sub Sector in Tender Section</p> <pre><code>src/services/redux/officeresource/business/action.js\nsrc/services/redux/officeresource/business/api.js\nsrc/services/redux/officeresource/business/reducer.js\nsrc/services/types.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/information/Summary.js\n</code></pre> Summary.jstypes.js <pre><code>import {\n    // added\n    getSubSectors,\n} from \"services/redux/officeresource/business/action\";\n\nconst [sectors, setSectors] = useState([]);\n// added\nconst [subSectors, setSubSectors] = useState([]);\nconst [selectedSectorsId, setSelectedSectorsId] = useState(\"\");\n\n\nconst handleSectorsCategory = (values, option) =&gt; {\n    setSelectedSectorsId(values);\n};\n\n// subsectors\nconst debouncedDispatchSectors = useCallback(\n    debounce((categoryId) =&gt; {\n        dispatch(getSubSectors({ subSector: categoryId }));\n    }, 500),\n    [dispatch]\n);\n\nuseEffect(() =&gt; {\n    if (!selectedSectorsId) return;\n\n    debouncedDispatchSectors(selectedSectorsId);\n}, [selectedSectorsId, debouncedDispatchSectors]);\n// endhere\n\nuseEffect(() =&gt; {\n    if (!isEmpty(subSectorsListingResponse)) {\n        setSubSectors(subSectorsListingResponse);\n    } else {\n        setSubSectors([]);\n    }\n}, [subSectorsListingResponse]);\n\n\nuseEffect(() =&gt; {\n    if (isEmpty(getDetails)) {\n        form.resetFields();\n        return;\n    } else {\n        setSelectedCategoryId(getDetails?.tenderTypeId);\n        // added\n        setSelectedSectorsId(getDetails?.sectorId);\n    }}\n)\n\n\nreturn (\n    &lt;&gt;\n        &lt;div className=\"global-form-group calc\"&gt;\n            &lt;div className=\"global-form-label\"&gt;\n              &lt;label&gt;\n                Sector&lt;span className=\"red-star\"&gt;*&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n              &lt;Form.Item\n                name=\"sectorId\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"\",\n                  },\n                ]}\n              &gt;\n                &lt;Select\n                  allowClear\n                  size=\"small\"\n                  showSearch={true}\n                  filterOption={(input, option) =&gt;\n                    option.children\n                      .toLowerCase()\n                      .indexOf(input.toLowerCase()) &gt;= 0\n                  }\n                  getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                  onChange={handleSectorsCategory}\n                &gt;\n                  {sectors.map((data, i) =&gt; (\n                    &lt;Option key={i} value={data.id}&gt;\n                      {data.sectorName}\n                    &lt;/Option&gt;\n                  ))}\n                &lt;/Select&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div className=\"global-form-group calc\"&gt;\n            &lt;div className=\"global-form-label\"&gt;\n              &lt;label&gt;Sub Sector&lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n              &lt;Form.Item\n                name=\"subSectorId\"\n                rules={[\n                  {\n                    required: false,\n                    message: \"\",\n                  },\n                ]}\n              &gt;\n                &lt;Select\n                  allowClear\n                  size=\"small\"\n                  showSearch={true}\n                  filterOption={(input, option) =&gt;\n                    option.children\n                      .toLowerCase()\n                      .indexOf(input.toLowerCase()) &gt;= 0\n                  }\n                  getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                &gt;\n                  {subSectors?.items?.map((data, i) =&gt; (\n                    &lt;Option key={i} value={data.id}&gt;\n                      {data.sectorName}\n                    &lt;/Option&gt;\n                  ))}\n                &lt;/Select&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/23-subsector-tendermodule/#misc","title":"Misc","text":"Summary.js<pre><code>const [selectedSectorsItem, setSelectedSectorsItem] = useState([]);\nconst [selectedCategoryItem, setSelectedCategoryItem] = useState([]);\n\nlet val = {\n    ...newValues,\n    subTenderTypeId: selectedCategoryItem,\n    subSectorId: selectedSectorsItem,\n}\n\n\nonChange={(values, option) =&gt; {\n    const selectedData = option.map((option) =&gt; ({\n        id: option.value,\n        tenderTypeName: option.children,\n    }));\n    setSelectedCategoryItem(selectedData);\n}}\n\nonChange={(values, option) =&gt; {\n    const selectedData = option.map((option) =&gt; ({\n        id: option.value,\n        tenderTypeName: option.children,\n    }));\n    setSelectedCategoryItem(selectedData);\n}}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/25-sub-category-in-tenderModule/","title":"Sub Category in tender Mail","text":"<pre><code>git diff --name-only\n\n\nsrc/services/redux/Reference/Tender/action.js\nsrc/services/redux/Reference/Tender/api.js\nsrc/services/redux/Reference/Tender/reducer.js\nsrc/services/types.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/information/Summary.js\n</code></pre> services/types.jsSummary.js <pre><code>export const REFERENCE__TYPES = {\n    // SUBTYPELISTING\n    GET_TENDER_SUBTYPE_LISTING: \"GET_TENDER_SUBTYPE_LISTING\",\n    GET_TENDER_SUBTYPE_LISTING_INIT: \"GET_TENDER_SUBTYPE_LISTING_INIT\",\n    GET_TENDER_SUBTYPE_LISTING_FINISH: \"GET_TENDER_SUBTYPE_LISTING_FINISH\",\n    GET_TENDER_SUBTYPE_LISTING_SUCCESS: \"GET_TENDER_SUBTYPE_LISTING_SUCCESS\",\n}\n</code></pre> <pre><code>const [subTypeListing, setSubTypeListing] = useState([]);\nconst [selectedCategoryId, setSelectedCategoryId] = useState(\"\");\n\n\n// subcategory\nconst debouncedDispatch = useCallback(\n    debounce((categoryId) =&gt; {\n        dispatch(tenderSubTypeListing({ subTender: categoryId }));\n        }, 500),\n    [dispatch]\n);\n\nuseEffect(() =&gt; {\nif (!selectedCategoryId) return;\n\n    debouncedDispatch(selectedCategoryId);\n\n}, [selectedCategoryId, debouncedDispatch]);\n// upto here\n\nuseEffect(() =&gt; {\n    if (!isEmpty(tenderSubTypeListingResponse)) {\n        setSubTypeListing(tenderSubTypeListingResponse);\n    } else {\n        setSubTypeListing([]);\n    }\n}, [tenderSubTypeListingResponse]);\n\n\nconst handleSelectCategory = (values, option) =&gt; {\n    setSelectedCategoryId(values);\n};\n\n\nuseEffect(() =&gt; {\nif (isEmpty(getDetails)) {\n  form.resetFields();\n  return;\n} else {\n   form.setFieldsValue({})}\n   {/* ADDED */}\n   setSelectedCategoryId(getDetails?.tenderTypeId);\n}, [getDetails, showEditForm])\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/","title":"Added Loader in Bussiness Model","text":""},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/#overview","title":"Overview","text":"Old CodeNew Code <pre><code>const handleOk = () =&gt; {\n    // console.log(\"uniqueNames\", uniqueNames);\n    // setComposeIfReference(null);\n    if (!isEmpty(uniqueNames)) {\n        if (multipleSelectedEmail &amp;&amp; multipleSelectedEmail.length &gt; 0) {\n            let val = [];\n            let body = {\n                messageCenterIds: multipleSelectedEmail?.map((x) =&gt; {\n                    // return x?.id;\n                    return x?.instanceMainMessageCenterId;\n                }),\n                referenceCodes: uniqueNames,\n            };\n\n            document.querySelectorAll(\".email-list-checkbox\").forEach((item) =&gt; {\n                if (item.checked) {\n                    return (item.checked = false);\n                }\n            });\n            // dispatch(mailReferenceTagMultipleUpdate(val));\n            dispatch(mailReferenceTagMultipleUpdate(body));\n            deselectCheckboxFunction();\n        } else {\n            let val = {\n                tenderDtos: uniqueNames.map((tenderCode) =&gt; ({\n                    messageCenterId:\n                    !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                    instanceMessageCenterPagination?.instanceMainMessageCenterId,\n                    referenceCode: tenderCode,\n                })),\n            };\n            dispatch(\n                mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n            );\n            // history.push(\"/email-compose?applicationType=forward\")\n            if (composeIfReferenceValue === \"replyAll\") {\n                window.open(`/#/email-compose?applicationType=replyall`, \"_blank\");\n            } else if (\n                !!composeIfReferenceValue &amp;&amp;\n                composeIfReferenceValue !== \"replyAll\"\n            ) {\n                window.open(\n                    `/#/email-compose?applicationType=${composeIfReferenceValue}`,\n                    \"_blank\"\n                );\n            }\n        }\n    } else if (isEmpty(uniqueNames)) {\n        let val = {\n            tenderDtos: [\n            {\n                messageCenterId:\n                !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                instanceMessageCenterPagination?.id,\n                referenceCode: null,\n            },\n            ],\n        };\n        dispatch(\n            mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n        );\n    }\n    // setTenderData([]);\n    // setProjectData([]);\n    // setOthersData([]);\n    setShowBusinessModal(false);\n};\n</code></pre> <p>After Adding Loader</p> views/Email/Includes/BusinessModal.js<pre><code>const [loading, setLoading] = useState(false);\n\nconst { mailReferenceUpdateRespoonseLoading } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\nconst { multipleReferenceUpdateLoading } = useSelector(\n    (state) =&gt; state.multipleSelectedEmail\n);\n\nconst handleOk = async () =&gt; {\n    setLoading(true);\n    // wrap with try, catch, finally and aded async await in handleOk button\n    try {\n        if (!isEmpty(uniqueNames)) {\n            if (multipleSelectedEmail &amp;&amp; multipleSelectedEmail.length &gt; 0) {\n                let val = [];\n                let body = {\n                    messageCenterIds: multipleSelectedEmail?.map((x) =&gt; {\n                        return x?.instanceMainMessageCenterId;\n                    }),\n                    referenceCodes: uniqueNames,\n                };\n\n                document.querySelectorAll(\".email-list-checkbox\").forEach((item) =&gt; {\n                    if (item.checked) {\n                        return (item.checked = false);\n                    }\n                });\n                // dispatch(mailReferenceTagMultipleUpdate(val));\n                await dispatch(mailReferenceTagMultipleUpdate(body));\n                deselectCheckboxFunction();\n            } else {\n                let val = {\n                    tenderDtos: uniqueNames.map((tenderCode) =&gt; ({\n                        messageCenterId:\n                        !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                        instanceMessageCenterPagination?.instanceMainMessageCenterId,\n                        referenceCode: tenderCode,\n                    })),\n                };\n                await dispatch(\n                    mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n                );\n                // history.push(\"/email-compose?applicationType=forward\")\n                if (composeIfReferenceValue === \"replyAll\") {\n                    window.open(`/#/email-compose?applicationType=replyall`, \"_blank\");\n                } else if (\n                    !!composeIfReferenceValue &amp;&amp;\n                    composeIfReferenceValue !== \"replyAll\"\n                ) {\n                    window.open(\n                        `/#/email-compose?applicationType=${composeIfReferenceValue}`,\n                        \"_blank\"\n                    );\n                }\n            }\n        } else if (isEmpty(uniqueNames)) {\n            let val = {\n                tenderDtos: [\n                {\n                    messageCenterId:\n                    !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                    instanceMessageCenterPagination?.id,\n                    referenceCode: null,\n                },\n                ],\n            };\n            dispatch(\n                mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n            );\n        }\n    } catch (err) {\n        console.log(err);\n    } finally {\n        setShowBusinessModal(false);\n        setLoading(false);\n    }\n};\n\nconst handleCancel = () =&gt; {\n    ...\n    setLoading(false);\n}\n\nreturn (\n    &lt;Modal\n    className=\"modal popup-wrapper tender-ref-model\"\n    title={inputTitle()}\n    visible={showBusinessModal || emailBusinessModal}\n    closable={false}\n    onOk={handleOk}\n    onCancel={handleCancel}\n    footer={[\n        &lt;Button key=\"cancel\" onClick={handleCancel}&gt;\n        Cancel\n        &lt;/Button&gt;,\n        &lt;Button key=\"ok\" type=\"primary\" onClick={handleOk} loading={loading}&gt;\n        OK\n        &lt;/Button&gt;,\n    ]}\n    &gt;\n        {/* ... */}\n    &lt;/Modal&gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/#theory","title":"Theory","text":"<p>The footer buttons, such as the \"OK\" and \"Cancel\" buttons, are usually rendered by default in an Ant Design <code>&lt;Modal&gt;</code> component. However, if you're not seeing them, it's possible that they are either customized or omitted.</p> <p>In your code snippet:</p> <pre><code>&lt;Modal\n  className=\"modal popup-wrapper tender-ref-model\"\n  title={inputTitle()}\n  visible={showBusinessModal || emailBusinessModal}\n  closable={false}\n  onOk={handleOk}\n  onCancel={handleCancel}\n/&gt;\n</code></pre> <p>Ant Design's <code>&lt;Modal&gt;</code> component typically includes the OK and Cancel buttons by default unless you override the <code>footer</code> prop.</p> <p>If you want to explicitly define or customize the footer buttons, you can pass a <code>footer</code> prop to the <code>&lt;Modal&gt;</code> like this:</p> <p>Example of customized footer with \"OK\" and \"Cancel\" buttons:</p> ExampleExplanation <pre><code>&lt;Modal\n    className=\"modal popup-wrapper tender-ref-model\"\n    title={inputTitle()}\n    visible={showBusinessModal || emailBusinessModal}\n    closable={false}\n    onOk={handleOk}\n    onCancel={handleCancel}\n    footer={[\n        &lt;Button key=\"cancel\" onClick={handleCancel}&gt;\n            Cancel\n        &lt;/Button&gt;,\n        &lt;Button key=\"ok\" type=\"primary\" onClick={handleOk}&gt;\n            OK\n        &lt;/Button&gt;\n    ]}\n/&gt;\n</code></pre> <ul> <li><code>footer</code>: This prop allows you to customize or remove the default footer buttons. By default, Ant Design renders \"OK\" and \"Cancel\" buttons, but by passing your own JSX to <code>footer</code>, you can change their appearance, actions, or even remove them.</li> <li><code>Button</code>: You can add custom buttons in the <code>footer</code> array, and bind them to your event handlers (<code>onClick={handleOk}</code> and <code>onClick={handleCancel}</code>).</li> </ul> <p>In the code above, if you want to keep the default behavior, you can leave out the <code>footer</code> prop entirely, and the modal will show the default \"OK\" and \"Cancel\" buttons. If you don't want any footer at all, set <code>footer={null}</code>.</p>"},{"location":"office/ispl/clickup/2024/november/adding-hyperlink-in-internal-toolbar/","title":"Adding HyperLink in Toolbar","text":"<p>fsadf</p> src/views/Email/Includes/ReplyChatBox.js<pre><code>init={{\n    plugins: \"lists advlist link\",\n    toolbar: \"fontselect fontsizeselect backcolor forecolor bold | italic | underLine lineheight |  strikethrough alignleft aligncenter alignright |  bullist numlist | link\",\n}}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/mail-mulitple-reference-issue/","title":"Selecting multiple mail Ref Issue","text":""},{"location":"office/ispl/clickup/2024/november/mail-mulitple-reference-issue/#selecting-multiple-mail-and-adding-reference-tags-is-not-working","title":"Selecting multiple mail and adding reference tags is not working","text":"src/views/Email/Includes/BusinessModal.js<pre><code>const handleOk = () =&gt; {\n  // Commented it\n  // setComposeIfReference(null);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/","title":"Circular Planning Select Debug","text":""},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-tender-module","title":"For Tender Module","text":"<p>Circular Planning Edit Only</p> oldUpdated Companies.js<pre><code>// Edit\nconst handleCircularEdit = (record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    const selectedAttendees = attentionToArray.map((item) =&gt; item.AttentionTo) || [];\n\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: selectedAttendees || [],\n        mailTo: mailAddressss || [],\n    });\n\n    if (record?.contactCompanyId) {\n        dispatch(\n            getContactPersonPagination({\n            CompanyId: record?.contactCompanyId,\n            })\n        );\n        dispatch(getCompanyorPersonEmailAddess(null, record?.contactCompanyId));\n    }\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n};\n</code></pre> <p>Update with <code>useCallback</code> and <code>Promise</code></p> <pre><code>// Edit\nconst handleCircularEdit = useCallback(async(record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setSelectedAttendees(attentionToArray)\n\n    if (record?.contactCompanyId) {\n        try {\n            await Promise.all([\n            dispatch(\n                getContactPersonPagination({\n                CompanyId: record.contactCompanyId,\n                })\n            ),\n            dispatch(getCompanyorPersonEmailAddess(null, record.contactCompanyId)),\n            ]);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: attentionToArray &amp;&amp; attentionToArray.map((item) =&gt; item.AttentionTo) || [],\n        mailTo: mailAddressss || [],\n    });\n\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n}, [dispatch, formCircularEdit]);\n</code></pre> <pre><code>&lt;Option\n    label={option.label}\n    key={option.value}\n    // value={option.label}\n    value={option.value}\n&gt;\n    {option.label}\n&lt;/Option&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-template-edit","title":"For Template <code>Edit</code>","text":"EditCompanyModal.js<pre><code>return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Edit Circular Planningxxx\"\n                visible={isCircularEditVisible}\n                onCancel={() =&gt; {\n                    setIsCircularEditVisible(false);\n                    setValueRadioAddCompany(null);\n                    form.resetFields();\n                }}\n                footer={null}\n            &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/companies-select-debug/","title":"companies.js Debug Example","text":"Companies.js<pre><code>// Edit\nconst handleCircularEdit = useCallback(\n  async (record) =&gt; {\n    if (!record) return;\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setIsCircularEditVisible(true);\n    setSelectedAttendees(attentionToArray);\n\n    let selectedPersonIds =\n      attentionToArray &amp;&amp;\n      attentionToArray?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n      }));\n\n    if (record?.contactCompanyId) {\n      try {\n        await Promise.all([\n          dispatch(\n            getContactPersonPagination({\n              CompanyId: record.contactCompanyId,\n            })\n          ),\n          dispatch(\n            getCompanyorPersonEmailAddess(\n              selectedPersonIds,\n              record.contactCompanyId\n            )\n          ),\n        ]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n\n    formCircularEdit.setFieldsValue({\n      CompanyName: record?.partyName || \"\",\n      contactCompanyId: record?.contactCompanyId || \"\",\n      attendees:\n        (attentionToArray &amp;&amp;\n          attentionToArray.map((item) =&gt; item.AttentionTo)) ||\n        [],\n      mailTo: mailAddressss || [],\n    });\n\n    switch (record?.modeofCommunication) {\n      case \"Email\":\n        setValueRadioAddCompany(\"1\");\n        break;\n      case \"Facebook\":\n        setValueRadioAddCompany(\"2\");\n        break;\n      case \"Whatsapp\":\n        setValueRadioAddCompany(\"3\");\n        break;\n      case \"Twitter\":\n        setValueRadioAddCompany(\"4\");\n        break;\n      case \"Other\":\n        setValueRadioAddCompany(\"5\");\n        break;\n      default:\n        setValueRadioAddCompany(\"1\");\n    }\n  },\n  [dispatch, formCircularEdit]\n);\n\nconst columns = [\n  {\n    title: \"Action\",\n    key: \"action\",\n    align: \"center\",\n    fixed: \"right\",\n    render: (record) =&gt; (\n      &lt;&gt;\n        &lt;Space size=\"small\"&gt;\n          &lt;PlusCircleTwoTone\n            onClick={() =&gt; {\n              setModalRemark(true);\n              setCompany(record);\n            }}\n            style={{ marginRight: \"8px\" }}\n          /&gt;\n          &lt;EditOutlined\n            style={{ marginRight: \"8px\" }}\n            onClick={() =&gt; {\n              handleCircularEdit(record);\n              setSelectedCompanyId(record?.contactCompanyId);\n            }}\n          /&gt;\n          {isTenderCompanyAdmin ? (\n            &lt;Popconfirm\n              title=\"Are you sure you want to delete this item?\"\n              onConfirm={() =&gt; handleDeleteRecord(record)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            &gt;\n              &lt;DeleteOutlined /&gt;\n            &lt;/Popconfirm&gt;\n          ) : null}\n        &lt;/Space&gt;\n      &lt;/&gt;\n    ),\n    width: 15,\n  },\n];\n\nconst debounceAttentiontoDispatch = useCallback(\n  debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n    dispatch(\n      getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId)\n    );\n  }, 300),\n  [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n  const selectedData = options\n    .map((option) =&gt; ({\n      AttentionTo: option.props.children || \"Unknown\",\n      AttentionId: option.key || null,\n    }))\n    .filter((item) =&gt; item.AttentionId);\n\n  setSelectedAttendees(selectedData);\n\n  const selectedPersonIds =\n    selectedData &amp;&amp;\n    selectedData?.map((item) =&gt; ({\n      contactPersonIds: item?.AttentionId,\n    }));\n\n  if (selectedPersonIds.length &gt; 0 &amp;&amp; selectedCompanyId) {\n    debounceAttentiontoDispatch(selectedPersonIds, selectedCompanyId);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/","title":"Add Company Email Modal","text":"<pre><code>git diff --name-only\n\nsrc/components/AddCompany/AddCompanyModal.js\nsrc/services/redux/Reference/action.js\nsrc/services/redux/Reference/api.js\nsrc/services/types.js\n</code></pre> ComponentActionAPITYPE AddCompanyModal.js<pre><code>const [formAddCompanyEmail] = Form.useForm();\nconst [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n\nconst handleAddCompanyEmailModalClose = () =&gt; {\n    formAddCompanyEmail.resetFields();\n    setIsAddCompanyEmailModalOpen(false);\n}\n\nconst onFinishAddCompanyEmail = async(values) =&gt; {\n    let body = {\n        companyId: selectedCompanyId,\n        email: values?.newEmail ?? ''\n    }\n\n    setIsAddCompanyEmailModalLoading(true);\n\n    try {\n        if (body?.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            // Call handleAddCompanyEmailModalClose only if dispatch is successful\n            handleAddCompanyEmailModalClose();\n        }\n    } catch (err) {\n        console.log(\"Error: \", err)\n    } finally {\n        setIsAddCompanyEmailModalLoading(false);\n    }\n}\n\nreturn (\n    &lt;&gt;\n        &lt;Modal\n            title=\"Add Compay Email\"\n            visible={isAddCompanyEmailModalOpen}\n            footer={null}\n            onCancel={handleAddCompanyEmailModalClose}\n        &gt;\n            &lt;Form\n                form={addCompanyEmail}\n                onFinish={onFinishAddCompanyEmail}\n            &gt;\n                &lt;Form.Item\n                    label=\"Email Addresss\"\n                    name=\"newEmail\"\n                    rules={[\n                        { \n                            required: true,\n                            message: 'Please enter the company email!',\n                        },\n                        {\n                            pattern: emailRegex,\n                            message: 'Please enter a valid email address!',\n                        },\n                    ]}\n                &gt;\n                    &lt;Input\n                        placeholder=\"Enter company email\"\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={isAddCompanyEmailModalLoading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>export const actionForAddCompanyOrContactPersonEmailAddById = (body) =&gt; {\n    return async(dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.ADD_COMPANY_EMAIL));\n        const response = await referencesService.addCompanyOrContactPersonEmailAddById(body);\n\n        try {\n            if(response.isSuccess) {\n                message.success(\"Saved Mail Address\")\n                dispatch(success(REFERENCE__TYPES.ADD_COMPANY_EMAIL, response.data));\n            } else if(!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch (err) {\n            throw err;\n        }\n\n        dispatch(finish(REFERENCE__TYPES.ADD_COMPANY_EMAIL))\n    }\n}\n</code></pre> <pre><code>// add company email address\naddCompanyOrContactPersonEmailAddById(body) {\n    let url = `${appBaseUrl}/referenceManagement/companyOrContactPersonEmailAddById`;\n    let data = postService(url, body);\n    return data;\n}\n</code></pre> types.js<pre><code>// company email add\nADD_COMPANY_EMAIL: \"ADD_COMPANY_EMAIL\",\nADD_COMPANY_EMAIL_INIT: \"ADD_COMPANY_EMAIL_INIT\",\nADD_COMPANY_EMAIL_SUCCESS: \"ADD_COMPANY_EMAIL_SUCCESS\",\nADD_COMPANY_EMAIL_FINISH: \"ADD_COMPANY_EMAIL_FINISH\", \n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/#explanation","title":"Explanation","text":"<p>To ensure that <code>handleAddCompanyEmailModalClose</code> is only called if the dispatch action succeeds, you need to move that call inside the <code>try</code> block but only after the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line. This way, it will only be executed if the dispatch action completes successfully.</p> <p>Here's how you can modify your code:</p> <pre><code>try {\n    if (body?.companyId) {\n        await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n        // Call handleAddCompanyEmailModalClose only if dispatch is successful\n        handleAddCompanyEmailModalClose();\n    }\n} catch (err) {\n    console.log(\"Error: \", err);\n} finally {\n    setIsAddCompanyEmailModalLoading(false);\n}\n</code></pre> <p>In this updated version:</p> <ul> <li>The <code>handleAddCompanyEmailModalClose</code> function is called only if the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line executes without throwing an error.</li> <li>The <code>finally</code> block ensures that <code>setIsAddCompanyEmailModalLoading(false)</code> will be called regardless of whether the <code>try</code> block succeeds or fails, ensuring proper cleanup.</li> </ul>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/","title":"Conditionally Rendering Button","text":"<p>Only render the <code>Send for Approval</code> Button if <code>isApproved</code>  is <code>false</code></p> <p>Tender Module &gt; Circular Planning Tab <code>Button</code></p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#solution","title":"Solution","text":"Companies.js<pre><code>{!getDetails?.circularPlanningApprovedStatusDto?.isApproved &amp;&amp; (\n    &lt;Button\n        type=\"primary\"\n        onClick={() =&gt; setIsCircularModalOpen(true)}\n    &gt;\n        Send for Approval\n    &lt;/Button&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#other-changes-in-companiesjs","title":"Other Changes in <code>Companies.js</code>","text":"Old CodeNew Code Companies.js<pre><code>useEffect(() =&gt; {\n    if (isCircular) {\n        dispatch(\n            actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n            })\n        );\n    } else {\n        dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Here\u2019s a refined version of your <code>useEffect</code>, with additional checks and comments:</p> Companies.js<pre><code>useEffect(() =&gt; {\n    if (searchEmailTender) { // Check if searchEmailTender is defined\n        if (isCircular) {\n            dispatch(\n                actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n                })\n            );\n        } else {\n            dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n        }\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Additional Tips</p> <ul> <li> <p>Add Error Handling: If the dispatch actions involve network requests or asynchronous operations, consider adding error handling to manage failed requests or responses.</p> </li> <li> <p>Memoize Callback Functions: If <code>dispatch</code> is a function passed down from a parent component or context, ensure that it is memoized to avoid unnecessary re-renders or effect triggers.</p> </li> <li> <p>Use Custom Hook: If you find yourself using similar logic in multiple places, consider creating a custom hook to encapsulate this effect logic.</p> </li> </ul> <p>By addressing these points and ensuring that all values and functions used in the useEffect are correctly defined and handled, you should be able to avoid bugs and ensure the effect works as intended. If you encounter any specific issues, providing additional details or error messages can help in further diagnosing the problem.</p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#improvement","title":"Improvement","text":"ExampleUsing Moment Companies.js<pre><code>const tooltipMessage = \n    !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${new Date(getDetails.circularPlanningApprovedStatusDto.approveDate).toLocaleDateString()}`\n    : 'Not yet approved';\n\nconst isButtonDisabled = getDetails?.isCircularPlanningApprovalRequestSent !== false;\n\n\nreturn (\n    &lt;&gt;\n        &lt;Tooltip\n            title={tooltipMessage}\n        &gt;\n            &lt;Button\n                type=\"primary\"\n                onClick={() =&gt; setIsCircularModalOpen(true)}\n                disabled={isButtonDisabled}\n            &gt;\n                Send for Approval\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>import moment from 'moment'; // Import moment\n\nconst tooltipMessage = !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${moment(getDetails.circularPlanningApprovedStatusDto.approveDate).format('MMMM D, YYYY')}`\n    : 'Not yet approved';\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/","title":"Converting radio to select","text":""},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#converting-the-radio-to-select","title":"Converting the <code>radio</code> to <code>select</code>","text":"AddCompanyModal.js<pre><code>// changes the number to strings.\nconst [valueRadioAddCompany, setValueRadioAddCompany] = useState('1');\n\n\nconst onChangeAddCompany = (value) =&gt; {\n    setValueRadioAddCompany(value);\n    setIsTemplateModalOpen(true);\n};\n\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n        remarks:\n            valueRadioAddCompany === '1'\n                ? \"Email\"\n                : valueRadioAddCompany === '2'\n                ? \"Facebook\"\n                : valueRadioAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueRadioAddCompany === '4'\n                ? \"Twitter\"\n                : valueRadioAddCompany === '5'\n                ? \"Other\"\n                : null,\n    };\n// ...\n// changes the number to strings.\n}\n\n\n&lt;Form.Item\n    label=\"Moc\"\n&gt;\n    &lt;Select\n        value={valueRadioAddCompany}\n        onChange={onChangeAddCompany}\n        defaultValue=\"1\"\n    &gt;\n        &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n        &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n        &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n        &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n        &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#to-convert-your-radio-buttons-into-a-select-component-using-ant-design-antd-you-can-follow-these-steps","title":"To convert your Radio buttons into a Select component using Ant Design (antd), you can follow these steps:","text":"<ol> <li> <p>Use the <code>Select</code> component: Replace the <code>Radio.Group</code> with <code>Select</code> and update your <code>onFinishAddCompany</code> function to handle the selected value from the <code>Select</code> component.</p> </li> <li> <p>Set the default value: You can set the default value to \"Email\" using the <code>defaultValue</code> prop of the <code>Select</code> component.</p> </li> </ol> <p>Here\u2019s how you can convert the Radio buttons to a Select component and ensure \"Email\" is the default selection:</p> CodeExplanation <pre><code>import React, { useState } from 'react';\nimport { Form, Select, Space } from 'antd';\n\nconst { Option } = Select;\n\nconst DynamicForm = () =&gt; {\n    const [valueSelectAddCompany, setValueSelectAddCompany] = useState('1');\n\n    const handleSelectChange = (value) =&gt; {\n        setValueSelectAddCompany(value);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n            remarks:\n                valueSelectAddCompany === '1'\n                ? \"Email\"\n                : valueSelectAddCompany === '2'\n                ? \"Facebook\"\n                : valueSelectAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueSelectAddCompany === '4'\n                ? \"Twitter\"\n                : valueSelectAddCompany === '5'\n                ? \"Other\"\n                : null,\n            };\n        console.log('Remarks Data:', remarksData);\n    };\n\n    return (\n        &lt;Form onFinish={onFinishAddCompany} layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Moc\"&gt;\n                &lt;Select\n                    value={valueSelectAddCompany}\n                    onChange={handleSelectChange}\n                    defaultValue=\"1\" // Default value set to '1' which corresponds to \"Email\"\n                &gt;\n                    &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n                    &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n                    &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n                    &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n                    &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n            &lt;Form.Item&gt;\n                &lt;Space&gt;\n                    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n                &lt;/Space&gt;\n            &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n    );\n};\n\nexport default DynamicForm;\n</code></pre> <ol> <li> <p><code>Select</code> Component: Replaces the <code>Radio.Group</code> with a <code>Select</code> component, where each option corresponds to the previous radio button values.</p> </li> <li> <p><code>defaultValue</code>: Sets the default selected value. In this case, it is set to <code>\"1\"</code>, which corresponds to \"Email\".</p> </li> <li> <p><code>handleSelectChange</code>: Function to handle changes in the select value and update the state accordingly.</p> </li> <li> <p><code>onFinishAddCompany</code>: Updated to handle the <code>valueSelectAddCompany</code> state, which stores the currently selected value.</p> </li> <li> <p><code>Option</code> Component: Represents each item in the select dropdown.</p> </li> </ol> <p>By making these changes, your form will now use a <code>Select</code> component with \"Email\" as the default selected option, providing a cleaner and more flexible approach for selecting among multiple options.</p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/","title":"CSS Scrolling Block Issue","text":"<p>In dashboard of smaller screen not able to yo scroll tender list </p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#solution","title":"Solution","text":"<p>Dasboard Module &gt; Tenders/Projects <code>Tab</code></p> scssjsx _dashboard.scss<pre><code>/* added this line of code */\n\n.flip-card-front .dashboards__todolists {\n    position: relative;\n    overflow: auto;\n    z-index: 999;\n}\n</code></pre> <p><code>src/views/Home/tenders.js</code></p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#source-of-issue","title":"Source Of Issue","text":"<p>Here are the top 5 main issues that can block scrolling on a webpage, along with brief documentation on each:</p> <ol> <li> <p>CSS <code>overflow: hidden</code></p> <p>Description: Sets the <code>overflow</code> property to <code>hidden</code> on an element or <code>body</code>, preventing scrolling.</p> <pre><code>body {\n    overflow: hidden; /* Disables scrolling */\n}\n</code></pre> <p>Documentation: Use <code>overflow: auto</code> or <code>scroll</code> to re-enable scrolling as needed.</p> </li> <li> <p>JavaScript Event Handlers</p> <p>Description: Event listeners that call <code>e.preventDefault()</code> or manipulate scrolling properties programmatically.</p> <pre><code>document.addEventListener('scroll', function(e) {\n    e.preventDefault(); /* Blocks scrolling */\n});\n</code></pre> <p>Documentation: Ensure event handlers do not prevent default behavior unless required for specific functionality.</p> </li> <li> <p>Modal or Overlay Elements</p> <p>Description: Modals or overlays that set <code>overflow: hidden</code> on the <code>body</code> to prevent scrolling of the background content.</p> <pre><code>.modal-open {\n    overflow: hidden; /* Prevents background scrolling */\n}\n</code></pre> <p>Documentation: Restore <code>overflow</code> property when the modal is closed.</p> </li> <li> <p>Fixed or Absolute Positioning</p> <p>Description: Fixed or absolute positioned elements that may cover the viewport, blocking interaction.</p> <pre><code>.fixed-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5); /* Covers viewport */\n}\n</code></pre> <p>Documentation: Ensure these elements are used appropriately to avoid unintentional blocking.</p> </li> <li> <p>Height Restrictions</p> <p>Description: Elements with restricted height and <code>overflow</code> settings that may not accommodate content.</p> <pre><code>.container {\n    height: 100px;\n    overflow: auto; /* Enables scrolling if content overflows */\n}\n</code></pre> <p>Documentation: Adjust height and <code>overflow</code> properties based on content requirements.</p> </li> </ol> <p>Each of these issues can be identified and resolved by checking relevant CSS properties, JavaScript code, and HTML structure.</p>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/","title":"Mail Auto Select in Editor","text":"<p>Auto \"To \"does not work here also . Pls fix it ( Internal Message ) Section</p>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/#replychatboxjs","title":"ReplyChatBox.js","text":"ReplyChatBox.jsReplyChatBox.js <pre><code>const handleEditorFocus = () =&gt; {\n    let data = editorData?.replace(par, \"\");\n    if (replyStatus !== \"reply\" &amp;&amp; replyStatus !== \"replyall\") {\n        let participantsName = \"\";\n        messageParticipants\n        .filter((obj) =&gt;\n            form.getFieldsValue().participantTos?.includes(obj.appUserId)\n        )\n        .map((x, index) =&gt; {\n            participantsName =\n            participantsName +\n            x?.userName\n                ?.toUpperCase()\n                .concat(\n                index + 1 === form.getFieldsValue().participantTos?.length\n                    ? \":\"\n                    : \"/\"\n                );\n        });\n        setPar(participantsName);\n        editorRef.current.insertContent(participantsName);\n        setEditorData(participantsName + data);\n    }\n    editorRef.current.selection.setCursorLocation(editorRef.current.getBody(), 1);\n};\n</code></pre> <pre><code>&lt;Editor\n    value={editorData}\n    id=\"replyChatBox\"\n    onFocus={handleEditorFocus}\n/&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/#replychatboxglobaljs","title":"ReplyChatBoxGlobal.js","text":"<p>In ReplyChatBoxGlobal there is not <code>handleEditorFocus</code> function add this and also the related <code>useState</code>.</p> ReplyChatBoxGlobal.js <pre><code>import React, { useEffect, useState, useRef } from \"react\";\n\nconst editorRef = useRef(null);\nconst [par, setPar] = useState(\"\");\nconst [isFocused, setIsFocused] = useState(false);\n\nconst handleEditorFocus = () =&gt; {\n    let data = editorData?.replace(par, \"\");\n\n    if (replyStatus !== \"reply\" &amp;&amp; replyStatus !== \"replyall\") {\n        let participantsName = \"\";\n        messageParticipants\n        .filter((obj) =&gt;\n            form.getFieldsValue().participantTos?.includes(obj.appUserId)\n        )\n        .map((x, index) =&gt; {\n            participantsName =\n            participantsName +\n            x?.userName\n                ?.toUpperCase()\n                .concat(\n                index + 1 === form.getFieldsValue().participantTos?.length\n                    ? \":\"\n                    : \"/\"\n                );\n        });\n        setPar(participantsName);\n        editorRef.current.insertContent(participantsName);\n        setEditorData(participantsName + data);\n    }\n    editorRef.current.selection.setCursorLocation(editorRef.current.getBody(), 1);\n};\n\n&lt;Editor\n    value={editorData}\n    // adding onMouseEnter solved the entering user to last, not first\n\n    onMouseEnter={() =&gt; setIsFocused(false)}\n    onFocus={handleEditorFocus}\n/&gt;;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/","title":"Text Editor in Internal Message","text":"<p>Need Text Editor ( Like bold , highlight, font change , Color Change ) in Email compose and Internal Message Section.</p>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#email","title":"Email","text":"ComposeEmailDrawer.js <pre><code>const [toolBar, setToolBar] = useState(false);\n\n\n&lt;div\n    style={{\n        width: !visibleInternalMessage ? \"30%\" : \"50%\",\n        color: \"black\",\n    }}\n    className=\"hover aa__icon\"\n    onClick={() =&gt; {\n        setToolBar(!toolBar);\n    }}\n&gt;\n    &lt;span&gt;Aa&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div\n    className={`test compose-editor-wrapper ${\n        toolBar &amp;&amp; \"active\"\n        } ${\n            visibleInternalMessage &amp;&amp; \"internalmessage-active\"\n        }`}\n    &gt;\n        &lt;Editor\n            className=\"compose-editor\"\n            // ...\n        /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#internal-message","title":"Internal Message","text":"<p>Toggling the <code>on/off</code> the toolbar of CKEditor in Internal Message</p> ReplyChatBox.jsinternalmessage.scss <pre><code>const [showEditorHeader, setEditorHeader] = useState(false);\n\n\nreturn (\n    &lt;&gt;\n    {/* Line Number: 1102 uncommented this */}\n\n    &lt;div className=\"chat-box-editor-header-btn-wrapper\"&gt;\n        &lt;div\n            class=\"btn__chat-editor-header\"\n            onClick={() =&gt; {\n                setEditorHeader(!showEditorHeader);\n            }}\n            style={{\n                color: showEditorHeader ? \"black\" : \"white\",\n            }}\n        &gt;\n            // &lt;img src={aa} /&gt;\n            &lt;span&gt;Aa&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n\n\n    &lt;div\n        className={`replyChatBox ${replyChatheight ? \"active\" : \"\"} ${showEditorHeader ? \"showHeader\" : \"\"\n        } `}\n        style={{ position: \"relative\", width: \"100%\" }}\n    &gt;\n        &lt;Editor\n            value={editorData}\n            // toolbar_location=\"bottom\"\n            onKeyDown={(e) =&gt; {\n                const { key, altKey } = e;\n                if (altKey &amp;&amp; key === \"Enter\") {\n                setAltEnt(true);\n                }\n            }}\n\n            init={{\n                plugins: \"lists advlist\",\n                browser_spellcheck: true,\n                menubar: \"false\",\n\n                // COMMENTED THIS\n                // toolbar: \"\", //bold  italic underLine  | backcolor forecolor   |  bullist numlist\n\n                content_style: \"p{margin:0px}\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                id: \"internal_replyBox\",\n                },\n\n                // ADDED FROM THIS\n                toolbar:\n                \"fontselect fontsizeselect backcolor forecolor bold | italic | underLine lineheight |  strikethrough alignleft aligncenter alignright |  bullist numlist\",\n\n                content_style: \"p{margin:0px;padding:0px}\",\n                forced_root_block: \"div\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                class: \"editor-block-wrapper\",\n                id: \"editor-blocks\",\n                },\n                font_formats:\n                \"Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde;Arial Narrow=arial narrow,avant garde;Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier;Cambria=cambria;Calibri=calibri;Calibri Body=calibri boby;Georgia=georgia,palatino;Times New Roman=times new roman,times;Helvetica=helvetica;Verdana=verdana,geneva;\",\n                // UPTO HERE\n            }}\n        /&gt;\n\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>/* Line number: 53*/\n\n\n.replyChatBox {\nposition: relative;\n.tox-editor-header {\n    display: none;\n}\n\n&amp;.showHeader {\n    .tox-editor-header {\n    display: block;\n    }\n}\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-redux/","title":"Persist Storage Redux","text":"<pre><code>persistMail\n\n-   action.js\n-   reducer.js\n</code></pre> dispatchaction.jsreducer.js <pre><code>//\n\nif (!changeEmailStatusTypeRespLoading &amp;&amp; !mailBodyGetDetailsLoading) {\n    dispatch(selectedMailTypeAndMail(data));\n    //...\n}\n</code></pre> <pre><code>const tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n</code></pre> <pre><code>import { EMAIL_TYPES } from '../../../types';\nimport { saveMailTypeAndMail, saveActiveEmail } from 'services/common';\n\nexport const selectedMailTypeAndMail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveMailTypeAndMail(EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL, data));\n    };\n};\n\nexport const selectedActiveEmail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveActiveEmail(EMAIL_TYPES.EMAIL_TYPE_ACTIVE, data));\n    };\n};\n</code></pre> <pre><code>// common.js\nexport const saveMailTypeAndMail = (type, payload) =&gt; {\n    return {\n        type: `${type}`,\n        payload,\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { EMAIL_TYPES, AUTH_TYPES } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    selectedMailTypeAndMailData:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.selectedMailTypeAndMailData || {},\n    activeEmail:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.activeEmail || {},\n};\n\nexport default function mailMessagePersistReducer(\n    state = INITIAL_STATE,\n    action\n) {\n    switch (action.type) {\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL:\n            return {\n                ...state,\n                selectedMailTypeAndMailData: action.payload,\n            };\n\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL_UPDATE:\n            let newData =\n                state.selectedMailTypeAndMailData?.selectedMail?.id ===\n                action.query.messageCenterId\n                ? {\n                    ...state.selectedMailTypeAndMailData,\n                    selectedMail: {\n                        ...state.selectedMailTypeAndMailData?.selectedMail,\n                        ...action.emailStatus,\n                    },\n                    }\n                : { ...state.selectedMailTypeAndMailData };\n            return {\n                ...state,\n                selectedMailTypeAndMailData: newData,\n            };\n\n        case EMAIL_TYPES.EMAIL_TYPE_ACTIVE:\n            return {\n                ...state,\n                activeEmail: action.payload,\n            };\n\n        case AUTH_TYPES.USER_LOGOUT_SUCCESS:\n            return {\n                ...state,\n                activeEmail: null,\n                selectedMailTypeAndMailData: null,\n            };\n\n        default:\n            return { ...state };\n    }\n}\n</code></pre> store/index.js<pre><code>const persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\n      \"todos\",\n      \"auth\",\n      \"applicationConfig\",\n      \"mailMessagePeristState\",\n      \"contactSelectedState\",\n      \"selectedFileNameState\",\n      \"profile\",\n    ],\n};\n</code></pre> <pre><code>ComposeEmailDrawer.js\n\n\n  const  {\n    persistTenderMailDataResponse,\n    persistTenderMailDataLoading,\n  } = useSelector((state) =&gt; state.persistTenderMailState)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-tender-content/","title":"Persist Tender Content","text":"ComposeEmailDrawer.js<pre><code>  useEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      // console.log(\"I'm CONTENT Module\", persistTenderMailDataResp?.content?.content)\n\n      form.setFieldsValue({\n        // participantTos: [\"test@gmail.com\", \"newmailsearch@gmail.com\"],\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        participantTos: persistTenderMailDataResp?.tos ?? [],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n\n      setEditorData(persistTenderMailDataResp?.content?.content ?? '')\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n  ])\n</code></pre> Companies.js<pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \",getDetails?.title)\n\n    let data = {\n      tos: referencePartyListingCircularResponse ?? '',\n      refCode: getDetails?.referenceCode ?? '',\n      subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n\n      let id = getDetails?.referenceId;\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n      // persist\n      // await dispatch(actionForGetReferenceTemplateGetDetailsById(id));\n      await dispatch(actionForPersistenTenderContent(id));\n\n      // Wait for 5 seconds\n      // setTimeout(() =&gt; {\n      //   window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n      //   setIsLoadingOpeningMail(false);\n      // }, 5000);\n      await new Promise(resolve =&gt; setTimeout(resolve, 5000)); \n      window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n    } catch (err) {\n      console.log(err);\n      setIsLoadingOpeningMail(false);\n    }\n    finally {\n      setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/savebase64-excel-button/","title":"Save base64 response Button","text":"Contact ModuleHR Module <ul> <li><code>Contact/ContactCompanyPerson/index.js</code></li> </ul> <p>Commented the Tab because the Export button is moved to Hr Module</p> <pre><code>&lt;Tabs\n    className=\"custom-tab-model\"\n    defaultActiveKey=\"1\"\n    onChange={key =&gt; console.log(key)}\n&gt;\n    &lt;TabPane tab=\"Search\" key=\"1\"&gt;\n    &lt;/TabPane&gt;\n    &lt;TabPane tab=\"Export\" key=\"2\"&gt;\n        &lt;div className=\"global-form-group calc\" style={{ marginTop: \".8em\" }}&gt;\n            &lt;div className=\"global-form-label\"&gt;\n                &lt;Button\n                    type=\"dashed\"\n                    onClick={handleExport}\n                &gt;\n                    Export Template\n                &lt;/Button&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n                &lt;Select\n                    autoComplete=\"off\"\n                    placeholder=\"Scopes of Work\"\n                    size=\"default\"\n                    value={selectedExportValue}\n                    onChange={(value) =&gt; setSelectedExportValue(value)}\n                    options={[\n                        {\n                            value: 'company',\n                            label: 'Company',\n                        },\n                        {\n                            value: 'person',\n                            label: 'Person',\n                        }\n                    ]}\n                &gt;&lt;/Select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;UniversalFileUpload\n            name='File'\n            form={fileForm}\n            isMultipleFileAllowed={false}\n            id='1'\n            callback={(e) =&gt; {\n                let olduploadedFileDtos = fileForm.getFieldValue()[\n                    \"attendanceDtos\"\n                ]\n                    ? [...fileForm.getFieldValue()[\"attendanceDtos\"]]\n                    : [];\n                let uploadedFileDtos = [...olduploadedFileDtos];\n                uploadedFileDtos.push(e);\n\n                form.setFieldsValue({\n                    attendanceDtos: uploadedFileDtos,\n                });\n            }}\n        /&gt;\n    &lt;/TabPane&gt;\n&lt;/Tabs&gt;\n</code></pre> <ul> <li><code>Admin/index.js</code></li> </ul> <pre><code>import {\n    Skeleton,\n    Button,\n    Input,\n    Dropdown,\n    Form,\n    Checkbox,\n    Modal,\n    Collapse,\n    Row,\n    Col,\n} from \"antd\";\n\nimport { actionForExportSiscoUserListToExcel, actionForExportCompanyUserListToExcel } from \"services/redux/holiday/action\";\nimport { saveBase64 } from \"utils/saveBase64\";\n\n\nfunction Admin() {\n\n    const {\n        holidaySampleResponse,\n        holidaySampleLoading,\n        userSiscolListResponse,\n        userSiscoListLoading\n    } = useSelector((state) =&gt; state.holiday);\n\n    // export button\n    const [isDownloadStatus, setIsDownloadStatus] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingType, setLoadingType] = useState(null);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(userSiscolListResponse) || !userSiscoListLoading) {\n            try {\n                if (isDownloadStatus) {\n                    let props = {\n                        base64Data: userSiscolListResponse?.data,\n                        fileName: userSiscolListResponse?.fileName,\n                        fileType: userSiscolListResponse?.fileExtension\n                    }\n                    saveBase64(props);\n                }\n            } catch (err) {\n                console.log(\"error: \", err);\n            } finally {\n                setIsDownloadStatus(false);\n            }\n        }\n    }, [userSiscolListResponse])\n\n    const handleExport = async (type) =&gt; {\n        setLoading(true);\n        setLoadingType(type);\n        setIsDownloadStatus(true);\n\n        try {\n            if(type == 'company') {\n                await dispatch(actionForExportCompanyUserListToExcel());\n            } else {\n                await dispatch(actionForExportSiscoUserListToExcel());\n            }\n        } catch(err) {\n            console.log(\"Error: \", err);\n        } finally {\n            setLoading(false);\n            setLoadingType(null);\n        }\n    }\n\n\n    return(\n        &lt;&gt;\n            &lt;Form\n                onFinish={handleFormSubmit}\n            &gt;\n                &lt;Row\n                    gutter={[0, 12]}\n                &gt;\n                    &lt;Col span=\"8\"&gt;Export Company&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('company')}\n                        loading={loading &amp;&amp; loadingType === 'company'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;Export Person&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('person')}\n                        loading={loading &amp;&amp; loadingType === 'person'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;show InActive Users&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Checkbox\n                        checked={isEmployeeStatusChecked}\n                        onChange={(e) =&gt; handleEmployeeStatusChange(e.target.checked)}\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            marginRight: \"6px\",\n                        }}\n                    /&gt;\n                    &lt;/Col&gt;\n                &lt;/Row&gt;\n\n                &lt;Button\n                    type=\"ghost\"\n                    shape=\"round\"\n                    htmlType=\"submit\"\n                    autoComplete=\"off\"\n                &gt;\n                    Search\n            &lt;/Button&gt;\n            &lt;/Form&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/tab-circular-planing/","title":"Circular Planning Tab Added","text":"<p>fsadfsadf</p> OldUpdated <pre><code>{/* Tender Checklist */}\n\n{contactDetails()}\n&lt;div className=\"person_info tender-checklist\"&gt;\n    &lt;div&gt;\n        &lt;div className=\"company_header\"&gt;\n        &lt;div\n            className=\"referenceDetails__label\"\n            style={{\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            }}\n        &gt;\n            &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n            Tender Checklist\n            &lt;/button&gt;\n            &lt;Button\n            style={{ height: \"28px\", lineHeight: \"21px\" }}\n            type=\"primary\"\n            onClick={() =&gt; setModalVisible(true)}\n            &gt;\n            Circular Content\n            &lt;/Button&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n    &lt;/div&gt;\n&lt;/div&gt; \n</code></pre> Companies.js<pre><code>import {\n    Tabs,\n} from \"antd\";\n\nconst Companies = ({\n    //...\n}) =&gt; {\n    const { TabPane } = Tabs;\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"company_person\"&gt;\n                {!isCircular ? (\n                    contactDetails()\n                ) : (\n                &lt;&gt;\n                    &lt;Tabs\n                        defaultActiveKey=\"1\"\n                        type=\"line\"\n                    &gt;\n                        &lt;TabPane tab=\"Contact Details\" key=\"1\"&gt;\n                            {contactDetails()}\n                        &lt;/TabPane&gt;\n                        &lt;TabPane tab=\"Tender Checklist\" key=\"2\"&gt;\n                            &lt;div className=\"person_info tender-checklist\"&gt;\n                                &lt;div className=\"company_header\"&gt;\n                                    &lt;div\n                                        className=\"referenceDetails__label\"\n                                        style={{\n                                            display: \"flex\",\n                                            width: \"100%\",\n                                            justifyContent: \"space-between\",\n                                        }}\n                                    &gt;\n                                        &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n                                            Tender Checklist\n                                        &lt;/button&gt;\n                                        &lt;Button\n                                            style={{ height: \"28px\", lineHeight: \"21px\" }}\n                                            type=\"primary\"\n                                            onClick={() =&gt; setModalVisible(true)}\n                                        &gt;\n                                            Circular Content\n                                        &lt;/Button&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n                            &lt;/div&gt;\n                        &lt;/TabPane&gt;\n                    &lt;/Tabs&gt;\n                &lt;/&gt;\n                )}\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/task-module-set-tos-ccs/","title":"Task chat tos","text":"<pre><code>modified:   services/redux/Reference/Tender/reducer.js\nmodified:   views/Expert/ContactCompanyPerson/index.js\nmodified:   views/GlobalEmailChat/GlobalChat.js\nmodified:   views/GlobalEmailChat/ReplyChatBoxGlobal.js\nmodified:   views/GlobalEmailChat/TaskDetailsLabel.js\nmodified:   views/GlobalEmailChat/index.js\nmodified:   views/Oragnizer/todoList/TodoLists.js\nmodified:   views/Oragnizer/todoList/index.js\n</code></pre> <pre><code>&lt;ToDo&gt;\n    &lt;ToDoLists&gt;\n        {hideInternalMessage ? (\n            &lt;Drawer&gt;\n                &lt;ChatDetail&gt;\n                    &lt;GlobalChatBox&gt;\n                    &lt;GlobalChatBox&gt;\n                &lt;/ChatDetail&gt;\n            &lt;/Drawer&gt;\n        )}\n    &lt;/ToDoLists&gt;\n&lt;/ToDo&gt;\n</code></pre> todoList/index.jsTodoLists.jsGlobalEmailChat/ <pre><code>const ToDo = (props) =&gt; {\nconst [selectedTaskTos, setSelectedTaskTos] = useState([]);\nconst [selectedTaskCcs, setSelectedTaskCcs] = useState([]);\n\n    return (\n        &lt;&gt;\n        &lt;div className=\"main__body task__body sidebar-width-calc\"&gt;\n            &lt;ToDoLists\n                // added\n                setSelectedTaskTos={setSelectedTaskTos}\n                setSelectedTaskCcs={setSelectedTaskCcs}\n            /&gt;\n\n        {hideInternalMessage ? (\n            &lt;Drawer\n                title=\"Task Module\"\n                placement=\"right\"\n                onClose={closeDrawer}\n                visible={hideInternalMessage}\n                className=\"task-drawer\"\n                width={543}\n            &gt;\n            &lt;ChatDetails\n                isPrivate={props.isPrivate}\n                setShowChat={setShowChat}\n                setHideInternalMessage={setHideInternalMessage}\n                hideInternalMessage={hideInternalMessage}\n                taskId={toShowKanbanData ? toShowKanbanData?.id : taskId}\n                setTaskId={setTaskId}\n                todoDetails={toShowKanbanData ? toShowKanbanData : todoDetails}\n                handleChangeEvent={handleChangeEvent}\n                setSmallChatHeight={setSmallChatHeight}\n                setChatHeight={setChatHeight}\n                chatHeight={chatHeight}\n                smallChatHeight={smallChatHeight}\n                setchatBox={setchatBox}\n                chatBox={chatBox}\n                module=\"Task\"\n                // added\n                selectedTaskTos={selectedTaskTos}\n                selectedTaskCcs={selectedTaskCcs}\n            /&gt;\n            &lt;/Drawer&gt;\n        ) : null}\n        &lt;/&gt;\n    );\n};\n</code></pre> <pre><code>const ToDoLists = (props) =&gt; {\n\n\n    const {\n        // added\n        setSelectedTaskTos,\n        setSelectedTaskCcs,\n    } = props;\n\n    &lt;div\n        onClick={() =&gt; {\n            dispatch(toDoGetDetails(record?.id));\n            //show the drawer\n            setHideInternalMessage(true);\n            setSmallChatHeight(false);\n            setChatHeight(false);\n            setchatBox(false);\n            // const ccs =\n            //   record?.todoEventCandidateDtos\n            //     ?.filter((item) =&gt; item?.isWatcher)\n            //     ?.map((item) =&gt; item?.candidateId) || [];\n            // const tos =\n            //   record?.todoEventCandidateDtos\n            //     ?.filter((item) =&gt; !item?.isWatcher)\n            //     ?.map((item) =&gt; item?.candidateId) || [];\n            // setSelectedTaskTos(tos);\n            // setSelectedTaskCcs(ccs);\n\n            const { todoEventCandidateDtos } = record || {};\n            const getCandidateIds = (isWatcher) =&gt;\n                todoEventCandidateDtos\n                ?.filter((item) =&gt; item?.isWatcher === isWatcher)\n                ?.map((item) =&gt; item?.candidateId) || [];\n\n            setSelectedTaskTos(getCandidateIds(false));\n            setSelectedTaskCcs(getCandidateIds(true));\n        }}\n    &gt;\n}\n</code></pre> index.jsReplyChatBoxGlobal.js <pre><code>const ChatDetails = (props) =&gt; {\n    const {\n        selectedTaskTos,\n        selectedTaskCcs,\n    } = props;\n\n    return (\n        &lt;&gt;\n            &lt;GlobalChat/&gt;\n            &lt;ReplyChatBoxGlobal\n                // added\n                selectedTaskTos={selectedTaskTos}\n                selectedTaskCcs={selectedTaskCcs}\n            &gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <pre><code>const ReplyChatBoxGlobal = ({\n    // added\n    selectedTaskTos,\n    selectedTaskCcs,\n}) =&gt; {\n\n    // added\n    useEffect(() =&gt; {\n        if (chatBox === true) {\n            form.setFieldsValue({\n                participantTos: selectedTaskTos,\n                participantCCs: selectedTaskCcs,\n            });\n        }\n    }, [chatBox]);\n}\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/tender-pagination-isActive/","title":"Tender Pagination isActive","text":""},{"location":"office/ispl/clickup/2024/september/tender-pagination-isActive/#tender-module","title":"Tender Module","text":"Tender/reducer.js<pre><code>    case REFERENCE__TYPES.TENDER_BASIC_PAGINATION_SUCCESS:\n      return {\n        ...state,\n        tenderBasicPaginationResponse: {\n          items: action.loadMore\n            ? uniqBy(\n                state.tenderBasicPaginationResponse.items.concat(\n                  action.payload.items\n                ),\n                \"id\"\n              )\n            : action.payload.items,\n          totalCount: action.payload.totalCount,\n        },\n        // tenderBasicPaginationResponse: {\n        //   items: action.loadMore\n        //     ? uniqBy(\n        //         state.tenderBasicPaginationResponse.items\n        //           .concat(action.payload.items)\n        //           .filter((item) =&gt; item.isActive),\n        //         \"id\"\n        //       )\n        //     : uniqBy(\n        //         action.payload.items.filter((item) =&gt; item.isActive),\n        //         \"id\"\n        //       ),\n        //   totalCount: action.payload.totalCount,\n        // },\n        // tenderBasicPaginationLoading: false,\n      };\n</code></pre>"},{"location":"office/ispl/documentation/architecture/","title":"Architecture","text":""},{"location":"office/ispl/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/ispl/documentation/auth/","title":"Auth","text":"auth.action.js<pre><code>export const loginUser = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(AUTH_TYPES.USER_LOGIN));\n    const response = await authService.loginUser(body);\n    dispatch(finish(AUTH_TYPES.USER_LOGIN));\n    if (response.isSuccess) {\n      const decodedTokenData = decodedToken(response.data.access_token);\n      let sub = decodedTokenData.sub;\n      Storage.setItem(\"role\", decodedTokenData.role);\n      Storage.setItem(\"role\", decodedTokenData.role);\n      Storage.setItem(\"userId\", sub);\n      Storage.setItem(\"name\", decodedTokenData.name);\n      autoLogout(dispatch, decodedTokenData.exp, decodedTokenData.auth_time);\n      dispatch(success(AUTH_TYPES.USER_LOGIN, response.data.access_token));\n      dispatch(checkInDailyAttendance());\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> Login/index.jsNavbar.jsStoreProvider.jsmisc.js <pre><code>const Login = ({ userName, checkDailyAttendenceResponseLoading }) =&gt; {\n\nconst [form] = Form.useForm();\nconst name = Storage.getItem('name');\n\nconst onFinish = (values) =&gt; {\n    dispatch(loginUser(values));\n};\n}\n</code></pre> <pre><code>const { LimitedRoleDemo, isLimitedRoleMailBox } = useRoles();\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;div className=\"icon1\"&gt;\n    &lt;Link\n        to=\"/dashBoard\"\n        className={`icons__wrapper ${\n        state.basePath === \"dashBoard\" ? \"active\" : \"\"\n        }`}\n    &gt;\n        &lt;img src={Home} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt; Dashboard &lt;/span&gt;\n    &lt;/Link&gt;\n    &lt;/div&gt;\n)}\n</code></pre> <pre><code>import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport configureStore from \"./index\";\nconst { store, persistor } = configureStore();\n\nexport default function StoreProvider({ children }) {\n    return (\n        &lt;Provider store={store}&gt;\n            &lt;PersistGate loading={null} persistor={persistor}&gt;\n                {children}\n            &lt;/PersistGate&gt;\n        &lt;/Provider&gt;\n    );\n}\n</code></pre> <pre><code>import jwtDecode from \"jwt-decode\";\nimport Storage from \"utils/storage\";\nimport moment from \"moment\";\n\nexport const jsonParser = (content) =&gt; {\n    try {\n        return JSON.parse(content);\n    } catch (ex) {\n        return {};\n    }\n};\n\nexport const isTokenExpired = (token) =&gt; {\n    if (typeof window == \"undefined\") {\n        return false;\n    }\n\n    if (token) {\n        const { exp } = jwtDecode(token);\n\n        if (exp &lt; (new Date().getTime() + 1) / 1000) {\n        return true;\n        }\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const decodedToken = (token) =&gt; {\n    if (typeof window == \"undefined\") {\n        return false;\n    }\n\n    if (token) {\n        const decodedToken = jwtDecode(token);\n\n        if (decodedToken.exp &gt; (new Date().getTime() + 1) / 1000) {\n        return decodedToken;\n        }\n        return false;\n    } else {\n        return false;\n    }\n};\n\nexport const renderNameOrNA = (name) =&gt; name || \"N/A\";\n\nexport const isAdmin = () =&gt; {\n    const role = Storage.getItem(\"role\");\n    if (!role) return;\n\n    if (role === \"admin\") {\n        return true;\n    }\n\n    return false;\n};\n\nexport const validateMessages = {\n    required: \"${label} is required!\",\n    whitespace: \"${label} can not be empty!\",\n    types: {\n        email: \"${label} is not valid!\",\n    },\n};\n\nexport const requiredRule = [\n    {\n        required: true,\n        whitespace: true,\n    },\n];\n\nexport function getDayDiff(endDate, startDate) {\n    let parsedEndDate = moment(endDate).format(\"YYYY-MM-DDTHH:mm:00.000\") + \"Z\";\n    let parsedStartDate =\n        moment(startDate).format(\"YYYY-MM-DDTHH:mm:00.000\") + \"Z\";\n    let diff = moment(parsedEndDate).diff(parsedStartDate);\n    let days = moment.duration(diff).days();\n    return days;\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/blog/","title":"Blog Module","text":"<p>Success</p> StagesView.js<pre><code>...\nimport Blog from \"components/Blog\";\n...\n\n{/* Blog */}\n&lt;div className=\"business-header\"&gt;\n    &lt;div className=\"business-header-title\" style={{ fontSize: \"1.1em\" }}&gt;\n        Blog\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;Blog tenderId={tenderId} /&gt;\n</code></pre> <pre><code>src\n- components\n---- Blog\n-------BlogForm.js\n-------BlogItem.js\n-------index.js\n</code></pre> <p>Tips</p> BlogBlogItemBlogFormInfinite Scroll index.js<pre><code>import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Skeleton, Row, Col, Affix, Dropdown } from \"antd\";\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    blogAdd,\n    updateBlogMessage,\n    getBlogPagination,\n} from \"services/redux/officeresource/blog/action\";\nimport {\n    employeeProfileDetail,\n    actionForGetAllUsersPP,\n} from \"services/redux/profile/profile.action\";\nimport BlogItem from \"./BlogItem\";\nimport BlogForm from \"./BlogForm\";\n\nconst Blog = ({ tenderId }) =&gt; {\nconst dispatch = useDispatch();\nconst [form] = Form.useForm();\nconst pageSize = 40;\n\nconst scrollableRef = useRef();\n\nconst {\n    addBlogMessageLoading,\n    addBlogMessageResp,\n    getBlogMsgPaginationResp,\n    getBlogMsgPaginationLoading,\n} = useSelector((state) =&gt; state.blogReducer);\n\nconst { profileInfo } = useSelector((state) =&gt; state.profile);\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst [editMode, setEditMode] = useState(false);\nconst [editedBlog, setEditedBlog] = useState({});\n\nconst appUserIdUC = sessionStorage?.userId.toUpperCase();\n\n// SUPERAPI **************************************************************\nconst { listingAllUsersProfileResp, listingAllUsersProfileLoading } =\n    useSelector((state) =&gt; state.profile);\n\nconst [listingAllProfile, setListingAllProfile] = useState([]);\n\nuseEffect(() =&gt; {\n    dispatch(actionForGetAllUsersPP());\n}, []);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(listingAllUsersProfileResp)) {\n        setListingAllProfile(listingAllUsersProfileResp);\n    }\n}, [listingAllUsersProfileResp]);\n// end SUPERAPI **************************************************************\n\nuseEffect(() =&gt; {\n    dispatch(\n        employeeProfileDetail({\n            AppUserId: sessionStorage?.userId.replaceAll('\"', \"\"),\n        })\n    );\n}, []);\n\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nconst handleEditClick = (item) =&gt; {\n    setEditMode(true);\n    setEditedBlog({\n        id: item.id,\n        name: item.name,\n        body: item.body,\n    });\n};\n\nconst handleEditSubmit = (values) =&gt; {\n    const updatedBlog = {\n        id: editedBlog.id,\n        userId: sessionStorage?.userId,\n        subject: \"string\",\n        name: editedBlog.name,\n        body: values.editedMessage,\n        isActive: true,\n        referenceCode: tenderId,\n        lastmodified: moment().format(),\n    };\n\n    dispatch(updateBlogMessage(editedBlog.id, updatedBlog));\n\n    setEditMode(false);\n    setEditedBlog({});\n};\n\nconst onFinish = (values) =&gt; {\n    let data = {};\n    if (values) {\n    data = {\n        userId: sessionStorage?.userId,\n        referenceCode: tenderId,\n        body: values.message,\n        creationTime: moment().format(),\n        subject: \"string\",\n        isActive: true,\n    };\n    // dispatch(blogAdd(data));\n    try {\n        dispatch(blogAdd(data));\n    } catch (err) {\n        console.log(\"error: \", err);\n    } finally {\n        form.resetFields();\n    }\n    }\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n        &lt;BlogForm\n            form={form}\n            onFinish={onFinish}\n            loading={addBlogMessageLoading}\n        /&gt;\n    &lt;/div&gt;\n    );\n};\n\nexport default Blog;\n</code></pre> BlogItem.js<pre><code>import moment from \"moment\";\nimport { Form, Button, Input } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n// import BlogForm from \"./BlogForm\";\nimport MatchingImageDisplay from \"components/shared/MatchingImageDisplay\";\nconst { TextArea } = Input;\n\nconst BlogItem = ({\n    blogMsg,\n    appUserIdUC,\n    editMode,\n    setEditMode,\n    editedBlog,\n    handleEditClick,\n    handleEditSubmit,\n    listingAllProfile,\n}) =&gt; {\n\nconst [form] = Form.useForm();\n\nreturn (\n    &lt;&gt;\n    {blogMsg.map((item, index) =&gt; (\n        &lt;div\n            className=\"blogWrapper\"\n            key={index}\n            style={{\n                display: \"flex\",\n                justifyContent:\n                JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"flex-end\"\n                    : \"flex-start\",\n            }}\n        &gt;\n        {JSON.stringify(item?.userId)?.toUpperCase() !== appUserIdUC ? (\n            &lt;span\n                style={{\n                    height: \"40px\",\n                    width: \"40px\",\n                    background: \"#67a1e4\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"50%\",\n                    color: \"#FFF\",\n                    marginRight: \"12px\",\n                }}\n            &gt;\n            &lt;MatchingImageDisplay\n                listingAllProfile={listingAllProfile}\n                item={item}\n            /&gt;\n            &lt;/span&gt;\n        ) : null}\n\n        &lt;div\n            style={{\n                display: \"inline-block\",\n                maxWidth: \"80%\",\n                background:\n                    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"#E8EBFA\"\n                    : \"#FFFFFF\",\n                marginBottom: \"1em\",\n                padding: \"0.4em 1em\",\n            }}\n        &gt;\n            &lt;div&gt;\n            {editMode &amp;&amp; editedBlog.id === item.id ? (\n                // &lt;BlogForm\n                //   initialValue={item.body}\n                //   onFinish={(values) =&gt; {\n                //     handleEditSubmit(item.id, values.editedMessage);\n                //     // toggleEditMode();\n                //   }}\n                // /&gt;\n                &lt;Form\n                    onFinish={handleEditSubmit}\n                    initialValues={{ editedMessage: editedBlog.body }}\n                &gt;\n                &lt;Form.Item\n                    name=\"editedMessage\"\n                    rules={[\n                    {\n                        required: true,\n                    },\n                    ]}\n                &gt;\n                    {/* &lt;Input */}\n                    &lt;TextArea\n                        style={{\n                            // height: \"42px\",\n                            borderBottom: \"4px solid #8e92d1\",\n                            resize: \"none\",\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                    Save\n                &lt;/Button&gt;\n                &lt;Button onClick={() =&gt; setEditMode(false)}&gt;Cancel&lt;/Button&gt;\n                &lt;/Form&gt;\n            ) : (\n                &lt;&gt;\n                &lt;div\n                    style={{\n                        display: \"flex\",\n                    }}\n                &gt;\n                    &lt;span className=\"blog-username\"&gt;\n                    {item?.name?.toUpperCase()}\n                    &lt;/span&gt;\n                    &lt;span style={{ color: \"#807e7e\" }}&gt;\n                    {item?.lastmodified\n                        ? \"Modified \" + moment(item?.lastmodified).calendar()\n                        : moment(item?.creationTime).startOf(\"min\").fromNow()}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div\n                    className=\"blogBody\"\n                        style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                &gt;\n                    &lt;p&gt;{item?.body}&lt;/p&gt;\n                    &lt;span\n                    className={\n                        JSON.stringify(item?.userId) ===\n                        sessionStorage?.userId.toUpperCase()\n                        ? \"blog__content\"\n                        : \"\"\n                    }\n                    &gt;\n                    {JSON.stringify(item?.userId)?.toUpperCase() ===\n                    appUserIdUC ? (\n                        &lt;EditOutlined onClick={() =&gt; handleEditClick(item)} /&gt;\n                    ) : null}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;/&gt;\n            )}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    ))}\n    &lt;/&gt;\n);\n};\n\nexport default BlogItem;\n</code></pre> BlogForm.js<pre><code>import { Form, Input, Button, Row, Col } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nconst { TextArea } = Input;\n\nconst BlogForm = ({ form, onFinish, loading }) =&gt; {\nreturn (\n    &lt;Form\n    name=\"blog\"\n    form={form}\n    onFinish={onFinish}\n    wrapperCol={{ span: 24 }}\n    style={{ background: \"#f9f9f9\", padding: \"2em 4em\" }}\n    &gt;\n    &lt;Row gutter={8}&gt;\n        &lt;Col span={22}&gt;\n        &lt;Form.Item\n            name=\"message\"\n            rules={[\n            {\n                required: true,\n            },\n            ]}\n        &gt;\n            &lt;TextArea\n            rows={2}\n            style={{\n                // height: \"42px\",\n                borderBottom: \"4px solid #8e92d1\",\n                resize: \"none\",\n                fontSize: \"1.1em\",\n            }}\n            /&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n        &lt;Col span={2}&gt;\n        &lt;Form.Item wrapperCol={{ span: 24 }}&gt;\n            &lt;Button\n            // type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                // added\n                background: \"none\",\n                border: \"none\",\n                color: \"#67a1e4\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            loading={loading}\n            &gt;\n            {/* Submit */}\n            &lt;SendOutlined style={{ fontSize: \"28px\" }} /&gt;\n            &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;/Form&gt;\n);\n};\n\nexport default BlogForm;\n</code></pre> <pre><code>const pageSize = 40;\nconst scrollableRef = useRef();\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\n{/* USEFFECT */}\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/daily-dairy/","title":"Daily Dairy","text":""},{"location":"office/ispl/documentation/alldocs/daily-dairy/#daily-dairy","title":"daily Dairy","text":"todolist.js <pre><code>// added\n\n\n&lt;div className=\"flip-card-back\"&gt;\n      &lt;div\n        style={{\n          backfaceVisibility: \"hidden\",\n        }}\n      &gt;\n        &lt;div\n          className={\n            \"dashboards__tenderlist dashboards__body\"\n          }\n        &gt;\n          &lt;div className=\"dashboards__bodyWrap\"&gt;\n            &lt;h4 className=\"dashboards__body--title\"&gt;\n              Daily Dairy\n              {/* ADDED */}\n              &lt;span\n                onClick={() =&gt; {\n                  setRotate(rotate + 1);\n                }}\n                style={{\n                  marginLeft: \"10px\",\n                  height: \"30px\",\n                  marginBottom: \"10px\",\n                }}\n              &gt;\n                &lt;img\n                  src=\"./assets/svg/toggle-arrow.svg\"\n                  height={15}\n                  alt=\"complete\"\n                /&gt;\n              &lt;/span&gt;\n            &lt;/h4&gt;\n\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"dashboards__body--main todolist-wrapper\"&gt;\n          &lt;ul\n            className=\"dashboards__todolists\"\n            style={{ height: heightt[1] }}\n          &gt;\n            {/* DATA */}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/","title":"Excel API Data","text":""},{"location":"office/ispl/documentation/alldocs/excel-api-data/#admin-module","title":"Admin Module","text":"Holiday Event<pre><code>// HolidayWithSampleButton.js\n</code></pre> <p>Example Usage</p> Generic BinaryExcel FilePracticalReact Package for ExcelTheory <p>Using <code>application/octet-stream</code> for a Generic Binary Download:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"file.bin\"\n\n(binary data)\n</code></pre> application/octet-stream<pre><code>const downloadFile = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'file.bin';\n    saveAs(blob, fileName);\n};\n</code></pre> <p>Using <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> for an Excel File:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nContent-Disposition: attachment; filename=\"spreadsheet.xlsx\"\n\n(binary data of the Excel file)\n</code></pre> application/**<pre><code>const downloadExcel = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'spreadsheet.xlsx';\n    saveAs(blob, fileName);\n};\n</code></pre> <pre><code>import { saveAs } from 'file-saver';\nimport xlsx from 'xlsx';\n\n\n// Parse the binary data\nconst workbook = XLSX.read(holidaySampleResponse, { type: 'array' });\n\n// Convert the workbook to a Blob object\nconst excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n\nconst blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n// Save the Blob as a file\nsaveAs(blob, 'holiday_sample.xlsx');\n\n\n// or\n\nconst fileName = 'holiday_sample.xlsx';\n\nconst rawblob = new File([holidaySampleResponse], {\n    // type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    type: 'application/octet-stream'\n});\nsaveAs(blob, fileName);\n</code></pre> Installation<pre><code>npm i xlsx\n</code></pre> Example<pre><code>import * as XLSX from 'xlsx/xlsx.mjs';\n\n/* load 'fs' for readFile and writeFile support */\nimport * as fs from 'fs';\nXLSX.set_fs(fs);\n\n/* load 'stream' for stream support */\nimport { Readable } from 'stream';\nXLSX.stream.set_readable(Readable);\n\n/* load the codepage support library for extended support with older formats  */\nimport * as cpexcel from 'xlsx/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cpexcel);\n</code></pre> <pre><code>const bytesData = this.props.bytesData; // Assuming you have your bytes data\nconst workbook = XLSX.read(bytesData, { type: 'array' });\n\n// Write the workbook object to an Excel file\nXLSX.writeFile(workbook, 'example.xlsx');\n</code></pre> <p>The type parameter in <code>XLSX.read</code> specifies the type of input data being provided. Here are the available types:</p> <ul> <li>array: This is used when your data is in the form of an array of bytes.</li> <li>binary: This is used when your data is in binary format.</li> <li>buffer: This is used when your data is in the form of a <code>Node.js</code> buffer.</li> <li>file: This is used when your data is in the form of a file (e.g., when using a file input).</li> <li>base64: This is used when your data is encoded in base64 format.</li> <li>string: This is used when your data is in the form of a string.</li> </ul> <p>Choose the appropriate type based on how your data is represented. In your case, if you have the bytes data as an array, you would use 'array'.</p> <p>In summary, use <code>application/octet-stream</code> for generic binary data or when you want to force a download without specifying the file type. Use <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> when you are specifically serving Excel files to ensure proper handling and identification by the client.</p> what is application/octet-stream type <p>application/octet-stream is a generic binary file type. It's used when the specific type of file being transferred is either unknown or does not fit into any of the more specific categories available. Here are some key points about application/octet-stream:</p> <p>Example</p> HolidayWithSampleButton.js<pre><code>useEffect(() =&gt; {\n    if (holidaySampleResponse || !holidaySampleLoading) {\n        try {\n            if (isDownloadStatus) {\n                const blob = new Blob([holidaySampleResponse], { type: 'application/octet-stream' });\n\n                // Create a URL for the Blob\n                const url = window.URL.createObjectURL(blob);\n\n                // Create a link element and click on it to trigger the download\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'HolidaySample.xlsx'); // Specify the file name here\n                document.body.appendChild(link);\n                link.click();\n            }\n        } catch (err) {\n            console.log(\"error: \", err)\n        } finally {\n            setIsDownloadStatus(false);\n        }\n    }\n}, [holidaySampleResponse])\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#reference","title":"Reference","text":"<ul> <li>xlsx</li> <li>how to download excel in response from api react js</li> <li>How to Import Export Excel &amp; CSV In React 2022</li> <li>How to Excel Export in React JS</li> <li>online excel file viewer</li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#characteristics","title":"Characteristics:","text":"<ul> <li> <p>Binary Data: It indicates that the data being transferred is binary, meaning it's not in a human-readable format like text.</p> </li> <li> <p>No Specific Format: Unlike specific MIME types such as <code>application/json</code>, <code>text/html</code>, or <code>image/jpeg</code>, <code>application/octet-stream</code> does not specify any particular structure or format for the data. It's up to the consuming application to interpret the data correctly.</p> </li> <li> <p>Download Behavior: Browsers typically initiate a download for files with this MIME type rather than trying to display the contents directly in the browser window. This behavior makes it suitable for files like executables, images, videos, or any non-text data.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>File Downloads: Commonly used to force a file download from a web server. For example, when you click on a download link for a software installer (*.exe), the server might respond with Content-Type: application/octet-stream to ensure the file is downloaded rather than displayed in the browser.</p> </li> <li> <p>Unknown or Generic Data: It's used when the server cannot determine the specific type of data being sent, or when the data is a raw binary file without a specific MIME type.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#example-scenarios","title":"Example Scenarios:","text":"<ul> <li> <p>File Uploads: When uploading a file to a server, if the server does not know the exact MIME type of the file (due to limitations or other reasons), it might use application/octet-stream as a fallback.</p> </li> <li> <p>Custom Applications: Some custom applications may use this MIME type to handle proprietary binary data formats that are not standardized or recognized by common MIME types.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#handling-applicationoctet-stream-in-web-development","title":"Handling application/octet-stream in Web Development:","text":"<ul> <li> <p>Client-side Handling: When handling files with this MIME type in a web application, ensure proper handling of binary data. Use techniques such as Blob, FileReader, or libraries like FileSaver.js to manage and save the file on the client side.</p> </li> <li> <p>Server-side Considerations: Servers may need to set appropriate headers (Content-Type, Content-Disposition) to ensure correct behavior when serving binary files to clients.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#example-usage","title":"Example Usage:","text":"<p>Here's an example of how a server might respond with <code>application/octet-stream</code> for a file download:</p> <p>In this response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"example.zip\"\nContent-Length: 12345\n\n... (binary data follows)\n</code></pre> <p>In this response:</p> <ul> <li>Content-Type: <code>application/octet-stream</code> indicates that the data being sent is binary.</li> <li>Content-Disposition: <code>attachment; filename=\"example.zip\"</code> suggests that the browser should prompt the user to download the file with the name example.zip.</li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#conclusion","title":"Conclusion:","text":"<p><code>application/octet-stream</code> is a versatile MIME type used for transmitting arbitrary binary data. It's particularly useful for ensuring files are downloaded rather than displayed in the browser, and for scenarios where the specific type of data is not well-defined or known in advance.</p>"},{"location":"office/ispl/documentation/alldocs/fingerprint/","title":"Fingerprint","text":"<p>TabOne.js</p> <pre><code>const TabOne = ({\n    onFinish1,\n    startDate,\n    defaultDate,\n    setStartDate,\n    loader,\n    setLoader,\n    attendancePaginationResponse,\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    // added\n    const disabledDate = (current) =&gt; {\n        return current &amp;&amp; current &gt;= moment().startOf('day');\n    };\n\n\n    return (\n        &lt;&gt;\n            {isRoleHr ? (\n                &lt;Form form={formTest} onFinish={handleFinish} style={{ padding: \"10px 17px\"}}&gt;\n                    &lt;div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}&gt;\n                        &lt;div&gt;&lt;/div&gt;\n                        &lt;div\n                            className=\"\"\n                            style={{\n                            display: \"flex\",\n                            }}\n                        &gt;\n                            &lt;Form.Item name=\"date\"&gt;\n                                {/* added disabledDate */}\n                                &lt;RangePicker disabledDate={disabledDate} /&gt;\n                            &lt;/Form.Item&gt;\n                            &lt;Button\n                                type=\"primary\"\n                                style={{\n                                    height: \"100%\",\n                                    marginLeft: \"10px\",\n                                }}\n                                htmlType=\"submit\"\n                                loading={loadingApi}\n                            &gt;\n                                Fetch Data\n                            &lt;/Button&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/Form&gt;\n            ) : null}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/","title":"GroupChat InternalMessage","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat","title":"groupchat","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-checkbox-in-dashboard","title":"Groupchat checkbox in dashboard","text":"index.js src/components/internalMNew/index.js<pre><code>export default function InternalM(props) {\n    ...\n    const [isGroupChat, setIsGroupChat] = useState(false);\n    ...\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n            isGroupChat: isGroupChat,\n        }\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                className=\"drawer-form-wrapper internal_message_section_email_section\"\n            &gt;\n            &lt;div className=\"internal_message_popup_email_section\"&gt;\n                &lt;div className=\"left-chat-action-btn\" style={{ marginLeft: \"14px\" }}&gt;\n                    &lt;div className=\"chat-box-send-wrapper\"&gt;\n                    {quickEmailAddresponseLoading ? (\n                        antIcon\n                    ) : (\n                        &lt;Space\n                        // &lt;Dropdown.Button\n                        // overlay={centerTypeMenu}\n                        onClick={() =&gt; {\n                            handleSaveContinue();\n                        }}\n                        &gt;\n                        &lt;img src={sendIntM} alt=\"\" /&gt;\n\n                        {/* &lt;/Dropdown.Button&gt; */}\n                        &lt;/Space&gt;\n                    )}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n\n                &lt;div className=\"chat-action-btn\" style={{ display: \"flex\" }}&gt;\n\n                    {/* ADDED */}\n                    &lt;div&gt;\n                        &lt;Checkbox\n                            onChange={(e) =&gt; {\n                            setIsGroupChat(!isGroupChat);\n                            }}\n                        &gt;\n                            GroupChat\n                        &lt;/Checkbox&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-menu-added-in-the-mail","title":"GroupChat Menu added in the Mail","text":"Danger <pre><code>src/components/email/emailList.js\n</code></pre> <p>This file is not used, so don't change here.</p> Changes <pre><code>src/components/constants/index.js\nsrc/views/Email/EmailList.js\n</code></pre> constants/index.jsEmail/EmailList.js <pre><code>...\nexport const GROUP_CHAT = \"GroupChat\";\nexport const GROUP_CHAT_ARCHIEVE = \"GroupChatArchieve\";\n</code></pre> <pre><code>...\nconst handleEmailSharedDetails = (\n    accountHolderAppUserId,\n    msgCenterTypeName,\n    emailType\n) =&gt; {\n    setSelectedEmailType({\n        typeDisplayName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.SHAREDMAIL_INBOX\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n\n        typeSystemName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.ALL\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n    })\n}\n\n\n\n....\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === \"GroupChat\"\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;GroupChat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n        {mailPaginationCount?.archievedCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.archievedCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n\n&lt;Menu.Divider style={{ marginTop: 15 }} /&gt;\n</code></pre> Tip <pre><code>GroupChat.jsx\ngroupChatModal.jsx\ngroupChatPresentation.jsx\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#counter","title":"Counter","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#display-the-counter-on-the-groupchat-title-side","title":"Display the Counter on the Groupchat Title side","text":"EmailList.js<pre><code>// page-number: 3678\n? Number(\n    nullChecker(\n    mailPaginationCount?.circularInboxCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n    mailPaginationCount?.groupChatCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n</code></pre> Updated<pre><code>: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupChatCount?.all,\n        \"all\"\n    )\n).toLocaleString() || 0\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#counter-on-all-internal-tabpane","title":"Counter on <code>All</code> &amp; <code>Internal</code> Tabpane","text":"EmailList.js<pre><code>// All &amp; Internal Tab pane Counter:\n// pg: 4140: \n\n? Number(\n    nullChecker(\n        mailPaginationCount?.tenderBusinessCount\n        ?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName ===\n    \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupchat?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n: \"\"\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#email-messagecentertype-api","title":"Email messagecenterType API","text":"<pre><code>import { emailPaginationCount } from \"services/redux/email/mailMessageCenter/action\";\n\nconst { mailPaginationCount } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\n\n\nuseEffect(() =&gt; {\n    dispatch(emailPaginationCount({ messagecenterType: \"All\" }));\n  }, []);\n\n\n// https://cqnoval.info.com.np/api/app/mailMessageCenter/MailMessageCenterPaginationCountersByType?messagecenterType=All\n</code></pre> GroupChat.jsx<pre><code>import { getMailMessageCenterPagination } from \"services/redux/email/mailMessageCenter/action\";\n\nconst getGroupChat = (\n    MaxResultCount = 5,\n    SkipCount = 0,\n    loadMore = false,\n    MessageCenterTypeName = \"groupchat\",\n) =&gt; {\n    let appendUrl = `skipCount=${SkipCount}&amp;maxResultCount=${MaxResultCount}`;\n    if (MessageCenterTypeName) {\n        appendUrl += `&amp;messageCenterTypeName=${MessageCenterTypeName}`;\n        }\n    dispatch(getMailMessageCenterPagination(appendUrl, loadMore));\n}\n\n\nuseEffect(() =&gt; {\n    getGroupChat();\n}, [])\n\n\n// API\nexport class MailMessageCenterService {\n  async getMailMessageCenterPagination(query, source) {\n    let url = `${appBaseUrl}/mailMessageCenter/mailMessageCenterPagination?${query}`;\n    let data = await getServiceMail(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#redux-add-counter-all-in-reducer","title":"REDUX ADD Counter all in REDUCER","text":"reducer.js <p>services/redux/email/mailMessageCenter/reducer.js</p> <pre><code>const INITIAL_STATE = {\n    ...\n    allCount: null,\n    toCount: null,\n    fromCount: null,\n    ccCount: null,\n    bccCount: null,\n    pendingCount: null,\n    archievedCount: null,\n    trashCount: null,\n    junkCount: null,\n    flagCount: null,\n    drafCount: null,\n    outBoxCount: null,\n    approvalCount: null,\n    loanCount: null,\n    leaveCount: null,\n    procurementCount: null,\n    tenderBusinessCount: null,\n    circularInboxCount: null,\n    circularSentCount: null,\n    // added\n    groupChatCount: null,\n}\n\n\nlet approvalCount = \"\";\nlet allCount = \"\";\nlet toCount = \"\";\nlet fromCount = \"\";\nlet ccCount = \"\";\nlet bccCount = \"\";\nlet pendingCount = \"\";\nlet archievedCount = \"\";\nlet trashCount = \"\";\nlet junkCount = \"\";\nlet flagCount = \"\";\nlet drafCount = \"\";\nlet outBoxCount = \"\";\nlet loanCount = \"\";\nlet leaveCount = \"\";\nlet procurementCount = \"\";\nlet tenderBusinessCount = \"\";\nlet circularInboxCount = \"\";\nlet circularSentCount = \"\";\n// added\nlet groupChatCount = \"\";\n\n\nexport default function mailMessageCenterReducer(\n    state = INITIAL_STATE,\n    action\n)\n{\n    switch (action.type) {\n        case EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_INIT:\n            ...\n\n        ...\n        //pagination count\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_INIT:\n        return {\n            ...state,\n            mailPaginationCountLoading: true,\n        };\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_SUCCESS:\n        switch (action.record) {\n            case \"All\":\n                allCount = action.payload;\n                break;\n\n            case \"From\":\n                fromCount = action.payload;\n                break;\n\n            // added\n            case \"GroupChat\":\n                groupChatCount = action.payload;\n                break;\n            default:\n            ...\n        }\n\n        return {\n            ...state,\n            mailPaginationCount: {\n                allCount: allCount,\n                toCount: toCount,\n                fromCount: fromCount,\n                ccCount: ccCount,\n                bccCount: bccCount,\n                pendingCount: pendingCount,\n                archievedCount: archievedCount,\n                trashCount: trashCount,\n                junkCount: junkCount,\n                flagCount: flagCount,\n                drafCount: drafCount,\n                outBoxCount: outBoxCount,\n                approvalCount: approvalCount,\n                loanCount: loanCount,\n                leaveCount: leaveCount,\n                procurementCount: procurementCount,\n                tenderBusinessCount: tenderBusinessCount,\n                circularInboxCount: circularInboxCount,\n                circularSentCount: circularSentCount,\n                // added\n                groupChatCount: groupChatCount\n            },\n            allCount: allCount,\n            toCount: toCount,\n            fromCount: fromCount,\n            ccCount: ccCount,\n            bccCount: bccCount,\n            pendingCount: pendingCount,\n            archievedCount: archievedCount,\n            trashCount: trashCount,\n            junkCount: junkCount,\n            flagCount: flagCount,\n            drafCount: drafCount,\n            outBoxCount: outBoxCount,\n            approvalCount: approvalCount,\n            loanCount: loanCount,\n            leaveCount: leaveCount,\n            procurementCount: procurementCount,\n            tenderBusinessCount: tenderBusinessCount,\n            circularInboxCount: circularInboxCount,\n            circularSentCount: circularSentCount,\n                // added\n            groupChatCount: groupChatCount,\n            mailPaginationCountLoading: false,\n        };\n    }\n}\n</code></pre> Changes EmailList.js<pre><code>// pagenum: 450\nuseEffect(() =&gt; {\n    if (emailType !== \"Business\") {\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.ALL }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularInbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularSent\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"From\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"To\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Cc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Business\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Bcc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Pending\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Archived\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Trash\" }));\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.JUNK }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Specialflag1\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Draft\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        // added\n        dispatch(emailPaginationCount({ messagecenterType: \"GroupChat\" }));\n       },\n    }   \n[\n// replyInstanceMessageResp,\n// changeEmailStatusTypeRespLoading,\n// selectedMailTypeAndMailData,\n]);\n\n\n//\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === CONSTANT.GROUP_CHAT\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;Group Chat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n\n        {console.log(\"mailPaginationCount\", mailPaginationCount)}\n\n        {mailPaginationCount?.groupChatCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.groupChatCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-isarchive-remove-item","title":"GROUPCHAT IsArchive Remove Item","text":"<p>it removes the item but need to hit the api: <code>getMailMessageCenterPagination</code></p> <pre><code>export const getMailMessageCenterPagination = (q, loadMore, data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION, data));\n    const response =\n      await mailMessageCenterService.getMailMessageCenterPagination(q, source);\n    if (response?.cancelApi === false) return;\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION,\n          response.data,\n          loadMore,\n          data\n        )\n      );\n      dispatch(finish(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n      message.error(response.errorMessage);\n    }\n  };\n};\n</code></pre> reducer.jsx reducer.jsx<pre><code>// redux/email/mailMessageCenter/reducer.js\n// page number: 202\n\ncase EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_UPDATE:\n  let newData = state.mailMessageCenterPagination.items.map((email) =&gt; {\n    if (\n      email.applicationTypeSystemName === \"EMail\" ||\n      email.applicationTypeSystemName === \"QuickMessage\" ||\n      email.applicationTypeSystemName === \"Leave\" ||\n      email.applicationTypeSystemName == \"Loan\" ||\n      email.applicationTypeSystemName === \"Business\" ||\n      email.applicationTypeSystemName === \"Document\" ||\n      email.applicationTypeSystemName === \"TODO\" ||\n      email.applicationTypeSystemName === \"Todo\" ||\n      email.applicationTypeSystemName === \"Procurement\" ||\n      \"Loan\"\n    ) {\n      if (action.query.messageCenterId === email.id) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    } else if (email.applicationTypeSystemName === \"InstanceMessage\") {\n      if (\n        action.query.messageCenterId === email.instanceMainMessageCenterId\n      ) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    }\n  });\n\n  let filterJunk = filterNewData.filter((data) =&gt;\n    action.emailStatus.isJunk ? !data.isJunk : data.isJunk\n  );\n  {/* ADDED */}\n  let filterChatArchive = filterNewData.filter((data) =&gt;\n    action.emailStatus.isGroupChatArchive ? !data.isGroupChatArchive : data.isGroupChatArchive\n  );\n\n\n  return {\n    ...state,\n    getResponseStatus: action.query,\n    mailMessageCenterPagination: {\n      items:\n        action.query.participantStatusName === \"Trash\"\n          ? filterTrashData\n          : action.query.participantStatusName === \"doubleTrash\"\n            ? doubleTrash\n            : action.query.participantStatusName === \"Archived\"\n              ? filterArchieve\n              : action.query.participantStatusName === \"Pending\"\n                ? filterPending\n                : action.query.participantStatusName === \"Junk\"\n                  ? filterJunk\n\n                  {/* ADDED */}\n                  :action.query.participantStatusName === \"GroupChatArchive\"\n                  ? filterChatArchive\n                  {/*----*/}\n\n\n                  : action.query.participantStatusName === \"Special1\"\n                    ? filterLowPriorityMail\n                    : filterNewData,\n      totalCount: state.mailMessageCenterPagination.totalCount,\n    },\n    mailMessageCenterPaginationLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#mailmessagecenterheaderjs","title":"MailMessageCenterHeader.js","text":"ToGroupChat Icon Added Email/Includes/MailMessageCenterHeader.js<pre><code>{\n    (selectedMailTypeAndMailData?.typeSystemName === FROM ||\n    selectedMailTypeAndMailData?.typeSystemName === INBOX) \n\n    // or \n    // selectedMailTypeAndMailData?.typeSystemName === FROM\n\n    &amp;&amp; (\n    &lt;&gt;\n        &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n            multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n            \"disabled\"\n            } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n            if (!isEmpty(selectedMailTypeAndMailData)) {\n                changeEmailStatus(\n                  { \n                    isGroupChatSwitch: true,\n                    isGroupChatSwitch_InstanceMessage: true,\n                    groupChatSwitch: GROUP_CHAT_SWITCH\n                  }\n                )\n            }\n        }}\n        &gt;\n        &lt;Image src={chatTransfer} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n            ToGroupChat\n        &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#componentsconstants","title":"components/constants","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-module/","title":"GroupChat Module","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-module/#group-chat-module","title":"Group Chat Module","text":"Navbar.js <pre><code>// pageNumber: 693\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;Link\n    to=\"/groupchat\"\n    onClick={() =&gt; setState({ ...state, basepath: \"/groupchat\" })}\n    className={`icons__wrapper ${\n        state.basePath === \"groupchat\" ? \"active\" : \"\"\n    }`}\n    &gt;\n        &lt;img src={Calendar} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt;Group Chat&lt;/span&gt;\n    &lt;/Link&gt;\n)}\n</code></pre> Routes.js <pre><code>&lt;AuthRoute path=\"/groupchat\" exact&gt;\n    {!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox ? \n    &lt;GroupChat /&gt; : &lt;NotFound /&gt;\n    }\n&lt;/AuthRoute&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-module/#infinite-scrolling","title":"Infinite Scrolling","text":"Settings setCurrentPage Better CodeOld Code <pre><code>useEffect(() =&gt; {\n    if (!isEmpty(groupChatTitlePaginationResp?.items)) {\n        setGroupData(groupChatTitlePaginationResp.items);\n\n        // Ensure proper calculation of the current page\n        const totalItems = groupChatTitlePaginationResp.items.length;\n        const newCurrentPage = Math.ceil(totalItems / pageSize);\n\n        console.log(\"Total Items: \", totalItems);\n        console.log(\"New Current Page: \", newCurrentPage);\n\n        setCurrentPage(newCurrentPage);\n    } else {\n        setGroupData([]);\n        setCurrentPage(1);\n    }\n}, [groupChatTitlePaginationResp, pageSize]);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/import-excel-file/","title":"Import Excel File","text":""},{"location":"office/ispl/documentation/alldocs/import-excel-file/#import-excel-file","title":"Import Excel File","text":"functionapiFile remanentCall.js<pre><code>// upload Contact attendence\nexport const uploadContactExcel = (resp) =&gt; {\nreturn Axios.post(appBaseUrl + '/importExcelFile');\n}\n</code></pre> <pre><code>\n</code></pre> UniversalFileUpload.js<pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/instance-and-internal-message/","title":"Instance and Internal Message","text":"Instance <code>dashboard</code> and Internal Message Chat <pre><code>const {\n    instanceChatCenterPagination,\n    instanceChatCenterPaginationLoading,\n    replyInstanceMessageResp,\n    replyInstanceMessageRespLoading,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\nconst {\n    instanceChatAddResp,\n    instanceChatAddRespLoading\n} = useSelector((state) =&gt; state.instanceChatCenter);\n</code></pre> <pre><code>Test task not showing issue- 1  On Progress\n2024-12-18\n\n// ACTION\ngetInstanceChatCenterPagination\ngetInstanceMessageCenterPagination\n\nAPI\ninstanceChatPagination\nmessageCenterInstanceMessagePagination\n</code></pre> <pre><code>src/views/GlobalEmailChat/GlobalChat.js\nsrc/views/GlobalEmailChat/index.js\nsrc/views/Home/DashboardComponents/MainDashboard/DailyDairy/index.jsx\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/instance-and-internal-message/#changes","title":"CHANGES","text":"views/GlobalEmailChat/index.js<pre><code>const ChatDetails = (props) =&gt; {\n    hideInternalMessage &amp;&amp;\n        origin === \"Dashboard\" &amp;&amp;\n        module === \"DailyTask\" ? (\n        &lt;&gt;\n          &lt;GlobalChat\n            isPrivate={isPrivate}\n            setchatBox={setchatBox}\n            module={module}\n            handleReply={handleReply}\n            setReplyStatus={setReplyStatus}\n            chatBox={chatBox}\n            todoDetails={todoDetails}\n            handleChangeEvent={handleChangeEvent}\n            setHideInternalMessage={setHideInternalMessage}\n            hideInternalMessage={hideInternalMessage}\n            setChatHeight={setChatHeight}\n            chatHeight={chatHeight}\n            setSmallChatHeight={setSmallChatHeight}\n            smallChatHeight={smallChatHeight}\n            setShowChat={setShowChat}\n            taskId={taskId}\n            mailMessageParticipationStatusListing={\n              mailMessageParticipationStatusListing\n            }\n            /**************************************************************/\n            // CHANGES\n            // instanceChatCenterPagination={instanceMessageCenterPagination}\n            instanceChatCenterPagination={instanceChatCenterPagination}\n            origin={origin}\n          /&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/internal-message/","title":"Internal Message","text":""},{"location":"office/ispl/documentation/alldocs/internal-message/#internal-message","title":"Internal Message","text":"<p>Note</p> Companiesindex Companies.js<pre><code>// views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nimport { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> index.js<pre><code>// views/GlobalEmailChat/index.js\n\nconst ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/ispl/documentation/alldocs/internal-message/#to-get-all-the-internal-chat-pagination","title":"To get all the Internal Chat Pagination","text":"<pre><code>// IMPORT \nimport { getInstanceChatCenterPagination } from \"services/redux/instanceChat/action\";\nimport { replyInstanceMessage } from \"services/redux/email/instanceMessageCenter/action\";\n\n// SELECTOR DASHBOARD\nconst { instanceChatCenterPagination, instanceChatCenterPaginationLoading } =\n    useSelector((state) =&gt; state.instanceChatCenter);\n\n// MAIL MESSAGE CENTER\nconst {\n  instanceMessageCenterPagination,\n  instanceMessageCenterPaginationLoading,\n  replyInstanceMessageResp,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\n// ACTION\nexport const getInstanceChatCenterPagination = (query) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    const response =\n      await instanceMessageChatServices.getInstanceChatCenterPagination(query);\n    dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\n\n// API\nexport class InstanceMessageChatServices {\n  instanceChatAdd(body) {\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatAdd`;\n    let data = postService(url, body, \"post\");\n    return data;\n  }\n\n  getInstanceChatCenterPagination(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatPagination?${query}`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/","title":"Login","text":"<p>Note</p> late attendanceleave typeindex lateAttendence.js<pre><code>...\nimport { useEffect, useState } from \"react\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\"\nimport { validateReason } from \"utils/validateReason\";\n\n\nconst { Modal, Form, Input, Spin, Alert, Select, message } = require(\"antd\");\nconst { Option } = Select;\n\nconst LateAttendence = ({id,data,leaveReasonPopUp,leaveStartdate,leaveEndDate})=&gt;{\n\n    ...\n    const [uploaders, setUploaders] = useState();\n    const [deafultLeaveType, setDefaultLeaveType] = useState([]);\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(remainingLeaveApplicationTypesListing)) {\n            const casualLeave = remainingLeaveApplicationTypesListing.find(obj =&gt; obj.leaveApplicationTypeDto.leaveTypeName === \"Casual\");\n            if(casualLeave?.leaveApplicationTypeDto?.id) {\n                form.setFieldsValue({\n                    leaveApplicationTypeId: casualLeave?.leaveApplicationTypeDto?.id,\n                })\n            }\n        }\n    }, [remainingLeaveApplicationTypesListing])\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n\n    ...\n\n    const startDate = moment(leaveStartdate);\n    const endDate = moment(leaveEndDate);\n    const durationInDays = endDate.diff(startDate, 'days');\n\n    const handleChange = (value, option) =&gt; {\n        const selectedTitle = option ? option.title : null;\n        const selectedValue = option ? option.value : null;\n\n        setDefaultLeaveType({\n            title: selectedTitle,\n            value: selectedValue\n        });\n    }\n\n\n    return (\n        &lt;div className=\"late_login_popup\"&gt;\n            &lt;Modal visible={true} footer={null} closable ={false} wrapClassName=\"late_login_popup_modal\"&gt;\n                {data &amp;&amp; \n                &lt;div className=\"time_format_login_popup\"&gt;\n                    Login Time:{moment(data).format(\"YYYY-MM-DD,HH:mm:ss A\")}\n                &lt;/div&gt;}\n                &lt;div className=\"late_attendence_popup_header\"&gt;\n                    &lt;h3&gt;Kindly elaborate your reason for being late {leaveReasonPopUp &amp;&amp; \"and also leave reason\"} !!!&lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;br/&gt;\n                &lt;Form form={form} onFinish={onFinish}&gt;\n                    &lt;div style={{fontWeight:\"600\"}}&gt;Late Reason :&lt;/div&gt;\n                    &lt;Form.Item \n                        rules={[\n                            // {\n                            //     required:true,\n                            //     message: \"Please justify the reason\",\n                            // },\n                            validateReason(10, 2)\n                        ]}\n                        name=\"attendanceLateReason\"\n                        // label=\"Late Reason\"\n                    &gt;\n                        &lt;TextArea rows={4} style={{fontSize:\"15px\"}}/&gt;\n                    &lt;/Form.Item&gt;\n                    {leaveReasonPopUp &amp;&amp; \n                    &lt;div&gt;\n                        &lt;div style={{fontWeight:\"600\",marginTop:\"10px\"}}&gt;You have taken leave from {moment(leaveStartdate).format(\"YYYY-MM-DD\")} to {moment(leaveEndDate).format(\"YYYY-MM-DD\")} &lt;/div&gt;\n                        &lt;div &gt;Leave Reason :&lt;/div&gt;\n                        &lt;Form.Item rules={[\n                                // {\n                                //     required:true,\n                                //     message: \"Please justify the reason\",\n                                // },\n                                validateReason(10, 2)\n                            ]}\n                            name=\"attendanceLeaveReason\"\n                        // label=\"Leave Reason\"\n                        // className=\"late_reason_submit\"\n                        &gt;\n                            &lt;TextArea rows={4} style={{fontSize:\"15px\"}} /&gt;\n                        &lt;/Form.Item&gt;\n                        &lt;Form.Item\n                            className=\"form__group\"\n                            label=\"Choose Leave Type\"\n                            name=\"leaveApplicationTypeId\"\n                            rules={[\n                                {\n                                required: true,\n                                },\n                            ]}\n                            style={{\n                                paddingTop: \"10px\"\n                            }}\n                        &gt;\n                            &lt;Select\n                                placeholder=\"Please select\"\n                                autoComplete=\"off\"\n                                onChange={(value, option) =&gt; handleChange(value, option)}\n                            &gt;\n                                {\n                                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                                        &lt;Option\n                                            value={leaveType.leaveApplicationTypeId}\n                                            title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                            key={i}&gt;\n                                            {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                        &lt;/Option&gt;\n                                    ))}\n\n                            &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        {durationInDays &gt;= 3 &amp;&amp; deafultLeaveType?.title === \"Medical\"  ? (\n                            &lt;&gt;\n                            {uploaders?.map((u, i) =&gt; (\n                                &lt;Form.Item \n                                    className=\"form__group\" \n                                    name={[\"uploadedFileDtos\"]}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \"Please upload at least one file\",\n                                        },\n                                    ]} &gt;\n                                    &lt;ImageUploaderMultiple\n                                        name={u.name}\n                                        isMultipleFileAllowed={true}\n                                        id={u.id}\n                                        allowedExtensions={u.allowedExtensions}\n                                        index={i}\n                                        uploadedFileDtos={form.getFieldValue()}\n                                        formName=\"uploadedFileDtos\"\n                                        form={form}\n                                        callback={(e) =&gt; {\n                                            let olduploadedFileDtos = form.getFieldValue()\n                                                .uploadedFileDtos\n                                                ? [...form.getFieldValue().uploadedFileDtos]\n                                                : [];\n\n                                            let uploadedFileDtos = [...olduploadedFileDtos];\n                                            uploadedFileDtos.push(e);\n\n                                            form.setFieldsValue({\n                                                uploadedFileDtos,\n                                            });\n                                        }}\n                                    /&gt;\n                                &lt;/Form.Item&gt;\n                            ))} \n                            &lt;/&gt;\n                        ) : null}\n\n\n                    &lt;/div&gt;\n                    }\n                    &lt;Alert\n                        message=\"Informational Notes\"\n                        description=\"Give Valid Reason with 10 minimum character &amp; 2 words\"\n                        type=\"info\"\n                        showIcon\n                        style={{marginTop: '20px'}}\n                    /&gt;\n                &lt;div className=\"button_submit\"&gt;\n                    &lt;button className=\"late_Reason_Attendence_Submit\" htmlType=\"submit\"&gt;\n                    {attendenceAddNewResponseLoading ? &lt;Spin className=\"late_reason_spinner\"/&gt;: \"Submit\"}\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> leaveForm.js<pre><code>&lt;Form.Item\n    className=\"form__group\"\n    label=\"Choose Leave Type\"\n    name=\"leaveApplicationTypeId\"\n    rules={[\n        {\n            required: true,\n\n        },\n        ]}\n&gt;\n    &lt;Select\n        placeholder=\"Please select\"\n        autoComplete=\"off\"\n    &gt;\n        {\n            !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n            remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                &lt;Option\n                    value={leaveType.leaveApplicationTypeId}\n                    title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                    key={i}&gt;\n                    {leaveType?.leaveApplicationTypeDto?.leaveTypeName} {`(${leaveType?.remainingLeave &gt; 0 ? leaveType?.remainingLeave : 0} remaining out of ${leaveType?.allowedleave} days)`}\n                &lt;/Option&gt;\n            ))}\n\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>import { getRemainingLeaveApplicationTypesForEmployee } from \"../../../services/redux/requistions/leaveApplication/action\";\n\nconst {\n    leaveApplicationPagination,\n    leaveApplicationPaginationLoading,\n    remainingLeaveApplicationTypesListing,\n    remainingLeaveApplicationTypesListingLoading,\n    addLeaveApplicationResp,\n} = useSelector((state) =&gt; state.leaveApplication);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(addLeaveApplicationResp))\n    dispatch(getRemainingLeaveApplicationTypesForEmployee());\n}, [addLeaveApplicationResp]);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/#mail-leave-details","title":"Mail <code>leave Details</code>","text":"<p>Note</p> LeaveDetails.js<pre><code>import {\n    ...,\n    Select\n} from \"antd\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\";\n\nconst { Option } = Select;\n\nconst LeaveDetails = ({ leaveAppId }) =&gt; {\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(details)) {\n        form.setFieldsValue({\n            leaveApplicationTypeIdxx: details?.leaveApplicationTypeId,\n        })\n\n        console.log(\"details: \", details)\n        }\n    }, [details])\n\n     return !isEmpty(details) ? (\n        &lt;div className=\"mail-leave-details\"&gt;\n            ...\n\n            &lt;Form.Item\n                className=\"form__group\"\n                label=\"Choose Leave Type\"\n                name=\"leaveApplicationTypeIdxx\"\n                // rules={[\n                //     {\n                //     required: true,\n                //     },\n                // ]}\n                style={{\n                    paddingTop: \"10px\"\n                }}\n            &gt;\n                &lt;Select\n                    placeholder=\"Please select\"\n                    autoComplete=\"off\"\n                &gt;\n                    {\n                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                        &lt;Option\n                        value={leaveType.leaveApplicationTypeId}\n                        title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        key={i}&gt;\n                        {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        &lt;/Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            ...\n        &lt;/div&gt;\n     )\n\n}\n\nexport default LeaveDetails;\n</code></pre> leaveForm.js<pre><code>import { message } from \"antd\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\n\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nconst LeaveForm = ({\n    remainingLeaveApplicationTypesListing,\n    setHideLeaveDrawer,\n}) =&gt; {\n\n    const [uploaders, setUploaders] = useState();\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {uploaders?.map((u, i) =&gt; (\n                &lt;Form.Item className=\"form__group\" name={[\"uploadedFileDtos\"]} &gt;\n                    &lt;ImageUploaderMultiple\n                        name={u.name}\n                        isMultipleFileAllowed={true}\n                        id={u.id}\n                        allowedExtensions={u.allowedExtensions}\n                        index={i}\n                        uploadedFileDtos={form.getFieldValue()}\n                        formName=\"uploadedFileDtos\"\n                        form={form}\n                        callback={(e) =&gt; {\n                            let olduploadedFileDtos = form.getFieldValue()\n                                .uploadedFileDtos\n                                ? [...form.getFieldValue().uploadedFileDtos]\n                                : [];\n\n                            let uploadedFileDtos = [...olduploadedFileDtos];\n                            uploadedFileDtos.push(e);\n\n                            form.setFieldsValue({\n                                uploadedFileDtos,\n                            });\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n            ))} \n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/#utils","title":"utils","text":"<p>Tip</p> validate Reason <pre><code>export const validateReason = (minChars, minWords) =&gt; ({\n    validator: (_, value) =&gt; {\n    const words = value.trim().split(/\\s+/);\n    const characterCount = value.trim().length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n        return Promise.reject(\n        new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n        );\n    }\n    return Promise.resolve();\n    },\n});\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/","title":"Mail","text":"<p>While searching the reference in the <code>compose mail</code>, it doesn't show all the reference items?</p> <p>ComposeEmailDrawer</p> ComposeEmailDrawer.js<pre><code>onSearch={(value) =&gt; {\n    setSearchValueReference(value);\n    setReferencevalue(value);\n    setFilterParticipantType(\"REF\");\n    handleFilter(value, \"REF\");\n}}\n&lt;Form \n    name = \"participantTos\"/&gt;\nconst displayMessages = (status) = {}\n\n// page number: 3710\nreturn (\n    &lt;Option\n        key={index}\n        // key={data.id}\n        value={data.title}\n        // className={index}\n        // id={index}\n        label={[data.code, data.title]}\n    &gt;\n        &lt;div\n        className=\"compose-reference-wrapper\"\n        // key={index}\n        key={data.id}\n        &gt;\n        &lt;div\n            className=\"compose-references-code\"\n            title={data?.code}\n        &gt;\n            &lt;span&gt;{data?.code}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-title\"\n            title={data?.title}\n        &gt;\n            &lt;span&gt; {data?.title}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-description\"\n            title={data?.description}\n        &gt;\n            &lt;span&gt;{data?.description}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Option&gt;\n);\n</code></pre> <p>Solved</p> Solved BasicSolved Advanced ComposeEmailDrawer.js<pre><code>// const isSelected = mailRefDtos.includes(data.code);\n// also add this \nconst isSelected = mailRefDtos.includes(`${data.code}-${data.title}`);\n&lt;Option\n    key={index}\n    //value={data.title}\n    // add this\n    value={`${data.code}-${data.title}`}\n    label={[data.code, data.title]}\n&gt;\n&lt;/Option&gt;\n</code></pre> ComposeEmailDrawer.js<pre><code>&lt;div className=\"email-text\"&gt;Reference&lt;/div&gt;\n&lt;Form.Item\n    className=\"form__group compose-ref-select\"\n    name=\"mailMessageReferenceDtos\"\n    rules={[\n        {\n            required: closeWindow === \"newDraft\" ? false : true,\n            message: \"\",\n        },\n    ]}\n&gt;\n    &lt;Select\n        onSelect={(value) =&gt; {\n            {/* OLD CODE */}\n            const uniqueArray = Array.from(\n                new Set([...mailRefDtos, value])\n            );\n\n            {/* NEW CODE */}\n            const uniqueArray = Array.from(\n                new Set([\n                    // Extract substring before underscore\n                    ...mailRefDtos.map(dto =&gt; dto.split('_')[0]),\n\n                    // Extract substring before underscore from the new value\n                    value.split('_')[0]\n                ])\n            );\n        })}\n    /&gt;\n&lt;/Form.Item&gt;\n\n\n{/* ADDED THIS CODE */}\nconst isSelected = mailRefDtos.includes(data?.code);\n\nreturn (\n    &lt;Option\n        key={index}\n        {/* ADDED UNDERSCORE */}\n        value={`${data.code}_${data.title}`}\n        label={[data.code, data.title]}\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#dashboard-events","title":"Dashboard Events","text":"PublicEvents Home/Events/PublicEvents.js<pre><code>// added Dropdown, Menu\nimport { Form, Image, Modal, Skeleton, Tooltip, Dropdown, Menu } from \"antd\";\n\nconst PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n\n    // added\n    const [openEventModal, setOpenEventModal] = useState(false);\n\n    const menu = (\n        &lt;Menu&gt;\n        &lt;Menu.Item\n            onClick={() =&gt; {\n                setOpenEventModal(true);\n            }}\n        &gt;\n            Holiday\n        &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                &lt;h4 className=\"dashboards__body--title\"&gt;Events&lt;/h4&gt;\n                &lt;div className=\"\"&gt;\n                    &lt;WechatOutlined\n                        onClick={() =&gt; {\n                            setInternalVisible(true);\n                        }}\n                    /&gt;\n\n                    {/* added */}\n                    &lt;Dropdown.Button\n                        overlay={menu}\n                        className=\"new_menu\"\n                        style={{\n                            marginBottom: \"5px\",\n                            width: \"20px\",\n                            border: \"none\",\n                            marginLeft: \"2px\",\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#dashboard-flip-card","title":"Dashboard Flip Card","text":"flip-card tender.js<pre><code>import ProjectsLists from \"./DashboardComponents/ProjectsLists\";\n\nconst TenderLists = ({ classNames }) =&gt; {\n    const [rotate, setRotate] = useState(0);\n\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n\n                {/* FRONT */}\n                &lt;div className=\"flip-card-front\"&gt;\n                    &lt;div\n                        className={\"dashboards__tenderlist dashboards__body \" + classNames}\n                        style={{ height: \"495px\" }}\n                    &gt;\n                        &lt;div className=\"dashboards__bodyWrap\"&gt;\n                        &lt;h4 className=\"dashboards__body--title\"&gt;\n                            Tenders/Projects\n                            &lt;span\n                                onClick={() =&gt; {\n                                    setRotate(rotate + 1);\n                                }}\n                                style={{\n                                    marginLeft: \"10px\",\n                                    height: \"30px\",\n                                    marginBottom: \"10px\",\n                                }}\n                            &gt;\n                                &lt;img\n                                    src=\"./assets/svg/toggle-arrow.svg\"\n                                    height={15}\n                                    alt=\"complete\"\n                                /&gt;\n                            &lt;/span&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* BACK */}\n                &lt;div className=\"flip-card-back\"&gt;\n                    &lt;div\n                        style={{\n                        backfaceVisibility: \"hidden\",\n                        }}\n                    &gt;\n                        &lt;div\n                            className={\n                                \"dashboards__tenderlist dashboards__body \" + classNames\n                            }\n                            &gt;\n                            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                                &lt;h4 className=\"dashboards__body--title\"&gt;\n                                Projects/Tenders\n                                &lt;span\n                                    onClick={() =&gt; {\n                                        setRotate(rotate + 1);\n                                    }}\n                                    style={{\n                                        marginLeft: \"10px\",\n                                        height: \"30px\",\n                                        marginBottom: \"10px\",\n                                    }}\n                                &gt;\n                                    &lt;img\n                                        src=\"./assets/svg/toggle-arrow.svg\"\n                                        height={15}\n                                        alt=\"complete\"\n                                    /&gt;\n                                &lt;/span&gt;\n                                &lt;/h4&gt;\n                            &lt;/div&gt;\n\n                            {/* Components */}\n                            &lt;ProjectsLists /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#email-issue","title":"Email Issue","text":"<p>while <code>reply all</code>, <code>reply</code>, <code>forward</code> the application crashed</p> <ul> <li><code>/email-compose?applicationType=newEmail</code> - working</li> <li><code>/email-compose?applicationType=reply</code> - not working</li> <li><code>/email-compose?applicationType=replyall</code> - not working</li> <li><code>/email-compose?applicationType=forward</code> - not working</li> </ul> <p>Danger</p> displayMessagescontactQuickAddEmailRespsonsecurrentSelectedMessage useEffectComposeEmailDrawer <pre><code>useEffect(() =&gt; {\n    {/* DEBUG THIS WHEN NEW CONTACT ADDED THIS BECOMES EMPTY */}\n    console.log(\"participantTypeTos: \", participantTypeTos)\n\n    if (applicationTypeStatus) {\n        if (applicationTypeStatus === \"reply\") {\n\n            // IMPORTANT\n            displayMessages(applicationTypeStatus);\n\n            form.setFieldsValue({\n                participantCCs: [],\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n            });\n        } else if (applicationTypeStatus === \"replyall\") {\n            form.setFieldsValue({\n                participantCCs: newCCs?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                uploadedFileDtos: [],\n            });\n        }\n\n        // others ...\n    }\n})\n</code></pre> ComposeEmailDrawer.js<pre><code>const displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom = currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n    let participantTypeTos =\n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        });\n    let participantTypeCCs = !isEmpty(\n        currentSelectedMailMessage?.applicationTypeDetails?.cCs\n        )\n        ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map(\n            (typeTos) =&gt; {\n                return { emailAddress: typeTos.emailAddress };\n            }\n        )\n    : [];\n\n    const participantTos = getParticipantsInfo(participantTypeTos);\n    const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n\n    if (status !== \"reSend\") {\n\n        if (status === \"composeDraft\") {\n            form.setFieldsValue({\n                participantFrom: messageParticipantsFrom[0],\n            });\n            setEditorData(currentSelectedMailMessage.body);\n        } else {\n            let data = `From:${\n                participantTypeFrom?.emailAddress\n            }  &lt;br&gt; To:${participantTos} ${\n                partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n            } &lt;br&gt;  Date:${\n                currentSelectedMailMessage?.creationTime &amp;&amp;\n                moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n                },${moment(currentSelectedMailMessage?.creationTime).format(\n                \"LT\"\n            )} &lt;br&gt; ${currentSelectedMailMessage.body} &lt;br&gt;`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n        if (status === \"emailForwardSend\") {\n            let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")},${moment(\n            currentSelectedMailMessage?.creationTime,\"HH:mm:ss\"\n            ).format(\"LT\")} ${\n            (currentSelectedMailMessage?.companyName\n                ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                    .companyName\n                : \"\",\n            currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                .emailAddress)\n            }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n    } else if (status === \"reSend\") {\n        let data = `${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    } else {\n        let data = `Date:${\n            currentSelectedMailMessage?.creationTime &amp;&amp;\n            moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n        } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n};\n</code></pre> <pre><code>  const { contactQuickAddEmailRespsonse } = useSelector((state) =&gt; state.contactCompanyPerson);\n\n  useEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n        if (filterParticipantType == \"To\") {\n            form.setFieldsValue({\n            participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n                ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n                : [emailAddressResp],\n            });\n        } else if (filterParticipantType == \"CC\") {\n            form.setFieldsValue({\n            participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n                ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n                : [emailAddressResp],\n            });\n        }\n    }\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> <pre><code>useEffect(() =&gt; {\n    // ...\n    if (!isEmpty(currentSelectedMailMessage)) {}\n}, [\n    applicationTypeStatus,\n    currentSelectedMailMessage,\n    messageParticipantsFrom,\n]);\n</code></pre> <ul> <li>file-saver <code>npm</code></li> </ul>"},{"location":"office/ispl/documentation/alldocs/mail/#bug-pin-pointed","title":"Bug pin-pointed","text":"<p>Bug</p> ComposeEmailDrawer.js<pre><code>{/* page number: 1222 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        // displayMessages(applicationTypeStatus);\\\n        console.log(\"participantTypeTos: \", participantTypeTos)\n        form.setFieldsValue({\n            participantCCs: [],\n            // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n            //   return typeTos;\n            // }),\n        });\n    }\n}\n</code></pre> <p>Success</p> Solved Tos <code>Reply</code>git file changes ComposeEmailDrawer.js<pre><code>const[contactTos, setContactTos] = useState([])\n\n\n{/* pagenumber: 572 */}\nconst displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* ADDDED !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos)\n    ?\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n    })\n    : [];\n}\n\n---\n\n{/* pagenumber: 1225 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        displayMessages(applicationTypeStatus);\n        form.setFieldsValue({\n        participantCCs: [],\n\n        {/* ADD !isEmpty */}\n        participantTos: !isEmpty(participantTypeTos) ?\n            participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        })\n        //: [],\n        : contactTos\n        })\n    }\n}\n\n{/* page num: 1469  */}\nuseEffect(() =&gt; {\n    if (activeEmailSignatureDetailsResponse) {\n\n    let signatureData = activeEmailSignatureDetailsResponse?.body\n        ? `&lt;div id=\"signatureData\" ref={${ref}}&gt;&lt;br/&gt;${activeEmailSignatureDetailsResponse?.body}&lt;/div&gt;`\n        : \"\";\n    const sign = localStorage.getItem(\"signatureData\");\n\n    let participantTypeFrom = \n        currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* aded !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos) ? \n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map(\n        (typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        }\n        ) : [];\n    }\n})\n\n{/* pagenumber: 1409 */}\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n    let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n    setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n\n        {/* ADDED */}\n        const uniqueMail = new Set([...form.getFieldsValue()?.participantTos, emailAddressResp])\n        setContactTos([...uniqueMail])\n\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n}, [contactQuickAddEmailRespsonse]);\n\n\n{/* pagenumber: 1649 */}\nconst autoDraft = (e, participant) =&gt; {\n    {/* UPDATE THIS */}\n    let newParticipantArrTo = form.getFieldsValue().participantTos \n    ? [...form.getFieldsValue().participantTos]\n    : [];\n}\n</code></pre> <pre><code>git diff --stat\nsrc/views/Email/Includes/ComposeEmailDrawer.js | 42 ++++++++++++++++++++++++++++++------------\n1 file changed, 30 insertions(+), 12 deletions(-)\n</code></pre> <p>Abstract</p> <pre><code>const [currentSelectedMailMessage, setCurrentSelectedMailMessage] = useState({});\n\n{/* ADD THIS STATE */}\nconst [currentSelectedMailTos, setCurrentSelectedMailTos] = useState([]);\n\n\nconsole.log(\"currentSelectedMailTos: \", currentSelectedMailTos)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#api","title":"API","text":"<p>api</p> <pre><code>HOLIDAY  EXCEL in admin\nhttps://localhost:44386/api/app/adminModule/downloadSampleHolidayUploadExcel\nhttps://localhost:44386/api/app/adminModule/importHoliday\n\nHOLIDAY YEAR GET LISTING\nhttps://localhost:44386/api/app/organizerEvent/holidayEventsPagination?SearchByNepaliYear=2080&amp;MaxResultCount=50&amp;SkipCount=0\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/","title":"Permission Based Access Control","text":""},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/#permission-based-access-control-in-react","title":"Permission-Based Access Control in react","text":"<p>In <code>permission-based</code> control, users are granted individual permissions directly (e.g., \"canViewDashboard\", \"canEditProfile\"). Permissions are more granular and allow for fine-tuning access control.</p> <pre><code>import { isEmpty } from \"lodash\";\n\nconst [grantedPolices, setGrantedPolices] = useState({});\n\nconst { applicationConfiguration } = useSelector(\n    (state) =&gt; state.applicationConfig\n);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(applicationConfiguration?.auth?.grantedPolicies)) {\n        setGrantedPolices(applicationConfiguration?.auth?.grantedPolicies);\n        console.log(\"applicationConfiguration?.auth?.grantedPolicies: \", applicationConfiguration?.auth?.grantedPolicies);\n    }\n}, [applicationConfiguration]);\n\n\n\n\nreturn (\n\n    &lt;&gt;\n        {!isEmpty(grantedPolices) &amp;&amp;  \n        grantedPolices[\"CQNovalFramework.DashboardMenu.DailyDiary.UserListing\"] &amp;&amp; (\n            &lt;div className=\"global-form-group calc\"&gt;\n                &lt;div className=\"global-form-label\"&gt;\n                    &lt;label&gt;Users&lt;/label&gt;\n                &lt;/div&gt;\n                &lt;div className=\"global-form-input\"&gt;\n                    &lt;Form.Item\n                        className=\"form__group\"\n                        name=\"UserId\"\n                    &gt;\n                        &lt;Select\n                            placeholder=\"Select a User\"\n                            showSearch={true}\n                            allowClear\n                            filterOption={(input, option) =&gt;\n                            option.children[0] &amp;&amp;\n                            option.children[0]\n                                .toLowerCase()\n                                .indexOf(input.toLowerCase()) &gt;= 0\n                            }\n                            onChange={(id, value) =&gt; {\n                                setSelectedUserId(id);\n                                if (id === null || id === undefined) {\n                                setSelectedUserName(null);\n                                } else {\n                                    const selectedUser = user.find(u =&gt; u.appUserId === id);\n                                    if (selectedUser) {\n                                    setSelectedUserName(selectedUser.userName);\n                                    }\n                                }\n                            }}\n                        &gt;\n                            {user.map((user) =&gt; (\n                                &lt;Option key={user.appUserId} &gt;\n                                    {user.fullName} {`[${user.userName}]`}\n                                &lt;/Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )}\n    &lt;/&gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/#api-action-reducer","title":"API, Action &amp; Reducer","text":"APIActionReducer <pre><code>import { rootBaseUrl } from \"utils/config\";\nimport { getService } from \"../../../commonServices\";\n\nexport class ApplicationConfigurationService {\n    getApplicationConfiguration() {\n        let url = `${rootBaseUrl}/abp/application-configuration`;\n        let data = getService(url);\n        return data;\n    }\n}\n</code></pre> <pre><code>import { APPLICATION_CONFIGURATION } from \"../../../types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { ApplicationConfigurationService } from \"./api\";\n\nconst applicationConfigurationService = new ApplicationConfigurationService();\n\nexport const getApplicationConfiguration = () =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n        const response = await applicationConfigurationService.getApplicationConfiguration();\n        dispatch(finish(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n\n        if (response.isSuccess) {\n            dispatch(success(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION, { auth: response?.data?.auth || {}, currentUser: response?.data?.currentUser || {} }));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { APPLICATION_CONFIGURATION } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    applicationConfiguration: jsonParser(jsonParser(sessionStorage.getItem(\"persist:root\"))?.applicationConfig)\n    ?.applicationConfiguration || [],\n    applicationConfigurationLoading: false,\n};\n\nexport default function applicationConfigurationReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_INIT:\n            return {\n                ...state,\n                applicationConfiguration: [],\n                applicationConfigurationLoading: true,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_SUCCESS:\n            return {\n                ...state,\n                applicationConfiguration: action.payload,\n                applicationConfigurationLoading: false,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_FINISH:\n            return {\n                ...state,\n                applicationConfigurationLoading: false,\n            };\n        default:\n            return { ...state };\n    }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/public-events/","title":"Dashboard Events","text":"<p>Example</p> <p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#api","title":"API","text":"<p>Example</p> <p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#action","title":"ACTION","text":"<p>Example</p> <p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#reducer","title":"REDUCER","text":"<p>Example</p> <p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/reference-project-circular/","title":"Project Circular","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/reference-tender-circular/","title":"Tender Circular","text":"<p>Tender</p> <p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/sending-mail/","title":"Sending Mail","text":"<p>Example</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/","title":"Setting Value in Select","text":"GroupChatDrawer.jsx<pre><code>const [filterReference, setFilterReference] = useState([]);\n\n\nuseEffect(() =&gt; {\n    if (!isEmpty(referenceListing) &amp;&amp; filterParticipantType == \"REF\") {\n        setFilterReference(referenceListing.items);\n    }\n}, [referenceListing]);\n\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        console.log(\"groupChatTitleDetailsResp: \", groupChatTitleDetailsResp)\n\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        form.setFieldsValue({\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n    }\n}, [groupChatTitleDetailsResp, form])\n\n\n\nreturn(\n    &lt;&gt;\n    &lt;div className=\"drawer-form-group\"&gt;\n        &lt;Form.Item\n            className=\"form__group\"\n            name=\"referenceId\"\n            label=\"Reference ID\"\n            rules={[\n                {\n                    required: true,\n                    message: 'Please select reference',\n                },\n            ]}\n        &gt;\n            &lt;Select\n                getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                showSearch\n                placeholder=\"Select reference\"\n                optionFilterProp=\"label\"\n                allowClear={true}\n                onSearch={(value) =&gt; {\n                    setSearchValueReference(value);\n                    setFilterParticipantType(\"REF\");\n                }}\n                autoComplete=\"off\"\n            &gt;\n\n            {console.log(\"XXXX filterReference: \", filterReference)}\n\n            {/********************************************* EXAMPLE *********************************************/}\n\n            {filterReference.map((reference, index) =&gt; {\n                return (\n                    &lt;Option\n                        value={reference.id}\n                        key={index}\n                        label={[reference.code, reference.title]}\n                    &gt;\n                        &lt;div className=\"demo-option-label-item\"&gt;\n                            &lt;div&gt;\n                                {reference.code} {\"\"}\n                            &lt;/div&gt;\n                            &lt;div&gt;{reference.title}&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Option&gt;\n                );\n            })}\n            &lt;/Select&gt;\n        &lt;/Form.Item&gt;\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> Tips <pre><code>import { getAllUsers } from 'services/remanentCalls';\n\n\nconst [user, setUsers] = useState([]);\n\nuseEffect(() =&gt; {\n    fetchAllUsers();\n}, []);\n\n// func\nconst fetchAllUsers = async () =&gt; {\n    const resp = await getAllUsers().catch((err) =&gt; {\n        message.error(\"Failure\");\n    });\n\n    if (resp &amp;&amp; resp.status === 200) {\n        setUsers(resp.data);\n    }\n};\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        // we are setting the recently used tags because it doesnt fetch all listing of reference tags.\n        // and we set the previous selected tags only.\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        // we only selected the previous selected users, and add its id to UserListIds because \n        // the listing of users is already fetch.\n        let selectedUserId = groupChatTitleDetailsResp.userList?.map((item, index) =&gt; item?.userId);\n\n        form.setFieldsValue({\n            chatGroupName: groupChatTitleDetailsResp?.chatGroupName,\n            description: groupChatTitleDetailsResp?.description,\n            userListIds: selectedUserId,\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n\n        /*********************************************************************/\n        // BEGIN: BUG =&gt; Don't do this\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setUsers(updatedData)\n        // END\n        /*********************************************************************/\n    }\n}, [groupChatTitleDetailsResp, form])\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#data-transformation-to-rename-a-property-and-replacing-with-new-names","title":"Data Transformation: To rename a property and replacing with new names","text":"<p>To rename a property (e.g., <code>userIds</code> to <code>AppuserId</code>) in each object of an array, you can use the <code>map</code> function to create a new array with the updated property names. Here\u2019s how you can achieve this:</p> Example <pre><code>const data = [\n    { userIds: '123', name: 'Alice' },\n    { userIds: '456', name: 'Bob' },\n    // More objects\n];\n\nconst updatedData = data.map(item =&gt; {\n    const { userIds, ...rest } = item; // Destructure to separate userIds from the rest of the properties\n    return { AppuserId: userIds, ...rest }; // Create a new object with AppuserId and the rest of the properties\n});\n\nconsole.log(updatedData);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#explanation","title":"Explanation","text":"<ul> <li>Destructuring: We destructure <code>item</code> to separate <code>userIds</code> from the rest of the properties.</li> <li>Returning a New Object: We create and return a new object with <code>AppuserId</code> and the rest of the properties using the spread operator.</li> </ul>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#example-in-a-react-component","title":"Example in a React Component","text":"<p>If you need to perform this transformation in a React component, you can do it inside a useEffect or a function that processes your data:</p> <pre><code>import React, { useEffect, useState } from 'react';\n\nconst MyComponent = () =&gt; {\n    const [data, setData] = useState([\n        { userIds: '123', name: 'Alice' },\n        { userIds: '456', name: 'Bob' },\n        // More objects\n    ]);\n\n    useEffect(() =&gt; {\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setData(updatedData);\n    }, []); // Empty dependency array means this runs once after initial render\n\n    return (\n        &lt;div&gt;\n            {data.map(item =&gt; (\n                &lt;div key={item.AppuserId}&gt;\n                    &lt;p&gt;AppuserId: {item.AppuserId}&lt;/p&gt;\n                    &lt;p&gt;Name: {item.name}&lt;/p&gt;\n                &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#explanation_1","title":"Explanation","text":"<ul> <li>State Initialization: <code>data</code> is initialized with the original array of objects.</li> <li>useEffect: The <code>useEffect</code> hook runs after the initial render and transforms the <code>data</code> array to rename <code>userIds</code> to <code>AppuserId</code>.</li> <li>Rendering: The component renders the updated data, displaying each <code>AppuserId</code> and <code>name</code>.</li> </ul> <p>This approach ensures that the data transformation is handled efficiently and the component state is updated accordingly.</p>"},{"location":"office/ispl/documentation/alldocs/sisco-view/","title":"Hr Module","text":"<p>HR Module</p> SicoViewindexAddUpdateSisterCompanyDrawer <p>To view the data in the <code>Basic</code>.</p> SiscoView.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/SiscoView.js\n\nconst SiscoView = ({\n    isUpdateSiscoCredentials,\n    showAddUpdateSisterCompanyDrawer,\n}) =&gt; {\n    return (\n        &lt;div className=\"profile__info profile__wrap--sister\"&gt;\n            &lt;div className=\"profile__info--wrapper\"&gt;\n                &lt;div className=\"profile__info--body\"&gt;\n                    &lt;div className=\"contactsDetails__info mb-3 sisco-header-wapper\"&gt;\n                        &lt;span className=\"contactsDetails--title bold w-100\"&gt;Basic&lt;/span&gt;\n                        &lt;div className=\"sisco-action-button\"&gt;\n                            &lt;div\n                                onClick={() =&gt; {\n                                showAddUpdateSisterCompanyDrawer(isUpdateSiscoCredentials);\n                                }}\n                            &gt;\n                                &lt;img src={editIcon} /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    {/* *********** IMPORTANT **************** */}\n\n                    {!isUpdateSiscoCredentials?.creationTime ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row sister\"&gt;\n                            &lt;div className=\"profile__row--label sister--label\"&gt;\n                                &lt;span className=\"profile__bodyTitle\"&gt;Creation Time&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div className=\"profile__row--data sister--data\"&gt;\n                                &lt;span className=\"profile__bodyInfo\"&gt;\n                                {moment(isUpdateSiscoCredentials?.creationTime).format(\n                                    \"YYYY/MM/DD\"\n                                )}\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                    {/* Added */}\n                    {!isUpdateSiscoCredentials?.address ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.address}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.website ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.website}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.linkedin ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.linkedin}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationNumber ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationNumber}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationDate ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationDate}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> index.js<pre><code>// views/Admin/index.js\n\nfunction Admin() {\n    const [isUpdateSiscoCredentials, setIsUpdateSiscoCredentials] = useState();\n\n    useEffect(() =&gt; {\n        if (addUpdatesisterCompanyResponse) {\n            console.log(\"addUpdatesisterCompanyResponse: \",addUpdatesisterCompanyResponse)\n            setIsUpdateSiscoCredentials(addUpdatesisterCompanyResponse);\n        }\n    }, [addUpdatesisterCompanyResponse]);\n\n    const rowEventhandlersSisco = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                setIsUpdateSiscoCredentials(record);\n                setSiscoCompanyId(record.id);\n                setHidden(false);\n                setEmployeeId();\n                setEmployeeUserId();\n                setDepartment({ id: \"\", type: \"\" });\n                setSiscoId(record.id);\n            },\n        };\n    };\n\n\n    const showAddUpdateSisterCompanyDrawer = (record) =&gt; {\n        form.resetFields();\n        if (record) {\n            setIsUpdateSisterCompany(record);\n        }\n        setAddUpdateSisterCompanyDrawerVisibility(true);\n    };\n\n    return (\n        &lt;div className=\"sidebars\"&gt;\n            {/* ... */}\n            &lt;div className=\"profiledetails\"&gt;\n                &lt;Collapse\n                    expandIconPosition=\"right\"\n                    accordion={true}\n                    defaultActiveKey={[\"1\"]}\n                &gt;\n                    &lt;Panel key=\"1\" header=\"Sisco User list\"&gt;\n                        &lt;div&gt;\n                            &lt;div style={{ height: \"43%\" }}&gt;\n                                &lt;SiscoUserList\n                                    setSiscoClassName={setSiscoClassName}\n                                    grantedPolices={grantedPolices}\n                                    rowEventhandlersSisco={rowEventhandlersSisco}\n                                    inputSearchValue={inputSearchValue}\n                                    sisterCompanyPagination={sisterCompanyPagination}\n                                    sisterCompanyPaginationLoading={\n                                    sisterCompanyPaginationLoading\n                                    }\n                                /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Panel&gt;\n                &lt;/Collapse&gt;\n            &lt;/div&gt;\n            {/* ... */}\n        &lt;/div&gt;\n    )\n}\n\nexport default Admin;\n</code></pre> AddUpdateSisterCompanyDrawer.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/AddUpdateSisterCompanyDrawer.js\n\nconst AddUpdateSisterCompanyDrawer = ({\n    onAddUpdateSisterCompanyClose,\n    drawerVisibility,\n    isUpdateSisterCompany,\n    sisterCompanyListing,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            visible={drawerVisibility}\n            width={472}\n            maskClosable={false}\n            className=\"drawer main-drawer-wrapper\"\n            onClose={onAddUpdateSisterCompanyClose}\n            closable={false}\n        &gt;\n            &lt;Header className=\"drawer__header\"&gt;\n                &lt;h4 className=\"drawer__header--title\"&gt;\n                {`${isUpdateSisterCompany ? \"Update\" : \"Create\"} Sister Company`}\n                &lt;/h4&gt;\n            &lt;/Header&gt;\n            &lt;div className=\"drawer__content\"&gt;\n                &lt;div className=\"drawer__content--wrapper\"&gt;\n                    &lt;div className=\"contact__content__wrapper\"&gt;\n                        &lt;Form\n                            layout=\"vertical\"\n                            form={form}\n                            name=\"control-hooks\"\n                            validateMessages={validateMessages}\n                            className=\"drawer-form-wrapper\"\n                        &gt;\n                        &lt;div className=\"drawer-form-row\"&gt;\n                            &lt;div className=\"drawer-form-group\"&gt;\n                                &lt;Form.Item\n                                    name=\"name\"\n                                    className=\"form__group\"\n                                    label=\"Sister Company Name\"\n                                    rules={[{ required: true }]}\n                                &gt;\n                                    &lt;Input autoComplete=\"off\" /&gt;\n                                &lt;/Form.Item&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/Drawer&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/documentation/alldocs/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":"<p>Example</p> apiactionreducer <p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre> <p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/HTMLRenderer/","title":"HTMLRenderer","text":"<p>Example</p>"},{"location":"office/ispl/documentation/commonModule/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> IndexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/JSON-stringify/","title":"Using JSON.stringify","text":"<p>Example</p> <p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n...\nattentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/","title":"resuable component tooltip","text":""},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#basic-resuable-component","title":"Basic Resuable Component","text":"ComponentUsage <pre><code>import React from 'react';\nimport { Tooltip, Button } from 'antd';\nconst IconButtonWithTooltip = ({ tooltipText, buttonType = 'dashed', shape = 'circle', onClick, children }) =&gt; {\n    return (\n        &lt;Tooltip title={tooltipText}&gt;\n            &lt;Button\n                type={buttonType}\n                shape={shape}\n                onClick={onClick}\n            &gt;\n                {children}\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    );\n};\n\nexport default IconButtonWithTooltip;\n</code></pre> <pre><code>const [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\n&lt;IconButtonWithTooltip\n    tooltipText=\"Add Company Email\"\n    onClick={() =&gt; setIsAddCompanyEmailModalOpen(true)}\n&gt;+&lt;/IconButtonWithTooltip&gt;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#advanced-resuable-component","title":"Advanced Resuable Component","text":"<pre><code>// IconButtonWithTooltip.js\nimport React from \"react\";\nimport { Tooltip, Button, Spin } from \"antd\"; // Import additional components if needed\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nconst IconButtonWithTooltip = ({\n  tooltipText,\n  buttonType = \"dashed\",\n  shape = \"circle\",\n  onClick,\n  isLoading = false,\n  className,\n  icon: Icon,\n  ariaLabel,\n  ...props\n}) =&gt; {\n  const buttonClass = classNames(\"icon-button\", className);\n\n  return (\n    &lt;Tooltip title={tooltipText}&gt;\n      &lt;Button\n        type={buttonType}\n        shape={shape}\n        onClick={onClick}\n        className={buttonClass}\n        aria-label={ariaLabel}\n        {...props}\n      &gt;\n        {isLoading ? &lt;Spin size=\"small\" /&gt; : Icon ? &lt;Icon /&gt; : props.children}\n      &lt;/Button&gt;\n    &lt;/Tooltip&gt;\n  );\n};\n\nIconButtonWithTooltip.propTypes = {\n  tooltipText: PropTypes.string.isRequired,\n  buttonType: PropTypes.oneOf([\"default\", \"primary\", \"dashed\", \"link\", \"text\"]),\n  shape: PropTypes.oneOf([\"circle\", \"round\"]),\n  onClick: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool,\n  className: PropTypes.string,\n  icon: PropTypes.elementType,\n  ariaLabel: PropTypes.string,\n};\n\nexport default IconButtonWithTooltip;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#reusable-component","title":"Reusable Component","text":"<p>To create a reusable component for your modal that adds a company email, you can encapsulate the modal logic into a separate component. This way, you can reuse it throughout your application while maintaining flexibility for different use cases.</p> <p>Below is an example of how you can implement this:</p> ComponentUsing ComponentSummary of the Reusable Component QuickAddCompanyEmailModal.jsx<pre><code>import React from \"react\";\nimport { Modal, Form, Input, Button } from \"antd\";\nimport { useDispatch } from \"react-redux\";\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst QuickAddCompanyEmailModal = ({ visible, onClose, onSubmit, loading }) =&gt; {\n    const [form] = Form.useForm();\n\n    const handleFinish = async (values) =&gt; {\n        await onSubmit(values.newEmail);\n        form.resetFields();\n    };\n\n    return (\n        &lt;Modal\n            title=\"Add Company Email\"\n            visible={visible}\n            footer={null}\n            onCancel={onClose}\n        &gt;\n            &lt;Form form={form} onFinish={handleFinish}&gt;\n                &lt;Form.Item\n                    label=\"Email Address\"\n                    name=\"newEmail\"\n                    rules={[\n                        { required: true, message: \"Please enter the company email!\" },\n                        {\n                            pattern: emailRegex,\n                            message: \"Please enter a valid email address!\",\n                        },\n                    ]}\n                &gt;\n                    &lt;Input placeholder=\"Enter company email\" /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={loading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    );\n};\n\nexport default QuickAddCompanyEmailModal;\n</code></pre> Companies.js<pre><code>const [isModalNewMailOpen, setIsModalNewMailOpen] = useState(false);\nconst [isLoadingNewMail, setIsLoadingNewMail] = useState(false);\n\nconst handleModalNewMailClose = () =&gt; {\n    setIsModalNewMailOpen(false);\n};\n\nconst handleAddEmailSubmit = async (newEmail) =&gt; {\n    setIsLoadingNewMail(true);\n\n    const body = {\n        companyId: selectedCompanyId,\n        email: newEmail,\n    };\n\n    try {\n        if (body.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            handleModalNewMailClose();\n\n            // if (selectedCompanyId) {\n            //     dispatch(getCompanyorPersonEmailAddess(null, selectedCompanyId));\n            // }\n        }\n    } catch (err) {\n        console.log(\"Error: \", err);\n    } finally {\n        setIsLoadingNewMail(false);\n    }\n};\n\n&lt;QuickAddCompanyEmailModal\n    visible={isModalNewMailOpen}\n    onClose={handleModalNewMailClose}\n    onSubmit={handleAddEmailSubmit}\n    loading={isLoadingNewMail}\n/&gt;\n</code></pre> <ul> <li>Props: The <code>AddCompanyEmailModal</code> accepts <code>visible</code>, <code>onClose</code>, <code>onSubmit</code>, and <code>loading</code> props, making it flexible for various contexts.</li> <li>Form Handling: The form is handled within the modal, with a reset after submission.</li> <li>Regex Validation: The email regex is used directly in the form rules.</li> </ul> <p>This structure allows you to keep your code organized and reusable while maintaining clarity in your components.</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/","title":"useDebouncedDispatch","text":"<p>To make your debounced dispatch function reusable, you can create a custom hook. This hook can encapsulate the debouncing logic and allow you to pass in the action creator and its parameters. Here\u2019s how to do it:</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#step-1-create-a-custom-hook","title":"Step 1: Create a Custom Hook","text":"<p>Create a file called <code>useDebouncedDispatch.js</code> (or a similar name) in a suitable folder, like <code>hooks</code> or <code>utils</code>.</p> <pre><code>// src/hooks/useDebouncedDispatch.js\n\nimport { useCallback } from \"react\";\nimport { debounce } from \"lodash\";\n\nconst useDebouncedDispatch = (actionCreator, delay = 300) =&gt; {\n  const dispatch = useDispatch(); // Ensure you have access to dispatch\n\n  return useCallback(\n    debounce((...args) =&gt; {\n      dispatch(actionCreator(...args));\n    }, delay),\n    [dispatch, actionCreator]\n  );\n};\n\nexport default useDebouncedDispatch;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#step-2-use-the-custom-hook","title":"Step 2: Use the Custom Hook","text":"<p>Now, you can use this custom hook in your component:</p> <pre><code>import React from 'react';\nimport { getCompanyorPersonEmailAddess } from 'services/redux/contact/contact.action';\nimport useDebouncedDispatch from 'path/to/hooks/useDebouncedDispatch';\n\nconst YourComponent = () =&gt; {\n  const debounceAttentiontoDispatch = useDebouncedDispatch(getCompanyorPersonEmailAddess, 300);\n\n  const handleSelect = (selectedPersonIds, selectedCompanyId) =&gt; {\n    debounceAttentiontoDispatch(selectedPersonIds, selectedCompanyId);\n  };\n\n  return (\n    // Your component JSX\n  );\n};\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#explanation","title":"Explanation:","text":"<ol> <li> <p>Custom Hook: The <code>useDebouncedDispatch</code> hook takes an action creator and a delay. It returns a debounced version of the dispatch function that can be called with any number of arguments.</p> </li> <li> <p>Usage in Component: In your component, you simply call <code>useDebouncedDispatch</code> with your action creator and use the returned function to dispatch actions. This keeps your component clean and reusable.</p> </li> <li> <p>Debounce Logic: The <code>debounce</code> function from Lodash ensures that the action is dispatched only after the specified delay since the last invocation.</p> </li> </ol>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#summary","title":"Summary","text":"<p>This approach encapsulates the debouncing logic into a reusable custom hook, making it easy to apply similar functionality across different components without duplicating code.</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#additional","title":"Additional","text":"Folder StructureExplanationExampleSummary <p>Here\u2019s an updated folder structure for your React project that includes a <code>hooks</code> directory for reusable hooks like <code>useDebouncedDispatch</code>:</p> <pre><code>/your-project\n\u2502\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /components          // Contains your React components\n\u2502   \u251c\u2500\u2500 /redux               // Redux-related files\n\u2502   \u2502   \u251c\u2500\u2500 /actions         // Action creators\n\u2502   \u2502   \u251c\u2500\u2500 /reducers        // Reducers\n\u2502   \u2502   \u2514\u2500\u2500 /store.js        // Store configuration\n\u2502   \u251c\u2500\u2500 /constants           // Constants\n\u2502   \u2502   \u251c\u2500\u2500 actionTypes.js   // Action types\n\u2502   \u2502   \u251c\u2500\u2500 apiEndpoints.js   // API endpoint constants\n\u2502   \u2502   \u2514\u2500\u2500 otherConstants.js // Other constants\n\u2502   \u251c\u2500\u2500 /hooks               // Custom hooks\n\u2502   \u2502   \u2514\u2500\u2500 useDebouncedDispatch.js // Your debounced dispatch hook\n\u2502   \u251c\u2500\u2500 /utils               // Utility functions\n\u2502   \u251c\u2500\u2500 /pages               // Page components (if using routing)\n\u2502   \u2514\u2500\u2500 App.js               // Main application component\n\u2502\n\u251c\u2500\u2500 package.json             // Project dependencies and scripts\n\u2514\u2500\u2500 README.md                // Project documentation\n</code></pre> <p>Explanation of the Structure</p> <ol> <li> <p><code>/src</code>: The main source folder for your React application.</p> </li> <li> <p><code>/components</code>: Contains individual React components that you use in your application.</p> </li> <li> <p><code>/redux</code>: For all Redux-related files:</p> <ul> <li><code>/actions</code>: Contains action creators.</li> <li><code>/reducers</code>: Contains reducer functions.</li> <li><code>store.js</code>: Configures the Redux store.</li> </ul> </li> <li> <p><code>/constants</code>: Holds constant values like action types and API endpoints.</p> </li> <li> <p><code>/hooks</code>: Contains custom hooks, such as <code>useDebouncedDispatch</code>, making them reusable throughout your application.</p> </li> <li> <p><code>/utils</code>: Contains utility functions that can be used across your application.</p> </li> <li> <p><code>/pages</code>: If you are structuring your application with routing, this folder can hold different page components.</p> </li> <li> <p><code>App.js</code>: The entry point for your application</p> </li> </ol> <p>Example of <code>useDebouncedDispatch.js</code>:</p> <p>You would place your <code>useDebouncedDispatch.js</code> file in the <code>/hooks</code> folder like this:</p> <pre><code>// /src/hooks/useDebouncedDispatch.js\n\nimport { useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { useDispatch } from 'react-redux';\n\nconst useDebouncedDispatch = (actionCreator, delay = 300) =&gt; {\n    const dispatch = useDispatch();\n\n    return useCallback(\n        debounce((...args) =&gt; {\n            dispatch(actionCreator(...args));\n        }, delay),\n        [dispatch, actionCreator]\n    );\n};\n\nexport default useDebouncedDispatch;\n</code></pre> <p>This folder structure keeps your project organized and makes it easier to manage your components, Redux logic, constants, and reusable hooks. You can adjust it according to your specific project needs, but this serves as a solid foundation for a React application.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/","title":"useReducer","text":"<p>explain to 5 years old. what is <code>useReducer</code> in react. when to use it. when to use <code>useState</code>.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#overview","title":"Overview","text":"<p>Sure! Let\u2019s imagine you have a big box of toy blocks and you want to build different things with them.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#usestate","title":"<code>useState</code>:","text":"<p>Think of <code>useState</code> like having a single toy box where you can keep and change one type of toy, like LEGO blocks. If you want to change what\u2019s inside the box, you can just put in new LEGO blocks or take some out. It's simple and great when you just need to manage one type of toy or one small part of your building project.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#usereducer","title":"<code>useReducer</code>:","text":"<p>Now, imagine you have a big toy set with lots of different blocks and parts. You might need a special system to keep track of all the different pieces and how they should fit together. <code>useReducer</code> is like having a smart helper who knows how to handle all these different parts. This helper listens to what you want to do (like adding a new block or moving a piece) and then figures out the best way to update your toy set based on those instructions.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#when-to-use-each","title":"When to use each:","text":"<ul> <li> <p>Use <code>useState</code> when you have just one simple thing to keep track of or change, like how many apples you have or if you want the toy car to be red or blue.</p> </li> <li> <p>Use <code>useReducer</code> when you have a more complex toy set with lots of different pieces or actions, like if you\u2019re building a big castle with many rooms and towers, and you need a clear way to manage all the different changes.</p> </li> </ul> <p>So, <code>useState</code> is for simpler situations, and <code>useReducer</code> helps when things get more complicated!</p> <p>Absolutely! Here\u2019s another real-time example where useReducer shines: managing the state of a form with multiple fields and actions.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#example-form-with-multiple-fields","title":"Example: Form with Multiple Fields","text":"<p>Imagine you\u2019re building a form where users can enter their name, email, and password. You want to handle form submission, input changes, and possibly form validation in a way that's organized and maintainable.</p> <p>Here\u2019s how you can use <code>useReducer</code> for this:</p> <pre><code>import React, { useReducer } from 'react';\n\n// Define action types\nconst UPDATE_FIELD = 'UPDATE_FIELD';\nconst RESET_FORM = 'RESET_FORM';\n\n// Define the initial state of the form\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\n// Define the reducer function\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case UPDATE_FIELD:\n      return { ...state, [action.field]: action.value };\n    case RESET_FORM:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nfunction MyForm() {\n  // Use useReducer to manage form state\n  const [state, dispatch] = useReducer(formReducer, initialState);\n\n  // Handle input changes\n  const handleChange = (event) =&gt; {\n    const { name, value } = event.target;\n    dispatch({ type: UPDATE_FIELD, field: name, value });\n  };\n\n  // Handle form submission\n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    // Perform form submission logic here\n    console.log('Form submitted:', state);\n    // Optionally reset the form\n    dispatch({ type: RESET_FORM });\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;div&gt;\n        &lt;label&gt;Name:&lt;/label&gt;\n        &lt;input\n          type=\"text\"\n          name=\"name\"\n          value={state.name}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Email:&lt;/label&gt;\n        &lt;input\n          type=\"email\"\n          name=\"email\"\n          value={state.email}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Password:&lt;/label&gt;\n        &lt;input\n          type=\"password\"\n          name=\"password\"\n          value={state.password}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default MyForm;\n</code></pre>"},{"location":"office/ispl/documentation/tenderModule/","title":"Index","text":"<p>sfs</p>"},{"location":"office/ispl/documentation/tenderModule/reusableComponents/intro/","title":"Intro","text":"<p>fsadfsfd</p>"},{"location":"office/ispl/important/appuserid/","title":"AppUserId","text":"<pre><code>import storage from \"/utils/storage\";\nlet currentUserId = storage.getItem(\"userId\");\n</code></pre> <pre><code>const appUserIdUC = sessionStorage?.userId.toUpperCase();\n</code></pre>"},{"location":"office/ispl/important/debounce/","title":"Debounce","text":"<p>debounce</p> <pre><code>import { debounce } from \"lodash\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nconst debouncedDispatch = useCallback(\n    debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n        dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    }, 300),\n    [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n    const selectedData = options.map((option) =&gt; ({\n        AttentionTo: option.props.children,\n        AttentionId: option.key,\n    }));\n\n    let selectedPersonIds = selectedData &amp;&amp; selectedData?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n    }));\n\n    setSelectedAttendees(selectedData);\n    setHasSelectedAttentionTos(!isEmpty(values));\n\n    // dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    debouncedDispatch(selectedPersonIds, selectedCompanyId);\n};\n\n\n\nreturn (\n    &lt;&gt;\n    &lt;Form.Item label=\"Attention to\" name=\"attendees\"&gt;\n        &lt;Select\n            showSearch\n            mode=\"multiple\"\n            autoComplete=\"off\"\n            optionFilterProp=\"label\"\n            placeholder=\"Select Person\"\n            allowClear\n            onSearch={(value) =&gt; {\n                setSearchKeywordContactPerson(value);\n            }}\n\n            // ONCHANGE\n            onChange={handleSelectChange}\n        /&gt;\n    &lt;/Form.Item&gt;\n    &lt;/&gt;\n)\n</code></pre> Companies.js<pre><code>const debounceDispatch = useCallback(\n    debounce((selectedKeys) =&gt; {\n        console.log(\"dispatch\", selectedKeys)\n        let id = getDetails?.referenceId;\n        if (id)\n            dispatch(getCompanyPersonEmailAddress(id, selectedKeys))\n    }, 2000), [dispatch]\n)\n\nconst rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      let contactCompanyIds = selectedRows &amp;&amp; selectedRows.map(row =&gt; row.contactCompanyId);\n      setSelectedRowKeys(selectedKeys);debounceDispatch(contactCompanyIds);\n    },\n    type: 'checkbox',\n};\n</code></pre> action.jsreducer.jstypes.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        if (response.isSuccess) {\n            dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n            );\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n}\n</code></pre> <pre><code>// EMAIL ADRESS\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_INIT:\n    return {\n        ...state,\n        personMailListing: [],\n        personMailListingLoading: true,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_SUCCESS:\n    return {\n        ...state,\n        personMailListing: action.payload,\n        personMailListingLoading: false,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_FINISH:\n    return {\n        ...state,\n        personMailListingLoading: false,\n    };\n</code></pre> <pre><code>// LISTING\nCOMPANY_PERSON_EMAIL_LISTING: \"COMPANY_PERSON_EMAIL_LISTING\",\nCOMPANY_PERSON_EMAIL_LISTING_INIT: \"COMPANY_PERSON_EMAIL_LISTING_INIT\",\nCOMPANY_PERSON_EMAIL_LISTING_FINISH: \"COMPANY_PERSON_EMAIL_LISTING_FINISH\",\nCOMPANY_PERSON_EMAIL_LISTING_SUCCESS: \"COMPANY_PERSON_EMAIL_LISTING_SUCCESS\", \n</code></pre>"},{"location":"office/ispl/important/draft/","title":"draft","text":"<p>skhkwejd</p>"},{"location":"office/ispl/important/draft/#throwing-error","title":"THROWING ERROR","text":"Component LevelAction Level <p>If the <code>catch</code> block is not preventing the new tab from opening, it\u2019s likely due to how the error handling and asynchronous operations are managed. Here's a revised approach to ensure the new tab only opens if all operations are successful and if errors are properly handled.</p> <p>Updated Approach</p> <ul> <li>Ensure that <code>window.open</code> is inside the <code>try</code> block after all asynchronous operations and only if there are no errors.</li> <li>Check for errors in the <code>catch</code> block and make sure <code>window.open</code> is not executed in case of errors.</li> </ul> <pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \", getDetails?.title)\n\n    let data = {\n        tos: referencePartyListingCircularResponse ?? '',\n        refCode: getDetails?.referenceCode ?? '',\n        subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n        let id = getDetails?.referenceId;\n\n        // Await the dispatch for getting company person email address\n        await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n        // Persist tender content\n        await dispatch(actionForPersisteRTenderContent(id));\n\n        // Optionally, save response data to session storage if needed\n        // const response = await someAsyncOperationToGetData();\n        // sessionStorage.setItem('key', JSON.stringify(response));\n\n        // Use a promise-based delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n\n        // Open the new tab after operations are complete and delay\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n\n    } catch (err) {\n        // Handle any errors that occurred during the dispatches or delay\n        console.log(\"Error occurred:\", err);\n    } finally {\n        // Always stop the loading indicator regardless of success or failure\n        setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre> <p>Troubleshooting Tips</p> <ol> <li> <p>Ensure <code>catch</code> Block is Executed: Add debug statements like <code>console.log(\"Error occurred:\", err);</code> in your <code>catch</code> block to verify that the errors are being logged. If you don't see the error log, the <code>catch</code> block may not be triggered correctly.</p> </li> <li> <p>Verify <code>await</code> Operation: Ensure that the <code>await</code> statements are correctly handling promises and that any error thrown by the <code>dispatch</code> calls or the <code>new Promise</code> is being caught.</p> </li> <li> <p>Check Asynchronous Code: Confirm that all your async functions (like <code>getCompanyPersonEmailAddress</code> and <code>actionForPersisteRTenderContent</code>) correctly return promises and throw errors properly.</p> </li> <li> <p>Check for Unhandled Errors: Make sure no errors are silently caught or not propagated. If errors are handled internally by some library or function and not re-thrown, they won't reach your <code>catch</code> block.</p> </li> </ol> <p>Example with Explicit Error Throwing</p> <p>Sometimes it\u2019s helpful to explicitly throw errors in asynchronous operations to ensure they are properly caught:</p> <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            const response = await participationStatusService.getCompanyPersonEmailAddress(id, body);\n            dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n            if (response.isSuccess) {\n                dispatch(success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data));\n                dispatch(actionForPersistTenderMailTos(response.data));\n            } else {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);  // Ensure error is thrown\n            }\n        } catch (err) {\n            dispatch(error(err.message || \"An error occurred\"));\n            throw err;  // Ensure error is re-thrown\n        }\n    };\n}\n</code></pre> <p>By ensuring that all errors are properly thrown and caught, and by checking if the catch block is being hit, you should be able to manage the new tab opening correctly based on the success or failure of your operations.</p>"},{"location":"office/ispl/important/draft/#promise","title":"Promise","text":"<p>What the Promise Does</p> <p>A <code>Promise</code> in JavaScript represents the completion (or failure) of an asynchronous operation and its resulting value. It provides a way to attach callbacks that handle the result or error when the operation is complete.</p> <p>In your function, the <code>Promise</code> is used to create a delay:</p> <pre><code>await new Promise((resolve) =&gt; setTimeout(resolve, 5000));\n</code></pre> <p>This <code>Promise</code> is created with a <code>setTimeout</code> function that waits for 5000 milliseconds (5 seconds) before calling the <code>resolve</code> function. This effectively causes the <code>await</code> to pause for 5 seconds.</p> What Happens in Your Scenario <ol> <li> <p>Both dispatch Calls:</p> <ul> <li><code>await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));</code></li> <li><code>await dispatch(actionForPersisteRTenderContent(id));</code></li> </ul> <p>These <code>dispatch</code> calls are awaited sequentially. If either of these operations fails, the <code>catch</code> block will handle the error.</p> </li> <li> <p>Delay:</p> <ul> <li><code>await new Promise(resolve =&gt; setTimeout(resolve, 5000));</code></li> </ul> <p>After the <code>dispatch</code> operations succeed, the <code>await</code> for the <code>Promise</code> will cause the function to pause for 5 seconds. During this time, the function does nothing but wait.</p> </li> <li> <p>Open New Tab:</p> <ul> <li><code>window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");</code></li> </ul> <p>After the 5-second delay (if the <code>Promise</code> resolves successfully), the new tab will be opened.</p> </li> </ol> If the dispatch Calls Are Successful Before 5 Seconds <ul> <li>If the two dispatch calls complete successfully before the 5-second delay is over, the function will still wait for the full 5 seconds due to the await on the Promise. The new tab will only be opened after this 5-second delay.</li> </ul> If the dispatch Calls Fail <ul> <li>If any of the dispatch calls throw an error, the catch block will handle the error, and the setIsLoadingOpeningMail(false) will be executed to stop the loading indicator. The new tab will not be opened because the function will exit early due to the error.</li> </ul> Summary <ul> <li>The <code>Promise</code> with <code>setTimeout</code> ensures that the code execution pauses for 5 seconds, regardless of how quickly the previous asynchronous operations complete.</li> <li>If any <code>dispatch</code> operation fails, the error is caught, and the new tab is not opened.</li> <li>If all operations succeed and the 5-second delay completes, the new tab will be opened.</li> </ul> <p>This approach provides a way to control the timing of when you open the new tab, ensuring it happens after all necessary operations and any required delays.</p>"},{"location":"office/ispl/important/draft/#why-use-try-catch-in-both-actions-and-components","title":"Why Use <code>try-catch</code> in Both Actions and Components?","text":"<p>In modern JavaScript applications, especially those using frameworks like React with Redux, you often find yourself dealing with asynchronous actions and state management. It\u2019s crucial to handle errors effectively to ensure a smooth user experience and maintainable code. This involves using <code>try-catch</code> blocks both in your action creators (for managing async operations) and in your components (for managing UI and state). Here\u2019s why handling errors at both levels is important:</p> <ol> <li> <p>Error Handling in Action Creators</p> ExampleExplanation <pre><code>export const fetchData = () =&gt; async (dispatch) =&gt; {\n    try {\n        const response = await fetch('/api/data');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE', error: error.message });\n    }\n};\n</code></pre> <p>Purpose: Action creators, especially those involving asynchronous operations (e.g., API calls), need to handle errors to ensure that they correctly manage and propagate error states.</p> <ul> <li> <p>Manage Asynchronous Operations:</p> <p>When making asynchronous requests (e.g., fetching data from an API), errors can occur due to network issues, server errors, or invalid responses. Handling these errors in the action creator ensures that the application can respond appropriately (e.g., showing an error message to the user).</p> </li> <li> <p>Dispatch Error Actions:</p> <p>If an error occurs in an action creator, it\u2019s essential to dispatch an error action to update the application state. This allows the UI to reflect the error state and provides users with feedback about what went wrong.</p> </li> <li> <p>Ensure Consistency:</p> <p>Proper error handling in actions helps maintain a consistent and predictable application state. Without it, your application might enter an inconsistent state if errors are not properly managed.</p> </li> </ul> </li> <li> <p>Error Handling in Components</p> ExampleExplanation <pre><code>const MyComponent = () =&gt; {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() =&gt; {\n        const fetchData = async () =&gt; {\n            try {\n                const response = await fetch('/api/data');\n                if (!response.ok) throw new Error('Network response was not ok');\n                const result = await response.json();\n                setData(result);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    if (!data) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n    return &lt;div&gt;Data: {data}&lt;/div&gt;;\n};\n</code></pre> <p>Purpose: Components are responsible for rendering UI and managing user interactions. Handling errors in components is crucial for providing a good user experience and ensuring that the application remains functional even when errors occur.</p> <ul> <li> <p>Display Error Messages:</p> <p>Components should handle and display error messages to users, allowing them to understand what went wrong and take corrective actions if possible.</p> </li> <li> <p>Manage Component State:</p> <p>Components need to manage their internal state based on the results of asynchronous operations. Proper error handling ensures that the UI remains consistent and provides feedback to users when errors occur.</p> </li> <li> <p>Prevent Application Crashes:</p> <p>By catching errors at the component level, you can prevent errors from propagating up and potentially crashing the entire application. This helps in maintaining stability and reliability.</p> </li> </ul> </li> </ol> Summary <ul> <li> <p>Error Handling in Actions: Ensures that asynchronous operations are managed properly, errors are dispatched to the state, and the application remains in a consistent state.</p> </li> <li> <p>Error Handling in Components: Provides a mechanism to handle and display errors to users, manage component state, and prevent crashes.</p> </li> </ul> <p>Using <code>try-catch</code> in both action creators and components ensures robust error handling throughout your application, providing a better user experience and easier maintenance.</p>"},{"location":"office/ispl/important/draft/#mail-next-select","title":"Mail Next Select","text":"ExampleImplementation <pre><code>const handleDelete = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"xxx: \", selectedTenderRowId);\n    console.log(\"Delete Me\", contextMenu?.id, tenderData);\n\n    const currentIndex = tenderData.findIndex(\n        (item) =&gt; item.referenceCode === selectedTenderRowId\n    );\n\n    if (currentIndex !== -1) {\n        // Set isActive to false for the current item\n        let payload = {\n            ...contextMenu.body,\n            isActive: false,\n        };\n        dispatch(tenderDelete(payload));\n\n        // Determine the next index or last index\n        const nextIndex =\n            currentIndex + 1 &lt; tenderData.length\n                ? currentIndex + 1\n                : tenderData.length - 1;\n            const nextItem = tenderData[nextIndex];\n\n        // Set the context menu to the next item if available\n        if (nextItem) {\n            setContextMenu({\n                id: nextItem.id,\n                referenceCode: nextItem.referenceCode,\n            });\n        }\n    }\n};\n</code></pre> TenderPagination.js<pre><code>const handleDelete = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"xxx: \", selectedTenderRowId);\n    console.log(\"Delete Me\", contextMenu?.id, tenderData);\n    let payload = {\n        ...contextMenu.body,\n        isActive: false,\n    };\n    dispatch(tenderDelete(payload));\n\n    let currentIndex = tenderData?.findIndex(\n        (item) =&gt; item.referenceCode === selectedTenderRowId\n    );\n\n    let nextIndex =\n        currentIndex + 1 &lt; tenderData?.length\n        ? currentIndex + 1\n        : tenderData?.length - 1;\n    const nextItem = tenderData[nextIndex];\n    if (nextItem) {\n        handleRowClick(tenderData[nextIndex]);\n    }\n};\n</code></pre>"},{"location":"office/ispl/important/draft/#companies-button-tooltip","title":"Companies Button Tooltip","text":"BasicDefensiveKey Defensive Programming Techniques UsedUpdated Companies.js<pre><code>// Tooltip\nconst tooltipMessage = !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${\n        getDetails.circularPlanningApprovedStatusDto.approverName\n    } on ${moment(\n        getDetails.circularPlanningApprovedStatusDto.approveDate\n    ).format(\"MMMM D, YYYY\")}}`\n    : `Not yet approved, Sent By: ${\n        getDetails.circularPlanningSendForApprovalLogDto?.from\n        ?.participantName ?? \"\"\n    }, To: ${getDetails.circularPlanningSendForApprovalLogDto?.to?.map(\n        (item) =&gt; item?.participantName\n    )}, Time: ${moment(\n        getDetails.circularPlanningSendForApprovalLogDto.messageSentTime\n    ).format(\"YYYY-MM-DD HH:mm:ss\")}`;\n</code></pre> <p>Defensive programming is essential to ensure that your code can handle unexpected inputs gracefully without breaking.</p> <pre><code>const getDetailsSafe = getDetails || {}; // Fallback to an empty object\n\n// Safely access properties\nconst isRequestSent = getDetailsSafe.isCircularPlanningApprovalRequestSent;\nconst approvalStatus = getDetailsSafe.circularPlanningApprovedStatusDto || {};\nconst sendForApprovalLog =\n    getDetailsSafe.circularPlanningSendForApprovalLogDto || {};\n\n// Fallback values\nconst approverName = approvalStatus.approverName || \"Unknown\";\nconst approveDate = approvalStatus.approveDate\n    ? moment(approvalStatus.approveDate).format(\"YYYY-MM-DD\")\n    : \"N/A\";\n    const senderName = sendForApprovalLog.from?.participantName || \"Unknown\";\n    const messageSentTime = sendForApprovalLog.messageSentTime\n    ? moment(sendForApprovalLog.messageSentTime).format(\"YYYY-MM-DD HH:mm:ss\")\n    : \"N/A\";\n\nconst toList = Array.isArray(sendForApprovalLog.to)\n    ? sendForApprovalLog.to.map((item, index) =&gt; (\n        &lt;li key={item.participantId || index}&gt;\n            {item.participantName || \"Unnamed\"}\n        &lt;/li&gt;\n        ))\n    : [\"No recipients\"];\n\n// Construct the tooltip message\nconst tooltipMessage = !isRequestSent ? (\n    \"Not Sent\"\n    ) : approvalStatus.isApproved ? (\n    `Approved by ${approverName} on ${approveDate}`\n    ) : (\n    &lt;div&gt;\n        &lt;p&gt;Not yet approved&lt;/p&gt;\n        &lt;p&gt;Sent By: {senderName}&lt;/p&gt;\n        &lt;p&gt;To:&lt;/p&gt;\n        &lt;ul&gt;{toList}&lt;/ul&gt;\n        &lt;p&gt;Time: {messageSentTime}&lt;/p&gt;\n    &lt;/div&gt;\n    );\n</code></pre> <ol> <li>Fallbacks: Used <code>getDetailsSafe</code> to avoid errors when <code>getDetails</code> is <code>undefined</code>.</li> <li>Optional Chaining: Used <code>?.</code> to safely access nested properties.</li> <li>Default Values: Provided default values for names and dates to prevent displaying <code>undefined</code>.</li> <li>Array Checks: Ensured that <code>sendForApprovalLog.to</code> is an array before mapping, providing a fallback if it's not.</li> <li>Error Handling: Although not explicitly shown here, you can wrap the entire tooltip construction in a try-catch block if there\u2019s a possibility of more complex operation</li> </ol> <pre><code>const toList = Array.isArray(sendForApprovalLog.to)\n    ? sendForApprovalLog.to\n        .map((item) =&gt; item.participantName || \"Unnamed\")\n        .join(\", \")\n    : \"No recipients\";\n</code></pre>"},{"location":"office/ispl/important/error-boundary/","title":"Error Boundry","text":""},{"location":"office/ispl/important/error-boundary/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ErrorBoundary/\n\u2502   \u2502   \u251c\u2500\u2500 ErrorFallback.js\n\u2502   \u2502   \u2514\u2500\u2500 ErrorBoundaryWrapper.js\n\u2502   \u2514\u2500\u2500 ErrorSimulator.js\n\u251c\u2500\u2500 App.js\n\u2514\u2500\u2500 index.js\n</code></pre> Step 1Step 2Step 3ErrorSimulator.jsantd fallback ui <p>Create <code>ErrorFallback.js</code> (Fallback Component)</p> <pre><code>// src/components/ErrorBoundary/ErrorFallback.js\n\nimport React from 'react';\n\nconst ErrorFallback = ({ error, resetErrorBoundary }) =&gt; (\n    &lt;div style={{ padding: '20px', border: '1px solid red', backgroundColor: '#fdd' }}&gt;\n        &lt;h2&gt;Something went wrong:&lt;/h2&gt;\n        &lt;p&gt;{error.message}&lt;/p&gt;\n        &lt;button onClick={resetErrorBoundary} style={{ padding: '10px 20px', backgroundColor: '#ddd' }}&gt;\n            Try Again\n        &lt;/button&gt;\n    &lt;/div&gt;\n);\n\nexport default ErrorFallback;\n</code></pre> <p>Create <code>ErrorBoundaryWrapper.js</code> (ErrorBoundary Wrapper Component)</p> Bug <pre><code>// src/components/ErrorBoundary/ErrorBoundaryWrapper.js\n\nimport React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport ErrorFallback from './ErrorFallback';\n\n// A wrapper around the `ErrorBoundary` component to simplify usage\nconst ErrorBoundaryWrapper = ({ children }) =&gt; (\n    &lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;\n        {children}\n    &lt;/ErrorBoundary&gt;\n);\n\nexport default ErrorBoundaryWrapper;\n</code></pre> Success <p>You need to add a <code>return</code> statement to make sure that the JSX (the <code>ErrorBoundary</code> with <code>children</code> inside it) is returned.</p> <pre><code>import React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport ErrorFallback from './ErrorFallback';\n\nconst ErrorBoundaryWrapper = ({ children }) =&gt; (\n     // Ensure the return statement is present\n    return (\n        &lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;\n            {children}\n        &lt;/ErrorBoundary&gt;\n    )\n);\n\nexport default ErrorBoundaryWrapper;\n</code></pre> <p>Explanation:</p> <ul> <li>The issue: In your original code, the <code>ErrorBoundary</code> was not being returned from the ErrorBoundaryWrapper component. Without the <code>return</code>, React doesn't know what to render, which is why you're seeing the error: \"Nothing was returned from render.\"</li> <li>The fix: By adding the <code>return</code> statement, you ensure that the component correctly renders the <code>ErrorBoundary</code> component, wrapping the <code>children</code>.</li> </ul> <pre><code>// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ErrorBoundaryWrapper from './components/ErrorBoundary/ErrorBoundaryWrapper';\n\nReactDOM.render(\n    &lt;ErrorBoundaryWrapper&gt;\n        &lt;App /&gt;\n    &lt;/ErrorBoundaryWrapper&gt;,\n    document.getElementById('root')\n);\n</code></pre> <pre><code>// src/components/ErrorSimulator.js\n\nimport React, { useState } from 'react';\n\nconst ErrorSimulator = () =&gt; {\n    const [hasError, setHasError] = useState(false);\n\n    const handleSimulateError = () =&gt; {\n        setHasError(true);\n    };\n\n    // Simulate an error by throwing it\n    if (hasError) {\n        throw new Error('This is a simulated error!');\n    }\n\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;No error yet!&lt;/h2&gt;\n            &lt;button onClick={handleSimulateError}&gt;\n                Simulate Error\n            &lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ErrorSimulator;\n</code></pre> <pre><code>// src/components/ErrorBoundary/ErrorFallback.js\n\nimport React from \"react\";\nimport { Button, Alert, Typography } from \"antd\";\n\nconst { Title, Paragraph } = Typography;\n\nconst ErrorFallback = ({ error, resetErrorBoundary }) =&gt; {\n    return (\n        &lt;div style={{ padding: \"30px\", textAlign: \"center\" }}&gt;\n            &lt;Alert\n                message=\"Something went wrong!\"\n                description={error.message}\n                type=\"error\"\n                showIcon\n                style={{ marginBottom: \"20px\" }}\n            /&gt;\n            &lt;div&gt;\n                &lt;Title level={3}&gt;Oops! An unexpected error occurred.&lt;/Title&gt;\n                &lt;Paragraph&gt;\n                    We apologize for the inconvenience. Please try again by clicking the\n                    button below.\n                &lt;/Paragraph&gt;\n                &lt;Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={resetErrorBoundary}\n                    style={{ marginTop: \"10px\" }}\n                &gt;\n                    Try Again\n                &lt;/Button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ErrorFallback;\n</code></pre> <p>Explanation</p> <p>When an error is triggered, the UI will now look like this:</p> <ul> <li>A red <code>Alert</code> component with the error message.</li> <li>A heading with the text: \"Oops! An unexpected error occurred\".</li> <li>A brief explanation with a <code>Button</code> that says \"Try Again\" to reset the error boundary.</li> </ul>"},{"location":"office/ispl/important/error-boundary/#question","title":"Question","text":"<p>can we wrap error boundry at the root of the react app. is it feasible ?</p> <p>Yes, it is absolutely feasible to wrap your entire React app with an <code>ErrorBoundary</code> at the root level. In fact, this is a recommended approach in many cases because it ensures that unhandled errors anywhere in the app are caught and handled by a global fallback UI.</p> <p>Key Benefits of Wrapping the ErrorBoundary at the Root Level:</p> <ul> <li>Global Error Handling: It acts as a \"catch-all\" for unexpected errors that may occur in any component within the app.</li> <li>Graceful Degradation: You can display a generic error screen to the user without the app crashing.</li> <li>Centralized Error Management: It simplifies error handling, as you don\u2019t need to wrap every individual component with an error boundary.</li> </ul> <p>How to Wrap the ErrorBoundary at the Root Level:</p> <ol> <li>Wrap your entire app with an <code>ErrorBoundary</code> in the <code>index.js</code> or <code>App.js</code>.</li> <li>Use a fallback component to display a user-friendly error message when an error occurs.</li> </ol> <p>When Would You Use This Approach?</p> <ol> <li>Global Error Handling: This is ideal for catching unexpected errors anywhere in the app and showing a fallback UI.</li> <li>App-wide Errors: If your app is large and has many components, using a global error boundary allows you to prevent the entire app from crashing due to a single error in one component.</li> <li>User Experience: You can show a generic error page or message, preventing the user from seeing a broken UI.</li> </ol> <p>Potential Drawbacks:</p> <ol> <li>Performance: Wrapping the entire app with a single error boundary could potentially make error recovery slower if many components are nested within it. However, this is generally not an issue unless your app is extremely large.</li> <li>Granular Error Handling: If you want to handle specific errors differently (e.g., show different UIs for different sections of the app), you may still want to add additional error boundaries at specific points in the component tree.</li> </ol> <p>Conclusion:</p> <p>Wrapping the entire app with an error boundary at the root level is a feasible and recommended practice for catching and handling unhandled errors globally. It improves the app's reliability and provides a better user experience by preventing crashes and showing a fallback UI instead. You can still have additional error boundaries at specific points in your app if you need more granular control over error handling.</p>"},{"location":"office/ispl/important/error-boundary/#theory","title":"Theory","text":"<p>Is resetErrorBoundary is this a builtin function ?</p> <p>Yes, <code>resetErrorBoundary</code> is a built-in function provided by the react-error-boundary library.</p> <p>When you use the <code>ErrorBoundary</code> component from the react-error-boundary package, it automatically provides the <code>resetErrorBoundary</code> function as part of the props that are passed to the fallback component. This function allows you to reset the error boundary, effectively clearing the error state and rendering the child components again.</p> <p>How <code>resetErrorBoundary</code> Works:</p> <ul> <li>When an error occurs, the ErrorBoundary component catches it and renders the fallback component (in this case, <code>ErrorFallback</code>).</li> <li>The <code>resetErrorBoundary</code> function allows the fallback UI to reset the error state of the boundary, which causes the application to re-render the child components as if no error ever occurred.</li> </ul> <p>How to Use <code>resetErrorBoundary</code>:</p> <ul> <li>The <code>resetErrorBoundary</code> function is passed as a prop to the fallback component (in our case, <code>ErrorFallback</code>).</li> <li>You can trigger this function, typically by using a button or any other interaction, to reset the error boundary.</li> </ul> <p>Key Props Summary</p> Prop Type Description Example Usage <code>FallbackComponent</code> <code>React.Component</code> The component to display when an error occurs <code>&lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;</code> <code>onError</code> <code>(error: Error, info: object) =&gt; void</code> Callback when an error is caught <code>onError={(error, info) =&gt; console.error(error, info)}</code> <code>onReset</code> <code>() =&gt; void</code> Callback when the error boundary is reset <code>onReset={() =&gt; console.log(\"Resetting boundary\")}</code> <code>fallbackRender</code> <code>({ error, resetErrorBoundary }) =&gt; React.ReactNode</code> Function that dynamically renders the fallback UI <code>fallbackRender={({ error, resetErrorBoundary }) =&gt; &lt;div&gt;...&lt;/div&gt;}</code> <code>onResetErrorBoundary</code> <code>() =&gt; void</code> Callback when <code>resetErrorBoundary</code> is triggered in the fallback UI <code>onResetErrorBoundary={() =&gt; console.log(\"Boundary reset\")}</code> <code>isGlobalErrorBoundary</code> <code>boolean</code> Flag for setting a global error boundary across the app <code>isGlobalErrorBoundary={true}</code>"},{"location":"office/ispl/important/error-boundary/#logging-error","title":"Logging Error","text":"<p>Yes, you can log errors to a log file from a React application using the react-error-boundary package, but React itself runs in the browser and doesn't have direct access to the file system for security reasons. However, you can log errors to a server-side endpoint (such as an API or server) which can then log the errors to a file on the server.</p> 1. Installation2. Set up <code>ErrorBoundry</code> Component3. Send error to the server <pre><code>npm install react-error-boundary\n</code></pre> <p>Wrap your application or specific components in the <code>ErrorBoundary</code> from react-error-boundary to catch errors. The <code>onError</code> callback prop of <code>ErrorBoundary</code> will allow you to handle the errors and send them to an API for logging.</p> <pre><code>import React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nfunction FallbackComponent({ error, resetErrorBoundary }) {\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;Something went wrong:&lt;/h2&gt;\n            &lt;pre&gt;{error.message}&lt;/pre&gt;\n            &lt;button onClick={resetErrorBoundary}&gt;Try Again&lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\n\nfunction MyComponent() {\n    // Simulate a JavaScript error\n    throw new Error('Oops! Something went wrong');\n}\n\nfunction App() {\n    const handleError = (error, info) =&gt; {\n        // Send error and info to server\n        logErrorToServer(error, info);\n    };\n\n    return (\n        &lt;ErrorBoundary FallbackComponent={FallbackComponent} onError={handleError}&gt;\n            &lt;MyComponent /&gt;\n        &lt;/ErrorBoundary&gt;\n    );\n}\n\nexport default App;\n</code></pre> <p>In the <code>handleError</code> function, you can send the error data (and any additional information) to your backend server to log the errors into a file.</p> <pre><code>const logErrorToServer = (error, info) =&gt; {\n    const errorDetails = {\n        message: error.message,\n        stack: error.stack,\n        componentStack: info.componentStack,\n        timestamp: new Date().toISOString(),\n    };\n\n    fetch('https://your-server.com/log', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(errorDetails),\n    })\n    .then((response) =&gt; response.json())\n    .catch((err) =&gt; console.error('Error logging to server:', err));\n};\n</code></pre>"},{"location":"office/ispl/important/error-boundary/#tips","title":"Tips","text":"<p>In JavaScript, the Error object provides a basic structure for error handling. While the core Error object itself is relatively simple, it can be extended or enhanced depending on the type of error (e.g., TypeError, SyntaxError, ReferenceError, etc.) or custom errors that you create.</p> Property/Method Description <code>message</code> A string that describes the error. It is the primary description of what went wrong. <code>name</code> A string representing the type of the error (e.g., <code>\"Error\"</code>, <code>\"TypeError\"</code>, <code>\"SyntaxError\"</code>, etc.). <code>stack</code> A string that contains the stack trace, which provides information about the sequence of function calls that led to the error (available in most environments). <code>cause</code> A property that can be used to attach an underlying cause to an error (introduced in ES2022). Useful for chaining errors or wrapping an error within another error. <code>toString()</code> Returns a string representation of the error, typically combining the <code>name</code> and <code>message</code> properties. <code>toJSON()</code> Converts the error object into a JSON-serializable format, which can be useful for logging or transmitting error data. <p>info</p> <p>The <code>info</code> object is related to the <code>Error</code> object in the context of React's error boundaries, but it is not part of the standard JavaScript <code>Error</code> object. In React, the <code>ErrorBoundary</code> component provides an error and an info parameter when an error occurs in one of its child components.</p> <p>React's ErrorBoundary info Object</p> <p>In React, when an error is caught inside an <code>ErrorBoundary</code>, the <code>componentDidCatch</code> method (or the <code>static getDerivedStateFromError</code> method) receives two parameters:</p> <ol> <li> <p><code>error</code>: The error object itself, which is the same as the standard JavaScript Error object (it contains properties like <code>message</code>, <code>name</code>, <code>stack</code>).</p> </li> <li> <p><code>info</code>: The <code>info</code> object contains additional information about the error, specifically the React component stack that can help you identify which component caused the error.</p> </li> </ol> <p>The <code>info</code> object is not part of the standard <code>Error</code> object in JavaScript. It's specific to React's error boundary system.</p> Property/Method Description <code>componentStack</code> A string containing the React component stack trace, which lists the components involved when the error occurred. This can be very useful for identifying the source of errors in React components. <code>additionalInfo</code> A custom field that might be passed along with the error info to provide extra context (not a default property but commonly used in custom error handling implementations)."},{"location":"office/ispl/important/persist-local-storage/","title":"Local Storage","text":"ComposeEmailDrawer<pre><code>if (applicationTypeStatus !== \"newEmail\" &amp;&amp; \n    applicationTypeStatus !== \"tenderModule\") \n{\n    form.setFieldsValue({\n        subject: `${currentSelectedMailMessage.subject}`,\n    });\n}\n\n\nuseEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      console.log(\"I'm Tender Module\", persistTenderMailDataResp)\n      form.setFieldsValue({\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n])\n\n\n\n// FOr Debug value\nuseEffect(() =&gt; {\n    console.log(\"useEffect Triggered - State:\", persistTenderMailDataResp);\n}, [persistTenderMailDataResp]);\n\n// research\nuseEffect(() =&gt; {\n    if (\n      !isEmpty(idComposeEmailCead) &amp;&amp;\n      isEmpty(tenderCeadComposeEmailDetailsData)\n    ) {\n      dispatch(actionForCeadEmailCompose(idComposeEmailCead));\n    }\n    if (!isEmpty(tenderCeadComposeEmailDetailsData)) {\n      form.setFieldsValue({\n        participantTos:\n          // tenderCeadComposeEmailDetailsData?.clientEmailAddressList,\n          tenderCeadComposeEmailDetailsData?.ceaD_PRINCIPAL_EmailAddressList,\n        participantFrom: defaultEmailAddress ? defaultEmailAddress : \"\",\n        subject: tenderCeadComposeEmailDetailsData?.contract,\n        mailMessageReferenceDtos: [\n          tenderCeadComposeEmailDetailsData?.referenceDto?.referenceCode,\n        ],\n        // currentSelectedMailMessage.mailMessageReferenceDtos?.map(\n        //   (reference) =&gt; {\n        //     return reference.referenceCode;\n        //   }\n        // ),\n      });\n    }\n  }, [\n    idComposeEmailCead,\n    tenderCeadComposeEmailDetailsData,\n    applicationTypeStatus,\n  ]);\n</code></pre> <pre><code>persistTender\n- action.js\n- reducer.js\n</code></pre> dispatchActionReducerStorage Tab <pre><code>export const TenderPagination = ({\n    ...\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    return (\n        &lt;&gt;\n            &lt;div\n            style={{ background: backGroundColor }}\n            className={`reference ${\n                selectedTenderRowId === data.referenceCode &amp;&amp; \"active\"\n            }`}\n            onClick={() =&gt; {\n                rowEventhandlersTender(data.id);\n                setSelectedTenderRowId(data.referenceCode);\n                setSearchEmailTender(data.referenceCode);\n                // setSearchKeyword(data.referenceCode);\n                // searchDataAtBusinessHeaderForm.setFieldsValue({\n                //   searchDataAtBusinessHeader: data.referenceCode,\n                // });\n\n                // ADDED\n                let payload = {\n                    tos: '',\n                    refCode: data?.referenceCode ?? '',\n                    subject: data?.title ?? '',\n                }\n                dispatch(actionForPersistTenderMailData(payload));\n            }}\n            key={key}\n            &gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>import { PERSIST_DATA } from 'services/types';\nimport { persistSelectedTenderMail } from 'services/common';\n\nexport const actionForPersistTenderMailData = (data) =&gt; {\n    return async (dispatch, getState) =&gt; {\n        //  // Retrieve the updated state from Redux after the dispatch\n        // const updatedState = getState().persistTenderMailState;\n        // console.log(\"ACTION updatedState: \",updatedState)\n        console.log(\"data: \", data)\n        dispatch(persistSelectedTenderMail(PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS, data));\n    };\n};\n</code></pre> reducer.js<pre><code>import { PERSIST_DATA } from \"services/types\";\nimport { jsonParser } from \"utils/misc\";\n\nconst INITIAL_STATE = {\n    persistTenderMailDataResp: {\n        tos: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.tos || {},\n\n        refCode: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.refCode || {},\n\n        subject: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.subject || {},\n    },\n    loading: false,\n};\n\n\nexport default function persistTenderMailReducer (state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case PERSIST_DATA.PERSIST_DATA_TENDER_INIT:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS:\n            console.log(\"REDUCER: action\", action)\n            return {\n                ...state,\n                persistTenderMailDataResp: {\n                    tos: action.payload.tos,\n                    refCode: action.payload.refCode,\n                    subject: action?.payload.subject,\n                },\n                loading: false,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_FINISH:\n            return {\n                ...state,\n                loading: false,\n            };\n\n        default:\n            return {\n                ...state,\n            }\n    }\n}\n</code></pre> <p>Session Sorage Tab</p> <ul> <li>see the <code>persistTenderMailState</code> key value.</li> </ul>"},{"location":"office/ispl/important/persist-local-storage/#tos","title":"TOs","text":"action.jsreducer.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            if (response.isSuccess) {\n                dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n                );\n\n                // DISPATCHES\n                dispatch(actionForPersistTenderMailTos(response.data))\n\n            } else if (!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch(err) {\n            throw err;\n        }\n    };\n}\n</code></pre> <pre><code>case PERSIST_DATA.PERSIST_DATA_TENDER_TOS:\n    console.log(\"REDUCER action.payload: \", action)\n    return {\n        ...state,\n        persistTenderMailDataResp: {\n            ...state.persistTenderMailDataResp,\n            // tos: action.payload.tos || state.persistTenderMailDataResp.tos,\n            tos: action.payload,\n        },\n        loading: false,\n    };\n</code></pre>"},{"location":"office/ispl/important/persist-local-storage/#loading-status","title":"Loading Status","text":"<pre><code>import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'; // Import useDispatch if you are using Redux\nimport { Button } from 'antd'; // or any UI library you're using\n\nconst MyComponent = () =&gt; {\n  const [isLoadingOpeningMail, setIsLoadingOpeningMail] = useState(false);\n  const dispatch = useDispatch(); // Initialize dispatch\n  const handleTenderMail = async () =&gt; {\n    setIsLoadingOpeningMail(true); // Set loading state to true\n    try {\n      const id = getDetails?.referenceId; // Retrieve ID\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds)); // Dispatch the action\n\n      // Wait for 5 seconds\n      setTimeout(() =&gt; {\n        // Open the URL in a new tab\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n        setIsLoadingOpeningMail(false); // Reset loading state after opening the new tab\n      }, 5000);\n    } catch (err) {\n      console.log(err); // Log the error\n      setIsLoadingOpeningMail(false); // Ensure loading state is reset even if an error occurs\n    }\n  };\n\n  return (\n    &lt;Button\n      type=\"primary\"\n      style={{ marginRight: \"8px\" }}\n      onClick={handleTenderMail}\n      loading={isLoadingOpeningMail} // Show loading indicator if true\n    &gt;\n      Circular\n    &lt;/Button&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/important/priority-listing-select/","title":"Priority Select Listing","text":"<pre><code>const priorityEventsState = useSelector((state) =&gt; state.priorityEvents);\nconst { organizerEventPriorityListing } = priorityEventsState;\n\n\n&lt;Form.Item\n  label=\"Priority\"\n  name=\"organizerEventPriorityId\"\n  className=\"form__group\"\n  initialValue={organizerEventPriorityListing[3]?.id}\n&gt;\n  &lt;Select\n    placeholder=\"Select Priority\"\n    autoComplete=\"off\"\n    getPopupContainer={(trigger) =&gt; trigger.parentNode}\n  &gt;\n    {!isEmpty(organizerEventPriorityListing) &amp;&amp;\n      organizerEventPriorityListing.map((status, index) =&gt; {\n        return (\n          &lt;Option value={status.id} key={index}&gt;\n            {status.name}\n          &lt;/Option&gt;\n        );\n      })}\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/important/sorting-table-antd/","title":"Sorting andt table","text":""},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming","title":"Defensive Programming","text":"<p>To handle the case where <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code> during sorting, you can modify the sorter function to check for <code>null</code> values and provide a fallback for comparison. Here's how you can write defensive programming for this case:</p> Normal CodeDefensive ProgrammingExplanation <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; a.partyName.localeCompare(b.partyName),\n}\n</code></pre> <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; {\n        const partyNameA = a.partyName ?? ''; // Fallback to an empty string if null or undefined\n        const partyNameB = b.partyName ?? ''; // Fallback to an empty string if null or undefined\n        return partyNameA.localeCompare(partyNameB);\n    },\n}\n</code></pre> <ul> <li>Nullish Coalescing (<code>??</code>): The <code>??</code> operator checks whether <code>partyName</code> is <code>null</code> or <code>undefined</code>. If it is, the empty string (<code>''</code>) is used as a fallback. This avoids runtime errors during the <code>localeCompare</code> operation.</li> <li>Safe Comparison: By ensuring both <code>partyNameA</code> and <code>partyNameB</code> are always strings (even if empty), we guarantee that <code>localeCompare</code> will work without throwing errors.</li> </ul> Why Use Defensive Programming Here? <ul> <li>Avoid Crashes: If <code>partyName</code> is ever <code>null</code> or <code>undefined</code>, without defensive programming, the <code>localeCompare</code> method would throw an error since it expects a string.</li> <li>Graceful Fallback: Providing a fallback value ensures that even if some data is missing, the app continues to function without issues, and the UI remains stable.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#updated-code-with-defensive-programming","title":"Updated Code with Defensive Programming:","text":"CodeExplanation <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication || ''; // Fallback to empty string if null or undefined\nconst modeB = b.modeofCommunication || ''; // Fallback to empty string if null or undefined\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ul> <li>Fallback to Empty String: When <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code>, it is replaced with an empty string (''). This prevents errors during the <code>localeCompare</code> operation.</li> <li>Handling Null Safely: Since empty strings come before any real strings in lexicographical order, this ensures that <code>null</code> or <code>undefined</code> values will be treated as smaller than any valid strings and handled correctly during sorting.</li> </ul> <p>This approach ensures that the sorting logic won't fail even when some <code>modeofCommunication</code> values are missing or <code>null</code>.</p>"},{"location":"office/ispl/important/sorting-table-antd/#optimized-code-for-sorting-with-null-values","title":"Optimized Code for Sorting with <code>null</code> Values:","text":"<p>The code provided is a good solution for handling null or undefined values during sorting. It ensures that comparisons can happen without causing runtime errors when dealing with missing data. However, we can take a step further for readability and maintainability by making the code slightly more declarative and robust.</p> <p>Here's an improved version of the sorting function:</p> CodeChanges <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nconst modeB = b.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ol> <li>Nullish Coalescing (<code>??</code>): The nullish coalescing operator (<code>??</code>) is a modern JavaScript feature that checks if a value is <code>null</code> or <code>undefined</code> and assigns a fallback (in this case, an empty string). It is more precise than the logical OR (<code>||</code>) because it only considers <code>null</code> or <code>undefined</code> as \"falsy\" while allowing values like <code>0</code> or <code>false</code> to remain unchanged.</li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming-in-react","title":"Defensive Programming in React:","text":"<p>Defensive programming is a practice that helps make your code more robust and fault-tolerant. It involves anticipating potential issues, such as null or undefined values, and writing code that handles these cases gracefully.</p> <p>While React itself is a library for building UI, defensive programming is valuable in certain scenarios within a React app:</p> <ol> <li> <p>Handling API Responses: When dealing with external APIs, it's common for data to be missing or incomplete. Defensive programming helps ensure your app won't break due to <code>null</code> or <code>undefined</code> values.</p> </li> <li> <p>Form Input Validation: When processing user input, defensive programming prevents issues from invalid or empty values that may cause your app to behave unexpectedly.</p> </li> <li> <p>Component Lifecycle and Props: React components may not always receive the expected props, especially in complex apps. Defensive programming ensures components can handle missing props or incorrect data types.</p> </li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#when-to-use-defensive-programming","title":"When to Use Defensive Programming:","text":"<ul> <li>Handling User Input: Always validate and sanitize user input to avoid issues such as empty fields or invalid values.</li> <li>Working with Asynchronous Data: If your app relies on fetching data from APIs or external sources, always check for null/undefined values in the data.</li> <li>Complex Component State: When components have a complex internal state, use defensive techniques to avoid bugs due to incorrect state updates or missing state values.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#conclusion","title":"Conclusion:","text":"<p>Defensive programming is not always necessary for every React app, but it's essential when working with dynamic data (e.g., API responses, user input) or when the app is expected to handle edge cases gracefully. It helps prevent runtime errors and ensures a smoother user experience. The above code is a good example of how to apply defensive programming in the context of sorting.</p>"},{"location":"office/ispl/important/sorting-table-antd/#reference","title":"Reference","text":"<ul> <li>Sorting</li> </ul>"},{"location":"office/ispl/important/table-row-selection-customize/","title":"Table Row Customize","text":""},{"location":"office/ispl/important/table-row-selection-customize/#example","title":"Example","text":"ExampleKey Changes: Companies.js<pre><code>import React, { useState, useEffect } from \"react\";\nimport { Table, Dropdown, Menu, Checkbox } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\n\nconst MyTableComponent = ({\n    isCircular,\n    rowSelection,\n    columnCircular,\n    columns,\n    referencePartyListingCircularResponse,\n    referencePartyListingResponse,\n    referencePartyListingCircularLoading,\n    referencePartyListingLoading,\n    rowEventhandlers,\n    setTaskClassName,\n}) =&gt; {\n    const [selectedPriorities, setSelectedPriorities] = useState([]);\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n\n    const priorityOptions = [\"1\", \"2\", \"3\"];\n\n    const handleSelectAll = (e) =&gt; {\n        const { checked } = e.target;\n        const allPriorities = checked ? priorityOptions : [];\n        setSelectedPriorities(allPriorities);\n        setSelectedRowKeys(checked ? dataSource.map((item) =&gt; item.id) : []);\n    };\n\n    const handleSelectPriority = (priority) =&gt; {\n        setSelectedPriorities((prev) =&gt;\n        prev.includes(priority)\n            ? prev.filter((p) =&gt; p !== priority)\n            : [...prev, priority]\n        );\n    };\n\n    const filteredDataSource = (dataSource) =&gt; {\n        if (selectedPriorities.length &gt; 0) {\n        return dataSource.filter((item) =&gt;\n            selectedPriorities.includes(item.priority)\n        );\n        }\n        return dataSource;\n    };\n\n    const dataSource = isCircular\n        ? filteredDataSource(referencePartyListingCircularResponse)\n        : filteredDataSource(referencePartyListingResponse);\n\n    const menu = (\n        &lt;Menu&gt;\n            &lt;Menu.Item&gt;\n                &lt;Checkbox\n                    indeterminate={\n                        selectedPriorities.length &gt; 0 &amp;&amp;\n                        selectedPriorities.length &lt; priorityOptions.length\n                    }\n                    checked={selectedPriorities.length === priorityOptions.length}\n                    onChange={handleSelectAll}\n                &gt;\n                Select All\n                &lt;/Checkbox&gt;\n            &lt;/Menu.Item&gt;\n\n            &lt;Menu.Divider /&gt;\n\n            {priorityOptions.map((priority) =&gt; (\n                &lt;Menu.Item key={priority}&gt;\n                    &lt;Checkbox\n                        checked={selectedPriorities.includes(priority)}\n                        onChange={() =&gt; handleSelectPriority(priority)}\n                    &gt;\n                        {priority}\n                    &lt;/Checkbox&gt;\n                &lt;/Menu.Item&gt;\n            ))}\n        &lt;/Menu&gt;\n    );\n\n    useEffect(() =&gt; {\n        const newSelectedRowKeys = dataSource\n        .filter((item) =&gt; selectedPriorities.includes(item.priority))\n        .map((item) =&gt; item.id);\n        setSelectedRowKeys(newSelectedRowKeys);\n    }, [selectedPriorities, dataSource]);\n\n    const rowSelectionConfig = {\n        selectedRowKeys,\n        onChange: (newSelectedRowKeys) =&gt; {\n            setSelectedRowKeys(newSelectedRowKeys);\n            const selectedPrioritiesFromRows = newSelectedRowKeys\n                .map((key) =&gt; dataSource.find((item) =&gt; item.id === key)?.priority)\n                .filter(Boolean);\n            setSelectedPriorities(selectedPrioritiesFromRows);\n        },\n        onSelectAll: (selected, selectedRows) =&gt; {\n            const allSelectedPriorities = selected\n                ? selectedRows.map((row) =&gt; row.priority)\n                : [];\n            setSelectedPriorities(allSelectedPriorities);\n        },\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;Dropdown overlay={menu} trigger={[\"click\"]}&gt;\n                &lt;a className=\"ant-dropdown-link\" onClick={(e) =&gt; e.preventDefault()}&gt;\n                Select Priority &lt;DownOutlined /&gt;\n                &lt;/a&gt;\n            &lt;/Dropdown&gt;\n            &lt;Table\n                className=\"company-table\"\n                rowKey=\"id\"\n                rowSelection={\n                    isCircular\n                        ? { ...rowSelectionConfig, ...rowSelection }\n                        : rowSelectionConfig\n                }\n                columns={isCircular ? columnCircular : columns}\n                dataSource={dataSource}\n                loading={\n                    isCircular\n                        ? referencePartyListingCircularLoading\n                        : referencePartyListingLoading\n                }\n                scroll={true}\n                pagination={false}\n                onRow={rowEventhandlers}\n                rowClassName={setTaskClassName}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default MyTableComponent;\n</code></pre> <ol> <li> <p>Synchronizing \"Select All\":</p> <ul> <li>In the <code>handleSelectAll</code> function, when the \"Select All\" checkbox is checked or unchecked, it updates both <code>selectedPriorities</code> and <code>selectedRowKeys</code>.</li> </ul> </li> <li> <p>Row Selection Changes:</p> <ul> <li>In the <code>onChange</code> event of the rowSelection, it updates <code>selectedPriorities</code> based on the priorities of the currently selected rows.</li> </ul> </li> <li> <p>Row Selection Config:</p> <ul> <li>The <code>onSelectAll</code> method updates the priorities when all rows are selected or deselected.</li> </ul> </li> </ol>"},{"location":"office/ispl/important/table-row-selection-customize/#best-simple-example-to-customize","title":"Best Simple Example to Customize","text":"ExampleHow it worksBenefits <pre><code>import React, { useState } from \"react\";\nimport { Table, Checkbox, Select } from \"antd\";\n\nconst { Option } = Select;\n\nconst App = () =&gt; {\n    const data = [\n        { key: \"1\", priority: \"1\", name: \"Item 1\" },\n        { key: \"2\", priority: \"2\", name: \"Item 2\" },\n        { key: \"3\", priority: \"3\", name: \"Item 3\" },\n        { key: \"4\", priority: \"1\", name: \"Item 4\" },\n        { key: \"5\", priority: \"2\", name: \"Item 5\" },\n    ];\n\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n    const [filterPriority, setFilterPriority] = useState(\"all\");\n\n    // Function to handle row selection\n    const onSelectChange = (selectedRowKeys) =&gt; {\n        setSelectedRowKeys(selectedRowKeys);\n    };\n\n    // Function to handle filter change for priority\n    const handlePriorityChange = (value) =&gt; {\n        setFilterPriority(value);\n        // Automatically update the selected rows based on the filter\n        if (value === \"all\") {\n            // Select all rows\n            setSelectedRowKeys(data.map((item) =&gt; item.key));\n        } else {\n            // Filter by selected priority\n            setSelectedRowKeys(\n                data.filter((item) =&gt; item.priority === value).map((item) =&gt; item.key)\n        );\n        }\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n        getCheckboxProps: (record) =&gt; ({\n            disabled: filterPriority !== \"all\" &amp;&amp; record.priority !== filterPriority, // Disable checkboxes based on filter\n        }),\n    };\n\n    const columns = [\n        {\n            title: \"Priority\",\n            dataIndex: \"priority\",\n            key: \"priority\",\n        },\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        },\n    ];\n\nreturn (\n    &lt;div&gt;\n        &lt;Select\n            defaultValue=\"all\"\n            style={{ width: 200, marginBottom: 16 }}\n            onChange={handlePriorityChange}\n        &gt;\n            &lt;Option value=\"all\"&gt;All&lt;/Option&gt;\n            &lt;Option value=\"1\"&gt;Priority 1&lt;/Option&gt;\n            &lt;Option value=\"2\"&gt;Priority 2&lt;/Option&gt;\n            &lt;Option value=\"3\"&gt;Priority 3&lt;/Option&gt;\n        &lt;/Select&gt;\n\n        &lt;Table\n            rowSelection={rowSelection}\n            columns={columns}\n            dataSource={data}\n            rowKey=\"key\"\n        /&gt;\n    &lt;/div&gt;\n);\n};\n\nexport default App;\n</code></pre> <ol> <li> <p><code>filterPriority</code> state: This state keeps track of the current filter selected in the dropdown (<code>All</code>, <code>Priority 1</code>, <code>Priority 2</code>, <code>Priority 3</code>).</p> </li> <li> <p><code>handlePriorityChange</code> function: When the user selects a priority from the dropdown, it updates the filterPriority state and updates the selectedRowKeys accordingly. If \"All\" is selected, all rows are selected; otherwise, only rows with the corresponding priority are selected.</p> </li> <li> <p>Row Selection: The <code>rowSelection</code> object manages the selection logic. The <code>getCheckboxProps</code> function checks the <code>filterPriority</code> value and disables checkboxes for rows that don't match the filter.</p> </li> <li> <p>The Select Dropdown: The <code>Select</code> dropdown allows the user to choose between \"All\", \"Priority 1\", \"Priority 2\", and \"Priority 3\". Based on the selected priority, the table selection changes.</p> </li> </ol> <ul> <li>The user can choose a specific priority or select all rows.</li> <li>The checkboxes for rows that do not match the selected priority are disabled, making the UI intuitive.</li> </ul>"},{"location":"office/ispl/important/table-rowid/","title":"rowKey","text":"<p>vdsfds</p> <pre><code>const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      setSelectedRowKeys(selectedKeys);\n    },\n    type: 'checkbox',\n};\n\n\n&lt;div className=\"organizer__table company-table-wrapper\"&gt;\n    &lt;Table\n        className=\"company-table\"\n        // rowSelection={isCircular ? {\n        //   type: 'checkbox',\n        //   ...rowSelection,\n        // } : null} \n\n        // VERY IMPORTARNT\n        rowKey=\"id\"\n\n\n        rowSelection={isCircular &amp;&amp; rowSelection}\n\n        columns={isCircular ? columnCircular : columns}\n        dataSource={\n        isCircular\n            ? referencePartyListingCircularResponse\n            : referencePartyListingResponse\n        }\n        loading={\n        isCircular\n            ? referencePartyListingCircularLoading\n            : referencePartyListingLoading\n        }\n        scroll={true}\n        pagination={false}\n        onRow={rowEventhandlers}\n        rowClassName={setTaskClassName}\n    /&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>  // const rowSelection = {\n  //   selectedRowKeys,\n  //   onChange: handleSelectionChange,\n  //   getCheckboxProps: (record) =&gt; ({\n  //     disabled: false, // Enable checkboxes\n  //   }),\n  // };\n  // console.log(\"referencePartyListingCircularResponse: \", JSON.stringify(referencePartyListingCircularResponse))\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#solution","title":"SOLUTION","text":""},{"location":"office/ispl/important/table-rowid/#1-verify-rowselection-setup","title":"1. Verify <code>rowSelection</code> Setup","text":"<p>Ensure your <code>rowSelection</code> object is correctly set up and that the <code>onChange</code> function is defined correctly. The <code>onChange</code> callback should receive <code>selectedRowKeys</code> and <code>selectedRows</code> as arguments.</p> <pre><code>const rowSelection = {\n  type: 'radio', // Ensure this matches your requirement ('radio' for single selection, 'checkbox' for multiple)\n  selectedRowKeys,\n  onChange: (selectedKeys, selectedRows) =&gt; {\n    console.log('Selected Keys:', selectedKeys); // Debug: Check what\u2019s being logged\n    console.log('Selected Rows:', selectedRows); // Debug: Check the selected rows\n    setSelectedRowKeys(selectedKeys);\n  },\n};\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#2-ensure-selectedrowkeys-state-is-managed-correctly","title":"2. Ensure <code>selectedRowKeys</code> State Is Managed Correctly","text":"<p>The <code>selectedRowKeys</code> state should be managed correctly in your component\u2019s state. Make sure it is initialized properly and updated through the <code>onChange</code> callback.</p> <pre><code>const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#3-check-table-configuration","title":"3. Check Table Configuration","text":"<p>Make sure your table component is configured to use <code>rowSelection</code> and that <code>rowKey</code> is set to ensure unique keys:</p> <pre><code>&lt;Table\n  columns={columnCircular}\n  dataSource={dataSource}\n  rowSelection={rowSelection}\n  rowKey=\"id\" // Ensure this key matches the key field in your data\n/&gt;\n</code></pre>"},{"location":"office/ispl/refactor/","title":"Intro","text":""},{"location":"office/ispl/refactor/#mew","title":"Mew","text":"<p>You can optimize the code by consolidating the <code>dispatch</code> calls into a single statement. By constructing the payload conditionally before the dispatch, you can reduce redundancy and improve readability. Here\u2019s a more streamlined version of your code:</p> OldRefactoredKey Changes CircularMail.js<pre><code>// bishow\ntry {\n    setIsCircularMailLoading(true);\n    form.validateFields([\"participantTosValue\"]);\n\n    if (formType !== \"newCutting\" &amp;&amp; module !== \"Circular_Planning\") {\n        await dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n    } else if (module === \"Circular_Planning\") {\n        let circulayPayload = {\n        ...body,\n        IsCircularPlanningRequestForApproval: true,\n        };\n        await dispatch(\n        instanceChatAdd(circulayPayload, isDashbord, setInternalVisible)\n        );\n    }\n\n    form.resetFields();\n    setInternalEditorData(\"\");\n} catch (error) {\n    message.error(\"To and Cc cannot be empty\");\n    return;\n} finally {\n    setIsCircularMailLoading(false);\n}\n</code></pre> CircularMail.js<pre><code>try {\n    setIsCircularMailLoading(true);\n    await form.validateFields([\"participantTosValue\"]);\n\n    // Create the payload based on conditions\n    const isCircularPlanning = module === \"Circular_Planning\";\n    const payload = isCircularPlanning\n        ? { ...body, IsCircularPlanningRequestForApproval: true }\n        : body;\n\n    // Dispatch the action\n    await dispatch(instanceChatAdd(payload, isDashbord, setInternalVisible));\n\n    // If the API call is successful, reset the form\n    form.resetFields();\n    setInternalEditorData(\"\");\n} catch (error) {\n    // Handle errors, e.g., API errors\n    message.error(error.message || \"An error occurred. Please try again.\");\n} finally {\n    setIsCircularMailLoading(false);\n}\n</code></pre> <ol> <li> <p>Single Payload Creation: The payload is created based on the condition (<code>isCircularPlanning</code>), which simplifies the logic.</p> </li> <li> <p>Single Dispatch Call: You only call <code>dispatch(instanceChatAdd(...))</code> once, regardless of the conditions.</p> </li> <li> <p>Clearer Logic Flow: This makes it easier to read and understand the flow of the function.</p> </li> </ol> <p>By applying these changes, the code becomes cleaner and easier to maintain while preserving its functionality. Let me know if you need further adjustments!</p>"},{"location":"office/ispl/refactor/Button/","title":"Button","text":"<pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const {\n        transferToDailyDairyResp,\n        transferToDailyDairyLoading,\n        dailyDairyPaginationResp,\n        dailyDairyPaginationLoading,\n    } = useSelector((state) =&gt; state.dailyDiaryReducer);\n\n    // Added\n    const [\n        hasTodoDiaryBeenAdvancedSearched,\n        setHasTodoDiaryBeenAdvancedSearched,\n    ] = useState(false);\n    const [isDownloadingExcel, setIsDownloadingExcel] = useState(false);\n\n\n    const exxxcelItems = dailyDairyPaginationResp?.items || [];\n    const isDownloadExcelEnabled =\n    hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n\n\n    const buttonProps = {\n        // type: \"primary\",\n        disabled: !isDownloadExcelEnabled,\n        icon: &lt;DownloadOutlined /&gt;,\n        loading: isDownloadingExcel,\n        onClick: handleDownloadTodoExcel,\n    };\n\n    return(\n        &lt;&gt;\n            {\n                hasTodoDiaryBeenAdvancedSearched &amp;&amp; (\n                    &lt;Tooltip\n                    title={\n                        isDownloadExcelEnabled\n                        ? \"You can download Excel here\"\n                        : \"Opps, nothing to download...\"\n                    }\n                    &gt;\n                    &lt;Button\n                        {...buttonProps}\n                        // onClick={handleDownloadTodoExcel}\n                        // loading={isDownloadingExcel}\n                    /&gt;\n                    &lt;/Tooltip&gt;\n                );\n            }\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/refactor/Button/#bug-overview","title":"Bug Overview","text":"<p>Smart Download Logic: Using State Flags to Control File Saving in React</p> Bug <pre><code>useEffect(() =&gt; {\nif (!isEmpty(exportDailDiary)) {\n    let { data, fileName, fileExtension } = exportDailDiary;\n\n    saveBase64({\n        base64Data: data,\n        fileName,\n        fileType: fileExtension,\n    });\n}\n}, [exportDailDiary]);\n\nconst handleDownloadTodoExcel = async () =&gt; {\n    console.log(\"Downloading ...\");\n    setIsDownloadingExcel(true);\n\n    try {\n        let props = createProps({\n            SortType: sortTypeValue,\n            UserId: selectedUserId,\n            DailyDiaryDate: selectedDate,\n            DailyDiaryDateFrom: startDate,\n            DailyDiaryDateTo: endDate,\n        });\n        await dispatch(actionForExportDairyToExcel(props));\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setIsDownloadingExcel(false);\n    }\n};\n</code></pre> <p>This issue is likely occurring because the <code>useEffect</code> is being triggered by a change in the <code>exportDailDiary</code> state, which can happen when your application recompiles in development mode (e.g., due to hot module replacement). Here are several strategies to prevent the automatic saving of the file when you're not intending to:</p>"},{"location":"office/ispl/refactor/Button/#strategies-to-prevent-automatic-saving","title":"Strategies to Prevent Automatic Saving","text":""},{"location":"office/ispl/refactor/Button/#1-conditional-logic","title":"1. Conditional Logic:","text":"<p>Introduce a state variable to control when the file should actually be saved. For example, set a flag that only allows saving when a user action (like clicking a button) has occurred.</p> <pre><code>const [isUserInitiatedSave, setIsUserInitiatedSave] = useState(false);\n\nconst handleDownloadTodoExcel = async () =&gt; {\n  setIsUserInitiatedSave(true);\n  // Your download logic...\n};\n\nuseEffect(() =&gt; {\n  if (isUserInitiatedSave &amp;&amp; !isEmpty(exportDailDiary)) {\n    const { data, fileName, fileExtension } = exportDailDiary;\n\n    saveBase64({\n      base64Data: data,\n      fileName,\n      fileType: fileExtension,\n    });\n\n    // Reset the flag after saving\n    setIsUserInitiatedSave(false);\n  }\n}, [exportDailDiary, isUserInitiatedSave]);\n</code></pre>"},{"location":"office/ispl/refactor/Button/#2-debouncing-with-a-flag","title":"2. Debouncing with a Flag:","text":"<p>If you\u2019re still using debouncing, you can combine it with the user-initiated flag to ensure that it only runs when the user triggers it.</p> <pre><code>useEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    if (!isEmpty(exportDailDiary)) {\n      const { data, fileName, fileExtension } = exportDailDiary;\n      saveBase64({ base64Data: data, fileName, fileType: fileExtension });\n    }\n  }, 300); // Adjust the delay as needed\n\n  return () =&gt; clearTimeout(timer);\n}, [exportDailDiary]);\n</code></pre>"},{"location":"office/ispl/refactor/Button/#3-use-callback-in-the-action","title":"3. Use Callback in the Action:","text":"<p>Modify your action creator to return the necessary data back to the caller. This way, the file saving can be directly controlled after the action completes.</p> <pre><code>const handleDownloadTodoExcel = async () =&gt; {\n  setIsDownloadingExcel(true);\n  try {\n    const result = await dispatch(actionForExportDairyToExcel());\n    if (result) {\n      const { data, fileName, fileExtension } = result;\n      saveBase64({ base64Data: data, fileName, fileType: fileExtension });\n    }\n  } catch (err) {\n    console.error(\"Error downloading Excel:\", err);\n  } finally {\n    setIsDownloadingExcel(false);\n  }\n};\n</code></pre>"},{"location":"office/ispl/refactor/Button/#4-cleanup-on-unmount","title":"4. Cleanup on Unmount:","text":"<p>If the component that uses <code>useEffect</code> can unmount, consider cleaning up any potential ongoing effects, though this is less relevant in this specific case.</p>"},{"location":"office/ispl/refactor/Button/#summary","title":"Summary","text":"<p>The best way to resolve the issue of files being saved unintentionally during development is to control the invocation of your save function through a user action flag. By ensuring that <code>saveBase64</code> only runs when a button click or other user action occurs, you can prevent unexpected behavior during code saves or hot reloading.</p>"},{"location":"office/ispl/refactor/function-update-setState/","title":"Functional Update","text":"ComponentTender/reducer.js Companies.js<pre><code>// function\nconst [instandData, setInstandData] = useState([]);\n// log update\nconst [isRequestSent, setIsRequestSent] = useState(false);\nconst [approvalStatus, setApprovalStatus] = useState({});\nconst [sendForApprovalLog, setSendForApprovalLog] = useState({});\nconst [tooltipMessage, setTooltipMessage] = useState(\"\");\nconst [approvalfrom, setApprovalfrom] = useState(\"\");\nconst [approvalTos, setApprovalTos] = useState([]);\nconst [approvalSentTime, setApprovalSentTime] = useState(\"\");\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getDetails)) {\n        setIsRequestSent(\n            (prev) =&gt; getDetails.isCircularPlanningApprovalRequestSent\n        );\n        setApprovalStatus((prev) =&gt; getDetails.circularPlanningApprovedStatusDto);\n        setSendForApprovalLog(\n            (prev) =&gt; getDetails.circularPlanningSendForApprovalLogDto\n        );\n        setApprovalfrom(\n            (prev) =&gt;\n                getDetails.circularPlanningSendForApprovalLogDto.from\n                ?.participantName || \"Unknown\"\n        );\n        setApprovalTos((prev) =&gt;\n            Array.isArray(getDetails.circularPlanningSendForApprovalLogDto?.to)\n                ? getDetails.circularPlanningSendForApprovalLogDto?.to\n                    .map((item) =&gt; item.participantName || \"Unnamed\")\n                    .join(\", \")\n                : \"No recipients\"\n        );\n        setApprovalSentTime((prev) =&gt;\n            getDetails.circularPlanningSendForApprovalLogDto?.messageSentTime\n                ? moment(\n                    getDetails.circularPlanningSendForApprovalLogDto?.messageSentTime\n                    .messageSentTime\n                ).format(\"YYYY-MM-DD HH:mm:ss\")\n                : \"N/A\"\n        );\n        console.log(\"USE EFFECT: \", getDetails);\n    }\n}, [getDetails]);\n\n\n// Tooltip\n// const getDetailsSafe = getDetails || {};\n\n// const isRequestSent = getDetailsSafe.isCircularPlanningApprovalRequestSent;\n// const approvalStatus = getDetailsSafe.circularPlanningApprovedStatusDto || {};\n// const sendForApprovalLog =\n//     getDetailsSafe.circularPlanningSendForApprovalLogDto || {};\n\n// const approverName = approvalStatus.approverName || \"Unknown\";\n// const approveDate = approvalStatus.approveDate\n//     ? moment(approvalStatus.approveDate).format(\"YYYY-MM-DD\")\n//     : \"N/A\";\n// const senderName = sendForApprovalLog.from?.participantName || \"Unknown\";\n// const messageSentTime = sendForApprovalLog.messageSentTime\n//     ? moment(sendForApprovalLog.messageSentTime).format(\"YYYY-MM-DD HH:mm:ss\")\n//     : \"N/A\";\n\n// const toList = Array.isArray(sendForApprovalLog.to)\n//     ? sendForApprovalLog.to\n//         .map((item) =&gt; item.participantName || \"Unnamed\")\n//         .join(\", \")\n//     : \"No recipients\";\n\n// const tooltipMessage = !isRequestSent ? (\n//     \"Not Sent\"\n// ) : approvalStatus.isApproved ? (\n//     `Approved by ${approverName} on ${approveDate}`\n// ) : (\n//     &lt;div&gt;\n//     &lt;p&gt;Not yet approved&lt;/p&gt;\n//     &lt;p&gt;Sent By: {senderName}&lt;/p&gt;\n//     &lt;p&gt;To: {toList}&lt;/p&gt;\n//     &lt;p&gt;Time: {messageSentTime}&lt;/p&gt;\n//     &lt;/div&gt;\n// );\n\nreturn (\n    &lt;&gt;\n\n\n        {/* &lt;Tooltip title={tooltipMessage}&gt; */}\n        &lt;Tooltip\n            title={\n                !isRequestSent ? (\n                \"Not Sent\"\n                ) : approvalStatus.isApproved ? (\n                `Approved by`\n                ) : (\n                &lt;div&gt;\n                    &lt;p&gt;Not yet approved&lt;/p&gt;\n                    &lt;p&gt;Sent By: {approvalfrom}&lt;/p&gt;\n                    &lt;p&gt;To: {approvalTos}&lt;/p&gt;\n                    &lt;p&gt;Time: {approvalSentTime}&lt;/p&gt;\n                &lt;/div&gt;\n                )\n            }\n        &gt;\n        &lt;Button\n            type=\"primary\"\n            onClick={() =&gt; setIsCircularModalOpen(true)}\n            disabled={isButtonDisabled}\n        &gt;\n            Send for Approval\n        &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    &lt;/&gt;\n);\n</code></pre> <pre><code>// case UPDATE\ncase REFERENCE__TYPES.TENDER_BASIC_GetDetails_UPDATE:\n    let id = \"c2ff5cf8-c16b-4c19-ad48-f14405fc3ea2\";\n    console.log(\"action.payload: \", action.payload);\n\n    // let { participantFrom, participantTos, ...rest } =\n    //   action.payload.mailMessageParticipantWithTypeDtos;\n    // let requirenF = {\n    //   ...rest,\n    //   from: participantFrom &amp;&amp; {\n    //     participantUserId: participantFrom?.participantUserId,\n    //     participantName: participantFrom?.participantUserDto?.fullName,\n    //   },\n    //   to:\n    //     participantTos &amp;&amp;\n    //     participantTos?.map((item) =&gt; ({\n    //       participantUserId: item?.participantUserId,\n    //       participantName: item?.participantUserDto?.fullName,\n    //     })),\n    // };\n    // console.log(\"requirenF: \", requirenF);\n\n    let updatedObject;\n    if (\n        state?.tenderBasicGetDetailsResponse?.id ===\n        action.payload.tenderBasicId\n    ) {\n        updatedObject = {\n            ...state.tenderBasicGetDetailsResponse,\n            isCircularPlanningApprovalRequestSent: true,\n            mailMessageParticipantWithTypeDtos:\n            action.payload.mailMessageParticipantWithTypeDtos ?? {},\n            // mailMessageParticipantWithTypeDtos: requirenF ?? {},\n            circularPlanningSendForApprovalLogDto:\n            action.payload.circularPlanningSendForApprovalLogDto,\n        };\n    } else {\n        updatedObject = state.tenderBasicGetDetailsResponse;\n    }\n\n    return {\n        ...state,\n        tenderBasicGetDetailsResponse: updatedObject,\n        tenderBasicGetDetailsLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/refactor/noticeboard/","title":"NoticeBoard Modal","text":""},{"location":"office/ispl/refactor/noticeboard/#notcieboardmodaljs","title":"NotcieBoardModal.js","text":"<p>In the previous example, if there is multiple items it pop up multiple multiple after closing one model,</p> <p>In the Refactor example, it only shows one model but has <code>next</code> and <code>previous</code> button.</p> PreviousRefactorChanges Made <pre><code>// NotcieBoardModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, List } from \"antd\";\nimport { isEmpty } from \"lodash\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex((prevIndex) =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n        &lt;List.Item&gt;\n            &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n            &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n        &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; (\n            &lt;&gt;\n            {/* &lt;List\n                size=\"small\"\n                dataSource={visibleItem ? [visibleItem] : []}\n                renderItem={renderItem}\n            /&gt; */}\n\n            &lt;Modal\n                title={visibleItem?.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n            &lt;/Modal&gt;\n            &lt;/&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <pre><code>// NotcieBoardModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, List, Button } from \"antd\";\nimport { isEmpty } from \"lodash\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (\n            !isEmpty(noticeBoard.items) &amp;&amp;\n            currentIndex &lt; noticeBoard.items.length\n        ) {\n            setVisibleItem(noticeBoard.items[currentIndex]);\n            setIsModalVisible(true);\n        } else {\n            setVisibleItem(null);\n            setIsModalVisible(false);\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n    };\n\n    const handleNext = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt;\n            Math.min(prevIndex + 1, noticeBoard.items.length - 1)\n        );\n    };\n\n    const handlePrev = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt; Math.max(prevIndex - 1, 0));\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; visibleItem &amp;&amp; (\n            &lt;Modal\n                title={visibleItem.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem.description}&lt;/p&gt;\n                &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n                    &lt;Button\n                        icon={&lt;LeftOutlined /&gt;}\n                        onClick={handlePrev}\n                        disabled={currentIndex === 0}\n                    &gt;\n                        Previous\n                    &lt;/Button&gt;\n                    &lt;Button\n                    icon={&lt;RightOutlined /&gt;}\n                        onClick={handleNext}\n                        disabled={currentIndex === noticeBoard.items.length - 1}\n                    &gt;\n                        Next\n                    &lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/Modal&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <ol> <li>Next and Previous Buttons: Added buttons for navigation with icons using Ant Design's <code>Button</code> and <code>LeftOutlined</code>/<code>RightOutlined</code> icons.</li> <li>Navigation Logic: Added <code>handleNext</code> and <code>handlePrev</code> functions to update <code>currentIndex</code> based on user actions, ensuring it stays within valid bounds.</li> <li>Button Disable Logic: Disabled the buttons when the user is at the first or last item to prevent out-of-bounds navigation</li> </ol>"},{"location":"office/ispl/refactor/noticeboard/#session-storage-to-view-only-once-modal","title":"Session Storage to view only once modal","text":"SessionExplanation of Changes <p>To ensure that the <code>NoticeBoardModal</code> only shows once per user, you can leverage the <code>sessionStorage</code> API to track whether the modal has been displayed. Below is a modified version of your component that incorporates this functionality:</p> <pre><code>import React, { useState, useEffect } from \"react\";\nimport { Modal, List, Button } from \"antd\";\nimport { isEmpty } from \"lodash\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    // useEffect(() =&gt; {\n    //   if (\n    //     !isEmpty(noticeBoard.items) &amp;&amp;\n    //     currentIndex &lt; noticeBoard.items.length\n    //   ) {\n    //     setVisibleItem(noticeBoard.items[currentIndex]);\n    //     setIsModalVisible(true);\n    //   } else {\n    //     setVisibleItem(null);\n    //     setIsModalVisible(false);\n    //   }\n    // }, [noticeBoard, currentIndex]);\n\n    useEffect(() =&gt; {\n        const hasSeenModal = sessionStorage.getItem(\"hasSeenNoticeBoardModal\");\n\n        if (\n            !hasSeenModal &amp;&amp;\n            !isEmpty(noticeBoard.items) &amp;&amp;\n            currentIndex &lt; noticeBoard.items.length\n        ) {\n            setVisibleItem(noticeBoard.items[currentIndex]);\n            setIsModalVisible(true);\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        sessionStorage.setItem(\"hasSeenNoticeBoardModal\", \"true\");\n        setIsModalVisible(false);\n    };\n\n    const handleNext = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt;\n        Math.min(prevIndex + 1, noticeBoard.items.length - 1)\n        );\n    };\n\n    const handlePrev = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt; Math.max(prevIndex - 1, 0));\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; visibleItem &amp;&amp; (\n            &lt;Modal\n                title={visibleItem.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem.description}&lt;/p&gt;\n                &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n                    &lt;Button\n                        icon={&lt;LeftOutlined /&gt;}\n                        onClick={handlePrev}\n                        disabled={currentIndex === 0}\n                    &gt;\n                        Previous\n                    &lt;/Button&gt;\n                    &lt;Button\n                        icon={&lt;RightOutlined /&gt;}\n                        onClick={handleNext}\n                        disabled={currentIndex === noticeBoard.items.length - 1}\n                    &gt;\n                        Next\n                    &lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/Modal&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <ol> <li> <p>Session Storage Check: Before showing the modal, the code checks if a flag (<code>hasSeenNoticeBoardModal</code>) exists in <code>sessionStorage</code>. If it doesn't, the modal can be shown.</p> </li> <li> <p>Setting the Flag: When the modal is closed (via <code>handleModalCancel</code>), the flag is set in <code>sessionStorage</code> to prevent the modal from being displayed again during the session.</p> </li> </ol>"},{"location":"office/primesales/intro/","title":"Intro","text":""},{"location":"office/primesales/intro/#intro","title":"Intro","text":""},{"location":"office/primesales/intro/#setup","title":"Setup","text":"<p>Success</p> <pre><code># Installing PHP\nsudo apt install php-cli\n\nsudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-xmlrpc php8.2-zip\n\n\n# Installing Composer\nsudo apt install composer\n\n#\ncomposer global require laravel/installer\n</code></pre> <p>To Check PHP Version in Ubutnu</p> <pre><code>#1. Command Line Interface (CLI):\nphp --version\n\n# using the dpkg command:\ndpkg -l | grep php\n\n#2. Using Laravel Artisan Command:\nphp artisan --version\n</code></pre> <p>If you prefer not to use the command line interface, you can check the PHP version being used in your Laravel project by examining the <code>composer.json</code> file. Laravel specifies the PHP version requirement in this file.</p> <ol> <li>Navigate to the root directory of your Laravel project.</li> <li>Open the <code>composer.json</code> file in a text editor.</li> <li>Look for the <code>require</code> section. Within this section, you should find an entry for \"php\" along with a version constraint. For example:</li> </ol> composer.json<pre><code>\"require\": {\n    \"php\": \"^7.3\",\n    // other dependencies...\n}\n</code></pre> <p>In this example, Laravel requires PHP version <code>7.3</code> or higher.</p> PHP Version <code>major</code> &amp; <code>minor</code> <p>In PHP, the versioning convention is similar to many other programming languages and software systems. PHP version numbers typically consist of three numbers separated by periods, following a pattern similar to Semantic Versioning (SemVer).</p> <p>Major version:</p> <p>The first number represents the major version. When the major version number changes, it signifies significant updates that may not be backward compatible with previous versions. Major updates often introduce new features, architectural changes, or major enhancements.</p> <p>Minor version:</p> <p>The second number represents the minor version. A change in the minor version number usually indicates smaller updates or improvements compared to major updates. Minor updates may include new features or improvements while maintaining backward compatibility within the same major version.</p> <p>Patch version:</p> <p>The third number represents the patch version. Changes in the patch version number typically denote bug fixes, security patches, or minor updates that do not introduce new features and maintain backward compatibility within the same major and minor version. For example:</p> <ul> <li>In PHP version <code>7.2.0</code>, <code>7</code> is the major version, 2 is the minor version, and 0 is the patch version.</li> <li>In PHP version <code>8.0.1</code>, <code>8</code> is the major version, 0 is the minor version, and 1 is the patch version.</li> </ul> <p>When specifying version constraints in PHP projects using tools like Composer, version ranges and constraints are often defined in the composer.json file. The caret (^) symbol is commonly used to specify a range of compatible versions within the same major version, similar to other package management systems. For example, \"<code>^7.2</code>\" would include all versions from PHP <code>7.2</code> up to, but not including, PHP <code>8.0</code>.</p> <p>--</p>"},{"location":"office/primesales/intro/#url","title":"URL","text":"<p>webcrm</p> <p>username: sampurna password: primesales360##</p>"},{"location":"office/primesales/intro/#reference","title":"Reference","text":"<p>PHP Version History</p> <ul> <li>Brief Timeline of PHP Versions</li> <li>PHP Versions</li> <li>Zend PHP Versions</li> <li>educba PHP Versions</li> </ul> <p>Installation</p> <ul> <li>How to install and configure PHP</li> </ul> <p>Composer</p> <ul> <li>composer official</li> </ul> <p>Online</p> <ul> <li>Laravel Key Generator</li> </ul>"},{"location":"office/redux/intro/","title":"Intro","text":"<p>intro</p> Daily DiayMail <pre><code>services/reudx/dailyDiary/action.js\n\n// updated\nexport const updateDailyDiaryReducer = (GET_PAGINATION_DAILY_DIARY_UPDATE, data) =&gt; {\n    return {\n        type:  DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE,\n        payload: data,\n    }\n}\n\n// status\nexport const changeDailyDiaryStatus = (data) =&gt; {\n    return {\n        type: DAILY_DAIRY.GET_PAGIGATION_DAILY_DIARY_STATUS,\n        payload: data,\n    }\n}\n</code></pre> <pre><code>import { updateDailyDiaryReducer } from \"services/redux/dailyDairy/action\";\n\nexport const toDoMarkAsComplete = (id) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(TODO_TYPES.TODO_COMPLETE));\n        const response = await toDoListService.toDoMarkAsComplete(id);\n        dispatch(finish(TODO_TYPES.TODO_COMPLETE));\n\n        if (response.isSuccess) {\n            dispatch(success(TODO_TYPES.TODO_COMPLETE, response.data));\n            // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n            let status = response.data.markItOff ? \"complete\" : \"incomplete\";\n            message.success(`Todo status updated successfully`);\n\n            // added\n            // console.log(\"ACTION response: \", response.data);\n\n            // ****************************************************************\n            dispatch(updateDailyDiaryReducer(DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE, response.data));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>// update in mail\ncase REFERENCE__TYPES.GET_CIRCULAR_REFERENCE_TEMPLATE_UPDATE:\n    let updatedTemplateMail = state?.singleCircularReferenceTemplateResponse &amp;&amp;\n        (state.singleCircularReferenceTemplateResponse.id === action.payload.id\n        ? { ...action.payload }\n        : state.singleCircularReferenceTemplateResponse\n        )\n\n    return {\n        ...state,\n        singleCircularReferenceTemplateLoading: false,\n        singleCircularReferenceTemplateResponse: updatedTemplateMail,\n    }\n\n\ntry {\n    if (data) {\n        dispatch(actionForAddUpdateReferenceTemplate(updateApiData));\n        if (origin === \"mail\") {\n            let apiPayload = {\n                ...updateApiData,\n                id: updateApiData?.referenceTemplateId,\n            }\n\n            delete apiData?.referenceId;\n            delete apiData?.referenceTemplateId;\n\n            dispatch(actionForUpdateTemplate(apiPayload))\n        } else {\n            dispatch(actionForGetReferenceTemplateGetDetailsById(referenceId));\n        }\n    } else {\n        dispatch(actionForAddUpdateReferenceTemplate(apiData));\n    }\n} catch(err) {\n    console.log(\"Error: \", err)\n}\n</code></pre>"},{"location":"office/redux/intro/#heres-a-breakdown-of-the-category-and-type-of-redux-pattern","title":"Here's a breakdown of the category and type of Redux pattern:","text":"<ol> <li>Asynchronous Actions (Async Actions)</li> <li>Thunk Middleware</li> <li>Action Chaining (Dispatching Multiple Actions)</li> </ol> Category Breakdown <ul> <li>Middleware-enhanced Redux: This falls under Redux with middleware enhancement because of the use of <code>redux-thunk</code>.</li> <li>Async Workflow: This approach is used when handling asynchronous workflows in your Redux actions.</li> <li>Action Chaining: It uses chained actions where you dispatch multiple actions from a single action creator, often in response to an async operation.</li> </ul>"},{"location":"office/redux/intro/#redux-tips","title":"Redux Tips","text":"<p>Here are techniques for managing adding, updating, and deleting items in Redux:</p> Adding ItemsUpdating ItemsDeleting Items <ul> <li>Check for Existence: Use <code>some</code> to determine if the item already exists before adding.</li> <li>Spread Operator: Use the spread operator to create a new array that includes the new item.</li> <li>Immutable Updates: Ensure state is updated immutably to avoid side effects.</li> </ul> <ul> <li>Map Function: Use <code>map</code> to create a new array, replacing the item when it matches the ID.</li> <li>Conditionally Update: Use conditional logic to check if the item should be updated based on the action payload.</li> <li>Preserve Other Items: Keep existing items unchanged while updating the specific item.</li> </ul> <ul> <li>Filter Function: Use <code>filter</code> to create a new array excluding the item to be deleted.</li> <li>Identify by ID: Identify the item to delete using its unique ID.</li> <li>Immutable State Update: Ensure the state is updated immutably to maintain Redux principles.</li> </ul> <p>These techniques will help you maintain a clean and efficient Redux codebase for managing items effectively.</p> Using libraries in a Redux codebase <p>Using libraries in a Redux codebase can enhance functionality and simplify certain tasks, but they aren't strictly necessary. Here are some libraries commonly used in conjunction with Redux, along with their benefits:</p> <ol> <li> <p>Redux Toolkit</p> <ul> <li>Purpose: Simplifies Redux setup and reduces boilerplate code.</li> <li> <p>Features:</p> <ul> <li>Built-in functions for creating slices (reducers and actions).</li> <li>Built-in middleware for handling asynchronous logic (like <code>createAsyncThunk</code>).</li> <li>Includes utilities for immutable updates.</li> </ul> </li> </ul> </li> <li> <p>Immer</p> <ul> <li>Purpose: Makes immutable state updates easier and more readable.</li> <li> <p>Benefits:</p> <ul> <li>Allows you to write \"mutable\" code that gets converted to immutable updates.</li> <li>Reduces the complexity of deeply nested updates.</li> </ul> </li> </ul> </li> <li> <p>Lodash</p> <ul> <li>Purpose: Provides utility functions for common tasks like sorting and filtering.</li> <li> <p>Benefits:</p> <ul> <li>Simplifies array and object manipulation (e.g., <code>_.sortBy</code>, <code>_.find</code>, <code>_.filter</code>).</li> </ul> </li> </ul> </li> <li> <p>React-Redux</p> <ul> <li>Purpose: Connects React components to the Redux store.</li> <li> <p>Benefits:</p> <ul> <li>Provides hooks like <code>useSelector</code> and <code>useDispatch</code> for accessing state and dispatching actions easily.</li> <li>Ensures efficient rendering by only re-rendering components when necessary.</li> </ul> </li> </ul> </li> <li> <p>Redux-Saga or Redux-Thunk</p> <ul> <li>Purpose: Middleware for handling side effects in Redux.</li> <li> <p>Benefits:</p> <ul> <li>Redux-Saga: Uses generator functions to handle complex asynchronous flows.</li> <li>Redux-Thunk: Allows action creators to return functions for handling asynchronous logic.</li> </ul> </li> </ul> </li> </ol> <p>Conclusion</p> <p>While you can build a Redux application without any additional libraries, using them can significantly improve development efficiency, readability, and maintainability. For most applications, Redux Toolkit is highly recommended as it encapsulates many best practices and simplifies the development process.</p>"},{"location":"office/redux/intro/#immer-redux","title":"Immer &amp; Redux","text":"<p>Using <code>Immer</code> with <code>Redux</code> in the same project is a common practice and can be very beneficial. Here's how they can complement each other, along with standard practices:</p> Using Immer with Redux <ol> <li> <p>State Management Simplification:</p> <ul> <li>Immer allows you to write \"mutable\" code when updating state, which can make your reducers much more readable.</li> <li>Instead of returning new state objects with the spread operator or using methods like <code>map</code>, <code>filter</code>, or <code>reduce</code>, you can mutate a draft state directly.</li> </ul> </li> <li> <p>Integration with Redux Toolkit:</p> <ul> <li>Redux Toolkit already uses Immer under the hood for its <code>createSlice</code> method. This means you can write reducers that look mutable, but they are actually producing immutable updates.</li> <li>This allows you to leverage both libraries seamlessly, especially when using the Toolkit.</li> </ul> </li> </ol> ExampleStandard PracticesConclusion <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nconst itemsSlice = createSlice({\n    name: \"items\",\n    initialState: [],\n    reducers: {\n        addItem: (state, action) =&gt; {\n            state.push(action.payload); // Mutative update, thanks to Immer\n        },\n        updateItem: (state, action) =&gt; {\n            const index = state.findIndex((item) =&gt; item.id === action.payload.id);\n            if (index !== -1) {\n                state[index] = action.payload; // Mutative update\n            }\n        },\n        deleteItem: (state, action) =&gt; {\n            return state.filter((item) =&gt; item.id !== action.payload.id); // Non-mutative, but still concise\n        },\n    },\n});\n\nexport const { addItem, updateItem, deleteItem } = itemsSlice.actions;\nexport default itemsSlice.reducer;\n</code></pre> <ol> <li> <p>Use Redux Toolkit:</p> <ul> <li>Start with Redux Toolkit for setting up Redux. It simplifies the Redux setup and integrates well with Immer.</li> </ul> </li> <li> <p>Leverage Immer for Reducers:</p> <ul> <li>Use Immer's mutability in reducers when you need more complex state updates. This can reduce boilerplate code and improve clarity.</li> </ul> </li> <li> <p>Keep State Management Concise:</p> <ul> <li>Use Immer to handle nested state updates easily without the need for deep cloning or complex logic.</li> </ul> </li> <li> <p>Evaluate Needs:</p> <ul> <li>While Immer is very useful, consider your project's complexity. For simple state updates, the standard Redux pattern may suffice without needing Immer.</li> </ul> </li> <li> <p>Documentation and Consistency:</p> <ul> <li>Document your use of these libraries in your codebase to ensure all team members understand the patterns being used.</li> </ul> </li> </ol> <p>Combining <code>Immer</code> and <code>Redux Toolkit</code> is a standard practice in modern Redux applications. It improves the developer experience by allowing clearer and more concise state management while maintaining the immutable nature of Redux.</p>"},{"location":"office/redux/react-router/","title":"React Router","text":""},{"location":"office/redux/react-router/#overview","title":"Overview","text":"<p>The main difference between <code>react-router</code> and <code>react-router-dom</code> lies in their intended use cases:</p>"},{"location":"office/redux/react-router/#1-react-router","title":"1. react-router:","text":"<ul> <li>This is the core library for routing in React applications.</li> <li>It provides the basic building blocks for routing but does not include any specific components or features for web or mobile environments.</li> </ul>"},{"location":"office/redux/react-router/#2-react-router-dom","title":"2. react-router-dom:","text":"<ul> <li>This is a package built on top of <code>react-router</code> specifically designed for web applications.</li> <li>It includes additional components and features tailored for DOM-based environments, such as <code>BrowserRouter</code>, <code>HashRouter</code>, <code>Link</code>, and <code>NavLink</code>.</li> </ul>"},{"location":"office/redux/react-router/#3-react-router-native","title":"3. react-router-native:","text":"<ul> <li>This package is for React Native applications.</li> <li>It provides components that work with React Native's navigation system.</li> </ul> <p>In summary, you use <code>react-router-dom</code> for web applications and <code>react-router-native</code> for mobile apps, both of which leverage the core functionality provided by <code>react-router</code>. If you're developing a web app, you only need to install <code>react-router-dom</code>.</p>"},{"location":"office/redux/react-router/#layout-basic","title":"Layout Basic","text":"StructureExplanation of the Structure <pre><code>/src\n\u251c\u2500\u2500 /components\n\u2502   \u251c\u2500\u2500 /Layout\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.js\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.css  (optional, for custom styles)\n\u2502   \u2502   \u2514\u2500\u2500 index.js      (for easier imports)\n\u2502   \u251c\u2500\u2500 /SomeOtherComponent\n\u2502   \u2502   \u2514\u2500\u2500 SomeOtherComponent.js\n\u2502   \u2514\u2500\u2500 /AnotherComponent\n\u2502       \u2514\u2500\u2500 AnotherComponent.js\n\u251c\u2500\u2500 /pages\n\u2502   \u251c\u2500\u2500 HomePage.js\n\u2502   \u2514\u2500\u2500 AboutPage.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 /assets\n    \u2514\u2500\u2500 /images\n</code></pre> <ul> <li>/src: This is the root of your source files.</li> <li> <p>/components: This folder contains all your reusable components.</p> <ul> <li>/Layout: A dedicated folder for your layout components.<ul> <li>MyLayout.js: The main layout component where you define your sidebar and content structure.</li> <li>MyLayout.css: (Optional) A CSS file for any custom styles related to the layout.</li> <li> <p>index.js: This file can be used to re-export the MyLayout component for easier imports. For example:</p> <pre><code>// index.js\nexport { default } from './MyLayout';\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>/pages: This folder can be used for your main application pages, where you would typically use the layout component.</p> <ul> <li><code>HomePage.js</code>: Example of a page that might use the layout.</li> <li><code>AboutPage.js</code>: Another page example.</li> </ul> </li> <li>App.js: The main application file where you set up your routes and integrate your layout.</li> <li>index.js: The entry point of your React application.</li> <li>/assets: A folder to store static assets such as images, fonts, etc.</li> </ul> <pre><code>// App.js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport MyLayout from \"./components/Layout\"; // adjust the path based on your structure\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\n\nconst App = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;MyLayout&gt;\n        &lt;Switch&gt;\n          &lt;Route path=\"/\" exact component={HomePage} /&gt;\n          &lt;Route path=\"/about\" component={AboutPage} /&gt;\n          {/* Add more routes as needed */}\n        &lt;/Switch&gt;\n      &lt;/MyLayout&gt;\n    &lt;/Router&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"office/redux/react-router/#layout-modular-approach","title":"Layout Modular Approach","text":"Structure <pre><code>/src\n\u251c\u2500\u2500 /components\n\u2502   \u251c\u2500\u2500 /Layout\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.js\n\u2502   \u2502   \u251c\u2500\u2500 Sidebar.js\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u251c\u2500\u2500 Footer.js\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.css  (optional)\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 /SomeOtherComponent\n\u2502   \u2502   \u2514\u2500\u2500 SomeOtherComponent.js\n\u2502   \u2514\u2500\u2500 /AnotherComponent\n\u2502       \u2514\u2500\u2500 AnotherComponent.js\n\u251c\u2500\u2500 /pages\n\u2502   \u251c\u2500\u2500 HomePage.js\n\u2502   \u2514\u2500\u2500 AboutPage.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 /assets\n    \u2514\u2500\u2500 /images\n</code></pre> MyLayout.jsSidebar.jsHeader.jsFooter.jsindex.jsApp.jsx <p>This component serves as the main layout, integrating the header, sidebar, and footer.</p> <pre><code>// MyLayout.js\nimport React from 'react';\nimport { Layout } from 'antd';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst { Content } = Layout;\n\nconst MyLayout = ({ children }) =&gt; {\n    return (\n        &lt;Layout style={{ minHeight: '100vh' }}&gt;\n            &lt;Sidebar /&gt;\n            &lt;Layout&gt;\n                &lt;Header /&gt;\n                &lt;Content style={{ margin: '24px 16px 0' }}&gt;\n                &lt;div style={{ padding: 24, background: '#fff', minHeight: 360 }}&gt;\n                    {children}\n                &lt;/div&gt;\n                &lt;/Content&gt;\n                &lt;Footer /&gt;\n            &lt;/Layout&gt;\n        &lt;/Layout&gt;\n    );\n};\n\nexport default MyLayout;\n</code></pre> <p>This component handles the sidebar navigation.</p> <pre><code>// Sidebar.js\nimport React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Sider } = Layout;\n\nconst Sidebar = () =&gt; {\n    return (\n        &lt;Sider width={200} style={{ background: '#fff' }}&gt;\n            &lt;Menu mode=\"inline\" defaultSelectedKeys={['1']} style={{ height: '100%', borderRight: 0 }}&gt;\n                &lt;Menu.Item key=\"1\"&gt;\n                    &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                &lt;Menu.Item key=\"2\"&gt;\n                    &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                {/* Add more menu items as needed */}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <pre><code>// Header.js\nimport React from 'react';\nimport { Layout } from 'antd';\n\nconst { Header } = Layout;\n\nconst CustomHeader = () =&gt; {\n    return (\n        &lt;Header style={{ background: '#fff', padding: 0 }}&gt;\n            &lt;h1 style={{ margin: '0', padding: '0 20px' }}&gt;My Application&lt;/h1&gt;\n            {/* Add more header content, like user info or navigation */}\n        &lt;/Header&gt;\n    );\n};\n\nexport default CustomHeader;\n</code></pre> <pre><code>// Footer.js\nimport React from 'react';\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nconst CustomFooter = () =&gt; {\n    return (\n        &lt;Footer style={{ textAlign: 'center' }}&gt;\n            My Application \u00a92024 Created by Your Name\n        &lt;/Footer&gt;\n    );\n};\n\nexport default CustomFooter;\n</code></pre> <p>This file will help simplify imports.</p> <pre><code>// index.js\nexport { default } from './MyLayout';\nexport { default as Sidebar } from './Sidebar';\nexport { default as Header } from './Header';\nexport { default as Footer } from './Footer';\n</code></pre> <p>Here's how you can integrate your modular layout in <code>App.js</code>:</p> <pre><code>// App.js\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport MyLayout from \"./components/Layout\"; // Adjust the path as necessary\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\n\nconst App = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;MyLayout&gt;\n                &lt;Routes&gt;\n                    &lt;Route path=\"/\" element={&lt;HomePage /&gt;} /&gt;\n                    &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n                    {/* Add more routes as needed */}\n                &lt;/Routes&gt;\n            &lt;/MyLayout&gt;\n        &lt;/Router&gt;\n    );\n};\n\nexport default App;\n</code></pre> Benefits of This Structure <ol> <li>Modularity: Each part of the layout (header, sidebar, footer) is encapsulated in its own component, making it easier to manage and update.</li> <li>Reusability: You can reuse these components in different parts of your application as needed.</li> <li>Scalability: As your application grows, you can easily add more features or components without cluttering the main layout file.</li> <li>Customization: Each component can have its own styles and logic, allowing for easy customization.</li> </ol> <p>This modular approach will help maintain a clean codebase as your application scales, making it easier to manage and enhance features over time.</p>"},{"location":"office/redux/zustland-store/","title":"Zustland Store","text":""},{"location":"office/redux/zustland-store/#zustand-store","title":"Zustand Store","text":"<p>Sure! Let\u2019s break down a Zustand store, including the predefined functions and the initial data structure. Here\u2019s a structured view:</p>"},{"location":"office/redux/zustland-store/#breakdown-of-a-zustand-store","title":"Breakdown of a Zustand Store","text":"<ol> <li> <p>Store Structure</p> <p>A Zustand store typically consists of:</p> <ul> <li>Initial State: Defines the starting values for your state.</li> <li>Actions: Functions that modify the state.</li> <li>Selectors (optional): Functions to derive specific state values.</li> </ul> </li> <li> <p>Predefined Functions and Classes</p> <p>Zustand doesn\u2019t have predefined classes like some other libraries, but here are the key elements and functions you typically work with:</p> <ul> <li> <p><code>create</code>:</p> </li> <li> <p>Function used to create a store.     Takes a function as an argument that defines the state and actions.</p> </li> <li> <p><code>set</code>:</p> </li> <li> <p>Function provided in the store creation callback that allows you to update the state.     Can be used to set new state directly or take a function to calculate the new state based on the current state.</p> </li> <li> <p><code>get</code> (optional):</p> </li> <li> <p>Allows access to the current state directly within your actions or selectors, though it's less commonly used in simple scenarios.</p> </li> <li> <p>Selectors:</p> </li> <li> <p>While not a separate function, you can create selectors within your store for optimized state access.</p> </li> </ul> </li> </ol>"},{"location":"office/redux/zustland-store/#example-of-a-store-breakdown","title":"Example of a Store Breakdown","text":"ExampleBreakdown of the Example <pre><code>// src/store.js\nimport create from \"zustand\";\n\n// Create a store\nconst useStore = create((set) =&gt; ({\n    // Initial State\n    count: 0, // Initial data\n    user: null, // Example of another piece of state\n\n    // Actions\n    increase: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n    decrease: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n\n    // Action with parameter\n    setUser: (user) =&gt; set({ user }), // Sets the user state\n}));\n</code></pre> <ol> <li> <p>Initial State:</p> <ul> <li><code>count: 0</code>: Initializes the count to zero.</li> <li><code>user: null</code>: Initializes a user state to <code>null</code>, which can be used to store user information later.</li> </ul> </li> <li> <p>Actions:</p> <ul> <li><code>increase</code>: Increases the count by 1. Uses the <code>set</code> function to update the state.</li> <li><code>decrease</code>: Decreases the count by 1.</li> <li><code>setUser</code>: Takes a <code>user</code> parameter and sets the <code>user</code> state. This is an example of a dynamic action that accepts input.</li> </ul> </li> </ol> Summary of Key Components Component Description <code>create</code> Function to create a store. Initial State Key-value pairs defining the state variables. <code>set</code> Function to update state; accepts either a new state object or a function to compute the new state. Actions Functions that modify state (e.g., <code>increase</code>, <code>decrease</code>, <code>setUser</code>). <code>get</code> Optional function to get the current state. Selectors Functions to derive specific state values (optional)."},{"location":"office/redux/zustland-store/#conclusion","title":"Conclusion","text":"<p>Understanding the breakdown of a Zustand store helps you effectively manage state in your applications. You have an initial state, actions to modify that state, and the tools (<code>create</code>, <code>set</code>, and optionally <code>get</code>) to work with the store efficiently!</p>"},{"location":"office/redux/zustland/","title":"Zustland","text":""},{"location":"office/redux/zustland/#zustland","title":"Zustland","text":"<p>To master Zustand and effectively manage state in your React applications, it's helpful to understand several key concepts related to creating and using stores. Here\u2019s a breakdown:</p> <ol> <li> <p>Store Creation</p> <ul> <li><code>create</code> Function: This is the primary method for creating a store. It takes a function that defines the state and actions.</li> <li>State Initialization: Define the initial state directly in the store.</li> </ul> </li> <li> <p>State Management</p> <ul> <li>State Object: The state is a plain JavaScript object, which can hold various data types (numbers, strings, arrays, objects).</li> <li>Mutable vs. Immutable: Understanding how Zustand handles state updates. Zustand uses immutable patterns but allows you to work with mutable-like syntax through the <code>set</code> function.</li> </ul> </li> <li> <p>Actions</p> <ul> <li>Updating State: Actions are functions defined in your store that use the <code>set</code> method to update state. They can take parameters to allow for more dynamic updates.</li> <li>Side Effects: You can perform side effects within actions (e.g., API calls) and update the store accordingly.</li> </ul> </li> <li> <p>Selectors</p> <ul> <li>Selecting State: You can create selectors to derive specific pieces of state or to optimize performance. This reduces re-renders by only subscribing to the relevant parts of the state.</li> </ul> </li> <li> <p>Middleware</p> <ul> <li>Enhancing Stores: Zustand allows you to use middleware for logging, persisting state, or handling async actions. Familiarize yourself with built-in middleware and how to create your own.</li> </ul> </li> <li> <p>Persisting State</p> <ul> <li>Local Storage: You can persist your state across sessions using middleware that saves the state to local storage or other storage solutions.</li> </ul> </li> <li> <p>Using Multiple Stores</p> <ul> <li>Modularity: You can create multiple stores for different features or modules in your application, which helps keep your state management organized.</li> </ul> </li> <li> <p>React Integration</p> <ul> <li>Custom Hooks: Zustand is built around the concept of hooks, allowing you to easily integrate store access in functional components.   Reactivity: Understanding how Zustand triggers re-renders in components when the state changes.</li> </ul> </li> <li> <p>Typescript Support</p> <ul> <li>Type Safety: If you\u2019re using TypeScript, learn how to define types for your store\u2019s state and actions to take advantage of type safety.</li> </ul> </li> <li> <p>Debugging</p> <ul> <li>Debugging State Changes: Learn strategies to debug your Zustand store, including logging actions and state changes.</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Avoiding Unnecessary Renders: Understanding how Zustand minimizes re-renders and how to structure your state and actions to optimize performance.</li> </ul> </li> </ol> Summary Table Category Concepts Store Creation <code>create</code>, State Initialization State Management State Object, Mutable vs. Immutable Actions Updating State, Side Effects Selectors Selecting State Middleware Enhancing Stores Persisting State Local Storage Using Multiple Stores Modularity React Integration Custom Hooks, Reactivity TypeScript Support Type Safety Debugging Logging Performance Optimization Avoiding Unnecessary Renders <p>By categorizing the concepts this way, you can create a mental map to recall the key ideas related to Zustand more easily!</p>"},{"location":"research/testing/antd-datepickerIssue/","title":"antd datepicker issue","text":""},{"location":"research/testing/antd-datepickerIssue/#date-picker-issue","title":"Date Picker Issue","text":""},{"location":"research/testing/antd-datepickerIssue/#previous","title":"Previous","text":"Previous<pre><code>&lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n  &lt;Form.Item\n    name={DealFormEnum?.MATURITY_DATE}\n    label=\"Maturity Date\"\n    rules={[\n      {\n        required: true,\n        message: \"Please Select Maturity Date\",\n      },\n      {\n        validator(_, value) {\n          if (value &amp;&amp; (value.isBefore(valueDate) || value.isSame(valueDate))) {\n            return Promise.reject(\n              new Error(\"Maturity Date must be after Value Date\")\n            );\n          }\n          return Promise.resolve();\n        },\n      },\n    ]}\n  &gt;\n    &lt;DatePicker\n      placeholder=\"DD-MM-YYYY\"\n      format=\"DD-MM-YYYY\"\n      // disabled\n      disabledDate={(current) =&gt;\n        (current &amp;&amp; current.isBefore(dayjs(), \"day\")) ||\n        (valueDate &amp;&amp; current.isBefore(valueDate, \"day\"))\n      }\n      onChange={() =&gt; {\n        handleMaturityDateChange();\n        // handleUpdate();\n      }}\n      style={{ width: \"100%\" }}\n    /&gt;\n  &lt;/Form.Item&gt;\n&lt;/Col&gt;\n</code></pre>"},{"location":"research/testing/antd-datepickerIssue/#changes","title":"Changes","text":"<pre><code>\ud83d\udd25 Validator Triggered with value: Wed, 16 Jul 2025 10:50:22 GMT\nand valueDate: Wed, 16 Jul 2025 10:38:57 GMT\n</code></pre> <p>And yet the validation is not failing, even though <code>value.isSame(valueDate)</code> should be <code>false</code>, this points to a subtle but critical issue:</p> <pre><code>&lt;Col xs={24} sm={12} md={12} lg={12} xl={12}&gt;\n  &lt;Form.Item\n    name={DealFormEnum?.MATURITY_DATE}\n    // ADDED DEPENDENCIES\n    dependencies={[DealFormEnum?.VALUE_DATE]}\n    label=\"Maturity Date\"\n    rules={[\n      {\n        required: true,\n        message: \"Please Select Maturity Date\",\n      },\n      {\n        validator(_, value) {\n          if (\n            value &amp;&amp;\n            (value.isBefore(valueDate, \"day\") || value.isSame(valueDate, \"day\"))\n          ) {\n            return Promise.reject(\n              new Error(\"Maturity Date must be after Value Date\")\n            );\n          }\n          return Promise.resolve();\n        },\n      },\n    ]}\n  &gt;\n    &lt;DatePicker\n      placeholder=\"DD-MM-YYYY\"\n      format=\"DD-MM-YYYY\"\n      // disabled\n      disabledDate={(current) =&gt;\n        (current &amp;&amp; current.isBefore(dayjs(), \"day\")) ||\n        (valueDate &amp;&amp; current.isBefore(valueDate, \"day\"))\n      }\n      onChange={() =&gt; {\n        handleMaturityDateChange();\n        // ADDED THIS: for we can:\n        form.validateFields([DealFormEnum?.MATURITY_DATE]);\n        // handleUpdate();\n      }}\n      // EITHER ADD onChange or onOk\n      //   onOk={() =&gt; {\n      //     form.validateFields([DealFormEnum?.MATURITY_DATE]);\n      //   }}\n      style={{ width: \"100%\" }}\n    /&gt;\n  &lt;/Form.Item&gt;\n&lt;/Col&gt;\n</code></pre>"},{"location":"research/testing/antd-datepickerIssue/#youre-comparing-date-time-not-just-the-date","title":"\u26a0\ufe0f You're Comparing Date + Time, Not Just the Date","text":"<p><code>dayjs()</code> includes time by default. So:</p> <ul> <li><code>10:38:57</code> and <code>10:50:22</code> are on the same calendar day, but not the same moment.</li> <li><code>value.isSame(valueDate)</code> is false if their timestamps differ by even 1 second.</li> </ul>"},{"location":"research/testing/antd-datepickerIssue/#the-fix-compare-only-the-calendar-date-not-full-timestamp","title":"\u2705 The Fix: Compare only the calendar date, not full timestamp","text":"<p>Use:</p> <pre><code>value.isSame(valueDate, \"day\");\n</code></pre> <p>and</p> <pre><code>value.isBefore(valueDate, \"day\");\n</code></pre> <p>\u2705 Updated Validator Code</p> <pre><code>validator(_, value) {\n  const valueDate = form.getFieldValue(DealFormEnum?.VALUE_DATE);\n\n  console.log(\"\ud83d\udd25 Validator Triggered with value:\", value?.toString());\n  console.log(\"\ud83d\udcc5 Comparing as 'day' only:\",\n    \"value:\", value?.format('DD-MM-YYYY'),\n    \"valueDate:\", valueDate?.format('DD-MM-YYYY')\n  );\n\n  if (\n    value &amp;&amp;\n    valueDate &amp;&amp;\n    // UPDATED: added day\n    (value.isBefore(valueDate, 'day') || value.isSame(valueDate, 'day'))\n  ) {\n    return Promise.reject(new Error(\"Maturity Date must be after Value Date\"));\n  }\n\n  return Promise.resolve();\n}\n</code></pre> \u2705 Why this works <ul> <li>The <code>'day'</code> precision in <code>.isBefore()</code> and <code>.isSame()</code> compares just calendar dates, ignoring the time portion.</li> <li>This avoids confusing edge cases where both dates are on the same day but have different times, as in your logs.</li> </ul> <p>\u2705 Bonus: You can simplify the logic</p> <p>If you're always comparing by <code>'day'</code>, it\u2019s better to store and process all dates in date-only format (e.g., strip time using <code>.startOf('day')</code>) \u2014 but using <code>'day'</code> in comparisons is already sufficient for most UIs.</p>"},{"location":"research/testing/arrow-mistakes/","title":"Arrow Mistake","text":""},{"location":"research/testing/arrow-mistakes/#arrow-mistake","title":"Arrow Mistake","text":"<p>Let\u2019s go deep into arrow functions and this, breaking down exactly when and why developers get confused, and how to mentally model it so you don\u2019t fall into the same traps.</p>"},{"location":"research/testing/arrow-mistakes/#what-makes-arrow-functions-special","title":"\u2705 What Makes Arrow Functions Special?","text":"<p>Arrow functions were introduced in ES6, and one of their most powerful features is:</p> <ul> <li>They do not bind their own <code>this</code>.</li> <li>Instead, they lexically inherit <code>this</code> from the surrounding code (where they\u2019re defined).</li> </ul> <p>This behavior is very different from normal functions (<code>function foo() {}</code>), which get their own <code>this</code> depending on how they're called.</p>"},{"location":"research/testing/arrow-mistakes/#mental-model","title":"\ud83e\udde0 Mental Model","text":"<p>Arrow function says:</p> <p>\ud83d\udc49 \u201cI don\u2019t care how I\u2019m called. I\u2019ll just use <code>this</code> from where I was born (lexical scope).\u201d</p>"},{"location":"research/testing/arrow-mistakes/#deep-dive-where-developers-get-confused","title":"\ud83e\uddea Deep Dive: Where Developers Get Confused","text":""},{"location":"research/testing/arrow-mistakes/#1-using-arrow-functions-as-object-methods","title":"\u274c 1. Using Arrow Functions as Object Methods","text":"<pre><code>const user = {\n  name: \"Alice\",\n  greet: () =&gt; {\n    console.log(this.name);\n  },\n};\n\nuser.greet(); // \u274c undefined\n</code></pre> <p>Why it fails:</p> <ul> <li><code>this</code> here does not refer to <code>user</code>.</li> <li>It refers to the enclosing lexical scope \u2014 likely the global scope or module scope, where <code>this.name</code> is <code>undefined</code>.</li> </ul> <p>\u2705 Fix: Use a regular function</p> <pre><code>const user = {\n  name: \"Alice\",\n  greet() {\n    console.log(this.name); // \u2705 \"Alice\"\n  },\n};\n</code></pre>"},{"location":"research/testing/arrow-mistakes/#2-forgetting-arrow-function-captures-this-at-definition","title":"\u274c 2. Forgetting Arrow Function Captures <code>this</code> at Definition","text":"<pre><code>function Timer() {\n  this.seconds = 0;\n\n  setInterval(() =&gt; {\n    this.seconds++;\n    console.log(this.seconds);\n  }, 1000);\n}\n\nnew Timer(); // \u2705 Works\n</code></pre> <p>But with a regular function:</p> <pre><code>function Timer() {\n  this.seconds = 0;\n\n  setInterval(function () {\n    this.seconds++; // \u274c 'this' is the global object or undefined in strict mode\n  }, 1000);\n}\n</code></pre> <p>Fix: Use arrow function to inherit <code>this</code> from constructor.</p>"},{"location":"research/testing/arrow-mistakes/#3-confusing-this-with-closure-variables","title":"\u274c 3. Confusing <code>this</code> with Closure Variables","text":"<p>Developers sometimes assume <code>this</code> behaves like a closure variable, but they\u2019re not the same.</p> <pre><code>function outer() {\n  this.name = \"outer\";\n\n  const arrow = () =&gt; {\n    console.log(this.name); // \u2705 \"outer\"\n  };\n\n  function regular() {\n    console.log(this.name); // \u274c depends on how called\n  }\n\n  arrow();\n  regular(); // likely undefined or window.name\n}\n</code></pre>"},{"location":"research/testing/arrow-mistakes/#theory","title":"Theory","text":""},{"location":"research/testing/arrow-mistakes/#arrow-functions-and-this","title":"\ud83e\udde0 Arrow Functions and <code>this</code>","text":"<p>Arrow functions do not have their own <code>this</code>. Instead, they inherit <code>this</code> from their surrounding lexical context \u2014 the place where the arrow function was defined.</p> <p>So <code>this</code> is lexically bound, not dynamically bound.</p> Example<pre><code>const obj = {\n  name: \"Alice\",\n  greet: function () {\n    const inner = () =&gt; {\n      console.log(this.name);\n    };\n    inner();\n  },\n};\n\nobj.greet(); // Output: Alice\n</code></pre> <p>\u27a1\ufe0f Here, <code>inner</code> is an arrow function. It doesn't have its own <code>this</code>, so it uses the <code>this</code> from the <code>greet</code> function, which is <code>obj</code>.</p>"},{"location":"research/testing/arrow-mistakes/#what-does-lexically-bound-mean","title":"\ud83d\udd0d What does \"Lexically Bound\" mean?","text":"<p>To say \"<code>this</code> is lexically bound\" means:</p> <p>The value of <code>this</code> is determined by where the function is written in the code, not by how or where it is called.</p> <p>Let\u2019s break this down.</p>"},{"location":"research/testing/arrow-mistakes/#lexical-scope-vs-dynamic-scope","title":"\ud83e\udde0 Lexical Scope vs Dynamic Scope","text":"<p>JavaScript uses lexical scoping, which means:</p> <ul> <li>Lexical refers to the structure of the code \u2014 where things are written, not when or how they run.</li> <li>So a lexically scoped variable/function looks \"up\" the code hierarchy at the place it was defined, not called.</li> </ul>"},{"location":"research/testing/arrow-mistakes/#regular-function-this-is-dynamically-bound","title":"\ud83d\udd01 Regular Function: <code>this</code> is dynamically bound","text":""},{"location":"research/testing/arrow-mistakes/#arrow-function-this-is-lexically-bound","title":"\u2705 Arrow Function: <code>this</code> is lexically bound","text":""},{"location":"research/testing/arrow-mistakes/#real-world-example-to-understand-lexical-binding","title":"\ud83e\uddea Real-World Example to Understand Lexical Binding","text":""},{"location":"research/testing/arrow-mistakes/#using-regular-function-fails","title":"\u274c Using Regular Function (fails):","text":"<pre><code>function Person() {\n  this.age = 0;\n\n  setInterval(function () {\n    this.age++;\n    console.log(this.age);\n  }, 1000);\n}\n\nnew Person();\n</code></pre> <p>Here, <code>this</code> inside <code>setInterval</code> is not the instance of <code>Person</code> \u2014 it's the global object or <code>undefined</code>.</p>"},{"location":"research/testing/arrow-mistakes/#using-arrow-function-lexically-bound-this-works","title":"\u2705 Using Arrow Function (lexically bound <code>this</code> works!):","text":"<pre><code>function Person() {\n  this.age = 0;\n\n  setInterval(() =&gt; {\n    this.age++; // \u2190 Arrow function gets 'this' from Person\n    console.log(this.age);\n  }, 1000);\n}\n\nnew Person();\n</code></pre> <p>Now, the arrow function inherits <code>this</code> from the Person function, where it was defined. That's lexical binding in action.</p>"},{"location":"research/testing/arrow-mistakes/#common-mistakes-summary","title":"\u26a0\ufe0f Common Mistakes Summary","text":"Mistake Why it happens Fix Using arrow functions as object methods They inherit <code>this</code> from outer scope, not the object Use regular method syntax Expecting arrow functions to dynamically bind <code>this</code> Arrow functions don\u2019t rebind Use regular function if dynamic binding is needed Forgetting regular functions in callbacks (like <code>setTimeout</code>) lose <code>this</code> They have their own <code>this</code> Use arrow functions in callbacks Confusing closures with <code>this</code> <code>this</code> is not lexical in regular functions Use arrow functions or bind carefully"},{"location":"research/testing/arrow-mistakes/#rule-of-thumb","title":"\ud83d\udd01 Rule of Thumb","text":"<ul> <li>If you need <code>this</code> to refer to the surrounding context \u2192 use an arrow function.</li> <li>If you need <code>this</code> to be dynamic (based on how function is called) \u2192 use a regular function.</li> </ul>"},{"location":"research/testing/arrow-mistakes/#best-practices","title":"\u2705 Best Practices","text":"<ol> <li> <p>\u2705 Use arrow functions for:</p> <ul> <li>Callbacks (<code>.map</code>, <code>.filter</code>, <code>setTimeout</code>, etc.)</li> <li>React event handlers in function or class components</li> <li>Methods when using class fields (<code>class MyComponent { handler = () =&gt; {} }</code>)</li> </ul> </li> <li> <p>\u274c Avoid using arrow functions for:</p> <ul> <li>Object methods that depend on <code>this</code> being the object</li> <li>Situations where you intentionally want dynamic <code>this</code></li> </ul> </li> </ol>"},{"location":"research/testing/arrow-mistakes/#final-summary","title":"Final Summary","text":"Statement True/False Lexical <code>this</code> is bound based on where <code>{}</code> curly braces appear \u274c False Lexical <code>this</code> is bound based on where the arrow function is defined \u2705 True Arrow functions inherit <code>this</code> from their enclosing function or scope \u2705 True Block <code>{}</code> creates a new <code>this</code> context \u274c False"},{"location":"research/testing/arrow-vs-function/","title":"arrow","text":""},{"location":"research/testing/arrow-vs-function/#arrow-vs-function","title":"Arrow vs Function","text":"<p>In React, both of these syntaxes are used to define function components, but they differ slightly in how they are declared. Here's a breakdown of the differences:</p>"},{"location":"research/testing/arrow-vs-function/#1-syntax","title":"1. Syntax","text":"<p>Traditional Function Declaration:</p> <pre><code>function Component() {\n  return &lt;div&gt;Hello&lt;/div&gt;;\n}\n</code></pre> <p>Arrow Function Assigned to a <code>const</code>:</p> <pre><code>const Component = () =&gt; {\n  return &lt;div&gt;Hello&lt;/div&gt;;\n};\n</code></pre>"},{"location":"research/testing/arrow-vs-function/#2-hoisting","title":"2. Hoisting","text":"<ul> <li> <p><code>function Component()</code> is hoisted:</p> <ul> <li>You can use it before it's defined in the code.</li> </ul> </li> <li> <p><code>const Component = () =&gt; {}</code> is not hoisted:</p> <ul> <li>You must define it before use.</li> </ul> </li> </ul> Example<pre><code>console.log(Test1()); // works\nfunction Test1() {\n  return \"hello\";\n}\n\nconsole.log(Test2()); // ReferenceError\nconst Test2 = () =&gt; \"hello\";\n</code></pre>"},{"location":"research/testing/arrow-vs-function/#3-this-binding","title":"3. <code>this</code> Binding","text":"<ul> <li>Function declarations (<code>function Component() {}</code>) have their own <code>this</code> context (though this is less relevant in modern React functional components).</li> <li>Arrow functions inherit <code>this</code> from the enclosing scope, which is helpful when dealing with callbacks or class methods (less of an issue with React hooks).</li> </ul>"},{"location":"research/testing/arrow-vs-function/#4-readability-style","title":"4. Readability &amp; Style","text":"<ul> <li><code>const Component = () =&gt; {}</code> is often more concise and more consistent with modern JavaScript (ES6+) practices.</li> <li>Many teams prefer arrow functions for uniformity, especially in codebases using a lot of React Hooks and functional programming patterns.</li> </ul>"},{"location":"research/testing/arrow-vs-function/#5-performance","title":"5. Performance","text":"<p>There is no significant performance difference between the two in React. The compiled output from Babel or TypeScript is virtually the same.</p>"},{"location":"research/testing/arrow-vs-function/#which-should-you-use","title":"\u2705 Which Should You Use?","text":"<p>Use <code>const Component = () =&gt; {}</code> unless you have a specific reason to use function declaration. Here's why:</p> <ul> <li>Consistent with modern JavaScript (ES6+).</li> <li>Prevents accidental re-declarations (since <code>const</code> can't be reassigned).</li> <li>Matches the style of React Hooks (which are also often declared as arrow functions).</li> <li>Easier for closures and inlining functions within components.</li> </ul>"},{"location":"research/testing/arrow-vs-function/#when-might-you-use-function-component","title":"\ud83d\udd04 When Might You Use <code>function Component()</code>?","text":"<ul> <li>If you want the function to be hoisted.</li> <li>When defining methods inside classes (not common in modern React).</li> <li>For very simple or traditional examples, such as in tutorials or documentation.</li> </ul>"},{"location":"research/testing/arrow-vs-function/#summary","title":"Summary","text":"Feature <code>function Component()</code> <code>const Component = () =&gt; {}</code> Hoisting \u2705 Yes \u274c No <code>this</code> binding Has own <code>this</code> Inherits <code>this</code> Readability More verbose More concise Consistency (ES6+) Less modern Preferred in modern React React community norm Less common now \u2705 Most common"},{"location":"research/testing/arrow-vs-function/#example-with-mnemonic","title":"Example with mnemonic","text":"<p>Great! Let\u2019s go through some simple examples and then I\u2019ll give you a mnemonic to help you remember when to use each style.</p>"},{"location":"research/testing/arrow-vs-function/#1-modern-react-hooks-most-real-apps","title":"\u2705 1. Modern React (Hooks, most real apps)","text":"<p>You usually want to use:</p> <pre><code>const Component = () =&gt; {\n  return &lt;div&gt;Hello&lt;/div&gt;;\n};\n</code></pre> \ud83d\udd0d Why? <ul> <li>Works great with hooks</li> <li>You don\u2019t need <code>this</code></li> <li>Arrow functions are shorter and cleaner</li> </ul>"},{"location":"research/testing/arrow-vs-function/#mnemonic-for-arrow-function-components","title":"\ud83e\udde0 Mnemonic for Arrow Function Components:","text":"<p>\"C.A.F.E.\" \u2192 Const Arrow Function Everywhere</p> <p>\u2705 Use <code>const</code> + arrow function for most components, like a \u201cmodern JavaScript caf\u00e9\u201d:</p> <ul> <li>Const</li> <li>Arrow</li> <li>Function</li> <li>Everywhere</li> </ul>"},{"location":"research/testing/arrow-vs-function/#2-when-to-use-function-component","title":"\u26a0\ufe0f 2. When to Use <code>function Component()</code>","text":"<p>You might use:</p> <pre><code>function Component() {\n  return &lt;div&gt;Hello&lt;/div&gt;;\n}\n</code></pre> \ud83d\udd0d When? <ul> <li>You need hoisting</li> <li>You're following a legacy or class-style pattern</li> <li>Writing simple prototypes or examples</li> </ul>"},{"location":"research/testing/arrow-vs-function/#mnemonic-for-function-declarations","title":"\ud83e\udde0 Mnemonic for Function Declarations:","text":"<p>\"F.O.R.M.\" \u2192 Use Functions Only when you need Reference Mobility (hoisting)</p> <ul> <li>Function</li> <li>Only when</li> <li>Reference (hoisting)</li> <li>Matters</li> </ul>"},{"location":"research/testing/arrow-vs-function/#side-by-side-example","title":"\ud83d\udca1 Side-by-Side Example:","text":"<pre><code>// \u2705 Preferred (modern style)\nconst Header = () =&gt; {\n  return &lt;h1&gt;Welcome&lt;/h1&gt;;\n};\n\n// \u26a0\ufe0f Still valid, but less common\nfunction Footer() {\n  return &lt;footer&gt;Goodbye&lt;/footer&gt;;\n}\n</code></pre>"},{"location":"research/testing/arrow-vs-function/#summary-table","title":"Summary Table","text":"Style Use When... Mnemonic <code>const Component = () =&gt;</code> Modern React, hooks, cleaner style C.A.F.E. <code>function Component()</code> You need hoisting (rare) F.O.R.M."},{"location":"research/testing/arrow-vs-function/#visual-diagram-when-to-use-which-style","title":"Visual Diagram: When to Use Which Style","text":"<pre><code> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502    Are you using Hooks?    \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502Yes\n              \u25bc\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 Use arrow function style:  \u2502\n \u2502 const Component = () =&gt; {} \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u25b2\n              \u2502No\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 Do you need hoisting?      \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502Yes                     No\n              \u25bc                        \u25bc\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 Use function style: \u2502       \u2502 Arrow function still fine  \u2502\n \u2502 function Component()\u2502       \u2502 for consistency            \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"research/testing/arrow-vs-function/#quick-recap-with-mnemonics","title":"\ud83e\udde0 Quick Recap with Mnemonics","text":"Situation Style Mnemonic Modern React / Hooks <code>const Component = () =&gt; {}</code> C.A.F.E. Need hoisting / legacy <code>function Component()</code> F.O.R.M."},{"location":"research/testing/arrow-vs-function/#mini-quiz-what-would-you-choose","title":"\ud83d\udcdd Mini Quiz: What Would You Choose?","text":"<ol> <li> <p>You\u2019re building a component using <code>useState</code> and <code>useEffect</code>.</p> <p>\u27a4 What style should you use?</p> <ul> <li>\u2705 Answer: <code>const Component = () =&gt; {}</code></li> <li>\ud83d\udca1 Why? Works better with hooks \u2014 use C.A.F.E.</li> </ul> </li> <li> <p>You need to use a component before it\u2019s defined in the code.</p> <p>\u27a4 What style should you use?</p> <ul> <li>\u2705 Answer: <code>function Component()</code></li> <li>\ud83d\udca1 Why? Because F.O.R.M. \u2014 hoisting is needed</li> </ul> </li> <li> <p>You\u2019re writing code for a modern React app using Vite or Next.js.</p> <p>\u27a4 Preferred style?</p> <ul> <li>\u2705 Answer: <code>const Component = () =&gt; {}</code></li> <li>\ud83d\udca1 Standard in most real-world codebases</li> </ul> </li> <li> <p>You like using <code>this</code> inside your component.</p> <p>\u27a4 Which style supports that?</p> <ul> <li>\u2705 Answer: <code>function Component()</code></li> <li>\ud83d\udca1 Arrow functions don\u2019t have their own <code>this</code></li> </ul> </li> </ol>"},{"location":"research/testing/arrow-vs-function/#cheatsheet-this-in-javascript","title":"Cheatsheet: <code>this</code> in JavaScript","text":"Function Type <code>this</code> Binding How to Remember Common Use Case Function Declaration<code>function myFunc() {}</code> <code>this</code> is dynamic \u2192 depends on how it's called \"Figure it out at call time\" Class methods, older code Arrow Function<code>const myFunc = () =&gt; {}</code> <code>this</code> is lexical \u2192 inherited from where it\u2019s defined \"Adopt <code>this</code> from surrounding scope\" Callbacks, closures, hooks"},{"location":"research/testing/arrow-vs-function/#visual-memory-hook","title":"\ud83e\udde0 Visual Memory Hook","text":"<pre><code>// \u274c Classic function - dynamic this\nfunction sayHi() {\n  console.log(this.name);\n}\n\n// \u2705 Arrow function - inherits this\nconst sayHi = () =&gt; {\n  console.log(this.name);\n};\n</code></pre> <ul> <li>\ud83d\udd01 function = \"Who called me?\"</li> <li>\ud83c\udfaf arrow = \"Where was I born?\"</li> </ul>"},{"location":"research/testing/cancelling-rtkquery-api/","title":"cancelling-rtkquery","text":""},{"location":"research/testing/cancelling-rtkquery-api/#cancelling-rtk-query-api","title":"Cancelling RTK Query API","text":"<p>does rtk query automatically cancel the api if component unmounts or i have have do it</p> <p>Yes, RTK Query automatically cancels in-flight API requests when a component that initiated the query unmounts or the query parameters change, as long as you're using the built-in hooks like <code>useQuery</code> or <code>useMutation</code>.</p> \u2705 What RTK Query Does Automatically: <ol> <li> <p>Cancels ongoing requests when:</p> <ul> <li>The component unmounts</li> <li>The query args change</li> <li>The same query is already in progress elsewhere (deduplication)</li> </ul> </li> <li> <p>Uses <code>AbortController</code> under the hood to cancel fetch requests.</p> </li> </ol>"},{"location":"research/testing/cancelling-rtkquery-api/#example","title":"\ud83d\udce6 Example","text":"<pre><code>const { data, isLoading } = api.useGetUserQuery(userId);\n</code></pre> <p>If <code>userId</code> changes quickly (e.g. rapid navigation or input), or the component unmounts, RTK Query will cancel the previous request automatically.</p>"},{"location":"research/testing/cancelling-rtkquery-api/#caveat","title":"\u26a0\ufe0f Caveat:","text":"<p>This automatic cancellation works only if:</p> <ul> <li>You're using the auto-generated hooks from <code>createApi</code></li> <li>You're not manually calling <code>fetchBaseQuery</code> outside the RTK Query lifecycle</li> </ul>"},{"location":"research/testing/cancelling-rtkquery-api/#how-it-works-behind-the-scenes","title":"\ud83e\uddea How It Works Behind the Scenes:","text":"<p>RTK Query uses an internal <code>AbortController</code> with <code>fetchBaseQuery</code>, which aborts stale requests to prevent race conditions and unnecessary network calls.</p>"},{"location":"research/testing/cancelling-rtkquery-api/#if-you-use-initiate-manually-eg-in-redux-thunk-or-dispatch","title":"\ud83d\udee0 If You Use <code>initiate()</code> Manually (e.g., in Redux thunk or dispatch):","text":"<p>You need to manually handle cancellation:</p> <pre><code>const promise = dispatch(api.endpoints.getUser.initiate(userId));\n\n// Later\npromise.abort();\n</code></pre>"},{"location":"research/testing/cancelling-rtkquery-api/#tldr","title":"\u2705 TL;DR","text":"Use Case Auto-Cancels? <code>useQuery</code> hook \u2705 Yes <code>useMutation</code> hook \u2705 Yes <code>dispatch(initiate(...))</code> \u274c No (you handle it)"},{"location":"research/testing/cookie/","title":"cookie","text":""},{"location":"research/testing/cookie/#cookie","title":"Cookie","text":""},{"location":"research/testing/cookie/#overview","title":"Overview","text":""},{"location":"research/testing/cookie/#what-does-credentials-include-mean","title":"What does <code>credentials: 'include'</code> mean?","text":"<p>It means:</p> <p>\"Always send cookies with the request, even when you're talking to a different website (server).\"</p>"},{"location":"research/testing/cookie/#imagine-this","title":"Imagine this:","text":"<p>You log into a website (like a dashboard) and it saves a cookie in your browser so it knows who you are.</p> <p>Now, when the app tries to talk to a server (like <code>api.example.com</code>) to get your data, it needs to send that cookie so the server knows you're logged in.</p> <p>But browsers don\u2019t send cookies automatically to other websites, unless you say so.</p>"},{"location":"research/testing/cookie/#thats-where-credentials-include-comes-in","title":"That\u2019s where <code>credentials: 'include'</code> comes in:","text":"<p>It says:</p> <p>\"Hey browser, even though this server is on another domain, send the login cookie with the request.\"</p> <p>Without it, the server won't know who you are \u2014 and you might get logged out or get an error.</p>"},{"location":"research/testing/cookie/#summary","title":"Summary:","text":"<ul> <li>It's like bringing your ID when visiting another building.</li> <li>Without credentials: 'include' = you get there, but they don\u2019t know who you are.</li> <li>With it = you get there, and they recognize you.</li> </ul>"},{"location":"research/testing/cookie/#visual-diagram","title":"Visual Diagram","text":"\ud83e\udde0 In Technical Terms: <ul> <li>Cookie = ID badge</li> <li>Browser = You</li> <li>Frontend = Building A</li> <li>Backend = Building B</li> <li><code>credentials: 'include'</code> = Telling the browser to bring the ID with the request</li> </ul> \ud83c\udfe2 Imagine This Setup: <ul> <li>You work in Building A (your frontend app).</li> <li>Your files and information are stored in Building B (the backend server).</li> <li>To prove you're an employee, you have an ID badge (a cookie or token saved after login).</li> </ul> Scenario 1: Without <code>credentials: 'include'</code> <ul> <li>\ud83d\udeb6 You walk from Building A to Building B</li> <li>\ud83d\uded1 But you forget your ID badge (because <code>credentials</code> were not included)</li> <li>\u274c Security at Building B says: \u201cSorry, I don\u2019t know who you are.\u201d</li> </ul> Scenario 2: With <code>credentials: 'include'</code> <ul> <li>\ud83d\udeb6 You walk from Building A to Building B</li> <li>\u2705 This time you bring your ID badge (<code>credentials: 'include'</code>)</li> <li>\ud83d\udc4d Security scans it and says: \u201cWelcome back! Here's your data.\u201d</li> </ul>"},{"location":"research/testing/general-vs-promise-callback/","title":"General vs Promise Callback","text":""},{"location":"research/testing/general-vs-promise-callback/#general-vs-promise-based-callback","title":"General vs Promise Based Callback","text":"<p>Great question! Yes \u2014 when you use <code>.then()</code> with the Fetch API, you're working with callbacks, but specifically within the Promise pattern.</p>"},{"location":"research/testing/general-vs-promise-callback/#so-is-then-a-callback","title":"So, is <code>.then()</code> a callback?","text":"<ul> <li>The function you pass into <code>.then()</code> is a callback function.</li> <li>It's executed when the Promise is fulfilled (i.e. the asynchronous operation completes successfully).</li> </ul>"},{"location":"research/testing/general-vs-promise-callback/#example","title":"Example:","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n  .then((response) =&gt; response.json()) // &lt;-- callback function\n  .then((data) =&gt; {\n    console.log(\"Post data:\", data); // &lt;-- another callback\n  })\n  .catch((error) =&gt; {\n    console.error(\"Fetch error:\", error); // &lt;-- error handling callback\n  });\n</code></pre> <p>Here:</p> <ul> <li><code>response =&gt; response.json()</code> is a callback function passed to <code>.then()</code>.</li> <li><code>data =&gt; { ... }</code> is another callback function passed to the next <code>.then()</code>.</li> </ul>"},{"location":"research/testing/general-vs-promise-callback/#in-short","title":"\ud83d\udd01 In Short:","text":"Concept Used In Description Callback General JS A function passed to another function .then(callback) Promises Callback runs when the promise resolves <p>Great! Let's compare both versions \u2014 first using <code>.then()</code> with callbacks, and then using <code>async/await</code>, which internally still works with Promises but reads more like synchronous code.</p> <p>Using <code>.then()</code> (Callback Style)</p> <pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n  .then((response) =&gt; response.json()) // callback when fetch succeeds\n  .then((data) =&gt; {\n    console.log(\"Post data:\", data); // callback when JSON is parsed\n  })\n  .catch((error) =&gt; {\n    console.error(\"Fetch error:\", error); // callback if there's any error\n  });\n</code></pre> <p>Using <code>async/await</code> (Modern Style)</p> <pre><code>async function getPost() {\n  try {\n    const response = await fetch(\n      \"https://jsonplaceholder.typicode.com/posts/1\"\n    );\n    const data = await response.json(); // wait for JSON to parse\n    console.log(\"Post data:\", data);\n  } catch (error) {\n    console.error(\"Fetch error:\", error);\n  }\n}\n\ngetPost();\n</code></pre> <p>\u2705 Why Use <code>async/await</code>?</p> Feature <code>.then()</code> <code>async/await</code> Syntax Chained/callback-based Cleaner, top-down flow Readability Harder with many steps Easier to read/maintain Error handling <code>.catch()</code> <code>try/catch</code> block <p>Both styles are valid, but <code>async/await</code> is preferred in most modern codebases due to readability \u2014 especially when multiple asynchronous operations are involved.</p> <p>Great follow-up! In JavaScript, callbacks are more of a concept than a specific \"type\" \u2014 but we can categorize them based on how and where they are used.</p>"},{"location":"research/testing/general-vs-promise-callback/#types-of-callbacks-in-javascript","title":"Types of Callbacks in JavaScript","text":"<p>Here are the main categories of callbacks:</p> Type Description Example Synchronous Callbacks Called immediately during execution of the function. <code>Array.prototype.map()</code>, <code>forEach()</code> Asynchronous Callbacks Called at a later time, usually after an async operation completes. <code>fetch().then()</code>, <code>setTimeout()</code>, event listeners Error-First Callbacks Convention used in Node.js, where the first parameter is an error (if any). <code>fs.readFile('file.txt', (err, data) =&gt; { ... })</code> Event Callbacks Called when a certain event occurs. <code>button.addEventListener('click', callback)</code> Promise-based Callbacks Passed to <code>.then()</code> or <code>.catch()</code> for async operations. <code>fetch().then(response =&gt; ...)</code> Callback Hell (Nested) Multiple callbacks inside each other \u2014 hard to manage. Often occurs with older async code Custom Callbacks User-defined functions passed as arguments to other functions. You create these manually in your code"},{"location":"research/testing/general-vs-promise-callback/#examples","title":"Examples","text":"<ol> <li> <p>Synchronous Callback</p> <pre><code>[1, 2, 3].forEach(function (item) {\n  console.log(item); // runs immediately\n});\n</code></pre> </li> <li> <p>Asynchronous Callback</p> <pre><code>setTimeout(() =&gt; {\n  console.log(\"Runs after 2 seconds\");\n}, 2000);\n</code></pre> </li> <li> <p>Error-First Callback (Node.js style)</p> <pre><code>function readFile(callback) {\n  const err = null;\n  const data = \"file content\";\n  callback(err, data);\n}\n</code></pre> </li> <li> <p>Custom Callback</p> <pre><code>function doSomething(name, callback) {\n  console.log(\"Doing something with\", name);\n  callback();\n}\n\ndoSomething(\"JS\", () =&gt; console.log(\"Callback called!\"));\n</code></pre> </li> </ol>"},{"location":"research/testing/general-vs-promise-callback/#summary","title":"Summary","text":"<p>JavaScript doesn't have strict \"types\" of callbacks like in a type system, but we commonly group them by when and how they are called:</p> <ul> <li>Synchronous vs Asynchronous</li> <li>Custom vs Built-in</li> <li>Error-first (Node.js) vs regular</li> </ul>"},{"location":"research/testing/general-vs-promise-callback/#reference","title":"Reference","text":"<ul> <li>Online JS Compiler</li> </ul>"},{"location":"research/testing/js-hoisting/","title":"js hoisting","text":""},{"location":"research/testing/js-hoisting/#hoisting","title":"Hoisting","text":""},{"location":"research/testing/js-hoisting/#1-javascript-variable-hosting-hoisting","title":"1. JavaScript: Variable Hosting (Hoisting)","text":"<p>In JavaScript, \u201choisting\u201d refers to a compiler behavior in which variable and function declarations are moved to the top of their scope (before code execution).</p>"},{"location":"research/testing/js-hoisting/#how-it-works","title":"\ud83e\udde0 How It Works:","text":"<p>JavaScript parses the code before execution. During parsing, declarations are moved (hoisted), but assignments are not.</p>"},{"location":"research/testing/js-hoisting/#example","title":"Example:","text":"<pre><code>console.log(x); // undefined\nvar x = 10;\n</code></pre> <p>Behind the scenes, this is interpreted as:</p> <pre><code>var x;\nconsole.log(x); // undefined\nx = 10;\n</code></pre> \u26a0\ufe0f Key Points: <ul> <li>Only declarations are hoisted, not initializations.</li> <li><code>var</code> is hoisted with <code>undefined</code>.</li> <li><code>let</code> and <code>const</code> are hoisted but stay in a temporal dead zone (TDZ) \u2014 using them before declaration causes a <code>ReferenceError</code>.</li> </ul> <pre><code>console.log(y); // ReferenceError\nlet y = 20;\n</code></pre> <p>Function Hoisting:</p> <pre><code>greet(); // \"Hello\"\nfunction greet() {\n  console.log(\"Hello\");\n}\n</code></pre> <p>Function declarations are fully hoisted. But function expressions (e.g., <code>const greet = function() {}</code>) are not hoisted in the same way.</p>"},{"location":"research/testing/mutex/","title":"mutex","text":""},{"location":"research/testing/mutex/#mutex","title":"Mutex","text":""},{"location":"research/testing/mutex/#overview","title":"Overview","text":""},{"location":"research/testing/mutex/#what-is-mutex","title":"What is mutex?","text":"<p>A Mutex is a mutually exclusive object which protects the shared resources from simultaneous access by multiple threads or processes. It acts as a gatekeeper to a section of code allowing one thread in and blocking access to all others. This ensures that the code being controlled will only be hit by a single thread at a time.</p> <p>Mutex work on the locking mechanism, the thread which locks the mutex can only unlock it. So you must release the mutex after the use of share resources otherwise it causes serious issues.</p>"},{"location":"research/testing/mutex/#when-and-where-we-should-use-mutex","title":"When and where we should use mutex?","text":"<p>Let\u2019s understand the scenario where a mutex is required to use. So suppose you are working on a multi-threaded application. In this application, different threads share a common resource, such as global memory and peripheral devices. By global memory, I mean a piece of data whether it is a global variable or a global data structure. Also, global functions which are not thread-safe can be considered global memory.</p> <p>The main issue arises when the actual end result depends on the sequence of execution of the threads but the execution sequence is not intended by programmers. This type of scenario is called a race condition. Its effect is serious, let\u2019s understand an example of race condition.</p> <p>See the below image, in which you can see the first screen is displaying the name in expected order because no race condition is detected but for the second screen name is not displaying in proper order due to race condition.</p> <p></p> <p>It is the reason we must avoid access to the shared resource at the same time, and also we need a construct to ensure that only one thread uses the shared resource at a time. This concept is called \u201cmutual exclusion\u201c, and is a way to ensure that only one thread is allowed inside that area, using that resource.</p> <p>We can achieve mutual exclusion by mutual exclusion mechanisms like Semaphores, Readers\u2013writer locks, scheduler locks, critical section,s, or mutex ..etc.</p> <p>But here we will only discuss the mutex. In the above case screen resources (shared resources) are accessed by two threads, mutex allows only one thread at a time to access the screen resources.</p> <pre><code>//dummy code\nlock(); //locks\n\u2026..\nCritical Section\n\u2026..\nunlock(); //unlocks\n</code></pre> <p></p>"},{"location":"research/testing/mutex/#javascript-mutual-exclusion","title":"JavaScript Mutual Exclusion","text":"<p>JavaScript runtime is single-threaded, but the asynchronous nature of promises introduces the necessity to synchronize access on resources in certain use cases.</p> <p>Event handlers are asynchronous events that can benefit from mutual exclusion. Events like scroll and button click handlers can fire off multiple events within a second, but sometimes you only need the first event (and the others are undesirable). We need a way to be able to guarantee the order of the asynchronous events.</p> About async-mutex <p>async-mutex is an npm package that implements the synchronizing primitives, allowing you to control asynchronous events deterministically.</p> <p>The synchronizing primitives are Mutex and Semaphore.</p> <ul> <li>Mutex (short for mutual exclusion) is a lock. Once someone acquires the lock, any other attempts to acquire it will block until the holder of the lock releases it!</li> <li>Sempahore is similar to a Mutex except it can allow multiple people to \u2018acquire\u2019 it. This is useful for cases when you can only allow up to X asynchronous events at a time.</li> </ul> <p>You can install <code>async-mutex</code> through the following command</p> <pre><code>npm install --save async-mutex\n</code></pre> <p>Once installed, you can import the objects exposed by <code>async-mutex</code></p> <pre><code>import { Mutex, Semaphore, withTimeout } from 'async-mutex';\n</code></pre> <p>Ready? let\u2019s start exploring the usage of these synchronizing primitives. I will introduce our example first.</p> <p></p> <p></p>"},{"location":"research/testing/mutex/#expected-scenario","title":"Expected Scenario:","text":"<p>When we check the expiry during 1st authorized API call, we should make a new auth token API call and then wait for its response. Until we get the response, the remaining 5 API calls should be paused for execution. Once we get a new auth token, those remaining 5 API calls should happen with the new access token itself.</p> <p>Solution: As you can see solving this issue with debouncing will be a complex task than with mutex.</p> <p>https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#automatic-re-authorization-by-extending-fetchbasequery: This shows how to refresh the auth token.</p> <p>https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#preventing-multiple-unauthorized-errors: This shows how Mutex solves this problem. Here first time while making the API call to get the new access token, we locked mutex. Now when 5 other API calls were about to start, we checked if mutex was locked or unlocked, and if mutex was locked we paused those 5 API calls in the queue. Once the API call to get the new auth token is completed and we now have a new auth token in response, we resume those remaining 5 API calls with the new auth token.</p> <p>I hope you got the idea of mutex and how it works. Now you can use mutex wherever you feel the need. That\u2019s it for this article. Let me know in the comments if you have any questions.</p> <p> </p> \ud83e\udd14 Then Why Talk About Them? <p>Because:</p> <ul> <li>React apps often involve async logic (API calls, timers, background workers).</li> <li>These async behaviors can cause race conditions, similar to multithreaded issues.</li> <li>You may simulate \"mutex-like\" behavior to control who gets to update state or UI.</li> </ul>"},{"location":"research/testing/mutex/#reference","title":"Reference","text":"<ul> <li>Mutex Lock Understanding with some example</li> <li>Mutex in C++</li> <li>Synchronize Your JavaScript Code With Async-Mutex</li> <li>Synchronization Mechanisms in the Linux Kernel: Mutex vs Semaphore</li> <li>Difference Between a Mutex, a Monitor, and a Semaphore</li> <li>Mutex vs Semaphore \u2013 Difference Between Them</li> <li>Key Difference Between Mutex &amp; Semaphore Explained With Examples </li> <li>React.js + Redux Toolkit: Refresh Tokens Authentication with MUTEX</li> </ul>"},{"location":"research/testing/race-condition/","title":"Race Condition","text":""},{"location":"research/testing/race-condition/#race-condition","title":"Race Condition","text":""},{"location":"research/testing/race-condition/#what-causes-race-condition","title":"What Causes Race Condition ?","text":"<p>In React or JavaScript, race conditions happen when asynchronous operations (like API calls, timers, state updates, or DOM actions) complete in an unexpected order, causing bugs or incorrect UI behavior.</p> <p>Even though JavaScript is single-threaded, it still experiences race conditions because of its event loop and non-blocking async behavior.</p>"},{"location":"research/testing/race-condition/#what-exactly-causes-race-conditions-in-jsreact","title":"\ud83d\udca5 What Exactly Causes Race Conditions in JS/React?","text":"<p>Here are the core causes with real-world examples:</p>"},{"location":"research/testing/race-condition/#1-competing-asynchronous-operations","title":"1. Competing Asynchronous Operations","text":"<p>\u2705 Cause:</p> <ul> <li>Multiple async tasks (API calls, timeouts, promises) start but finish in a different order than expected.</li> </ul> <p>\ud83d\udd0d Example:</p> <pre><code>fetchUser(); // Starts first, finishes last\nfetchPosts(); // Starts second, finishes first\n</code></pre> <p>\u26a0\ufe0f Risk:</p> <ul> <li>UI may show posts before the user is loaded \u2014 out-of-order rendering.</li> </ul>"},{"location":"research/testing/race-condition/#2-stale-closures-in-react","title":"2. Stale Closures in React","text":"<p>\u2705 Cause:</p> <ul> <li>A function captures an outdated value from a previous render.</li> </ul> <p>\ud83d\udd0d Example:</p> <pre><code>const [count, setCount] = useState(0);\n\nuseEffect(() =&gt; {\n  const interval = setInterval(() =&gt; {\n    console.log(count); // \u274c always logs 0\n  }, 1000);\n  return () =&gt; clearInterval(interval);\n}, []);\n</code></pre> <p>\u26a0\ufe0f Risk:</p> <ul> <li>The interval logs stale data \u2014 a race between UI updates and captured variables.</li> </ul>"},{"location":"research/testing/race-condition/#3-state-updates-with-outdated-values","title":"3. State Updates with Outdated Values","text":"<p>\u2705 Cause:</p> <ul> <li>Two async functions update the same state, but the second one overwrites the first.</li> </ul> <p>\ud83d\udd0d Example:</p> <pre><code>setValue(\"loading\");\nawait fetchData(); // Slow\nsetValue(\"done\");\n\nawait fetchOther(); // Finishes faster\nsetValue(\"other done\");\n</code></pre> <p>\u26a0\ufe0f Risk:</p> <ul> <li><code>\"done\"</code> may overwrite <code>\"other done\"</code> \u2014 a race between async calls.</li> </ul>"},{"location":"research/testing/race-condition/#4-component-unmounts-before-async-operation-finishes","title":"4. Component Unmounts Before Async Operation Finishes","text":"<p>\u2705 Cause:</p> <ul> <li>Component unmounts, but the async call tries to update state afterward.</li> </ul> <p>\ud83d\udd0d Example:</p> <pre><code>useEffect(() =&gt; {\n  fetchData().then((data) =&gt; {\n    setState(data); // \u274c Error if component is unmounted\n  });\n}, []);\n</code></pre> <p>\u26a0\ufe0f Risk:</p> <ul> <li>Leads to memory leaks or React warning: <code>Can't perform a React state update on an unmounted component.</code></li> </ul>"},{"location":"research/testing/race-condition/#5-rapid-input-query-changes-without-cancelation","title":"5. Rapid Input / Query Changes Without Cancelation","text":"<p>\u2705 Cause:</p> <ul> <li>Multiple requests sent based on input changes, but earlier results arrive last.</li> </ul> <p>\ud83d\udd0d Example:</p> <pre><code>useEffect(() =&gt; {\n  fetch(`/search?q=${query}`).then(setResults);\n}, [query]);\n</code></pre> <p>\u26a0\ufe0f Risk:</p> <ul> <li>Old search results may overwrite the latest \u2014 a classic race condition.</li> </ul>"},{"location":"research/testing/race-condition/#how-to-prevent-race-conditions","title":"\u2705 How to Prevent Race Conditions","text":"Cause Solution Multiple async tasks Track the latest request, use guards Stale closures Use <code>useRef</code> or always latest props Overlapping state updates Use functional <code>setState()</code> Component unmounts Use <code>AbortController</code>, cleanup functions Rapid input changes Debounce or cancel outdated requests Manual <code>fetch()</code> race Use libraries (RTK Query, React Query)"},{"location":"research/testing/race-condition/#summary","title":"\ud83e\udde0 Summary","text":"<p>Even though JS/React is single-threaded:</p> <ul> <li>Async functions, promises, state updates, and network calls introduce race-like behavior.</li> <li>These races are about timing, not threads.</li> <li>You fix them with guards, cleanup, cancellation, and smart state management.</li> </ul>"},{"location":"research/testing/rtk101/","title":"rtk 101","text":""},{"location":"research/testing/rtk101/#rtk-101","title":"RTK 101","text":""},{"location":"research/testing/rtk101/#whats-included","title":"What's Included","text":"Redux Toolkit includes these APIs: <ul> <li><code>configureStore()</code>: wraps <code>createStore</code> to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, adds whatever Redux middleware you supply, includes r<code>edux-thunk</code> by default, and enables use of the Redux DevTools Extension.</li> <li><code>createReducer()</code>: that lets you supply a lookup table of action types to case reducer functions, rather than writing switch statements. In addition, it automatically uses the <code>immer</code> library to let you write simpler immutable updates with normal mutative code, like <code>state.todos[3].completed = true</code>.</li> <li><code>createAction()</code>: generates an action creator function for the given action type string.</li> <li><code>createSlice()</code>: accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.</li> <li><code>combineSlices()</code>: combines multiple slices into a single reducer, and allows \"lazy loading\" of slices after initialisation.</li> <li><code>createAsyncThunk</code>: accepts an action type string and a function that returns a promise, and generates a thunk that dispatches <code>pending/fulfilled/rejected</code> action types based on that promise</li> <li><code>createEntityAdapter</code>: generates a set of reusable reducers and selectors to manage normalized data in the store</li> <li>The <code>createSelector</code> utility from the Reselect library, re-exported for ease of use.</li> </ul>"},{"location":"research/testing/rtk101/#rtk-query","title":"RTK Query","text":"<p>RTK Query is provided as an optional addon within the <code>@reduxjs/toolkit</code> package. It is purpose-built to solve the use case of data fetching and caching, supplying a compact, but powerful toolset to define an API interface layer for your app. It is intended to simplify common cases for loading data in a web application, eliminating the need to hand-write data fetching &amp; caching logic yourself.</p> <p>RTK Query is built on top of the Redux Toolkit core for its implementation, using Redux internally for its architecture. Although knowledge of Redux and RTK are not required to use RTK Query, you should explore all of the additional global store management capabilities they provide, as well as installing the Redux DevTools browser extension, which works flawlessly with RTK Query to traverse and replay a timeline of your request &amp; cache behavior.</p> <p>RTK Query is included within the installation of the core Redux Toolkit package. It is available via either of the two entry points below:</p> <p>import { createApi } from '@reduxjs/toolkit/query'</p> <pre><code>/* React-specific entry point that automatically generates\n   hooks corresponding to the defined endpoints */\nimport { createApi } from \"@reduxjs/toolkit/query/react\";\n</code></pre>"},{"location":"research/testing/rtk101/#whats-included_1","title":"What's included","text":"<p>RTK Query includes these APIs:</p> <ul> <li><code>createApi()</code>: The core of RTK Query's functionality. It allows you to define a set of endpoints and describe how to retrieve data from a series of endpoints, including configuration of how to fetch and transform that data. In most cases, you should use this once per app, with \"one API slice per base URL\" as a rule of thumb.</li> <li><code>fetchBaseQuery()</code>: A small wrapper around <code>fetch</code> that aims to simplify requests. Intended as the recommended <code>baseQuery</code> to be used in <code>createApi</code> for the majority of users.</li> <li><code>&lt;ApiProvider /&gt;</code>: Can be used as a <code>Provider</code> if you do not already have a Redux store.</li> <li><code>setupListeners()</code>: A utility used to enable <code>refetchOnMount</code> and <code>refetchOnReconnect</code> behaviors.</li> </ul> <p>See the RTK Query Overview page for more details on what RTK Query is, what problems it solves, and how to use it.</p> <p>how many zeros can js can handle without shoing notation sign</p> <p>JavaScript can handle large numbers, but it automatically switches to exponential (scientific) notation for very large values\u2014specifically, numbers with more than 21 digits (i.e., more than 20 zeros) when represented as a number.</p>"},{"location":"research/testing/rtk101/#javascript-max-safe-integer","title":"\ud83d\udd22 JavaScript Max Safe Integer","text":"<p>The largest exact integer JavaScript can represent is:</p> <pre><code>Number.MAX_SAFE_INTEGER = 9007199254740991; // 16 digits\n</code></pre> <p>But for display (not calculation), JavaScript can handle:</p>"},{"location":"research/testing/rtk101/#examples-that-show-without-scientific-notation","title":"\u2705 Examples That Show Without Scientific Notation","text":"<pre><code>999999999999999999999; // 21 digits \u2192 OK\n</code></pre> <pre><code>console.log(100000000000000000000); // shows: 100000000000000000000\n</code></pre>"},{"location":"research/testing/rtk101/#examples-that-show-scientific-notation","title":"\u274c Examples That Show Scientific Notation","text":"<pre><code>console.log(1000000000000000000000); // shows: 1e+21\n</code></pre> <p>Once you hit 21 digits, JavaScript switches to scientific notation:</p> <pre><code>1000000000000000000000; // shown as 1e+21\n</code></pre>"},{"location":"research/testing/rtk101/#workaround-use-strings-or-bigint","title":"\ud83d\udca1 Workaround: Use Strings or BigInt","text":"<ul> <li>String: If you're just displaying the number and don't need to do math with it:</li> </ul> <pre><code>let bigNumber = \"1000000000000000000000000000\"; // as a string\nconsole.log(bigNumber); // prints as-is\n</code></pre> <ul> <li>BigInt: If you want to do math:</li> </ul> <pre><code>let bigInt = 1000000000000000000000000000n; // use 'n' at the end\nconsole.log(bigInt.toString()); // full number, no notation\n</code></pre>"},{"location":"research/testing/rtk101/#summary","title":"Summary","text":"Digits Shows Normally? Notes \u2264 21 \u2705 Yes Standard numbers &gt; 21 \u274c No Shows as <code>e+...</code> Any \u2705 Yes Use strings or <code>BigInt</code>"},{"location":"research/testing/rtk101/#theory","title":"Theory","text":""},{"location":"research/testing/setTimeout-questions/","title":"setTimeout Question","text":""},{"location":"research/testing/setTimeout-questions/#settimeout-questions","title":"<code>setTimeout</code> Questions","text":"<p>Here are 10 progressively challenging example questions focused on understanding and using <code>setTimeout</code> in JavaScript \u2014 ranging from beginner to advanced levels.</p>"},{"location":"research/testing/setTimeout-questions/#example","title":"Example","text":""},{"location":"research/testing/setTimeout-questions/#1-basic-delay","title":"\ud83d\udd30 1. Basic Delay","text":"<p>Q: Log <code>\"Hello\"</code> to the console after 2 seconds.</p> <pre><code>setTimeout(() =&gt; {\n  console.log(\"Hello\");\n}, 2000);\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#2-multiple-settimeout-calls","title":"\ud83d\udd01 2. Multiple setTimeout Calls","text":"<p>Q: Log <code>\"One\"</code> after 1 second, <code>\"Two\"</code> after 2 seconds, and <code>\"Three\"</code> after 3 seconds.</p> <pre><code>setTimeout(() =&gt; console.log(\"One\"), 1000);\nsetTimeout(() =&gt; console.log(\"Two\"), 2000);\nsetTimeout(() =&gt; console.log(\"Three\"), 3000);\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#3-loop-with-delayed-logs","title":"\ud83d\udd04 3. Loop with Delayed Logs","text":"<p>Q: Log numbers <code>1</code> through <code>5</code>, one per second.</p> <pre><code>for (let i = 1; i &lt;= 5; i++) {\n  setTimeout(() =&gt; console.log(i), i * 1000);\n}\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#4-whats-wrong-here-var-scoping","title":"\ud83e\udd2f 4. What's Wrong Here? (Var Scoping)","text":"<p>Q: What will this code print?</p> <pre><code>for (var i = 1; i &lt;= 3; i++) {\n  setTimeout(() =&gt; console.log(i), i * 1000);\n}\n</code></pre> <p>A: It prints <code>4</code> three times. Use <code>let</code> instead of <code>var</code> to fix closure issues.</p>"},{"location":"research/testing/setTimeout-questions/#5-cancel-a-timeout","title":"\ud83e\uddf9 5. Cancel a Timeout","text":"<p>Q: Schedule a message to log after 5 seconds, but cancel it after 2 seconds.</p> <pre><code>const timerId = setTimeout(() =&gt; {\n  console.log(\"You won't see this\");\n}, 5000);\n\nsetTimeout(() =&gt; {\n  clearTimeout(timerId);\n  console.log(\"Timeout canceled\");\n}, 2000);\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#6-recursively-repeat-settimeout-alternative-to-setinterval","title":"\ud83d\udd70\ufe0f 6. Recursively Repeat <code>setTimeout</code> (Alternative to <code>setInterval</code>)","text":"<p>Q: Print <code>\"Tick\"</code> every second, but stop after 5 times.</p> <pre><code>let count = 0;\nfunction tick() {\n  if (count &gt;= 5) return;\n  console.log(\"Tick\");\n  count++;\n  setTimeout(tick, 1000);\n}\ntick();\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#7-delay-in-an-async-function","title":"\ud83e\uddea 7. Delay in an Async Function","text":"<p>Q: Create a reusable <code>wait(ms)</code> function using <code>setTimeout</code>.</p> <pre><code>function wait(ms) {\n  return new Promise((resolve) =&gt; setTimeout(resolve, ms));\n}\n\nasync function demo() {\n  console.log(\"Start\");\n  await wait(2000);\n  console.log(\"2 seconds later\");\n}\ndemo();\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#8-throttle-with-settimeout","title":"\ud83d\udd73\ufe0f 8. Throttle with <code>setTimeout</code>","text":"<p>Q: Prevent a function from being called more than once every 2 seconds.</p> <pre><code>function throttle(fn, delay) {\n  let ready = true;\n  return function (...args) {\n    if (!ready) return;\n    ready = false;\n    fn.apply(this, args);\n    setTimeout(() =&gt; {\n      ready = true;\n    }, delay);\n  };\n}\n\nconst log = throttle(() =&gt; console.log(\"Clicked\"), 2000);\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#9-order-of-execution-event-loop-insight","title":"\ud83e\udde0 9. Order of Execution (Event Loop Insight)","text":"<p>Q: What will be printed?</p> <pre><code>console.log(\"A\");\nsetTimeout(() =&gt; console.log(\"B\"), 0);\nconsole.log(\"C\");\n</code></pre> <p>A: Output:</p> <pre><code>A;\nC;\nB;\n</code></pre> <p>Because <code>setTimeout(..., 0)</code> is scheduled after the current call stack.</p>"},{"location":"research/testing/setTimeout-questions/#10-progressive-timeout-based-on-input","title":"\ud83d\udca1 10. Progressive Timeout Based on Input","text":"<p>Q: For an array of names, log each name with increasing delay (e.g., 0s, 1s, 2s\u2026)</p> <pre><code>const names = [\"Alice\", \"Bob\", \"Charlie\"];\nnames.forEach((name, index) =&gt; {\n  setTimeout(() =&gt; console.log(name), index * 1000);\n});\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#theory","title":"Theory","text":""},{"location":"research/testing/setTimeout-questions/#settimeout-how-it-works-behind-the-scenes","title":"\ud83d\udd0d <code>setTimeout</code>: How It Works (Behind the Scenes)","text":"<p>\ud83e\udde0 High-level Process:</p> <p>When you call:</p> <pre><code>setTimeout(() =&gt; console.log(\"Hi\"), 1000);\n</code></pre> <p>Here\u2019s what happens:</p> <ol> <li> <p>JavaScript runs synchronously \u2014 it encounters <code>setTimeout</code>, registers the callback with the browser or Node.js environment.</p> </li> <li> <p>The environment sets a timer for the specified delay (e.g. 1000 ms).</p> </li> <li> <p>After the timer finishes:</p> </li> <li> <p>The callback is queued in the task queue (aka macro task queue).</p> </li> <li> <p>The event loop picks it up only after the current call stack is empty and all microtasks have been processed.</p> </li> </ol>"},{"location":"research/testing/setTimeout-questions/#is-settimeout-a-microtask-or-macro-task","title":"\ud83e\udde9 Is setTimeout a Microtask or Macro Task?","text":"<p>\u2705 Answer:</p> <p><code>setTimeout</code> is a macro task (aka task or macrotask).</p>"},{"location":"research/testing/setTimeout-questions/#difference-between-microtasks-macrotasks","title":"\ud83e\uddec Difference Between Microtasks &amp; Macrotasks","text":"Feature Microtask Macrotask (Task) Examples <code>Promise.then</code>, <code>queueMicrotask</code> <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>, I/O Timing Runs after current stack, before any macrotask Runs after microtasks Priority Higher priority Lower than microtasks Use case Quick, short operations Scheduled tasks or async callbacks"},{"location":"research/testing/setTimeout-questions/#event-loop-execution-order-simplified","title":"\ud83d\udd01 Event Loop Execution Order (Simplified)","text":"<pre><code>Call Stack \u2192 Microtask Queue \u2192 Macrotask Queue\n</code></pre> <ol> <li>Finish current synchronous code</li> <li>Empty the microtask queue</li> <li>Take one macrotask, run it</li> <li>Repeat...</li> </ol>"},{"location":"research/testing/setTimeout-questions/#how-to-find-if-its-micro-or-macro","title":"\ud83e\uddea How to Find If It\u2019s Micro or Macro","text":"<p>You can experiment:</p> <pre><code>console.log(\"script start\");\n\nsetTimeout(() =&gt; {\n  console.log(\"setTimeout\");\n}, 0);\n\nPromise.resolve().then(() =&gt; {\n  console.log(\"promise1\");\n});\n\nqueueMicrotask(() =&gt; {\n  console.log(\"microtask\");\n});\n\nconsole.log(\"script end\");\n</code></pre> <p>\ud83d\udca1 Output:</p> <pre><code>script start\nscript end\npromise1\nmicrotask\nsetTimeout\n</code></pre> \ud83d\udd0e Why? <ul> <li><code>promise1</code> and <code>queueMicrotask</code> are microtasks</li> <li><code>setTimeout</code> is a macro task</li> <li>Microtasks run before macrotasks once the stack is empty</li> </ul>"},{"location":"research/testing/setTimeout-questions/#visual-flow","title":"\ud83e\udde0 Visual Flow","text":"<pre><code>JS Execution Starts\n\u2193\nScript Runs (synchronous)\n\u2193\nQueue Microtasks (Promise.then, queueMicrotask)\n\u2193\nRun Microtasks (if any)\n\u2193\nRun First Macrotask (like setTimeout callback)\n\u2193\nRepeat\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#real-world-implication","title":"\ud83e\uddf5 Real-World Implication","text":"<p>If you're doing something like:</p> <pre><code>setTimeout(() =&gt; console.log(\"timeout\"), 0);\nPromise.resolve().then(() =&gt; console.log(\"promise\"));\n</code></pre> <p>Even though both are \"async\", the <code>promise</code> runs first, because it\u2019s a microtask, which has higher priority than a <code>setTimeout</code> (macro task).</p>"},{"location":"research/testing/setTimeout-questions/#summary","title":"\ud83d\udee0\ufe0f Summary","text":"<ul> <li><code>setTimeout</code> is macro task.</li> <li>Use <code>Promise</code>, <code>queueMicrotask</code> for microtasks.</li> <li>Microtasks always run before macrotasks, once the stack clears.</li> <li>To debug or inspect, use logging and DevTools (Performance tab) to track callback execution order.</li> </ul>"},{"location":"research/testing/setTimeout-questions/#diagram","title":"Diagram","text":"<p>Great! Here's an animated-style explanation of the event loop, focusing on <code>setTimeout</code> (macro task) and Promises (microtasks), with a visual mental model \u2014 like a step-by-step cartoon in your head.</p>"},{"location":"research/testing/setTimeout-questions/#mental-picture-the-javascript-event-loop","title":"\ud83d\uddbc\ufe0f Mental Picture: The JavaScript Event Loop","text":"<p>Imagine JavaScript as a chef working in a single-threaded kitchen:</p> <ul> <li>\ud83e\udd44 Call Stack: The chef\u2019s current list of instructions (one thing at a time).</li> <li>\ud83d\udce6 Microtask Queue: Small urgent tasks like reminders (\"Add salt!\") right after cooking each item.</li> <li>\ud83d\udcee Macrotask Queue: New orders from customers (like <code>setTimeout</code>) that wait until the current dish is done and cleanup is complete.</li> </ul>"},{"location":"research/testing/setTimeout-questions/#step-by-step-event-loop-animation","title":"\ud83d\udc68\u200d\ud83c\udf73 Step-by-Step Event Loop Animation","text":"<p>Step 1: Run Synchronous Code (Script Phase)</p> <pre><code>console.log(\"A\");\n\nsetTimeout(() =&gt; console.log(\"B\"), 0); // Macro task\nPromise.resolve().then(() =&gt; console.log(\"C\")); // Microtask\n\nconsole.log(\"D\");\n</code></pre> <p>Output order?</p>"},{"location":"research/testing/setTimeout-questions/#walkthrough","title":"\ud83d\udc63 Walkthrough:","text":""},{"location":"research/testing/setTimeout-questions/#1-call-stack-starts","title":"\u23f1\ufe0f 1. Call Stack Starts","text":"<ul> <li><code>console.log(\"A\")</code> \u2192 prints A</li> <li>Registers <code>setTimeout(..., 0)</code> \u2192 handed off to the browser to wait 0ms</li> <li><code>Promise.then(...)</code> \u2192 pushed to microtask queue</li> <li><code>console.log(\"D\")</code> \u2192 prints <code>D</code></li> </ul>"},{"location":"research/testing/setTimeout-questions/#2-microtask-queue-runs","title":"\ud83d\udce6 2. Microtask Queue Runs","text":"<ul> <li>The stack is now empty, so JS engine checks:</li> <li>Any microtasks? Yes \u2192 run <code>console.log(\"C\")</code></li> </ul>"},{"location":"research/testing/setTimeout-questions/#3-macrotask-queue-runs","title":"\ud83d\udcee 3. Macrotask Queue Runs","text":"<ul> <li>Then the <code>setTimeout</code> callback is picked \u2192 prints <code>B</code></li> </ul> <p>\u2705 Final Output:</p> <pre><code>A\nD\nC\nB\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#diagram-summary-imagine-this-loop","title":"\ud83d\udd01 Diagram Summary (Imagine This Loop)","text":"<pre><code>+--------------------------+\n|    Call Stack (Empty?)   |\n+--------------------------+\n           \u2193\n+--------------------------+\n|    Run All Microtasks    |\n| (Promises, queueMicrotask) |\n+--------------------------+\n           \u2193\n+--------------------------+\n|     Run 1 Macrotask      |\n| (setTimeout, setInterval)|\n+--------------------------+\n           \u2193\n     Repeat forever...\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#text-based-diagram-example","title":"\ud83c\udfa8 Text-based Diagram Example","text":"<pre><code>START\n \u2193\nconsole.log(\"A\")          \u2192 \"A\"\n \u2193\nsetTimeout(...)           \u2192 Scheduled (macro)\n \u2193\nPromise.then(...)         \u2192 Queued (micro)\n \u2193\nconsole.log(\"D\")          \u2192 \"D\"\n \u2193\nRun Microtask Queue:\n   \u2192 \"C\"\n \u2193\nRun Macrotask Queue:\n   \u2192 \"B\"\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#remember","title":"\ud83d\udca1 Remember","text":"Feature Microtask Macrotask Timing After stack, before tasks After microtasks Priority \ud83d\ude80 High \ud83d\udc22 Lower Examples <code>Promise.then</code>, <code>queueMicrotask</code> <code>setTimeout</code>, <code>setInterval</code>"},{"location":"research/testing/setTimeout-questions/#pro-tip-use-chrome-devtools","title":"\ud83d\udcd8 Pro Tip: Use Chrome DevTools","text":"<ol> <li>Open DevTools \u2192 Performance Tab</li> <li>Record your app's behavior</li> <li>Look at \u201cTasks\u201d and \u201cMicrotasks\u201d flamecharts</li> </ol> <p>You can see when and how each queued task is executed relative to the main thread.</p>"},{"location":"research/testing/setTimeout-questions/#question","title":"Question","text":"<pre><code>console.log(\"script start\");\n\nsetTimeout(() =&gt; {\n  console.log(\"setTimeout\");\n}, 0);\n\nPromise.resolve().then(() =&gt; {\n  console.log(\"promise1\");\n});\n\nqueueMicrotask(() =&gt; {\n  console.log(\"microtask\");\n});\n\nconsole.log(\"script end\");\n</code></pre> <p>how is this queueMicrotask is promise</p> <p>\ud83e\udde0 JavaScript Event Loop Explained (Simplified)</p> <p>JavaScript has:</p> <ul> <li>Call Stack \u2013 runs synchronous code.</li> <li>Microtask Queue \u2013 runs after the current script but before timers (like <code>setTimeout</code>).</li> <li>Macrotask Queue \u2013 for <code>setTimeout</code>, <code>setInterval</code>, etc.</li> </ul>"},{"location":"research/testing/setTimeout-questions/#javascript-event-loop-deep-dive","title":"\ud83e\udde0 JavaScript Event Loop \u2013 Deep Dive","text":"<p>Absolutely! Let's dive into the JavaScript Event Loop with depth and clarity, highlighting where people commonly get confused \u2014 and clear those up with visuals and examples.</p> <p>JavaScript is single-threaded, meaning it can do one thing at a time. But it's also asynchronous \u2013 it feels like it can do multiple things, thanks to the event loop, callback queues, and background APIs.</p>"},{"location":"research/testing/setTimeout-questions/#the-event-loop-core-components","title":"\ud83d\udd01 The Event Loop \u2013 Core Components","text":"<ol> <li>Call Stack (synchronous code runs here)</li> <li>Web APIs / Background Threads (for async stuff like <code>setTimeout</code>, <code>fetch</code>, etc.)</li> <li> <p>Task Queues:</p> <ul> <li>Microtask Queue (Promise callbacks, <code>queueMicrotask</code>)</li> <li>Macrotask Queue (aka Task Queue \u2013 <code>setTimeout</code>, <code>setInterval</code>, UI events)</li> </ul> </li> <li> <p>Event Loop (the engine that runs this whole show)</p> </li> </ol>"},{"location":"research/testing/setTimeout-questions/#how-it-works-step-by-step","title":"\u2699\ufe0f How it works \u2013 Step-by-Step","text":""},{"location":"research/testing/setTimeout-questions/#step-1-execute-synchronous-code","title":"\ud83d\udd39 Step 1: Execute Synchronous Code","text":"<ul> <li>The call stack runs all regular (synchronous) code top to bottom.</li> <li>Any async tasks (like <code>setTimeout</code>, <code>Promise</code>) are sent to their appropriate queues.</li> </ul>"},{"location":"research/testing/setTimeout-questions/#step-2-after-the-stack-is-empty","title":"\ud83d\udd39 Step 2: After the Stack is Empty","text":"<p>Once the call stack is empty, the event loop:</p> <ol> <li> <p>Checks the Microtask Queue and runs everything in it (before anything else).</p> </li> <li> <p>Only when the microtask queue is empty, it checks the Macrotask Queue (like <code>setTimeout</code>) and runs one task.</p> </li> <li> <p>Then goes back to check microtasks again. Repeat.</p> </li> </ol> <p>\ud83d\udd25 This is where most people get confused \u2014 microtasks are always processed before macrotasks, and they are processed in full before any macrotask can run.</p>"},{"location":"research/testing/setTimeout-questions/#common-queues-what-goes-where","title":"\ud83d\udce6 Common Queues: What Goes Where?","text":"Feature Queue Type Runs when? <code>console.log()</code> Call Stack Immediately <code>setTimeout</code> Macrotask After all microtasks are done <code>setInterval</code> Macrotask Same as above <code>Promise.then</code> Microtask After call stack, before macrotasks <code>queueMicrotask</code> Microtask Same as above <code>fetch().then()</code> Microtask Then/catch is a microtask <code>requestAnimationFrame</code> Special case Before paint"},{"location":"research/testing/setTimeout-questions/#example-what-trips-people-up","title":"\ud83d\udd0d Example: What trips people up","text":"<p>\ud83d\udd25 Code:</p> <pre><code>console.log(\"start\");\n\nsetTimeout(() =&gt; {\n  console.log(\"setTimeout\");\n}, 0);\n\nPromise.resolve().then(() =&gt; {\n  console.log(\"promise\");\n});\n\nqueueMicrotask(() =&gt; {\n  console.log(\"microtask\");\n});\n\nconsole.log(\"end\");\n</code></pre> <p>\ud83e\udde0 What happens:</p> Step Action Output 1 <code>console.log(\"start\")</code> <code>start</code> 2 <code>setTimeout</code> added to macrotask (queued) 3 <code>Promise.then(...)</code> \u2192 microtask (queued) 4 <code>queueMicrotask(...)</code> \u2192 microtask (queued) 5 <code>console.log(\"end\")</code> <code>end</code> 6 Microtasks run: <code>promise</code> <code>microtask</code> 7 Macrotask (<code>setTimeout</code>) runs <code>setTimeout</code> <p>\u2705 Final Output:</p> <pre><code>start\nend\npromise\nmicrotask\nsetTimeout\n</code></pre>"},{"location":"research/testing/setTimeout-questions/#confusing-things-clarified","title":"\ud83e\udde0 Confusing Things Clarified","text":""},{"location":"research/testing/setTimeout-questions/#confusion-1-why-does-promisethen-run-before-settimeout","title":"\u2757 Confusion #1: Why does Promise.then run before setTimeout?","text":"<p>Because <code>Promise.then</code> goes into the microtask queue, and the event loop always prioritizes microtasks before macrotasks.</p>"},{"location":"research/testing/setTimeout-questions/#confusion-2-is-queuemicrotask-the-same-as-promisethen","title":"\u2757 Confusion #2: Is <code>queueMicrotask</code> the same as <code>Promise.then</code>?","text":"<p>Almost. Both queue microtasks. The difference is:</p> <ul> <li><code>Promise.then</code> has overhead of creating/handling a Promise object.</li> <li><code>queueMicrotask</code> is a lower-level, lightweight way to queue a microtask.</li> </ul> <p>They go in the same queue, and execute in insertion order.</p>"},{"location":"research/testing/setTimeout-questions/#confusion-3-is-settimeout-0-truly-immediate","title":"\u2757 Confusion #3: Is <code>setTimeout(..., 0)</code> truly \"immediate\"?","text":"<p>No. Even with 0ms delay, it goes into the macrotask queue. It will only run after all synchronous and microtasks are done.</p>"},{"location":"research/testing/setTimeout-questions/#visual-model","title":"\ud83d\udee0 Visual Model","text":"<pre><code>+------------------+\n|   Call Stack     | &lt;---- Runs first\n+------------------+\n        \u2193\n+------------------+\n| Microtask Queue  | &lt;---- Runs after stack is empty\n| (Promises, qMT)  |\n+------------------+\n        \u2193\n+------------------+\n| Macrotask Queue  | &lt;---- setTimeout, setInterval, etc.\n+------------------+\n</code></pre> <p>\u26a0\ufe0f The Event Loop always clears microtasks first before even touching macrotasks.</p>"},{"location":"research/testing/setTimeout-questions/#summary_1","title":"\ud83c\udf93 Summary","text":"<ul> <li>JavaScript runs synchronous code first.</li> <li>Then processes all microtasks (like <code>Promise.then</code>, <code>queueMicrotask</code>).</li> <li>Then processes one macrotask (like <code>setTimeout</code>), then checks microtasks again.</li> <li>This cycle continues forever.</li> </ul>"},{"location":"research/testing/testing-101/","title":"101","text":""},{"location":"research/testing/testing-101/#testing-101","title":"Testing 101","text":"<p>The Red \u2192 Green \u2192 Refactor approach is a core practice in Test-Driven Development (TDD). It helps you build reliable code in small, safe steps.</p> <p>Overview of TDD and Red-Green-Refactor</p> <ul> <li>Red: Write a failing test that defines the desired behavior.</li> <li>Green: Write the minimal code to make the test pass.</li> <li>Refactor: Improve the code while ensuring tests still pass.</li> <li>Repeat the cycle for each feature or behavior.</li> </ul> <p>\ud83e\uddea What is Red \u2192 Green \u2192 Refactor?</p> Step Description \ud83d\udd34 Red Write a failing test before you write any real code. \u2705 Green Write just enough code to make the test pass. \ud83e\uddf9 Refactor Clean up the code (without changing behavior), making sure the test still passes. <p>\ud83e\udd14 Not Sure What to Test?</p> <p>Start with:</p> <ul> <li>Does the component render?</li> <li>Are important elements visible?</li> <li>What happens when a button is clicked?</li> </ul>"},{"location":"research/testing/testing-101/#misc","title":"MISC","text":"When to use <code>Object.freeze()</code>? <ul> <li>Use it if you want to guarantee immutability of your constants.</li> <li>It adds safety especially in large projects or when constants are shared widely.</li> <li>It\u2019s a lightweight, native way to make constants safer.</li> </ul> Performance note <ul> <li><code>Object.freeze()</code> is very fast and won\u2019t significantly impact performance.</li> <li>But keep in mind it only shallow freezes \u2014 nested objects inside still can be changed unless you recursively freeze them.</li> </ul> <p>Summary:</p> Plain Object <code>Object.freeze()</code> Mutability Mutable Immutable (shallow) Safety Less safe, can be changed Safer, prevents accidental changes Use case Small/simple projects Large/complex projects or shared constants <p>My recommendation:</p> <p>For constants, it\u2019s a good practice to use <code>Object.freeze()</code> to prevent accidental modifications.</p>"},{"location":"research/testing/testing-101/#form","title":"FORM","text":"<p>Do I have to store initial values in the <code>&lt;Form&gt;</code> wrapper or can I set them inside the <code>&lt;Form.Item&gt;</code> as <code>initialValue</code>?</p> <p>\u2705 Answer:</p> <p>Both work, but they behave differently \u2014 here\u2019s the clear breakdown:</p> <p>\u2705 Option 1: Set <code>initialValues</code> in the Form wrapper</p> <pre><code>&lt;Form initialValues={{ transactionType: TRANSACTION_TYPE.BUY }}&gt;\n  &lt;Form.Item name=\"transactionType\"&gt;\n    &lt;Select&gt;...&lt;/Select&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;\n</code></pre> <p>\ud83d\udfe2 Recommended for real forms \u2014 this is cleaner, especially when resetting the form, submitting, or loading data dynamically.</p> <ul> <li>Centralized control of all form defaults</li> <li>Easier to reuse or override initial values</li> <li>Works better with <code>form.resetFields()</code> (resets to form's <code>initialValues</code>)</li> </ul> <p>\u2705 Option 2: Set <code>initialValue</code> directly on the <code>Form.Item</code></p> <pre><code>&lt;Form&gt;\n  &lt;Form.Item name=\"transactionType\" initialValue={TRANSACTION_TYPE.BUY}&gt;\n    &lt;Select&gt;...&lt;/Select&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;\n</code></pre> <p>\ud83d\udfe1 Works fine, but...</p> <ul> <li>Less flexible when dealing with dynamic form resets or data loading</li> <li>Can conflict with <code>Form</code>\u2019s own <code>initialValues</code> if both are set</li> <li><code>resetFields()</code> won't reset to this value \u2014 only resets to what's in Form's <code>initialValues</code></li> </ul> <p>\ud83d\udd25 So, when should you use which</p> Use Case Use <code>Form initialValues</code> Use <code>Form.Item initialValue</code> Real-world forms with reset/load \u2705 Yes \ud83d\udeab Not recommended Quick static defaults \ud83d\udc4d Okay \u2705 Yes Multiple items, one source \u2705 Yes \u274c Gets messy Testing a single field Optional \u2705 Works fine <p>\u2705 Best practice (production):</p> <pre><code>&lt;Form initialValues={{ transactionType: 1 }}&gt;\n  &lt;Form.Item name=\"transactionType\"&gt;\n    &lt;Select&gt;\n      &lt;Select.Option value={1}&gt;Buy&lt;/Select.Option&gt;\n      &lt;Select.Option value={2}&gt;Sell&lt;/Select.Option&gt;\n    &lt;/Select&gt;\n  &lt;/Form.Item&gt;\n&lt;/Form&gt;\n</code></pre> <p>Let me know if you'd like help setting up <code>form.resetFields()</code> or handling dynamic values in tests or the UI!</p> <p>\u2705 Fix it:</p> <p>Keep <code>initialValues</code> in only one place, preferably at the top-level <code>&lt;Form&gt;</code>.</p> <pre><code>// StepOne.container.jsx\nimport { useFormContext } from \"react-hook-form\"; // or Ant Design's Form.useForm()\nimport StepOneView from \"./StepOne.view\";\n\nconst StepOneContainer = () =&gt; {\n  const form = useFormContext(); // or Form.useForm()\n};\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/page/3/","title":"Index","text":""},{"location":"blog/page/4/","title":"Index","text":""},{"location":"blog/page/5/","title":"Index","text":""},{"location":"blog/page/6/","title":"Index","text":""},{"location":"blog/archive/2025/page/2/","title":"2025","text":""},{"location":"blog/archive/2025/page/3/","title":"2025","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""}]}