{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> <p>Let's collaborate and turn visions into reality!</p> <ul> <li>Front-End Expert: Two years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Django cors</li> <li>Managing development .env in Django</li> </ul>"},{"location":"tags/#drf","title":"Drf","text":"<ul> <li>Viewset vs APIView</li> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>"},{"location":"tags/#github","title":"Github","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#porgramming","title":"Porgramming","text":"<ul> <li>How to Check the React Version in Your Project</li> </ul>"},{"location":"tags/#postman","title":"Postman","text":"<ul> <li>Automatically set Bearer Token in global variable postman after Login api</li> </ul>"},{"location":"tags/#programming","title":"Programming","text":"<ul> <li>A Guide to Secure Your Commits with GPG Keys</li> <li>Mastering Collaboration: A Guide to Git Branching Strategies</li> <li>How to pull all branches from a remote repository in GitHub ?</li> <li>Mastering Git: Understanding --track and --set-upstream</li> <li>Understanding JavaScript Array Methods: Mutating vs. Non-Mutating</li> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>React Router v6 Guide</li> <li>How to Add SSH Keys to Your GitHub Account</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> <li>Adding Syntax hightlighting in the material</li> <li>How to Set Up a Virtual Environment in Python</li> </ul>"},{"location":"tags/#react","title":"React","text":"<ul> <li>How to Check the React Version in Your Project</li> </ul>"},{"location":"tags/#ssh","title":"SSH","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#simplejwt","title":"SimpleJWT","text":"<ul> <li>How to Implement Tokenization using JWT and Django</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/01/22/how-to-check-the-react-version-in-your-project/","title":"How to Check the React Version in Your Project","text":"","tags":["Porgramming","React"]},{"location":"blog/2024/01/22/how-to-check-the-react-version-in-your-project/#how-to-check-the-react-version-in-your-project","title":"How to Check the React Version in Your Project","text":"<p>React, a popular JavaScript library for building user interfaces, undergoes regular updates to introduce new features, improvements, and bug fixes. As a React developer, it's essential to know the version of React used in your project. In this short blog post, we'll explore how you can easily check the React version of your project.</p>","tags":["Porgramming","React"]},{"location":"blog/2024/01/22/how-to-check-the-react-version-in-your-project/#methods-to-check-react-version","title":"Methods to Check React Version:","text":"<ol> <li> <p>Examine <code>package.json</code>:</p> <p>The <code>package.json</code> file is a central configuration file for Node.js projects, including React applications. Open the <code>package.json</code> file in your project's root directory using a text editor. Look for the \"dependencies\" section, where React is listed with its version.</p> <pre><code>\"dependencies\": {\n    \"react\": \"^17.0.1\",\n    \"react-dom\": \"^17.0.1\",\n\n    // other dependencies...\n}\n</code></pre> <p>In this example, the version of React is specified as \"<code>^17.0.1</code>\".</p> </li> <li> <p>Use Command Line:</p> <p>You can also use the command line to check the installed version of React. Open your terminal or command prompt, navigate to your project's root directory, and run the following command:</p> <pre><code>npm list react\n</code></pre> <p>If you're using Yarn, run:</p> <pre><code>yarn list react\n</code></pre> <p>This command will display the version of React installed in your project.</p> </li> <li> <p>Inspect the Browser Console:</p> <p>During development, you can view the React version in your browser's developer tools console. Open your application in a web browser, right-click on the page, select \"Inspect\" to open the developer tools, and navigate to the \"Console\" tab. Type the following command and press Enter:</p> <pre><code>console.log(React.version);\n</code></pre> <p>This will log the React version to the console.</p> </li> </ol>","tags":["Porgramming","React"]},{"location":"blog/2024/01/22/how-to-check-the-react-version-in-your-project/#conclusion","title":"Conclusion:","text":"<p>Knowing the React version in your project is crucial for various reasons, including understanding the available features, compatibility, and potential need for updates. By examining your <code>package.json</code> file, using command-line tools, or inspecting the browser console, you can easily check the React version and ensure your project stays up-to-date with the latest advancements in React development.</p>","tags":["Porgramming","React"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/","title":"A Guide to Secure Your Commits with GPG Keys","text":"","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#a-guide-to-secure-your-commits-with-gpg-keys","title":"A Guide to Secure Your Commits with GPG Keys","text":"<p>In the fast-paced world of software development, maintaining the integrity of your code is paramount. One powerful tool that helps ensure the authenticity of your commits is the GNU Privacy Guard (GPG). In this guide, we'll walk through the process of generating and using GPG keys to sign your commits, providing an extra layer of security for your projects.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#what-is-gpg","title":"What is GPG?","text":"<p>GPG, or GNU Privacy Guard, is a free and open-source software that implements the OpenPGP standard for encrypting and signing data. In the context of version control systems like Git, GPG keys are used to sign commits, verifying that the person making the commit is who they claim to be.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-1-generating-a-gpg-key","title":"Step 1: Generating a GPG Key","text":"<p>The first step is to generate your GPG key. Open a terminal on your local machine and use the following command:</p> bash<pre><code>gpg --full-generate-key\n</code></pre> <p>Follow the prompts to set up your key, providing your name, email address, and a strong passphrase. This passphrase is crucial, as it adds an additional layer of protection to your private key.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-2-adding-your-gpg-key-to-github","title":"Step 2: Adding Your GPG Key to GitHub","text":"<p>Once your GPG key is generated, you need to associate it with your GitHub account. Follow these steps:</p> <ol> <li> <p>Copy your GPG key ID using the command:</p> bash<pre><code>gpg --list-secret-keys --keyid-format LONG\n</code></pre> <p>Terminology</p> <pre><code>$ gpg --list-keys\n\nsec (Secret Key):\nssb (Secret Subkey):\nuid (User ID):\n</code></pre> </li> <li> <p>To display the ASCII-armored version of your public key, use the following command:</p> bash<pre><code>gpg --armor --export &lt;YourKeyID&gt;\n</code></pre> <p>Replace <code>&lt;YourKeyID&gt;</code> with your actual GPG key ID.</p> </li> <li> <p>Go to your GitHub account settings, navigate to \"SSH and GPG keys,\" and click on \"New GPG key.\"</p> </li> <li> <p>Paste your GPG key ID and save it.</p> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-3-configuring-git","title":"Step 3: Configuring Git","text":"<p>Configure Git to use your GPG key by running:</p> bash<pre><code>git config --global user.signingkey &lt;GPG_KEY_ID&gt;\n</code></pre> <p>Replace <code>&lt;GPG_KEY_ID&gt;</code> with your actual GPG key ID. Additionally, set Git to sign all of your commits by default:</p> bash<pre><code>git config --global commit.gpgSign true\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#step-4-signing-commits","title":"Step 4: Signing Commits","text":"<p>From now on, every commit you make will be signed with your GPG key. You can sign a commit explicitly using:</p> bash<pre><code>git commit -S -m \"Your commit message\"\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#verification-and-visual-confirmation","title":"Verification and Visual Confirmation","text":"<p>GitHub will display a \"<code>Verified</code>\" badge next to signed commits on the web interface, providing a visual confirmation of the commit's authenticity. You can also verify commits locally using:</p> bash<pre><code>git verify-commit &lt;commit-SHA&gt;\n</code></pre> <p>Replace <code>&lt;commit-SHA&gt;</code> with the actual SHA hash of the commit you want to verify.</p> <p>By following these steps, you've empowered your version control workflow with an added layer of security. GPG keys not only help in ensuring the trustworthiness of your commits but also contribute to a more secure and transparent collaboration environment in the world of software development.</p> <p>Notes</p> <p>When you run the <code>gpg --list-keys</code> command, you'll typically see output that looks like this:</p> <pre><code>pub   4096R/&lt;YourKeyID&gt;  YYYY-MM-DD [expires: YYYY-MM-DD]\nuid                  Your Name &lt;your.email@example.com&gt;\nsub   4096R/&lt;SubKeyID&gt;  YYYY-MM-DD [expires: YYYY-MM-DD]\n</code></pre> <ul> <li><code>pub</code>: Public key information.</li> <li><code>uid</code>: User ID (your identity associated with the key).</li> <li><code>sub</code>: Subkey information.</li> </ul> <p>The \"<code>R</code>\" in \"<code>4096R</code>\" denotes the key's algorithm (RSA in this case), and the key IDs (\"<code>&lt;YourKeyID&gt;</code>\" and \"<code>&lt;SubKeyID&gt;</code>\") are unique identifiers for the keys.</p> <p>When you export the public key, you are essentially exporting the public part of the key pair, which includes the user ID information and the associated public subkey(s). The public key is what you can share with others, allowing them to encrypt messages or verify your digital signatures.</p>","tags":["Programming"]},{"location":"blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/#reference","title":"Reference","text":"<ul> <li>Verified Commits on GitHub from Windows PC ( GPG Keys ) : youtube</li> </ul>","tags":["Programming"]},{"location":"blog/2024/01/05/viewset-vs-apiview/","title":"Viewset vs APIView","text":"","tags":["Drf"]},{"location":"blog/2024/01/05/viewset-vs-apiview/#viewset-vs-apiview","title":"Viewset vs APIView","text":"<p>The differences between APIView and Viewset vary depending on the particular needs and requirements. Therefore, we can provide a code-based example to decide which method should be used:</p> <p></p> <p>Now let\u2019s do the same operations using Viewset:</p> <pre><code>class BlogPostViewSet(viewsets.ModelViewSet):\n    queryset = BlogPost.objects.all()\n    serializer_class = BlogPostSerializer\n</code></pre> <p>At this point, we wrote less code using Viewset compared to the previous example created with APIView. Viewset contains several predefined methods that can be used for multiple operations, making model operations easier. Also, for customized operations, Viewset can be easily extended with extra methods provided by the Django Rest Framework.</p> <p>In addition, routers combined with Viewset can automatically match URLs and associate them with the view class, allowing us to easily perform URL routing. This is especially useful in large-scale projects or projects that work with many models.</p> <pre><code>router = routers.DefaultRouter()\nrouter.register(r'blog-posts', BlogPostViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n</code></pre> <p>In this example, the router element registers our Viewset class and automatically generates the URLs required for the predefined CRUD operations. Thus, you can perform basic CRUD operations by sending GET, POST, PUT, PATCH and DELETE requests to the URL \u201c/blog-posts/\u201d.</p> <p>Conclusion</p> <ul> <li><code>APIView</code> is derived from Django\u2019s base View class, while <code>Viewset</code> is derived from a special <code>ViewSet class</code> of the Django Rest Framework.</li> </ul>","tags":["Drf"]},{"location":"blog/2024/01/05/viewset-vs-apiview/#reference","title":"Reference","text":"<ul> <li>Django APIView vs Viewsets Which one to Choose?</li> <li>APIView vs Viewsets</li> <li>Views vs Generic Views vs ViewSets</li> <li>GenericAPIView and Mixins</li> <li>More views and viewsets: offical docs</li> <li>Generic, Functional Based and Class Based Views in Django REST Framework</li> <li> <p>Difference between views and viewsets</p> </li> <li> <p>Customizing token claims</p> </li> <li> <p>JWT Decoder</p> </li> <li> <p>Viewsets vs Generic Views vs APIView vs Function Based Views: reddit</p> </li> <li>Comprehensive guide to GenericAPIViews in Django REST Framework</li> <li>Django REST Framework: Generics or ModelViewSets?: stackoverflow</li> </ul>","tags":["Drf"]},{"location":"blog/2024/01/05/django-cors/","title":"Django cors","text":"","tags":["Django"]},{"location":"blog/2024/01/05/django-cors/#django-cors","title":"Django cors","text":"<p>django-cors-headers is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS). Adding CORS headers allows your resources to be accessed on other domains.</p> <p>CORS is a mechanism to allow interaction with resources hosted on different domains.</p> <pre><code>$ pip install django-cors-headers\n\n$ pip install django djangorestframework django-cors-headers\n</code></pre> <p>and then add it to your installed apps:</p> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"corsheaders\",\n    ...,\n]\n</code></pre> <p>You will also need to add a middleware class to listen in on responses:</p> <pre><code>MIDDLEWARE = [\n    ...,\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    ...,\n]\n</code></pre> <p><code>CorsMiddleware</code> should be placed as high as possible, especially before any middleware that can generate responses such as Django\u2019s <code>CommonMiddleware</code> or Whitenoise\u2019s <code>WhiteNoiseMiddleware</code>. If it is not before, it will not be able to add the CORS headers to these responses.</p> <p>Configuration</p> <p>Configure the middleware\u2019s behaviour in your Django settings. You must set at least one of three following settings:</p> <ul> <li><code>CORS_ALLOWED_ORIGINS</code></li> <li><code>CORS_ALLOWED_ORIGIN_REGEXES</code></li> <li><code>CORS_ALLOW_ALL_ORIGINS</code></li> </ul> <p>Example:</p> <pre><code>CORS_ALLOWED_ORIGINS = [\n    \"https://example.com\",\n    \"https://sub.example.com\",\n    \"http://localhost:8080\",\n    \"http://127.0.0.1:9000\",\n]\n</code></pre> <p>CORS_ORIGIN_WHITELIST <code>Deprecated</code> VS CORS_ALLOWED_ORIGINS</p> <ul> <li>before version <code>3.0.0</code> he setting used to whitelist allowed origins was <code>CORS_ORIGIN_WHITELIST</code>.</li> <li>In version <code>3.0.0</code> and later, the naming convention was changed to <code>CORS_ALLOWED_ORIGINS</code> for consistency with other Django settings.</li> <li>You should use <code>CORS_ALLOWED_ORIGINS</code> in more recent versions of <code>django-cors-headers</code>:</li> </ul>","tags":["Django"]},{"location":"blog/2024/01/05/django-cors/#reference","title":"Reference","text":"<ul> <li>django-cors-headers</li> <li>Django CORS Guide</li> <li> <p>whitelist cors</p> </li> <li> <p>How to Integrate ReactJS with Django Framework</p> </li> <li>Using React with Django to create an app</li> <li>How to Integrate React and Django framework, in a simpler way</li> <li>what are the possible ways to integrate react: reddit</li> <li>How to build a React application in a Django project </li> <li>Integrating Django with Reactjs using Django REST Framework</li> </ul>","tags":["Django"]},{"location":"blog/2024/01/01/managing-development-env-in-django/","title":"Managing development .env in Django","text":"","tags":["Django"]},{"location":"blog/2024/01/01/managing-development-env-in-django/#managing-development-env-in-django","title":"Managing development <code>.env</code> in Django","text":"<p>Python-dotenv reads key-value pairs from a <code>.env</code> file and can set them as environment variables. It helps in the development of applications following the 12-factor principles.</p> <pre><code>$ pip install python-dotenv\n</code></pre> <p>Create a <code>.env.example</code> file in the root file.</p> <p>.env.example</p> <pre><code>SECRET_KEY=\nDB_NAME=\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>while in development, copy and paste <code>.env.example</code>, new file called <code>.env</code></p> <p>.env</p> <pre><code>SECRET_KEY=\"your secret key inside quotes\"\nDB_NAME=db-name\nDB_USER=root\nDB_PASS=\nDB_HOST=localhost\nDB_PORT=3306\n</code></pre> <p>Update the <code>settings.py</code> file in project</p> <p>settings.py</p> <pre><code>from dotenv import load_dotenv\nfrom datetime import timedelta\nimport os\n\n# load environment variables from a file named .env into the environment of your application.\nload_dotenv()\n\n# added\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n\n# updated the databse\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS'),\n        'HOST': os.environ.get('DB_HOST'),\n        'PORT': os.environ.get('DB_PORT'),\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    }\n}\n</code></pre> <p>That's it now you're good to go ;)</p>","tags":["Django"]},{"location":"blog/2024/01/01/managing-development-env-in-django/#reference","title":"Reference","text":"<ul> <li>python-dotenv</li> <li>django key generator online</li> </ul>","tags":["Django"]},{"location":"blog/2024/01/06/drf-yasg-swagger/","title":"drf-yasg: Swagger","text":"","tags":["Python","Drf"]},{"location":"blog/2024/01/06/drf-yasg-swagger/#drf-yasg-swagger","title":"drf-yasg: Swagger","text":"<p><code>drf-yasg</code> (Yet Another Swagger Generator) is a popular Django package that generates Swagger/OpenAPI documentation for your Django REST framework APIs. It allows you to have a clean, interactive, and dynamic API documentation that makes it easy for developers to understand and test your API.</p> <ol> <li> <p>Install drf-yasg:</p> <pre><code># Install the package using pip:\n\n$ pip install drf-yasg\n</code></pre> </li> <li> <p>Add <code>drf_yasg</code> to INSTALLED_APPS:</p> <pre><code># Open your settings.py file and add drf_yasg to the INSTALLED_APPS:\n\nINSTALLED_APPS = [\n    # ...\n    'drf_yasg',\n    # ...\n]\n</code></pre> </li> <li> <p>Configure <code>drf-yasg</code> in your project's <code>urls.py</code>:</p> <pre><code># Add the following to your project's urls.py:\n\nfrom django.urls import path, re_path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"Your API Title\",\n        default_version='v1',\n        description=\"Your API description\",\n        terms_of_service=\"https://www.yourapp.com/terms/\",\n        contact=openapi.Contact(email=\"contact@yourapp.com\"),\n        license=openapi.License(name=\"Your License\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),\n)\n\nurlpatterns = [\n    # ... your other URL patterns\n    re_path(r'^swagger(?P&lt;format&gt;\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n</code></pre> <p>Replace \"Your API Title\" and other information in the openapi.Info section with your actual API details.</p> </li> <li> <p>Run your Django development server:</p> <pre><code># Start your Django development server:\n\n$ python manage.py runserver\n</code></pre> <p>Now you can access the Swagger documentation by navigating to http://127.0.0.1:8000/swagger/ or http://127.0.0.1:8000/redoc/ in your web browser.</p> <ul> <li>The Swagger UI is available at the /swagger/ endpoint.</li> <li>The ReDoc UI is available at the /redoc/ endpoint.</li> </ul> </li> <li> <p>Explore and Test Your API:</p> <p>Once in the Swagger or ReDoc UI, you can explore your <code>API's endpoints</code>, view the available methods, and even test your API directly from the interface.</p> <p>That's it! You've now integrated <code>drf-yasg</code> into your Django project, providing interactive API documentation for your RESTful API.</p> </li> </ol> <p>Notes</p> <p>Keep in mind Django Rest Swagger is now considered deprecated in favor of its successor, <code>drf-yasg</code>. You might want to consider using <code>drf-yasg</code> for newer projects. To use <code>drf-yasg</code>, follow my instructions above.</p>","tags":["Python","Drf"]},{"location":"blog/2024/01/06/drf-yasg-swagger/#reference","title":"Reference","text":"<ul> <li>drf-yasg: github</li> </ul>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":"","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#blog-crud-application-using-drf-viewsets","title":"Blog CRUD Application Using DRF \u2014 Viewsets","text":"<p>Django Rest Framework is a powerful tool that allows you to easily build RESTful APIs using Django. By defining your models, serializers, views, and URLs, you can quickly create a blog post application that allows users to create, read, update, and delete blog posts via a web API.</p> <pre><code># Installing Django and Django REST framework at once\n\n$ pip install django djangorestframework\n</code></pre> <p>In Django Rest Framework, a ViewSet is a class-based view that provides a set of common actions (i.e., CRUD operations) for a specific model or queryset.</p> <p>ViewSets allow you to define your API endpoints in a more concise and structured way, as they provide a set of default methods that handle common HTTP operations, such as GET, POST, PUT, PATCH, and DELETE.</p> <p>There are two main types of ViewSets in Django Rest Framework: ModelViewSet and ReadOnlyModelViewSet.</p> <p>The ModelViewSet is the most commonly used ViewSet, as it provides all the actions that are required to implement a full CRUD API. It includes methods such as list, create, retrieve, update, and destroy, which correspond to the HTTP GET, POST, GET (single object), PUT/PATCH, and DELETE methods, respectively.</p> <p>You can also override these default methods to add custom behavior, such as filtering or authentication.</p> <p>Today, We are going to check ModelViewSets</p>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#create-a-django-project","title":"Create a django-project","text":"<p>I have create a project named \"api\".</p> <pre><code>$ django-admin startproject api\n</code></pre> <p>Now, let create a new app called \"books\".</p> <pre><code>$ cd api\n\n$ py manage.py startapp books\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#books-app","title":"books <code>app</code>","text":"<pre><code># models.py\n\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=150)\n\n    class Meta:\n        db_table = \"Book\"\n\n    def __str__(self):\n        return self.title\n</code></pre> <pre><code># serializers.py\n\nfrom rest_framework import serializers\nfrom .models import Book\n\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = '__all__'\n</code></pre> <pre><code># views.py\n\nfrom rest_framework import viewsets\nfrom .models import Book\nfrom .serializers import BookSerializer\n\nclass BookViewSet(viewsets.ModelViewSet):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n</code></pre> <pre><code># urls.py\n\nfrom rest_framework.routers import DefaultRouter\nfrom django.urls import include, path\nfrom .views import BookViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'book_post', BookViewSet)\n\nurlpatterns = [\n    path('', include(router.urls))\n]\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#api-project","title":"api <code>project</code>","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n    # apps\n    path('api/blog/', include('apps.blogs.urls')),\n    path('api/member/', include('apps.privateapi.urls')),\n    path('api/books/', include('apps.books.urls')),\n]\n</code></pre>","tags":["Python","Drf"]},{"location":"blog/2024/01/03/blog-crud-application-using-drf--viewsets/#reference","title":"Reference","text":"<ul> <li>Django REST Framework Views - ViewSets</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>","tags":["Python","Drf"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/","title":"Mastering Collaboration: A Guide to Git Branching Strategies","text":"","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#mastering-collaboration-a-guide-to-git-branching-strategies","title":"Mastering Collaboration: A Guide to Git Branching Strategies","text":"<p>Git, a powerful version control system, provides a variety of branching strategies to help development teams manage codebase changes, collaborate efficiently, and streamline the release process. Choosing the right branching strategy is crucial for maintaining code stability and facilitating collaboration within a team. In this blog post, we'll explore some common Git branching strategies and discuss their use cases.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#what-are-git-branching-strategies","title":"What are GIT branching strategies?","text":"<p>GIT branching strategies are patterns or approaches that tech teams use to organize &amp; manage their code through different branches in a GIT system.</p> <p>Each strategy defines the rules &amp; guidelines for the creation, naming &amp; merging the branches for facilitating collaboration, stability, &amp; release management.</p> <p></p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#1-feature-branching","title":"1. Feature Branching","text":"<p>Overview:</p> <p>Feature branching is a straightforward strategy where each new feature or user story is developed in its own branch. This approach isolates changes related to a specific feature, making it easier to manage and integrate.</p> <p></p> <p>Workflow:</p> <ol> <li>Developers create a new branch for each feature (<code>feature/feature-name</code>).</li> <li>Work is done exclusively in the feature branch.</li> <li>Once the feature is complete and tested, it's merged into the main development branch (<code>develop</code> or <code>main</code>).</li> </ol> <p>Feature branching promotes parallel development and allows teams to work on multiple features simultaneously without interfering with each other.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#2-gitflow","title":"2. Gitflow","text":"<p>Overview:</p> <p>Gitflow is a branching model that defines specific branches for different purposes, emphasizing a structured and organized workflow.</p> <p></p> <p>Branches:</p> <ul> <li><code>main</code>: Represents the production-ready code.</li> <li><code>develop</code>: Integration branch for ongoing development.</li> <li><code>feature/*</code>: Feature branches for new features.</li> <li><code>release/*</code>: Branches for preparing releases.</li> <li><code>hotfix/*</code>: Branches for fixing critical issues in production.</li> </ul> <p>Workflow:</p> <ol> <li>Developers work on feature branches.</li> <li>Features are merged into <code>develop</code> when complete.</li> <li>Releases are prepared in <code>release</code> branches.</li> <li>Hotfixes are handled in <code>hotfix</code> branches.</li> </ol> <p>Gitflow provides a clear separation of feature development, release preparation, and hotfixes, making it suitable for projects with scheduled releases.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#3-github-flow","title":"3. GitHub Flow","text":"<p>Overview:</p> <p>GitHub Flow is a lightweight, continuous delivery-oriented branching strategy, emphasizing simplicity and continuous integration.</p> <p></p> <p>Workflow:</p> <ol> <li><code>main</code> is always deployable.</li> <li>Developers create a feature branch for each task.</li> <li>Feature branches are merged into <code>main</code> via pull requests.</li> <li>Continuous integration (CI) ensures the stability of the <code>main</code> branch.</li> </ol> <p>GitHub Flow focuses on small, frequent releases and encourages continuous delivery practices.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#4-release-branching","title":"4. Release Branching","text":"<p>Overview:</p> <p>Release branching involves creating branches specifically for releases, providing a controlled environment for final testing.</p> <p>Workflow:</p> <ol> <li>Develop new features in feature branches.</li> <li>Create a release branch when preparing for a release.</li> <li>Perform final testing on the release branch.</li> <li>Merge the release branch into <code>main</code> and tag the release.</li> </ol> <p>Release branching ensures that the <code>main</code> branch always contains stable code, and releases can be thoroughly tested before deployment.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#5-trunk-based-development","title":"5. Trunk-Based Development","text":"<p>Overview:</p> <p>Trunk-Based Development promotes development directly on the main branch, emphasizing small, frequent integrations.</p> <p></p> <p>Workflow:</p> <ol> <li>Developers commit changes directly to the <code>main</code> branch.</li> <li>Small batches of changes are continuously integrated.</li> <li>Feature toggles or feature flags are used to hide incomplete features.</li> </ol> <p>Trunk-Based Development encourages developers to work on short-lived branches or directly on the main branch, enabling rapid releases and quick feedback loops.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#conclusion","title":"Conclusion","text":"<p>Choosing the right Git branching strategy is a critical decision that depends on factors such as team size, project complexity, release frequency, and collaboration needs. The strategies discussed here are just a starting point, and teams often adapt or combine them based on their unique requirements.</p> <p>Effective collaboration and version control are at the heart of successful software development. By mastering Git branching strategies, teams can navigate complex development workflows with confidence, ensuring a smooth and efficient collaborative coding experience. Whether it's feature branching, Gitflow, GitHub Flow, release branching, or trunk-based development, the key is to align the chosen strategy with the team's goals and project characteristics, ultimately leading to a more streamlined and effective development process.</p>","tags":["Programming"]},{"location":"blog/2024/01/17/mastering-collaboration-a-guide-to-git-branching-strategies/#reference","title":"Reference","text":"<ul> <li>git branching strategies</li> <li>What Are Different Git Branching Strategies</li> <li>Most Popular Branching Strategies in Git</li> </ul>","tags":["Programming"]},{"location":"blog/2024/01/15/how-to-pull-all-branches-from-a-remote-repository-in-github-/","title":"How to pull all branches from a remote repository in GitHub ?","text":"","tags":["Programming"]},{"location":"blog/2024/01/15/how-to-pull-all-branches-from-a-remote-repository-in-github-/#how-to-pull-all-branches-from-a-remote-repository-in-github","title":"How to pull all branches from a remote repository in GitHub ?","text":"<p><code>git fetch --all</code> command fetches all branches from the remote repository without merging them into your local branches.</p> <p>To pull all branches from a remote repository in GitHub, you can follow these steps:</p> <ol> <li> <p>Clone the Repository:</p> <p>If you haven't already cloned the repository, start by cloning it using the following command:</p> bash<pre><code>git clone &lt;repository_url&gt;\n</code></pre> <p>Replace <code>&lt;repository_url&gt;</code> with the actual URL of the GitHub repository.</p> </li> <li> <p>Navigate to the Repository Directory:</p> <p>Change into the repository directory:</p> bash<pre><code>cd &lt;repository_directory&gt;\n</code></pre> <p>Replace <code>&lt;repository_directory&gt;</code> with the name of the local directory where the repository was cloned.</p> </li> <li> <p>Fetch All Branches:</p> <p>Use the following command to fetch all branches from the remote repository:</p> bash<pre><code>git fetch --all\n</code></pre> <p>This command fetches all branches from the remote repository without merging them into your local branches.</p> </li> <li> <p>Checkout Each Branch:</p> <p>To have a local copy of all branches, you need to check out each branch. You can iterate through all remote branches and create local tracking branches for them:</p> bash<pre><code>git branch -a | grep remotes/origin | grep -v HEAD | sed 's#^.*remotes/origin/##' | xargs -I {} git checkout -b {}\n</code></pre> <p>This command lists all remote branches, filters out the HEAD branch, and creates a local branch for each remote branch.</p> </li> </ol> <p>Now, your local repository should have all branches from the remote GitHub repository. Keep in mind that this approach creates local branches that track the remote branches, so you can easily switch between them using <code>git checkout</code>.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/","title":"Mastering Git: Understanding --track and --set-upstream","text":"","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#mastering-git-understanding-track-and-set-upstream","title":"Mastering Git: Understanding <code>--track</code> and <code>--set-upstream</code>","text":"<p>Git is a powerful version control system that allows developers to manage their source code efficiently. Whether you're a seasoned developer or just getting started, understanding Git commands is crucial for effective collaboration and version control. In this blog post, we'll explore two Git commands: <code>--track</code> and <code>--set-upstream</code> (or its shorthand <code>-u</code>) that are used for setting up tracking relationships between local and remote branches.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#-track-creating-local-branches-with-tracking","title":"<code>--track</code>: Creating Local Branches with Tracking","text":"<p>The <code>--track</code> option is commonly used with the <code>git checkout</code> command to create a new local branch and set up tracking information in a single step. This is particularly useful when you want to work on a feature or bug fix that corresponds to a remote branch. Let's dive into a scenario:</p> <p>Scenario: Creating a New Local Branch and Tracking a Remote Branch</p> bash<pre><code>git checkout --track origin/feature-branch\n</code></pre> <p>In this scenario, we are creating a new local branch named feature-branch and want it to track the corresponding remote branch <code>origin/feature-branch</code>. The <code>--track</code> option ensures that the local branch is set up to track changes in the remote branch.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#-set-upstream-or-u-establishing-upstream-relationships","title":"<code>--set-upstream</code> (or <code>-u</code>): Establishing Upstream Relationships","text":"<p>The <code>--set-upstream</code> (or its shorthand <code>-u</code>) option is often used with the git push command to set or change the upstream branch for an existing local branch. This establishes a tracking relationship between the local and remote branches, allowing for seamless collaboration. Let's explore some scenarios:</p> <p>Scenario 1: Setting Upstream for an Existing Local Branch</p> bash<pre><code>git push -u origin develop\n</code></pre> <p>In this scenario, we have an existing local branch named develop, and we want to set its upstream branch to <code>origin/develop</code> for future <code>git pull</code> and <code>git push</code> operations. The <code>-u</code> option sets up the tracking relationship.</p> <p>Scenario 2: Updating the Upstream Branch for an Existing Local Branch</p> bash<pre><code>git branch --set-upstream-to=origin/feature-branch feature-branch\n</code></pre> <p>Here, we want to change the upstream branch for an existing local branch named <code>feature-branch</code> to <code>origin/feature-branch</code>. The <code>--set-upstream-to</code> option updates the upstream branch for the specified local branch.</p> <p>Scenario 3: Pushing Changes and Setting Upstream in One Step</p> bash<pre><code>git push -u origin new-feature-branch\n</code></pre> <p>In this scenario, we're pushing a new local branch named new-feature-branch to the remote repository for the first time and want to set its upstream branch simultaneously. The <code>-u</code> option accomplishes both tasks in a single command.</p>","tags":["Programming"]},{"location":"blog/2024/01/15/mastering-git-understanding---track-and---set-upstream/#conclusion","title":"Conclusion","text":"<p>Understanding the nuances of <code>--track</code> and <code>--set-upstream</code> is essential for streamlining your Git workflow. Whether you're creating new branches or managing existing ones, these commands help establish and maintain tracking relationships, making collaboration with remote repositories more efficient.</p> <p>Notes</p> <p>The choice between them often comes down to personal preference and the desire for brevity in commands</p>","tags":["Programming"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/02/01/understanding-javascript-array-methods-mutating-vs-non-mutating/","title":"Understanding JavaScript Array Methods: Mutating vs. Non-Mutating","text":"","tags":["Programming"]},{"location":"blog/2024/02/01/understanding-javascript-array-methods-mutating-vs-non-mutating/#understanding-javascript-array-methods-mutating-vs-non-mutating","title":"Understanding JavaScript Array Methods: Mutating vs. Non-Mutating","text":"<p>When working with arrays in JavaScript, it's crucial to understand the distinction between mutating and non-mutating array methods. This differentiation plays a significant role in how arrays are manipulated and can greatly impact the behavior of your code.</p>","tags":["Programming"]},{"location":"blog/2024/02/01/understanding-javascript-array-methods-mutating-vs-non-mutating/#mutating-array-methods","title":"Mutating Array Methods:","text":"<p>Mutating array methods are those that modify the original array directly. They alter the array's contents in place, without creating a new array.</p> <p>Some commonly used mutating array methods include:</p> <ol> <li> <p><code>push()</code> and <code>pop()</code>: These methods add and remove elements from the end of the array, respectively.</p> </li> <li> <p><code>shift()</code> and <code>unshift()</code>: They add and remove elements from the beginning of the array, respectively.</p> </li> <li> <p><code>splice()</code>: This method can add, remove, or replace elements at any position within the array.</p> </li> <li> <p><code>sort()</code> and <code>reverse()</code>: These methods reorder the elements of the array.</p> </li> <li> <p><code>fill()</code> and <code>copyWithin()</code>: They modify elements within the array based on specified criteria.</p> </li> <li> <p><code>forEach()</code>: It iterates over each element of the array and allows you to perform actions on them.</p> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/02/01/understanding-javascript-array-methods-mutating-vs-non-mutating/#non-mutating-array-methods","title":"Non-Mutating Array Methods:","text":"<p>Non-mutating array methods, on the other hand, do not modify the original array. Instead, they return a new array with the desired modifications, leaving the original array unchanged.</p> <p>Some common non-mutating array methods include:</p> <ol> <li> <p><code>concat()</code>:     This method combines two or more arrays and returns a new array.</p> </li> <li> <p><code>slice()</code>:     It returns a portion of the array without modifying the original array (returns a new array).</p> </li> <li> <p><code>filter()</code> and <code>map()</code>:     These methods create new arrays based on specific criteria or transformations applied to the original array's elements.</p> </li> <li> <p><code>reduce()</code> and <code>reduceRight()</code>:     They reduce the array to a single value based on a provided function.</p> </li> <li> <p><code>some()</code> and <code>every()</code>:     These methods check if certain conditions are met by at least one or all elements in the array, respectively.</p> </li> <li> <p><code>indexOf()</code> and <code>lastIndexOf()</code>:     They find the index of a specified element within the array.</p> </li> </ol> <p>Understanding the difference between <code>mutating</code> and <code>non-mutating</code> array methods is crucial for writing efficient and bug-free JavaScript code. Choosing the appropriate method based on your requirements can lead to cleaner, more maintainable code and prevent unintended side effects.</p>","tags":["Programming"]},{"location":"blog/2024/02/01/understanding-javascript-array-methods-mutating-vs-non-mutating/#conclusion","title":"Conclusion","text":"<p>In summary, mutating array methods directly modify the original array, while non-mutating array methods return a new array without altering the original one. By leveraging these methods effectively, you can harness the full power of JavaScript arrays in your projects.</p>","tags":["Programming"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/","title":"Managing Multiple SSH Keys for Secure and Efficient Remote Access","text":"","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#managing-multiple-ssh-keys-for-secure-and-efficient-remote-access","title":"Managing Multiple SSH Keys for Secure and Efficient Remote Access","text":"<p>In the world of secure remote access, SSH (Secure Shell) plays a pivotal role in connecting to servers and managing systems. As developers and system administrators, it's common to have multiple SSH keys for different projects or environments. In this blog post, we will explore strategies for effectively managing and using multiple SSH keys to enhance security and streamline workflows.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#why-multiple-ssh-keys","title":"Why Multiple SSH Keys?","text":"<p>Before diving into the how-tos, let's briefly discuss why you might need multiple SSH keys. Different projects, clients, or services may require separate authentication credentials for security and access control. Having distinct SSH keys allows you to compartmentalize access and mitigate potential security risks.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#method-1-using-the-i-option","title":"Method 1: Using the -i Option","text":"<p>The simplest and most direct method is to use the -i option with the ssh command. This option specifies the path to the private key you want to use for authentication. Here's an example:</p> <pre><code>ssh -i /path/to/your/private/key/file user@hostname\n</code></pre> <p>Replace <code>/path/to/your/private/key/file</code> with the actual path to your private key and <code>user@hostname</code> with the target server details.</p> <p>This method is effective for one-off connections, but it may become cumbersome when dealing with multiple connections or if you frequently switch between keys.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#method-2-ssh-configuration-file","title":"Method 2: SSH Configuration File","text":"<p>A more elegant and scalable approach is to leverage the SSH configuration file (<code>~/.ssh/config</code>). This file allows you to define host-specific configurations, including the private key to be used for authentication.</p> <ol> <li> <p>Open or create the <code>~/.ssh/config</code> file using a text editor of your choice:</p> <pre><code>nano ~/.ssh/config\n</code></pre> </li> <li> <p>Add an entry for each host or domain along with the <code>IdentityFile</code> option specifying the path to the corresponding private key:</p> <pre><code>Host example.com\n    IdentityFile ~/.ssh/id_rsa_example\n    User your_username\n</code></pre> <p>Replace <code>example.com</code> with the actual hostname, <code>~/.ssh/id_rsa_example</code> with the path to your private key, and <code>your_username</code> with your actual username.</p> </li> <li> <p>Save and exit the editor.</p> </li> <li> <p>Now, you can connect to the specified host using:</p> <pre><code>ssh example.com\n</code></pre> <p>This method offers a clean and organized way to manage multiple SSH keys, especially when dealing with numerous projects or servers.</p> </li> </ol> <p>Notes</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#configure-ssh-config-file","title":"Configure SSH config file:","text":"<p>Create or edit the SSH config file at <code>~/.ssh/config</code> using a text editor like <code>nano</code> or <code>vim</code>.</p> <pre><code>nano ~/.ssh/config\n</code></pre> <p>Add the following configuration for each GitHub account:</p> bash<pre><code># Personal account\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_personal\n\n# Work account\nHost github-work\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_work\n</code></pre> <p>Configuration</p> <ol> <li> <p>Host: </p> <p>This is a custom name you choose to represent the remote server or service. It's like an alias for the actual host you're connecting to. You can name it anything you want, but it's typically chosen to be something memorable or descriptive.</p> </li> <li> <p>HostName: </p> <p>This specifies the <code>actual hostname</code> or <code>IP address</code> of the remote server. For GitHub, the hostname is typically <code>github.com</code>. You can use any hostname that suits your needs, but it should resolve to the correct server.</p> </li> <li> <p>User: </p> <p>This specifies the <code>username</code> you'll use when connecting to the remote server. For GitHub, the username is usually <code>git</code>. This is because when you use SSH to connect to GitHub, you authenticate as the <code>git</code> user. You can't change this unless GitHub allows you to connect with a different username, which is not the case for GitHub.</p> </li> </ol>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#test-your-connections","title":"Test your connections:","text":"<p>Test your connections by running the following commands:</p> <pre><code>ssh -T git@github.com\nssh -T git@github-work\n</code></pre> <p>or, you can only <code>&lt;HOST&gt;</code></p> <pre><code>ssh -T github-work\n</code></pre> <p>You should see messages indicating successful authentication.</p> <p>Now, you should be able to clone, push, and pull repositories from both GitHub accounts using the configured SSH keys. When you clone a repository, use the appropriate hostname defined in your SSH config file, such as <code>github-work</code> for the work account. For example:</p> bash<pre><code>git clone git@github-work:username/repo.git\n</code></pre>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/21/managing-multiple-ssh-keys-for-secure-and-efficient-remote-access/#conclusion","title":"Conclusion","text":"<p>Effectively managing multiple SSH keys is crucial for maintaining a secure and efficient workflow. Whether you choose the straightforward <code>-i</code> option or the more sophisticated SSH configuration file, the key is to organize your keys logically and avoid potential authentication mishaps. By implementing these strategies, you can enhance your remote access security and streamline your daily operations.</p> <p>Remember, security is a priority, and adopting best practices in managing SSH keys contributes significantly to a robust and reliable system.</p>","tags":["Programming","Github","SSH"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/","title":"Automatically set Bearer Token in global variable postman after Login api","text":"","tags":["Postman"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#automatically-set-bearer-token-in-global-variable-postman-after-login-api","title":"Automatically set Bearer Token in global variable postman after Login api","text":"<p>In Postman, <code>pm</code> is a built-in JavaScript object that provides access to the Postman API. It allows you to interact with and manipulate the data and features within the Postman environment during the execution of pre-request scripts and tests.</p> <p>ALL YOU NEED 2 lines of code</p> <pre><code>// Stores the access token in an environment or global variable\nvar accessToken = pm.response.json().access;\n\n// It set in the global enviroment variable named `accessToken`\npm.globals.set(\"accessToken\", accessToken);\n\n// if you want to set in local enviroment variable named `TOKEN`\npm.environment.set(\"TOKEN\", token);\n</code></pre> <p>Here are some common uses of <code>pm</code> in Postman:</p> <ul> <li> <p><code>pm.environment</code>: This property allows you to access and manipulate environment variables. For example, you can use pm.environment.get(\"variableName\") to retrieve the value of an environment variable.</p> </li> <li> <p><code>pm.globals</code>: This property is similar to pm.environment, but it deals with global variables.</p> </li> <li> <p><code>pm.request</code>: This property provides information about the current request being sent, allowing you to modify request details dynamically.</p> </li> <li> <p><code>pm.response</code>: This property provides information about the response received after sending a request, allowing you to extract data or perform tests on the response.</p> </li> <li> <p><code>pm.sendRequest</code>: This method allows you to send additional HTTP requests from within your scripts.</p> </li> </ul> <p>Here's a simple example using pm.environment:</p> <pre><code>// Get the value of the \"TOKEN\" variable in the current environment\nvar token = pm.environment.get(\"TOKEN\");\n\n// Log the token to the console\nconsole.log(\"Token:\", token);\n</code></pre> <p>In this example, <code>pm.environment.get(\"TOKEN\")</code> is used to retrieve the value of the \"TOKEN\" variable in the current environment. The retrieved value is then logged to the console using <code>console.log</code>.</p> <p>Testing in Postman</p> <p>The Tests tab allows for any post-processing after a request is sent and includes the ability to write tests for assessing response data. The Test tab sandbox has the Chai.js library built in, so you can use Chai's behavior-driven development (BDD) syntax to create readable test assertions.</p> <pre><code>pm.test(\"Response status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n\npm.test(\"Response has access and refresh properties\", function () {\n  var res = pm.response.json();\n  pm.expect(res).to.have.property(\"access\");\n  pm.expect(res).to.have.property(\"refresh\");\n});\n\npm.test(\"Access property has a length greater than 0\", function () {\n  var res = pm.response.json();\n  pm.expect(res.access).to.have.lengthOf.above(0);\n});\n</code></pre>","tags":["Postman"]},{"location":"blog/2024/01/04/automatically-set-bearer-token-in-global-variable-postman-after-login-api/#reference","title":"Reference","text":"<ul> <li>Set Bearer Token as Environment Variable in Postman for All APIs</li> <li>How do i set up a bearer token in postman from an environment variable?</li> <li> <p>How to automatically set a Bearer Token for your Postman requests?</p> </li> <li> <p>Write API test scripts in Postman</p> </li> <li>Postman Test script examples</li> <li>Api Testing in postmen </li> </ul>","tags":["Postman"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/","title":"How to Set Up a Virtual Environment in Python","text":"","tags":["Python"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/#how-to-set-up-a-virtual-environment-in-python","title":"How to Set Up a Virtual Environment in Python","text":"<p>A Python virtual environment is a self-contained directory that contains its own Python interpreter and a set of libraries and packages. This environment is isolated from the global Python environment on your system, allowing you to manage project-specific dependencies without affecting other projects or the system-wide Python installation.</p> <p>The primary purpose of a virtual environment is to create an isolated environment for a specific Python project, ensuring that the project's dependencies are consistent and do not interfere with other projects or the system.</p> <p><code>venv</code> is a built-in module in Python that provides support for creating lightweight, isolated Python environments.</p> <ul> <li><code>venv</code> is a standard Python module for creating virtual environments.</li> <li><code>pyenv</code> is a separate tool for managing multiple Python versions.</li> <li><code>pyenv-virtualenv</code> is a plugin for pyenv that extends its functionality to include virtual environment management.</li> </ul> <p>The most commonly used tools for creating virtual environments in Python are <code>venv</code> (built into Python 3.3 and later) and <code>virtualenv</code> (a third-party package). These tools allow you to:</p> venvvirtualenvconda <ul> <li> <p>Description:</p> <p><code>venv</code> is a built-in module in Python 3.3 and later, and it's used for creating lightweight, isolated Python environments. If you're using Python 3.3 or later, <code>venv</code> is a good choice for managing virtual environments.</p> </li> <li> <p>Strengths:</p> <ul> <li>Simplicity and ease of use.</li> <li>Built into the Python standard library.</li> <li>Ideal for basic use cases and projects with straightforward requirements.</li> </ul> </li> <li> <p>Commands:</p> bash<pre><code># Create a virtual environment\npython -m venv venv\n\n# OR:: Replace \"myenv\" with your preferred environment name\n# To Create Specific python version\npython3.8 -m venv myenv\n\n# Activate the virtual environment\n\n# On Windows\n.\\myenv\\Scripts\\activate\n\n# On Unix or MacOS\nsource myenv/bin/activate\n</code></pre> <p>Replace <code>3.8</code> with the desired Python version. The <code>-m venv</code> command uses the <code>venv</code> module to create the virtual environment. This will create a virtual environment with the specified Python version.</p> </li> </ul> <ul> <li> <p>Description</p> <p><code>virtualenv</code> is a third-party Python package that provides tools for creating isolated Python environments. It allows you to create multiple virtual environments on a single system, each with its own Python interpreter and set of installed packages.</p> <p><code>virtualenv</code> is not included in the Python standard library, so you need to install it separately using  <code>pip</code>.</p> </li> <li> <p>Strength</p> <ul> <li>Compatible with both <code>Python 2</code> and <code>Python 3</code>, providing flexibility for projects on different Python versions.</li> <li>Allows customization during virtual environment creation, such as specifying the Python interpreter version and additional options.</li> <li>Offers high-level isolation, allowing for independent Python environments for different projects.</li> </ul> </li> <li> <p>Commands</p> bash<pre><code># Install virtualenv if not already installed\npip install virtualenv\n\n# Replace \"myenv\" with your preferred environment name\nvirtualenv myenv\n\n# OR:: Replace \"myenv\" with your preferred environment name\nvirtualenv --python=python3.8 myenv\n\n# Activate the virtual environment\n\n# On Windows\n.\\myenv\\Scripts\\activate\n\n# On Unix or MacOS\nsource myenv/bin/activate\n</code></pre> <p>Replace <code>3.8</code> with the desired Python version. The <code>--python</code> option allows you to specify the Python interpreter for the virtual environment.</p> </li> </ul> <ul> <li> <p>Description:</p> <p>Conda is a cross-platform package manager and environment manager that can install, run, and update packages and their dependencies. It is not Python-specific and can manage environments for multiple programming languages.</p> </li> <li> <p>Strengths</p> <ul> <li>Cross-language support (not limited to Python).</li> <li>Manages both Python packages and non-Python packages.</li> <li>Handles complex dependencies and environments effectively.</li> </ul> </li> <li> <p>Commands</p> bash<pre><code># Create a conda environment\nconda create --name myenv\n\n# OR::\nconda create --name my_env python=3.8\n\n# Activate the conda environment\nconda activate myenv\n\n# Deactivate the conda environment\nconda deactivate\n</code></pre> <p>Conda can be particularly useful when working on projects with dependencies that extend beyond Python, or when you need to manage environments with specific versions of non-Python libraries.</p> </li> </ul> <p>Notes</p> <p>Choose the approach that fits your preferences and requirements. Keep in mind that <code>venv</code> is included in the Python standard library, while <code>virtualenv</code> is a separate package that needs to be installed. If you're using a specific Python version, it's crucial to ensure that version is installed on your system before creating the virtual environment.</p>","tags":["Python"]},{"location":"blog/2024/01/18/how-to-set-up-a-virtual-environment-in-python/#reference","title":"Reference","text":"<ul> <li> <p>What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv</p> </li> <li> <p>Understanding Python virtual environments using venv and virtualenv</p> </li> </ul>","tags":["Python"]},{"location":"blog/2024/01/18/react-router-v6-guide/","title":"React Router v6 Guide","text":"","tags":["Programming"]},{"location":"blog/2024/01/18/react-router-v6-guide/#react-router-v6-guide","title":"React Router v6 Guide","text":"<p>React Router is a popular library for handling navigation and routing in React applications. It enables the creation of single-page applications (SPAs) by allowing developers to define the navigation structure of their applications, rendering different components based on the URL, and managing browser history.</p> <ol> <li> <p>Installation:</p> <p>Make sure you have React and React DOM installed, and then install React Router:</p> bash<pre><code>npm install react-router-dom\n</code></pre> </li> <li> <p>Basic Usage:</p> <p>Import necessary components:</p> jsx<pre><code>import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\n</code></pre> <p>Wrap your application with the <code>Router</code> component:</p> jsx<pre><code>function App() {\n    return (\n        &lt;Router&gt;\n        &lt;Routes&gt;\n            &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n            &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n        &lt;/Routes&gt;\n        &lt;/Router&gt;\n    );\n}\n</code></pre> </li> <li> <p>Nested Routes:</p> <p>You can nest Route components to create nested routes:</p> jsx<pre><code>function App() {\n    return (\n        &lt;Router&gt;\n        &lt;Routes&gt;\n            &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n            &lt;Route path=\"/dashboard\" element={&lt;Dashboard /&gt;}&gt;\n            &lt;Route path=\"profile\" element={&lt;Profile /&gt;} /&gt;\n            &lt;Route path=\"settings\" element={&lt;Settings /&gt;} /&gt;\n            &lt;/Route&gt;\n        &lt;/Routes&gt;\n        &lt;/Router&gt;\n    );\n}\n</code></pre> </li> <li> <p>Route Parameters:</p> <p>You can capture parameters from the URL using <code>`:param</code> syntax:</p> jsx<pre><code>&lt;Route path=\"/user/:id\" element={&lt;UserProfile /&gt;} /&gt;\n</code></pre> <p>Access the parameter in the component:</p> jsx<pre><code>import { useParams } from 'react-router-dom';\n\nfunction UserProfile() {\nconst { id } = useParams();\n\n// Use the id parameter\n// ...\n}\n</code></pre> </li> <li> <p>Navigating Between Routes:</p> <p>Use the <code>Link</code> component for navigation:</p> jsx<pre><code>&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n</code></pre> </li> <li> <p>Navigation Lifecycle Events:</p> <p>React Router v6 introduces the <code>useNavigate</code> hook for programmatic navigation:</p> jsx<pre><code>import { useNavigate } from 'react-router-dom';\n\nfunction MyComponent() {\nconst navigate = useNavigate();\n\nconst handleClick = () =&gt; {\n    // Navigate to a specific route\n    navigate('/new-route');\n};\n\n// ...\n}\n</code></pre> </li> <li> <p>Route Guards:</p> <p>Use the <code>useEffect</code> hook to guard against unauthorized access:</p> jsx<pre><code>import { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction PrivateRoute() {\nconst navigate = useNavigate();\n\nuseEffect(() =&gt; {\n    // Check if the user is authenticated\n    const isAuthenticated = // Your authentication logic here\n\n    if (!isAuthenticated) {\n    // Redirect to the login page\n    navigate('/login');\n    }\n}, [navigate]);\n\n// Render your private route content\nreturn &lt;div&gt;Private Route Content&lt;/div&gt;;\n}\n</code></pre> </li> <li> <p>Query Parameters:</p> <p>Access and manipulate query parameters using the <code>useSearchParams</code> hook:</p> jsx<pre><code>import { useSearchParams } from 'react-router-dom';\n\nfunction MyComponent() {\nconst [searchParams, setSearchParams] = useSearchParams();\n\n// Access and manipulate search parameters\nconst paramValue = searchParams.get('paramName');\nsetSearchParams({ paramName: 'newValue' });\n\n// ...\n}\n</code></pre> </li> <li> <p>Custom Route Matching:</p> <p>You can define custom route matching logic using the <code>path</code> prop and the <code>element</code> prop of the <code>Route</code> component:</p> jsx<pre><code>&lt;Route\n    path=\"/custom-route\"\n    element={&lt;CustomComponent /&gt;}\n    caseSensitive={true}\n/&gt;\n</code></pre> </li> <li> <p>Error Boundary for Routes:</p> <p>Wrap your route components with an error boundary:</p> jsx<pre><code>function ErrorBoundary() {\n    // Your error handling logic\n\n    return (\n        &lt;div&gt;\n        &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n        &lt;/div&gt;\n    );\n}\n\n&lt;Route\n    path=\"/error-boundary\"\n    element={&lt;ErrorBoundary&gt;&lt;ErrorProneComponent /&gt;&lt;/ErrorBoundary&gt;}\n/&gt;\n</code></pre> </li> </ol> <p>This advanced guide covers some key concepts of React Router v6. Remember to refer to the official documentation for the most accurate and up-to-date information.</p>","tags":["Programming"]},{"location":"blog/2024/01/18/react-router-v6-guide/#reference","title":"Reference","text":"","tags":["Programming"]},{"location":"blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/","title":"Understanding the Impact of the Return Statement in JavaScript's Map Function","text":""},{"location":"blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/#understanding-the-impact-of-the-return-statement-in-javascripts-map-function","title":"Understanding the Impact of the Return Statement in JavaScript's Map Function","text":"<p>In JavaScript, the <code>map</code> function is a powerful tool for transforming arrays by applying a function to each element. However, the presence or absence of the <code>return</code> statement within this function can significantly affect its behavior and the resulting output.</p> <p>Consider the following code snippet:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n</code></pre> <p>In this snippet, <code>participantIds</code> is generated by mapping over the tos array, and for each item, we log \"Ttos: \" along with the participantId value. But crucially, we also use the <code>return</code> statement to explicitly specify that the <code>participantId</code> value should be included in the resulting array.</p> <p>Using the <code>return</code> statement ensures that each element processed by the <code>map</code> function contributes a specific value to the resulting array. This clarity is especially important when dealing with potentially <code>undefined</code> values, as it allows for consistent handling.</p> <p>However, if we were to omit the return statement, JavaScript would implicitly add <code>undefined</code> values to the resulting array for each item processed. While this may not always be desirable, it illustrates how the absence of the <code>return</code> statement impacts the function's behavior.</p>"},{"location":"blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/#conclusion","title":"Conclusion","text":"<p>In conclusion, the choice of using or not using the <code>return</code> statement within the <code>map</code> function depends on the desired outcome. Explicitly using return offers clarity and control over the resulting array, especially when dealing with potentially undefined values, while omitting it may lead to implicit <code>undefined</code> values being included in the output. Understanding this distinction empowers JavaScript developers to wield the <code>map</code> function effectively in their code.</p>"},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/","title":"How to Implement Tokenization using JWT and Django","text":"","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#how-to-implement-tokenization-using-jwt-and-django","title":"How to Implement Tokenization using JWT and Django","text":"<p>A JSON Web Token authentication plugin for the Django REST Framework.</p> <p>Simple JWT provides a JSON Web Token authentication backend for the Django REST Framework. It aims to cover the most common use cases of JWTs by offering a conservative set of default features. It also aims to be easily extensible in case a desired feature is not present.</p> <pre><code>$ pip install djangorestframework-simplejwt\n</code></pre>","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#project","title":"project","text":"<pre><code># urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/token/', TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\n    path('api/token/refresh', TokenRefreshView.as_view(), name=\"token_refresh\"),\n]\n</code></pre> <pre><code># settings.py\n\nINSTALLED_APPS = [\n  'django.contrib.admin',\n  'django.contrib.auth',\n  'django.contrib.contenttypes',\n  'django.contrib.sessions',\n  'django.contrib.messages',\n  'django.contrib.staticfiles',\n\n  # packages\n  'rest_framework',\n  'rest_framework_simplejwt',\n\n  # apps\n  'apps.accounts',\n  'apps.blogs',\n  'apps.privateapi',\n  'apps.books',\n]\n\n# add this\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],\n}\n\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': SECRET_KEY,\n    'VERIFYING_KEY': None,\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    'USER_ID_FIELD': 'id',\n    'USER_ID_CLAIM': 'user_id',\n    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),\n    'TOKEN_TYPE_CLAIM': 'token_type',\n    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',\n    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15),\n    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),\n}\n</code></pre>","tags":["SimpleJWT"]},{"location":"blog/2024/01/02/how-to-implement-tokenization-using-jwt-and-django/#reference","title":"Reference","text":"<ul> <li>simplejwt</li> </ul>","tags":["SimpleJWT"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/","title":"How to Add SSH Keys to Your GitHub Account","text":"","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#how-to-add-ssh-keys-to-your-github-account","title":"How to Add SSH Keys to Your GitHub Account","text":"<p>SSH, which stands for Secure Shell, is a cryptographic network protocol used to securely access and manage network devices and servers over a potentially unsecured network. It provides a secure way to log into and communicate with a remote machine, allowing users to execute commands on the remote machine and transfer files between the local and remote machines.</p> <p>Key-based Authentication:</p> <p>Using SSH keys is a more secure and convenient way to authenticate without entering a password every time.</p> BeginnerMultiple Accounts (Advanced) <p>Generating SSH Keys</p> <ol> <li> <p>Generate SSH Keys for Each GitHub Account:</p> <ul> <li>Open a Git Bash terminal on your Windows machine.</li> <li>Generate a new SSH key for each GitHub account:</li> </ul> bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Provide a unique name for each key pair, for example, <code>id_rsa_personal</code> and <code>id_rsa_work</code>.</p> </li> <li> <p>Add SSH Keys to the SSH Agent:</p> <ul> <li>Start the SSH agent:</li> </ul> bash<pre><code>eval $(ssh-agent -s)\n</code></pre> <ul> <li>Add your private keys to the SSH agent:</li> </ul> bash<pre><code>ssh-add ~/.ssh/id_rsa_personal\nssh-add ~/.ssh/id_rsa_work\n</code></pre> </li> <li> <p>Configure SSH Config File:</p> <ul> <li>Create or edit the ~/.ssh/config file using a text editor:</li> </ul> bash<pre><code>nano ~/.ssh/config\n</code></pre> <ul> <li>Add the following configuration to associate each SSH key with the respective GitHub account:</li> </ul> plaintext<pre><code># Personal GitHub account\nHost github.com\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_personal\n\n# Work GitHub account\nHost github-work\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_work\n</code></pre> <p>Make sure to replace <code>id_rsa_personal</code> and <code>id_rsa_work</code> with your actual key filenames.</p> </li> <li> <p>Update Git Config:</p> <ul> <li>Configure your global Git settings to use the specified hosts:</li> </ul> bash<pre><code>git config --global user.name \"Your Personal Name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre> <p>Repeat the above command with the appropriate values for your work account.</p> </li> <li> <p>Test SSH Connection:</p> <p>Test the SSH connection to GitHub:</p> bash<pre><code>ssh -T git@github.com\n</code></pre> </li> </ol> <p>Adding SSH in Github</p> <ol> <li> <p>Copy the SSH Public Key:</p> <p>Copy the contents of your SSH public key for each account. You can use the following command to print the public key to the terminal:</p> bash<pre><code>cat ~/.ssh/id_rsa_personal.pub\n</code></pre> bash<pre><code>cat ~/.ssh/id_rsa_work.pub\n</code></pre> </li> <li> <p>Add SSH Key to GitHub:</p> <ul> <li>Log in to your GitHub account.</li> <li>Navigate to \"Settings\" &gt; \"SSH and GPG keys.\"</li> <li>Click on \"New SSH key\" or \"Add SSH key.\"</li> <li>Provide a title (e.g., \"Personal SSH Key\" or \"Work SSH Key\").</li> <li>Paste the copied public key into the \"Key\" field.</li> <li>Click \"Add SSH Key\" or \"Save SSH Key.\"</li> <li>Repeat the process for both your personal and work GitHub accounts.</li> </ul> </li> </ol> <p>Now, when you interact with GitHub using Git commands over SSH, GitHub will recognize your SSH keys and authenticate your access.</p> <p>Git Config</p> <ol> <li> <p>Set Up Global Git Config:</p> bash<pre><code>git config --global user.name \"Your Personal Name\"\ngit config --global user.email \"personal@gmail.com\"\n</code></pre> </li> <li> <p>Set Up Local Git Config for Work Repositories:</p> bash<pre><code>cd /path/to/work/repo\ngit config user.name \"Your Work Name\"\ngit config user.email \"work@gmail.com\"\n</code></pre> </li> </ol> <p>Notes</p> bash<pre><code>git config --global --get user.name\ngit config --global --get user.email\n</code></pre>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-1-generate-ssh-key","title":"Step 1: Generate SSH Key","text":"<ol> <li> <p>Open a terminal on your local machine.</p> </li> <li> <p>Run the following command to generate a new SSH key. Replace \"your_email@example.com\" with your actual GitHub email address.</p> bash<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <p>Press Enter to accept the default file location (<code>~/.ssh/id_rsa</code>) and optionally set a passphrase for additional security.</p> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-2-add-ssh-key-to-ssh-agent","title":"Step 2: Add SSH Key to SSH Agent","text":"<ol> <li> <p>Start the SSH agent:</p> bash<pre><code>eval $(ssh-agent -s)\n</code></pre> </li> <li> <p>Add your SSH private key to the SSH agent:</p> bash<pre><code>ssh-add ~/.ssh/id_rsa\n</code></pre> </li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-3-add-ssh-key-to-github","title":"Step 3: Add SSH Key to GitHub","text":"<ol> <li> <p>Display the contents of your public key:</p> bash<pre><code>cat ~/.ssh/id_rsa.pub\n</code></pre> <p>Copy the entire key that is displayed in the terminal.</p> </li> <li> <p>Open your GitHub account in a web browser.</p> </li> <li>Go to \"Settings\" &gt; \"SSH and GPG keys\" &gt; \"New SSH key.\"</li> <li>Paste your SSH key into the \"Key\" field, give it a title (for example, \"My SSH Key\"), and click \"Add SSH Key.\"</li> </ol>","tags":["Programming"]},{"location":"blog/2024/01/12/how-to-add-ssh-keys-to-your-github-account/#step-4-test-ssh-connection","title":"Step 4: Test SSH Connection","text":"<p>To verify that everything is set up correctly, you can test the SSH connection to GitHub:</p> bash<pre><code>ssh -T git@github.com\n</code></pre> <p>If successful, you will see a message indicating that you've successfully authenticated.</p>","tags":["Programming"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/","title":"Understanding the SSH Agent: Why It Matters in Managing SSH Keys","text":"","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys","title":"Understanding the SSH Agent: Why It Matters in Managing SSH Keys","text":"<p>Secure Shell (SSH) is a widely used protocol for secure communication over a computer network. It provides a secure way to access remote servers, transfer files, and execute commands. When working with multiple SSH keys for different purposes or accounts, it becomes essential to use an SSH agent. This blog post explores the significance of the SSH agent and why it is crucial in managing SSH keys.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#what-is-an-ssh-agent","title":"What is an SSH Agent?","text":"<p>An SSH agent is a background process that manages SSH keys and handles the authentication process. It securely stores private keys and provides a convenient way to use them without repeatedly entering passphrases. The agent acts as a key manager, allowing users to add, remove, and list keys, simplifying the authentication process.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#why-do-we-need-to-start-the-ssh-agent","title":"Why Do We Need to Start the SSH Agent?","text":"<ol> <li> <p>Password-less Authentication</p> <p>One of the primary reasons to use an SSH agent is to enable password-less authentication. When you generate an SSH key pair, it consists of a public key (which is shared with servers) and a private key (which should be kept secure on your machine). The private key is often encrypted with a passphrase for an additional layer of security.</p> <p>The SSH agent allows you to load your private key into memory, eliminating the need to enter the passphrase each time you connect to a remote server. This enhances security by avoiding the risk of exposing the passphrase while making the authentication process more seamless.</p> </li> <li> <p>Managing Multiple SSH Keys</p> <p>In a professional or personal setting, individuals often work with multiple SSH keys, especially when dealing with various accounts or projects. The SSH agent simplifies the management of these keys by allowing you to add multiple keys and choose which one to use for a particular connection.</p> </li> <li> <p>Avoiding Key Exhaustion</p> <p>SSH clients typically limit the number of authentication attempts in a given time frame. Without an SSH agent, each connection attempt may consume an authentication attempt, leading to temporary lockouts. The agent helps prevent key exhaustion by handling authentication efficiently.</p> </li> </ol>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#how-to-start-the-ssh-agent","title":"How to Start the SSH Agent","text":"<p>To start the SSH agent, use the following command:</p> bash<pre><code>eval \"$(ssh-agent -s)\"\n</code></pre> <p>This command initializes the agent and prints environment variables to set up the agent's connection to the shell.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#adding-keys-to-the-ssh-agent","title":"Adding Keys to the SSH Agent","text":"<p>Once the agent is running, you can add your SSH keys using the <code>ssh-add</code> command. For example:</p> bash<pre><code>ssh-add ~/.ssh/id_rsa_personal\nssh-add ~/.ssh/id_rsa_work\n</code></pre> <p>This step ensures that the keys are loaded into the agent and ready for use.</p> <p>Notes</p> <p>Now, you can check the loaded keys using:</p> bash<pre><code>ssh-add -l\n</code></pre> <p>This should display the fingerprints of the SSH keys that are currently added to the agent.</p> <p>After starting the SSH agent and adding the keys, you can proceed to test the SSH connection to GitHub using the <code>ssh -T</code> command.</p> <p>Tips</p> <p>If you're using a shell that supports automatic SSH agent startup (like bash or zsh), you might want to add the following lines to your shell profile file (e.g., <code>~/.bashrc</code>, <code>~/.zshrc</code>) to ensure the agent is automatically started when you open a new terminal session:</p> bash<pre><code>if [ -z \"$SSH_AUTH_SOCK\" ] ; then\n  eval $(ssh-agent -s)\nfi\n</code></pre> <p>After making these changes, restart your terminal or run <code>source ~/.bashrc</code> (or <code>source ~/.zshrc</code> for zsh users) to apply the changes. Then, try running <code>ssh-add -l</code> again to ensure the agent is running and the keys are loaded.</p>","tags":["Programming","SSH"]},{"location":"blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/#conclusion","title":"Conclusion","text":"<p>In conclusion, the SSH agent plays a crucial role in enhancing the security and convenience of SSH key management. By eliminating the need to repeatedly enter passphrases and facilitating the use of multiple keys, the SSH agent streamlines the authentication process for a more efficient and secure workflow.</p> <p>Understanding the importance of the SSH agent is key to optimizing your SSH key management strategy, especially in scenarios involving multiple accounts or projects. By leveraging the capabilities of the SSH agent, you can enjoy a smoother and more secure SSH experience.</p>","tags":["Programming","SSH"]},{"location":"office/draft/","title":"Draft","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Introduction","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - local</li> <li>cqweb.ictc.com.np - main</li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p><code>cqnovelweb-develop</code></p> <p><code>src</code></p> <p><code>assets</code> : contains the image and svg files.</p> <p><code>components</code> : list of all the resuable components.</p> <p><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</p> <p><code>json</code> : has the caleder filter data.</p> <p><code>layouts</code> : contains the base layout of cqweb.</p> <p><code>services</code> : core redux - action, reducer, store</p> <p><code>styles</code> : contains the sass styles.</p> <p><code>utils</code> : list of reusable functions.</p>"},{"location":"office/intro/#installation","title":"Installation","text":"<pre><code>$ npm i --legacy-peer-deps\n\n$ npm run product\n</code></pre>"},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/misc/","title":"Misc","text":""},{"location":"office/misc/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/misc/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/vscode/","title":"VS Code","text":"<p>vs code</p>"},{"location":"office/clickup/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/clickup/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/clickup/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/clickup/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/clickup/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/clickup/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/clickup/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/clickup/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/clickup/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/clickup/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/clickup/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/clickup/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/clickup/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/clickup/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/clickup/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/clickup/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/clickup/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/clickup/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        if (response.isSuccess) {\n        message.success(\"Successfully updated company\");\n        dispatch(\n            success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n        );\n        # added here\n        await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/clickup/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/clickup/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/clickup/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/clickup/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/components/HTMLRenderer/","title":"HTMLRenderer","text":""},{"location":"office/components/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> indexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/components/JSON-stringify/","title":"Using JSON.stringify","text":"<p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n  ...\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/components/old/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/documentation/architecture/","title":"Architecture","text":""},{"location":"office/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/documentation/internal-message/","title":"Internal Message","text":""},{"location":"office/documentation/internal-message/#internal-message","title":"Internal Message","text":"<p><code>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>import { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> <p>views/GlobalEmailChat/index.js</p> index.js<pre><code>const ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/documentation/public-events/","title":"Dashboard Events","text":"<p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/documentation/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/documentation/redux-action-advanced/#api","title":"API","text":"<p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#action","title":"ACTION","text":"<p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#reducer","title":"REDUCER","text":"<p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-project-circular/","title":"Project Circular","text":""},{"location":"office/documentation/reference-project-circular/#project-circular-tab","title":"Project Circular Tab","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-tender-circular/","title":"Tender Circular","text":""},{"location":"office/documentation/reference-tender-circular/#tender-circular-tab","title":"Tender Circular Tab","text":"<p>Tender</p> <p>s</p> <p>:memo: <code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/documentation/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/documentation/sending-mail/","title":"Sending Mail","text":"<p>Sending Mail</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/documentation/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/documentation/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":""},{"location":"office/documentation/tutorial-listing/#api","title":"API","text":"<p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/documentation/tutorial-listing/#action","title":"ACTION","text":"<p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/tutorial-listing/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"research/BEM/","title":"BEM","text":"<p>CSS Naming Conventions</p> <p>BEM, which stands for Block, Element, Modifier, is a popular CSS naming convention that helps developers write more maintainable and modular CSS. It provides a structured way of naming CSS classes to make styles more predictable and easier to understand.</p> <pre><code>&lt;div class=\"block\"&gt;\n  &lt;div class=\"block__element\"&gt;\n    &lt;div class=\"block__element--modifier\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.block { /* block styles */ }\n.block__element { /* element styles */ }\n.block__element--modifier { /* modifier styles */ }\n</code></pre> <p>Here's a brief overview of BEM:</p> <ul> <li> <p>Block:</p> <p>A standalone component that is meaningful on its own. It represents a higher-level component or a module on the page.</p> <p>Blocks represent standalone entities or components on a web page. They are the top-level abstraction and should be independent, reusable pieces of UI. Examples could be headers, footers, navigation bars, cards, etc.</p> </li> <li> <p>Element:</p> <p>A part of a block that has no standalone meaning and is semantically tied to its block. Elements are typically children of blocks and are named with double underscores (<code>__</code>) following the block name.</p> <p>Elements are parts of blocks and cannot exist outside of a block. They are semantically tied to the block they belong to and represent smaller components within that block. For example, within a card block, elements could include the card title, card content, card footer, etc.</p> </li> <li> <p>Modifier:</p> <p>A flag on a block or element that changes its appearance or behavior. Modifiers are named with double hyphens (<code>--</code>) following the block or element name.</p> <p>Modifiers are flags on blocks or elements that alter their appearance or behavior. They allow for variations of a block or element without duplicating code. For example, a modifier could change the color, size, or state (such as active, inactive, etc.) of a block or element.</p> </li> </ul> <p> </p> <p>The philosophy behind BEM (Block, Element, Modifier) styling is to create a modular and reusable structure for CSS classes, enhancing maintainability, and reducing the risk of style conflicts in larger projects.</p> <pre><code>&lt;section class=\"main-section\"&gt;\n  &lt;div class=\"block1\"&gt;\n    &lt;h2 class=\"block1__title\"&gt;Block 1 Title&lt;/h2&gt;\n    &lt;p class=\"block1__description\"&gt;Description for Block 1&lt;/p&gt;\n    &lt;button class=\"block1__button\"&gt;Button 1&lt;/button&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"block2\"&gt;\n    &lt;h2 class=\"block2__title\"&gt;Block 2 Title&lt;/h2&gt;\n    &lt;p class=\"block2__description\"&gt;Description for Block 2&lt;/p&gt;\n    &lt;button class=\"block2__button\"&gt;Button 2&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"research/BEM/#reference","title":"Reference","text":"<ul> <li>What is BEM? What are some examples?</li> <li> <p>Use BEM for scalable and maintainable CSS</p> </li> <li> <p>Choosing the Right CSS Naming Convention for Your Project </p> </li> </ul>"},{"location":"research/docker-guide/","title":"Docker","text":""},{"location":"research/docker-guide/#installation","title":"Installation","text":"<p>Abstract</p> DockerfileTheoryPractical <pre><code># Use an existing image as a base\nFROM alpine:latest\n\n# Run a command in the container\nCMD [\"echo\", \"Hello, Jenkins!\"]\n</code></pre> <p><code>Docker</code>, <code>Docker Compose</code>, and <code>Docker Swarm</code> are all related tools in the Docker ecosystem, but they serve different purposes:</p> <ol> <li> <p>Docker:</p> <p>Docker is a platform and tool for building, distributing, and running <code>containers</code>. Containers allow developers to package an application with all of its dependencies into a standardized unit for software development. Docker provides the tools needed to create and manage these containers efficiently. With Docker, you can build container images, run containers from those images, and manage container lifecycles.</p> </li> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for defining and running <code>multi-container</code> Docker applications. It allows you to use a YAML file to configure the services that make up your application, including their dependencies, networking, and volumes. Docker Compose then takes care of starting, stopping, and managing all of these containers as a single application stack. It simplifies the process of managing complex applications composed of multiple interconnected containers.</p> </li> <li> <p>Docker Swarm:</p> <p>Docker Swarm is Docker's native clustering and <code>orchestration tool</code>. It allows you to create and manage a cluster of Docker nodes, turning them into a single virtual Docker engine. Docker Swarm enables you to deploy and manage multi-container applications across multiple hosts, providing features such as service scaling, rolling updates, and high availability. It simplifies the management of containerized applications at scale and provides built-in features for load balancing and service discovery.</p> </li> </ol> <p>In summary:</p> <ul> <li><code>Docker</code>: The core platform for building, distributing, and running containers.</li> <li><code>Docker Compose</code>: A tool for defining and managing multi-container applications using a YAML configuration file.</li> <li><code>Docker Swarm</code>: Docker's native clustering and orchestration tool for managing multi-container applications across multiple hosts.</li> </ul> <pre><code>$ sudo apt-get install &lt;docker.deb&gt;\n</code></pre> <p>Commands</p> bash<pre><code># List containers:\n$ docker containers ls\n\n# List only running container: (ps-process status)\n$ docker ps -a\n\n# List images:\n$ docker images\n</code></pre> <p>Restart Docker</p> bash<pre><code># To restart a Docker container based on an image\n\n# 1.Identify the Container:\n$ docker ps\n\n# 2. Restart the Container:\n$ docker restart &lt;container_id_or_name&gt;\n\n# 3. Verify Restart:\n$ docker ps\n</code></pre>"},{"location":"research/docker-guide/#nginx-engine-x-web-server","title":"nginx (Engine X) <code>web server</code>","text":"<p>Abstract</p> TheoryPractical bash<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p><code>/etc/nginx/nginx.conf</code></p> <p>The server_name directive in Nginx should specify only the domain name or names without the protocol (e.g., <code>http://</code>). Therefore, you need to modify your configuration like this:</p> nginx<pre><code>http {\nserver {\n    listen 9000;\n    server_name generic-info.ispl.com.np;\n\n    location / {\n    # Jenkins running on port 9000\n    proxy_pass http://10.114.0.175:9000;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 8080;\n    server_name generic-info.ispl.com.np;\n\n    location / {\n        # Portainer running on port 8080\n        proxy_pass http://10.114.0.175:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n}\n</code></pre> <p>After making this change, you should test the configuration to ensure there are no syntax errors:</p> bash<pre><code>sudo nginx -t\n</code></pre> <p>If the test is successful, reload Nginx to apply the changes:</p> bash<pre><code>sudo systemctl reload nginx\n</code></pre> <p>This should resolve the issue, and Nginx should be able to start without errors.</p>"},{"location":"research/docker-guide/#docker-images","title":"Docker Images","text":"<p>Abstract</p> TheoryPracticalDangling images bash<pre><code># List Docker images\n$ docker images\n\n# Remove Docker image by ID\n$ docker rmi &lt;image_id&gt;\n\n# Remove Docker image by repository and tag\n$ docker rmi &lt;repository_name&gt;:&lt;tag&gt;\n\n# Forcefully remove images\n$ docker rmi -f &lt;image_id&gt;\n# or\n$ docker rmi --force &lt;image_id&gt;\n</code></pre> <p>Create Docker Image</p> <p>When working with Docker, you typically create an image first and then use that image to create containers.</p> <ol> <li> <p>Create Image:</p> <p>An image is like a template that contains the filesystem and configuration needed to run a container. You define an image using a <code>Dockerfile</code>, which specifies the instructions to build the image. You use the docker build command to create an image from a Dockerfile.</p> </li> <li> <p>Create Container:</p> <p>Once you have an image, you can create one or more containers from it. A container is a running instance of an image. You use the docker run command to create and start a container from an image. Each container runs in isolation from other containers but can communicate with them if configured to do so.</p> </li> </ol> <p>Here's a basic sequence of commands:</p> <ol> <li>Create the image:</li> </ol> <pre><code>$ docker build -t my-image .\n</code></pre> <ol> <li>Run a container based on that image:</li> </ol> <pre><code>$ docker run --name my-container my-image\n</code></pre> <p>So, to summarize, first, you build an image using a <code>Dockerfile</code>, then you create and run containers based on that image.</p> <p>Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space.</p> <p>Dangling images are created while creating new build of a image without renaming/updating the version of the image. So that the old image are converted into dangling images.</p> <pre><code># List Dangling images\n$ docker images -f dangling=true\n\n# Remove Dangling images\n$ docker rmi $(docker images -f dangling=true -q)\n\n##\n# To remove all dangling images.\n$ docker image prune\n\n# To remove all images which aren't used by existing containers, use the -a flag:\n$ docker image prune -a\n\n# To remove all stopped containers.\n$ docker container prune\n\n# To removes stopped containers older than 24 hours:\n$ docker container prune --filter \"until=24h\"\n\n# To remove all volumes not used by at least one container.\n$ docker volume prune\n\n# To remove all networks not used by at least one container.\n$ docker network prune\n\n# The docker system prune command is a shortcut that prunes images, containers, and networks.\n# Volumes aren't pruned by default, and you must specify the --volumes flag for docker system prune to prune volumes.\n\n# To prune images, containers and network\n$ docker system prune\n\n# To also prune volumes, add the --volumes flag:\n$ docker system prune --volumes\n</code></pre> <ul> <li>Remove unnecessary images</li> <li>Docker container and image prune</li> </ul>"},{"location":"research/docker-guide/#docker-container","title":"Docker Container","text":"<p>Abstract</p> TheoryPracticalAdditional <p>Create Docker Container</p> <p>example of creating a new container:</p> bash<pre><code># syntax\n# 1. Run a new container with the new image:\n$ docker run --name &lt;container_name&gt; -d &lt;new_image_name&gt;\n\n# 2. Stop the existing container:\n$ docker stop &lt;container_name_or_id&gt;\n\n# 3. Remove the existing container (optional):\n$ docker rm &lt;container_name_or_id&gt;\n\n# example\n$ docker run --name my-container -d my-image\n</code></pre> <ul> <li><code>--name my-container</code> sets the name of the container to my-container.</li> <li><code>-d</code> runs the container in detached mode (in the background).</li> <li><code>my-image</code> is the name of the image from which to create the container.</li> </ul> <p>This command will create a new container using the specified image. If the image is not available locally, Docker will automatically pull it from a registry like Docker Hub before creating the container.</p> <p>After running the command, you can use <code>docker ps</code> to see the list of running containers.</p> <p>Check the IP Address of the Docker Container</p> bash<pre><code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n</code></pre> <p>Then try accessing the site using <code>curl</code> with the <code>IP address</code> and the <code>mapped port</code> (<code>8082</code> in this case).</p> <p>if you want to check if a container named my_container is using any volumes:</p> bash<pre><code>docker inspect &lt;my_container&gt; | grep Mounts\n</code></pre> bash<pre><code>docker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\njenkins/jenkins:lts\n\ndocker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nmy-jenkins\n</code></pre>"},{"location":"research/docker-guide/#docker-volume","title":"Docker Volume","text":"<p>Abstract</p> TheoryPracticalAdditional bash<pre><code># List Volumes in Use:\n$ docker volume ls\n\n# list all containers to find out which volumes are in use:\n$ docker ps -a\n\n# delete the volumes\n$ docker volume rm &lt;volume_name_or_id&gt;\n\n# delete volumes along with the containers that use them\n$ docker rm -v &lt;container_name_or_id&gt;\n</code></pre> <p>Recap Docker Volume</p> <p>In a previous chapter, we used the \"<code>-v</code>\" option to a \"<code>docker run</code>\" command to declare that we wanted to use a volume with a container. The abbreviated \"<code>-v</code>\" option is exactly the same as the \"<code>--volume</code>\" option. However, the newer and preferred way to mount volumes in a container is the \"<code>--mount</code>\" option. Docker recommends that you use \"<code>--mount</code>\" instead of \"<code>-v</code>\" or \"<code>--volume</code>\", as their research has shown \"<code>--mount</code>\" is easier to use. However, if you are an old Docker user like myself, then you're probably accustomed to using and seeing \"<code>-v</code>\". In any case, either works, but we will focus on \"<code>--mount</code>\", as it\u2019s the recommended way.</p> <pre><code>$ docker run -d --name withvolume --mount source=mydata1,destination=/root/volume nginx\n\n#\ndocker run -d --name withvolume2 --mount src=mydata1,dst=/root/volume nginx\n\n$ docker run -dit --name ephemeral --mount type=tmpfs,destination=/root/volume nginx\n</code></pre> <ul> <li>Docker: A project based learning</li> <li>Publish Docker image to Dockerhub using Jenkins Pipeline</li> <li>Build a Docker Jenkins Pipeline to Implement CI/CD Workflow</li> </ul>"},{"location":"research/docker-guide/#portainer","title":"Portainer","text":"<p>Abstract</p> TheoryPracticalAdditional <p>Docker pull Command</p> bash<pre><code>$ docker pull portainer/portainer-ce\n</code></pre> <p>After installing Portainer in Docker on a Linux server, you can run it by executing the Docker run command with appropriate options. Here's how you can do it:</p> <ol> <li> <p>Open a Terminal:</p> <p>Log in to your Linux server via SSH or open a terminal window if you're working directly on the server.</p> </li> <li> <p>Run Portainer Container:</p> <p>Use the following command to start the Portainer container:</p> bash<pre><code>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 9000:9000</code>: Map port 9000 on the host to port 9000 inside the container. This allows you to access Portainer's web interface on port 9000 of your server.</p> </li> <li> <p><code>--name portainer</code>: Assign the name \"portainer\" to the container.</p> </li> <li> <p><code>--restart always</code>: Ensure that the container restarts automatically if it stops.</p> </li> <li> <p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: Mount the Docker socket inside the container, allowing Portainer to communicate with the Docker daemon.</p> </li> </ul> </li> <li> <p>Verify Portainer Container:</p> <p>You can verify that the Portainer container is running by executing the following command:</p> bash<pre><code>$ sudo docker ps\n</code></pre> <p>This command will list all running containers, and you should see an entry for the Portainer container.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:9000\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Set up Portainer:</p> <p>When you access the Portainer web interface for the first time, you'll be prompted to set up an admin user and password. Follow the on-screen instructions to complete the setup process.</p> </li> </ol> <p>That's it! You have now successfully run Portainer in Docker on your Linux server, and you can start managing your Docker environment through the Portainer web interface.</p> <p>Portainer with Docker</p> <p>To use Docker Swarm mode with Portainer, you need to set up a Docker Swarm cluster and then deploy Portainer as a service within the Swarm. Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Initialize Docker Swarm:</p> <p>If you haven't already initialized Docker Swarm on your Docker host, you can do so by running the following command in your terminal:</p> bash<pre><code>$ docker swarm init\n</code></pre> <p>This command initializes Docker Swarm mode on the current Docker host and creates a Swarm manager node.</p> </li> <li> <p>Deploy Portainer as a Service:</p> <p>Once Docker Swarm is initialized, you can deploy Portainer as a service within the Swarm. Run the following command to create a Portainer service:</p> bash<pre><code>docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \\\nportainer/portainer-ce\n</code></pre> <p>This command creates a new service named \"portainer\" using the Portainer Community Edition (CE) image. It publishes Portainer's web interface on port 9000 and mounts the Docker socket from the host into the Portainer container, allowing Portainer to interact with the Docker API.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer service is deployed, you can access the Portainer web interface by navigating to http://:9000 in your web browser. If you're running Portainer locally, you can use http://localhost:9000.</p> </li> <li> <p>Set Up Portainer:</p> <p>Follow the on-screen instructions to complete the initial setup of Portainer. You'll be prompted to create an admin user, choose a password, and specify whether you want to manage the local Docker environment or a remote Docker Swarm cluster.</p> </li> <li> <p>Connect Portainer to Docker Swarm:</p> <p>If you're managing a remote Docker Swarm cluster, you'll need to specify the Swarm endpoint URL and optionally provide authentication credentials. This allows Portainer to communicate with the Docker Swarm API and manage services, nodes, and other resources within the cluster.</p> </li> <li> <p>Start Managing Services:</p> <p>Once connected, you can start managing Docker Swarm services, nodes, stacks, and other resources using the Portainer web interface. You can create, scale, update, and monitor services, deploy applications using stacks, and perform various administrative tasks.</p> </li> </ol> <p>By following these steps, you can set up and use Docker Swarm mode with Portainer to manage your containerized applications at scale. Make sure to consult the official Portainer documentation for more detailed instructions and best practices.</p> <pre><code>server {\n    listen 80;\n    server_name generic.com.np;\n\n    location / {\n        proxy_pass http://&lt;container-ip&gt;:&lt;container-port&gt;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"research/docker-guide/#jenkins","title":"Jenkins","text":"<p>Abstract</p> TheoryPractical <p>Docker Pull Command</p> bash<pre><code>$ docker pull jenkins/jenkins\n</code></pre> <p>After pulling the Docker Jenkins image onto your Linux server, you can start using Jenkins by running the container and accessing its web interface. Here's how you can do it:</p> <ol> <li> <p>Run Jenkins Container:</p> <p>Use the following command to start the Jenkins container:</p> title<pre><code>docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 8080:8080 -p 50000:50000</code>: Map port 8080 on the host to port 8080 inside the container for accessing Jenkins web interface, and map port 50000 for Jenkins agent communication.</p> </li> <li> <p><code>--name jenkins</code>: Assign the name \"jenkins\" to the container.</p> </li> <li> <p><code>jenkins/jenkins:lts</code>: This specifies the Jenkins Docker image to use. In this case, we're using the LTS (Long-Term Support) version.</p> </li> </ul> </li> <li> <p>Access Jenkins Web Interface:</p> <p>Once the Jenkins container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:8080\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Unlock Jenkins:</p> <p>When you access the Jenkins web interface for the first time, you'll be prompted to unlock Jenkins. To do this, you need to retrieve the initial admin password from the Jenkins container logs. Run the following command to view the logs:</p> <pre><code>docker logs jenkins\n</code></pre> <p>Look for the line containing \"Please use the following password to proceed to installation:\", and copy the provided password.</p> </li> <li> <p>Complete Jenkins Setup:</p> <p>Paste the copied password into the Jenkins web interface and click \"Continue\". Follow the on-screen instructions to complete the setup process, including installing recommended plugins.</p> </li> <li> <p>Create Admin User:</p> <p>After plugin installation, you'll be prompted to create an admin user. Provide the required information to create the admin user.</p> </li> <li> <p>Start Using Jenkins:</p> <p>Once you've completed the setup process, you can start using Jenkins to create and manage jobs, automate tasks, and perform continuous integration and continuous delivery (CI/CD) pipelines.</p> </li> </ol> <p>That's it! You've successfully pulled and started the Jenkins Docker container on your Linux server, and you can now begin configuring Jenkins for your development and deployment needs.</p>"},{"location":"research/docker-guide/#certbot-in-linux","title":"certbot in linux","text":"<p>Abstract</p> InstallationSSL Certificate with Certbot <pre><code># There is two ways you can download certbot\n# 1. with PIP\n# 2. with snapd\n\n# step1: Install snapd:\nsudo apt install snapd\n\n# step2: Ensure you have the latest snapd version installed:\nsudo snap install core; sudo snap refresh coreCopied!\n\n# step3: Install Certbot with snapd:\nsudo snap install --classic certbot\n\n# step4: Create a symlink to ensure Certbot runs:\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n</code></pre> <p>Create an SSL Certificate with Certbot</p> <pre><code># step1: Choose the best option for your needs.\n# Create SSL certs for all domains and configure redirects in the web server:\nsudo certbot --apache\nsudo certbot --nginx\n\n# Create SSL certs for a specified domain (recommended if you\u2019re using your system hostname):\nsudo certbot --apache -d example.com -d www.example.com\n\n# Only install SSL certs:\nsudo certbot certonly --apache\nsudo certbot certonly --nginx\n\n\n# step2: Enter an email address for renewal and security notices.\n# step3: Agree to the terms of service.\n# step4: Specify whether to receive emails from EFF.\n# step5: If prompted, choose whether to redirect HTTP traffic to HTTPS \u2013 1 (no redirect, no further changes to the server) or # 2 (redirect all HTTP requests to HTTPS).\n</code></pre> <ul> <li>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</li> <li>Install Let\u2019s Encrypt SSL Certificates using Certbot</li> </ul> <p>Solved</p> <ul> <li>Issue using certbot with nginx: stackoverflow</li> <li>Whaaaat Are AAAA Records in DNS? youtube</li> </ul> Docker Common Issue Solved Presentation"},{"location":"research/docker-guide/#docker-common-issue-solved","title":"Docker Common Issue Solved","text":"Share Docker sockDocker Port Mappingstep1:Final Solution <p>Connect: To share Docker daemon from the host with jenkins nodes</p> <p>To run Docker commands inside Jenkins, especially within a Jenkins instance running inside a Docker container, you have a couple of options:</p> <ol> <li> <p>Docker Socket Binding:</p> bash<pre><code>$ docker run -v /var/run/docker.sock:/var/run/docker.sock &lt;jenkins-image:tag&gt;\n</code></pre> </li> <li> <p>Docker-in-Docker (DinD):</p> bash<pre><code>$ docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock docker:dind\n</code></pre> </li> </ol> <p>How to fix docker: Got permission denied while trying to connect to the Docker daemon socket</p> <p>After an search hour this following solution finaly worked :</p> bash<pre><code>$ sudo chmod 666 /var/run/docker.sock\n</code></pre> <ul> <li>Got permission denied while trying to connect to the Docker daemon socket</li> </ul> <p></p> <p>what is differnce between 8080:80 and 8080:8080. is there any real difference</p> <ul> <li>8080:80</li> </ul> <p>This notation maps port 80 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 80 inside the Docker container. This is useful when you want to expose a service running inside the container on a standard HTTP port (80) of the host machine.</p> <ul> <li>8080:8080</li> </ul> <p>This notation maps port 8080 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 8080 inside the Docker container. This is useful when you want to expose a service running inside the container on a non-standard port (8080) of the host machine.</p> <p>In both cases, the first port number (8080) specifies the port on the host machine, and the second port number (80 or 8080) specifies the port inside the Docker container. The port on the host machine is what you use to access the service running inside the container.</p> <p>So, the difference lies in which port on the host machine you want to use to access the service and which port inside the container the service is listening on.</p> <p>so why the jenkins not running on 8080:80 but running on 8080:8080</p> <p>If Jenkins is running inside a Docker container and you've mapped port 8080:8080 but not <code>8080:80</code>, it means that Jenkins is configured to listen for incoming connections on port 8080 inside the container.</p> <p>When you map <code>8080:8080</code>, it indicates that traffic directed to port <code>8080</code> on the host machine should be forwarded to port <code>8080</code> inside the Docker container where Jenkins is running. This setup expects Jenkins to be listening for connections on port <code>8080</code> inside the container.</p> <p>If Jenkins is running on port <code>8080</code> inside the container, mapping <code>8080:8080</code> correctly exposes Jenkins to external traffic on port <code>8080</code> of the host machine.</p> <p>On the other hand, if you were to map <code>8080:80</code>, it would expect Jenkins to be configured to listen on port <code>80</code> inside the container. By default, Jenkins typically runs on port 8080, so mapping <code>8080:80</code> wouldn't work unless you specifically configured Jenkins to listen on port 80 inside the container.</p> <p>Therefore, mapping <code>8080:8080</code> correctly exposes Jenkins running on port <code>8080</code> inside the container to external traffic on port <code>8080</code> of the host machine, which is why it works in your case.</p> <p>Issue Solved</p> <p>Step-by-step instructions to create a Docker image for Jenkins with Docker installed inside it and then run a Jenkins container with the Docker socket mounted from the host:</p> <ol> <li> <p>Create a Dockerfile:</p> <p>Create a file named <code>Dockerfile</code> with the following content:</p> <pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker prerequisites\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; \\\n    sh get-docker.sh\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>This Dockerfile installs Docker inside the Jenkins container and adds the Jenkins user to the Docker group.</p> </li> <li> <p>Build the Docker Image:</p> <p>Open a terminal and navigate to the directory containing the <code>Dockerfile</code>. Then, run the following command to build the Docker image:</p> <pre><code>docker build -t my-jenkins .\n</code></pre> <p>This command builds the Docker image using the Dockerfile and tags it with the name <code>my-jenkins</code>.</p> </li> <li> <p>Run the Jenkins Container:</p> <p>After the Docker image is built, you can run a Jenkins container with the Docker socket mounted from the host:</p> bash<pre><code>docker run -d \\\n--name jenkins \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-p 8080:8080 -p 50000:50000 \\\nmy-jenkins\n</code></pre> <p>This command starts a Jenkins container named <code>jenkins</code>. It mounts the Docker socket (<code>/var/run/docker.sock</code>) from the host into the container and exposes the Jenkins web interface on port <code>8080</code> and the Jenkins agent communication port on port <code>50000</code>.</p> </li> </ol> <p>With these steps, you have a Jenkins container running with Docker installed inside it, and the Docker socket mounted from the host. This setup allows the Jenkins container to communicate with the Docker daemon on the host and perform Docker-related tasks within Jenkins pipelines or jobs.</p> <p>Docker Socket bind with docker command</p> <pre><code>docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/custom_volume/jenkins/:/var/jenkins_home/ --privileged --name b_jenkins 6b7d79a0229e\n</code></pre> <ul> <li>Docker cli excutable file not found</li> <li>docker not found in jenkins pipeline</li> <li>docker not found in jenkins pipeline 2</li> <li>docker: ibm</li> <li>what is docker and why it is darn popular?</li> <li>docker introduction aws</li> </ul>"},{"location":"research/docker-guide/#docker-presentation","title":"Docker Presentation","text":""},{"location":"research/docker-guide/#docker-architecture","title":"Docker Architecture","text":"<p>cgroups &amp; namespaces The backbone of the Docker technology are cgroups (short for control groups) and kernel namespaces.</p> <p>With <code>cgroups</code>, the Linux operating system can easily manage and monitor resource allocation for a given process and set resource limits, like CPU, memory, and network limits.</p> <p><code>Namespaces</code> are helpful in isolating process groups from each other. There are six default namespaces in Linux: <code>mnt</code>, <code>IPC</code>, <code>net</code>, <code>usr</code>, <code>pid</code>, and <code>uts</code>. Each container will have its own namespace and processes running inside that namespace, and will not have access to anything outside its namespace.</p> <p></p>"},{"location":"research/docker-guide/#docker-steps","title":"Docker Steps","text":""},{"location":"research/docker-guide/#docker-images_1","title":"Docker Images","text":"<p>Where Are Docker Images Stored on the Host Machine? </p> <pre><code>$ docker info\n</code></pre> <p>Now, typically there are two categories of Docker Images</p> <ul> <li>Official Base Images</li> </ul> <p>that are pre-built and can be downloaded or pulled from registries, and</p> <ul> <li>Customized Images</li> </ul> <p>that use base images to create application-specific environments.</p> <p></p> <p></p>"},{"location":"research/docker-guide/#docker-container_1","title":"Docker Container","text":"<p>The major difference between a <code>container</code> and an <code>image</code> is the top writable layer.</p> <p></p> <p>All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.</p> <p>When the container is stopped writable layer remains, and if container was removed writable layer is deleted. So that\u2019s why people say, containers are stateless.</p> <p></p>"},{"location":"research/docker-guide/#docker-volume_1","title":"Docker Volume","text":"<p>How to Handle Container Storage</p> <p>To make data of any container persistent and accessible outside of the container, Docker provides two options:</p> <ul> <li>Volumes</li> <li>Bind mounts</li> </ul> <p></p>"},{"location":"research/docker-guide/#docker-port-mapping","title":"Docker Port Mapping","text":""},{"location":"research/docker-guide/#docker-vs-docker-compose-vs-docker-swarm","title":"Docker vs Docker Compose vs Docker Swarm","text":""},{"location":"research/docker-guide/#docker-swarm","title":"Docker Swarm","text":""},{"location":"research/docker-guide/#practical-guide-jenkins","title":"Practical Guide Jenkins","text":"<p>Using Statefull persistant volume </p> <p> </p> <p>Jenkins Tutorial  </p> <p> </p>"},{"location":"research/docker-guide/#reference","title":"Reference","text":"<p>Linux (<code>Ubuntu</code>)</p> <ul> <li>Install Docker Desktop on Ubuntu</li> <li>pass tutorial</li> <li>3 Best Ways to Run Docker in Docker Container</li> </ul> <p>Blog</p> <ul> <li>What is a Docker Swarm?</li> <li>Key Differences Between Docker and Docker Swarm </li> </ul> <p>Youtube</p> <ul> <li>Docker Swarm: Simplilearn</li> <li>Docker Swarm Step by Step: Intellipaat</li> <li>Docker vs Kubernetes vs Docker Swarm: Techworld with Nana</li> <li>The EASIEST Docker Swarm Tutorial</li> <li>Docker Compose Tutorial: Programming with Mosh</li> <li>Become a Docker Swarm Expert in just 20 minutes</li> </ul> <p>tmux</p> <ul> <li>tmux resizing pane</li> </ul> <p>Misc <code>youtube</code></p> <ul> <li>what is podman vs docker</li> </ul>"},{"location":"research/draft/","title":"Draft","text":"<p>Python</p> <p>Python</p> bash<pre><code># To run a Django server on a different port\n$ python manage.py runserver &lt;port_number&gt;\n$ python manage.py runserver 8001\n\n# To bind to a specific IP address\n$ python manage.py runserver &lt;ip_address&gt;:&lt;port_number&gt;\n$ python manage.py runserver 0.0.0.0:8001\n\n# This will make your Django server accessible on all network interfaces on port 8001.\n</code></pre> <p>django best practices</p> <p>django best practices: project vs apps</p> 2002, Can't connect to local MySQL server through socket <p>Q. django.db.utils.OperationalError: (2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\")</p> <p>=&gt; Use \"127.0.0.1\", instead of \"localhost\"</p> <pre><code>DATABASES = {\n      'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'django',\n            'USER': 'root',\n            'PASSWORD': '',\n            'HOST': '127.0.0.1',\n            'PORT': '3306',\n      }\n}\n</code></pre> Django MVT Architecture <p>In the context of the Django web framework, a \"view\" is not just a \"view\" in the traditional Model-View-Controller (MVC) sense. Instead, it is more aligned with the \"controller\" part of MVC. Django follows a slightly different design pattern known as Model-View-Template (MVT), where the view acts more like a controller.</p> <p>Here's a breakdown of the responsibilities in Django's MVT pattern:</p> <ul> <li> <p>Model:</p> <p>The model represents the data structure of your application. It typically consists of Python classes that define the fields and behavior of your data, including interactions with the database.</p> </li> <li> <p>View:</p> <p>In Django, a view is a Python function or class that receives HTTP requests and returns HTTP responses. It's responsible for processing requests, fetching data from the database (via QuerySets), and passing that data to templates for rendering.</p> </li> <li> <p>Template:</p> <p>Templates are HTML files containing placeholders and template tags. They are responsible for rendering the data received from the view into a user-readable format. Templates can include dynamic content using template tags and filters.</p> </li> </ul> <p>In <code>Django's MVT pattern</code>, the view acts as a controller that handles the business logic, database interactions, and data manipulation. It receives input from the user (HTTP requests), processes that input, interacts with the database through models and QuerySets, and passes the processed data to templates for rendering.</p> <p>So, while the view in Django is similar to the controller in traditional MVC architectures, it also incorporates some aspects of the \"view\" in terms of rendering data to the user. However, the primary responsibility of the view in Django is to handle request processing and data manipulation, making it more akin to the controller in MVC.</p> Registering Models with the Admin <p>We have to register out app's <code>model</code> such as MyEvent, MyUser with the <code>admin</code>.</p> <pre><code>from django.contrib import admin\nfrom .models import MyEvent, MyUser\n\nadmin.site.register(MyEvent)\nadmin.site.register(MyUser)\n</code></pre> <p>Q. Why do we need to register a model in Djano?</p> <p>When you register a model with the admin, you can use the admin to <code>add</code>, <code>edit</code> and <code>delete</code> model records.</p> Advanced models <p>Django QuertSet API provides a comprehensive array of methods and function for working with data.</p> <p>A Django <code>QuerySet</code> is a collection of database queries used to fetch data from the database and perform various operations on it. It represents a collection of objects retrieved from your database, typically filtered, ordered, and limited. QuerySets allow you to interact with your database in a Pythonic way, providing a powerful and expressive API for retrieving, manipulating, and querying data.</p> <p>## Basic Example</p> <pre><code>from myapp.models import Book\n\n# Retrieve all books\nall_books = Book.objects.all()\n\n# Filter books by a certain condition\nrecent_books = Book.objects.filter(published_date__year=2022)\n\n# Order books by a certain field\nsorted_books = Book.objects.order_by('title')\n\n# Retrieve a single book\nbook = Book.objects.get(title='Example Book')\n\n# Count the number of books\nnum_books = Book.objects.count()\n</code></pre> <p>Advanced Example:</p> <p>Suppose you have two models, <code>Author</code> and <code>Book</code>, where <code>Book</code> has a foreign key relationship with <code>Author</code>. Here's how you can use QuerySets for more complex operations:</p> <pre><code>from myapp.models import Author, Book\n\n# Retrieve all books by a specific author\nauthor = Author.objects.get(name='John Doe')\nbooks_by_author = Book.objects.filter(author=author)\n\n# Perform a join operation to get books published in a specific year by authors with a certain nationality\nbooks_published_in_2022 = Book.objects.filter(published_date__year=2022, author__nationality='American')\n\n# Retrieve the number of books written by each author\nfrom django.db.models import Count\nbooks_per_author = Author.objects.annotate(num_books=Count('book'))\n\n# Perform a complex query combining multiple conditions\ncomplex_query = Book.objects.filter(published_date__year=2022).exclude(author__nationality='British').order_by('-published_date')[:5]\n</code></pre> uWSGI (<code>Web Server Gateway Interface</code>) <p>Installation</p> <pre><code># installtion\npip install uwsgi\n\n# checking the version\nuwsg --version\n\n# running a web server\nuwsgi --http :8080 -w &lt;file&gt;:application\n</code></pre> project-level urls <code>vs</code> app-level urls <p>In Django, URL patterns can be defined at both the project level and the app level. Here's a brief explanation of each:</p> <ol> <li> <p>Project-level URLs:</p> <p>These are defined in the urls.py file at the project's root level. This file typically resides in the same directory as your settings.py file. Project-level URLs define the main URLs for your entire Django project. They are often used to include URLs from various apps within the project.</p> </li> <li> <p>App-level URLs:</p> <p>These are defined in the urls.py file within individual Django apps. Each app can have its own set of URLs, which are specific to the functionality provided by that app. App-level URLs are useful for organizing and encapsulating related views and functionality within the app.</p> </li> </ol> <p>Whether you should use both project-level and app-level URLs depends on the structure and complexity of your Django project:</p> <p>Small projects: For small projects with a limited number of apps and URLs, you might choose to define all URLs in the project-level urls.py file. This keeps the URL configuration simple and centralized.</p> <p>Medium to large projects: In larger projects with multiple apps and complex URL configurations, it's often beneficial to use both project-level and app-level URLs. Project-level URLs can serve as an entry point, including URLs from various apps, while each app can define its own URLs for its specific functionality.</p> <p>Here's an example of how you might structure your URLs in a Django project:</p> <pre><code>  project_name/\n  |-- manage.py\n  |-- project_name/\n  |   |-- __init__.py\n  |   |-- settings.py\n  |   |-- urls.py           # Project-level URLs\n  |   |-- wsgi.py\n  |-- app1/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app1\n  |   |-- views.py\n  |-- app2/\n  |   |-- __init__.py\n  |   |-- models.py\n  |   |-- urls.py           # App-level URLs for app2\n  |   |-- views.py\n</code></pre> <p>In this structure, the project-level urls.py file might include URLs from <code>app1.urls</code> and <code>app2.urls</code>, while each app (app1 and app2) has its own urls.py file defining URLs specific to that app's functionality. This approach allows for better organization and separation of concerns in larger projects.</p> <p>Linux</p> <p>Pass (<code>ubuntu</code>)</p> <p>pass is a very simple password store that keeps passwords inside <code>gpg</code>. It stores, retrieves, generates, and synchronizes passwords securely.</p> bash<pre><code>$ sudo apt update\n$ sudo apt install pass\n</code></pre> <code>service</code> vs <code>systemctl</code> <p>The commands sudo <code>service</code> and <code>systemctl</code> are both used for managing system services in Unix-like operating systems, but they have different purposes and usage patterns.</p> <ol> <li> <p>sudo service:</p> <p><code>sudo service</code> is a command-line tool used for managing services on Unix-like systems, particularly those using SysVinit as the init     system. It provides a simple and consistent interface for starting, stopping, restarting, and querying the status of services.</p> <p>Usage:</p> bash<pre><code># syntax\n$ sudo service &lt;service_name&gt; &lt;action&gt;\n\n#example\n$ sudo systemctl restart apache2\n</code></pre> <p>The service command is often used in older Linux distributions that still use SysVinit as the init system.</p> </li> <li> <p>systemctl:</p> <p><code>systemctl</code> is a command-line tool used for controlling the systemd system and service manager. <code>Systemd</code> is a modern init system used by many     Linux distributions. systemctl allows you to manage services, units, targets, sockets, and more.</p> <p>Usage:</p> bash<pre><code>$ sudo systemctl &lt;action&gt; &lt;service_name&gt;\n$ sudo systemctl restart apache2\n</code></pre> <p><code>systemctl</code> provides more features and capabilities compared to <code>service</code>, and it's the preferred method for managing services on systems that use     systemd.</p> </li> </ol> <p>In summary, if your system is using SysVinit as the init system, you would typically use <code>sudo service</code> to manage services. If your system is using systemd, <code>systemctl</code> is the preferred tool for service management. However, some distributions may provide compatibility layers or aliases to ensure compatibility between the two commands.</p> Creating a <code>User</code> without password <p>Yes, you can add the <code>jenkins</code> user without setting a password. This is often done for system users that don't require interactive login, such as the     <code>jenkins</code> user used for automation tasks.</p> <p>To add the <code>jenkins</code> user without setting a password, you can use the useradd command with the <code>-r</code> (or <code>--system</code>) option, which creates a system user     without a password or home directory. Here's the command:</p> bash<pre><code>sudo useradd -r jenkins\n</code></pre> <p>This command creates the <code>jenkins</code> user as a system user. System users are typically used for services and daemons and do not have passwords or home     directories by default.</p> <p>After adding the user, you can proceed to grant the necessary permissions to the <code>jenkins</code> user, such as adding it to the 'docker' group if needed, to allow it to perform specific tasks without requiring a password.</p> tmux <code>multiplexer</code> bash<pre><code># listing all tmux session\n$ tmux list-sessions\n\n# shorcurt\n$ tmux ls\n\n# To resize the pane\n&lt;Prefix&gt;, arrow down (hold)\n</code></pre> <p>Installing: Tmux Plugin Manager - <code>TPM</code></p> bash<pre><code>git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n</code></pre> <pre><code># Here's how you can create a .tmux directory if you need it:\nmkdir ~/.tmux\n\n# To create a basic configuration file, you can do the following:\ntouch ~/.tmux.conf\n</code></pre> <ul> <li> <p>One way</p> <p>While in tmux session, press <code>prefix</code> + <code>I</code> (capital <code>i</code>, as in Install) to fetch the plugin.</p> <p><code>Notes</code>: The default prefix to tmux is <code>Ctrl+b</code>.</p> </li> <li> <p>Other way</p> <p>You can also reload the Tmux configuration file by running the following command to add the plugin.</p> bash<pre><code>tmux source ~/.tmux.conf\n</code></pre> </li> </ul> <p>tmux <code>command</code> mode:</p> <p>In tmux, command mode allows you to interact with tmux commands without prefixing them with the tmux prefix key (by default, it's <code>Ctrl+b</code>). This can be convenient for executing a series of tmux commands quickly.</p> <p>To enter command mode in tmux, you can use the tmux prompt key, which is <code>:</code> (colon) by default. Pressing this key will bring up the tmux command prompt at the bottom of the terminal window.</p> <p>Here's how you can use command mode:</p> <ul> <li>Press Ctrl+b (default prefix key) to enter tmux command mode.</li> <li>Type : (colon). This will bring up the tmux command prompt at the bottom of the terminal window.</li> <li>Enter the tmux command you want to execute, for example, <code>split-window</code> to split the current window.</li> <li>Press Enter to execute the command.</li> </ul> <pre><code># Create a new window\n:new-window\n\n# Split the current window into multiple panes.\n:split-window\n\n# Split the current window into panes horizontally.\n:split-window -h\n\n# Detach from the tmux session.\n:detach-client\n\n# List all tmux sessions.\n:list-sessions\n\n# Reload the tmux configuration file.\n:source-file ~/.tmux.confS\n</code></pre> <p>Blog</p> <ul> <li>Installing TPM</li> <li>usefull tmux configuration</li> <li>customizing tmux configuration</li> <li>tmux config</li> <li>Useful Tmux Configuration</li> <li>Terminal Setup with Zsh + Tmux + Dracula Theme</li> <li>Replicate My Tmux Setup in Less Than 5 Minutes [Beginner Friendly!]</li> </ul> <p>Github</p> <ul> <li>tmux plugins: github</li> <li>list of awesome tmux: github</li> <li>dracula tmux plugins: github</li> <li>draculatheme offical site</li> </ul> <p>Stackoverflow</p> <ul> <li>How to press Ctrl + b + capital I (trying to install plugins in tmux)?</li> </ul> groups &amp; id in unix <p>To see the permissions of a user on a Unix-like system, you can use the <code>groups</code> command or <code>id</code> command.</p> bash<pre><code># Syntax\n$ groups &lt;username&gt;\n$ id &lt;username&gt;\n\n# Example: ($USER refer to the currently logged-in user.)\n$ groups $USER\n</code></pre> Installing Xampp in Linux <pre><code># To Launch XAMPP\nsudo /opt/lampp/./manager-linux-x64.run\n\n# To Unistall\nsudo /opt/lampp/./uninstall\n\n\n# After uninstall, remove the directory\nsudo rm -r /opt/lamp\n</code></pre> <p><code>sudo visudo</code> is a command used in Linux to edit the sudoers file, which determines who has administrative privileges on the system and what commands they can run with elevated permissions using the <code>sudo</code> command. The sudoers file is crucial for system security, as it controls access to sensitive operations.</p> <p>Here's what each part of the command does:</p> <ul> <li> <p><code>sudo</code>:</p> <pre><code>This is a command used in Unix-like operating systems to allow users to run programs with the security privileges of another user (usually the `superuser`, or \"`root`\"). It stands for \"superuser do.\"\n</code></pre> </li> <li> <p><code>visudo</code>:</p> <pre><code>This is a command-line utility specifically designed for editing the ==sudoers file==. It opens the sudoers file in a text editor, but it performs some syntax checking before saving changes to ensure that the file remains in a valid state. This helps prevent accidental misconfigurations that could lock users out of administrative access or potentially compromise system security.\n</code></pre> </li> </ul> <p>In summary, <code>sudo visudo</code> is used to safely edit the sudoers file, which is critical for managing user privileges and access control on a Linux system.</p> <ul> <li>How to Install and Use XAMPP on Ubuntu</li> </ul> <p>Docker</p> Docker: <code>Host</code> port vs <code>Container</code> port <p>What is left side of port ant right side of port in docker</p> <p>In Docker, when you expose ports for containers, you specify the port mappings using the <code>-p</code> flag or <code>--publish</code> flag when running a container. The syntax is typically <code>hostPort</code>:<code>containerPort</code>.</p> <ul> <li> <p>Left side (<code>hostPort</code>):</p> <p>This is the port on the host machine, the system where Docker is running. It is the port to which you can connect from outside the Docker container to access the services running within the container. If you specify a port on the left side, Docker will bind that port on the host system to the container port specified on the right side.</p> </li> <li> <p>Right side (<code>containerPort</code>):</p> <p>This is the port exposed within the Docker container. It is the port on which your application or service within the container is listening. When Docker starts the container, it will forward any traffic received on the host port (left side) to this port within the container.</p> </li> </ul> <p>For example, if you run a container with <code>-p 8080:80</code>, it means that port <code>80</code> inside the container will be accessible from port <code>8080</code> on the host machine. If you were to access <code>http://localhost:8080</code> on your host machine, Docker would forward that request to port <code>80</code> inside the container.</p> <p>This port mapping mechanism allows Docker containers to communicate with the outside world and for multiple containers to run on the same host without port conflicts.</p> Listen services running on specific port <code>:8000</code> <code>:9000</code> <pre><code># You can use the following commands to find out which processes are using these ports:\nsudo lsof -i :9000\nsudo lsof -i :8080\n</code></pre> <p>Once you identify the processes using these ports, you can decide whether to stop them or reconfigure them to use different ports. After ensuring that the ports are available, you can attempt to start the Nginx service again.</p> Last things you need to remeber in Docker Dind <p>Host os:</p> <ol> <li> <p>Add <code>Jenkins</code> user to the Docker group:</p> <p>On the host machine where Docker is installed, run the following command:</p> bash<pre><code>sudo usermod -aG docker jenkins\n</code></pre> <p>This command adds the Jenkins user to the docker group, granting it permission to interact with the Docker daemon.</p> </li> <li> <p>Ensure permissions on the Docker socket:</p> <p>The Docker daemon socket (<code>/var/run/docker.sock</code>) should be readable and writable by members of the docker group. You can check and     adjust the permissions if needed with the following command:</p> bash<pre><code>sudo chmod 666 /var/run/docker.sock\n</code></pre> </li> <li> <p>Restart Jenkins:</p> <p>Restart the Jenkins service to apply the changes:</p> bash<pre><code>sudo systemctl restart jenkins\n# or\ndocker restart &lt;container_id or container_name&gt;\n</code></pre> </li> </ol> <p>With these changes, the Jenkins user should now have the necessary permissions to execute Docker commands, and <code>you should no longer encounter permission denied errors when running Docker commands from Jenkins job scripts</code>. Make sure to test your Jenkins job again after applying these changes.</p> <p>Programming</p> JS Functional Programming <p>The idea is not to throw away everything you\u2019ve learned and use and adopt a 100% functional way; rather, the guiding idea is evolution, not revolution.</p> <p>It\u2019s easy to apply a given function from some package or the other, but by coding everything out (<code>vanilla FP</code>, if you wish), it\u2019s my belief that you get to understand things more deeply.</p> OO design patterns Functional design patterns <ul> <li>Mastering JavaScript Functional Programming by Federico Kereki, 3rd Edition</li> </ul> What Is DevOps? <p>The term <code>DevOps</code> is derived from the combination of <code>two words</code>: developer and operations.</p> <p><code>DevOps</code> is used to define a movement born of the need for reducing barriers between the development and operations teams of a company. The goal of DevOps is to reduce time to market. This means adopting DevOps practices, to reduce the time needed, from the identification of a new requirement to the time it goes live for customers.</p> <p>The <code>DevOps</code> journey introduces such practices as continuous integration and continuous   delivery, which help to reduce time to market and produce better quality software.</p> <p>Common menus on websites often include:</p> <ol> <li>Home: The homepage of the website, typically linked to the logo in the header.</li> <li>About: Information about the company, organization, or website.</li> <li>Products/Services: If applicable, a menu item leading to a page showcasing the products or services offered.</li> <li>Blog/News: A section for articles, updates, or news related to the website's topic or industry.</li> <li>Contact: Contact information or a contact form for users to reach out.</li> <li>Portfolio/Projects: For showcasing past work or projects, often seen on agency or freelancer websites.</li> <li>FAQ: Frequently Asked Questions, if applicable.</li> <li>Testimonials: Customer testimonials or reviews, typically found on business websites.</li> <li>Events/Calendar: For listing upcoming events, conferences, or important dates.</li> <li>Resources: Links to downloadable resources, documents, or helpful tools.</li> <li>Search: A search bar to help users find specific content on the website.</li> <li>Login/Register: If the website requires user authentication, links to login or register for an account.</li> <li>Terms of Service/Privacy Policy: Legal pages outlining terms of use and privacy policies.</li> <li>Sitemap: A structured layout of the website's content, helpful for navigation and SEO.</li> <li>Social Media Links: Icons linking to the website's social media profiles.</li> </ol> <p>The specific menu items will vary depending on the purpose and content of the website. It's important to consider the needs of your audience and the goals of your website when determining which menu items to include. Additionally, the menu structure should be intuitive and easy to navigate for users.</p>"},{"location":"research/draft/#making-fields-optional","title":"Making Fields Optional","text":"models.py<pre><code>class MyUserModal:\n  name = models.URLField(\"Web Address\", blank=True)\n</code></pre> <p>I have set the <code>blank</code> field to <code>True</code>. The default is <code>False</code>, which makes the field required.</p>"},{"location":"research/draft/#zen-mode-in-visual-studio","title":"Zen Mode in Visual Studio","text":"<p>Press <code>Esc</code> twice to exit Zen Mode.</p>"},{"location":"research/draft/#visual-studio","title":"Visual Studio","text":"<p>Quickly open files</p> <p>Keyboard Shortcut: <code>Ctrl+P</code></p>"},{"location":"research/draft/#reference","title":"Reference","text":"<ul> <li>How To Save And Restore Tmux Environments Across Reboots In Linux</li> <li>Restore tmux session after reboot</li> </ul>"},{"location":"research/resource/","title":"Resource","text":"<ul> <li>15 github repos you need to bookmark asap</li> </ul>"},{"location":"research/resource/#specific-links","title":"Specific Links","text":"<ul> <li>javascript utility function</li> </ul>"},{"location":"research/resource/#github","title":"Github","text":"<ul> <li>every programmer should know</li> <li>Path to Senior Engineer handbook</li> </ul>"},{"location":"research/resource/#blog-to-read","title":"Blog to Read","text":"<ul> <li>Do programming certifications still matter?</li> <li>Ten Rules for Negotiating a Job Offer</li> </ul>"},{"location":"research/resource/#best-frontend-libraries","title":"BEST FRONTEND LIBRARIES","text":"<ul> <li> <p>cdnjs</p> </li> <li> <p>Responsive Mega Menu In JavaScript</p> </li> <li> <p>jquery mega menu list</p> </li> <li> <p>mega menu source</p> </li> </ul> <p>Hero Section</p> <ul> <li>what is hero image</li> <li> <p>choosing hero image</p> </li> <li> <p>Free Frontend Resources</p> </li> </ul> <p>Bootstrap</p> <ul> <li>Dark offcanvas navbar</li> <li>Offcanvas Bootstrap 5</li> </ul>"},{"location":"research/ssh/","title":"SSH","text":""},{"location":"research/ssh/#ssh","title":"SSH","text":""},{"location":"research/ssh/#how-is-ssh-implemented-in-windows","title":"How is SSH implemented in Windows?","text":"<p>There are two separate components of OpenSSH in Windows.</p> <ul> <li>an SSH client &amp;</li> <li>an SSH server.</li> </ul> <p>Microsoft implemented both in Windows using <code>OpenSSH Client</code> and <code>OpenSSH Server</code> respectively. And there are also two main methods to install and uninstall these components in Windows. The OpenSSH Client feature is installed by default in higher-end versions of Windows. The Client is like the functionality of Putty. It allows you to make \u2018client\u2019 connections to other servers and devices using various secure protocols.</p> <p>You can confirm if you have the client installed by opening a command prompt or PowerShell prompt and typing \u2018ssh\u2019 and hitting Enter.</p> <p></p> <p>for more information about ssh &amp; OpenSSH using PowerShell...</p> <p>If you dont find the optional feature, then go to</p> <pre><code>1. Setting\n2. App\n3. App &amp; Feature\n3. search for optional feature\n</code></pre>"},{"location":"research/ssh/#login-remote-with-ssh-key-based-authentication","title":"Login remote with SSH key-based authentication","text":"<p>To log in to an SSH remote server without entering a password, you can set up SSH key-based authentication. Here's a step-by-step guide to do that:</p> <p>1. Generate SSH Key Pair: (if you don't have one already)</p> bash<pre><code>ssh-keygen -t rsa\n</code></pre> <p>This command will generate a new SSH key pair (<code>public</code> and <code>private</code>)</p> <p>2. Copy the Public Key to the Remote Server:</p> <p>Use the ssh-copy-id command to copy your public key to the remote server. Replace <code>username</code> and <code>remote_host</code> with your username and the hostname or IP address of the remote server.</p> bash<pre><code>ssh-copy-id username@remote_host\n</code></pre> <p>You'll be prompted to enter your password for the remote server. After that, your public key will be added to the <code>~/.ssh/authorized_keys</code> file on the remote server.</p> <p>3. Test SSH Connection:</p> <p>Try to SSH into the remote server again. You should be able to log in without being prompted for a password:</p> bash<pre><code>ssh username@remote_host\n</code></pre> <p>With SSH key-based authentication set up, you can now log in to your remote server <code>without entering a password</code>, provided you have the corresponding private key stored on your local machine.</p>"},{"location":"research/ssh/#reference","title":"Reference","text":"<ul> <li>What is a Git SSH Key? </li> <li>SSH Essentials: Working with SSH Servers, Clients, and Keys</li> <li>Connecting to GitHub with SSH</li> <li>The Ultimate Guide to Installing OpenSSH on Windows</li> <li> <p>jenkins guide</p> </li> <li> <p>19 Common SSH Commands in Linux With Examples</p> </li> <li>SSH Commands Cheat Sheet</li> <li>13 must-know SSH Commands</li> </ul>"},{"location":"research/tricks/","title":"Tips & Tricks","text":"<p>Deployment</p> <pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\n$ cd ../orgname.github.io/\n$ mkdocs gh-deploy --config-file ../&lt;project-name&gt;/mkdocs.yml --remote-branch &lt;branch-name&gt;\n</code></pre>"},{"location":"research/tricks/#python","title":"Python","text":""},{"location":"research/tricks/#shell","title":"shell","text":"<p>Example</p> <pre><code># Install djagno, drf, dotenv, mysqlclient at once\n$ pip install django djangorestframework python-dotenv mysqlclient\n\n# open python shell\n$ python manage.py shell\n\n# create the object using the model\n$ from geeks.models import GeeksModel\n$ GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n$ GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"},{"location":"research/tricks/#venv","title":"venv","text":"<pre><code># On Linux\npython3 -m venv venv &amp;&amp; source venv/bin/activate\n\n# On Windows\n.\\venv\\Scripts\\activate\n</code></pre>"},{"location":"research/tricks/#git","title":"git","text":"<p><code>Global Information Tracker</code></p>"},{"location":"research/tricks/#basic","title":"Basic","text":"<pre><code># used to make changes to the last commit\n$ git commit --amend -m \"Add\"\n\n# restore all files to the state of the last commit.\n$ git restore *\n\n# Managing remote repositories\n$ git remote -v\n\n# showing each commit as a single line\n$ git log --oneline\n\n# The primary difference is that --pretty=oneline explicitly specifies the format to be \"oneline.\"\n$ git log --pretty=oneline\n\n# if you want to delete a remote branch named feature-branch, you would use:\n$ git push origin --delete feature-branch\n</code></pre>"},{"location":"research/tricks/#configuration","title":"configuration","text":"<pre><code># opens the global configuration file\ngit config --global --edit\n\n# opens the repository-specific configuration file\ngit config --edit\n</code></pre>"},{"location":"research/tricks/#git-branch","title":"git branch","text":"<pre><code># displaying very-verbose information\n$ git branch -vv\n\n# used to list all branches in a Git repository, both local and remote branches.\n$ git branch -a\n\n# To see only remote branches\n$ git branch -r\n\n# To see only local branches\n$ git branch\n</code></pre>"},{"location":"research/tricks/#git-diff","title":"git diff","text":"<pre><code># To see the changes made to a specific file in Git\ngit diff path/to/your/file\n\n# To see the changes for a file that has already been staged (but not committed yet)\ngit diff --staged path/to/your/file\n\n# If you want to display only the names of the files that have changed\ngit diff --name-only\n\n# If you just want a summary of changes:\ngit diff --stat\n</code></pre>"},{"location":"research/tricks/#git-stash","title":"git stash","text":"<pre><code># Stashing is helpful when you want to save changes in your working directory without committing them\n# This is useful when you need to switch branches or perform other operations without committing incomplete work.\n$ git stash save \"your message\"\n\n# Lists all stashes\n$ git stash list\n\n# Removes all stashes.\n$ git stash clear\n\n# Applies the changes from the most recent stash and removes it from the stash list.\n$ git stash pop\n\n# Applies the changes from the most recent stash to your working directory.\n$ git stash apply\n\n# Creates a new branch and applies the changes from the most recent stash to it.\n$ git stash branch feature-branch\n</code></pre>"},{"location":"research/tricks/#git-cherry-pick","title":"git cherry-pick","text":"<pre><code># allows you to apply a specific commit from one branch onto another. \n# This is useful when you want to selectively bring changes from \n# one branch to another without merging the entire branch.\n\n$ git cherry-pick &lt;commit&gt;\n</code></pre> git tags <p>To add a tag in Git, you have two main options: lightweight tags and annotated tags.</p> <p>1. Lightweight Tags:</p> <p>Lightweight tags are simply pointers to a specific commit. They are created with the git tag command followed by the tag name. Here's how you can add a lightweight tag:</p> <pre><code>git tag &lt;tag_name&gt;\n</code></pre> <p>For example, if you want to tag the current commit with the tag \"v1.0.0\", you would run:</p> <pre><code>git tag v1.0.0\n</code></pre> <p>2. Annotated Tags:</p> <p>Annotated tags, on the other hand, are stored as full objects in the Git database. They include a tagger name, email, date, and a tagging message. You create an annotated tag using the -a option with the git tag command, like so:</p> <pre><code>git tag -a &lt;tag_name&gt; -m \"Tagging message\"\n</code></pre> <pre><code>git tag -a v1.0.0 -m \"Version 1.0.0 release\"\n</code></pre> <p>Pushing Tags to Remote Repository:</p> <p>After creating the tag locally, you might want to push it to a remote repository like GitHub. You can do this using the git push command with the --tags option to push all tags:</p> <pre><code>git push origin --tags\n</code></pre> <p>If you only want to push a specific tag, you can specify it like this:</p> <pre><code>git push origin &lt;tag_name&gt;\n</code></pre> <p>For example:</p> <pre><code>git push origin v1.0.0\n</code></pre> <p>Example Workflow:</p> <p>Here's a complete example workflow to add a tag and push it to a remote repository:</p> <ol> <li>Create a lightweight tag:</li> </ol> <pre><code>git tag v1.0.0\n</code></pre> <ol> <li>Push the tag to the remote repository:</li> </ol> <pre><code>git push origin v1.0.0\n</code></pre> <p>Alternatively, if you want to create an annotated tag:</p> <ol> <li>Create an annotated tag with a message:</li> </ol> <pre><code>git tag -a v1.0.0 -m \"Version 1.0.0 release\"\n</code></pre> <ol> <li>Push the annotated tag to the remote repository:</li> </ol> <pre><code>git push origin v1.0.0\n</code></pre> <p>Remember to replace <code>&lt;tag_name&gt;</code> with the name of your tag and <code>&lt;tagging_message&gt;</code> with a descriptive message for annotated tags.</p>"},{"location":"research/tricks/#reference","title":"Reference","text":"<ul> <li>git log graph</li> <li>pretty graph dog</li> <li> <p>Git Bisect | How to use Git Bisect: video</p> </li> <li> <p>mkdocs plugins</p> </li> <li> <p>git tags? how to use them</p> </li> </ul>"},{"location":"research/web-design/","title":"Web Design","text":"Hero Section <p>Types of hero section</p> <p>The hero section of a website is typically the large, prominently placed section at the top of a webpage, often spanning the full width of the screen. It's one of the most critical parts of web design as it's the first thing visitors see and sets the tone for the rest of the site. There are several types of hero sections commonly used in web design:</p> <p>1. Image Background Hero Section: This type of hero section features a large, visually striking image as the background. It can be a static image or a slideshow/carousel of images. This type of hero section is popular because it immediately captures the visitor's attention.</p> <p>2. Video Background Hero Section: Similar to the image background hero section, but instead of a static image, it features a video playing in the background. This can be a full-screen video or a smaller video contained within the hero section. Video backgrounds can be particularly engaging and can help convey a brand's message effectively.</p> <p>3. Text-Centric Hero Section: In this type of hero section, the focus is on the text rather than the background image or video. The text may include a catchy headline, a brief description, and a call-to-action button. The background could be a solid color, a gradient, or a subtle pattern.</p> <p>4. Product Showcase Hero Section: If the website is focused on showcasing products or services, the hero section might feature a carousel or grid of images displaying the featured products or services. This type of hero section is common in e-commerce websites.</p> <p>5. Interactive Hero Section: An interactive hero section encourages user engagement through elements like sliders, interactive maps, or animations triggered by user actions. It's a more dynamic approach to the hero section, providing an immersive experience for visitors.</p> <p>6. Minimalist Hero Section: This type of hero section uses simple design elements, such as a single background image with minimal text and no distractions. It's clean, elegant, and allows the content to speak for itself.</p> <p>7. Illustrated Hero Section: Instead of using photographs or videos, this hero section features illustrations or graphics as the main visual element. It's a creative and unique approach that can help establish a brand's personality.</p> <p>8. Split-Screen Hero Section: In a split-screen hero section, the screen is divided into two sections, often with contrasting colors or images on each side. This design technique can be used to showcase two different aspects of a brand or to provide a visual comparison.</p> <p>These are just a few examples of the types of hero sections used in web design. The choice of hero section depends on factors such as the website's purpose, target audience, branding guidelines, and design preferences.</p> <p>Reference</p> <ul> <li>Impress your visitors: 6 tips for a perfect hero section</li> <li>The 4 types of hero images</li> <li>Landing Page Hero Shots</li> <li>What should a hero section have?</li> <li>8 creative ways to design your hero section</li> <li>What is a hero image?</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/page/3/","title":"Index","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Django cors</li> <li>Managing development .env in Django</li> </ul>"},{"location":"tags/#drf","title":"Drf","text":"<ul> <li>Viewset vs APIView</li> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> </ul>"},{"location":"tags/#github","title":"Github","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#porgramming","title":"Porgramming","text":"<ul> <li>How to Check the React Version in Your Project</li> </ul>"},{"location":"tags/#postman","title":"Postman","text":"<ul> <li>Automatically set Bearer Token in global variable postman after Login api</li> </ul>"},{"location":"tags/#programming","title":"Programming","text":"<ul> <li>A Guide to Secure Your Commits with GPG Keys</li> <li>Mastering Collaboration: A Guide to Git Branching Strategies</li> <li>How to pull all branches from a remote repository in GitHub ?</li> <li>Mastering Git: Understanding --track and --set-upstream</li> <li>Understanding JavaScript Array Methods: Mutating vs. Non-Mutating</li> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>React Router v6 Guide</li> <li>How to Add SSH Keys to Your GitHub Account</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>drf-yasg: Swagger</li> <li>Blog CRUD Application Using DRF \u2014 Viewsets</li> <li>Adding Syntax hightlighting in the material</li> <li>How to Set Up a Virtual Environment in Python</li> </ul>"},{"location":"tags/#react","title":"React","text":"<ul> <li>How to Check the React Version in Your Project</li> </ul>"},{"location":"tags/#ssh","title":"SSH","text":"<ul> <li>Managing Multiple SSH Keys for Secure and Efficient Remote Access</li> <li>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</li> </ul>"},{"location":"tags/#simplejwt","title":"SimpleJWT","text":"<ul> <li>How to Implement Tokenization using JWT and Django</li> </ul>"}]}