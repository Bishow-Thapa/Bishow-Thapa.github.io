{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> <p>Let's collaborate and turn visions into reality!</p> <ul> <li>Front-End Expert: Two years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>gThumb lightweight image editor in ubuntu</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"},{"location":"tags/#api","title":"api","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#base64","title":"base64","text":"<ul> <li>Encoding and Decoding</li> <li>Saving base64 data into an Excel file in a React application</li> </ul>"},{"location":"tags/#css","title":"css","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#git","title":"git","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"},{"location":"tags/#html","title":"html","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#http","title":"http","text":"<ul> <li>Content-Type or MIME type in Post</li> <li>Useful React Libraries for Projects</li> </ul>"},{"location":"tags/#js","title":"js","text":"<ul> <li>Understanding e.item.props in React and Ant Design's Menu Component</li> <li>Exploring Object.prototype in JavaScript</li> <li>Handling Circular References in JavaScript: Avoiding 'TypeError: cyclic object value' in JSON.stringify</li> <li>JS objects</li> <li>How to send multipart/form-data request file in postman</li> <li>Unveiling Static and Prototype Methods in JavaScript Built-in Objects</li> </ul>"},{"location":"tags/#postman","title":"postman","text":"<ul> <li>Content-Type or MIME type in Post</li> <li>Useful React Libraries for Projects</li> </ul>"},{"location":"tags/#postment","title":"postment","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#react","title":"react","text":"<ul> <li>Understanding e.item.props in React and Ant Design's Menu Component</li> <li>Encoding and Decoding</li> <li>Saving base64 data into an Excel file in a React application</li> </ul>"},{"location":"tags/#tracking","title":"tracking","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/","title":"Content-Type or MIME type in Post","text":"","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#content-type-or-mime-type-in-post","title":"Content-Type or MIME type in Post","text":"<p>The Content-Type representation header is used to indicate the original media type of the resource (prior to any content encoding applied for sending).</p>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#syntax","title":"Syntax","text":"HTTP<pre><code>Content-Type: text/html; charset=utf-8\nContent-Type: multipart/form-data; boundary=something\n</code></pre>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#most-used","title":"Most used","text":"<p>The most commonly used <code>Content-Type</code> (or MIME type) for POST HTTP requests depends on the type of data being sent. Here are a few of the most frequently used Content-Type headers:</p> <ol> <li>application/json: Used for sending JSON data.</li> </ol>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#examples","title":"Examples","text":"Content-Type in HTML forms <p>In a POST request, resulting from an HTML form submission, the Content-Type of the request is specified by the enctype attribute on the <code>&lt;form&gt;</code> element.</p> <pre><code>&lt;form action=\"/foo\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n&lt;input type=\"text\" name=\"description\" value=\"some text\" /&gt;\n&lt;input type=\"file\" name=\"myFile\" /&gt;\n&lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>The request looks something like this (less interesting headers are omitted here):</p> HTTP<pre><code>POST /foo HTTP/1.1\nContent-Length: 68137\nContent-Type: multipart/form-data; boundary=---------------------------974767299852498929531610575\n\n-----------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"description\"\n\nsome text\n-----------------------------974767299852498929531610575\nContent-Disposition: form-data; name=\"myFile\"; filename=\"foo.txt\"\nContent-Type: text/plain\n\n(content of the uploaded file foo.txt)\n-----------------------------974767299852498929531610575--\n</code></pre>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#mime-types","title":"MIME types","text":"<p>A MIME type (now properly called \"media type\", but also sometimes \"content type\") is a string sent along with a file indicating the type of the file (describing the content format, for example, a sound file might be labeled <code>audio/ogg</code>, or an image file <code>image/png</code>).</p>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#multipart-types","title":"Multipart types","text":"<p>There are two multipart types:</p> <ol> <li>message</li> <li>multipart</li> </ol>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#important-mime-types-for-web-developers","title":"Important MIME types for Web developers","text":"<ol> <li> <p>application/octet-stream</p> <p>This is the default for <code>binary files</code>. As it means unknown binary file, browsers usually don't execute it, or even ask if it should be executed. They treat it as if the Content-Disposition header was set to <code>attachment</code>, and propose a \"Save As\" dialog.</p> </li> <li> <p>text/plain</p> <p>This is the default for textual files. Even if it really means \"unknown textual file,\" browsers assume they can display it.</p> </li> </ol> Example TextApplicationImagesAudio/VideoFonts <pre><code>Text\n\ntext/html: HTML documents.\nContent-Type: text/html\n\ntext/css: Cascading Style Sheets.\nContent-Type: text/css\n\ntext/javascript or application/javascript: JavaScript files.\nContent-Type: text/javascript\n</code></pre> <pre><code>Application\n\napplication/json: JSON data.\nContent-Type: application/json\n\napplication/xml: XML data.\nContent-Type: application/xml\n\napplication/octet-stream: Arbitrary binary data. Often used for file downloads.\nContent-Type: application/octet-stream\n\napplication/pdf: PDF documents.\nContent-Type: application/pdf\n\napplication/x-www-form-urlencoded: Form data in URL-encoded format.\nContent-Type: application/x-www-form-urlencoded\n\nmultipart/form-data: Form data that includes files or binary data.\nContent-Type: multipart/form-data; boundary=---boundary\n</code></pre> <pre><code>Images\n\nimage/jpeg: JPEG images.\nContent-Type: image/jpeg\n\nimage/png: PNG images.\nContent-Type: image/png\n\nimage/gif: GIF images.\nContent-Type: image/gif\n\nimage/svg+xml: SVG vector images.\nContent-Type: image/svg+xml\n</code></pre> <pre><code>Audio/Video\n\naudio/mpeg: MP3 audio files.\nContent-Type: audio/mpeg\n\naudio/ogg: OGG audio files.\nContent-Type: audio/ogg\n\naudio/wav: WAV audio files.\nContent-Type: audio/wav\n\nvideo/mp4: MP4 video files.\nContent-Type: video/mp4\n\nvideo/ogg: OGG video files.\nContent-Type: video/ogg\n</code></pre> <pre><code>Fonts\n\nfont/woff: Web Open Font Format (WOFF).\nContent-Type: font/woff\n\nfont/woff2: Web Open Font Format (WOFF2).\nContent-Type: font/woff2\n</code></pre> <p>Understanding these MIME types is crucial for web development as they help ensure that the server and browser correctly interpret and handle various types of content. Using the correct MIME type ensures proper rendering and functionality of web pages and applications.</p>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#mime-type-content-type-realtionship","title":"MIME-Type &amp; Content-Type Realtionship","text":"","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#mime-type","title":"MIME Type","text":"<ul> <li>What it is: A way to describe the type of content.</li> <li>Format: <code>type/subtype</code> (e.g., <code>application/json</code>, <code>text/html</code>).</li> <li>Example: <code>application/json</code> means the content is JSON.</li> </ul>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#content-type","title":"Content-Type","text":"<ul> <li>What it is: An HTTP header that tells the server what type of content is being sent.</li> <li>What it contains: A MIME type.</li> <li>Example: <code>Content-Type: application/json</code> means the content being sent is JSON.</li> </ul>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#relationship","title":"Relationship","text":"<ul> <li>The <code>Content-Type</code> header uses MIME types to specify the format of the data.</li> <li>In other words: MIME type is the value, and <code>Content-Type</code> is the header that holds that value.</li> </ul>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#example-in-a-post-request","title":"Example in a POST Request","text":"<p>When sending JSON data in a POST request:</p> <pre><code>POST /api/resource HTTP/1.1\nHost: example.com\nContent-Type: application/json\nContent-Length: 27\n\n{\n  \"name\": \"John\",\n  \"age\": 30\n}\n</code></pre> <ul> <li>Content-Type header: <code>Content-Type: application/json</code></li> <li>MIME type used: <code>application/json</code></li> </ul>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#summary","title":"Summary","text":"<ul> <li>MIME Type: Describes the type of content (e.g., <code>application/json</code>).</li> <li>Content-Type: The HTTP header that includes the MIME type to tell the server what kind of data you're sending.</li> </ul> <p>So, MIME type and Content-Type are closely related, with MIME type being the description of the content and Content-Type being the header that communicates this description in HTTP requests.</p>","tags":["postman","http"]},{"location":"blog/2024/07/06/content-type-or-mime-type-in-post/#reference","title":"Reference","text":"<ul> <li>Content-Type: Http Headers</li> <li>what the heck is multipart/form-data???: medium</li> <li>MIME_types</li> </ul>","tags":["postman","http"]},{"location":"blog/2024/05/18/css-media-queries/","title":"CSS Media Queries","text":"","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-media-queries","title":"CSS Media Queries","text":"<p>CSS media queries are a powerful tool for creating responsive web designs. They allow you to apply different styles based on the characteristics of the device viewing the content, such as the <code>screen size</code>, <code>resolution</code>, <code>orientation</code>, and more. This way, you can ensure that your website looks good and functions well on a wide range of devices, from desktop monitors to smartphones.</p>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#media-queries","title":"Media Queries","text":"<p>The @media rule, introduced in <code>CSS2</code>, made it possible to define different style rules for different media types.</p> <p>Media queries in <code>CSS3</code> extended the <code>CSS2</code> media types idea: Instead of looking for a type of device, they look at the capability of the device.</p> <p>Media queries can be used to check many things, such as:</p> <ul> <li>width and height of the viewport</li> <li>orientation of the viewport (<code>landscape</code> or <code>portrait</code>)</li> <li>resolution</li> </ul> <p>Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).</p> <p>Syntax</p> <p>A media query consists of a media type and can contain one or more media features, which resolve to either <code>true</code> or <code>false</code>.</p> CSS<pre><code>@media not|only mediatype and (media feature) and (media feature) {\n    ...\n    /* CSS-Code; */\n    ...\n}\n</code></pre> <p>The mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype.</p>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#example","title":"Example","text":"<p>Example</p> <pre><code>/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\n    body {\n        background-color: blue;\n    }\n}\n\n/* If screen size is more than 992px wide, set the font-size of &lt;div&gt; to 80px */\n@media screen and (min-width: 992px) {\n    div.example {\n        font-size: 80px;\n    }\n}\n\n/* Orientation: Portrait / Landscape */\n@media only screen and (orientation: landscape) {\n    body {\n        background-color: lightblue;\n    }\n}\n\n/* Min Width to Max Width:  */\n/* For example, when the browser's width is between 600 and 900px, change the appearance of a &lt;div&gt; element: */\n@media screen and (max-width: 900px) and (min-width: 600px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n\n\n/* When the width is between 600px and 900px or above 1100px - change the appearance of &lt;div&gt; */\n@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n</code></pre> <p>Note</p> <p>Meaning of the not, only, and and keywords:</p> <ul> <li><code>not</code>: This keyword inverts the meaning of an entire media query.</li> <li><code>only</code>: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.</li> <li><code>and</code>: This keyword combines a media type and one or more media features.</li> </ul> <p>You can also link to different stylesheets for different media and different widths of the browser window (viewport):</p> html<pre><code>&lt;link rel=\"stylesheet\" media=\"print\" href=\"print.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen\" href=\"screen.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 480px)\" href=\"example1.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 701px) and (max-width: 900px)\" href=\"example2.css\"&gt;\n</code></pre>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-media-types","title":"CSS Media Types","text":"Value Description <code>all</code> Used for all media type devices <code>print</code> Used for print preview mode <code>screen</code> Used for computer screens, tablets, smart-phones etc.","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-common-media-features","title":"CSS Common Media Features","text":"<p>Here are some commonly used media features:</p> Value Description <code>orientation</code> Orientation of the viewport. Landscape or portrait <code>max-height</code> Maximum height of the viewport <code>min-height</code> Minimum height of the viewport <code>height</code> Height of the viewport (including scrollbar) <code>max-width</code> Maximum width of the viewport <code>min-width</code> Minimum width of the viewport <code>width</code> Width of the viewport (including scrollbar)","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#reference","title":"Reference","text":"<ul> <li>CSS Media Queries: w3schools</li> <li>Responsive Web Design - Media Queries: w3schools</li> <li>Using media queries: developer.mozilla.org</li> <li>CSS3 mediaqueries</li> <li>CSS RWD Mediaqueries: w3schools</li> </ul>","tags":["css","html"]},{"location":"blog/2024/06/08/understanding-eitemprops-in-react-and-ant-designs-menu-component/","title":"Understanding e.item.props in React and Ant Design's Menu Component","text":"","tags":["react","js"]},{"location":"blog/2024/06/08/understanding-eitemprops-in-react-and-ant-designs-menu-component/#understanding-eitemprops-in-react-and-ant-designs-menu-component","title":"Understanding <code>e.item.props</code> in React and Ant Design's Menu Component","text":"<p>In the context of Ant Design's Menu component, <code>e.item.props</code> refers to the properties of the Menu.Item component that triggered the click event. When a menu item is clicked, Ant Design provides an event object e that contains various details about the event. One of these details is <code>e.item</code>, which represents the <code>Menu.Item</code> that was clicked.</p>","tags":["react","js"]},{"location":"blog/2024/06/08/understanding-eitemprops-in-react-and-ant-designs-menu-component/#how-eitemprops-works","title":"How <code>e.item.props</code> Works?","text":"<p>When you create a Menu in Ant Design, each Menu.Item can have its own properties. These properties are similar to the props you would pass to any React component. For instance, you might pass a <code>key</code>, <code>title</code>, or <code>custom data-*</code> attributes to a Menu.Item.</p> <p>Example</p> React<pre><code>import React, { useState } from 'react';\nimport { Menu } from 'antd';\n\nconst MyMenuComponent = ({ menuData, handleMenuClick }) =&gt; {\n    const [selectedTitle, setSelectedTitle] = useState('');\n\n    const handleClick = (e) =&gt; {\n        const clickedTitle = e.item.props['data-title'];\n        setSelectedTitle(clickedTitle);\n        handleMenuClick(clickedTitle);\n    };\n\n    return (\n        &lt;Menu onClick={handleClick} style={{ width: 256 }} mode=\"inline\"&gt;\n            {menuData.map((item, index) =&gt; (\n                &lt;Menu.Item\n                key={item.id}\n                data-title={item.title}\n                &gt;\n                &lt;span&gt;{index + 1}. {item.title}&lt;/span&gt;\n                &lt;/Menu.Item&gt;\n            ))}\n        &lt;/Menu&gt;\n    );\n};\n\nexport default MyMenuComponent;\n</code></pre>","tags":["react","js"]},{"location":"blog/2024/06/08/understanding-eitemprops-in-react-and-ant-designs-menu-component/#why-use-eitemprops","title":"Why Use e.item.props?","text":"<p>Using <code>e.item.props</code> is beneficial for several reasons:</p> <ol> <li> <p>Dynamic Data Access:</p> <p>It allows you to dynamically access data associated with a menu item, such as titles, IDs, or custom attributes.</p> </li> <li> <p>Simplified Event Handling:</p> <p>Instead of setting up additional state or context to manage menu item data, you can directly access the properties within the event handler.</p> </li> <li> <p>Enhanced Flexibility:</p> <p>You can pass any data you need via custom attributes, making your components more flexible and easier to manage.</p> </li> </ol>","tags":["react","js"]},{"location":"blog/2024/06/08/understanding-eitemprops-in-react-and-ant-designs-menu-component/#conclusion","title":"Conclusion","text":"<p>Whether you're building a sidebar menu or any other interactive component, understanding how to use <code>e.item.props</code> effectively will enhance your React development experience.</p>","tags":["react","js"]},{"location":"blog/2024/06/29/encoding-and-decoding/","title":"Encoding and Decoding","text":"","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#encoding-and-decoding","title":"Encoding and Decoding","text":"<p>Base64 encoding converts binary data into a text-based format using a set of 64 characters (A-Z, a-z, 0-9, +, /) to ensure safe transmission over text-based protocols like HTTP. It is commonly used for embedding binary data into text formats, such as JSON, XML, or HTML, where binary data cannot be directly transmitted.</p> <p>Tip</p> <p>Example: Encoding a binary image data into Base64:</p> <p>Original binary image data:</p> <pre><code>01101000 01110100 01110100 01110000 00111010 00101111 00101111 01100101 01111000 01100001 01101101 01110000 01101100 01100101 00101110 01100011 01101111 01101101 00101111 01101001 01101101 01100001 01100111 01100101 01110011 00101110 01110000 01101110 01100111\n</code></pre> <p>Base64 encoded representation:</p> <pre><code>aHR0cDovL2V4YW1wbGUuY29tL2ltYWdlcy5wbmc=\n</code></pre> bas64 TheoryBackendFrontend <p>Using Base64 encoding is a common method to safely transfer binary data, such as files, over text-based protocols like HTTP. Here are the key reasons why Base64 is often used and how it works in simple terms:</p> <p>Why Base64?</p> <ul> <li> <p>Text-Based Transfer: HTTP and many other protocols are designed to handle text data efficiently. Binary data, such as images, PDFs, or other files, can include byte sequences that are not safe for text-based protocols. Base64 converts binary data into a text string composed of ASCII characters, making it safe to transmit over text-based protocols.</p> </li> <li> <p>Consistency: When sending data in text form, you avoid issues with character encoding that might corrupt the data. Base64 ensures that the data remains intact during transmission.</p> </li> <li> <p>Compatibility: Many systems and APIs expect data to be in a text format, especially when sending it in JSON objects. Base64 allows you to embed binary data within JSON objects easily.</p> </li> </ul> <p>How Base64 Works</p> <ul> <li> <p>Encoding: The binary data (such as the contents of a file) is divided into chunks of 3 bytes (24 bits). Each chunk is then split into four groups of 6 bits each. These 6-bit groups are then mapped to a set of 64 characters (A-Z, a-z, 0-9, +, /).</p> </li> <li> <p>Padding: If the total number of bytes isn't divisible by 3, the encoder adds padding (usually \"=\") to make it up to a multiple of 4 characters.</p> </li> <li> <p>Decoding: The receiver reverses the process by converting the Base64 text back into the original binary data.</p> </li> </ul> <p>Backend: Encode and Send File Data</p> <p>Here's a simplified example in Node.js using Express:</p> <pre><code>const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\napp.get('/download', (req, res) =&gt; {\n    const filePath = path.join(__dirname, 'files', 'image.png'); // Path to your file\n    const fileName = 'image.png'; // File name to be sent\n\n    // Read the file and encode it to base64\n    fs.readFile(filePath, (err, data) =&gt; {\n        if (err) {\n            return res.status(500).json({ error: 'Failed to read file', details: err.message });\n        }\n\n        const base64data = data.toString('base64');\n        res.json({ fileName, fileType: 'image/png', fileData: base64data });\n    });\n});\n\napp.listen(port, () =&gt; {\n    console.log(`Server running at http://localhost:${port}`);\n});\n</code></pre> <p>Frontend: Decode and Save File Data</p> <p>Here's a React component to fetch the file data, decode it, and save it:</p> <pre><code>import React, { useState } from 'react';\n\nconst FileDownload = () =&gt; {\n    const [file, setFile] = useState(null);\n\n    const handleFileDownload = () =&gt; {\n        fetch('http://localhost:3000/download')\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                const { fileName, fileType, fileData } = data;\n\n                // Decode base64 string to binary data\n                const binaryString = atob(fileData);\n                const len = binaryString.length;\n                const bytes = new Uint8Array(len);\n                for (let i = 0; i &lt; len; i++) {\n                    bytes[i] = binaryString.charCodeAt(i);\n                }\n\n                // Create a blob from the binary data\n                const blob = new Blob([bytes], { type: fileType });\n\n                // Create a link element to download the file\n                const link = document.createElement('a');\n                link.href = URL.createObjectURL(blob);\n                link.download = fileName;\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n\n                setFile({ fileName, fileType, fileData });\n            })\n            .catch(error =&gt; {\n                console.error('Error downloading file:', error);\n            });\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleFileDownload}&gt;Download File&lt;/button&gt;\n            {file &amp;&amp; &lt;p&gt;File downloaded: {file.fileName}&lt;/p&gt;}\n        &lt;/div&gt;\n    );\n};\n\nexport default FileDownload;\n</code></pre> <p>Summary</p> <ul> <li>Base64 Encoding: Converts binary data to a safe text format for transmission.</li> <li>Backend: Reads the file, encodes it to Base64, and sends it in a JSON response.</li> <li>Frontend: Fetches the Base64 data, decodes it, creates a Blob, and triggers a file download.</li> </ul> <p>This method ensures that you can safely send and receive file data without worrying about binary data corruption or compatibility issues with text-based protocols.</p> <p>Tip</p> <ul> <li>Binary Encoding: Represents data directly as bits without additional encoding, suitable for raw data storage and transmission.</li> <li>Base64 Encoding: Converts binary data into a text-based format using a set of 64 characters, commonly used for embedding binary data in text-based protocols.</li> <li>Binary Formats: Structured data serialization formats (e.g., Protocol Buffers, MessagePack) that encode data into efficient binary representations for performance and size benefits.</li> <li>Gzip Compression: Reduces the size of data by finding repeated patterns and replacing them with references, optimizing data transmission over networks.</li> </ul> Tip <p>The \"best\" method for sending data in an API response depends heavily on the specific requirements and constraints of your application. Here are a few considerations and methods commonly used in API design:</p> <ol> <li> <p>Direct Binary Transfer (Preferred for Large Files):</p> <ul> <li>Method: Instead of encoding binary data (like images, documents) into Base64 and embedding it within JSON/XML, you can directly transfer the binary data.</li> <li>Advantages: Reduces payload size since Base64 encoding increases data size by about 33%. Improves performance and reduces complexity on both server and client sides.</li> <li>Implementation: Use HTTP content types (multipart/form-data for form-based uploads or application/octet-stream for raw binary) to handle file uploads efficiently.</li> </ul> </li> <li> <p>Base64 Encoding (Preferred for Small Binary Data within JSON/XML):</p> <ul> <li>Method: Encode binary data (e.g., images) into Base64 and embed it as a string within JSON or XML.</li> <li>Advantages: Ensures compatibility with text-based protocols. Allows transmission of binary data where direct binary transfer isn't feasible (e.g., in some JSON APIs). Considerations: Increased payload size and additional processing overhead for encoding and decoding Base64 data.</li> </ul> </li> <li> <p>URLs for Large Files (Optional):</p> <ul> <li>Method: Instead of embedding large files in API responses, return URLs where the files can be accessed or downloaded.</li> <li>Advantages: Reduces API response size. Allows efficient handling of large files by offloading storage and bandwidth requirements to a dedicated file server or CDN. Implementation: Ensure URLs are secure (e.g., using tokens or permissions) and accessible by API consumers.</li> </ul> </li> </ol> <p>Choosing the Best Method:</p> <ul> <li> <p>Payload Size: Consider the size of the data being transmitted. For small files or binary data snippets, Base64 might be acceptable. For larger files, direct binary transfer or URLs are typically more efficient.</p> </li> <li> <p>Performance: Evaluate the impact on network bandwidth, server load, and client-side processing. Direct binary transfer generally offers better performance compared to Base64 encoding, especially for large files.</p> </li> <li> <p>Compatibility: Ensure the chosen method is compatible with your client applications and any constraints they might have (e.g., browser support for file uploads or handling Base64).</p> </li> <li> <p>Security: Always prioritize security when transmitting sensitive data. Use HTTPS for secure communication and consider access controls for URLs or direct binary transfers.</p> </li> </ul> <p>In conclusion, the \"best\" method often involves a trade-off between payload size, performance, compatibility, and security considerations. Direct binary transfer is generally preferred for large files, while Base64 encoding within JSON/XML can be suitable for smaller binary data. Choose the method that best fits your specific use case and requirements.</p>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#sending-data-as-base64-in-an-api-response","title":"Sending data as Base64 in an API response","text":"<p>Sending data as Base64 in an API response can have both advantages and disadvantages depending on the context. Here are some considerations:</p>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#advantages","title":"Advantages:","text":"<ul> <li> <p>Binary Data Handling: Base64 encoding allows you to safely transmit binary data (like images, documents) over text-based protocols (like JSON or XML) without risking data corruption due to special characters or encoding issues.</p> </li> <li> <p>Compatibility: Some platforms or systems might have restrictions on the characters they can handle in JSON or XML. Base64 encoding ensures compatibility across different systems and languages.</p> </li> <li> <p>Security: While Base64 is not encryption, it can obscure data from casual inspection since it transforms binary data into a text format. This can be beneficial for transmitting sensitive information.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#disadvantages","title":"Disadvantages:","text":"<ul> <li> <p>Increased Payload Size: Base64 encoding increases the size of the data by approximately 33%. This can impact network bandwidth and API performance, especially when transferring large amounts of data.</p> </li> <li> <p>Complexity: Handling Base64 data requires additional processing on both the server and client sides to decode and encode the data, which adds complexity to the implementation.</p> </li> <li> <p>Debugging: Debugging encoded Base64 data is more difficult compared to debugging plain text or JSON/XML data. It requires extra steps to decode the Base64 string to examine the original data.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>Small Binary Data: For small files or images embedded within JSON responses, Base64 encoding is often used and practical.</p> </li> <li> <p>API Design: If your API consumers are comfortable with handling Base64 data and understand its implications, it might be a suitable choice.</p> </li> <li> <p>Compatibility Requirements: When interoperability across different platforms and systems is crucial, Base64 ensures that binary data can be safely transmitted.</p> </li> </ul>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#conclusion","title":"Conclusion:","text":"<p>Whether it's good to send data as Base64 in an API response depends on your specific requirements and trade-offs between simplicity, performance, and compatibility. For small amounts of binary data or when compatibility across diverse systems is necessary, Base64 can be a pragmatic solution. However, for large data payloads or when optimizing for performance is critical, alternatives such as direct file uploads with appropriate content-type headers might be more suitable.</p>","tags":["react","base64"]},{"location":"blog/2024/06/29/encoding-and-decoding/#types-of-http-post-requests-for-file-uploads","title":"Types of HTTP POST Requests for File Uploads.","text":"<p>In the context of file uploads using HTTP POST requests, there are a few common types:</p> <ul> <li> <p>Multipart Form Data: This is the most common type for file uploads. It allows you to send both text and binary data as a series of parts in a single HTTP request. Each part has its own Content-Type and can contain different types of files (e.g., <code>images</code>, <code>documents</code>).</p> </li> <li> <p>Binary File Upload: This involves sending binary data directly in the body of the POST request. It's suitable for uploading files where the entire content is binary (e.g., images, PDFs).</p> </li> <li> <p>Base64 Encoded File Upload: Files can also be encoded as <code>Base64</code> strings and sent in the body of a POST request. This approach is less efficient than binary uploads but can be useful in certain situations where encoding is required.</p> </li> </ul> <p>These types are often implemented depending on the server-side requirements and the capabilities of the client making the request.</p>","tags":["react","base64"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/","title":"Exploring Object.prototype in JavaScript","text":"","tags":["js"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/#exploring-objectprototype-in-javascript","title":"Exploring <code>Object.prototype</code> in JavaScript","text":"<p>You can inspect the Object.prototype in various ways depending on the environment you are working in. Here are a few methods to do this:</p>","tags":["js"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/#in-a-browser-console","title":"In a Browser Console","text":"<ul> <li>Open Developer Tools: You can usually open this by pressing <code>F12</code>, <code>Ctrl+Shift+I</code>, or <code>Cmd+Option+I</code>.</li> <li>Go to the Console Tab: Here you can execute JavaScript code.</li> <li> <p>Inspect <code>Object.prototype</code>: Type the following code and press Enter:</p> <pre><code>console.dir(Object.prototype);\n</code></pre> </li> </ul>","tags":["js"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/#using-nodejs","title":"Using Node.js","text":"<ul> <li>Open a Terminal: Ensure you have Node.js installed.</li> <li>Run the Node.js REPL: Type node and press Enter.</li> <li> <p>Inspect <code>Object.prototype</code>: Type the following code and press Enter:</p> <pre><code>console.dir(Object.prototype);\n</code></pre> </li> </ul>","tags":["js"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/#example-output","title":"Example Output","text":"<p>When you inspect <code>Object.prototype</code>, you should see an object with various methods and properties like <code>hasOwnProperty</code>, <code>toString</code>, <code>valueOf</code>, etc. Here is a partial example of what you might see:</p> <pre><code>{\n  constructor: \u0192 Object(),\n  hasOwnProperty: \u0192 hasOwnProperty(),\n  isPrototypeOf: \u0192 isPrototypeOf(),\n  propertyIsEnumerable: \u0192 propertyIsEnumerable(),\n  toLocaleString: \u0192 toLocaleString(),\n  toString: \u0192 toString(),\n  valueOf: \u0192 valueOf()\n}\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/03/exploring-objectprototype-in-javascript/#exploring-in-detail","title":"Exploring in Detail","text":"<p>You can also explore the prototype chain by accessing properties and methods directly in the console. For example:</p> <pre><code>console.log(Object.prototype.hasOwnProperty);\nconsole.log(Object.prototype.toString);\n</code></pre> <p>These methods belong to the <code>Object.prototype</code> and are inherited by all objects created in JavaScript unless explicitly overridden.</p>","tags":["js"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/","title":"Handling Circular References in JavaScript: Avoiding 'TypeError: cyclic object value' in JSON.stringify","text":"","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify","title":"Handling Circular References in JavaScript: Avoiding 'TypeError: cyclic object value' in JSON.stringify","text":"<p>The TypeError: cyclic object value error typically occurs when trying to convert a JavaScript object that contains circular references into a JSON string. Circular references happen when an object references itself either directly or indirectly, creating an infinite loop that <code>JSON.stringify</code> cannot handle.</p> <p>Here's an example of a circular reference:</p> <pre><code>let obj = {};\nobj.self = obj;\nJSON.stringify(obj); // TypeError: cyclic object value\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#how-to-solve-it","title":"How to Solve It","text":"<p>To solve this issue, you have a few options:</p> <ol> <li> <p>Remove Circular References:</p> <p>Manually ensure that your object does not have any circular references before calling <code>JSON.stringify</code>.</p> </li> <li> <p>Use a Custom Replacer Function:</p> <p>Use a replacer function with <code>JSON.stringify</code> to filter out circular references.</p> </li> <li> <p>Use a Library:</p> <p>Utilize a library designed to handle circular references, such as <code>circular-json</code>(deprecated) or <code>flatted</code>.</p> <pre><code>function getCircularReplacer() {\n    const seen = new WeakSet();\n    return (key, value) =&gt; {\n        if (typeof value === \"object\" &amp;&amp; value !== null) {\n            if (seen.has(value)) {\n                return;\n            }\n            seen.add(value);\n        }\n        return value;\n    };\n}\n\nJSON.stringify(obj, getCircularReplacer());\n</code></pre> Danger <pre><code>npm install circular-json\n</code></pre> <pre><code>const CircularJSON = require('circular-json');\nconst jsonString = CircularJSON.stringify(obj);\n</code></pre> <p>Or using flatted:</p> Success <pre><code>npm install flatted\n</code></pre> <pre><code>const { stringify, parse } = require('flatted');\nconst jsonString = stringify(obj);\n</code></pre> </li> </ol>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#example-solution","title":"Example Solution","text":"<p>Here is an example of using a custom replacer function to handle circular references:</p> <pre><code>const obj1 = {};\nconst obj2 = { obj1 };\nobj1.obj2 = obj2;\n\nfunction getCircularReplacer() {\n    const seen = new WeakSet();\n    return (key, value) =&gt; {\n        if (typeof value === \"object\" &amp;&amp; value !== null) {\n            if (seen.has(value)) {\n                return;\n            }\n            seen.add(value);\n        }\n        return value;\n    };\n}\n\nconst jsonString = JSON.stringify(obj1, getCircularReplacer());\nconsole.log(jsonString);\n</code></pre> <p>By using these methods, you can avoid the TypeError: cyclic object value error and successfully convert your object to a JSON string.</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#improvement","title":"Improvement","text":"Example1 Bug <pre><code>style={{\n    display: \"flex\",\n    justifyContent:\n    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n        ? \"flex-end\"\n        : \"flex-start\",\n}}\n</code></pre> <p>is this correct way to stringify data</p> <p>Using <code>JSON.stringify</code> in this context is unnecessary and not the correct approach for comparing strings. Instead, you should directly compare the values after ensuring they are strings. Here's the corrected version:</p> Success <pre><code>style={{\n    display: \"flex\",\n    justifyContent: item?.userId?.toString().toUpperCase() === appUserIdUC\n        ? \"flex-end\"\n        : \"flex-start\",\n}}\n</code></pre> <p>Explanation:</p> <ul> <li>item?.userId?.toString().toUpperCase(): This ensures that <code>item?.userId</code> is converted to a string and transformed to uppercase for comparison.</li> <li>appUserIdUC: This is assumed to be already in uppercase format for comparison.</li> </ul> <p>This approach avoids unnecessary stringification and makes the code cleaner and more efficient.</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#when-to-use-jsonstringify","title":"When to use JSON,stringify","text":"<p>In this context, JSON.stringify might be necessary if selectedAttendees is an array or an object that needs to be sent as a string in the bodyPayload. However, if selectedAttendees is already a string or a primitive value, JSON.stringify is not needed.</p> <pre><code> const bodyPayload = {\n            companyId: selectedCompanyId,\n            circularPlanningTemplateId: selectedMenuItem,\n            remarks: values?.remarks,\n            ModeofCommunication: remarksData?.remarks,\n            attentionTo: JSON.stringify(selectedAttendees),\n            isactive: true,\n        }; \n</code></pre> <p>Here\u2019s how you can adjust it based on different scenarios:</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#if-selectedattendees-is-an-array-or-object","title":"If selectedAttendees is an Array or Object:","text":"<p>If <code>selectedAttendees</code> is an array or object and you need to send it as a JSON string, your current approach is correct.</p> <pre><code>const bodyPayload = {\n    companyId: selectedCompanyId,\n    circularPlanningTemplateId: selectedMenuItem,\n    remarks: values?.remarks,\n    ModeofCommunication: remarksData?.remarks,\n    attentionTo: JSON.stringify(selectedAttendees), // Correct if selectedAttendees is an array or object\n    isactive: true,\n};\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#summary","title":"Summary","text":"<ul> <li>Use <code>JSON.stringify</code> if selectedAttendees is an array or object.</li> <li>Do not use <code>JSON.stringify</code> if selectedAttendees is already a string.</li> </ul> <p>This ensures that the bodyPayload is constructed correctly based on the type of selectedAttendees.</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#scenario-circular-references-in-nested-objects","title":"Scenario: Circular References in Nested Objects","text":"<p>Imagine you have a complex data structure representing a company with departments, and each department has a reference to the company, creating a circular reference.</p> <pre><code>// Define a company object\nconst company = {\n    name: \"TechCorp\",\n    departments: []\n};\n\n// Define a department object\nconst department = {\n    name: \"Engineering\",\n    company: company // Circular reference\n};\n\n// Add the department to the company's departments array\ncompany.departments.push(department);\n\n// Attempt to stringify the company object\ntry {\n    const jsonString = JSON.stringify(company);\n    console.log(jsonString);\n} catch (error) {\n    console.error(\"Error stringifying object:\", error);\n}\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#explanation","title":"Explanation:","text":"<ul> <li> <p>Circular Reference: The <code>company</code> object contains a reference to the <code>department</code> object, which in turn has a reference back to the company object. This creates a circular reference.</p> </li> <li> <p>JSON.stringify: When you try to convert the <code>company</code> object to a JSON string using <code>JSON.stringify</code>, the process fails because <code>JSON.stringify</code> cannot handle circular references.</p> </li> </ul>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#handling-the-circular-reference","title":"Handling the Circular Reference","text":"<p>To avoid the TypeError: cyclic object value error, you can use a custom replacer function or a library like <code>circular-json</code> or <code>flatted</code>.</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#avoiding-circular-references","title":"Avoiding Circular References","text":"<p>To avoid circular references, you can use a custom serializer or a library like flatted to handle circular references:</p> <p>First, install <code>flatted</code>:</p> <pre><code>npm install flatted\n</code></pre> <p>Then update the component to use <code>flatted</code>:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { stringify } from 'flatted';\n\nconst ExampleComponent = () =&gt; {\n  const [employee, setEmployee] = useState({\n    name: \"Eve\",\n    position: \"Software Engineer\",\n    department: {}\n  });\n\n  useEffect(() =&gt; {\n    // Creating a circular reference\n    const department = {\n        name: \"Engineering\",\n        employees: [employee]\n    };\n\n    setEmployee(prevEmployee =&gt; {\n        const updatedEmployee = { ...prevEmployee, department };\n        department.manager = updatedEmployee; // Adding circular reference\n        return updatedEmployee;\n    });\n\n    try {\n        // console.log(JSON.stringify(employee));\n        console.log(stringify(employee)); // Using flatted.stringify\n    } catch (error) {\n        console.error(\"Error: \", error.message);\n    }\n  }, [employee]);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Employee Details&lt;/h1&gt;\n      &lt;p&gt;Name: {employee.name}&lt;/p&gt;\n      &lt;p&gt;Position: {employee.position}&lt;/p&gt;\n      &lt;p&gt;Department: {employee.department.name}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ExampleComponent;\n</code></pre> <p>By using the flatted library, you can handle circular references safely and serialize your objects without encountering the <code>TypeError: cyclic object value</code>.</p>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#real-time-office-error","title":"Real-Time Office Error","text":"Danger circularTemplate.js<pre><code>const handleMenuClick = (e) =&gt; {\n    setSelectedMenuItem(e.key);\n    // error on dispatch e.key\n    dispatch(actionForGetCircularPlanningCompanyDtos(e.key))\n    setSelectedMenuItemTitle(e.item.props['value'])\n};\n\n\nconst columns = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            //   try {\n            //     return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n            //       ?.map((x) =&gt; x.AttentionTo)\n            //       ?.join(\", \");\n            //   } catch (error) {\n            //     console.error(\"Error parsing JSON:\", error);\n            //   }\n\n            try {\n                const rawAttentionTo = record?.attentionTo;\n\n                if (typeof rawAttentionTo === 'string' &amp;&amp;\n                    rawAttentionTo.trim().startsWith('[') &amp;&amp;\n                    rawAttentionTo.trim().endsWith(']')) {\n\n                    const attentionToArray = JSON.parse(rawAttentionTo);\n\n                    if (Array.isArray(attentionToArray) &amp;&amp; attentionToArray.length &gt; 0) {\n                        return attentionToArray.map((x) =&gt; x.AttentionTo).join(\", \");\n                    }\n                }\n\n                return \"\";\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n                return \"\";\n            }\n        }\n    }\n]\n\n&lt;Table dataSource={companyDtosData} columns={columns} loading={getCircularPlanningCompanyDtosLoading} /&gt;\n</code></pre> Success <pre><code>// UPDATED\nconst handleMenuClick = (id, title) =&gt; {\n    setSelectedMenuItem(id);\n    setSelectedMenuItemTitle(title)\n    if(!isEmpty(id))\n        dispatch(actionForGetCircularPlanningCompanyDtos(id))\n};\n\n// added\nconst utilFunc = (data) =&gt; {\n    if (!data) return [];\n\n    return data.map((item, index) =&gt; {\n        let parsedAttentionTo = [];\n        try {\n            if (typeof item.attentionTo === 'string') {\n                parsedAttentionTo = JSON.parse(item.attentionTo);\n            }\n        } catch (error) {\n            console.error(`Error parsing attentionTo for item at index ${index}:`, error);\n        }\n\n        return {\n            ...item,\n            attentionTo: parsedAttentionTo // Ensure the key matches your data structure\n        };\n    });\n};\n\n// updated\nuseEffect(() =&gt; {\n    if (getCircularPlanningCompanyDtosResp) {\n        console.log('Original Response: ', getCircularPlanningCompanyDtosResp);\n\n        // Call utilFunc to parse attentionTo and update state\n        const parsedData = utilFunc(getCircularPlanningCompanyDtosResp);\n        console.log('Parsed Data: ', parsedData);\n        setCompanyDtosData(parsedData);\n    }\n}, [getCircularPlanningCompanyDtosResp]);\n\n\n...\n&lt;Menu\n    // REMOVED\n    // onClick={handleMenuClick}\n    style={{ width: 256 }}\n    defaultSelectedKeys={['0']}\n    defaultOpenKeys={['sub1']}\n    mode=\"inline\"\n&gt;\n    {allCircularPlanningTemplateLoading ? &lt;Skeleton active /&gt; : templateData.map((item, index) =&gt; (\n        &lt;Menu.Item\n            key={item?.id}\n            value={item?.title}\n            // className=\"sidebars__menu--item\"\n            // ADDED\n            onClick={() =&gt; handleMenuClick(item?.id, item?.title)}\n            className={`sidebars__menu--item ${index % 2 === 0 ? 'even-row' : 'odd-row'}`}\n        &gt;\n            &lt;span&gt;{index + 1}. {item.title}&lt;/span&gt;\n        &lt;/Menu.Item&gt;\n    ))}\n&lt;/Menu&gt;\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/handling-circular-references-in-javascript-avoiding-typeerror-cyclic-object-value-in-jsonstringify/#reference","title":"Reference","text":"<ul> <li>circular-json: deprecated</li> <li>flatted: sucessor of circular-json</li> </ul>","tags":["js"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/","title":"gThumb lightweight image editor in ubuntu","text":"","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#gthumb-lightweight-image-editor-in-ubuntu","title":"gThumb lightweight image editor in ubuntu","text":"<p>gThumb is a popular image viewer and organizer for the GNOME desktop environment on Linux systems, including Ubuntu. It provides various features for viewing, organizing, and editing images.</p> <p></p> <p>To install gThumb on Ubuntu, you can use the following steps:</p>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#1-using-ubuntu-software-center","title":"1. Using Ubuntu Software Center:","text":"<ul> <li>Open Ubuntu Software Center from the Applications menu.</li> <li>Use the search bar to search for \"gThumb\".</li> <li>Click on the gThumb icon in the search results.</li> <li>Click the \"Install\" button to install it.</li> </ul>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#2-using-terminal","title":"2. Using Terminal:","text":"<ul> <li>Open a terminal window by pressing Ctrl + Alt + T.</li> <li> <p>Type the following command:</p> bash<pre><code>sudo apt update\nsudo apt install gthumb\n</code></pre> </li> <li> <p>Enter your password when prompted, and gThumb will be installed.</p> </li> </ul> <p>Once installed, you can launch gThumb from the Applications menu or by searching for it in the Activities Overview (press the Windows key and type \"gThumb\").</p> <p>With gThumb, you can browse through your image collection, organize them into albums, perform basic editing tasks like cropping and resizing, and even share images directly from the application. It's a versatile tool for managing your image library on Ubuntu.</p>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#reference","title":"Reference","text":"<ul> <li>Is there a lightweight tool to crop images quickly?</li> </ul>","tags":["Linux"]},{"location":"blog/2024/07/02/js-objects/","title":"JS objects","text":"","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#js-objects","title":"JS objects","text":"<p>In JavaScript, every object inherits properties and methods from its prototype. The base object from which all other objects derive, Object.prototype, includes several built-in methods and properties that are fundamental to working with objects. Here are some of the most commonly used ones:</p> Built-ins PropertiesMethodsPrototypal Methods <ul> <li> <p>constructor</p> <ul> <li>Refers to the function that created the instance's prototype.</li> <li>Example: <code>obj.constructor</code></li> </ul> </li> <li> <p>proto</p> <ul> <li>Refers to the prototype of the object.</li> <li>Example: <code>obj.__proto__</code></li> </ul> </li> </ul> <ol> <li> <p>hasOwnProperty()</p> <ul> <li>Determines if an object has a property as its own (not inherited).</li> <li>Example: <code>obj.hasOwnProperty('propertyName')</code></li> </ul> </li> <li> <p>isPrototypeOf()</p> <ul> <li>Checks if an object exists in another object's prototype chain.</li> <li>Example: <code>prototypeObject.isPrototypeOf(obj)</code></li> </ul> </li> <li> <p>propertyIsEnumerable()</p> <ul> <li>Checks if a property is enumerable.</li> <li>Example: <code>obj.propertyIsEnumerable('propertyName')</code></li> </ul> </li> <li> <p>toString()</p> <ul> <li>Returns a string representation of the object.</li> <li>Example: <code>obj.toString()</code></li> </ul> </li> <li> <p>valueOf()</p> <ul> <li>Returns the primitive value of the specified object.</li> <li>Example: <code>obj.valueOf()</code></li> </ul> </li> <li> <p>toLocaleString()</p> <ul> <li>Returns a string representation of the object, localized according to the locale settings.</li> <li>Example: <code>obj.toLocaleString()</code></li> </ul> </li> </ol> <p>Static Methods</p> <ol> <li> <p>defineProperty() (added in ES5)</p> <ul> <li>Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</li> <li>Example: <code>Object.defineProperty(obj, 'newProp', { value: 42 })</code></li> </ul> </li> <li> <p>defineProperties() (added in ES5)</p> <ul> <li>Defines new or modifies existing properties directly on an object, returning the object.</li> <li>Example: <code>Object.defineProperties(obj, { 'prop1': { value: 42 }, 'prop2': { value: 43 } })</code></li> </ul> </li> <li> <p>getOwnPropertyDescriptor() (added in ES5)</p> <ul> <li>Returns a property descriptor for a named property on an object.</li> <li>Example: <code>Object.getOwnPropertyDescriptor(obj, 'propertyName')</code></li> </ul> </li> <li> <p>getOwnPropertyNames() (added in ES5)</p> <ul> <li>Returns an array of all properties (enumerable or not) found directly upon a given object.</li> <li>Example: <code>Object.getOwnPropertyNames(obj)</code></li> </ul> </li> <li> <p>keys() (added in ES5)</p> <ul> <li>Returns an array of a given object's own enumerable property names.</li> <li>Example: <code>Object.keys(obj)</code></li> </ul> </li> <li> <p>entries() (added in ES8)</p> <ul> <li>Returns an array of a given object's own enumerable string-keyed property [key, value] pairs.</li> <li>Example: <code>Object.entries(obj)</code></li> </ul> </li> <li> <p>values() (added in ES8)</p> <ul> <li>Returns an array of a given object's own enumerable property values.</li> <li>Example: <code>Object.values(obj)</code></li> </ul> </li> <li> <p>fromEntries() (added in ES10)</p> <ul> <li>Transforms a list of key-value pairs into an object.</li> <li>Example: <code>Object.fromEntries([['key1', 'value1'], ['key2', 'value2']])</code></li> </ul> </li> </ol> <p>JavaScript objects can also inherit methods from their prototypes. For example, arrays inherit methods from Array.prototype, strings from String.prototype, etc.</p> <p>Here's an example with arrays:</p> <ol> <li> <p>push()</p> <ul> <li>Adds one or more elements to the end of an array and returns the new length of the array.</li> <li>Example: <code>arr.push(element)</code></li> </ul> </li> <li> <p>pop()</p> <ul> <li>Removes the last element from an array and returns that element.</li> <li>Example: <code>arr.pop()</code></li> </ul> </li> <li> <p>map()</p> <ul> <li>Creates a new array populated with the results of calling a provided function on every element in the calling array.</li> <li>Example: <code>arr.map(function(element) { return element * 2; })</code></li> </ul> </li> </ol> <p>These are some of the core <code>methods</code> and <code>properties</code> that are built into JavaScript objects. The language also provides a robust set of methods and properties for specialized objects like <code>arrays</code>, <code>strings</code>, and <code>functions</code>.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#prototype-constructor-methods","title":"Prototype &amp; Constructor Methods","text":"","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#prototype-methods","title":"Prototype Methods","text":"<p>Prototype methods are defined on the constructor's prototype. All instances of the object share the same method.</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\n// Shared method (prototype method)\nPerson.prototype.sayHello = function() {\n  console.log('Hello, my name is ' + this.name);\n};\n\nlet person1 = new Person('Alice', 25);\nlet person2 = new Person('Bob', 30);\n\nperson1.sayHello(); // \"Hello, my name is Alice\"\nperson2.sayHello(); // \"Hello, my name is Bob\"\n\n// Both instances share the same sayHello method\nconsole.log(person1.sayHello === person2.sayHello); // true\n</code></pre> <p>In this example, <code>sayHello</code> is a prototype method, meaning <code>person1</code> and <code>person2</code> share the same <code>sayHello</code> method.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#instance-specific-constructor-methods","title":"Instance-Specific (Constructor) Methods","text":"<p>Instance-specific methods are defined inside the constructor function. Each instance of the object will have its own copy of these methods.</p> <pre><code>function Person(name, age) {\n  this.name = name;\n  this.age = age;\n\n  // Instance-specific method (constructor method)\n  this.describe = function() {\n    console.log(this.name + ' is ' + this.age + ' years old.');\n  };\n}\n\nlet person1 = new Person('Alice', 25);\nlet person2 = new Person('Bob', 30);\n\nperson1.describe(); // \"Alice is 25 years old.\"\nperson2.describe(); // \"Bob is 30 years old.\"\n\n// Each instance has its own copy of describe\nconsole.log(person1.describe === person2.describe); // false\n</code></pre> <p>In this example, <code>describe</code> is a constructor method, meaning <code>person1</code> and <code>person2</code> each have their own copy of the describe method.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#key-differences","title":"Key Differences","text":"<ul> <li> <p>Memory Efficiency:</p> <ul> <li>Constructor Methods: Each instance gets its own copy of the method, which can consume more memory.</li> <li>Prototype Methods: All instances share the same method, which is more memory-efficient.</li> </ul> </li> <li> <p>Usage:</p> <ul> <li>Constructor Methods: Use when each instance needs its own unique version of the method, often because the method relies on instance-specific data or state.</li> <li>Prototype Methods: Use when the method's behavior should be the same across all instances, to save memory and maintain consistency.</li> </ul> </li> </ul> Example <pre><code>function Person(name, age) {\n    this.name = name;\n    this.age = age;\n\n    // Instance-specific method (constructor method)\n    this.describe = function() {\n        console.log(this.name + ' is ' + this.age + ' years old.');\n    };\n}\n\n// Shared method (prototype method)\nPerson.prototype.sayHello = function() {\n    console.log('Hello, my name is ' + this.name);\n};\n\nlet person1 = new Person('Alice', 25);\nlet person2 = new Person('Bob', 30);\n\nperson1.describe(); // \"Alice is 25 years old.\"\nperson2.describe(); // \"Bob is 30 years old.\"\n\nperson1.sayHello(); // \"Hello, my name is Alice\"\nperson2.sayHello(); // \"Hello, my name is Bob\"\n\n// Each instance has its own copy of describe\nconsole.log(person1.describe === person2.describe); // false\n\n// Both instances share the same sayHello method\nconsole.log(person1.sayHello === person2.sayHello); // true\n</code></pre> <p>In this example:</p> <ul> <li><code>describe</code> is a constructor method, so each instance (<code>person1</code> and <code>person2</code>) has its own copy.</li> <li><code>sayHello</code> is a prototype method, so <code>person1</code> and <code>person2</code> share the same method.</li> </ul>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#terminology","title":"Terminology","text":"<p>Static methods and constructor methods are not the same in JavaScript. Let's delve into their differences with clear examples.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#static-methods","title":"Static Methods","text":"<p>Static methods are methods defined on the constructor function itself. They are not available on instances of the constructor. Static methods are called directly on the constructor.</p> <pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  // Static method\n  static compareAge(person1, person2) {\n    return person1.age - person2.age;\n  }\n}\n\nconst alice = new Person('Alice', 25);\nconst bob = new Person('Bob', 30);\n\n// Calling the static method on the constructor\nconsole.log(Person.compareAge(alice, bob)); // -5\n\n// Static method is not available on instances\nconsole.log(alice.compareAge); // undefined\n</code></pre> <p>In this example, <code>compareAge</code> is a static method defined on the <code>Person</code> constructor. It is called directly on <code>Person</code> and not on the instances (<code>alice</code> and <code>bob</code>).</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#constructor-methods-instance-methods","title":"Constructor Methods (Instance Methods)","text":"<p>Constructor methods are methods defined inside the constructor function. Each instance of the object will have its own copy of these methods.</p> <p>Constructor methods are defined inside the constructor function using this. They are specific to each instance of the object and are accessed through instances of the constructor.</p> <pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n\n    // Constructor method (instance method)\n    this.describe = function() {\n      console.log(`${this.name} is ${this.age} years old.`);\n    };\n  }\n}\n\nconst alice = new Person('Alice', 25);\nconst bob = new Person('Bob', 30);\n\n// Calling the constructor method on instances\nalice.describe(); // \"Alice is 25 years old.\"\nbob.describe(); // \"Bob is 30 years old.\"\n\n// Each instance has its own copy of describe\nconsole.log(alice.describe === bob.describe); // false\n</code></pre> <p>In this example, <code>describe</code> is a constructor method. Each instance (<code>alice</code> and <code>bob</code>) has its own copy of the <code>describe</code> method.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#summary-of-differences","title":"Summary of Differences","text":"<ol> <li> <p>Definition and Availability:</p> <ul> <li>Static Methods: Defined on the constructor function itself. Available on the constructor, not on instances.</li> <li>Constructor Methods: Defined inside the constructor function. Each instance gets its own copy of the method.</li> </ul> </li> <li> <p>Calling:</p> <ul> <li>Static Methods: Called on the constructor itself.</li> <li>Constructor Methods: Called on instances of the constructor.</li> </ul> </li> </ol> Example Combining Both <pre><code>class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n\n        // Constructor method\n        this.describe = function() {\n        console.log(`${this.name} is ${this.age} years old.`);\n        };\n    }\n\n    // Static method\n    static compareAge(person1, person2) {\n        return person1.age - person2.age;\n    }\n}\n\nconst alice = new Person('Alice', 25);\nconst bob = new Person('Bob', 30);\n\n// Calling the constructor method on instances\nalice.describe(); // \"Alice is 25 years old.\"\nbob.describe(); // \"Bob is 30 years old.\"\n\n// Calling the static method on the constructor\nconsole.log(Person.compareAge(alice, bob)); // -5\n\n// Static method is not available on instances\nconsole.log(alice.compareAge); // undefined\n\n// Each instance has its own copy of describe\nconsole.log(alice.describe === bob.describe); // false\n</code></pre> <p>In this example:</p> <ul> <li><code>compareAge</code> is a static method and is called on the Person constructor.</li> <li><code>describe</code> is a constructor method and is called on instances of Person.</li> </ul> how to know or check if it is contructor methods or static methods in javascript? <p>In JavaScript, whether a method is a constructor method (instance method) or a static method depends on where it is defined and how it is accessed. Here\u2019s how you can identify and distinguish between them:</p> Constructor Methods (Instance Methods)Static Methods <p>Constructor methods are defined inside the constructor function using this. They are specific to each instance of the object and are accessed through instances of the constructor.</p> <pre><code>class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n\n        // Constructor method (instance method)\n        this.describe = function() {\n        console.log(`${this.name} is ${this.age} years old.`);\n        };\n    }\n}\n\nconst alice = new Person('Alice', 25);\n\n// Check if describe is a constructor method\nconsole.log(alice.describe); // function\n\n// Verify it's not available on the constructor itself\nconsole.log(Person.describe); // undefined\n</code></pre> <p>Static methods are defined on the constructor function directly using the static keyword. They are called on the constructor function itself, not on instances of the constructor.</p> <pre><code>class Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Static method\n    static compareAge(person1, person2) {\n        return person1.age - person2.age;\n    }\n}\n\nconst alice = new Person('Alice', 25);\n\n// Check if compareAge is a static method\nconsole.log(Person.compareAge); // function\n\n// Verify it's not available on instances of the constructor\nconsole.log(alice.compareAge); // undefined\n</code></pre> How to Identify Them <ul> <li> <p>Location of Definition:</p> <ul> <li>Constructor Methods: Defined inside the constructor function using this.</li> <li>Static Methods: Defined outside the constructor, prefixed with the static keyword within the class.</li> </ul> </li> <li> <p>Access Method:</p> <ul> <li>Constructor Methods: Accessed through instances of the constructor (<code>instance.method()</code>).</li> <li>Static Methods: Accessed directly on the constructor function itself (<code>Constructor.method()</code>).</li> </ul> </li> <li> <p>Usage:</p> <ul> <li>Constructor Methods: Typically used when each instance needs its own copy of the method, often to operate on instance-specific data.</li> <li>Static Methods: Used when the method does not depend on instance-specific data and is more utility-like, applying broadly to the constructor itself or its class.</li> </ul> </li> </ul> Checking in Practice <p>To check if a method is a constructor method or a static method in JavaScript:</p> <ol> <li> <p>Look at where the method is defined:</p> <ul> <li>Inside the constructor function (<code>this.method = function() {...}</code>): It\u2019s a constructor method.</li> <li>Using static keyword (<code>static methodName() {...}</code>): It\u2019s a static method.</li> </ul> </li> <li> <p>Verify how the method is accessed:</p> <ul> <li>Through instances (<code>instance.method()</code>): It\u2019s likely a constructor method.</li> <li>On the constructor itself (<code>Constructor.method()</code>): It\u2019s likely a static method.</li> </ul> </li> </ol> <p>By understanding these distinctions, you can effectively identify and differentiate between constructor methods and static methods in JavaScript classes.</p>","tags":["js"]},{"location":"blog/2024/07/02/js-objects/#reference","title":"Reference","text":"<ul> <li>multipart requests</li> <li>What does enctype='multipart/form-data' mean?</li> <li></li> </ul>","tags":["js"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/07/01/postmen-advanced-topics/","title":"Postmen Advanced Topics","text":"","tags":["postment","api"]},{"location":"blog/2024/07/01/postmen-advanced-topics/#postmen-advanced-topics","title":"Postmen Advanced Topics","text":"<p>In Postman, <code>pm</code> is a global object that provides various functions and methods to interact with the Postman sandbox environment. This object allows you to write scripts to manipulate the request and response, set and get variables, and perform assertions. The pm object is available in both Pre-request Scripts and Test Scripts.</p> <p>Here are some advanced topics in Postman to help you level up your API testing and automation:</p> <ol> <li> <p>Advanced Scripting</p> <ul> <li>Pre-request Scripts: Write JavaScript code to execute before making a request. Useful for setting <code>dynamic parameters</code>, <code>generating tokens</code>, etc.</li> <li>Tests Scripts: Write JavaScript code to validate the response. You can perform assertions, set variables, and chain requests.</li> </ul> </li> <li> <p>Environment and Global Variables</p> <ul> <li>Environment Variables: Define variables specific to an environment (e.g., <code>development</code>, <code>staging</code>, <code>production</code>) to easily switch contexts.</li> <li>Global Variables: Variables accessible in all environments and collections. Useful for storing data that is constant across environments.</li> </ul> </li> <li> <p>Collection Runner and Automation</p> <ul> <li>Collection Runner: Run a collection of requests in a specific order. Useful for running test suites and workflows.</li> <li>Newman: A command-line tool to run Postman collections. It integrates with CI/CD pipelines, allowing automated testing.</li> </ul> </li> <li> <p>Data-Driven Testing</p> <ul> <li>Using CSV/JSON Files: Import CSV or JSON files in the Collection Runner to execute the same requests with different sets of data.</li> <li>Dynamic Variables: Use dynamic variables (like <code>{{$randomInt}}</code>, <code>{{$randomUUID}}</code>) to generate random data for tests.</li> </ul> </li> <li> <p>Chaining Requests</p> <ul> <li>Setting Variables: Capture data from one request and use it in subsequent requests by setting and using variables.</li> <li>Post-Request Scripts: Use test scripts to parse response data and set it as variables for the next request.</li> </ul> </li> <li> <p>Mock Servers</p> <ul> <li>Creating Mocks: Simulate endpoints to test your application without hitting the actual API. Useful for frontend-backend decoupled development.</li> <li>Custom Responses: Define custom responses for different scenarios (e.g., success, error, timeout).</li> </ul> </li> <li> <p>API Documentation</p> <ul> <li>Generating Documentation: Automatically generate and publish documentation for your APIs. Postman can generate markdown or HTML documentation based on your collections.</li> <li>API Versioning: Manage different versions of your API documentation.</li> </ul> </li> <li> <p>Integration with Version Control Systems</p> <ul> <li>Version Control: Use Postman\u2019s integration with Git to version control your collections. Helps maintain history and collaboration on API definitions.</li> </ul> </li> <li> <p>Security Testing</p> <ul> <li>OWASP Testing: Implement tests to check for common vulnerabilities like SQL Injection, XSS, etc.</li> <li>Authorization Testing: Test different authorization mechanisms like <code>OAuth</code>, <code>JWT</code>, <code>API Keys</code>.</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>Uptime Monitoring: Schedule and run collections periodically to ensure your APIs are up and running.</li> <li>Performance Monitoring: Measure response times and other performance metrics over time.</li> </ul> </li> <li> <p>Advanced Assertions</p> <ul> <li>Chai Assertions: Use the Chai assertion library (integrated with Postman) for more complex assertions.</li> <li>Custom Functions: Write custom JavaScript functions for reusable validation logic.</li> </ul> </li> <li> <p>Visualizing Response Data</p> <ul> <li>Postman Visualizer: Create custom visualizations of response data using HTML and JavaScript. Useful for interpreting and presenting data.</li> </ul> </li> <li> <p>GraphQL Support</p> <ul> <li>Query Execution: Support for making GraphQL queries and mutations.</li> <li>GraphQL Variables: Use variables in GraphQL queries for dynamic data.</li> </ul> </li> <li> <p>Postman Flows</p> <ul> <li>Building Workflows: Use the Postman Flows feature to create and automate workflows visually, connecting requests and logic blocks.</li> </ul> </li> <li> <p>Integrations</p> <ul> <li>Third-party Integrations: Integrate Postman with tools like <code>Jenkins</code>, <code>Slack</code>, <code>Datadog</code>, and more for enhanced functionality.</li> </ul> </li> </ol> <p>These advanced features of Postman help you perform more thorough and efficient API testing and automation, improving your overall development and testing workflows.</p> pm Methods and Attributes <p>The pm object in Postman provides a comprehensive set of methods and attributes to interact with the Postman runtime environment. Here is a detailed list of the main methods and attributes available within the pm object:</p> VariablesEnvironmentRequest and ResponseAssertions and TestsSending Requests <p>pm.variables: Methods to interact with the variable scope (local, environment, global, data).</p> <ul> <li><code>pm.variables.get(variableName)</code>: Get the value of a variable from the current scope.</li> <li><code>pm.variables.set(variableName, variableValue)</code>: Set the value of a variable in the current scope.</li> </ul> <p>pm.environment: Methods to interact with environment variables.</p> <ul> <li><code>pm.environment.get(variableName)</code>: Get the value of an environment variable.</li> <li><code>pm.environment.set(variableName, variableValue)</code>: Set the value of an environment variable.</li> <li><code>pm.environment.unset(variableName)</code>: Remove an environment variable.</li> <li><code>pm.environment.clear()</code>: Clear all environment variables.</li> </ul> <p>Methods to manage environment variables.</p> <ul> <li><code>pm.environment.set(variableName, variableValue)</code>: Set an environment variable.</li> <li><code>pm.environment.get(variableName)</code>: Get an environment variable.</li> <li><code>pm.environment.unset(variableName)</code>: Unset an environment variable.</li> </ul> <p>pm.request: Methods to interact with the request object.</p> <ul> <li><code>pm.request.url</code>: Get or set the request URL.</li> <li> <p><code>pm.request.headers</code>: Access the request headers.</p> <ul> <li><code>pm.request.headers.add(headerObject)</code>: Add a header to the request.</li> <li><code>pm.request.headers.remove(headerName)</code>: Remove a header from the request.</li> </ul> </li> </ul> <p>pm.response: Methods to interact with the response object.</p> <ul> <li><code>pm.response.json()</code>: Parse the response as JSON.</li> <li><code>pm.response.text()</code>: Get the response body as plain text.</li> <li><code>pm.response.code</code>: Get the response status code.</li> <li><code>pm.response.headers</code>: Access the response headers.</li> <li><code>pm.response.time()</code>: Get the response time.</li> </ul>","tags":["postment","api"]},{"location":"blog/2024/07/01/postmen-advanced-topics/#reference","title":"Reference","text":"<ul> <li>postman docs</li> <li>postman tutorial: javatpoint</li> <li>post mock server: geeksforgeeks</li> <li>postman :tutorialspoint</li> </ul>","tags":["postment","api"]},{"location":"blog/2024/06/20/removing-tracked-files-and-directories-in-git/","title":"Removing Tracked Files and Directories in Git","text":"","tags":["git","tracking"]},{"location":"blog/2024/06/20/removing-tracked-files-and-directories-in-git/#removing-tracked-files-and-directories-in-git","title":"Removing Tracked Files and Directories in Git","text":"<p>In the world of software development, effective use of version control is crucial. Git, with its powerful features, helps teams manage code changes seamlessly. However, scenarios arise where files or directories mistakenly added to Git need to be removed from tracking without deleting them locally. Let's delve into how to manage this situation effectively.</p>","tags":["git","tracking"]},{"location":"blog/2024/06/20/removing-tracked-files-and-directories-in-git/#understanding-git-tracking","title":"Understanding Git Tracking","text":"<p>Git tracks changes to files and directories once they are committed. Sometimes, sensitive files like configuration files or temporary directories (e.g., venv for Python virtual environments) are inadvertently added. To prevent these from being tracked further while keeping them in your local environment, specific steps are required.</p>","tags":["git","tracking"]},{"location":"blog/2024/06/20/removing-tracked-files-and-directories-in-git/#steps-to-remove-tracked-files-or-directories","title":"Steps to Remove Tracked Files or Directories","text":"<ol> <li> <p>Update <code>.gitignore</code>:</p> <p>Start by updating the .gitignore file to prevent the file or directory from being tracked in future commits. This step ensures that Git ignores any changes made to these entries.</p> <p>Tip</p> <pre><code># Add entry to .gitignore\nvenv/\n</code></pre> </li> <li> <p>Remove from Git Cache:</p> <p>Use the <code>git rm command</code> with the <code>--cached</code> option to remove the file or directory from Git's index without deleting it from your local system. If removing a directory and its contents, ensure to use the <code>-r</code> (recursive) flag.</p> <p>Tip</p> <pre><code>git rm --cached venv              # For a file\ngit rm -r --cached venv/          # For a directory and its contents\n</code></pre> </li> <li> <p>Commit the Changes:</p> <p>Once removed from the index, commit the changes to your repository. This step records the removal of the file or directory from Git tracking.</p> <p>Tip</p> <pre><code>git commit -m \"Removed venv directory from tracking\"\n</code></pre> </li> <li> <p>Push to Remote Repository (if applicable):</p> <p>If your repository is remote (e.g., GitHub), push the committed changes to update the remote repository.</p> <p>Tip</p> <pre><code>git push origin main             # Replace 'main' with your branch name\n</code></pre> </li> </ol>","tags":["git","tracking"]},{"location":"blog/2024/06/20/removing-tracked-files-and-directories-in-git/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively manage and remove files or directories from Git tracking while preserving them in your local environment. This approach ensures a clean and organized version control system, improving collaboration and maintaining code integrity across projects. Remember, Git's flexibility empowers developers to maintain control over their codebase efficiently.</p>","tags":["git","tracking"]},{"location":"blog/2024/06/28/saving-base64-data-into-an-excel-file-in-a-react-application/","title":"Saving base64 data into an Excel file in a React application","text":"","tags":["react","base64"]},{"location":"blog/2024/06/28/saving-base64-data-into-an-excel-file-in-a-react-application/#saving-base64-data-into-an-excel-file-in-a-react-application","title":"Saving base64 data into an Excel file in a React application","text":"<p>To save base64 data into an Excel file in a React application, you can use the FileSaver library to handle the file download and the xlsx library to convert the base64 data into a format that can be saved as an Excel file.</p> <p>Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Install the necessary libraries:</p> <pre><code>npm install file-saver xlsx\n</code></pre> </li> <li> <p>Create a function to handle the download:</p> <pre><code>import { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nconst saveBase64AsExcel = (base64Data, fileName) =&gt; {\n    // Convert base64 string to ArrayBuffer\n    const binaryString = window.atob(base64Data);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i &lt; len; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n    }\n    const blob = new Blob([bytes], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n    // Use FileSaver to save the file\n    saveAs(blob, fileName);\n    };\n\n    // Example usage\n    const handleDownload = () =&gt; {\n    if (isDownloadStatus) {\n        let data = 'your_base64_data_here'; // Replace with your actual base64 data\n        saveBase64AsExcel(data, 'example.xlsx');\n    }\n};\n</code></pre> </li> <li> <p>Call the <code>handleDownload</code> function when you need to trigger the download:</p> <pre><code>import React from 'react';\n\nconst YourComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n        &lt;button onClick={handleDownload}&gt;Download Excel&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default YourComponent;\n</code></pre> <p>This code snippet shows how to convert base64-encoded data into an <code>ArrayBuffer</code>, create a Blob from it, and use the <code>FileSaver</code> library to download it as an Excel file. You can replace 'your_base64_data_here' with your actual base64 data variable.</p> <p>Remember to import and use handleDownload in your component as shown in the example. This should allow you to download the base64 data as an Excel file when <code>isDownloadStatus</code> is true.</p> </li> </ol>","tags":["react","base64"]},{"location":"blog/2024/07/05/how-to-send-multipartform-data-request-file-in-postman/","title":"How to send multipart/form-data request file in postman","text":"","tags":["js"]},{"location":"blog/2024/07/05/how-to-send-multipartform-data-request-file-in-postman/#how-to-send-multipartform-data-request-file-in-postman","title":"How to send multipart/form-data request file in postman","text":"","tags":["js"]},{"location":"blog/2024/07/05/how-to-send-multipartform-data-request-file-in-postman/#reference","title":"Reference","text":"<ul> <li>Video: How to send multipart/form-data request file</li> <li>How to send multipart/form-data request using Postman :closed</li> </ul>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/","title":"Unveiling Static and Prototype Methods in JavaScript Built-in Objects","text":"","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#unveiling-static-and-prototype-methods-in-javascript-built-in-objects","title":"Unveiling Static and Prototype Methods in JavaScript Built-in Objects","text":"<p>To thoroughly understand and see the static methods and constructor methods in JavaScript built-in objects, you can use a combination of developer tools, documentation, and JavaScript code. Here\u2019s a detailed guide:</p>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#1-using-developer-tools","title":"1. Using Developer Tools","text":"<p>In a Browser Console</p> <ol> <li>Open Developer Tools: You can usually open this by pressing <code>F12</code>, <code>Ctrl+Shift+I</code>, or <code>Cmd+Option+I</code>.</li> <li>Go to the Console Tab: Here you can execute JavaScript code.</li> </ol>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#viewing-static-methods","title":"Viewing Static Methods","text":"<p>Static methods are functions that are called on the class itself, not on instances of the class. For example, <code>Array.from()</code> is a static method on the <code>Array</code> constructor.</p> <pre><code>console.dir(Array);\nconsole.dir(Object);\nconsole.dir(Math);\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#viewing-constructor-methods","title":"Viewing Constructor Methods","text":"<p>Constructor methods (or prototype methods) are functions that are available on the instances of the objects. For example, <code>Array.prototype.push()</code> is a constructor method.</p> <pre><code>console.dir(Array.prototype);\nconsole.dir(Object.prototype);\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#2-using-javascript-code","title":"2. Using JavaScript Code","text":"","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#list-all-static-methods-and-properties","title":"List All Static Methods and Properties","text":"<p>To list all static methods and properties of a built-in object, you can use the following code snippet:</p> <pre><code>function listStaticMethods(obj) {\n  return Object.getOwnPropertyNames(obj).filter(prop =&gt; typeof obj[prop] === 'function');\n}\n\nconsole.log(listStaticMethods(Array)); // List static methods of Array\nconsole.log(listStaticMethods(Object)); // List static methods of Object\nconsole.log(listStaticMethods(Math));   // List static methods of Math\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#list-all-prototype-methods","title":"List All Prototype Methods","text":"<p>To list all prototype methods of a built-in object, you can use the following code snippet:</p> <pre><code>function listPrototypeMethods(obj) {\n  return Object.getOwnPropertyNames(obj.prototype).filter(prop =&gt; typeof obj.prototype[prop] === 'function');\n}\n\nconsole.log(listPrototypeMethods(Array)); // List prototype methods of Array\nconsole.log(listPrototypeMethods(Object)); // List prototype methods of Object\n</code></pre>","tags":["js"]},{"location":"blog/2024/07/04/unveiling-static-and-prototype-methods-in-javascript-built-in-objects/#3-consulting-documentation","title":"3. Consulting Documentation","text":"<p>Refer to the official JavaScript documentation for comprehensive details on built-in objects, their static methods, and prototype methods:</p> <ul> <li> <p>MDN Web Docs: This is a highly recommended resource for in-depth information on JavaScript built-in objects. For example:</p> </li> <li> <p>Array</p> </li> <li>Object</li> <li>Math</li> </ul> Example Output <p>When you run the provided code snippets, you will get lists of methods:</p> <p>Static Methods of Array:</p> <pre><code>[\"from\", \"isArray\", \"of\"]\n</code></pre> <p>Prototype Methods of Array:</p> <pre><code>[\"constructor\", \"copyWithin\", \"fill\", \"find\", \"findIndex\", \"keys\", \"entries\", \"values\", \"pop\", \"push\", \"concat\", \"join\", \"reverse\", \"shift\", \"unshift\", \"slice\", \"splice\", \"sort\", \"indexOf\", \"lastIndexOf\", \"every\", \"some\", \"forEach\", \"map\", \"filter\", \"reduce\", \"reduceRight\", \"includes\", \"flat\", \"flatMap\", \"at\", \"toLocaleString\", \"toString\", \"length\"]\n</code></pre> <p>By using these methods, you can thoroughly explore and understand the static and prototype methods available in JavaScript <code>built-in</code> objects.</p>","tags":["js"]},{"location":"blog/2024/07/07/useful-react-libraries-for-projects/","title":"Useful React Libraries for Projects","text":"","tags":["postman","http"]},{"location":"blog/2024/07/07/useful-react-libraries-for-projects/#useful-react-libraries-for-projects","title":"Useful React Libraries for Projects","text":"<p>Pdf</p> <ul> <li>pip install mkdocs-pdf</li> <li>mkdocs-pdf: pypi</li> <li>How to link a pdf</li> <li></li> <li>How to Import SVGs in a React and Vite app</li> <li>How to display svg icons(.svg files) in UI using React Component?: slackoverflow</li> <li>How to use SVGs in React</li> </ul>","tags":["postman","http"]},{"location":"office/draft/","title":"Draft","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul> <p>Embedded Device</p> working with .py fileDjango <p>To connect to an embedded device using Python, you typically use networking libraries such as socket or higher-level libraries built on top of it, like paramiko for SSH connections or pyserial for serial communication.</p> <p>Here's a basic example of how you can use the socket library to connect to a device using its IP address and a specific port:</p> <pre><code>import socket\n\n# IP address and port of the embedded device\ndevice_ip = '192.168.1.100'\ndevice_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the device\ntry:\n    client_socket.connect((device_ip, device_port))\n    print(\"Connected to the embedded device\")\n\n    # Here you can send and receive data to/from the device\n\n    # Example: Sending data\n    message = \"Hello, device!\"\n    client_socket.sendall(message.encode())\n\n    # Example: Receiving data\n    received_data = client_socket.recv(1024)\n    print(\"Received:\", received_data.decode())\n\nexcept ConnectionRefusedError:\n    print(\"Connection to the embedded device refused\")\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre> <p>Replace <code>192.168.1.100</code> with the actual IP address of your embedded device, and <code>12345</code> with the actual port number it's listening on.</p> <p>Once connected, you can send and receive data to/from the device as needed. Make sure to handle exceptions appropriately, such as <code>ConnectionRefusedError</code> if the connection is refused.</p> <p>Depending on your specific requirements and the capabilities of your embedded device, you might need to use different libraries or protocols. For example, if your device supports SSH, you might use <code>paramiko</code> for SSH connections. If your device communicates over serial ports, you might use <code>pyserial</code>.</p> <p>To convert the provided Python code into a Django application, you can create a Django view that handles the connection to the embedded device when a certain URL is accessed. Below is an example of how you can do this:</p> viewsurl <p>First, make sure you have Django installed. If not, you can install it using pip:</p> <pre><code>#1. \npip install django\n#2. \ndjango-admin startproject embedded_device_project\n#3.\ncd embedded_device_project\npython manage.py startapp embedded_device_app\n</code></pre> embedded_device_app/views.py<pre><code># 4. \n# embedded_device_app/views.py\n\nfrom django.http import HttpResponse\nimport socket\n\ndef connect_to_device(request):\n    # IP address and port of the embedded device\n    device_ip = '192.168.1.100'\n    device_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n    # Create a socket object\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        # Connect to the device\n        client_socket.connect((device_ip, device_port))\n        message = \"Hello, device!\"\n        client_socket.sendall(message.encode())\n        received_data = client_socket.recv(1024).decode()\n        response_message = f\"Received from device: {received_data}\"\n    except ConnectionRefusedError:\n        response_message = \"Connection to the embedded device refused\"\n    finally:\n        # Close the socket\n        client_socket.close()\n\n    return HttpResponse(response_message)\n</code></pre> urls.py<pre><code># embedded_device_project/urls.py\n\nfrom django.urls import path\nfrom embedded_device_app import views\n\nurlpatterns = [\n    path('connect-to-device/', views.connect_to_device, name='connect_to_device'),\n]\n</code></pre> <p>Now, when you access the URL <code>http://127.0.0.1:8000/connect-to-device/</code> in your browser, Django will attempt to connect to the embedded device and send a message. The response from the device (if any) will be displayed in the browser. Ensure to replace the IP address and port with the appropriate values for your embedded device.</p>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Introduction","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<p>Tip</p> <ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - <code>development domain</code></li> <li>cqweb.ictc.com.np - <code>production domain</code></li> </ul> <p><code>application</code></p> <ul> <li>cqnoval.info.com.np - <code>swagger</code></li> <li>cqnovalid.info.com.np - <code>login endpoint</code></li> </ul> <p><code>tools</code></p> <ul> <li>Jenkins - <code>on port 8080</code></li> <li>portainer - <code>on port 9000</code></li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p>Note</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 svgs\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 useRoles\n\u251c\u2500\u2500 json\n\u251c\u2500\u2500 layouts\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 redux\n\u2502   \u2514\u2500\u2500 store\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 styles\n\u2514\u2500\u2500 utils\n</code></pre> <p>Description</p> <ul> <li><code>assets</code> : contains the image and svg files.</li> <li><code>components</code> : list of all the resuable components.</li> <li><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</li> <li><code>json</code> : has the caleder filter data.</li> <li><code>layouts</code> : contains the base layout of cqweb.</li> <li><code>services</code> : core redux - action, reducer, store</li> <li><code>styles</code> : contains the sass styles.</li> <li><code>utils</code> : list of reusable functions.</li> </ul>"},{"location":"office/intro/#installation","title":"Installation","text":"<p>Success</p> bash<pre><code>npm i --legacy-peer-deps\n\nnpm run product\n</code></pre>"},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/misc/","title":"Misc","text":""},{"location":"office/misc/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/misc/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/misc/#jest","title":"Jest","text":"<p>In the context of package management, like with <code>npm</code> (Node Package Manager) for JavaScript projects, <code>--save</code> and <code>--save-dev</code> are options used during the installation of packages. Here's a simple explanation of the difference:</p> <ul> <li> <p>--save: When you install a package using --save, it means the package will be listed as a dependency in your project's <code>package.json</code> file. This indicates that your project needs this package to run properly. These dependencies are typically packages required for the application to function correctly in production.</p> </li> <li> <p>--save-dev: On the other hand, when you install a package using --save-dev, it means the package will be listed as a development dependency in your project's <code>package.json</code> file. This indicates that your project only needs this package during development, such as for testing, building, or other development-related tasks. These dependencies are typically tools or libraries used during the development process, but not necessary for the application to run in production.</p> </li> </ul> <p>So, in summary:</p> <ul> <li>Use --save for packages your project needs to run.</li> <li>Use --save-dev for packages your project needs during development but not for running the final application.</li> </ul> <ul> <li>--save <code>vs</code> --save-dev</li> <li>jest testing</li> <li>How To Structure React Projects From Beginner To Advanced</li> <li>useEffect by Example</li> </ul>"},{"location":"office/misc/#easy-thumbnail","title":"Easy Thumbnail","text":"<ul> <li>easy-thumbnails 2.8.5: pypi</li> <li>easy thumbnail: readthedocs</li> <li>easy thumbnail: github</li> </ul> <pre><code>from easy_thumbnails.fields import ThumbnailerImageField\n\nclass Profile(models.Model):\n    user = models.OneToOneField('auth.User')\n    photo = ThumbnailerImageField(upload_to='photos', blank=True)\n</code></pre>"},{"location":"office/misc/#step-1","title":"Step 1:","text":"<pre><code>Run pip install easy-thumbnails.\n</code></pre>"},{"location":"office/misc/#step-2","title":"Step 2:","text":"<pre><code>Add `easy_thumbnails` to your INSTALLED_APPS setting:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'easy_thumbnails',\n)\n```\n</code></pre>"},{"location":"office/misc/#step-3","title":"Step 3:","text":"<pre><code>Run `manage.py` migrate `easy_thumbnails`\n</code></pre>"},{"location":"office/secret/","title":"Secret","text":""},{"location":"office/secret/#jenkins","title":"JENKINS","text":"<pre><code>URL - http://ci-info.info.com.np:8080/\n\nuser: infoadmin\npwd: anil{****}1234\n</code></pre>"},{"location":"office/secret/#gitlab","title":"Gitlab","text":"<pre><code>URL: http://gitserver.info.com.np\n\npwd: bi{.........}\n</code></pre>"},{"location":"office/secret/#postmen","title":"Postmen","text":"<pre><code>mail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/secret/#zimbra","title":"Zimbra","text":"<pre><code>URL: https://mail.info.com.np\n\nmail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/secret/#ictc","title":"ICTC","text":"<pre><code>URL: https://cqweb.ictc.com.np/#/\n\nuser: anil\npwd: Anil@{*****}\n\nuser: admin_***\npwd: BaSs@9627{*}\n</code></pre>"},{"location":"office/secret/#cqweb","title":"CQWEB","text":"<pre><code>URL: https://cqweb.info.com.np\n\nuser: admin_bbask\npwd: SsBa@9999\n\nuser: bishow\npwd: $Bishow88\n\nuser: zoro\npwd: $Bishow88\n\nuser: biju\npwd: 1q2w3E**@\n\nuser: Aakash\npwd: 1q2w3E**@\n\nuser: sp\npwd: Password1234$\n\nuser: amit\npwd: 1q2w3E**@\n\nuser: bijay\npwd: 1q2w3E**@\n\nuser: sajal\npwd: 1q2w3E**@\n</code></pre>"},{"location":"office/secret/#infocus360-not-active","title":"Infocus360 (not active)","text":"<p>Danger</p> <pre><code>URL: https://infocus360.ispl.com.np\n\nuser: bishow\npwd: 1q2w3E**@\n\nuser: admin\npwd: 1q2w3E*\n</code></pre>"},{"location":"office/secret/#zimbra-mail-updated","title":"Zimbra MAIL <code>updated</code>","text":"<p>Success</p> <pre><code>URL: http://mail.info.com.np/webmail\n\nmail: bishow.thapa@info.com.np\npwd: I$VqIS~i%DTE\n</code></pre>"},{"location":"office/secret/#cedro","title":"Cedro","text":"<p>Success</p> <pre><code>url: https://cedro.percipio.com\nuser: anil.maharjan@ispl.com.np\npwd: Welcome1\n</code></pre>"},{"location":"office/secret/#clickup","title":"Clickup","text":"<p>Success</p> <pre><code>url: https://app.clickup.com/login\nmail: bishow.thapa@info.com.np\npwd: 75NHYbVWkWFM8pWyjWYD\n</code></pre>"},{"location":"office/secret/#ispl-website-cpanel","title":"ISPL WEBSITE CPANEL","text":"<p>Success</p> <pre><code># URL\nhttps://s717.sgp8.mysecurecloudhost.com:2083/\n# USERNAME\nbishow@allianceasianepal.org.np\n# PASSWORD\nBishow@123##\n</code></pre>"},{"location":"office/secret/#teams-for-leave-approval","title":"Teams (for leave approval)","text":"<p>Success</p> <ul> <li>teams.microsoft.com</li> <li>bishow.thapa@ispl.com.np</li> <li>"},{"location":"office/secret/#hr-app","title":"HR app","text":"<p>Note</p> <pre><code>https://hr.my/go/\ndoyahi8886@bizatop.com\nadminadmin1234\n\nhttps://hr.my/go/\nbishow.thapa@info.com.np\nadmin1234\n</code></pre>"},{"location":"office/secret/#ispl-mail-for-google-app","title":"ISPL Mail For Google App","text":"<pre><code>isplmail49@gmail.com \n</code></pre>"},{"location":"office/secret/#local-portainer-password","title":"Local Portainer password","text":"<pre><code>username: ninja\npassword: ,d:_D9rm_7w?}D8\n</code></pre>"},{"location":"office/clickup/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/clickup/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/clickup/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/clickup/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/clickup/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/clickup/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/clickup/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/clickup/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/clickup/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/clickup/dashboard-noticeboard-after-4pm/","title":"Dashboard Model: show after 4pm","text":""},{"location":"office/clickup/dashboard-noticeboard-after-4pm/#dashboard-noticeboard-after-4pm-to-sent-all-users","title":"Dashboard Noticeboard after 4pm to sent all users","text":"<p>Abstract</p> old Codenew CodeAlternative Method DraggableHome.js<pre><code>const DraggableHome = forwardRef(({ navbarRef }, ref) =&gt; {\n\n\n{/* ADDED */}\nconst isAfter4PM = () =&gt; {\n    const now = moment();\n    const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0);\n    return now.isAfter(fourPM);\n};\n\nreturn (\n    &lt;&gt;\n    &lt;div className=\"dashboards dashing\" ref={ref}&gt;\n        &lt;Layout\n            ....\n        /&gt;\n        {noticeBoard?.totalCount === 0 ? (\n        \"\"\n        ) : (\n        &lt;&gt;\n            {!isEmpty(noticeBoard) &amp;&amp; (\n            &lt;&gt;\n                &lt;div\n                    style={{\n                        marginTop: \"-10px\",\n                        backgroundColor: \"white\",\n                        marginBottom: \"14px\",\n                        borderRadius: \"8px\",\n                    }}\n                &gt;\n                    &lt;div className=\"dashboard_notice_board_top\"&gt;\n                        &lt;div\n                            className=\"dashboard_notice_title\"\n                            style={{ width: \"4%\", marginLeft: \"5px\" }}\n                        &gt;\n                            Notice|\n                        &lt;/div&gt;\n                        &lt;marquee className=\"marquee_tag_dashboard\"&gt;\n                            {noticeBoard?.items?.map((data, i) =&gt; (\n                                &lt;span className=\"title_dashboard_notice\" key={i}&gt;\n                                {data?.title}\n                                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${data?.description}`}&lt;/span&gt;\n                                &lt;/span&gt;\n                            ))}\n                        &lt;/marquee&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* ADDED */}\n                {isAfter4PM() &amp;&amp; &lt;NoticeBoardModal noticeBoard={noticeBoard} /&gt;}\n            &lt;/&gt;\n            )}\n        &lt;/&gt;\n        )}\n    &lt;/&gt;\n    )\n});\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        console.log(\"xxx item xxx: \", item)\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;&gt;\n                    {/* &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt; */}\n\n                    &lt;Modal\n                        title={visibleItem?.title}\n                        visible={isModalVisible}\n                        onCancel={handleModalCancel}\n                        footer={null}\n                    &gt;\n                        &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                    &lt;/Modal&gt;\n                &lt;/&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\nimport moment from 'moment';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        // Function to check if current time is after 4 PM\n        const checkTimeToShowModal = () =&gt; {\n            const now = moment();\n            const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0); // 4 PM today\n            if (now.isAfter(fourPM)) {\n                setIsModalVisible(true);\n            } else {\n                setIsModalVisible(false);\n            }\n        };\n\n        checkTimeToShowModal(); // Initial check when component mounts\n\n        // Set interval to check the time every minute\n        const interval = setInterval(() =&gt; {\n            checkTimeToShowModal();\n        }, 60000); // Check every minute\n\n        return () =&gt; {\n            clearInterval(interval); // Clear interval on component unmount\n        };\n    }, []);\n\n    useEffect(() =&gt; {\n        // Update modal visibility based on noticeBoard\n        if (isModalVisible &amp;&amp; !isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n            } else {\n                setVisibleItem(null);\n            }\n        }\n    }, [isModalVisible, currentIndex, noticeBoard]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt;\n            )}\n            {isModalVisible &amp;&amp; (\n                &lt;Modal\n                    title={visibleItem?.title}\n                    visible={isModalVisible}\n                    onCancel={handleModalCancel}\n                    footer={null}\n                &gt;\n                    &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                &lt;/Modal&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/clickup/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/clickup/internal-message-only-system-to-show-in-tos/","title":"Internal Message: only system user to show","text":""},{"location":"office/clickup/internal-message-only-system-to-show-in-tos/#internal-only-the-system-users-to-be-shown-in-internal-message-section","title":"Internal : Only the System Users to be shown in Internal Message section","text":"<p>after clicking select all option . only the Internal users are selected</p> <p>By Default all the users in included in internal section . If the user is not to be added in the internal section then it will be tagged as not inlcude in internal section . </p> <p>Tip</p> <p>/organizationStructure/userReportingManagerUserListing</p> <p><code>IsExcludedInternalMessage</code> should be present in the response</p> old CodeUpdated Code Email/Includes/ReplyChatBox.js<pre><code>useEffect(() =&gt; {\n    if (chatBox) {\n        if (selectTosInternal) {\n        let allParticipantsId = allParticipants?.map(\n            (participant) =&gt; participant?.appUserId\n        );\n        let newQuickMessageParticipantDtos = allParticipants?.map(\n            (participant) =&gt; ({\n            participantUserId: participant?.appUserId,\n            })\n        );\n\n        //added\n        let isExcludedParticipantDtos = allParticipants\n            .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n            .map(participant =&gt; participant?.appUserId);\n\n        setQuickMessageParticipantDtosTo(newQuickMessageParticipantDtos);\n        form.setFieldsValue({\n            // participantTos: allParticipantsId,\n            // added\n            participantTos: isExcludedParticipantDtos,\n        });\n        } else {\n        form.setFieldsValue({\n            participantTos: [],\n        });\n        }\n    }\n}, [selectTosInternal]);\n</code></pre> <pre><code>let isExcludedParticipantDtos = allParticipantsId\n  .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n  .map(participant =&gt; participant?.appUserId);\n\nform.setFieldsValue({ \n    participantTos: isExcludedParticipantDtos,\n})\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/clickup/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/clickup/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/clickup/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/clickup/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/clickup/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/clickup/re-sent-outbox-mail/","title":"Re-sent & Reset Mail in Outbox","text":""},{"location":"office/clickup/re-sent-outbox-mail/#re-sent-mail-outbox","title":"Re-sent Mail outbox","text":"MailMessageCenterHeader.js<pre><code>// line-number: 1025\n\n{/* added */}\n{selectedMailTypeAndMailData?.typeSystemName === OUTBOX &amp;&amp; (\n    &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n        multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n        \"disabled\"\n        } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n        if (currentSelectedMailMessage?.id) {\n            dispatch(resetOutboxMailFailureCount(currentSelectedMailMessage?.id))\n        }\n        }}\n    &gt;\n        &lt;Image src={trash} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n        Resend\n        &lt;/p&gt;\n    &lt;/div&gt;\n)}\n</code></pre>"},{"location":"office/clickup/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/clickup/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/clickup/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        if (response.isSuccess) {\n        message.success(\"Successfully updated company\");\n        dispatch(\n            success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n        );\n        # added here\n        await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/clickup/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/clickup/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/clickup/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/clickup/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/components/HTMLRenderer/","title":"HTMLRenderer","text":"<p>Example</p>"},{"location":"office/components/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> IndexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/components/JSON-stringify/","title":"Using JSON.stringify","text":"<p>Example</p> <p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n...\nattentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/components/old/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/documentation/architecture/","title":"Architecture","text":""},{"location":"office/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/documentation/blog/","title":"Blog Module","text":"<p>Success</p> StagesView.js<pre><code>...\nimport Blog from \"components/Blog\";\n...\n\n{/* Blog */}\n&lt;div className=\"business-header\"&gt;\n    &lt;div className=\"business-header-title\" style={{ fontSize: \"1.1em\" }}&gt;\n        Blog\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;Blog tenderId={tenderId} /&gt;\n</code></pre> <pre><code>src\n- components\n---- Blog\n-------BlogForm.js\n-------BlogItem.js\n-------index.js\n</code></pre> <p>Tips</p> BlogBlogItemBlogFormInfinite Scroll index.js<pre><code>import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Skeleton, Row, Col, Affix, Dropdown } from \"antd\";\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    blogAdd,\n    updateBlogMessage,\n    getBlogPagination,\n} from \"services/redux/officeresource/blog/action\";\nimport {\n    employeeProfileDetail,\n    actionForGetAllUsersPP,\n} from \"services/redux/profile/profile.action\";\nimport BlogItem from \"./BlogItem\";\nimport BlogForm from \"./BlogForm\";\n\nconst Blog = ({ tenderId }) =&gt; {\nconst dispatch = useDispatch();\nconst [form] = Form.useForm();\nconst pageSize = 40;\n\nconst scrollableRef = useRef();\n\nconst {\n    addBlogMessageLoading,\n    addBlogMessageResp,\n    getBlogMsgPaginationResp,\n    getBlogMsgPaginationLoading,\n} = useSelector((state) =&gt; state.blogReducer);\n\nconst { profileInfo } = useSelector((state) =&gt; state.profile);\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst [editMode, setEditMode] = useState(false);\nconst [editedBlog, setEditedBlog] = useState({});\n\nconst appUserIdUC = sessionStorage?.userId.toUpperCase();\n\n// SUPERAPI **************************************************************\nconst { listingAllUsersProfileResp, listingAllUsersProfileLoading } =\n    useSelector((state) =&gt; state.profile);\n\nconst [listingAllProfile, setListingAllProfile] = useState([]);\n\nuseEffect(() =&gt; {\n    dispatch(actionForGetAllUsersPP());\n}, []);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(listingAllUsersProfileResp)) {\n        setListingAllProfile(listingAllUsersProfileResp);\n    }\n}, [listingAllUsersProfileResp]);\n// end SUPERAPI **************************************************************\n\nuseEffect(() =&gt; {\n    dispatch(\n        employeeProfileDetail({\n            AppUserId: sessionStorage?.userId.replaceAll('\"', \"\"),\n        })\n    );\n}, []);\n\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nconst handleEditClick = (item) =&gt; {\n    setEditMode(true);\n    setEditedBlog({\n        id: item.id,\n        name: item.name,\n        body: item.body,\n    });\n};\n\nconst handleEditSubmit = (values) =&gt; {\n    const updatedBlog = {\n        id: editedBlog.id,\n        userId: sessionStorage?.userId,\n        subject: \"string\",\n        name: editedBlog.name,\n        body: values.editedMessage,\n        isActive: true,\n        referenceCode: tenderId,\n        lastmodified: moment().format(),\n    };\n\n    dispatch(updateBlogMessage(editedBlog.id, updatedBlog));\n\n    setEditMode(false);\n    setEditedBlog({});\n};\n\nconst onFinish = (values) =&gt; {\n    let data = {};\n    if (values) {\n    data = {\n        userId: sessionStorage?.userId,\n        referenceCode: tenderId,\n        body: values.message,\n        creationTime: moment().format(),\n        subject: \"string\",\n        isActive: true,\n    };\n    // dispatch(blogAdd(data));\n    try {\n        dispatch(blogAdd(data));\n    } catch (err) {\n        console.log(\"error: \", err);\n    } finally {\n        form.resetFields();\n    }\n    }\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n        &lt;BlogForm\n            form={form}\n            onFinish={onFinish}\n            loading={addBlogMessageLoading}\n        /&gt;\n    &lt;/div&gt;\n    );\n};\n\nexport default Blog;\n</code></pre> BlogItem.js<pre><code>import moment from \"moment\";\nimport { Form, Button, Input } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n// import BlogForm from \"./BlogForm\";\nimport MatchingImageDisplay from \"components/shared/MatchingImageDisplay\";\nconst { TextArea } = Input;\n\nconst BlogItem = ({\n    blogMsg,\n    appUserIdUC,\n    editMode,\n    setEditMode,\n    editedBlog,\n    handleEditClick,\n    handleEditSubmit,\n    listingAllProfile,\n}) =&gt; {\n\nconst [form] = Form.useForm();\n\nreturn (\n    &lt;&gt;\n    {blogMsg.map((item, index) =&gt; (\n        &lt;div\n            className=\"blogWrapper\"\n            key={index}\n            style={{\n                display: \"flex\",\n                justifyContent:\n                JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"flex-end\"\n                    : \"flex-start\",\n            }}\n        &gt;\n        {JSON.stringify(item?.userId)?.toUpperCase() !== appUserIdUC ? (\n            &lt;span\n                style={{\n                    height: \"40px\",\n                    width: \"40px\",\n                    background: \"#67a1e4\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"50%\",\n                    color: \"#FFF\",\n                    marginRight: \"12px\",\n                }}\n            &gt;\n            &lt;MatchingImageDisplay\n                listingAllProfile={listingAllProfile}\n                item={item}\n            /&gt;\n            &lt;/span&gt;\n        ) : null}\n\n        &lt;div\n            style={{\n                display: \"inline-block\",\n                maxWidth: \"80%\",\n                background:\n                    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"#E8EBFA\"\n                    : \"#FFFFFF\",\n                marginBottom: \"1em\",\n                padding: \"0.4em 1em\",\n            }}\n        &gt;\n            &lt;div&gt;\n            {editMode &amp;&amp; editedBlog.id === item.id ? (\n                // &lt;BlogForm\n                //   initialValue={item.body}\n                //   onFinish={(values) =&gt; {\n                //     handleEditSubmit(item.id, values.editedMessage);\n                //     // toggleEditMode();\n                //   }}\n                // /&gt;\n                &lt;Form\n                    onFinish={handleEditSubmit}\n                    initialValues={{ editedMessage: editedBlog.body }}\n                &gt;\n                &lt;Form.Item\n                    name=\"editedMessage\"\n                    rules={[\n                    {\n                        required: true,\n                    },\n                    ]}\n                &gt;\n                    {/* &lt;Input */}\n                    &lt;TextArea\n                        style={{\n                            // height: \"42px\",\n                            borderBottom: \"4px solid #8e92d1\",\n                            resize: \"none\",\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                    Save\n                &lt;/Button&gt;\n                &lt;Button onClick={() =&gt; setEditMode(false)}&gt;Cancel&lt;/Button&gt;\n                &lt;/Form&gt;\n            ) : (\n                &lt;&gt;\n                &lt;div\n                    style={{\n                        display: \"flex\",\n                    }}\n                &gt;\n                    &lt;span className=\"blog-username\"&gt;\n                    {item?.name?.toUpperCase()}\n                    &lt;/span&gt;\n                    &lt;span style={{ color: \"#807e7e\" }}&gt;\n                    {item?.lastmodified\n                        ? \"Modified \" + moment(item?.lastmodified).calendar()\n                        : moment(item?.creationTime).startOf(\"min\").fromNow()}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div\n                    className=\"blogBody\"\n                        style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                &gt;\n                    &lt;p&gt;{item?.body}&lt;/p&gt;\n                    &lt;span\n                    className={\n                        JSON.stringify(item?.userId) ===\n                        sessionStorage?.userId.toUpperCase()\n                        ? \"blog__content\"\n                        : \"\"\n                    }\n                    &gt;\n                    {JSON.stringify(item?.userId)?.toUpperCase() ===\n                    appUserIdUC ? (\n                        &lt;EditOutlined onClick={() =&gt; handleEditClick(item)} /&gt;\n                    ) : null}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;/&gt;\n            )}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    ))}\n    &lt;/&gt;\n);\n};\n\nexport default BlogItem;\n</code></pre> BlogForm.js<pre><code>import { Form, Input, Button, Row, Col } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nconst { TextArea } = Input;\n\nconst BlogForm = ({ form, onFinish, loading }) =&gt; {\nreturn (\n    &lt;Form\n    name=\"blog\"\n    form={form}\n    onFinish={onFinish}\n    wrapperCol={{ span: 24 }}\n    style={{ background: \"#f9f9f9\", padding: \"2em 4em\" }}\n    &gt;\n    &lt;Row gutter={8}&gt;\n        &lt;Col span={22}&gt;\n        &lt;Form.Item\n            name=\"message\"\n            rules={[\n            {\n                required: true,\n            },\n            ]}\n        &gt;\n            &lt;TextArea\n            rows={2}\n            style={{\n                // height: \"42px\",\n                borderBottom: \"4px solid #8e92d1\",\n                resize: \"none\",\n                fontSize: \"1.1em\",\n            }}\n            /&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n        &lt;Col span={2}&gt;\n        &lt;Form.Item wrapperCol={{ span: 24 }}&gt;\n            &lt;Button\n            // type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                // added\n                background: \"none\",\n                border: \"none\",\n                color: \"#67a1e4\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            loading={loading}\n            &gt;\n            {/* Submit */}\n            &lt;SendOutlined style={{ fontSize: \"28px\" }} /&gt;\n            &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;/Form&gt;\n);\n};\n\nexport default BlogForm;\n</code></pre> <pre><code>const pageSize = 40;\nconst scrollableRef = useRef();\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\n{/* USEFFECT */}\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"office/documentation/daily-dairy/","title":"Daily Dairy","text":""},{"location":"office/documentation/daily-dairy/#daily-dairy","title":"daily Dairy","text":"todolist.js <pre><code>// added\n\n\n&lt;div className=\"flip-card-back\"&gt;\n      &lt;div\n        style={{\n          backfaceVisibility: \"hidden\",\n        }}\n      &gt;\n        &lt;div\n          className={\n            \"dashboards__tenderlist dashboards__body\"\n          }\n        &gt;\n          &lt;div className=\"dashboards__bodyWrap\"&gt;\n            &lt;h4 className=\"dashboards__body--title\"&gt;\n              Daily Dairy\n              {/* ADDED */}\n              &lt;span\n                onClick={() =&gt; {\n                  setRotate(rotate + 1);\n                }}\n                style={{\n                  marginLeft: \"10px\",\n                  height: \"30px\",\n                  marginBottom: \"10px\",\n                }}\n              &gt;\n                &lt;img\n                  src=\"./assets/svg/toggle-arrow.svg\"\n                  height={15}\n                  alt=\"complete\"\n                /&gt;\n              &lt;/span&gt;\n            &lt;/h4&gt;\n\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"dashboards__body--main todolist-wrapper\"&gt;\n          &lt;ul\n            className=\"dashboards__todolists\"\n            style={{ height: heightt[1] }}\n          &gt;\n            {/* DATA */}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"office/documentation/excel-api-data/","title":"Excel API Data","text":""},{"location":"office/documentation/excel-api-data/#admin-module","title":"Admin Module","text":"Holiday Event<pre><code>// HolidayWithSampleButton.js\n</code></pre> <p>Example Usage</p> Generic BinaryExcel FilePracticalReact Package for ExcelTheory <p>Using <code>application/octet-stream</code> for a Generic Binary Download:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"file.bin\"\n\n(binary data)\n</code></pre> application/octet-stream<pre><code>const downloadFile = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'file.bin';\n    saveAs(blob, fileName);\n};\n</code></pre> <p>Using <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> for an Excel File:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nContent-Disposition: attachment; filename=\"spreadsheet.xlsx\"\n\n(binary data of the Excel file)\n</code></pre> application/**<pre><code>const downloadExcel = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'spreadsheet.xlsx';\n    saveAs(blob, fileName);\n};\n</code></pre> <pre><code>import { saveAs } from 'file-saver';\nimport xlsx from 'xlsx';\n\n\n// Parse the binary data\nconst workbook = XLSX.read(holidaySampleResponse, { type: 'array' });\n\n// Convert the workbook to a Blob object\nconst excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n\nconst blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n// Save the Blob as a file\nsaveAs(blob, 'holiday_sample.xlsx');\n\n\n// or\n\nconst fileName = 'holiday_sample.xlsx';\n\nconst rawblob = new File([holidaySampleResponse], {\n    // type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    type: 'application/octet-stream'\n});\nsaveAs(blob, fileName);\n</code></pre> Installation<pre><code>npm i xlsx\n</code></pre> Example<pre><code>import * as XLSX from 'xlsx/xlsx.mjs';\n\n/* load 'fs' for readFile and writeFile support */\nimport * as fs from 'fs';\nXLSX.set_fs(fs);\n\n/* load 'stream' for stream support */\nimport { Readable } from 'stream';\nXLSX.stream.set_readable(Readable);\n\n/* load the codepage support library for extended support with older formats  */\nimport * as cpexcel from 'xlsx/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cpexcel);\n</code></pre> <pre><code>const bytesData = this.props.bytesData; // Assuming you have your bytes data\nconst workbook = XLSX.read(bytesData, { type: 'array' });\n\n// Write the workbook object to an Excel file\nXLSX.writeFile(workbook, 'example.xlsx');\n</code></pre> <p>The type parameter in <code>XLSX.read</code> specifies the type of input data being provided. Here are the available types:</p> <ul> <li>array: This is used when your data is in the form of an array of bytes.</li> <li>binary: This is used when your data is in binary format.</li> <li>buffer: This is used when your data is in the form of a <code>Node.js</code> buffer.</li> <li>file: This is used when your data is in the form of a file (e.g., when using a file input).</li> <li>base64: This is used when your data is encoded in base64 format.</li> <li>string: This is used when your data is in the form of a string.</li> </ul> <p>Choose the appropriate type based on how your data is represented. In your case, if you have the bytes data as an array, you would use 'array'.</p> <p>In summary, use <code>application/octet-stream</code> for generic binary data or when you want to force a download without specifying the file type. Use <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> when you are specifically serving Excel files to ensure proper handling and identification by the client.</p> what is application/octet-stream type <p>application/octet-stream is a generic binary file type. It's used when the specific type of file being transferred is either unknown or does not fit into any of the more specific categories available. Here are some key points about application/octet-stream:</p> <p>Example</p> HolidayWithSampleButton.js<pre><code>useEffect(() =&gt; {\n    if (holidaySampleResponse || !holidaySampleLoading) {\n        try {\n            if (isDownloadStatus) {\n                const blob = new Blob([holidaySampleResponse], { type: 'application/octet-stream' });\n\n                // Create a URL for the Blob\n                const url = window.URL.createObjectURL(blob);\n\n                // Create a link element and click on it to trigger the download\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'HolidaySample.xlsx'); // Specify the file name here\n                document.body.appendChild(link);\n                link.click();\n            }\n        } catch (err) {\n            console.log(\"error: \", err)\n        } finally {\n            setIsDownloadStatus(false);\n        }\n    }\n}, [holidaySampleResponse])\n</code></pre>"},{"location":"office/documentation/excel-api-data/#reference","title":"Reference","text":"<ul> <li>xlsx</li> <li>how to download excel in response from api react js</li> <li>How to Import Export Excel &amp; CSV In React 2022</li> <li>How to Excel Export in React JS</li> <li>online excel file viewer</li> </ul>"},{"location":"office/documentation/excel-api-data/#characteristics","title":"Characteristics:","text":"<ul> <li> <p>Binary Data: It indicates that the data being transferred is binary, meaning it's not in a human-readable format like text.</p> </li> <li> <p>No Specific Format: Unlike specific MIME types such as <code>application/json</code>, <code>text/html</code>, or <code>image/jpeg</code>, <code>application/octet-stream</code> does not specify any particular structure or format for the data. It's up to the consuming application to interpret the data correctly.</p> </li> <li> <p>Download Behavior: Browsers typically initiate a download for files with this MIME type rather than trying to display the contents directly in the browser window. This behavior makes it suitable for files like executables, images, videos, or any non-text data.</p> </li> </ul>"},{"location":"office/documentation/excel-api-data/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>File Downloads: Commonly used to force a file download from a web server. For example, when you click on a download link for a software installer (*.exe), the server might respond with Content-Type: application/octet-stream to ensure the file is downloaded rather than displayed in the browser.</p> </li> <li> <p>Unknown or Generic Data: It's used when the server cannot determine the specific type of data being sent, or when the data is a raw binary file without a specific MIME type.</p> </li> </ul>"},{"location":"office/documentation/excel-api-data/#example-scenarios","title":"Example Scenarios:","text":"<ul> <li> <p>File Uploads: When uploading a file to a server, if the server does not know the exact MIME type of the file (due to limitations or other reasons), it might use application/octet-stream as a fallback.</p> </li> <li> <p>Custom Applications: Some custom applications may use this MIME type to handle proprietary binary data formats that are not standardized or recognized by common MIME types.</p> </li> </ul>"},{"location":"office/documentation/excel-api-data/#handling-applicationoctet-stream-in-web-development","title":"Handling application/octet-stream in Web Development:","text":"<ul> <li> <p>Client-side Handling: When handling files with this MIME type in a web application, ensure proper handling of binary data. Use techniques such as Blob, FileReader, or libraries like FileSaver.js to manage and save the file on the client side.</p> </li> <li> <p>Server-side Considerations: Servers may need to set appropriate headers (Content-Type, Content-Disposition) to ensure correct behavior when serving binary files to clients.</p> </li> </ul>"},{"location":"office/documentation/excel-api-data/#example-usage","title":"Example Usage:","text":"<p>Here's an example of how a server might respond with <code>application/octet-stream</code> for a file download:</p> <p>In this response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"example.zip\"\nContent-Length: 12345\n\n... (binary data follows)\n</code></pre> <p>In this response:</p> <ul> <li>Content-Type: <code>application/octet-stream</code> indicates that the data being sent is binary.</li> <li>Content-Disposition: <code>attachment; filename=\"example.zip\"</code> suggests that the browser should prompt the user to download the file with the name example.zip.</li> </ul>"},{"location":"office/documentation/excel-api-data/#conclusion","title":"Conclusion:","text":"<p><code>application/octet-stream</code> is a versatile MIME type used for transmitting arbitrary binary data. It's particularly useful for ensuring files are downloaded rather than displayed in the browser, and for scenarios where the specific type of data is not well-defined or known in advance.</p>"},{"location":"office/documentation/fingerprint/","title":"Fingerprint","text":"<p>TabOne.js</p> <pre><code>const TabOne = ({\n    onFinish1,\n    startDate,\n    defaultDate,\n    setStartDate,\n    loader,\n    setLoader,\n    attendancePaginationResponse,\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    // added\n    const disabledDate = (current) =&gt; {\n        return current &amp;&amp; current &gt;= moment().startOf('day');\n    };\n\n\n    return (\n        &lt;&gt;\n            {isRoleHr ? (\n                &lt;Form form={formTest} onFinish={handleFinish} style={{ padding: \"10px 17px\"}}&gt;\n                    &lt;div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}&gt;\n                        &lt;div&gt;&lt;/div&gt;\n                        &lt;div\n                            className=\"\"\n                            style={{\n                            display: \"flex\",\n                            }}\n                        &gt;\n                            &lt;Form.Item name=\"date\"&gt;\n                                {/* added disabledDate */}\n                                &lt;RangePicker disabledDate={disabledDate} /&gt;\n                            &lt;/Form.Item&gt;\n                            &lt;Button\n                                type=\"primary\"\n                                style={{\n                                    height: \"100%\",\n                                    marginLeft: \"10px\",\n                                }}\n                                htmlType=\"submit\"\n                                loading={loadingApi}\n                            &gt;\n                                Fetch Data\n                            &lt;/Button&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/Form&gt;\n            ) : null}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/","title":"GroupChat InternalMessage","text":""},{"location":"office/documentation/groupchat-internal-message/#groupchat","title":"groupchat","text":""},{"location":"office/documentation/groupchat-internal-message/#groupchat-checkbox-in-dashboard","title":"Groupchat checkbox in dashboard","text":"index.js src/components/internalMNew/index.js<pre><code>export default function InternalM(props) {\n    ...\n    const [isGroupChat, setIsGroupChat] = useState(false);\n    ...\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n            isGroupChat: isGroupChat,\n        }\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                className=\"drawer-form-wrapper internal_message_section_email_section\"\n            &gt;\n            &lt;div className=\"internal_message_popup_email_section\"&gt;\n                &lt;div className=\"left-chat-action-btn\" style={{ marginLeft: \"14px\" }}&gt;\n                    &lt;div className=\"chat-box-send-wrapper\"&gt;\n                    {quickEmailAddresponseLoading ? (\n                        antIcon\n                    ) : (\n                        &lt;Space\n                        // &lt;Dropdown.Button\n                        // overlay={centerTypeMenu}\n                        onClick={() =&gt; {\n                            handleSaveContinue();\n                        }}\n                        &gt;\n                        &lt;img src={sendIntM} alt=\"\" /&gt;\n\n                        {/* &lt;/Dropdown.Button&gt; */}\n                        &lt;/Space&gt;\n                    )}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n\n                &lt;div className=\"chat-action-btn\" style={{ display: \"flex\" }}&gt;\n\n                    {/* ADDED */}\n                    &lt;div&gt;\n                        &lt;Checkbox\n                            onChange={(e) =&gt; {\n                            setIsGroupChat(!isGroupChat);\n                            }}\n                        &gt;\n                            GroupChat\n                        &lt;/Checkbox&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#groupchat-menu-added-in-the-mail","title":"GroupChat Menu added in the Mail","text":"Danger <pre><code>src/components/email/emailList.js\n</code></pre> <p>This file is not used, so don't change here.</p> Changes <pre><code>src/components/constants/index.js\nsrc/views/Email/EmailList.js\n</code></pre> constants/index.jsEmail/EmailList.js <pre><code>...\nexport const GROUP_CHAT = \"GroupChat\";\nexport const GROUP_CHAT_ARCHIEVE = \"GroupChatArchieve\";\n</code></pre> <pre><code>...\nconst handleEmailSharedDetails = (\n    accountHolderAppUserId,\n    msgCenterTypeName,\n    emailType\n) =&gt; {\n    setSelectedEmailType({\n        typeDisplayName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.SHAREDMAIL_INBOX\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n\n        typeSystemName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.ALL\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n    })\n}\n\n\n\n....\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === \"GroupChat\"\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;GroupChat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n        {mailPaginationCount?.archievedCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.archievedCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n\n&lt;Menu.Divider style={{ marginTop: 15 }} /&gt;\n</code></pre> Tip <pre><code>GroupChat.jsx\ngroupChatModal.jsx\ngroupChatPresentation.jsx\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#counter","title":"Counter","text":""},{"location":"office/documentation/groupchat-internal-message/#display-the-counter-on-the-groupchat-title-side","title":"Display the Counter on the Groupchat Title side","text":"EmailList.js<pre><code>// page-number: 3678\n? Number(\n    nullChecker(\n    mailPaginationCount?.circularInboxCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n    mailPaginationCount?.groupChatCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n</code></pre> Updated<pre><code>: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupChatCount?.all,\n        \"all\"\n    )\n).toLocaleString() || 0\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#counter-on-all-internal-tabpane","title":"Counter on <code>All</code> &amp; <code>Internal</code> Tabpane","text":"EmailList.js<pre><code>// All &amp; Internal Tab pane Counter:\n// pg: 4140: \n\n? Number(\n    nullChecker(\n        mailPaginationCount?.tenderBusinessCount\n        ?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName ===\n    \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupchat?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n: \"\"\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#email-messagecentertype-api","title":"Email messagecenterType API","text":"<pre><code>import { emailPaginationCount } from \"services/redux/email/mailMessageCenter/action\";\n\nconst { mailPaginationCount } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\n\n\nuseEffect(() =&gt; {\n    dispatch(emailPaginationCount({ messagecenterType: \"All\" }));\n  }, []);\n\n\n// https://cqnoval.info.com.np/api/app/mailMessageCenter/MailMessageCenterPaginationCountersByType?messagecenterType=All\n</code></pre> GroupChat.jsx<pre><code>import { getMailMessageCenterPagination } from \"services/redux/email/mailMessageCenter/action\";\n\nconst getGroupChat = (\n    MaxResultCount = 5,\n    SkipCount = 0,\n    loadMore = false,\n    MessageCenterTypeName = \"groupchat\",\n) =&gt; {\n    let appendUrl = `skipCount=${SkipCount}&amp;maxResultCount=${MaxResultCount}`;\n    if (MessageCenterTypeName) {\n        appendUrl += `&amp;messageCenterTypeName=${MessageCenterTypeName}`;\n        }\n    dispatch(getMailMessageCenterPagination(appendUrl, loadMore));\n}\n\n\nuseEffect(() =&gt; {\n    getGroupChat();\n}, [])\n\n\n// API\nexport class MailMessageCenterService {\n  async getMailMessageCenterPagination(query, source) {\n    let url = `${appBaseUrl}/mailMessageCenter/mailMessageCenterPagination?${query}`;\n    let data = await getServiceMail(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#redux-add-counter-all-in-reducer","title":"REDUX ADD Counter all in REDUCER","text":"reducer.js <p>services/redux/email/mailMessageCenter/reducer.js</p> <pre><code>const INITIAL_STATE = {\n    ...\n    allCount: null,\n    toCount: null,\n    fromCount: null,\n    ccCount: null,\n    bccCount: null,\n    pendingCount: null,\n    archievedCount: null,\n    trashCount: null,\n    junkCount: null,\n    flagCount: null,\n    drafCount: null,\n    outBoxCount: null,\n    approvalCount: null,\n    loanCount: null,\n    leaveCount: null,\n    procurementCount: null,\n    tenderBusinessCount: null,\n    circularInboxCount: null,\n    circularSentCount: null,\n    // added\n    groupChatCount: null,\n}\n\n\nlet approvalCount = \"\";\nlet allCount = \"\";\nlet toCount = \"\";\nlet fromCount = \"\";\nlet ccCount = \"\";\nlet bccCount = \"\";\nlet pendingCount = \"\";\nlet archievedCount = \"\";\nlet trashCount = \"\";\nlet junkCount = \"\";\nlet flagCount = \"\";\nlet drafCount = \"\";\nlet outBoxCount = \"\";\nlet loanCount = \"\";\nlet leaveCount = \"\";\nlet procurementCount = \"\";\nlet tenderBusinessCount = \"\";\nlet circularInboxCount = \"\";\nlet circularSentCount = \"\";\n// added\nlet groupChatCount = \"\";\n\n\nexport default function mailMessageCenterReducer(\n    state = INITIAL_STATE,\n    action\n)\n{\n    switch (action.type) {\n        case EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_INIT:\n            ...\n\n        ...\n        //pagination count\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_INIT:\n        return {\n            ...state,\n            mailPaginationCountLoading: true,\n        };\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_SUCCESS:\n        switch (action.record) {\n            case \"All\":\n                allCount = action.payload;\n                break;\n\n            case \"From\":\n                fromCount = action.payload;\n                break;\n\n            // added\n            case \"GroupChat\":\n                groupChatCount = action.payload;\n                break;\n            default:\n            ...\n        }\n\n        return {\n            ...state,\n            mailPaginationCount: {\n                allCount: allCount,\n                toCount: toCount,\n                fromCount: fromCount,\n                ccCount: ccCount,\n                bccCount: bccCount,\n                pendingCount: pendingCount,\n                archievedCount: archievedCount,\n                trashCount: trashCount,\n                junkCount: junkCount,\n                flagCount: flagCount,\n                drafCount: drafCount,\n                outBoxCount: outBoxCount,\n                approvalCount: approvalCount,\n                loanCount: loanCount,\n                leaveCount: leaveCount,\n                procurementCount: procurementCount,\n                tenderBusinessCount: tenderBusinessCount,\n                circularInboxCount: circularInboxCount,\n                circularSentCount: circularSentCount,\n                // added\n                groupChatCount: groupChatCount\n            },\n            allCount: allCount,\n            toCount: toCount,\n            fromCount: fromCount,\n            ccCount: ccCount,\n            bccCount: bccCount,\n            pendingCount: pendingCount,\n            archievedCount: archievedCount,\n            trashCount: trashCount,\n            junkCount: junkCount,\n            flagCount: flagCount,\n            drafCount: drafCount,\n            outBoxCount: outBoxCount,\n            approvalCount: approvalCount,\n            loanCount: loanCount,\n            leaveCount: leaveCount,\n            procurementCount: procurementCount,\n            tenderBusinessCount: tenderBusinessCount,\n            circularInboxCount: circularInboxCount,\n            circularSentCount: circularSentCount,\n                // added\n            groupChatCount: groupChatCount,\n            mailPaginationCountLoading: false,\n        };\n    }\n}\n</code></pre> Changes EmailList.js<pre><code>// pagenum: 450\nuseEffect(() =&gt; {\n    if (emailType !== \"Business\") {\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.ALL }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularInbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularSent\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"From\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"To\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Cc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Business\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Bcc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Pending\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Archived\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Trash\" }));\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.JUNK }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Specialflag1\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Draft\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        // added\n        dispatch(emailPaginationCount({ messagecenterType: \"GroupChat\" }));\n       },\n    }   \n[\n// replyInstanceMessageResp,\n// changeEmailStatusTypeRespLoading,\n// selectedMailTypeAndMailData,\n]);\n\n\n//\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === CONSTANT.GROUP_CHAT\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;Group Chat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n\n        {console.log(\"mailPaginationCount\", mailPaginationCount)}\n\n        {mailPaginationCount?.groupChatCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.groupChatCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#groupchat-isarchive-remove-item","title":"GROUPCHAT IsArchive Remove Item","text":"<p>it removes the item but need to hit the api: <code>getMailMessageCenterPagination</code></p> <pre><code>export const getMailMessageCenterPagination = (q, loadMore, data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION, data));\n    const response =\n      await mailMessageCenterService.getMailMessageCenterPagination(q, source);\n    if (response?.cancelApi === false) return;\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION,\n          response.data,\n          loadMore,\n          data\n        )\n      );\n      dispatch(finish(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n      message.error(response.errorMessage);\n    }\n  };\n};\n</code></pre> reducer.jsx reducer.jsx<pre><code>// redux/email/mailMessageCenter/reducer.js\n// page number: 202\n\ncase EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_UPDATE:\n  let newData = state.mailMessageCenterPagination.items.map((email) =&gt; {\n    if (\n      email.applicationTypeSystemName === \"EMail\" ||\n      email.applicationTypeSystemName === \"QuickMessage\" ||\n      email.applicationTypeSystemName === \"Leave\" ||\n      email.applicationTypeSystemName == \"Loan\" ||\n      email.applicationTypeSystemName === \"Business\" ||\n      email.applicationTypeSystemName === \"Document\" ||\n      email.applicationTypeSystemName === \"TODO\" ||\n      email.applicationTypeSystemName === \"Todo\" ||\n      email.applicationTypeSystemName === \"Procurement\" ||\n      \"Loan\"\n    ) {\n      if (action.query.messageCenterId === email.id) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    } else if (email.applicationTypeSystemName === \"InstanceMessage\") {\n      if (\n        action.query.messageCenterId === email.instanceMainMessageCenterId\n      ) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    }\n  });\n\n  let filterJunk = filterNewData.filter((data) =&gt;\n    action.emailStatus.isJunk ? !data.isJunk : data.isJunk\n  );\n  {/* ADDED */}\n  let filterChatArchive = filterNewData.filter((data) =&gt;\n    action.emailStatus.isGroupChatArchive ? !data.isGroupChatArchive : data.isGroupChatArchive\n  );\n\n\n  return {\n    ...state,\n    getResponseStatus: action.query,\n    mailMessageCenterPagination: {\n      items:\n        action.query.participantStatusName === \"Trash\"\n          ? filterTrashData\n          : action.query.participantStatusName === \"doubleTrash\"\n            ? doubleTrash\n            : action.query.participantStatusName === \"Archived\"\n              ? filterArchieve\n              : action.query.participantStatusName === \"Pending\"\n                ? filterPending\n                : action.query.participantStatusName === \"Junk\"\n                  ? filterJunk\n\n                  {/* ADDED */}\n                  :action.query.participantStatusName === \"GroupChatArchive\"\n                  ? filterChatArchive\n                  {/*----*/}\n\n\n                  : action.query.participantStatusName === \"Special1\"\n                    ? filterLowPriorityMail\n                    : filterNewData,\n      totalCount: state.mailMessageCenterPagination.totalCount,\n    },\n    mailMessageCenterPaginationLoading: false,\n  };\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#mailmessagecenterheaderjs","title":"MailMessageCenterHeader.js","text":"ToGroupChat Icon Added Email/Includes/MailMessageCenterHeader.js<pre><code>{\n    (selectedMailTypeAndMailData?.typeSystemName === FROM ||\n    selectedMailTypeAndMailData?.typeSystemName === INBOX) \n\n    // or \n    // selectedMailTypeAndMailData?.typeSystemName === FROM\n\n    &amp;&amp; (\n    &lt;&gt;\n        &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n            multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n            \"disabled\"\n            } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n            if (!isEmpty(selectedMailTypeAndMailData)) {\n                changeEmailStatus(\n                  { \n                    isGroupChatSwitch: true,\n                    isGroupChatSwitch_InstanceMessage: true,\n                    groupChatSwitch: GROUP_CHAT_SWITCH\n                  }\n                )\n            }\n        }}\n        &gt;\n        &lt;Image src={chatTransfer} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n            ToGroupChat\n        &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)}\n</code></pre>"},{"location":"office/documentation/groupchat-internal-message/#componentsconstants","title":"components/constants","text":""},{"location":"office/documentation/groupchat-module/","title":"GroupChat Module","text":""},{"location":"office/documentation/groupchat-module/#group-chat-module","title":"Group Chat Module","text":"Navbar.js <pre><code>// pageNumber: 693\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;Link\n    to=\"/groupchat\"\n    onClick={() =&gt; setState({ ...state, basepath: \"/groupchat\" })}\n    className={`icons__wrapper ${\n        state.basePath === \"groupchat\" ? \"active\" : \"\"\n    }`}\n    &gt;\n        &lt;img src={Calendar} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt;Group Chat&lt;/span&gt;\n    &lt;/Link&gt;\n)}\n</code></pre> Routes.js <pre><code>&lt;AuthRoute path=\"/groupchat\" exact&gt;\n    {!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox ? \n    &lt;GroupChat /&gt; : &lt;NotFound /&gt;\n    }\n&lt;/AuthRoute&gt;\n</code></pre>"},{"location":"office/documentation/import-excel-file/","title":"Import Excel File","text":""},{"location":"office/documentation/import-excel-file/#import-excel-file","title":"Import Excel File","text":"functionapiFile remanentCall.js<pre><code>// upload Contact attendence\nexport const uploadContactExcel = (resp) =&gt; {\nreturn Axios.post(appBaseUrl + '/importExcelFile');\n}\n</code></pre> <pre><code>\n</code></pre> UniversalFileUpload.js<pre><code>\n</code></pre>"},{"location":"office/documentation/instance-and-internal-message/","title":"Instance and Internal Message","text":"Instance <code>dashboard</code> and Internal Message Chat <pre><code>const {\n    instanceChatCenterPagination,\n    instanceChatCenterPaginationLoading,\n    replyInstanceMessageResp,\n    replyInstanceMessageRespLoading,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\nconst {\n    instanceChatAddResp,\n    instanceChatAddRespLoading\n} = useSelector((state) =&gt; state.instanceChatCenter);\n</code></pre>"},{"location":"office/documentation/internal-message/","title":"Internal Message","text":""},{"location":"office/documentation/internal-message/#internal-message","title":"Internal Message","text":"<p>Note</p> Companiesindex Companies.js<pre><code>// views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nimport { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> index.js<pre><code>// views/GlobalEmailChat/index.js\n\nconst ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/documentation/internal-message/#to-get-all-the-internal-chat-pagination","title":"To get all the Internal Chat Pagination","text":"<pre><code>// IMPORT \nimport { getInstanceChatCenterPagination } from \"services/redux/instanceChat/action\";\nimport { replyInstanceMessage } from \"services/redux/email/instanceMessageCenter/action\";\n\n// SELECTOR DASHBOARD\nconst { instanceChatCenterPagination, instanceChatCenterPaginationLoading } =\n    useSelector((state) =&gt; state.instanceChatCenter);\n\n// MAIL MESSAGE CENTER\nconst {\n  instanceMessageCenterPagination,\n  instanceMessageCenterPaginationLoading,\n  replyInstanceMessageResp,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\n// ACTION\nexport const getInstanceChatCenterPagination = (query) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    const response =\n      await instanceMessageChatServices.getInstanceChatCenterPagination(query);\n    dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\n\n// API\nexport class InstanceMessageChatServices {\n  instanceChatAdd(body) {\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatAdd`;\n    let data = postService(url, body, \"post\");\n    return data;\n  }\n\n  getInstanceChatCenterPagination(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatPagination?${query}`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/documentation/login/","title":"Login","text":"<p>Note</p> late attendanceleave typeindex lateAttendence.js<pre><code>...\nimport { useEffect, useState } from \"react\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\"\nimport { validateReason } from \"utils/validateReason\";\n\n\nconst { Modal, Form, Input, Spin, Alert, Select, message } = require(\"antd\");\nconst { Option } = Select;\n\nconst LateAttendence = ({id,data,leaveReasonPopUp,leaveStartdate,leaveEndDate})=&gt;{\n\n    ...\n    const [uploaders, setUploaders] = useState();\n    const [deafultLeaveType, setDefaultLeaveType] = useState([]);\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(remainingLeaveApplicationTypesListing)) {\n            const casualLeave = remainingLeaveApplicationTypesListing.find(obj =&gt; obj.leaveApplicationTypeDto.leaveTypeName === \"Casual\");\n            if(casualLeave?.leaveApplicationTypeDto?.id) {\n                form.setFieldsValue({\n                    leaveApplicationTypeId: casualLeave?.leaveApplicationTypeDto?.id,\n                })\n            }\n        }\n    }, [remainingLeaveApplicationTypesListing])\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n\n    ...\n\n    const startDate = moment(leaveStartdate);\n    const endDate = moment(leaveEndDate);\n    const durationInDays = endDate.diff(startDate, 'days');\n\n    const handleChange = (value, option) =&gt; {\n        const selectedTitle = option ? option.title : null;\n        const selectedValue = option ? option.value : null;\n\n        setDefaultLeaveType({\n            title: selectedTitle,\n            value: selectedValue\n        });\n    }\n\n\n    return (\n        &lt;div className=\"late_login_popup\"&gt;\n            &lt;Modal visible={true} footer={null} closable ={false} wrapClassName=\"late_login_popup_modal\"&gt;\n                {data &amp;&amp; \n                &lt;div className=\"time_format_login_popup\"&gt;\n                    Login Time:{moment(data).format(\"YYYY-MM-DD,HH:mm:ss A\")}\n                &lt;/div&gt;}\n                &lt;div className=\"late_attendence_popup_header\"&gt;\n                    &lt;h3&gt;Kindly elaborate your reason for being late {leaveReasonPopUp &amp;&amp; \"and also leave reason\"} !!!&lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;br/&gt;\n                &lt;Form form={form} onFinish={onFinish}&gt;\n                    &lt;div style={{fontWeight:\"600\"}}&gt;Late Reason :&lt;/div&gt;\n                    &lt;Form.Item \n                        rules={[\n                            // {\n                            //     required:true,\n                            //     message: \"Please justify the reason\",\n                            // },\n                            validateReason(10, 2)\n                        ]}\n                        name=\"attendanceLateReason\"\n                        // label=\"Late Reason\"\n                    &gt;\n                        &lt;TextArea rows={4} style={{fontSize:\"15px\"}}/&gt;\n                    &lt;/Form.Item&gt;\n                    {leaveReasonPopUp &amp;&amp; \n                    &lt;div&gt;\n                        &lt;div style={{fontWeight:\"600\",marginTop:\"10px\"}}&gt;You have taken leave from {moment(leaveStartdate).format(\"YYYY-MM-DD\")} to {moment(leaveEndDate).format(\"YYYY-MM-DD\")} &lt;/div&gt;\n                        &lt;div &gt;Leave Reason :&lt;/div&gt;\n                        &lt;Form.Item rules={[\n                                // {\n                                //     required:true,\n                                //     message: \"Please justify the reason\",\n                                // },\n                                validateReason(10, 2)\n                            ]}\n                            name=\"attendanceLeaveReason\"\n                        // label=\"Leave Reason\"\n                        // className=\"late_reason_submit\"\n                        &gt;\n                            &lt;TextArea rows={4} style={{fontSize:\"15px\"}} /&gt;\n                        &lt;/Form.Item&gt;\n                        &lt;Form.Item\n                            className=\"form__group\"\n                            label=\"Choose Leave Type\"\n                            name=\"leaveApplicationTypeId\"\n                            rules={[\n                                {\n                                required: true,\n                                },\n                            ]}\n                            style={{\n                                paddingTop: \"10px\"\n                            }}\n                        &gt;\n                            &lt;Select\n                                placeholder=\"Please select\"\n                                autoComplete=\"off\"\n                                onChange={(value, option) =&gt; handleChange(value, option)}\n                            &gt;\n                                {\n                                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                                        &lt;Option\n                                            value={leaveType.leaveApplicationTypeId}\n                                            title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                            key={i}&gt;\n                                            {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                        &lt;/Option&gt;\n                                    ))}\n\n                            &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        {durationInDays &gt;= 3 &amp;&amp; deafultLeaveType?.title === \"Medical\"  ? (\n                            &lt;&gt;\n                            {uploaders?.map((u, i) =&gt; (\n                                &lt;Form.Item \n                                    className=\"form__group\" \n                                    name={[\"uploadedFileDtos\"]}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \"Please upload at least one file\",\n                                        },\n                                    ]} &gt;\n                                    &lt;ImageUploaderMultiple\n                                        name={u.name}\n                                        isMultipleFileAllowed={true}\n                                        id={u.id}\n                                        allowedExtensions={u.allowedExtensions}\n                                        index={i}\n                                        uploadedFileDtos={form.getFieldValue()}\n                                        formName=\"uploadedFileDtos\"\n                                        form={form}\n                                        callback={(e) =&gt; {\n                                            let olduploadedFileDtos = form.getFieldValue()\n                                                .uploadedFileDtos\n                                                ? [...form.getFieldValue().uploadedFileDtos]\n                                                : [];\n\n                                            let uploadedFileDtos = [...olduploadedFileDtos];\n                                            uploadedFileDtos.push(e);\n\n                                            form.setFieldsValue({\n                                                uploadedFileDtos,\n                                            });\n                                        }}\n                                    /&gt;\n                                &lt;/Form.Item&gt;\n                            ))} \n                            &lt;/&gt;\n                        ) : null}\n\n\n                    &lt;/div&gt;\n                    }\n                    &lt;Alert\n                        message=\"Informational Notes\"\n                        description=\"Give Valid Reason with 10 minimum character &amp; 2 words\"\n                        type=\"info\"\n                        showIcon\n                        style={{marginTop: '20px'}}\n                    /&gt;\n                &lt;div className=\"button_submit\"&gt;\n                    &lt;button className=\"late_Reason_Attendence_Submit\" htmlType=\"submit\"&gt;\n                    {attendenceAddNewResponseLoading ? &lt;Spin className=\"late_reason_spinner\"/&gt;: \"Submit\"}\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> leaveForm.js<pre><code>&lt;Form.Item\n    className=\"form__group\"\n    label=\"Choose Leave Type\"\n    name=\"leaveApplicationTypeId\"\n    rules={[\n        {\n            required: true,\n\n        },\n        ]}\n&gt;\n    &lt;Select\n        placeholder=\"Please select\"\n        autoComplete=\"off\"\n    &gt;\n        {\n            !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n            remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                &lt;Option\n                    value={leaveType.leaveApplicationTypeId}\n                    title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                    key={i}&gt;\n                    {leaveType?.leaveApplicationTypeDto?.leaveTypeName} {`(${leaveType?.remainingLeave &gt; 0 ? leaveType?.remainingLeave : 0} remaining out of ${leaveType?.allowedleave} days)`}\n                &lt;/Option&gt;\n            ))}\n\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>import { getRemainingLeaveApplicationTypesForEmployee } from \"../../../services/redux/requistions/leaveApplication/action\";\n\nconst {\n    leaveApplicationPagination,\n    leaveApplicationPaginationLoading,\n    remainingLeaveApplicationTypesListing,\n    remainingLeaveApplicationTypesListingLoading,\n    addLeaveApplicationResp,\n} = useSelector((state) =&gt; state.leaveApplication);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(addLeaveApplicationResp))\n    dispatch(getRemainingLeaveApplicationTypesForEmployee());\n}, [addLeaveApplicationResp]);\n</code></pre>"},{"location":"office/documentation/login/#mail-leave-details","title":"Mail <code>leave Details</code>","text":"<p>Note</p> LeaveDetails.js<pre><code>import {\n    ...,\n    Select\n} from \"antd\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\";\n\nconst { Option } = Select;\n\nconst LeaveDetails = ({ leaveAppId }) =&gt; {\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(details)) {\n        form.setFieldsValue({\n            leaveApplicationTypeIdxx: details?.leaveApplicationTypeId,\n        })\n\n        console.log(\"details: \", details)\n        }\n    }, [details])\n\n     return !isEmpty(details) ? (\n        &lt;div className=\"mail-leave-details\"&gt;\n            ...\n\n            &lt;Form.Item\n                className=\"form__group\"\n                label=\"Choose Leave Type\"\n                name=\"leaveApplicationTypeIdxx\"\n                // rules={[\n                //     {\n                //     required: true,\n                //     },\n                // ]}\n                style={{\n                    paddingTop: \"10px\"\n                }}\n            &gt;\n                &lt;Select\n                    placeholder=\"Please select\"\n                    autoComplete=\"off\"\n                &gt;\n                    {\n                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                        &lt;Option\n                        value={leaveType.leaveApplicationTypeId}\n                        title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        key={i}&gt;\n                        {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        &lt;/Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            ...\n        &lt;/div&gt;\n     )\n\n}\n\nexport default LeaveDetails;\n</code></pre> leaveForm.js<pre><code>import { message } from \"antd\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\n\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nconst LeaveForm = ({\n    remainingLeaveApplicationTypesListing,\n    setHideLeaveDrawer,\n}) =&gt; {\n\n    const [uploaders, setUploaders] = useState();\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {uploaders?.map((u, i) =&gt; (\n                &lt;Form.Item className=\"form__group\" name={[\"uploadedFileDtos\"]} &gt;\n                    &lt;ImageUploaderMultiple\n                        name={u.name}\n                        isMultipleFileAllowed={true}\n                        id={u.id}\n                        allowedExtensions={u.allowedExtensions}\n                        index={i}\n                        uploadedFileDtos={form.getFieldValue()}\n                        formName=\"uploadedFileDtos\"\n                        form={form}\n                        callback={(e) =&gt; {\n                            let olduploadedFileDtos = form.getFieldValue()\n                                .uploadedFileDtos\n                                ? [...form.getFieldValue().uploadedFileDtos]\n                                : [];\n\n                            let uploadedFileDtos = [...olduploadedFileDtos];\n                            uploadedFileDtos.push(e);\n\n                            form.setFieldsValue({\n                                uploadedFileDtos,\n                            });\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n            ))} \n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/login/#utils","title":"utils","text":"<p>Tip</p> validate Reason <pre><code>export const validateReason = (minChars, minWords) =&gt; ({\n    validator: (_, value) =&gt; {\n    const words = value.trim().split(/\\s+/);\n    const characterCount = value.trim().length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n        return Promise.reject(\n        new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n        );\n    }\n    return Promise.resolve();\n    },\n});\n</code></pre>"},{"location":"office/documentation/mail/","title":"Mail","text":"<p>While searching the reference in the <code>compose mail</code>, it doesn't show all the reference items?</p> <p>ComposeEmailDrawer</p> ComposeEmailDrawer.js<pre><code>onSearch={(value) =&gt; {\n    setSearchValueReference(value);\n    setReferencevalue(value);\n    setFilterParticipantType(\"REF\");\n    handleFilter(value, \"REF\");\n}}\n&lt;Form \n    name = \"participantTos\"/&gt;\nconst displayMessages = (status) = {}\n\n// page number: 3710\nreturn (\n    &lt;Option\n        key={index}\n        // key={data.id}\n        value={data.title}\n        // className={index}\n        // id={index}\n        label={[data.code, data.title]}\n    &gt;\n        &lt;div\n        className=\"compose-reference-wrapper\"\n        // key={index}\n        key={data.id}\n        &gt;\n        &lt;div\n            className=\"compose-references-code\"\n            title={data?.code}\n        &gt;\n            &lt;span&gt;{data?.code}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-title\"\n            title={data?.title}\n        &gt;\n            &lt;span&gt; {data?.title}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-description\"\n            title={data?.description}\n        &gt;\n            &lt;span&gt;{data?.description}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Option&gt;\n);\n</code></pre> <p>Solved</p> Solved BasicSolved Advanced ComposeEmailDrawer.js<pre><code>// const isSelected = mailRefDtos.includes(data.code);\n// also add this \nconst isSelected = mailRefDtos.includes(`${data.code}-${data.title}`);\n&lt;Option\n    key={index}\n    //value={data.title}\n    // add this\n    value={`${data.code}-${data.title}`}\n    label={[data.code, data.title]}\n&gt;\n&lt;/Option&gt;\n</code></pre> ComposeEmailDrawer.js<pre><code>&lt;div className=\"email-text\"&gt;Reference&lt;/div&gt;\n&lt;Form.Item\n    className=\"form__group compose-ref-select\"\n    name=\"mailMessageReferenceDtos\"\n    rules={[\n        {\n            required: closeWindow === \"newDraft\" ? false : true,\n            message: \"\",\n        },\n    ]}\n&gt;\n    &lt;Select\n        onSelect={(value) =&gt; {\n            {/* OLD CODE */}\n            const uniqueArray = Array.from(\n                new Set([...mailRefDtos, value])\n            );\n\n            {/* NEW CODE */}\n            const uniqueArray = Array.from(\n                new Set([\n                    // Extract substring before underscore\n                    ...mailRefDtos.map(dto =&gt; dto.split('_')[0]),\n\n                    // Extract substring before underscore from the new value\n                    value.split('_')[0]\n                ])\n            );\n        })}\n    /&gt;\n&lt;/Form.Item&gt;\n\n\n{/* ADDED THIS CODE */}\nconst isSelected = mailRefDtos.includes(data?.code);\n\nreturn (\n    &lt;Option\n        key={index}\n        {/* ADDED UNDERSCORE */}\n        value={`${data.code}_${data.title}`}\n        label={[data.code, data.title]}\n    &gt;\n)\n</code></pre>"},{"location":"office/documentation/mail/#dashboard-events","title":"Dashboard Events","text":"PublicEvents Home/Events/PublicEvents.js<pre><code>// added Dropdown, Menu\nimport { Form, Image, Modal, Skeleton, Tooltip, Dropdown, Menu } from \"antd\";\n\nconst PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n\n    // added\n    const [openEventModal, setOpenEventModal] = useState(false);\n\n    const menu = (\n        &lt;Menu&gt;\n        &lt;Menu.Item\n            onClick={() =&gt; {\n                setOpenEventModal(true);\n            }}\n        &gt;\n            Holiday\n        &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                &lt;h4 className=\"dashboards__body--title\"&gt;Events&lt;/h4&gt;\n                &lt;div className=\"\"&gt;\n                    &lt;WechatOutlined\n                        onClick={() =&gt; {\n                            setInternalVisible(true);\n                        }}\n                    /&gt;\n\n                    {/* added */}\n                    &lt;Dropdown.Button\n                        overlay={menu}\n                        className=\"new_menu\"\n                        style={{\n                            marginBottom: \"5px\",\n                            width: \"20px\",\n                            border: \"none\",\n                            marginLeft: \"2px\",\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/documentation/mail/#dashboard-flip-card","title":"Dashboard Flip Card","text":"flip-card tender.js<pre><code>import ProjectsLists from \"./DashboardComponents/ProjectsLists\";\n\nconst TenderLists = ({ classNames }) =&gt; {\n    const [rotate, setRotate] = useState(0);\n\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n\n                {/* FRONT */}\n                &lt;div className=\"flip-card-front\"&gt;\n                    &lt;div\n                        className={\"dashboards__tenderlist dashboards__body \" + classNames}\n                        style={{ height: \"495px\" }}\n                    &gt;\n                        &lt;div className=\"dashboards__bodyWrap\"&gt;\n                        &lt;h4 className=\"dashboards__body--title\"&gt;\n                            Tenders/Projects\n                            &lt;span\n                                onClick={() =&gt; {\n                                    setRotate(rotate + 1);\n                                }}\n                                style={{\n                                    marginLeft: \"10px\",\n                                    height: \"30px\",\n                                    marginBottom: \"10px\",\n                                }}\n                            &gt;\n                                &lt;img\n                                    src=\"./assets/svg/toggle-arrow.svg\"\n                                    height={15}\n                                    alt=\"complete\"\n                                /&gt;\n                            &lt;/span&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* BACK */}\n                &lt;div className=\"flip-card-back\"&gt;\n                    &lt;div\n                        style={{\n                        backfaceVisibility: \"hidden\",\n                        }}\n                    &gt;\n                        &lt;div\n                            className={\n                                \"dashboards__tenderlist dashboards__body \" + classNames\n                            }\n                            &gt;\n                            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                                &lt;h4 className=\"dashboards__body--title\"&gt;\n                                Projects/Tenders\n                                &lt;span\n                                    onClick={() =&gt; {\n                                        setRotate(rotate + 1);\n                                    }}\n                                    style={{\n                                        marginLeft: \"10px\",\n                                        height: \"30px\",\n                                        marginBottom: \"10px\",\n                                    }}\n                                &gt;\n                                    &lt;img\n                                        src=\"./assets/svg/toggle-arrow.svg\"\n                                        height={15}\n                                        alt=\"complete\"\n                                    /&gt;\n                                &lt;/span&gt;\n                                &lt;/h4&gt;\n                            &lt;/div&gt;\n\n                            {/* Components */}\n                            &lt;ProjectsLists /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/mail/#email-issue","title":"Email Issue","text":"<p>while <code>reply all</code>, <code>reply</code>, <code>forward</code> the application crashed</p> <ul> <li><code>/email-compose?applicationType=newEmail</code> - working</li> <li><code>/email-compose?applicationType=reply</code> - not working</li> <li><code>/email-compose?applicationType=replyall</code> - not working</li> <li><code>/email-compose?applicationType=forward</code> - not working</li> </ul> <p>Danger</p> displayMessagescontactQuickAddEmailRespsonsecurrentSelectedMessage useEffectComposeEmailDrawer <pre><code>useEffect(() =&gt; {\n    {/* DEBUG THIS WHEN NEW CONTACT ADDED THIS BECOMES EMPTY */}\n    console.log(\"participantTypeTos: \", participantTypeTos)\n\n    if (applicationTypeStatus) {\n        if (applicationTypeStatus === \"reply\") {\n\n            // IMPORTANT\n            displayMessages(applicationTypeStatus);\n\n            form.setFieldsValue({\n                participantCCs: [],\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n            });\n        } else if (applicationTypeStatus === \"replyall\") {\n            form.setFieldsValue({\n                participantCCs: newCCs?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                uploadedFileDtos: [],\n            });\n        }\n\n        // others ...\n    }\n})\n</code></pre> ComposeEmailDrawer.js<pre><code>const displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom = currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n    let participantTypeTos =\n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        });\n    let participantTypeCCs = !isEmpty(\n        currentSelectedMailMessage?.applicationTypeDetails?.cCs\n        )\n        ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map(\n            (typeTos) =&gt; {\n                return { emailAddress: typeTos.emailAddress };\n            }\n        )\n    : [];\n\n    const participantTos = getParticipantsInfo(participantTypeTos);\n    const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n\n    if (status !== \"reSend\") {\n\n        if (status === \"composeDraft\") {\n            form.setFieldsValue({\n                participantFrom: messageParticipantsFrom[0],\n            });\n            setEditorData(currentSelectedMailMessage.body);\n        } else {\n            let data = `From:${\n                participantTypeFrom?.emailAddress\n            }  &lt;br&gt; To:${participantTos} ${\n                partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n            } &lt;br&gt;  Date:${\n                currentSelectedMailMessage?.creationTime &amp;&amp;\n                moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n                },${moment(currentSelectedMailMessage?.creationTime).format(\n                \"LT\"\n            )} &lt;br&gt; ${currentSelectedMailMessage.body} &lt;br&gt;`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n        if (status === \"emailForwardSend\") {\n            let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")},${moment(\n            currentSelectedMailMessage?.creationTime,\"HH:mm:ss\"\n            ).format(\"LT\")} ${\n            (currentSelectedMailMessage?.companyName\n                ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                    .companyName\n                : \"\",\n            currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                .emailAddress)\n            }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n    } else if (status === \"reSend\") {\n        let data = `${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    } else {\n        let data = `Date:${\n            currentSelectedMailMessage?.creationTime &amp;&amp;\n            moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n        } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n};\n</code></pre> <pre><code>  const { contactQuickAddEmailRespsonse } = useSelector((state) =&gt; state.contactCompanyPerson);\n\n  useEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n        if (filterParticipantType == \"To\") {\n            form.setFieldsValue({\n            participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n                ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n                : [emailAddressResp],\n            });\n        } else if (filterParticipantType == \"CC\") {\n            form.setFieldsValue({\n            participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n                ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n                : [emailAddressResp],\n            });\n        }\n    }\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> <pre><code>useEffect(() =&gt; {\n    // ...\n    if (!isEmpty(currentSelectedMailMessage)) {}\n}, [\n    applicationTypeStatus,\n    currentSelectedMailMessage,\n    messageParticipantsFrom,\n]);\n</code></pre> <ul> <li>file-saver <code>npm</code></li> </ul>"},{"location":"office/documentation/mail/#bug-pin-pointed","title":"Bug pin-pointed","text":"<p>Bug</p> ComposeEmailDrawer.js<pre><code>{/* page number: 1222 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        // displayMessages(applicationTypeStatus);\\\n        console.log(\"participantTypeTos: \", participantTypeTos)\n        form.setFieldsValue({\n            participantCCs: [],\n            // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n            //   return typeTos;\n            // }),\n        });\n    }\n}\n</code></pre> <p>Success</p> Solved Tos <code>Reply</code>git file changes ComposeEmailDrawer.js<pre><code>const[contactTos, setContactTos] = useState([])\n\n\n{/* pagenumber: 572 */}\nconst displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* ADDDED !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos)\n    ?\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n    })\n    : [];\n}\n\n---\n\n{/* pagenumber: 1225 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        displayMessages(applicationTypeStatus);\n        form.setFieldsValue({\n        participantCCs: [],\n\n        {/* ADD !isEmpty */}\n        participantTos: !isEmpty(participantTypeTos) ?\n            participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        })\n        //: [],\n        : contactTos\n        })\n    }\n}\n\n{/* page num: 1469  */}\nuseEffect(() =&gt; {\n    if (activeEmailSignatureDetailsResponse) {\n\n    let signatureData = activeEmailSignatureDetailsResponse?.body\n        ? `&lt;div id=\"signatureData\" ref={${ref}}&gt;&lt;br/&gt;${activeEmailSignatureDetailsResponse?.body}&lt;/div&gt;`\n        : \"\";\n    const sign = localStorage.getItem(\"signatureData\");\n\n    let participantTypeFrom = \n        currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* aded !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos) ? \n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map(\n        (typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        }\n        ) : [];\n    }\n})\n\n{/* pagenumber: 1409 */}\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n    let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n    setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n\n        {/* ADDED */}\n        const uniqueMail = new Set([...form.getFieldsValue()?.participantTos, emailAddressResp])\n        setContactTos([...uniqueMail])\n\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n}, [contactQuickAddEmailRespsonse]);\n\n\n{/* pagenumber: 1649 */}\nconst autoDraft = (e, participant) =&gt; {\n    {/* UPDATE THIS */}\n    let newParticipantArrTo = form.getFieldsValue().participantTos \n    ? [...form.getFieldsValue().participantTos]\n    : [];\n}\n</code></pre> <pre><code>git diff --stat\nsrc/views/Email/Includes/ComposeEmailDrawer.js | 42 ++++++++++++++++++++++++++++++------------\n1 file changed, 30 insertions(+), 12 deletions(-)\n</code></pre> <p>Abstract</p> <pre><code>const [currentSelectedMailMessage, setCurrentSelectedMailMessage] = useState({});\n\n{/* ADD THIS STATE */}\nconst [currentSelectedMailTos, setCurrentSelectedMailTos] = useState([]);\n\n\nconsole.log(\"currentSelectedMailTos: \", currentSelectedMailTos)\n</code></pre>"},{"location":"office/documentation/mail/#api","title":"API","text":"<p>api</p> <pre><code>HOLIDAY  EXCEL in admin\nhttps://localhost:44386/api/app/adminModule/downloadSampleHolidayUploadExcel\nhttps://localhost:44386/api/app/adminModule/importHoliday\n\nHOLIDAY YEAR GET LISTING\nhttps://localhost:44386/api/app/organizerEvent/holidayEventsPagination?SearchByNepaliYear=2080&amp;MaxResultCount=50&amp;SkipCount=0\n</code></pre>"},{"location":"office/documentation/public-events/","title":"Dashboard Events","text":"<p>Example</p> <p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/documentation/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/documentation/redux-action-advanced/#api","title":"API","text":"<p>Example</p> <p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#action","title":"ACTION","text":"<p>Example</p> <p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#reducer","title":"REDUCER","text":"<p>Example</p> <p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-project-circular/","title":"Project Circular","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-tender-circular/","title":"Tender Circular","text":"<p>Tender</p> <p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/documentation/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre>"},{"location":"office/documentation/sending-mail/","title":"Sending Mail","text":"<p>Example</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/documentation/sisco-view/","title":"Hr Module","text":"<p>HR Module</p> SicoViewindexAddUpdateSisterCompanyDrawer <p>To view the data in the <code>Basic</code>.</p> SiscoView.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/SiscoView.js\n\nconst SiscoView = ({\n    isUpdateSiscoCredentials,\n    showAddUpdateSisterCompanyDrawer,\n}) =&gt; {\n    return (\n        &lt;div className=\"profile__info profile__wrap--sister\"&gt;\n            &lt;div className=\"profile__info--wrapper\"&gt;\n                &lt;div className=\"profile__info--body\"&gt;\n                    &lt;div className=\"contactsDetails__info mb-3 sisco-header-wapper\"&gt;\n                        &lt;span className=\"contactsDetails--title bold w-100\"&gt;Basic&lt;/span&gt;\n                        &lt;div className=\"sisco-action-button\"&gt;\n                            &lt;div\n                                onClick={() =&gt; {\n                                showAddUpdateSisterCompanyDrawer(isUpdateSiscoCredentials);\n                                }}\n                            &gt;\n                                &lt;img src={editIcon} /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    {/* *********** IMPORTANT **************** */}\n\n                    {!isUpdateSiscoCredentials?.creationTime ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row sister\"&gt;\n                            &lt;div className=\"profile__row--label sister--label\"&gt;\n                                &lt;span className=\"profile__bodyTitle\"&gt;Creation Time&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div className=\"profile__row--data sister--data\"&gt;\n                                &lt;span className=\"profile__bodyInfo\"&gt;\n                                {moment(isUpdateSiscoCredentials?.creationTime).format(\n                                    \"YYYY/MM/DD\"\n                                )}\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                    {/* Added */}\n                    {!isUpdateSiscoCredentials?.address ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.address}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.website ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.website}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.linkedin ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.linkedin}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationNumber ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationNumber}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationDate ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationDate}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> index.js<pre><code>// views/Admin/index.js\n\nfunction Admin() {\n    const [isUpdateSiscoCredentials, setIsUpdateSiscoCredentials] = useState();\n\n    useEffect(() =&gt; {\n        if (addUpdatesisterCompanyResponse) {\n            console.log(\"addUpdatesisterCompanyResponse: \",addUpdatesisterCompanyResponse)\n            setIsUpdateSiscoCredentials(addUpdatesisterCompanyResponse);\n        }\n    }, [addUpdatesisterCompanyResponse]);\n\n    const rowEventhandlersSisco = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                setIsUpdateSiscoCredentials(record);\n                setSiscoCompanyId(record.id);\n                setHidden(false);\n                setEmployeeId();\n                setEmployeeUserId();\n                setDepartment({ id: \"\", type: \"\" });\n                setSiscoId(record.id);\n            },\n        };\n    };\n\n\n    const showAddUpdateSisterCompanyDrawer = (record) =&gt; {\n        form.resetFields();\n        if (record) {\n            setIsUpdateSisterCompany(record);\n        }\n        setAddUpdateSisterCompanyDrawerVisibility(true);\n    };\n\n    return (\n        &lt;div className=\"sidebars\"&gt;\n            {/* ... */}\n            &lt;div className=\"profiledetails\"&gt;\n                &lt;Collapse\n                    expandIconPosition=\"right\"\n                    accordion={true}\n                    defaultActiveKey={[\"1\"]}\n                &gt;\n                    &lt;Panel key=\"1\" header=\"Sisco User list\"&gt;\n                        &lt;div&gt;\n                            &lt;div style={{ height: \"43%\" }}&gt;\n                                &lt;SiscoUserList\n                                    setSiscoClassName={setSiscoClassName}\n                                    grantedPolices={grantedPolices}\n                                    rowEventhandlersSisco={rowEventhandlersSisco}\n                                    inputSearchValue={inputSearchValue}\n                                    sisterCompanyPagination={sisterCompanyPagination}\n                                    sisterCompanyPaginationLoading={\n                                    sisterCompanyPaginationLoading\n                                    }\n                                /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Panel&gt;\n                &lt;/Collapse&gt;\n            &lt;/div&gt;\n            {/* ... */}\n        &lt;/div&gt;\n    )\n}\n\nexport default Admin;\n</code></pre> AddUpdateSisterCompanyDrawer.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/AddUpdateSisterCompanyDrawer.js\n\nconst AddUpdateSisterCompanyDrawer = ({\n    onAddUpdateSisterCompanyClose,\n    drawerVisibility,\n    isUpdateSisterCompany,\n    sisterCompanyListing,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            visible={drawerVisibility}\n            width={472}\n            maskClosable={false}\n            className=\"drawer main-drawer-wrapper\"\n            onClose={onAddUpdateSisterCompanyClose}\n            closable={false}\n        &gt;\n            &lt;Header className=\"drawer__header\"&gt;\n                &lt;h4 className=\"drawer__header--title\"&gt;\n                {`${isUpdateSisterCompany ? \"Update\" : \"Create\"} Sister Company`}\n                &lt;/h4&gt;\n            &lt;/Header&gt;\n            &lt;div className=\"drawer__content\"&gt;\n                &lt;div className=\"drawer__content--wrapper\"&gt;\n                    &lt;div className=\"contact__content__wrapper\"&gt;\n                        &lt;Form\n                            layout=\"vertical\"\n                            form={form}\n                            name=\"control-hooks\"\n                            validateMessages={validateMessages}\n                            className=\"drawer-form-wrapper\"\n                        &gt;\n                        &lt;div className=\"drawer-form-row\"&gt;\n                            &lt;div className=\"drawer-form-group\"&gt;\n                                &lt;Form.Item\n                                    name=\"name\"\n                                    className=\"form__group\"\n                                    label=\"Sister Company Name\"\n                                    rules={[{ required: true }]}\n                                &gt;\n                                    &lt;Input autoComplete=\"off\" /&gt;\n                                &lt;/Form.Item&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/Drawer&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/documentation/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":"<p>Example</p> apiactionreducer <p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre> <p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"office/primesales/intro/","title":"Intro","text":""},{"location":"office/primesales/intro/#intro","title":"Intro","text":""},{"location":"office/primesales/intro/#setup","title":"Setup","text":"<p>Success</p> <pre><code># Installing PHP\nsudo apt install php-cli\n\nsudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-xmlrpc php8.2-zip\n\n\n# Installing Composer\nsudo apt install composer\n\n#\ncomposer global require laravel/installer\n</code></pre> <p>To Check PHP Version in Ubutnu</p> <pre><code>#1. Command Line Interface (CLI):\nphp --version\n\n# using the dpkg command:\ndpkg -l | grep php\n\n#2. Using Laravel Artisan Command:\nphp artisan --version\n</code></pre> <p>If you prefer not to use the command line interface, you can check the PHP version being used in your Laravel project by examining the <code>composer.json</code> file. Laravel specifies the PHP version requirement in this file.</p> <ol> <li>Navigate to the root directory of your Laravel project.</li> <li>Open the <code>composer.json</code> file in a text editor.</li> <li>Look for the <code>require</code> section. Within this section, you should find an entry for \"php\" along with a version constraint. For example:</li> </ol> composer.json<pre><code>\"require\": {\n    \"php\": \"^7.3\",\n    // other dependencies...\n}\n</code></pre> <p>In this example, Laravel requires PHP version <code>7.3</code> or higher.</p> PHP Version <code>major</code> &amp; <code>minor</code> <p>In PHP, the versioning convention is similar to many other programming languages and software systems. PHP version numbers typically consist of three numbers separated by periods, following a pattern similar to Semantic Versioning (SemVer).</p> <p>Major version:</p> <p>The first number represents the major version. When the major version number changes, it signifies significant updates that may not be backward compatible with previous versions. Major updates often introduce new features, architectural changes, or major enhancements.</p> <p>Minor version:</p> <p>The second number represents the minor version. A change in the minor version number usually indicates smaller updates or improvements compared to major updates. Minor updates may include new features or improvements while maintaining backward compatibility within the same major version.</p> <p>Patch version:</p> <p>The third number represents the patch version. Changes in the patch version number typically denote bug fixes, security patches, or minor updates that do not introduce new features and maintain backward compatibility within the same major and minor version. For example:</p> <ul> <li>In PHP version <code>7.2.0</code>, <code>7</code> is the major version, 2 is the minor version, and 0 is the patch version.</li> <li>In PHP version <code>8.0.1</code>, <code>8</code> is the major version, 0 is the minor version, and 1 is the patch version.</li> </ul> <p>When specifying version constraints in PHP projects using tools like Composer, version ranges and constraints are often defined in the composer.json file. The caret (^) symbol is commonly used to specify a range of compatible versions within the same major version, similar to other package management systems. For example, \"<code>^7.2</code>\" would include all versions from PHP <code>7.2</code> up to, but not including, PHP <code>8.0</code>.</p> <p>--</p>"},{"location":"office/primesales/intro/#url","title":"URL","text":"<p>webcrm</p> <p>username: sampurna password: primesales360##</p>"},{"location":"office/primesales/intro/#reference","title":"Reference","text":"<p>PHP Version History</p> <ul> <li>Brief Timeline of PHP Versions</li> <li>PHP Versions</li> <li>Zend PHP Versions</li> <li>educba PHP Versions</li> </ul> <p>Installation</p> <ul> <li>How to install and configure PHP</li> </ul> <p>Composer</p> <ul> <li>composer official</li> </ul> <p>Online</p> <ul> <li>Laravel Key Generator</li> </ul>"},{"location":"research/docker/","title":"Docker","text":""},{"location":"research/docker/#installation","title":"Installation","text":"<p>The core of Docker is made of the Docker engine, a single-host software daemon that allows you to create and manage containers. Before diving into using Docker, you need to install the Docker engine on a host, either your desktop, laptop, or a server.</p> <p>A <code>Dockerfile</code> is a manifest that describes how to build a container image. This is a core concept in Docker.</p> Abstract DockerfileTheoryPractical <pre><code># Use an existing image as a base\nFROM alpine:latest\n\n# Run a command in the container\nCMD [\"echo\", \"Hello, Jenkins!\"]\n</code></pre> <p><code>Docker</code>, <code>Docker Compose</code>, and <code>Docker Swarm</code> are all related tools in the Docker ecosystem, but they serve different purposes:</p> <ol> <li> <p>Docker:</p> <p>Docker is a platform and tool for building, distributing, and running <code>containers</code>. Containers allow developers to package an application with all of its dependencies into a standardized unit for software development. Docker provides the tools needed to create and manage these containers efficiently. With Docker, you can build container images, run containers from those images, and manage container lifecycles.</p> </li> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for defining and running <code>multi-container</code> Docker applications. It allows you to use a YAML file to configure the services that make up your application, including their dependencies, networking, and volumes. Docker Compose then takes care of starting, stopping, and managing all of these containers as a single application stack. It simplifies the process of managing complex applications composed of multiple interconnected containers.</p> </li> <li> <p>Docker Swarm:</p> <p>Docker Swarm is Docker's native clustering and <code>orchestration tool</code>. It allows you to create and manage a cluster of Docker nodes, turning them into a single virtual Docker engine. Docker Swarm enables you to deploy and manage multi-container applications across multiple hosts, providing features such as service scaling, rolling updates, and high availability. It simplifies the management of containerized applications at scale and provides built-in features for load balancing and service discovery.</p> </li> </ol> <p>In summary:</p> <ul> <li><code>Docker</code>: The core platform for building, distributing, and running containers.</li> <li><code>Docker Compose</code>: A tool for defining and managing multi-container applications using a YAML configuration file.</li> <li><code>Docker Swarm</code>: Docker's native clustering and orchestration tool for managing multi-container applications across multiple hosts.</li> </ul> <pre><code>$ sudo apt-get install &lt;docker.deb&gt;\n</code></pre> <p>Commands</p> bash<pre><code># List containers:\n$ docker containers ls\n\n# List only running container: (ps-process status)\n$ docker ps -a\n\n# List images:\n$ docker images\n</code></pre> <p>Restart Docker</p> bash<pre><code># To restart a Docker container based on an image\n\n# 1.Identify the Container:\n$ docker ps\n\n# 2. Restart the Container:\n$ docker restart &lt;container_id_or_name&gt;\n\n# 3. Verify Restart:\n$ docker ps\n</code></pre>"},{"location":"research/docker/#clarifying-docker-terms","title":"Clarifying Docker terms","text":"Abstract <p>Docker Registry</p> <p>A Docker Registry is a place where Docker images can be stored in order to be publicly or privately found, accessed, and used by software developers worldwide for quickly crafting fresh and composite applications without any risks. Because all the stored images will have gone through multiple validations, verifications, and refinements, the quality of those images is really high. You can dispatch your Docker image to the registry so that it is registered and deposited using the <code>docker push</code> subcommand. You can download Docker images from the registry using the <code>docker pull</code> subcommand.</p> <p>Docker Registry could be hosted by a third party as a public or private registry, like one of the following registries:</p> <ul> <li>Docker Hub</li> <li>Quay</li> <li>Google Container Registry</li> <li>AWS Container Registry</li> </ul> <p>Every institution, innovator, and individual can have their own Docker Registry to stock up their images for internal and/or external access and usage.</p> <ul> <li>Learning Docker Second Edition by Jeeva S. Chelladhurai, pg:31</li> </ul>"},{"location":"research/docker/#nginx-engine-x-web-server","title":"nginx (Engine X) <code>web server</code>","text":"Abstract TheoryPractical bash<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p><code>/etc/nginx/nginx.conf</code></p> <p>The server_name directive in Nginx should specify only the domain name or names without the protocol (e.g., <code>http://</code>). Therefore, you need to modify your configuration like this:</p> nginx<pre><code>http {\n    server {\n        listen 9000;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n        # Jenkins running on port 9000\n        proxy_pass http://10.114.0.175:9000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 8080;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> <p>After making this change, you should test the configuration to ensure there are no syntax errors:</p> bash<pre><code>sudo nginx -t\n</code></pre> <p>If the test is successful, reload Nginx to apply the changes:</p> bash<pre><code>sudo systemctl reload nginx\n</code></pre> <p>This should resolve the issue, and Nginx should be able to start without errors.</p> Using Paths to Differentiate Services <p>If Hostnames Are Not Available</p> <p>If you cannot use different hostnames, you will need to use different ports or subpaths as described in previous responses.</p> <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location /jenkins/ {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/jenkins(.*) $1 break;\n        }\n\n        location /portainer/ {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/portainer(.*) $1 break;\n        }\n    }\n}\n</code></pre> <p>Explanation</p> <ul> <li>Single Server Block: Only one server block is needed, listening on port 80.</li> <li>Path-Based Routing: Requests to /jenkins are routed to Jenkins running on port 9000, and requests to /portainer are routed to Portainer running on port 8080.</li> <li>Rewrite Directive: The rewrite directive ensures that the backend service receives the correct path.</li> </ul> <p>Access URLs</p> <ul> <li>Jenkins: <code>http://&lt;your-server-ip&gt;/jenkins</code></li> <li>Portainer: <code>http://&lt;your-server-ip&gt;/portainer</code></li> </ul> same port <p>To serve both Jenkins and Portainer on the same port (port 80) without using subpaths like /jenkins and /portainer, you need to use different hostnames. Each service will be accessible via a different domain or subdomain. This approach requires DNS configuration to resolve different hostnames to your server's IP address.</p> <pre><code>http {\n    server {\n        listen 80;\n        server_name jenkins.example.com;\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name portainer.example.com;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> Different Port <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 81;\n        # No server_name specified\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"research/docker/#docker-images","title":"Docker Images","text":"Abstract TheoryPracticalDangling images bash<pre><code># List Docker images\n$ docker images\n\n# Remove Docker image by ID\n$ docker rmi &lt;image_id&gt;\n\n# Remove Docker image by repository and tag\n$ docker rmi &lt;repository_name&gt;:&lt;tag&gt;\n\n# Forcefully remove images\n$ docker rmi -f &lt;image_id&gt;\n# or\n$ docker rmi --force &lt;image_id&gt;\n</code></pre> <p>Create Docker Image</p> <p>When working with Docker, you typically create an image first and then use that image to create containers.</p> <ol> <li> <p>Create Image:</p> <p>An image is like a template that contains the filesystem and configuration needed to run a container. You define an image using a <code>Dockerfile</code>, which specifies the instructions to build the image. You use the docker build command to create an image from a Dockerfile.</p> </li> <li> <p>Create Container:</p> <p>Once you have an image, you can create one or more containers from it. A container is a running instance of an image. You use the docker run command to create and start a container from an image. Each container runs in isolation from other containers but can communicate with them if configured to do so.</p> </li> </ol> <p>Here's a basic sequence of commands:</p> <ol> <li>Create the image:</li> </ol> <pre><code>$ docker build -t my-image .\n</code></pre> <ol> <li>Run a container based on that image:</li> </ol> <pre><code>$ docker run --name my-container my-image\n</code></pre> <p>So, to summarize, first, you build an image using a <code>Dockerfile</code>, then you create and run containers based on that image.</p> <p>Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space.</p> <p>Dangling images are created while creating new build of a image without renaming/updating the version of the image. So that the old image are converted into dangling images.</p> <pre><code># List Dangling images\n$ docker images -f dangling=true\n\n# Remove Dangling images\n$ docker rmi $(docker images -f dangling=true -q)\n\n##\n# To remove all dangling images.\n$ docker image prune\n\n# To remove all images which aren't used by existing containers, use the -a flag:\n$ docker image prune -a\n\n# To remove all stopped containers.\n$ docker container prune\n\n# To removes stopped containers older than 24 hours:\n$ docker container prune --filter \"until=24h\"\n\n# To remove all volumes not used by at least one container.\n$ docker volume prune\n\n# To remove all networks not used by at least one container.\n$ docker network prune\n\n# The docker system prune command is a shortcut that prunes images, containers, and networks.\n# Volumes aren't pruned by default, and you must specify the --volumes flag for docker system prune to prune volumes.\n\n# To prune images, containers and network\n$ docker system prune\n\n# To also prune volumes, add the --volumes flag:\n$ docker system prune --volumes\n</code></pre> <ul> <li>Remove unnecessary images</li> <li>Docker container and image prune</li> </ul>"},{"location":"research/docker/#docker-container","title":"Docker Container","text":"Abstract TheoryPracticalAdditional <p>Create Docker Container</p> <p>example of creating a new container:</p> bash<pre><code># syntax\n# 1. Run a new container with the new image:\n$ docker run --name &lt;container_name&gt; -d &lt;new_image_name&gt;\n\n# 2. Stop the existing container:\n$ docker stop &lt;container_name_or_id&gt;\n\n# 3. Remove the existing container (optional):\n$ docker rm &lt;container_name_or_id&gt;\n\n# example\n$ docker run --name my-container -d my-image\n</code></pre> <ul> <li><code>--name my-container</code> sets the name of the container to my-container.</li> <li><code>-d</code> runs the container in detached mode (in the background).</li> <li><code>my-image</code> is the name of the image from which to create the container.</li> </ul> <p>This command will create a new container using the specified image. If the image is not available locally, Docker will automatically pull it from a registry like Docker Hub before creating the container.</p> <p>After running the command, you can use <code>docker ps</code> to see the list of running containers.</p> <p>Check the IP Address of the Docker Container</p> bash<pre><code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n</code></pre> <p>Then try accessing the site using <code>curl</code> with the <code>IP address</code> and the <code>mapped port</code> (<code>8082</code> in this case).</p> <p>if you want to check if a container named my_container is using any volumes:</p> bash<pre><code>docker inspect &lt;my_container&gt; | grep Mounts\n</code></pre> bash<pre><code>docker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\njenkins/jenkins:lts\n\ndocker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nmy-jenkins\n</code></pre>"},{"location":"research/docker/#docker-volume","title":"Docker Volume","text":"Abstract TheoryPracticalAdditional bash<pre><code># List Volumes in Use:\n$ docker volume ls\n\n# list all containers to find out which volumes are in use:\n$ docker ps -a\n\n# delete the volumes\n$ docker volume rm &lt;volume_name_or_id&gt;\n\n# delete volumes along with the containers that use them\n$ docker rm -v &lt;container_name_or_id&gt;\n</code></pre> <p>Recap Docker Volume</p> <p>In a previous chapter, we used the \"<code>-v</code>\" option to a \"<code>docker run</code>\" command to declare that we wanted to use a volume with a container. The abbreviated \"<code>-v</code>\" option is exactly the same as the \"<code>--volume</code>\" option. However, the newer and preferred way to mount volumes in a container is the \"<code>--mount</code>\" option. Docker recommends that you use \"<code>--mount</code>\" instead of \"<code>-v</code>\" or \"<code>--volume</code>\", as their research has shown \"<code>--mount</code>\" is easier to use. However, if you are an old Docker user like myself, then you're probably accustomed to using and seeing \"<code>-v</code>\". In any case, either works, but we will focus on \"<code>--mount</code>\", as it\u2019s the recommended way.</p> <pre><code>$ docker run -d --name withvolume --mount source=mydata1,destination=/root/volume nginx\n\n#\ndocker run -d --name withvolume2 --mount src=mydata1,dst=/root/volume nginx\n\n$ docker run -dit --name ephemeral --mount type=tmpfs,destination=/root/volume nginx\n</code></pre> <ul> <li>Docker: A project based learning</li> <li>Publish Docker image to Dockerhub using Jenkins Pipeline</li> <li>Build a Docker Jenkins Pipeline to Implement CI/CD Workflow</li> </ul>"},{"location":"research/docker/#portainer","title":"Portainer","text":"Abstract TheoryPracticalAdditional <p>Docker pull Command</p> bash<pre><code>$ docker pull portainer/portainer-ce\n</code></pre> <p>After installing Portainer in Docker on a Linux server, you can run it by executing the Docker run command with appropriate options. Here's how you can do it:</p> <ol> <li> <p>Open a Terminal:</p> <p>Log in to your Linux server via SSH or open a terminal window if you're working directly on the server.</p> </li> <li> <p>Run Portainer Container:</p> <p>Use the following command to start the Portainer container:</p> bash<pre><code>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 9000:9000</code>: Map port 9000 on the host to port 9000 inside the container. This allows you to access Portainer's web interface on port 9000 of your server.</p> </li> <li> <p><code>--name portainer</code>: Assign the name \"portainer\" to the container.</p> </li> <li> <p><code>--restart always</code>: Ensure that the container restarts automatically if it stops.</p> </li> <li> <p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: Mount the Docker socket inside the container, allowing Portainer to communicate with the Docker daemon.</p> </li> </ul> </li> <li> <p>Verify Portainer Container:</p> <p>You can verify that the Portainer container is running by executing the following command:</p> bash<pre><code>$ sudo docker ps\n</code></pre> <p>This command will list all running containers, and you should see an entry for the Portainer container.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:9000\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Set up Portainer:</p> <p>When you access the Portainer web interface for the first time, you'll be prompted to set up an admin user and password. Follow the on-screen instructions to complete the setup process.</p> </li> </ol> <p>That's it! You have now successfully run Portainer in Docker on your Linux server, and you can start managing your Docker environment through the Portainer web interface.</p> <p>Portainer with Docker</p> <p>To use Docker Swarm mode with Portainer, you need to set up a Docker Swarm cluster and then deploy Portainer as a service within the Swarm. Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Initialize Docker Swarm:</p> <p>If you haven't already initialized Docker Swarm on your Docker host, you can do so by running the following command in your terminal:</p> bash<pre><code>$ docker swarm init\n</code></pre> <p>This command initializes Docker Swarm mode on the current Docker host and creates a Swarm manager node.</p> </li> <li> <p>Deploy Portainer as a Service:</p> <p>Once Docker Swarm is initialized, you can deploy Portainer as a service within the Swarm. Run the following command to create a Portainer service:</p> bash<pre><code>docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \\\nportainer/portainer-ce\n</code></pre> <p>This command creates a new service named \"portainer\" using the Portainer Community Edition (CE) image. It publishes Portainer's web interface on port 9000 and mounts the Docker socket from the host into the Portainer container, allowing Portainer to interact with the Docker API.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer service is deployed, you can access the Portainer web interface by navigating to http://:9000 in your web browser. If you're running Portainer locally, you can use http://localhost:9000.</p> </li> <li> <p>Set Up Portainer:</p> <p>Follow the on-screen instructions to complete the initial setup of Portainer. You'll be prompted to create an admin user, choose a password, and specify whether you want to manage the local Docker environment or a remote Docker Swarm cluster.</p> </li> <li> <p>Connect Portainer to Docker Swarm:</p> <p>If you're managing a remote Docker Swarm cluster, you'll need to specify the Swarm endpoint URL and optionally provide authentication credentials. This allows Portainer to communicate with the Docker Swarm API and manage services, nodes, and other resources within the cluster.</p> </li> <li> <p>Start Managing Services:</p> <p>Once connected, you can start managing Docker Swarm services, nodes, stacks, and other resources using the Portainer web interface. You can create, scale, update, and monitor services, deploy applications using stacks, and perform various administrative tasks.</p> </li> </ol> <p>By following these steps, you can set up and use Docker Swarm mode with Portainer to manage your containerized applications at scale. Make sure to consult the official Portainer documentation for more detailed instructions and best practices.</p> <pre><code>server {\n    listen 80;\n    server_name generic.com.np;\n\n    location / {\n        proxy_pass http://&lt;container-ip&gt;:&lt;container-port&gt;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"research/docker/#jenkins","title":"Jenkins","text":"Abstract TheoryPractical <p>Docker Pull Command</p> bash<pre><code>$ docker pull jenkins/jenkins\n</code></pre> <p>After pulling the Docker Jenkins image onto your Linux server, you can start using Jenkins by running the container and accessing its web interface. Here's how you can do it:</p> <ol> <li> <p>Run Jenkins Container:</p> <p>Use the following command to start the Jenkins container:</p> title<pre><code>docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 8080:8080 -p 50000:50000</code>: Map port 8080 on the host to port 8080 inside the container for accessing Jenkins web interface, and map port 50000 for Jenkins agent communication.</p> </li> <li> <p><code>--name jenkins</code>: Assign the name \"jenkins\" to the container.</p> </li> <li> <p><code>jenkins/jenkins:lts</code>: This specifies the Jenkins Docker image to use. In this case, we're using the LTS (Long-Term Support) version.</p> </li> </ul> </li> <li> <p>Access Jenkins Web Interface:</p> <p>Once the Jenkins container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:8080\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Unlock Jenkins:</p> <p>When you access the Jenkins web interface for the first time, you'll be prompted to unlock Jenkins. To do this, you need to retrieve the initial admin password from the Jenkins container logs. Run the following command to view the logs:</p> <pre><code>docker logs jenkins\n</code></pre> <p>Look for the line containing \"Please use the following password to proceed to installation:\", and copy the provided password.</p> </li> <li> <p>Complete Jenkins Setup:</p> <p>Paste the copied password into the Jenkins web interface and click \"Continue\". Follow the on-screen instructions to complete the setup process, including installing recommended plugins.</p> </li> <li> <p>Create Admin User:</p> <p>After plugin installation, you'll be prompted to create an admin user. Provide the required information to create the admin user.</p> </li> <li> <p>Start Using Jenkins:</p> <p>Once you've completed the setup process, you can start using Jenkins to create and manage jobs, automate tasks, and perform continuous integration and continuous delivery (CI/CD) pipelines.</p> </li> </ol> <p>That's it! You've successfully pulled and started the Jenkins Docker container on your Linux server, and you can now begin configuring Jenkins for your development and deployment needs.</p>"},{"location":"research/docker/#docker-hub","title":"Docker Hub","text":"<p><code>Docker Hub</code> is to Docker what <code>GitHub</code> is to source code.</p> <p>You can think of Docker Hub as being like GitHub.</p> <p>It allows anyone to host its image online and share it publicly or keep it private. To share an image on Docker Hub, you need to do the following:</p> <ul> <li>Create an account on Docker Hub.</li> <li>Log in to the hub on your Docker host.</li> <li>Push your image.</li> </ul> <pre><code>$ docker login\nUsername: how2dock\nPassword:\nEmail: how2dock@gmail.com\nLogin Succeeded\n</code></pre> <ul> <li>Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</li> </ul>"},{"location":"research/docker/#docker-networking","title":"Docker Networking","text":"<p>As you build your distributed application, services that compose it will need to be able to communicate with each other. These services, running in containers, might be on a single host or on multiple hosts and even across data centers. Therefore container networking is a critical enabler of any Docker-based distributed application.</p>"},{"location":"research/docker/#downloading-the-first-docker-image","title":"Downloading the first Docker image","text":"<p>The Docker Registry is an application repository that hosts various applications, ranging from basic Linux images to advanced applications. The <code>docker pull</code> subcommand is used to download any number of images from the registry.</p> <pre><code>$ sudo docker pull hello-world\n</code></pre> <p>Once the images have been downloaded, they can be verified using the <code>docker images</code> subcommand, as shown here:</p> <pre><code>$ sudo docker images\n</code></pre>"},{"location":"research/docker/#running-the-first-docker-container","title":"Running the first Docker container","text":"<pre><code>$ docker run hello-world\n</code></pre> <p>Cool, isn't it? You have set up your first Docker container in no time. In the preceding example, the <code>docker run</code> subcommand has been used to create a container from the hello-world image.</p>"},{"location":"research/docker/#troubleshooting-docker-containers-or-sudo-service","title":"Troubleshooting Docker containers <code>or</code> sudo service","text":"<p>You can <code>stop</code>, <code>start</code>, and <code>restart</code> the service. For example, to restart it:</p> <pre><code>$ sudo service docker status\n$ sudo service docker restart\n</code></pre>"},{"location":"research/docker/#certbot-in-linux","title":"certbot in linux","text":"Abstract InstallationSSL Certificate with Certbot <pre><code># There is two ways you can download certbot\n# 1. with PIP\n# 2. with snapd\n\n# step1: Install snapd:\nsudo apt install snapd\n\n# step2: Ensure you have the latest snapd version installed:\nsudo snap install core; sudo snap refresh coreCopied!\n\n# step3: Install Certbot with snapd:\nsudo snap install --classic certbot\n\n# step4: Create a symlink to ensure Certbot runs:\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n</code></pre> <p>Create an SSL Certificate with Certbot</p> <pre><code># step1: Choose the best option for your needs.\n# Create SSL certs for all domains and configure redirects in the web server:\nsudo certbot --apache\nsudo certbot --nginx\n\n# Create SSL certs for a specified domain (recommended if you\u2019re using your system hostname):\nsudo certbot --apache -d example.com -d www.example.com\n\n# Only install SSL certs:\nsudo certbot certonly --apache\nsudo certbot certonly --nginx\n\n\n# step2: Enter an email address for renewal and security notices.\n# step3: Agree to the terms of service.\n# step4: Specify whether to receive emails from EFF.\n# step5: If prompted, choose whether to redirect HTTP traffic to HTTPS \u2013 1 (no redirect, no further changes to the server) or # 2 (redirect all HTTP requests to HTTPS).\n</code></pre> <ul> <li>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</li> <li>Install Let\u2019s Encrypt SSL Certificates using Certbot</li> </ul> <p>Solved</p> <ul> <li>Issue using certbot with nginx: stackoverflow</li> <li>Whaaaat Are AAAA Records in DNS? youtube</li> </ul> Docker Common Issue Solved Presentation <p>Docker</p> Docker: <code>Host</code> port vs <code>Container</code> port <p>What is left side of port ant right side of port in docker</p> <p>In Docker, when you expose ports for containers, you specify the port mappings using the <code>-p</code> flag or <code>--publish</code> flag when running a container. The syntax is typically <code>hostPort</code>:<code>containerPort</code>.</p> <ul> <li> <p>Left side (<code>hostPort</code>):</p> <p>This is the port on the host machine, the system where Docker is running. It is the port to which you can connect from outside the Docker container to access the services running within the container. If you specify a port on the left side, Docker will bind that port on the host system to the container port specified on the right side.</p> </li> <li> <p>Right side (<code>containerPort</code>):</p> <p>This is the port exposed within the Docker container. It is the port on which your application or service within the container is listening. When Docker starts the container, it will forward any traffic received on the host port (left side) to this port within the container.</p> </li> </ul> <p>For example, if you run a container with <code>-p 8080:80</code>, it means that port <code>80</code> inside the container will be accessible from port <code>8080</code> on the host machine. If you were to access <code>http://localhost:8080</code> on your host machine, Docker would forward that request to port <code>80</code> inside the container.</p> <p>This port mapping mechanism allows Docker containers to communicate with the outside world and for multiple containers to run on the same host without port conflicts.</p> Listen services running on specific port <code>:8000</code> <code>:9000</code> <pre><code># You can use the following commands to find out which processes are using these ports:\nsudo lsof -i :9000\nsudo lsof -i :8080\n</code></pre> <p>Once you identify the processes using these ports, you can decide whether to stop them or reconfigure them to use different ports. After ensuring that the ports are available, you can attempt to start the Nginx service again.</p> Last things you need to remeber in Docker Dind <p>Host os:</p> <ol> <li> <p>Add <code>Jenkins</code> user to the Docker group:</p> <p>On the host machine where Docker is installed, run the following command:</p> bash<pre><code>sudo usermod -aG docker jenkins\n</code></pre> <p>This command adds the Jenkins user to the docker group, granting it permission to interact with the Docker daemon.</p> </li> <li> <p>Ensure permissions on the Docker socket:</p> <p>The Docker daemon socket (<code>/var/run/docker.sock</code>) should be readable and writable by members of the docker group. You can check and     adjust the permissions if needed with the following command:</p> bash<pre><code>sudo chmod 666 /var/run/docker.sock\n</code></pre> </li> <li> <p>Restart Jenkins:</p> <p>Restart the Jenkins service to apply the changes:</p> bash<pre><code>sudo systemctl restart jenkins\n# or\ndocker restart &lt;container_id or container_name&gt;\n</code></pre> </li> </ol> <p>With these changes, the Jenkins user should now have the necessary permissions to execute Docker commands, and <code>you should no longer encounter permission denied errors when running Docker commands from Jenkins job scripts</code>. Make sure to test your Jenkins job again after applying these changes.</p>"},{"location":"research/docker/#docker-common-issue-solved","title":"Docker Common Issue Solved","text":"Share Docker sockDocker Port Mappingstep1:Final Solution <p>Connect: To share Docker daemon from the host with jenkins nodes</p> <p>To run Docker commands inside Jenkins, especially within a Jenkins instance running inside a Docker container, you have a couple of options:</p> <ol> <li> <p>Docker Socket Binding:</p> bash<pre><code>$ docker run -v /var/run/docker.sock:/var/run/docker.sock &lt;jenkins-image:tag&gt;\n</code></pre> </li> <li> <p>Docker-in-Docker (DinD):</p> bash<pre><code>$ docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock docker:dind\n</code></pre> </li> </ol> <p>How to fix docker: Got permission denied while trying to connect to the Docker daemon socket</p> <p>After an search hour this following solution finaly worked :</p> bash<pre><code>$ sudo chmod 666 /var/run/docker.sock\n</code></pre> <ul> <li>Got permission denied while trying to connect to the Docker daemon socket</li> </ul> <p></p> <p>what is differnce between 8080:80 and 8080:8080. is there any real difference</p> <ul> <li>8080:80</li> </ul> <p>This notation maps port 80 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 80 inside the Docker container. This is useful when you want to expose a service running inside the container on a standard HTTP port (80) of the host machine.</p> <ul> <li>8080:8080</li> </ul> <p>This notation maps port 8080 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 8080 inside the Docker container. This is useful when you want to expose a service running inside the container on a non-standard port (8080) of the host machine.</p> <p>In both cases, the first port number (8080) specifies the port on the host machine, and the second port number (80 or 8080) specifies the port inside the Docker container. The port on the host machine is what you use to access the service running inside the container.</p> <p>So, the difference lies in which port on the host machine you want to use to access the service and which port inside the container the service is listening on.</p> <p>so why the jenkins not running on 8080:80 but running on 8080:8080</p> <p>If Jenkins is running inside a Docker container and you've mapped port 8080:8080 but not <code>8080:80</code>, it means that Jenkins is configured to listen for incoming connections on port 8080 inside the container.</p> <p>When you map <code>8080:8080</code>, it indicates that traffic directed to port <code>8080</code> on the host machine should be forwarded to port <code>8080</code> inside the Docker container where Jenkins is running. This setup expects Jenkins to be listening for connections on port <code>8080</code> inside the container.</p> <p>If Jenkins is running on port <code>8080</code> inside the container, mapping <code>8080:8080</code> correctly exposes Jenkins to external traffic on port <code>8080</code> of the host machine.</p> <p>On the other hand, if you were to map <code>8080:80</code>, it would expect Jenkins to be configured to listen on port <code>80</code> inside the container. By default, Jenkins typically runs on port 8080, so mapping <code>8080:80</code> wouldn't work unless you specifically configured Jenkins to listen on port 80 inside the container.</p> <p>Therefore, mapping <code>8080:8080</code> correctly exposes Jenkins running on port <code>8080</code> inside the container to external traffic on port <code>8080</code> of the host machine, which is why it works in your case.</p> <p>Issue Solved</p> <p>Step-by-step instructions to create a Docker image for Jenkins with Docker installed inside it and then run a Jenkins container with the Docker socket mounted from the host:</p> <ol> <li> <p>Create a Dockerfile:</p> <p>Create a file named <code>Dockerfile</code> with the following content:</p> <pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker prerequisites\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; \\\n    sh get-docker.sh\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>This Dockerfile installs Docker inside the Jenkins container and adds the Jenkins user to the Docker group.</p> </li> <li> <p>Build the Docker Image:</p> <p>Open a terminal and navigate to the directory containing the <code>Dockerfile</code>. Then, run the following command to build the Docker image:</p> <pre><code>docker build -t my-jenkins .\n</code></pre> <p>This command builds the Docker image using the Dockerfile and tags it with the name <code>my-jenkins</code>.</p> </li> <li> <p>Run the Jenkins Container:</p> <p>After the Docker image is built, you can run a Jenkins container with the Docker socket mounted from the host:</p> bash<pre><code>docker run -d \\\n--name jenkins \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-p 8080:8080 -p 50000:50000 \\\nmy-jenkins\n</code></pre> <p>This command starts a Jenkins container named <code>jenkins</code>. It mounts the Docker socket (<code>/var/run/docker.sock</code>) from the host into the container and exposes the Jenkins web interface on port <code>8080</code> and the Jenkins agent communication port on port <code>50000</code>.</p> </li> </ol> <p>With these steps, you have a Jenkins container running with Docker installed inside it, and the Docker socket mounted from the host. This setup allows the Jenkins container to communicate with the Docker daemon on the host and perform Docker-related tasks within Jenkins pipelines or jobs.</p> <p>Docker Socket bind with docker command</p> <pre><code>docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/custom_volume/jenkins/:/var/jenkins_home/ --privileged --name b_jenkins 6b7d79a0229e\n</code></pre> <ul> <li>Docker cli excutable file not found</li> <li>docker not found in jenkins pipeline</li> <li>docker not found in jenkins pipeline 2</li> <li>docker: ibm</li> <li>what is docker and why it is darn popular?</li> <li>docker introduction aws</li> </ul>"},{"location":"research/docker/#docker-presentation","title":"Docker Presentation","text":""},{"location":"research/docker/#docker-architecture","title":"Docker Architecture","text":"<p>cgroups &amp; namespaces The backbone of the Docker technology are cgroups (short for control groups) and kernel namespaces.</p> <p>With <code>cgroups</code>, the Linux operating system can easily manage and monitor resource allocation for a given process and set resource limits, like CPU, memory, and network limits.</p> <p><code>Namespaces</code> are helpful in isolating process groups from each other. There are six default namespaces in Linux: <code>mnt</code>, <code>IPC</code>, <code>net</code>, <code>usr</code>, <code>pid</code>, and <code>uts</code>. Each container will have its own namespace and processes running inside that namespace, and will not have access to anything outside its namespace.</p> <p></p>"},{"location":"research/docker/#docker-steps","title":"Docker Steps","text":""},{"location":"research/docker/#docker-images_1","title":"Docker Images","text":"<p>Where Are Docker Images Stored on the Host Machine? </p> <pre><code>$ docker info\n</code></pre> <p>Now, typically there are two categories of Docker Images</p> <ul> <li>Official Base Images</li> </ul> <p>that are pre-built and can be downloaded or pulled from registries, and</p> <ul> <li>Customized Images</li> </ul> <p>that use base images to create application-specific environments.</p> <p></p> <p></p>"},{"location":"research/docker/#docker-container_1","title":"Docker Container","text":"<p>The major difference between a <code>container</code> and an <code>image</code> is the top writable layer.</p> <p></p> <p>All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.</p> <p>When the container is stopped writable layer remains, and if container was removed writable layer is deleted. So that\u2019s why people say, containers are stateless.</p> <p></p>"},{"location":"research/docker/#docker-volume_1","title":"Docker Volume","text":"<p>How to Handle Container Storage</p> <p>To make data of any container persistent and accessible outside of the container, Docker provides two options:</p> <ul> <li>Volumes</li> <li>Bind mounts</li> </ul> <p></p>"},{"location":"research/docker/#docker-port-mapping","title":"Docker Port Mapping","text":""},{"location":"research/docker/#docker-vs-docker-compose-vs-docker-swarm","title":"Docker vs Docker Compose vs Docker Swarm","text":""},{"location":"research/docker/#docker-swarm","title":"Docker Swarm","text":""},{"location":"research/docker/#practical-guide-jenkins","title":"Practical Guide Jenkins","text":"<p>Using Statefull persistant volume </p> <p> </p> <p>Jenkins Tutorial  </p> <p> </p>"},{"location":"research/docker/#reference","title":"Reference","text":"<p>Linux (<code>Ubuntu</code>)</p> <ul> <li>Install Docker Desktop on Ubuntu</li> <li>how-to-install-docker-on-ubuntu-22-04-20-04 :UPDATED</li> <li>pass tutorial</li> <li>3 Best Ways to Run Docker in Docker Container</li> </ul> <p>Blog</p> <ul> <li>What is a Docker Swarm?</li> <li>Key Differences Between Docker and Docker Swarm </li> </ul> <p>Youtube</p> <ul> <li>Docker Swarm: Simplilearn</li> <li>Docker Swarm Step by Step: Intellipaat</li> <li>Docker vs Kubernetes vs Docker Swarm: Techworld with Nana</li> <li>The EASIEST Docker Swarm Tutorial</li> <li>Docker Compose Tutorial: Programming with Mosh</li> <li>Become a Docker Swarm Expert in just 20 minutes</li> </ul> <p>tmux</p> <ul> <li>tmux resizing pane</li> </ul> <p>Misc <code>youtube</code></p> <ul> <li>what is podman vs docker</li> </ul> <p>Book - Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</p>"},{"location":"research/misc/","title":"Misc","text":""},{"location":"research/misc/#the-contrib-packages","title":"The contrib packages","text":"<p>The contrib packages are a part of Django that contain some very useful applications that the Django developers decided should be shipped with Django.</p> <p>The included applications provide an impressive set of features, including some that we'll be using in this application:</p> <ul> <li> <p>Admin is a full featured CMS that can be used to manage the content of a Django site. The Admin application is an important reason for the popularity of Django. We'll use this to provide an interface for site administrators to moderate and manage the data in our application.</p> </li> <li> <p>Auth provides user registration and authentication without requiring us to do any work. We'll be using this module to allow users to sign up, sign in, and manage their profiles in our application.</p> </li> </ul> <p>Django comes with a couple of <code>contrib</code> packages that speed up our work considerably.</p> Note <p>There are a lot more goodies in the contrib module. I suggest you take a look at the complete list at docs.djangoproject.com. </p> <p>I usually end up using at least three of the contrib packages in all my Django projects. They provide often-required features like <code>user registration</code> and <code>management</code>, and free you to work on the core parts of your project, providing a solid foundation to build upon.</p>"},{"location":"research/misc/#folder-structure-of-hocs","title":"Folder Structure of HOCs","text":"<p>The folder structure for Higher-Order Components (HOCs) in a React project can vary depending on the complexity and size of your project. However, a common and organized way to structure your folders and files can look like this:</p>"},{"location":"research/misc/#1-basic-folder-structure","title":"1. Basic Folder Structure","text":"<p>A simple structure for a small to medium-sized project might look like this:</p> <pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 SomeComponent/\n\u2502   \u2502   \u251c\u2500\u2500 SomeComponent.js\n\u2502   \u2502   \u251c\u2500\u2500 SomeComponent.css\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 hocs/\n\u2502   \u251c\u2500\u2500 withAuth.js\n\u2502   \u2514\u2500\u2500 withLogging.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"research/misc/#2-advanced-folder-structure","title":"2. Advanced Folder Structure","text":"<p>For larger projects, it might make sense to have a more detailed structure:</p> <pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 SomeComponent/\n\u2502   \u2502   \u251c\u2500\u2500 SomeComponent.js\n\u2502   \u2502   \u251c\u2500\u2500 SomeComponent.css\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 AnotherComponent/\n\u2502       \u251c\u2500\u2500 AnotherComponent.js\n\u2502       \u251c\u2500\u2500 AnotherComponent.css\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 hocs/\n\u2502   \u251c\u2500\u2500 withAuth/\n\u2502   \u2502   \u251c\u2500\u2500 withAuth.js\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 withLogging/\n\u2502   \u2502   \u251c\u2500\u2500 withLogging.js\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 withAnotherFeature/\n\u2502       \u251c\u2500\u2500 withAnotherFeature.js\n\u2502       \u2514\u2500\u2500 index.js\n\u251c\u2500\u2500 utils/\n\u2502   \u251c\u2500\u2500 helper1.js\n\u2502   \u2514\u2500\u2500 helper2.js\n\u251c\u2500\u2500 hooks/\n\u2502   \u251c\u2500\u2500 useCustomHook.js\n\u2502   \u2514\u2500\u2500 useAnotherHook.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"research/misc/#explanation-of-each-folder","title":"Explanation of Each Folder:","text":"<ol> <li> <p>components/:</p> <ul> <li>Contains all your React components.</li> <li>Each component has its own folder which may contain its JavaScript file, CSS file, and an <code>index.js</code> for easier imports.</li> </ul> </li> <li> <p>hocs/:</p> <ul> <li>Contains all your Higher-Order Components.</li> <li>Each HOC can have its own folder if it consists of multiple files or just a single file if it's simple.</li> <li>Each HOC folder typically has an <code>index.js</code> file for easier imports.</li> </ul> </li> <li> <p>utils/:</p> <ul> <li>Contains utility functions that can be reused throughout your project.</li> </ul> </li> <li> <p>hooks/:</p> <ul> <li>Contains custom React hooks.</li> </ul> </li> </ol>"},{"location":"research/misc/#hocs","title":"HOCs","text":"<p>Higher-Order Components (HOCs) are a pattern in React for reusing component logic. They are functions that take a component and return a new component with added functionality. HOCs are particularly useful in various scenarios, and they are commonly used for the following purposes:</p>"},{"location":"research/misc/#scenarios-for-using-hocs","title":"Scenarios for Using HOCs","text":"<ol> <li> <p>Code Reuse, Logic, and Bootstrap Abstraction:</p> <ul> <li>HOCs allow you to reuse code across multiple components. This is particularly useful for logic that needs to be shared, such as fetching data, managing state, or subscribing to events.</li> </ul> </li> <li> <p>Manipulating Props:</p> <ul> <li>HOCs can manipulate the props passed to a component. This can include adding new props, modifying existing ones, or filtering out unnecessary props.</li> </ul> </li> <li> <p>Conditional Rendering:</p> <ul> <li>HOCs can be used to conditionally render components based on certain criteria, such as user authentication, feature flags, or permission levels.</li> </ul> </li> <li> <p>State Management:</p> <ul> <li>They can manage state and pass it down as props to the wrapped component. This is useful for scenarios where state management logic needs to be shared across multiple components.</li> </ul> </li> <li> <p>Handling Side Effects:</p> <ul> <li>HOCs can handle side effects like data fetching, subscriptions, or logging. This is useful for abstracting side effects out of the component, keeping them clean and focused on rendering UI.</li> </ul> </li> </ol>"},{"location":"research/misc/#common-uses-of-hocs","title":"Common Uses of HOCs","text":"<ol> <li> <p>Authentication:</p> <ul> <li>Wrapping components to ensure that only authenticated users can access certain parts of an application.</li> <li>Example: <code>withAuth(Component)</code></li> </ul> </li> <li> <p>Logging:</p> <ul> <li>Adding logging functionality to components for debugging or analytics.</li> <li>Example: <code>withLogging(Component)</code></li> </ul> </li> <li> <p>Data Fetching:</p> <ul> <li>Fetching data from an API and passing it as props to the wrapped component.</li> <li>Example: <code>withDataFetching(Component, apiEndpoint)</code></li> </ul> </li> <li> <p>Theming:</p> <ul> <li>Providing theme-related props to components.</li> <li>Example: <code>withTheme(Component)</code></li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Wrapping components with error boundaries to catch and handle errors in a standardized way.</li> <li>Example: <code>withErrorBoundary(Component)</code></li> </ul> </li> <li> <p>Access Control:</p> <ul> <li>Enforcing role-based access control by conditionally rendering components based on user roles.</li> <li>Example: <code>withRole(Component, allowedRoles)</code></li> </ul> </li> <li> <p>Form Handling:</p> <ul> <li>Managing form state and validation logic.</li> <li>Example: <code>withFormHandling(Component)</code></li> </ul> </li> </ol>"},{"location":"research/misc/#reference","title":"Reference","text":"<ul> <li>Django Project Blueprints by Asad Jibran Ahmed, 2016 Packt Publishing</li> </ul>"},{"location":"research/package/","title":"Package","text":"<ul> <li>django-braces : Reusable, generic mixins for Django</li> </ul> PCEP <p>The exam consists of four sections:</p> Section Description <code>section 1 -&gt; 7 items</code> Max Raw Score: 180 (<code>18%</code>) <code>section 2 -&gt; 8 items</code> Max Raw Score: 290 (<code>29%</code>) <code>section 3 -&gt; 7 items</code> Max Raw Score: 250 (<code>25%</code>) <code>section 4 -&gt; 8 items</code> Max Raw Score: 280 (<code>28%</code>) Abstract <p>Section 3: Data Collections \u2013 Tuples, Dictionaries, Lists, and Strings (<code>25%</code>)</p> <p>Objectives covered by the block (7 exam items)</p> <p>PCEP-30-02 3.1 \u2013 Collect and process data using lists</p> <ul> <li>constructing vectors</li> <li>indexing and slicing</li> <li>the len() function</li> <li>list methods: <code>append()</code>, <code>insert()</code>, <code>index()</code>, etc.</li> <li>functions: <code>len()</code>, <code>sorted()</code></li> <li>the <code>del</code> instruction</li> <li>iterating through lists with the for loop</li> <li>initializing loops</li> <li>the <code>in</code> and <code>not</code> in operators</li> <li>list comprehensions</li> <li>copying and cloning</li> <li>lists in lists: matrices and cubes</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>gThumb lightweight image editor in ubuntu</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"},{"location":"tags/#api","title":"api","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#base64","title":"base64","text":"<ul> <li>Encoding and Decoding</li> <li>Saving base64 data into an Excel file in a React application</li> </ul>"},{"location":"tags/#css","title":"css","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#git","title":"git","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"},{"location":"tags/#html","title":"html","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#http","title":"http","text":"<ul> <li>Content-Type or MIME type in Post</li> <li>Useful React Libraries for Projects</li> </ul>"},{"location":"tags/#js","title":"js","text":"<ul> <li>Understanding e.item.props in React and Ant Design's Menu Component</li> <li>Exploring Object.prototype in JavaScript</li> <li>Handling Circular References in JavaScript: Avoiding 'TypeError: cyclic object value' in JSON.stringify</li> <li>JS objects</li> <li>How to send multipart/form-data request file in postman</li> <li>Unveiling Static and Prototype Methods in JavaScript Built-in Objects</li> </ul>"},{"location":"tags/#postman","title":"postman","text":"<ul> <li>Content-Type or MIME type in Post</li> <li>Useful React Libraries for Projects</li> </ul>"},{"location":"tags/#postment","title":"postment","text":"<ul> <li>Postmen Advanced Topics</li> </ul>"},{"location":"tags/#react","title":"react","text":"<ul> <li>Understanding e.item.props in React and Ant Design's Menu Component</li> <li>Encoding and Decoding</li> <li>Saving base64 data into an Excel file in a React application</li> </ul>"},{"location":"tags/#tracking","title":"tracking","text":"<ul> <li>Removing Tracked Files and Directories in Git</li> </ul>"}]}