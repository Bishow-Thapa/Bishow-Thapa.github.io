{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> <p>Let's collaborate and turn visions into reality!</p> <ul> <li>Front-End Expert: Two years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Internationalization and Localization in Django: A Quick Guide</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>gThumb lightweight image editor in ubuntu</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"},{"location":"tags/#css","title":"css","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#html","title":"html","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/05/18/css-media-queries/","title":"CSS Media Queries","text":"","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-media-queries","title":"CSS Media Queries","text":"<p>CSS media queries are a powerful tool for creating responsive web designs. They allow you to apply different styles based on the characteristics of the device viewing the content, such as the <code>screen size</code>, <code>resolution</code>, <code>orientation</code>, and more. This way, you can ensure that your website looks good and functions well on a wide range of devices, from desktop monitors to smartphones.</p>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#media-queries","title":"Media Queries","text":"<p>The @media rule, introduced in <code>CSS2</code>, made it possible to define different style rules for different media types.</p> <p>Media queries in <code>CSS3</code> extended the <code>CSS2</code> media types idea: Instead of looking for a type of device, they look at the capability of the device.</p> <p>Media queries can be used to check many things, such as:</p> <ul> <li>width and height of the viewport</li> <li>orientation of the viewport (<code>landscape</code> or <code>portrait</code>)</li> <li>resolution</li> </ul> <p>Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).</p> <p>Syntax</p> <p>A media query consists of a media type and can contain one or more media features, which resolve to either <code>true</code> or <code>false</code>.</p> CSS<pre><code>@media not|only mediatype and (media feature) and (media feature) {\n    ...\n    /* CSS-Code; */\n    ...\n}\n</code></pre> <p>The mediatype is optional (if omitted, it will be set to all). However, if you use not or only, you must also specify a mediatype.</p>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#example","title":"Example","text":"<p>Example</p> <pre><code>/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\n    body {\n        background-color: blue;\n    }\n}\n\n/* If screen size is more than 992px wide, set the font-size of &lt;div&gt; to 80px */\n@media screen and (min-width: 992px) {\n    div.example {\n        font-size: 80px;\n    }\n}\n\n/* Orientation: Portrait / Landscape */\n@media only screen and (orientation: landscape) {\n    body {\n        background-color: lightblue;\n    }\n}\n\n/* Min Width to Max Width:  */\n/* For example, when the browser's width is between 600 and 900px, change the appearance of a &lt;div&gt; element: */\n@media screen and (max-width: 900px) and (min-width: 600px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n\n\n/* When the width is between 600px and 900px or above 1100px - change the appearance of &lt;div&gt; */\n@media screen and (max-width: 900px) and (min-width: 600px), (min-width: 1100px) {\n    div.example {\n        font-size: 50px;\n        padding: 50px;\n        border: 8px solid black;\n        background: yellow;\n    }\n}\n</code></pre> <p>Note</p> <p>Meaning of the not, only, and and keywords:</p> <ul> <li><code>not</code>: This keyword inverts the meaning of an entire media query.</li> <li><code>only</code>: This keyword prevents older browsers that do not support media queries from applying the specified styles. It has no effect on modern browsers.</li> <li><code>and</code>: This keyword combines a media type and one or more media features.</li> </ul> <p>You can also link to different stylesheets for different media and different widths of the browser window (viewport):</p> html<pre><code>&lt;link rel=\"stylesheet\" media=\"print\" href=\"print.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen\" href=\"screen.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 480px)\" href=\"example1.css\"&gt;\n&lt;link rel=\"stylesheet\" media=\"screen and (min-width: 701px) and (max-width: 900px)\" href=\"example2.css\"&gt;\n</code></pre>","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-media-types","title":"CSS Media Types","text":"Value Description <code>all</code> Used for all media type devices <code>print</code> Used for print preview mode <code>screen</code> Used for computer screens, tablets, smart-phones etc.","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#css-common-media-features","title":"CSS Common Media Features","text":"<p>Here are some commonly used media features:</p> Value Description <code>orientation</code> Orientation of the viewport. Landscape or portrait <code>max-height</code> Maximum height of the viewport <code>min-height</code> Minimum height of the viewport <code>height</code> Height of the viewport (including scrollbar) <code>max-width</code> Maximum width of the viewport <code>min-width</code> Minimum width of the viewport <code>width</code> Width of the viewport (including scrollbar)","tags":["css","html"]},{"location":"blog/2024/05/18/css-media-queries/#reference","title":"Reference","text":"<ul> <li>CSS Media Queries: w3schools</li> <li>Responsive Web Design - Media Queries: w3schools</li> <li>Using media queries: developer.mozilla.org</li> <li>CSS3 mediaqueries</li> <li>CSS RWD Mediaqueries: w3schools</li> </ul>","tags":["css","html"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/","title":"Internationalization and Localization in Django: A Quick Guide","text":"","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#internationalization-and-localization-in-django-a-quick-guide","title":"Internationalization and Localization in Django: A Quick Guide","text":"<p>In today\u2019s globalized world, reaching a diverse audience means making your web application accessible in multiple languages. Django, a popular web framework, provides robust support for internationalization (i18n) and localization (l10n). In this blog, we\u2019ll explore how to set up your Django project to support multiple languages and adapt it to different cultural contexts.</p>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#what-is-internationalization-i18n-and-localization-l10n","title":"What is Internationalization (<code>i18n</code>) and Localization (l10n)?","text":"<p>Internationalization (i18n) refers to designing your application in a way that makes it easy to adapt to various languages and regions. This involves preparing your codebase to handle different languages without requiring major changes.</p> <p>Localization (l10n) is the process of adapting your application to a specific locale. This includes translating text and adjusting formats (dates, currency, etc.) to meet regional requirements.</p> <p>Danger</p> <p>To resolve this issue, you need to install the GNU <code>gettext</code> package. Here are the instructions for installing it on different operating systems:</p> UbuntuFor Windows <pre><code>sudo apt-get update\nsudo apt-get install gettext\n</code></pre> <pre><code>choco install gettext\n</code></pre> <p>After Installation:</p> <p>After installing <code>gettext</code>, you should be able to run the <code>makemessages</code> command without encountering the msguniq error.</p> <pre><code>django-admin makemessages -l es\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#steps-to-implement-i18n-and-l10n-in-django","title":"Steps to Implement i18n and l10n in Django","text":"","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-1-enable-internationalization","title":"Step 1: Enable Internationalization","text":"<p>First, enable internationalization in your Django project\u2019s <code>settings.py</code>:</p> <p>settings.py</p> <pre><code>LANGUAGE_CODE = 'en-us'  # Default language\nUSE_I18N = True  # Enable translation system\nUSE_L10N = True  # Enable localized formatting\nUSE_TZ = True  # Enable timezone support\n\n# Supported languages\nLANGUAGES = [\n    ('en', 'English'),\n    ('es', 'Spanish'),\n    ('fr', 'French'),\n    # Add more languages as needed\n]\n\n# Path to locale directory\nLOCALE_PATHS = [\n    os.path.join(BASE_DIR, 'locale'),\n]\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-2-mark-text-for-translation","title":"Step 2: Mark Text for Translation","text":"<p>Mark the text you want to translate in your templates and Python code.</p> <p>In templates:</p> bash<pre><code>{% load i18n %}\n&lt;p&gt;{% trans \"Hello, world!\" %}&lt;/p&gt;\n</code></pre> <p>In Python code:</p> python<pre><code>from django.utils.translation import gettext as _\n\ndef my_view(request):\n    output = _(\"Welcome to my site.\")\n    return HttpResponse(output)\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-3-create-and-edit-message-files","title":"Step 3: Create and Edit Message Files","text":"<p>Generate message files using the makemessages command:</p> bash<pre><code>django-admin makemessages -l es  # For Spanish\ndjango-admin makemessages -l fr  # For French\n</code></pre> <p>Edit the generated <code>.po</code> files in the <code>locale</code> directory to provide translations:</p> bash<pre><code>#: path/to/your/file.py:line_number\nmsgid \"Welcome to my site.\"\nmsgstr \"Bienvenido a mi sitio.\"\n</code></pre> <p>Compile the message files with:</p> bash<pre><code>django-admin compilemessages\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#step-4-switching-languages","title":"Step 4: Switching Languages","text":"<p>Ensure LocaleMiddleware is enabled in your MIDDLEWARE setting:</p> python<pre><code>MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.locale.LocaleMiddleware',  # Enable LocaleMiddleware\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n</code></pre> <p>Manage language preferences in views or templates. Here\u2019s an example of setting the language via a URL parameter in a view:</p> Python<pre><code>from django.utils import translation\n\ndef set_language(request):\n    user_language = 'fr'\n    translation.activate(user_language)\n    request.session[translation.LANGUAGE_SESSION_KEY] = user_language\n    return redirect('/')\n</code></pre> <p>And in your template, provide a language selection form:</p> html<pre><code>&lt;form action=\"{% url 'set_language' %}\" method=\"post\"&gt;\n  {% csrf_token %}\n  &lt;input name=\"next\" type=\"hidden\" value=\"{{ redirect_to }}\"&gt;\n  &lt;select name=\"language\"&gt;\n    {% for lang in LANGUAGES %}\n      &lt;option value=\"{{ lang.0 }}\"&gt;{{ lang.1 }}&lt;/option&gt;\n    {% endfor %}\n  &lt;/select&gt;\n  &lt;input type=\"submit\" value=\"Go\"&gt;\n&lt;/form&gt;\n</code></pre>","tags":["Django"]},{"location":"blog/2024/05/17/internationalization-and-localization-in-django-a-quick-guide/#conclusion","title":"Conclusion","text":"<p>Internationalizing and localizing your Django application opens it up to a global audience, making it more accessible and user-friendly. By following these steps, you can efficiently manage multiple languages and ensure that your application meets the cultural and linguistic needs of its users. Embrace the world of i18n and l10n in Django and take your web applications to the next level!</p>","tags":["Django"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/","title":"gThumb lightweight image editor in ubuntu","text":"","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#gthumb-lightweight-image-editor-in-ubuntu","title":"gThumb lightweight image editor in ubuntu","text":"<p>gThumb is a popular image viewer and organizer for the GNOME desktop environment on Linux systems, including Ubuntu. It provides various features for viewing, organizing, and editing images.</p> <p></p> <p>To install gThumb on Ubuntu, you can use the following steps:</p>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#1-using-ubuntu-software-center","title":"1. Using Ubuntu Software Center:","text":"<ul> <li>Open Ubuntu Software Center from the Applications menu.</li> <li>Use the search bar to search for \"gThumb\".</li> <li>Click on the gThumb icon in the search results.</li> <li>Click the \"Install\" button to install it.</li> </ul>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#2-using-terminal","title":"2. Using Terminal:","text":"<ul> <li>Open a terminal window by pressing Ctrl + Alt + T.</li> <li> <p>Type the following command:</p> bash<pre><code>sudo apt update\nsudo apt install gthumb\n</code></pre> </li> <li> <p>Enter your password when prompted, and gThumb will be installed.</p> </li> </ul> <p>Once installed, you can launch gThumb from the Applications menu or by searching for it in the Activities Overview (press the Windows key and type \"gThumb\").</p> <p>With gThumb, you can browse through your image collection, organize them into albums, perform basic editing tasks like cropping and resizing, and even share images directly from the application. It's a versatile tool for managing your image library on Ubuntu.</p>","tags":["Linux"]},{"location":"blog/2024/05/09/gthumb-lightweight-image-editor-in-ubuntu/#reference","title":"Reference","text":"<ul> <li>Is there a lightweight tool to crop images quickly?</li> </ul>","tags":["Linux"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"office/draft/","title":"Draft","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul> <p>Embedded Device</p> working with .py fileDjango <p>To connect to an embedded device using Python, you typically use networking libraries such as socket or higher-level libraries built on top of it, like paramiko for SSH connections or pyserial for serial communication.</p> <p>Here's a basic example of how you can use the socket library to connect to a device using its IP address and a specific port:</p> <pre><code>import socket\n\n# IP address and port of the embedded device\ndevice_ip = '192.168.1.100'\ndevice_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the device\ntry:\n    client_socket.connect((device_ip, device_port))\n    print(\"Connected to the embedded device\")\n\n    # Here you can send and receive data to/from the device\n\n    # Example: Sending data\n    message = \"Hello, device!\"\n    client_socket.sendall(message.encode())\n\n    # Example: Receiving data\n    received_data = client_socket.recv(1024)\n    print(\"Received:\", received_data.decode())\n\nexcept ConnectionRefusedError:\n    print(\"Connection to the embedded device refused\")\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre> <p>Replace <code>192.168.1.100</code> with the actual IP address of your embedded device, and <code>12345</code> with the actual port number it's listening on.</p> <p>Once connected, you can send and receive data to/from the device as needed. Make sure to handle exceptions appropriately, such as <code>ConnectionRefusedError</code> if the connection is refused.</p> <p>Depending on your specific requirements and the capabilities of your embedded device, you might need to use different libraries or protocols. For example, if your device supports SSH, you might use <code>paramiko</code> for SSH connections. If your device communicates over serial ports, you might use <code>pyserial</code>.</p> <p>To convert the provided Python code into a Django application, you can create a Django view that handles the connection to the embedded device when a certain URL is accessed. Below is an example of how you can do this:</p> viewsurl <p>First, make sure you have Django installed. If not, you can install it using pip:</p> <pre><code>#1. \npip install django\n#2. \ndjango-admin startproject embedded_device_project\n#3.\ncd embedded_device_project\npython manage.py startapp embedded_device_app\n</code></pre> embedded_device_app/views.py<pre><code># 4. \n# embedded_device_app/views.py\n\nfrom django.http import HttpResponse\nimport socket\n\ndef connect_to_device(request):\n    # IP address and port of the embedded device\n    device_ip = '192.168.1.100'\n    device_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n    # Create a socket object\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        # Connect to the device\n        client_socket.connect((device_ip, device_port))\n        message = \"Hello, device!\"\n        client_socket.sendall(message.encode())\n        received_data = client_socket.recv(1024).decode()\n        response_message = f\"Received from device: {received_data}\"\n    except ConnectionRefusedError:\n        response_message = \"Connection to the embedded device refused\"\n    finally:\n        # Close the socket\n        client_socket.close()\n\n    return HttpResponse(response_message)\n</code></pre> urls.py<pre><code># embedded_device_project/urls.py\n\nfrom django.urls import path\nfrom embedded_device_app import views\n\nurlpatterns = [\n    path('connect-to-device/', views.connect_to_device, name='connect_to_device'),\n]\n</code></pre> <p>Now, when you access the URL <code>http://127.0.0.1:8000/connect-to-device/</code> in your browser, Django will attempt to connect to the embedded device and send a message. The response from the device (if any) will be displayed in the browser. Ensure to replace the IP address and port with the appropriate values for your embedded device.</p>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Introduction","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<p>Tip</p> <ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - <code>development domain</code></li> <li>cqweb.ictc.com.np - <code>production domain</code></li> </ul> <p><code>application</code></p> <ul> <li>cqnoval.info.com.np - <code>swagger</code></li> <li>cqnovalid.info.com.np - <code>login endpoint</code></li> </ul> <p><code>tools</code></p> <ul> <li>Jenkins - <code>on port 8080</code></li> <li>portainer - <code>on port 9000</code></li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p>Note</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 svgs\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 useRoles\n\u251c\u2500\u2500 json\n\u251c\u2500\u2500 layouts\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 redux\n\u2502   \u2514\u2500\u2500 store\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 styles\n\u2514\u2500\u2500 utils\n</code></pre> <p>Description</p> <ul> <li><code>assets</code> : contains the image and svg files.</li> <li><code>components</code> : list of all the resuable components.</li> <li><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</li> <li><code>json</code> : has the caleder filter data.</li> <li><code>layouts</code> : contains the base layout of cqweb.</li> <li><code>services</code> : core redux - action, reducer, store</li> <li><code>styles</code> : contains the sass styles.</li> <li><code>utils</code> : list of reusable functions.</li> </ul>"},{"location":"office/intro/#installation","title":"Installation","text":"<p>Success</p> bash<pre><code>npm i --legacy-peer-deps\n\nnpm run product\n</code></pre>"},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/misc/","title":"Misc","text":""},{"location":"office/misc/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/misc/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/misc/#jest","title":"Jest","text":"<p>In the context of package management, like with <code>npm</code> (Node Package Manager) for JavaScript projects, <code>--save</code> and <code>--save-dev</code> are options used during the installation of packages. Here's a simple explanation of the difference:</p> <ul> <li> <p>--save: When you install a package using --save, it means the package will be listed as a dependency in your project's <code>package.json</code> file. This indicates that your project needs this package to run properly. These dependencies are typically packages required for the application to function correctly in production.</p> </li> <li> <p>--save-dev: On the other hand, when you install a package using --save-dev, it means the package will be listed as a development dependency in your project's <code>package.json</code> file. This indicates that your project only needs this package during development, such as for testing, building, or other development-related tasks. These dependencies are typically tools or libraries used during the development process, but not necessary for the application to run in production.</p> </li> </ul> <p>So, in summary:</p> <ul> <li>Use --save for packages your project needs to run.</li> <li>Use --save-dev for packages your project needs during development but not for running the final application.</li> </ul> <ul> <li>--save <code>vs</code> --save-dev</li> <li>jest testing</li> <li>How To Structure React Projects From Beginner To Advanced</li> <li>useEffect by Example</li> </ul>"},{"location":"office/misc/#easy-thumbnail","title":"Easy Thumbnail","text":"<ul> <li>easy-thumbnails 2.8.5: pypi</li> <li>easy thumbnail: readthedocs</li> <li>easy thumbnail: github</li> </ul> <pre><code>from easy_thumbnails.fields import ThumbnailerImageField\n\nclass Profile(models.Model):\n    user = models.OneToOneField('auth.User')\n    photo = ThumbnailerImageField(upload_to='photos', blank=True)\n</code></pre>"},{"location":"office/misc/#step-1","title":"Step 1:","text":"<pre><code>Run pip install easy-thumbnails.\n</code></pre>"},{"location":"office/misc/#step-2","title":"Step 2:","text":"<pre><code>Add `easy_thumbnails` to your INSTALLED_APPS setting:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'easy_thumbnails',\n)\n```\n</code></pre>"},{"location":"office/misc/#step-3","title":"Step 3:","text":"<pre><code>Run `manage.py` migrate `easy_thumbnails`\n</code></pre>"},{"location":"office/secret/","title":"Secret","text":""},{"location":"office/secret/#jenkins","title":"JENKINS","text":"<pre><code>URL - http://ci-info.info.com.np:8080/\n\nuser: infoadmin\npwd: anil{****}1234\n</code></pre>"},{"location":"office/secret/#gitlab","title":"Gitlab","text":"<pre><code>URL: http://gitserver.info.com.np\n\npwd: bi{.........}\n</code></pre>"},{"location":"office/secret/#postmen","title":"Postmen","text":"<pre><code>mail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/secret/#zimbra","title":"Zimbra","text":"<pre><code>URL: https://mail.info.com.np\n\nmail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/secret/#ictc","title":"ICTC","text":"<pre><code>URL: https://cqweb.ictc.com.np/#/\n\nuser: anil\npwd: Anil@{*****}\n\nuser: admin_***\npwd: BaSs@9627{*}\n</code></pre>"},{"location":"office/secret/#cqweb","title":"CQWEB","text":"<pre><code>URL: https://cqweb.info.com.np\n\nuser: admin_bbask\npwd: SsBa@9999\n\nuser: bishow\npwd: $Bishow88\n\nuser: zoro\npwd: $Bishow88\n\nuser: biju\npwd: 1q2w3E**@\n\nuser: Aakash\npwd: 1q2w3E**@\n\nuser: sp\npwd: Password1234$\n\nuser: amit\npwd: 1q2w3E**@\n\nuser: bijay\npwd: 1q2w3E**@\n\nuser: sajal\npwd: 1q2w3E**@\n</code></pre>"},{"location":"office/secret/#infocus360-not-active","title":"Infocus360 (not active)","text":"<p>Danger</p> <pre><code>URL: https://infocus360.ispl.com.np\n\nuser: bishow\npwd: 1q2w3E**@\n\nuser: admin\npwd: 1q2w3E*\n</code></pre>"},{"location":"office/secret/#zimbra-mail-updated","title":"Zimbra MAIL <code>updated</code>","text":"<p>Success</p> <pre><code>URL: http://mail.info.com.np/webmail\n\nmail: bishow.thapa@info.com.np\npwd: I$VqIS~i%DTE\n</code></pre>"},{"location":"office/secret/#cedro","title":"Cedro","text":"<p>Success</p> <pre><code>url: https://cedro.percipio.com\nuser: anil.maharjan@ispl.com.np\npwd: Welcome1\n</code></pre>"},{"location":"office/secret/#clickup","title":"Clickup","text":"<p>Success</p> <pre><code>url: https://app.clickup.com/login\nmail: bishow.thapa@info.com.np\npwd: 75NHYbVWkWFM8pWyjWYD\n</code></pre>"},{"location":"office/secret/#ispl-website-cpanel","title":"ISPL WEBSITE CPANEL","text":"<p>Success</p> <pre><code># URL\nhttps://s717.sgp8.mysecurecloudhost.com:2083/\n# USERNAME\nbishow@allianceasianepal.org.np\n# PASSWORD\nBishow@123##\n</code></pre>"},{"location":"office/secret/#hr-app","title":"HR app","text":"<p>Note</p> <pre><code>https://hr.my/go/\ndoyahi8886@bizatop.com\nadminadmin1234\n\nhttps://hr.my/go/\nbishow.thapa@info.com.np\nadmin1234\n</code></pre>"},{"location":"office/clickup/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/clickup/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/clickup/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/clickup/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/clickup/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/clickup/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/clickup/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/clickup/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/clickup/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/clickup/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/clickup/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/clickup/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/clickup/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/clickup/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/clickup/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/clickup/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/clickup/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/clickup/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/clickup/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/clickup/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/clickup/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/clickup/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        if (response.isSuccess) {\n        message.success(\"Successfully updated company\");\n        dispatch(\n            success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n        );\n        # added here\n        await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/clickup/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/clickup/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/clickup/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/clickup/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/clickup/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/components/HTMLRenderer/","title":"HTMLRenderer","text":"<p>Example</p>"},{"location":"office/components/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> IndexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/components/JSON-stringify/","title":"Using JSON.stringify","text":"<p>Example</p> <p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n...\nattentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/components/old/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/documentation/architecture/","title":"Architecture","text":""},{"location":"office/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/documentation/blog/","title":"Blog Module","text":"<p>Success</p> StagesView.js<pre><code>...\nimport Blog from \"components/Blog\";\n...\n\n{/* Blog */}\n&lt;div className=\"business-header\"&gt;\n    &lt;div className=\"business-header-title\" style={{ fontSize: \"1.1em\" }}&gt;\n        Blog\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;Blog tenderId={tenderId} /&gt;\n</code></pre> <pre><code>src\n- components\n---- Blog\n-------BlogForm.js\n-------BlogItem.js\n-------index.js\n</code></pre> <p>Tips</p> BlogBlogItemBlogFormInfinite Scroll index.js<pre><code>import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Skeleton, Row, Col, Affix, Dropdown } from \"antd\";\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    blogAdd,\n    updateBlogMessage,\n    getBlogPagination,\n} from \"services/redux/officeresource/blog/action\";\nimport {\n    employeeProfileDetail,\n    actionForGetAllUsersPP,\n} from \"services/redux/profile/profile.action\";\nimport BlogItem from \"./BlogItem\";\nimport BlogForm from \"./BlogForm\";\n\nconst Blog = ({ tenderId }) =&gt; {\nconst dispatch = useDispatch();\nconst [form] = Form.useForm();\nconst pageSize = 40;\n\nconst scrollableRef = useRef();\n\nconst {\n    addBlogMessageLoading,\n    addBlogMessageResp,\n    getBlogMsgPaginationResp,\n    getBlogMsgPaginationLoading,\n} = useSelector((state) =&gt; state.blogReducer);\n\nconst { profileInfo } = useSelector((state) =&gt; state.profile);\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst [editMode, setEditMode] = useState(false);\nconst [editedBlog, setEditedBlog] = useState({});\n\nconst appUserIdUC = sessionStorage?.userId.toUpperCase();\n\n// SUPERAPI **************************************************************\nconst { listingAllUsersProfileResp, listingAllUsersProfileLoading } =\n    useSelector((state) =&gt; state.profile);\n\nconst [listingAllProfile, setListingAllProfile] = useState([]);\n\nuseEffect(() =&gt; {\n    dispatch(actionForGetAllUsersPP());\n}, []);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(listingAllUsersProfileResp)) {\n        setListingAllProfile(listingAllUsersProfileResp);\n    }\n}, [listingAllUsersProfileResp]);\n// end SUPERAPI **************************************************************\n\nuseEffect(() =&gt; {\n    dispatch(\n        employeeProfileDetail({\n            AppUserId: sessionStorage?.userId.replaceAll('\"', \"\"),\n        })\n    );\n}, []);\n\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nconst handleEditClick = (item) =&gt; {\n    setEditMode(true);\n    setEditedBlog({\n        id: item.id,\n        name: item.name,\n        body: item.body,\n    });\n};\n\nconst handleEditSubmit = (values) =&gt; {\n    const updatedBlog = {\n        id: editedBlog.id,\n        userId: sessionStorage?.userId,\n        subject: \"string\",\n        name: editedBlog.name,\n        body: values.editedMessage,\n        isActive: true,\n        referenceCode: tenderId,\n        lastmodified: moment().format(),\n    };\n\n    dispatch(updateBlogMessage(editedBlog.id, updatedBlog));\n\n    setEditMode(false);\n    setEditedBlog({});\n};\n\nconst onFinish = (values) =&gt; {\n    let data = {};\n    if (values) {\n    data = {\n        userId: sessionStorage?.userId,\n        referenceCode: tenderId,\n        body: values.message,\n        creationTime: moment().format(),\n        subject: \"string\",\n        isActive: true,\n    };\n    // dispatch(blogAdd(data));\n    try {\n        dispatch(blogAdd(data));\n    } catch (err) {\n        console.log(\"error: \", err);\n    } finally {\n        form.resetFields();\n    }\n    }\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n        &lt;BlogForm\n            form={form}\n            onFinish={onFinish}\n            loading={addBlogMessageLoading}\n        /&gt;\n    &lt;/div&gt;\n    );\n};\n\nexport default Blog;\n</code></pre> BlogItem.js<pre><code>import moment from \"moment\";\nimport { Form, Button, Input } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n// import BlogForm from \"./BlogForm\";\nimport MatchingImageDisplay from \"components/shared/MatchingImageDisplay\";\nconst { TextArea } = Input;\n\nconst BlogItem = ({\n    blogMsg,\n    appUserIdUC,\n    editMode,\n    setEditMode,\n    editedBlog,\n    handleEditClick,\n    handleEditSubmit,\n    listingAllProfile,\n}) =&gt; {\n\nconst [form] = Form.useForm();\n\nreturn (\n    &lt;&gt;\n    {blogMsg.map((item, index) =&gt; (\n        &lt;div\n            className=\"blogWrapper\"\n            key={index}\n            style={{\n                display: \"flex\",\n                justifyContent:\n                JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"flex-end\"\n                    : \"flex-start\",\n            }}\n        &gt;\n        {JSON.stringify(item?.userId)?.toUpperCase() !== appUserIdUC ? (\n            &lt;span\n                style={{\n                    height: \"40px\",\n                    width: \"40px\",\n                    background: \"#67a1e4\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"50%\",\n                    color: \"#FFF\",\n                    marginRight: \"12px\",\n                }}\n            &gt;\n            &lt;MatchingImageDisplay\n                listingAllProfile={listingAllProfile}\n                item={item}\n            /&gt;\n            &lt;/span&gt;\n        ) : null}\n\n        &lt;div\n            style={{\n                display: \"inline-block\",\n                maxWidth: \"80%\",\n                background:\n                    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"#E8EBFA\"\n                    : \"#FFFFFF\",\n                marginBottom: \"1em\",\n                padding: \"0.4em 1em\",\n            }}\n        &gt;\n            &lt;div&gt;\n            {editMode &amp;&amp; editedBlog.id === item.id ? (\n                // &lt;BlogForm\n                //   initialValue={item.body}\n                //   onFinish={(values) =&gt; {\n                //     handleEditSubmit(item.id, values.editedMessage);\n                //     // toggleEditMode();\n                //   }}\n                // /&gt;\n                &lt;Form\n                    onFinish={handleEditSubmit}\n                    initialValues={{ editedMessage: editedBlog.body }}\n                &gt;\n                &lt;Form.Item\n                    name=\"editedMessage\"\n                    rules={[\n                    {\n                        required: true,\n                    },\n                    ]}\n                &gt;\n                    {/* &lt;Input */}\n                    &lt;TextArea\n                        style={{\n                            // height: \"42px\",\n                            borderBottom: \"4px solid #8e92d1\",\n                            resize: \"none\",\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                    Save\n                &lt;/Button&gt;\n                &lt;Button onClick={() =&gt; setEditMode(false)}&gt;Cancel&lt;/Button&gt;\n                &lt;/Form&gt;\n            ) : (\n                &lt;&gt;\n                &lt;div\n                    style={{\n                        display: \"flex\",\n                    }}\n                &gt;\n                    &lt;span className=\"blog-username\"&gt;\n                    {item?.name?.toUpperCase()}\n                    &lt;/span&gt;\n                    &lt;span style={{ color: \"#807e7e\" }}&gt;\n                    {item?.lastmodified\n                        ? \"Modified \" + moment(item?.lastmodified).calendar()\n                        : moment(item?.creationTime).startOf(\"min\").fromNow()}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div\n                    className=\"blogBody\"\n                        style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                &gt;\n                    &lt;p&gt;{item?.body}&lt;/p&gt;\n                    &lt;span\n                    className={\n                        JSON.stringify(item?.userId) ===\n                        sessionStorage?.userId.toUpperCase()\n                        ? \"blog__content\"\n                        : \"\"\n                    }\n                    &gt;\n                    {JSON.stringify(item?.userId)?.toUpperCase() ===\n                    appUserIdUC ? (\n                        &lt;EditOutlined onClick={() =&gt; handleEditClick(item)} /&gt;\n                    ) : null}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;/&gt;\n            )}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    ))}\n    &lt;/&gt;\n);\n};\n\nexport default BlogItem;\n</code></pre> BlogForm.js<pre><code>import { Form, Input, Button, Row, Col } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nconst { TextArea } = Input;\n\nconst BlogForm = ({ form, onFinish, loading }) =&gt; {\nreturn (\n    &lt;Form\n    name=\"blog\"\n    form={form}\n    onFinish={onFinish}\n    wrapperCol={{ span: 24 }}\n    style={{ background: \"#f9f9f9\", padding: \"2em 4em\" }}\n    &gt;\n    &lt;Row gutter={8}&gt;\n        &lt;Col span={22}&gt;\n        &lt;Form.Item\n            name=\"message\"\n            rules={[\n            {\n                required: true,\n            },\n            ]}\n        &gt;\n            &lt;TextArea\n            rows={2}\n            style={{\n                // height: \"42px\",\n                borderBottom: \"4px solid #8e92d1\",\n                resize: \"none\",\n                fontSize: \"1.1em\",\n            }}\n            /&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n        &lt;Col span={2}&gt;\n        &lt;Form.Item wrapperCol={{ span: 24 }}&gt;\n            &lt;Button\n            // type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                // added\n                background: \"none\",\n                border: \"none\",\n                color: \"#67a1e4\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            loading={loading}\n            &gt;\n            {/* Submit */}\n            &lt;SendOutlined style={{ fontSize: \"28px\" }} /&gt;\n            &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;/Form&gt;\n);\n};\n\nexport default BlogForm;\n</code></pre> <pre><code>const pageSize = 40;\nconst scrollableRef = useRef();\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\n{/* USEFFECT */}\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"office/documentation/internal-message/","title":"Internal Message","text":""},{"location":"office/documentation/internal-message/#internal-message","title":"Internal Message","text":"<p>Note</p> Companiesindex Companies.js<pre><code>// views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nimport { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> index.js<pre><code>// views/GlobalEmailChat/index.js\n\nconst ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/documentation/login/","title":"Login","text":"<p>Note</p> late attendanceleave typeindex lateAttendence.js<pre><code>...\nimport { useEffect, useState } from \"react\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\"\nimport { validateReason } from \"utils/validateReason\";\n\n\nconst { Modal, Form, Input, Spin, Alert, Select, message } = require(\"antd\");\nconst { Option } = Select;\n\nconst LateAttendence = ({id,data,leaveReasonPopUp,leaveStartdate,leaveEndDate})=&gt;{\n\n    ...\n    const [uploaders, setUploaders] = useState();\n    const [deafultLeaveType, setDefaultLeaveType] = useState([]);\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(remainingLeaveApplicationTypesListing)) {\n            const casualLeave = remainingLeaveApplicationTypesListing.find(obj =&gt; obj.leaveApplicationTypeDto.leaveTypeName === \"Casual\");\n            if(casualLeave?.leaveApplicationTypeDto?.id) {\n                form.setFieldsValue({\n                    leaveApplicationTypeId: casualLeave?.leaveApplicationTypeDto?.id,\n                })\n            }\n        }\n    }, [remainingLeaveApplicationTypesListing])\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n\n    ...\n\n    const startDate = moment(leaveStartdate);\n    const endDate = moment(leaveEndDate);\n    const durationInDays = endDate.diff(startDate, 'days');\n\n    const handleChange = (value, option) =&gt; {\n        const selectedTitle = option ? option.title : null;\n        const selectedValue = option ? option.value : null;\n\n        setDefaultLeaveType({\n            title: selectedTitle,\n            value: selectedValue\n        });\n    }\n\n\n    return (\n        &lt;div className=\"late_login_popup\"&gt;\n            &lt;Modal visible={true} footer={null} closable ={false} wrapClassName=\"late_login_popup_modal\"&gt;\n                {data &amp;&amp; \n                &lt;div className=\"time_format_login_popup\"&gt;\n                    Login Time:{moment(data).format(\"YYYY-MM-DD,HH:mm:ss A\")}\n                &lt;/div&gt;}\n                &lt;div className=\"late_attendence_popup_header\"&gt;\n                    &lt;h3&gt;Kindly elaborate your reason for being late {leaveReasonPopUp &amp;&amp; \"and also leave reason\"} !!!&lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;br/&gt;\n                &lt;Form form={form} onFinish={onFinish}&gt;\n                    &lt;div style={{fontWeight:\"600\"}}&gt;Late Reason :&lt;/div&gt;\n                    &lt;Form.Item \n                        rules={[\n                            // {\n                            //     required:true,\n                            //     message: \"Please justify the reason\",\n                            // },\n                            validateReason(10, 2)\n                        ]}\n                        name=\"attendanceLateReason\"\n                        // label=\"Late Reason\"\n                    &gt;\n                        &lt;TextArea rows={4} style={{fontSize:\"15px\"}}/&gt;\n                    &lt;/Form.Item&gt;\n                    {leaveReasonPopUp &amp;&amp; \n                    &lt;div&gt;\n                        &lt;div style={{fontWeight:\"600\",marginTop:\"10px\"}}&gt;You have taken leave from {moment(leaveStartdate).format(\"YYYY-MM-DD\")} to {moment(leaveEndDate).format(\"YYYY-MM-DD\")} &lt;/div&gt;\n                        &lt;div &gt;Leave Reason :&lt;/div&gt;\n                        &lt;Form.Item rules={[\n                                // {\n                                //     required:true,\n                                //     message: \"Please justify the reason\",\n                                // },\n                                validateReason(10, 2)\n                            ]}\n                            name=\"attendanceLeaveReason\"\n                        // label=\"Leave Reason\"\n                        // className=\"late_reason_submit\"\n                        &gt;\n                            &lt;TextArea rows={4} style={{fontSize:\"15px\"}} /&gt;\n                        &lt;/Form.Item&gt;\n                        &lt;Form.Item\n                            className=\"form__group\"\n                            label=\"Choose Leave Type\"\n                            name=\"leaveApplicationTypeId\"\n                            rules={[\n                                {\n                                required: true,\n                                },\n                            ]}\n                            style={{\n                                paddingTop: \"10px\"\n                            }}\n                        &gt;\n                            &lt;Select\n                                placeholder=\"Please select\"\n                                autoComplete=\"off\"\n                                onChange={(value, option) =&gt; handleChange(value, option)}\n                            &gt;\n                                {\n                                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                                        &lt;Option\n                                            value={leaveType.leaveApplicationTypeId}\n                                            title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                            key={i}&gt;\n                                            {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                        &lt;/Option&gt;\n                                    ))}\n\n                            &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        {durationInDays &gt;= 3 &amp;&amp; deafultLeaveType?.title === \"Medical\"  ? (\n                            &lt;&gt;\n                            {uploaders?.map((u, i) =&gt; (\n                                &lt;Form.Item \n                                    className=\"form__group\" \n                                    name={[\"uploadedFileDtos\"]}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \"Please upload at least one file\",\n                                        },\n                                    ]} &gt;\n                                    &lt;ImageUploaderMultiple\n                                        name={u.name}\n                                        isMultipleFileAllowed={true}\n                                        id={u.id}\n                                        allowedExtensions={u.allowedExtensions}\n                                        index={i}\n                                        uploadedFileDtos={form.getFieldValue()}\n                                        formName=\"uploadedFileDtos\"\n                                        form={form}\n                                        callback={(e) =&gt; {\n                                            let olduploadedFileDtos = form.getFieldValue()\n                                                .uploadedFileDtos\n                                                ? [...form.getFieldValue().uploadedFileDtos]\n                                                : [];\n\n                                            let uploadedFileDtos = [...olduploadedFileDtos];\n                                            uploadedFileDtos.push(e);\n\n                                            form.setFieldsValue({\n                                                uploadedFileDtos,\n                                            });\n                                        }}\n                                    /&gt;\n                                &lt;/Form.Item&gt;\n                            ))} \n                            &lt;/&gt;\n                        ) : null}\n\n\n                    &lt;/div&gt;\n                    }\n                    &lt;Alert\n                        message=\"Informational Notes\"\n                        description=\"Give Valid Reason with 10 minimum character &amp; 2 words\"\n                        type=\"info\"\n                        showIcon\n                        style={{marginTop: '20px'}}\n                    /&gt;\n                &lt;div className=\"button_submit\"&gt;\n                    &lt;button className=\"late_Reason_Attendence_Submit\" htmlType=\"submit\"&gt;\n                    {attendenceAddNewResponseLoading ? &lt;Spin className=\"late_reason_spinner\"/&gt;: \"Submit\"}\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> leaveForm.js<pre><code>&lt;Form.Item\n    className=\"form__group\"\n    label=\"Choose Leave Type\"\n    name=\"leaveApplicationTypeId\"\n    rules={[\n        {\n            required: true,\n\n        },\n        ]}\n&gt;\n    &lt;Select\n        placeholder=\"Please select\"\n        autoComplete=\"off\"\n    &gt;\n        {\n            !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n            remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                &lt;Option\n                    value={leaveType.leaveApplicationTypeId}\n                    title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                    key={i}&gt;\n                    {leaveType?.leaveApplicationTypeDto?.leaveTypeName} {`(${leaveType?.remainingLeave &gt; 0 ? leaveType?.remainingLeave : 0} remaining out of ${leaveType?.allowedleave} days)`}\n                &lt;/Option&gt;\n            ))}\n\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>import { getRemainingLeaveApplicationTypesForEmployee } from \"../../../services/redux/requistions/leaveApplication/action\";\n\nconst {\n    leaveApplicationPagination,\n    leaveApplicationPaginationLoading,\n    remainingLeaveApplicationTypesListing,\n    remainingLeaveApplicationTypesListingLoading,\n    addLeaveApplicationResp,\n} = useSelector((state) =&gt; state.leaveApplication);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(addLeaveApplicationResp))\n    dispatch(getRemainingLeaveApplicationTypesForEmployee());\n}, [addLeaveApplicationResp]);\n</code></pre>"},{"location":"office/documentation/login/#mail-leave-details","title":"Mail <code>leave Details</code>","text":"<p>Note</p> LeaveDetails.js<pre><code>import {\n    ...,\n    Select\n} from \"antd\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\";\n\nconst { Option } = Select;\n\nconst LeaveDetails = ({ leaveAppId }) =&gt; {\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(details)) {\n        form.setFieldsValue({\n            leaveApplicationTypeIdxx: details?.leaveApplicationTypeId,\n        })\n\n        console.log(\"details: \", details)\n        }\n    }, [details])\n\n     return !isEmpty(details) ? (\n        &lt;div className=\"mail-leave-details\"&gt;\n            ...\n\n            &lt;Form.Item\n                className=\"form__group\"\n                label=\"Choose Leave Type\"\n                name=\"leaveApplicationTypeIdxx\"\n                // rules={[\n                //     {\n                //     required: true,\n                //     },\n                // ]}\n                style={{\n                    paddingTop: \"10px\"\n                }}\n            &gt;\n                &lt;Select\n                    placeholder=\"Please select\"\n                    autoComplete=\"off\"\n                &gt;\n                    {\n                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                        &lt;Option\n                        value={leaveType.leaveApplicationTypeId}\n                        title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        key={i}&gt;\n                        {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        &lt;/Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            ...\n        &lt;/div&gt;\n     )\n\n}\n\nexport default LeaveDetails;\n</code></pre> leaveForm.js<pre><code>import { message } from \"antd\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\n\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nconst LeaveForm = ({\n    remainingLeaveApplicationTypesListing,\n    setHideLeaveDrawer,\n}) =&gt; {\n\n    const [uploaders, setUploaders] = useState();\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {uploaders?.map((u, i) =&gt; (\n                &lt;Form.Item className=\"form__group\" name={[\"uploadedFileDtos\"]} &gt;\n                    &lt;ImageUploaderMultiple\n                        name={u.name}\n                        isMultipleFileAllowed={true}\n                        id={u.id}\n                        allowedExtensions={u.allowedExtensions}\n                        index={i}\n                        uploadedFileDtos={form.getFieldValue()}\n                        formName=\"uploadedFileDtos\"\n                        form={form}\n                        callback={(e) =&gt; {\n                            let olduploadedFileDtos = form.getFieldValue()\n                                .uploadedFileDtos\n                                ? [...form.getFieldValue().uploadedFileDtos]\n                                : [];\n\n                            let uploadedFileDtos = [...olduploadedFileDtos];\n                            uploadedFileDtos.push(e);\n\n                            form.setFieldsValue({\n                                uploadedFileDtos,\n                            });\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n            ))} \n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/login/#utils","title":"utils","text":"<p>Tip</p> validate Reason <pre><code>export const validateReason = (minChars, minWords) =&gt; ({\n    validator: (_, value) =&gt; {\n    const words = value.trim().split(/\\s+/);\n    const characterCount = value.trim().length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n        return Promise.reject(\n        new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n        );\n    }\n    return Promise.resolve();\n    },\n});\n</code></pre>"},{"location":"office/documentation/mail/","title":"Mail","text":"<p>While searching the reference in the <code>compose mail</code>, it doesn't show all the reference items?</p> <p>ComposeEmailDrawer</p> ComposeEmailDrawer.js<pre><code>onSearch={(value) =&gt; {\n    setSearchValueReference(value);\n    setReferencevalue(value);\n    setFilterParticipantType(\"REF\");\n    handleFilter(value, \"REF\");\n}}\n&lt;Form \n    name = \"participantTos\"/&gt;\nconst displayMessages = (status) = {}\n\n// page number: 3710\nreturn (\n    &lt;Option\n        key={index}\n        // key={data.id}\n        value={data.title}\n        // className={index}\n        // id={index}\n        label={[data.code, data.title]}\n    &gt;\n        &lt;div\n        className=\"compose-reference-wrapper\"\n        // key={index}\n        key={data.id}\n        &gt;\n        &lt;div\n            className=\"compose-references-code\"\n            title={data?.code}\n        &gt;\n            &lt;span&gt;{data?.code}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-title\"\n            title={data?.title}\n        &gt;\n            &lt;span&gt; {data?.title}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-description\"\n            title={data?.description}\n        &gt;\n            &lt;span&gt;{data?.description}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Option&gt;\n);\n</code></pre> <p>Solved</p> Solved BasicSolved Advanced ComposeEmailDrawer.js<pre><code>// const isSelected = mailRefDtos.includes(data.code);\n// also add this \nconst isSelected = mailRefDtos.includes(`${data.code}-${data.title}`);\n&lt;Option\n    key={index}\n    //value={data.title}\n    // add this\n    value={`${data.code}-${data.title}`}\n    label={[data.code, data.title]}\n&gt;\n&lt;/Option&gt;\n</code></pre> ComposeEmailDrawer.js<pre><code>&lt;div className=\"email-text\"&gt;Reference&lt;/div&gt;\n&lt;Form.Item\n    className=\"form__group compose-ref-select\"\n    name=\"mailMessageReferenceDtos\"\n    rules={[\n        {\n            required: closeWindow === \"newDraft\" ? false : true,\n            message: \"\",\n        },\n    ]}\n&gt;\n    &lt;Select\n        onSelect={(value) =&gt; {\n            {/* OLD CODE */}\n            const uniqueArray = Array.from(\n                new Set([...mailRefDtos, value])\n            );\n\n            {/* NEW CODE */}\n            const uniqueArray = Array.from(\n                new Set([\n                    // Extract substring before underscore\n                    ...mailRefDtos.map(dto =&gt; dto.split('_')[0]),\n\n                    // Extract substring before underscore from the new value\n                    value.split('_')[0]\n                ])\n            );\n        })}\n    /&gt;\n&lt;/Form.Item&gt;\n\n\n{/* ADDED THIS CODE */}\nconst isSelected = mailRefDtos.includes(data?.code);\n\nreturn (\n    &lt;Option\n        key={index}\n        {/* ADDED UNDERSCORE */}\n        value={`${data.code}_${data.title}`}\n        label={[data.code, data.title]}\n    &gt;\n)\n</code></pre>"},{"location":"office/documentation/mail/#dashboard-events","title":"Dashboard Events","text":"PublicEvents Home/Events/PublicEvents.js<pre><code>// added Dropdown, Menu\nimport { Form, Image, Modal, Skeleton, Tooltip, Dropdown, Menu } from \"antd\";\n\nconst PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n\n    // added\n    const [openEventModal, setOpenEventModal] = useState(false);\n\n    const menu = (\n        &lt;Menu&gt;\n        &lt;Menu.Item\n            onClick={() =&gt; {\n                setOpenEventModal(true);\n            }}\n        &gt;\n            Holiday\n        &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                &lt;h4 className=\"dashboards__body--title\"&gt;Events&lt;/h4&gt;\n                &lt;div className=\"\"&gt;\n                    &lt;WechatOutlined\n                        onClick={() =&gt; {\n                            setInternalVisible(true);\n                        }}\n                    /&gt;\n\n                    {/* added */}\n                    &lt;Dropdown.Button\n                        overlay={menu}\n                        className=\"new_menu\"\n                        style={{\n                            marginBottom: \"5px\",\n                            width: \"20px\",\n                            border: \"none\",\n                            marginLeft: \"2px\",\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/documentation/mail/#dashboard-flip-card","title":"Dashboard Flip Card","text":"flip-card tender.js<pre><code>import ProjectsLists from \"./DashboardComponents/ProjectsLists\";\n\nconst TenderLists = ({ classNames }) =&gt; {\n    const [rotate, setRotate] = useState(0);\n\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n\n                {/* FRONT */}\n                &lt;div className=\"flip-card-front\"&gt;\n                    &lt;div\n                        className={\"dashboards__tenderlist dashboards__body \" + classNames}\n                        style={{ height: \"495px\" }}\n                    &gt;\n                        &lt;div className=\"dashboards__bodyWrap\"&gt;\n                        &lt;h4 className=\"dashboards__body--title\"&gt;\n                            Tenders/Projects\n                            &lt;span\n                                onClick={() =&gt; {\n                                    setRotate(rotate + 1);\n                                }}\n                                style={{\n                                    marginLeft: \"10px\",\n                                    height: \"30px\",\n                                    marginBottom: \"10px\",\n                                }}\n                            &gt;\n                                &lt;img\n                                    src=\"./assets/svg/toggle-arrow.svg\"\n                                    height={15}\n                                    alt=\"complete\"\n                                /&gt;\n                            &lt;/span&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* BACK */}\n                &lt;div className=\"flip-card-back\"&gt;\n                    &lt;div\n                        style={{\n                        backfaceVisibility: \"hidden\",\n                        }}\n                    &gt;\n                        &lt;div\n                            className={\n                                \"dashboards__tenderlist dashboards__body \" + classNames\n                            }\n                            &gt;\n                            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                                &lt;h4 className=\"dashboards__body--title\"&gt;\n                                Projects/Tenders\n                                &lt;span\n                                    onClick={() =&gt; {\n                                        setRotate(rotate + 1);\n                                    }}\n                                    style={{\n                                        marginLeft: \"10px\",\n                                        height: \"30px\",\n                                        marginBottom: \"10px\",\n                                    }}\n                                &gt;\n                                    &lt;img\n                                        src=\"./assets/svg/toggle-arrow.svg\"\n                                        height={15}\n                                        alt=\"complete\"\n                                    /&gt;\n                                &lt;/span&gt;\n                                &lt;/h4&gt;\n                            &lt;/div&gt;\n\n                            {/* Components */}\n                            &lt;ProjectsLists /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/mail/#email-issue","title":"Email Issue","text":"<p>while <code>reply all</code>, <code>reply</code>, <code>forward</code> the application crashed</p> <ul> <li><code>/email-compose?applicationType=newEmail</code> - working</li> <li><code>/email-compose?applicationType=reply</code> - not working</li> <li><code>/email-compose?applicationType=replyall</code> - not working</li> <li><code>/email-compose?applicationType=forward</code> - not working</li> </ul> <p>Danger</p> displayMessagescontactQuickAddEmailRespsonsecurrentSelectedMessage useEffectComposeEmailDrawer <pre><code>useEffect(() =&gt; {\n    {/* DEBUG THIS WHEN NEW CONTACT ADDED THIS BECOMES EMPTY */}\n    console.log(\"participantTypeTos: \", participantTypeTos)\n\n    if (applicationTypeStatus) {\n        if (applicationTypeStatus === \"reply\") {\n\n            // IMPORTANT\n            displayMessages(applicationTypeStatus);\n\n            form.setFieldsValue({\n                participantCCs: [],\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n            });\n        } else if (applicationTypeStatus === \"replyall\") {\n            form.setFieldsValue({\n                participantCCs: newCCs?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                uploadedFileDtos: [],\n            });\n        }\n\n        // others ...\n    }\n})\n</code></pre> ComposeEmailDrawer.js<pre><code>const displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom = currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n    let participantTypeTos =\n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        });\n    let participantTypeCCs = !isEmpty(\n        currentSelectedMailMessage?.applicationTypeDetails?.cCs\n        )\n        ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map(\n            (typeTos) =&gt; {\n                return { emailAddress: typeTos.emailAddress };\n            }\n        )\n    : [];\n\n    const participantTos = getParticipantsInfo(participantTypeTos);\n    const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n\n    if (status !== \"reSend\") {\n\n        if (status === \"composeDraft\") {\n            form.setFieldsValue({\n                participantFrom: messageParticipantsFrom[0],\n            });\n            setEditorData(currentSelectedMailMessage.body);\n        } else {\n            let data = `From:${\n                participantTypeFrom?.emailAddress\n            }  &lt;br&gt; To:${participantTos} ${\n                partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n            } &lt;br&gt;  Date:${\n                currentSelectedMailMessage?.creationTime &amp;&amp;\n                moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n                },${moment(currentSelectedMailMessage?.creationTime).format(\n                \"LT\"\n            )} &lt;br&gt; ${currentSelectedMailMessage.body} &lt;br&gt;`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n        if (status === \"emailForwardSend\") {\n            let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")},${moment(\n            currentSelectedMailMessage?.creationTime,\"HH:mm:ss\"\n            ).format(\"LT\")} ${\n            (currentSelectedMailMessage?.companyName\n                ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                    .companyName\n                : \"\",\n            currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                .emailAddress)\n            }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n    } else if (status === \"reSend\") {\n        let data = `${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    } else {\n        let data = `Date:${\n            currentSelectedMailMessage?.creationTime &amp;&amp;\n            moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n        } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n};\n</code></pre> <pre><code>  const { contactQuickAddEmailRespsonse } = useSelector((state) =&gt; state.contactCompanyPerson);\n\n  useEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n        if (filterParticipantType == \"To\") {\n            form.setFieldsValue({\n            participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n                ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n                : [emailAddressResp],\n            });\n        } else if (filterParticipantType == \"CC\") {\n            form.setFieldsValue({\n            participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n                ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n                : [emailAddressResp],\n            });\n        }\n    }\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> <pre><code>useEffect(() =&gt; {\n    // ...\n    if (!isEmpty(currentSelectedMailMessage)) {}\n}, [\n    applicationTypeStatus,\n    currentSelectedMailMessage,\n    messageParticipantsFrom,\n]);\n</code></pre> <ul> <li>file-saver <code>npm</code></li> </ul>"},{"location":"office/documentation/mail/#bug-pin-pointed","title":"Bug pin-pointed","text":"<p>Bug</p> ComposeEmailDrawer.js<pre><code>{/* page number: 1222 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        // displayMessages(applicationTypeStatus);\\\n        console.log(\"participantTypeTos: \", participantTypeTos)\n        form.setFieldsValue({\n            participantCCs: [],\n            // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n            //   return typeTos;\n            // }),\n        });\n    }\n}\n</code></pre> <p>Success</p> Solved Tos <code>Reply</code>git file changes ComposeEmailDrawer.js<pre><code>const[contactTos, setContactTos] = useState([])\n\n\n{/* pagenumber: 572 */}\nconst displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* ADDDED !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos)\n    ?\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n    })\n    : [];\n}\n\n---\n\n{/* pagenumber: 1225 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        displayMessages(applicationTypeStatus);\n        form.setFieldsValue({\n        participantCCs: [],\n\n        {/* ADD !isEmpty */}\n        participantTos: !isEmpty(participantTypeTos) ?\n            participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        })\n        //: [],\n        : contactTos\n        })\n    }\n}\n\n{/* page num: 1469  */}\nuseEffect(() =&gt; {\n    if (activeEmailSignatureDetailsResponse) {\n\n    let signatureData = activeEmailSignatureDetailsResponse?.body\n        ? `&lt;div id=\"signatureData\" ref={${ref}}&gt;&lt;br/&gt;${activeEmailSignatureDetailsResponse?.body}&lt;/div&gt;`\n        : \"\";\n    const sign = localStorage.getItem(\"signatureData\");\n\n    let participantTypeFrom = \n        currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* aded !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos) ? \n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map(\n        (typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        }\n        ) : [];\n    }\n})\n\n{/* pagenumber: 1409 */}\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n    let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n    setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n\n        {/* ADDED */}\n        const uniqueMail = new Set([...form.getFieldsValue()?.participantTos, emailAddressResp])\n        setContactTos([...uniqueMail])\n\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n}, [contactQuickAddEmailRespsonse]);\n\n\n{/* pagenumber: 1649 */}\nconst autoDraft = (e, participant) =&gt; {\n    {/* UPDATE THIS */}\n    let newParticipantArrTo = form.getFieldsValue().participantTos \n    ? [...form.getFieldsValue().participantTos]\n    : [];\n}\n</code></pre> <pre><code>git diff --stat\nsrc/views/Email/Includes/ComposeEmailDrawer.js | 42 ++++++++++++++++++++++++++++++------------\n1 file changed, 30 insertions(+), 12 deletions(-)\n</code></pre> <p>Abstract</p> <pre><code>const [currentSelectedMailMessage, setCurrentSelectedMailMessage] = useState({});\n\n{/* ADD THIS STATE */}\nconst [currentSelectedMailTos, setCurrentSelectedMailTos] = useState([]);\n\n\nconsole.log(\"currentSelectedMailTos: \", currentSelectedMailTos)\n</code></pre>"},{"location":"office/documentation/mail/#api","title":"API","text":"<p>api</p> <pre><code>HOLIDAY  EXCEL in admin\nhttps://localhost:44386/api/app/adminModule/downloadSampleHolidayUploadExcel\nhttps://localhost:44386/api/app/adminModule/importHoliday\n\nHOLIDAY YEAR GET LISTING\nhttps://localhost:44386/api/app/organizerEvent/holidayEventsPagination?SearchByNepaliYear=2080&amp;MaxResultCount=50&amp;SkipCount=0\n</code></pre>"},{"location":"office/documentation/public-events/","title":"Dashboard Events","text":"<p>Example</p> <p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/documentation/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/documentation/redux-action-advanced/#api","title":"API","text":"<p>Example</p> <p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#action","title":"ACTION","text":"<p>Example</p> <p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/documentation/redux-action-advanced/#reducer","title":"REDUCER","text":"<p>Example</p> <p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-project-circular/","title":"Project Circular","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/documentation/reference-tender-circular/","title":"Tender Circular","text":"<p>Tender</p> <p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/documentation/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre>"},{"location":"office/documentation/sending-mail/","title":"Sending Mail","text":"<p>Example</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/documentation/sisco-view/","title":"Hr Module","text":"<p>HR Module</p> SicoViewindexAddUpdateSisterCompanyDrawer <p>To view the data in the <code>Basic</code>.</p> SiscoView.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/SiscoView.js\n\nconst SiscoView = ({\n    isUpdateSiscoCredentials,\n    showAddUpdateSisterCompanyDrawer,\n}) =&gt; {\n    return (\n        &lt;div className=\"profile__info profile__wrap--sister\"&gt;\n            &lt;div className=\"profile__info--wrapper\"&gt;\n                &lt;div className=\"profile__info--body\"&gt;\n                    &lt;div className=\"contactsDetails__info mb-3 sisco-header-wapper\"&gt;\n                        &lt;span className=\"contactsDetails--title bold w-100\"&gt;Basic&lt;/span&gt;\n                        &lt;div className=\"sisco-action-button\"&gt;\n                            &lt;div\n                                onClick={() =&gt; {\n                                showAddUpdateSisterCompanyDrawer(isUpdateSiscoCredentials);\n                                }}\n                            &gt;\n                                &lt;img src={editIcon} /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    {/* *********** IMPORTANT **************** */}\n\n                    {!isUpdateSiscoCredentials?.creationTime ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row sister\"&gt;\n                            &lt;div className=\"profile__row--label sister--label\"&gt;\n                                &lt;span className=\"profile__bodyTitle\"&gt;Creation Time&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div className=\"profile__row--data sister--data\"&gt;\n                                &lt;span className=\"profile__bodyInfo\"&gt;\n                                {moment(isUpdateSiscoCredentials?.creationTime).format(\n                                    \"YYYY/MM/DD\"\n                                )}\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                    {/* Added */}\n                    {!isUpdateSiscoCredentials?.address ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.address}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.website ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.website}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.linkedin ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.linkedin}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationNumber ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationNumber}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationDate ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationDate}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> index.js<pre><code>// views/Admin/index.js\n\nfunction Admin() {\n    const [isUpdateSiscoCredentials, setIsUpdateSiscoCredentials] = useState();\n\n    useEffect(() =&gt; {\n        if (addUpdatesisterCompanyResponse) {\n            console.log(\"addUpdatesisterCompanyResponse: \",addUpdatesisterCompanyResponse)\n            setIsUpdateSiscoCredentials(addUpdatesisterCompanyResponse);\n        }\n    }, [addUpdatesisterCompanyResponse]);\n\n    const rowEventhandlersSisco = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                setIsUpdateSiscoCredentials(record);\n                setSiscoCompanyId(record.id);\n                setHidden(false);\n                setEmployeeId();\n                setEmployeeUserId();\n                setDepartment({ id: \"\", type: \"\" });\n                setSiscoId(record.id);\n            },\n        };\n    };\n\n\n    const showAddUpdateSisterCompanyDrawer = (record) =&gt; {\n        form.resetFields();\n        if (record) {\n            setIsUpdateSisterCompany(record);\n        }\n        setAddUpdateSisterCompanyDrawerVisibility(true);\n    };\n\n    return (\n        &lt;div className=\"sidebars\"&gt;\n            {/* ... */}\n            &lt;div className=\"profiledetails\"&gt;\n                &lt;Collapse\n                    expandIconPosition=\"right\"\n                    accordion={true}\n                    defaultActiveKey={[\"1\"]}\n                &gt;\n                    &lt;Panel key=\"1\" header=\"Sisco User list\"&gt;\n                        &lt;div&gt;\n                            &lt;div style={{ height: \"43%\" }}&gt;\n                                &lt;SiscoUserList\n                                    setSiscoClassName={setSiscoClassName}\n                                    grantedPolices={grantedPolices}\n                                    rowEventhandlersSisco={rowEventhandlersSisco}\n                                    inputSearchValue={inputSearchValue}\n                                    sisterCompanyPagination={sisterCompanyPagination}\n                                    sisterCompanyPaginationLoading={\n                                    sisterCompanyPaginationLoading\n                                    }\n                                /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Panel&gt;\n                &lt;/Collapse&gt;\n            &lt;/div&gt;\n            {/* ... */}\n        &lt;/div&gt;\n    )\n}\n\nexport default Admin;\n</code></pre> AddUpdateSisterCompanyDrawer.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/AddUpdateSisterCompanyDrawer.js\n\nconst AddUpdateSisterCompanyDrawer = ({\n    onAddUpdateSisterCompanyClose,\n    drawerVisibility,\n    isUpdateSisterCompany,\n    sisterCompanyListing,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            visible={drawerVisibility}\n            width={472}\n            maskClosable={false}\n            className=\"drawer main-drawer-wrapper\"\n            onClose={onAddUpdateSisterCompanyClose}\n            closable={false}\n        &gt;\n            &lt;Header className=\"drawer__header\"&gt;\n                &lt;h4 className=\"drawer__header--title\"&gt;\n                {`${isUpdateSisterCompany ? \"Update\" : \"Create\"} Sister Company`}\n                &lt;/h4&gt;\n            &lt;/Header&gt;\n            &lt;div className=\"drawer__content\"&gt;\n                &lt;div className=\"drawer__content--wrapper\"&gt;\n                    &lt;div className=\"contact__content__wrapper\"&gt;\n                        &lt;Form\n                            layout=\"vertical\"\n                            form={form}\n                            name=\"control-hooks\"\n                            validateMessages={validateMessages}\n                            className=\"drawer-form-wrapper\"\n                        &gt;\n                        &lt;div className=\"drawer-form-row\"&gt;\n                            &lt;div className=\"drawer-form-group\"&gt;\n                                &lt;Form.Item\n                                    name=\"name\"\n                                    className=\"form__group\"\n                                    label=\"Sister Company Name\"\n                                    rules={[{ required: true }]}\n                                &gt;\n                                    &lt;Input autoComplete=\"off\" /&gt;\n                                &lt;/Form.Item&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/Drawer&gt;\n    )\n}\n</code></pre>"},{"location":"office/documentation/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/documentation/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":"<p>Example</p> apiactionreducer <p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre> <p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"office/primesales/intro/","title":"Intro","text":""},{"location":"office/primesales/intro/#intro","title":"Intro","text":""},{"location":"office/primesales/intro/#setup","title":"Setup","text":"<p>Success</p> <pre><code># Installing PHP\nsudo apt install php-cli\n\nsudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-xmlrpc php8.2-zip\n\n\n# Installing Composer\nsudo apt install composer\n\n#\ncomposer global require laravel/installer\n</code></pre> <p>To Check PHP Version in Ubutnu</p> <pre><code>#1. Command Line Interface (CLI):\nphp --version\n\n# using the dpkg command:\ndpkg -l | grep php\n\n#2. Using Laravel Artisan Command:\nphp artisan --version\n</code></pre> <p>If you prefer not to use the command line interface, you can check the PHP version being used in your Laravel project by examining the <code>composer.json</code> file. Laravel specifies the PHP version requirement in this file.</p> <ol> <li>Navigate to the root directory of your Laravel project.</li> <li>Open the <code>composer.json</code> file in a text editor.</li> <li>Look for the <code>require</code> section. Within this section, you should find an entry for \"php\" along with a version constraint. For example:</li> </ol> composer.json<pre><code>\"require\": {\n    \"php\": \"^7.3\",\n    // other dependencies...\n}\n</code></pre> <p>In this example, Laravel requires PHP version <code>7.3</code> or higher.</p> PHP Version <code>major</code> &amp; <code>minor</code> <p>In PHP, the versioning convention is similar to many other programming languages and software systems. PHP version numbers typically consist of three numbers separated by periods, following a pattern similar to Semantic Versioning (SemVer).</p> <p>Major version:</p> <p>The first number represents the major version. When the major version number changes, it signifies significant updates that may not be backward compatible with previous versions. Major updates often introduce new features, architectural changes, or major enhancements.</p> <p>Minor version:</p> <p>The second number represents the minor version. A change in the minor version number usually indicates smaller updates or improvements compared to major updates. Minor updates may include new features or improvements while maintaining backward compatibility within the same major version.</p> <p>Patch version:</p> <p>The third number represents the patch version. Changes in the patch version number typically denote bug fixes, security patches, or minor updates that do not introduce new features and maintain backward compatibility within the same major and minor version. For example:</p> <ul> <li>In PHP version <code>7.2.0</code>, <code>7</code> is the major version, 2 is the minor version, and 0 is the patch version.</li> <li>In PHP version <code>8.0.1</code>, <code>8</code> is the major version, 0 is the minor version, and 1 is the patch version.</li> </ul> <p>When specifying version constraints in PHP projects using tools like Composer, version ranges and constraints are often defined in the composer.json file. The caret (^) symbol is commonly used to specify a range of compatible versions within the same major version, similar to other package management systems. For example, \"<code>^7.2</code>\" would include all versions from PHP <code>7.2</code> up to, but not including, PHP <code>8.0</code>.</p> <p>--</p>"},{"location":"office/primesales/intro/#url","title":"URL","text":"<p>webcrm</p> <p>username: sampurna password: primesales360##</p>"},{"location":"office/primesales/intro/#reference","title":"Reference","text":"<p>PHP Version History</p> <ul> <li>Brief Timeline of PHP Versions</li> <li>PHP Versions</li> <li>Zend PHP Versions</li> <li>educba PHP Versions</li> </ul> <p>Installation</p> <ul> <li>How to install and configure PHP</li> </ul> <p>Composer</p> <ul> <li>composer official</li> </ul> <p>Online</p> <ul> <li>Laravel Key Generator</li> </ul>"},{"location":"research/docker/","title":"Docker","text":""},{"location":"research/docker/#installation","title":"Installation","text":"<p>Abstract</p> DockerfileTheoryPractical <pre><code># Use an existing image as a base\nFROM alpine:latest\n\n# Run a command in the container\nCMD [\"echo\", \"Hello, Jenkins!\"]\n</code></pre> <p><code>Docker</code>, <code>Docker Compose</code>, and <code>Docker Swarm</code> are all related tools in the Docker ecosystem, but they serve different purposes:</p> <ol> <li> <p>Docker:</p> <p>Docker is a platform and tool for building, distributing, and running <code>containers</code>. Containers allow developers to package an application with all of its dependencies into a standardized unit for software development. Docker provides the tools needed to create and manage these containers efficiently. With Docker, you can build container images, run containers from those images, and manage container lifecycles.</p> </li> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for defining and running <code>multi-container</code> Docker applications. It allows you to use a YAML file to configure the services that make up your application, including their dependencies, networking, and volumes. Docker Compose then takes care of starting, stopping, and managing all of these containers as a single application stack. It simplifies the process of managing complex applications composed of multiple interconnected containers.</p> </li> <li> <p>Docker Swarm:</p> <p>Docker Swarm is Docker's native clustering and <code>orchestration tool</code>. It allows you to create and manage a cluster of Docker nodes, turning them into a single virtual Docker engine. Docker Swarm enables you to deploy and manage multi-container applications across multiple hosts, providing features such as service scaling, rolling updates, and high availability. It simplifies the management of containerized applications at scale and provides built-in features for load balancing and service discovery.</p> </li> </ol> <p>In summary:</p> <ul> <li><code>Docker</code>: The core platform for building, distributing, and running containers.</li> <li><code>Docker Compose</code>: A tool for defining and managing multi-container applications using a YAML configuration file.</li> <li><code>Docker Swarm</code>: Docker's native clustering and orchestration tool for managing multi-container applications across multiple hosts.</li> </ul> <pre><code>$ sudo apt-get install &lt;docker.deb&gt;\n</code></pre> <p>Commands</p> bash<pre><code># List containers:\n$ docker containers ls\n\n# List only running container: (ps-process status)\n$ docker ps -a\n\n# List images:\n$ docker images\n</code></pre> <p>Restart Docker</p> bash<pre><code># To restart a Docker container based on an image\n\n# 1.Identify the Container:\n$ docker ps\n\n# 2. Restart the Container:\n$ docker restart &lt;container_id_or_name&gt;\n\n# 3. Verify Restart:\n$ docker ps\n</code></pre>"},{"location":"research/docker/#nginx-engine-x-web-server","title":"nginx (Engine X) <code>web server</code>","text":"<p>Abstract</p> TheoryPractical bash<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p><code>/etc/nginx/nginx.conf</code></p> <p>The server_name directive in Nginx should specify only the domain name or names without the protocol (e.g., <code>http://</code>). Therefore, you need to modify your configuration like this:</p> nginx<pre><code>http {\nserver {\n    listen 9000;\n    server_name generic-info.ispl.com.np;\n\n    location / {\n    # Jenkins running on port 9000\n    proxy_pass http://10.114.0.175:9000;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 8080;\n    server_name generic-info.ispl.com.np;\n\n    location / {\n        # Portainer running on port 8080\n        proxy_pass http://10.114.0.175:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n}\n</code></pre> <p>After making this change, you should test the configuration to ensure there are no syntax errors:</p> bash<pre><code>sudo nginx -t\n</code></pre> <p>If the test is successful, reload Nginx to apply the changes:</p> bash<pre><code>sudo systemctl reload nginx\n</code></pre> <p>This should resolve the issue, and Nginx should be able to start without errors.</p>"},{"location":"research/docker/#docker-images","title":"Docker Images","text":"<p>Abstract</p> TheoryPracticalDangling images bash<pre><code># List Docker images\n$ docker images\n\n# Remove Docker image by ID\n$ docker rmi &lt;image_id&gt;\n\n# Remove Docker image by repository and tag\n$ docker rmi &lt;repository_name&gt;:&lt;tag&gt;\n\n# Forcefully remove images\n$ docker rmi -f &lt;image_id&gt;\n# or\n$ docker rmi --force &lt;image_id&gt;\n</code></pre> <p>Create Docker Image</p> <p>When working with Docker, you typically create an image first and then use that image to create containers.</p> <ol> <li> <p>Create Image:</p> <p>An image is like a template that contains the filesystem and configuration needed to run a container. You define an image using a <code>Dockerfile</code>, which specifies the instructions to build the image. You use the docker build command to create an image from a Dockerfile.</p> </li> <li> <p>Create Container:</p> <p>Once you have an image, you can create one or more containers from it. A container is a running instance of an image. You use the docker run command to create and start a container from an image. Each container runs in isolation from other containers but can communicate with them if configured to do so.</p> </li> </ol> <p>Here's a basic sequence of commands:</p> <ol> <li>Create the image:</li> </ol> <pre><code>$ docker build -t my-image .\n</code></pre> <ol> <li>Run a container based on that image:</li> </ol> <pre><code>$ docker run --name my-container my-image\n</code></pre> <p>So, to summarize, first, you build an image using a <code>Dockerfile</code>, then you create and run containers based on that image.</p> <p>Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space.</p> <p>Dangling images are created while creating new build of a image without renaming/updating the version of the image. So that the old image are converted into dangling images.</p> <pre><code># List Dangling images\n$ docker images -f dangling=true\n\n# Remove Dangling images\n$ docker rmi $(docker images -f dangling=true -q)\n\n##\n# To remove all dangling images.\n$ docker image prune\n\n# To remove all images which aren't used by existing containers, use the -a flag:\n$ docker image prune -a\n\n# To remove all stopped containers.\n$ docker container prune\n\n# To removes stopped containers older than 24 hours:\n$ docker container prune --filter \"until=24h\"\n\n# To remove all volumes not used by at least one container.\n$ docker volume prune\n\n# To remove all networks not used by at least one container.\n$ docker network prune\n\n# The docker system prune command is a shortcut that prunes images, containers, and networks.\n# Volumes aren't pruned by default, and you must specify the --volumes flag for docker system prune to prune volumes.\n\n# To prune images, containers and network\n$ docker system prune\n\n# To also prune volumes, add the --volumes flag:\n$ docker system prune --volumes\n</code></pre> <ul> <li>Remove unnecessary images</li> <li>Docker container and image prune</li> </ul>"},{"location":"research/docker/#docker-container","title":"Docker Container","text":"<p>Abstract</p> TheoryPracticalAdditional <p>Create Docker Container</p> <p>example of creating a new container:</p> bash<pre><code># syntax\n# 1. Run a new container with the new image:\n$ docker run --name &lt;container_name&gt; -d &lt;new_image_name&gt;\n\n# 2. Stop the existing container:\n$ docker stop &lt;container_name_or_id&gt;\n\n# 3. Remove the existing container (optional):\n$ docker rm &lt;container_name_or_id&gt;\n\n# example\n$ docker run --name my-container -d my-image\n</code></pre> <ul> <li><code>--name my-container</code> sets the name of the container to my-container.</li> <li><code>-d</code> runs the container in detached mode (in the background).</li> <li><code>my-image</code> is the name of the image from which to create the container.</li> </ul> <p>This command will create a new container using the specified image. If the image is not available locally, Docker will automatically pull it from a registry like Docker Hub before creating the container.</p> <p>After running the command, you can use <code>docker ps</code> to see the list of running containers.</p> <p>Check the IP Address of the Docker Container</p> bash<pre><code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n</code></pre> <p>Then try accessing the site using <code>curl</code> with the <code>IP address</code> and the <code>mapped port</code> (<code>8082</code> in this case).</p> <p>if you want to check if a container named my_container is using any volumes:</p> bash<pre><code>docker inspect &lt;my_container&gt; | grep Mounts\n</code></pre> bash<pre><code>docker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\njenkins/jenkins:lts\n\ndocker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nmy-jenkins\n</code></pre>"},{"location":"research/docker/#docker-volume","title":"Docker Volume","text":"<p>Abstract</p> TheoryPracticalAdditional bash<pre><code># List Volumes in Use:\n$ docker volume ls\n\n# list all containers to find out which volumes are in use:\n$ docker ps -a\n\n# delete the volumes\n$ docker volume rm &lt;volume_name_or_id&gt;\n\n# delete volumes along with the containers that use them\n$ docker rm -v &lt;container_name_or_id&gt;\n</code></pre> <p>Recap Docker Volume</p> <p>In a previous chapter, we used the \"<code>-v</code>\" option to a \"<code>docker run</code>\" command to declare that we wanted to use a volume with a container. The abbreviated \"<code>-v</code>\" option is exactly the same as the \"<code>--volume</code>\" option. However, the newer and preferred way to mount volumes in a container is the \"<code>--mount</code>\" option. Docker recommends that you use \"<code>--mount</code>\" instead of \"<code>-v</code>\" or \"<code>--volume</code>\", as their research has shown \"<code>--mount</code>\" is easier to use. However, if you are an old Docker user like myself, then you're probably accustomed to using and seeing \"<code>-v</code>\". In any case, either works, but we will focus on \"<code>--mount</code>\", as it\u2019s the recommended way.</p> <pre><code>$ docker run -d --name withvolume --mount source=mydata1,destination=/root/volume nginx\n\n#\ndocker run -d --name withvolume2 --mount src=mydata1,dst=/root/volume nginx\n\n$ docker run -dit --name ephemeral --mount type=tmpfs,destination=/root/volume nginx\n</code></pre> <ul> <li>Docker: A project based learning</li> <li>Publish Docker image to Dockerhub using Jenkins Pipeline</li> <li>Build a Docker Jenkins Pipeline to Implement CI/CD Workflow</li> </ul>"},{"location":"research/docker/#portainer","title":"Portainer","text":"<p>Abstract</p> TheoryPracticalAdditional <p>Docker pull Command</p> bash<pre><code>$ docker pull portainer/portainer-ce\n</code></pre> <p>After installing Portainer in Docker on a Linux server, you can run it by executing the Docker run command with appropriate options. Here's how you can do it:</p> <ol> <li> <p>Open a Terminal:</p> <p>Log in to your Linux server via SSH or open a terminal window if you're working directly on the server.</p> </li> <li> <p>Run Portainer Container:</p> <p>Use the following command to start the Portainer container:</p> bash<pre><code>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 9000:9000</code>: Map port 9000 on the host to port 9000 inside the container. This allows you to access Portainer's web interface on port 9000 of your server.</p> </li> <li> <p><code>--name portainer</code>: Assign the name \"portainer\" to the container.</p> </li> <li> <p><code>--restart always</code>: Ensure that the container restarts automatically if it stops.</p> </li> <li> <p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: Mount the Docker socket inside the container, allowing Portainer to communicate with the Docker daemon.</p> </li> </ul> </li> <li> <p>Verify Portainer Container:</p> <p>You can verify that the Portainer container is running by executing the following command:</p> bash<pre><code>$ sudo docker ps\n</code></pre> <p>This command will list all running containers, and you should see an entry for the Portainer container.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:9000\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Set up Portainer:</p> <p>When you access the Portainer web interface for the first time, you'll be prompted to set up an admin user and password. Follow the on-screen instructions to complete the setup process.</p> </li> </ol> <p>That's it! You have now successfully run Portainer in Docker on your Linux server, and you can start managing your Docker environment through the Portainer web interface.</p> <p>Portainer with Docker</p> <p>To use Docker Swarm mode with Portainer, you need to set up a Docker Swarm cluster and then deploy Portainer as a service within the Swarm. Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Initialize Docker Swarm:</p> <p>If you haven't already initialized Docker Swarm on your Docker host, you can do so by running the following command in your terminal:</p> bash<pre><code>$ docker swarm init\n</code></pre> <p>This command initializes Docker Swarm mode on the current Docker host and creates a Swarm manager node.</p> </li> <li> <p>Deploy Portainer as a Service:</p> <p>Once Docker Swarm is initialized, you can deploy Portainer as a service within the Swarm. Run the following command to create a Portainer service:</p> bash<pre><code>docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \\\nportainer/portainer-ce\n</code></pre> <p>This command creates a new service named \"portainer\" using the Portainer Community Edition (CE) image. It publishes Portainer's web interface on port 9000 and mounts the Docker socket from the host into the Portainer container, allowing Portainer to interact with the Docker API.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer service is deployed, you can access the Portainer web interface by navigating to http://:9000 in your web browser. If you're running Portainer locally, you can use http://localhost:9000.</p> </li> <li> <p>Set Up Portainer:</p> <p>Follow the on-screen instructions to complete the initial setup of Portainer. You'll be prompted to create an admin user, choose a password, and specify whether you want to manage the local Docker environment or a remote Docker Swarm cluster.</p> </li> <li> <p>Connect Portainer to Docker Swarm:</p> <p>If you're managing a remote Docker Swarm cluster, you'll need to specify the Swarm endpoint URL and optionally provide authentication credentials. This allows Portainer to communicate with the Docker Swarm API and manage services, nodes, and other resources within the cluster.</p> </li> <li> <p>Start Managing Services:</p> <p>Once connected, you can start managing Docker Swarm services, nodes, stacks, and other resources using the Portainer web interface. You can create, scale, update, and monitor services, deploy applications using stacks, and perform various administrative tasks.</p> </li> </ol> <p>By following these steps, you can set up and use Docker Swarm mode with Portainer to manage your containerized applications at scale. Make sure to consult the official Portainer documentation for more detailed instructions and best practices.</p> <pre><code>server {\n    listen 80;\n    server_name generic.com.np;\n\n    location / {\n        proxy_pass http://&lt;container-ip&gt;:&lt;container-port&gt;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"research/docker/#jenkins","title":"Jenkins","text":"<p>Abstract</p> TheoryPractical <p>Docker Pull Command</p> bash<pre><code>$ docker pull jenkins/jenkins\n</code></pre> <p>After pulling the Docker Jenkins image onto your Linux server, you can start using Jenkins by running the container and accessing its web interface. Here's how you can do it:</p> <ol> <li> <p>Run Jenkins Container:</p> <p>Use the following command to start the Jenkins container:</p> title<pre><code>docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 8080:8080 -p 50000:50000</code>: Map port 8080 on the host to port 8080 inside the container for accessing Jenkins web interface, and map port 50000 for Jenkins agent communication.</p> </li> <li> <p><code>--name jenkins</code>: Assign the name \"jenkins\" to the container.</p> </li> <li> <p><code>jenkins/jenkins:lts</code>: This specifies the Jenkins Docker image to use. In this case, we're using the LTS (Long-Term Support) version.</p> </li> </ul> </li> <li> <p>Access Jenkins Web Interface:</p> <p>Once the Jenkins container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:8080\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Unlock Jenkins:</p> <p>When you access the Jenkins web interface for the first time, you'll be prompted to unlock Jenkins. To do this, you need to retrieve the initial admin password from the Jenkins container logs. Run the following command to view the logs:</p> <pre><code>docker logs jenkins\n</code></pre> <p>Look for the line containing \"Please use the following password to proceed to installation:\", and copy the provided password.</p> </li> <li> <p>Complete Jenkins Setup:</p> <p>Paste the copied password into the Jenkins web interface and click \"Continue\". Follow the on-screen instructions to complete the setup process, including installing recommended plugins.</p> </li> <li> <p>Create Admin User:</p> <p>After plugin installation, you'll be prompted to create an admin user. Provide the required information to create the admin user.</p> </li> <li> <p>Start Using Jenkins:</p> <p>Once you've completed the setup process, you can start using Jenkins to create and manage jobs, automate tasks, and perform continuous integration and continuous delivery (CI/CD) pipelines.</p> </li> </ol> <p>That's it! You've successfully pulled and started the Jenkins Docker container on your Linux server, and you can now begin configuring Jenkins for your development and deployment needs.</p>"},{"location":"research/docker/#certbot-in-linux","title":"certbot in linux","text":"<p>Abstract</p> InstallationSSL Certificate with Certbot <pre><code># There is two ways you can download certbot\n# 1. with PIP\n# 2. with snapd\n\n# step1: Install snapd:\nsudo apt install snapd\n\n# step2: Ensure you have the latest snapd version installed:\nsudo snap install core; sudo snap refresh coreCopied!\n\n# step3: Install Certbot with snapd:\nsudo snap install --classic certbot\n\n# step4: Create a symlink to ensure Certbot runs:\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n</code></pre> <p>Create an SSL Certificate with Certbot</p> <pre><code># step1: Choose the best option for your needs.\n# Create SSL certs for all domains and configure redirects in the web server:\nsudo certbot --apache\nsudo certbot --nginx\n\n# Create SSL certs for a specified domain (recommended if you\u2019re using your system hostname):\nsudo certbot --apache -d example.com -d www.example.com\n\n# Only install SSL certs:\nsudo certbot certonly --apache\nsudo certbot certonly --nginx\n\n\n# step2: Enter an email address for renewal and security notices.\n# step3: Agree to the terms of service.\n# step4: Specify whether to receive emails from EFF.\n# step5: If prompted, choose whether to redirect HTTP traffic to HTTPS \u2013 1 (no redirect, no further changes to the server) or # 2 (redirect all HTTP requests to HTTPS).\n</code></pre> <ul> <li>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</li> <li>Install Let\u2019s Encrypt SSL Certificates using Certbot</li> </ul> <p>Solved</p> <ul> <li>Issue using certbot with nginx: stackoverflow</li> <li>Whaaaat Are AAAA Records in DNS? youtube</li> </ul> Docker Common Issue Solved Presentation <p>Docker</p> Docker: <code>Host</code> port vs <code>Container</code> port <p>What is left side of port ant right side of port in docker</p> <p>In Docker, when you expose ports for containers, you specify the port mappings using the <code>-p</code> flag or <code>--publish</code> flag when running a container. The syntax is typically <code>hostPort</code>:<code>containerPort</code>.</p> <ul> <li> <p>Left side (<code>hostPort</code>):</p> <p>This is the port on the host machine, the system where Docker is running. It is the port to which you can connect from outside the Docker container to access the services running within the container. If you specify a port on the left side, Docker will bind that port on the host system to the container port specified on the right side.</p> </li> <li> <p>Right side (<code>containerPort</code>):</p> <p>This is the port exposed within the Docker container. It is the port on which your application or service within the container is listening. When Docker starts the container, it will forward any traffic received on the host port (left side) to this port within the container.</p> </li> </ul> <p>For example, if you run a container with <code>-p 8080:80</code>, it means that port <code>80</code> inside the container will be accessible from port <code>8080</code> on the host machine. If you were to access <code>http://localhost:8080</code> on your host machine, Docker would forward that request to port <code>80</code> inside the container.</p> <p>This port mapping mechanism allows Docker containers to communicate with the outside world and for multiple containers to run on the same host without port conflicts.</p> Listen services running on specific port <code>:8000</code> <code>:9000</code> <pre><code># You can use the following commands to find out which processes are using these ports:\nsudo lsof -i :9000\nsudo lsof -i :8080\n</code></pre> <p>Once you identify the processes using these ports, you can decide whether to stop them or reconfigure them to use different ports. After ensuring that the ports are available, you can attempt to start the Nginx service again.</p> Last things you need to remeber in Docker Dind <p>Host os:</p> <ol> <li> <p>Add <code>Jenkins</code> user to the Docker group:</p> <p>On the host machine where Docker is installed, run the following command:</p> bash<pre><code>sudo usermod -aG docker jenkins\n</code></pre> <p>This command adds the Jenkins user to the docker group, granting it permission to interact with the Docker daemon.</p> </li> <li> <p>Ensure permissions on the Docker socket:</p> <p>The Docker daemon socket (<code>/var/run/docker.sock</code>) should be readable and writable by members of the docker group. You can check and     adjust the permissions if needed with the following command:</p> bash<pre><code>sudo chmod 666 /var/run/docker.sock\n</code></pre> </li> <li> <p>Restart Jenkins:</p> <p>Restart the Jenkins service to apply the changes:</p> bash<pre><code>sudo systemctl restart jenkins\n# or\ndocker restart &lt;container_id or container_name&gt;\n</code></pre> </li> </ol> <p>With these changes, the Jenkins user should now have the necessary permissions to execute Docker commands, and <code>you should no longer encounter permission denied errors when running Docker commands from Jenkins job scripts</code>. Make sure to test your Jenkins job again after applying these changes.</p>"},{"location":"research/docker/#docker-common-issue-solved","title":"Docker Common Issue Solved","text":"Share Docker sockDocker Port Mappingstep1:Final Solution <p>Connect: To share Docker daemon from the host with jenkins nodes</p> <p>To run Docker commands inside Jenkins, especially within a Jenkins instance running inside a Docker container, you have a couple of options:</p> <ol> <li> <p>Docker Socket Binding:</p> bash<pre><code>$ docker run -v /var/run/docker.sock:/var/run/docker.sock &lt;jenkins-image:tag&gt;\n</code></pre> </li> <li> <p>Docker-in-Docker (DinD):</p> bash<pre><code>$ docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock docker:dind\n</code></pre> </li> </ol> <p>How to fix docker: Got permission denied while trying to connect to the Docker daemon socket</p> <p>After an search hour this following solution finaly worked :</p> bash<pre><code>$ sudo chmod 666 /var/run/docker.sock\n</code></pre> <ul> <li>Got permission denied while trying to connect to the Docker daemon socket</li> </ul> <p></p> <p>what is differnce between 8080:80 and 8080:8080. is there any real difference</p> <ul> <li>8080:80</li> </ul> <p>This notation maps port 80 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 80 inside the Docker container. This is useful when you want to expose a service running inside the container on a standard HTTP port (80) of the host machine.</p> <ul> <li>8080:8080</li> </ul> <p>This notation maps port 8080 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 8080 inside the Docker container. This is useful when you want to expose a service running inside the container on a non-standard port (8080) of the host machine.</p> <p>In both cases, the first port number (8080) specifies the port on the host machine, and the second port number (80 or 8080) specifies the port inside the Docker container. The port on the host machine is what you use to access the service running inside the container.</p> <p>So, the difference lies in which port on the host machine you want to use to access the service and which port inside the container the service is listening on.</p> <p>so why the jenkins not running on 8080:80 but running on 8080:8080</p> <p>If Jenkins is running inside a Docker container and you've mapped port 8080:8080 but not <code>8080:80</code>, it means that Jenkins is configured to listen for incoming connections on port 8080 inside the container.</p> <p>When you map <code>8080:8080</code>, it indicates that traffic directed to port <code>8080</code> on the host machine should be forwarded to port <code>8080</code> inside the Docker container where Jenkins is running. This setup expects Jenkins to be listening for connections on port <code>8080</code> inside the container.</p> <p>If Jenkins is running on port <code>8080</code> inside the container, mapping <code>8080:8080</code> correctly exposes Jenkins to external traffic on port <code>8080</code> of the host machine.</p> <p>On the other hand, if you were to map <code>8080:80</code>, it would expect Jenkins to be configured to listen on port <code>80</code> inside the container. By default, Jenkins typically runs on port 8080, so mapping <code>8080:80</code> wouldn't work unless you specifically configured Jenkins to listen on port 80 inside the container.</p> <p>Therefore, mapping <code>8080:8080</code> correctly exposes Jenkins running on port <code>8080</code> inside the container to external traffic on port <code>8080</code> of the host machine, which is why it works in your case.</p> <p>Issue Solved</p> <p>Step-by-step instructions to create a Docker image for Jenkins with Docker installed inside it and then run a Jenkins container with the Docker socket mounted from the host:</p> <ol> <li> <p>Create a Dockerfile:</p> <p>Create a file named <code>Dockerfile</code> with the following content:</p> <pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker prerequisites\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; \\\n    sh get-docker.sh\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>This Dockerfile installs Docker inside the Jenkins container and adds the Jenkins user to the Docker group.</p> </li> <li> <p>Build the Docker Image:</p> <p>Open a terminal and navigate to the directory containing the <code>Dockerfile</code>. Then, run the following command to build the Docker image:</p> <pre><code>docker build -t my-jenkins .\n</code></pre> <p>This command builds the Docker image using the Dockerfile and tags it with the name <code>my-jenkins</code>.</p> </li> <li> <p>Run the Jenkins Container:</p> <p>After the Docker image is built, you can run a Jenkins container with the Docker socket mounted from the host:</p> bash<pre><code>docker run -d \\\n--name jenkins \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-p 8080:8080 -p 50000:50000 \\\nmy-jenkins\n</code></pre> <p>This command starts a Jenkins container named <code>jenkins</code>. It mounts the Docker socket (<code>/var/run/docker.sock</code>) from the host into the container and exposes the Jenkins web interface on port <code>8080</code> and the Jenkins agent communication port on port <code>50000</code>.</p> </li> </ol> <p>With these steps, you have a Jenkins container running with Docker installed inside it, and the Docker socket mounted from the host. This setup allows the Jenkins container to communicate with the Docker daemon on the host and perform Docker-related tasks within Jenkins pipelines or jobs.</p> <p>Docker Socket bind with docker command</p> <pre><code>docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/custom_volume/jenkins/:/var/jenkins_home/ --privileged --name b_jenkins 6b7d79a0229e\n</code></pre> <ul> <li>Docker cli excutable file not found</li> <li>docker not found in jenkins pipeline</li> <li>docker not found in jenkins pipeline 2</li> <li>docker: ibm</li> <li>what is docker and why it is darn popular?</li> <li>docker introduction aws</li> </ul>"},{"location":"research/docker/#docker-presentation","title":"Docker Presentation","text":""},{"location":"research/docker/#docker-architecture","title":"Docker Architecture","text":"<p>cgroups &amp; namespaces The backbone of the Docker technology are cgroups (short for control groups) and kernel namespaces.</p> <p>With <code>cgroups</code>, the Linux operating system can easily manage and monitor resource allocation for a given process and set resource limits, like CPU, memory, and network limits.</p> <p><code>Namespaces</code> are helpful in isolating process groups from each other. There are six default namespaces in Linux: <code>mnt</code>, <code>IPC</code>, <code>net</code>, <code>usr</code>, <code>pid</code>, and <code>uts</code>. Each container will have its own namespace and processes running inside that namespace, and will not have access to anything outside its namespace.</p> <p></p>"},{"location":"research/docker/#docker-steps","title":"Docker Steps","text":""},{"location":"research/docker/#docker-images_1","title":"Docker Images","text":"<p>Where Are Docker Images Stored on the Host Machine? </p> <pre><code>$ docker info\n</code></pre> <p>Now, typically there are two categories of Docker Images</p> <ul> <li>Official Base Images</li> </ul> <p>that are pre-built and can be downloaded or pulled from registries, and</p> <ul> <li>Customized Images</li> </ul> <p>that use base images to create application-specific environments.</p> <p></p> <p></p>"},{"location":"research/docker/#docker-container_1","title":"Docker Container","text":"<p>The major difference between a <code>container</code> and an <code>image</code> is the top writable layer.</p> <p></p> <p>All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.</p> <p>When the container is stopped writable layer remains, and if container was removed writable layer is deleted. So that\u2019s why people say, containers are stateless.</p> <p></p>"},{"location":"research/docker/#docker-volume_1","title":"Docker Volume","text":"<p>How to Handle Container Storage</p> <p>To make data of any container persistent and accessible outside of the container, Docker provides two options:</p> <ul> <li>Volumes</li> <li>Bind mounts</li> </ul> <p></p>"},{"location":"research/docker/#docker-port-mapping","title":"Docker Port Mapping","text":""},{"location":"research/docker/#docker-vs-docker-compose-vs-docker-swarm","title":"Docker vs Docker Compose vs Docker Swarm","text":""},{"location":"research/docker/#docker-swarm","title":"Docker Swarm","text":""},{"location":"research/docker/#practical-guide-jenkins","title":"Practical Guide Jenkins","text":"<p>Using Statefull persistant volume </p> <p> </p> <p>Jenkins Tutorial  </p> <p> </p>"},{"location":"research/docker/#reference","title":"Reference","text":"<p>Linux (<code>Ubuntu</code>)</p> <ul> <li>Install Docker Desktop on Ubuntu</li> <li>pass tutorial</li> <li>3 Best Ways to Run Docker in Docker Container</li> </ul> <p>Blog</p> <ul> <li>What is a Docker Swarm?</li> <li>Key Differences Between Docker and Docker Swarm </li> </ul> <p>Youtube</p> <ul> <li>Docker Swarm: Simplilearn</li> <li>Docker Swarm Step by Step: Intellipaat</li> <li>Docker vs Kubernetes vs Docker Swarm: Techworld with Nana</li> <li>The EASIEST Docker Swarm Tutorial</li> <li>Docker Compose Tutorial: Programming with Mosh</li> <li>Become a Docker Swarm Expert in just 20 minutes</li> </ul> <p>tmux</p> <ul> <li>tmux resizing pane</li> </ul> <p>Misc <code>youtube</code></p> <ul> <li>what is podman vs docker</li> </ul>"},{"location":"research/draft/","title":"Draft","text":"<p>To delete a branch on both your local repository and GitHub, you can follow these steps:</p>"},{"location":"research/draft/#deleting-locally","title":"Deleting Locally:","text":"<ol> <li> <p>Checkout a Different Branch:</p> <p>Before deleting the branch, ensure you're not currently on the branch you intend to delete. You can switch to another branch using:</p> <pre><code>git checkout &lt;different_branch&gt;\n</code></pre> </li> <li> <p>Delete the Branch: Use the following command to delete the branch locally:</p> <pre><code>git branch -d &lt;branch_name&gt;\n</code></pre> <p>If the branch has not been merged yet, you might need to use -D instead of -d to force delete.</p> </li> </ol>"},{"location":"research/draft/#deleting-on-github","title":"Deleting on GitHub:","text":"<ol> <li> <p>Push the Deletion: To delete the branch on GitHub, you need to push the deletion to the remote repository:</p> <pre><code>git push origin --delete &lt;branch_name&gt;\n</code></pre> <p>This command will delete the branch on GitHub (the origin remote).</p> </li> </ol> <p>To delete a branch on both your <code>local</code> repository and <code>GitHub</code>, you can follow these steps:</p>"},{"location":"research/draft/#django-debug-value","title":"Django <code>DEBUG</code> value","text":"<p>It looks like you're setting the DEBUG value to False in your .env file and then trying to retrieve it in your settings.py file using <code>os.environ.get('DEBUG')</code>. The code you've shown seems correct in terms of retrieving the <code>DEBUG</code> value from the environment variables.</p> <p>However, the issue might arise if the DEBUG value is not being retrieved correctly or if it's not being interpreted as a boolean value. Here are a few things you can check:</p> <ol> <li> <p>Ensure <code>.env</code> file is loaded: Make sure your <code>.env</code> file is being loaded properly by your application. Sometimes, this requires additional configuration, especially if you're using a framework like Django or Flask.</p> </li> <li> <p>Check DEBUG value: Verify that the DEBUG value in your <code>.env</code> file is set to either 'True' or 'False', and not any other string. It's case-sensitive, so 'True' and 'False' should be all uppercase.</p> </li> <li> <p>Convert DEBUG value to boolean: Since DEBUG is typically a boolean value in Django (True or False), you might want to explicitly convert it to a boolean in your <code>settings.py</code> file:</p> <pre><code>import os\n\nDEBUG = os.environ.get('DEBUG', '').lower() == 'true'\n</code></pre> <p>This code will set <code>DEBUG</code> to True if the DEBUG environment variable is set to <code>True</code> (case insensitive), and <code>False</code> otherwise.</p> </li> <li> <p>Fallback value: Provide a fallback value in case the DEBUG environment variable is not set in your .env file. For example:</p> <pre><code>    DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'\n</code></pre> <p>This will default <code>DEBUG</code> to <code>False</code> if the <code>DEBUG</code> environment variable is not set.</p> </li> <li> <p>Check for typos: Ensure there are no typos in your code or in your .env file. Even a small typo can cause issues.</p> </li> <li> <p>Restart your server: After making changes to your <code>.env</code> file or your settings.py file, make sure to restart your server to apply the changes.</p> </li> </ol> <p>If you've checked all of the above and are still facing issues, please provide more details or error messages for further assistance.</p>"},{"location":"research/draft/#programming-jokes","title":"Programming Jokes","text":""},{"location":"research/draft/#blogs","title":"Blogs","text":""},{"location":"research/draft/#1-using-decorator-in-class-based-views-django","title":"1. Using decorator in Class-Based-Views Django","text":"<p>method_decorator is a function provided by Django's <code>django.utils.decorators</code> module. It serves as a bridge between function decorators and class-based views in Django. While decorators are typically used with functions, <code>method_decorator</code> enables their usage with class methods.</p> <p>How does it work?</p> <p>Consider a scenario where you have a class-based view in Django. Each method within the class corresponds to an HTTP request method (e.g., get, post, put). Sometimes, you might want to apply a decorator to one of these methods. This is where <code>method_decorator</code> comes into play.</p> <p>By decorating a method with <code>method_decorator</code>, you can apply any decorator to that method, just as you would with a regular function. This allows for cleaner, more modular code, as decorators can be applied directly to the methods they are intended to modify.</p> <p>When to use <code>method_decorator</code>?</p> <ol> <li> <p>DRY Principle: </p> <p>When you find yourself repeating the same decorator across multiple view methods, <code>method_decorator</code> can help you adhere to the Don't Repeat Yourself (DRY) principle by applying the decorator directly to the methods.</p> </li> <li> <p>Granular Control:</p> <p><code>method_decorator</code> provides granular control over which methods within a class-based view are decorated. This can be particularly useful when you need different decorators for different methods.</p> </li> <li> <p>Keeping Views Clean:</p> <p>Using <code>method_decorator</code> helps keep your views clean and focused on business logic by separating concerns related to request handling (e.g., <code>authentication</code>, <code>caching</code>) into decorators.</p> </li> </ol> Python<pre><code>from django.views.generic import View\nfrom django.http import HttpResponse\nfrom django.utils.decorators import method_decorator\nfrom django.contrib.auth.decorators import login_required\n\nclass MyView(View):\n\n    @method_decorator(login_required)\n    def get(self, request):\n        # Your view logic for handling GET requests\n        return HttpResponse(\"This view requires authentication.\")\n</code></pre> <p>In this example, the <code>login_required</code> decorator is applied directly to the get method of the MyView class using method_decorator. This ensures that the view requires authentication for GET requests.</p> <p>Conclusion:</p> <p><code>method_decorator</code> is a valuable tool in Django for applying decorators to class-based view methods. By leveraging this utility, developers can write cleaner, more modular code while maintaining granular control over the behavior of their views. Whether it's enforcing authentication, caching responses, or handling other cross-cutting concerns, <code>method_decorator</code> empowers developers to enhance the functionality and security of their Django applications with ease.</p>"},{"location":"research/draft/#2-most-used-decorators-in-django","title":"2. Most used decorators in django","text":"<p>In Django, decorators play a crucial role in modifying the behavior of views, including class-based views (CBVs). Some of the most commonly used decorators in class-based views are:</p> <ol> <li> <p>@method_decorator:</p> <p>This is a utility provided by Django that allows decorators to be applied to class-based view methods. It's not a decorator itself but a tool for applying decorators to methods within a class-based view.</p> </li> <li> <p>@login_required:</p> <p>Ensures that the user must be authenticated to access the view. If the user is not authenticated, they are redirected to the login page.</p> </li> <li> <p>@permission_required:</p> <p>Requires that the user has specific permissions to access the view. If the user lacks the required permissions, they are redirected to a specified page.</p> </li> <li> <p>@csrf_exempt:</p> <p>Exempts the view from CSRF (Cross-Site Request Forgery) protection. This is useful for views that handle external POST requests or APIs.</p> </li> <li> <p>@cache_page:</p> <p>Caches the output of the view for a specified amount of time, improving performance by serving cached responses for subsequent requests.</p> </li> <li> <p>@transaction.atomic:</p> <p>Ensures that the database operations within the view are executed within a single transaction. Changes are rolled back if an exception occurs.</p> </li> <li> <p>@require_http_methods:</p> <p>Restricts the HTTP methods allowed for accessing the view. It ensures that only specific HTTP methods (e.g., GET, POST) are supported.</p> </li> <li> <p>@cache_control:</p> <p>Sets HTTP caching headers for the view response, controlling caching behavior in the client's browser or intermediary caches.</p> </li> <li> <p>@gzip_page:</p> <p>Compresses the response content using gzip compression, reducing bandwidth usage and improving page load times.</p> </li> <li> <p>@vary_on_headers:</p> <p>Specifies which request headers should be considered when caching responses, allowing for more granular cache control based on specific headers.</p> </li> </ol> <pre><code>from django.views.generic import View\nfrom django.http import HttpResponse\nfrom django.utils.decorators import method_decorator\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.csrf import csrf_exempt\n\n# Define a class-based view\nclass MyView(View):\n\n    # Apply the login_required decorator to the dispatch method\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n\n    # Apply the csrf_exempt decorator to the post method\n    @method_decorator(csrf_exempt)\n    def post(self, request):\n        # Handle POST request\n        return HttpResponse(\"This is a POST request.\")\n\n    def get(self, request):\n        # Handle GET request\n        return HttpResponse(\"This is a GET request.\")\n</code></pre> <p>These decorators provide a wide range of functionality for controlling access, performance, and behavior within class-based views in Django applications. Depending on your application's requirements, you can use these decorators to enforce security measures, optimize performance, and customize the behavior of your views.</p>"},{"location":"research/draft/#3-dispatch-method-in-class-based-views-django","title":"3. dispatch method in Class-Based-Views django","text":"<p>In Django, <code>dispatch</code> is a method provided by the <code>View</code> class, which is the base class for all <code>class-based views</code> (CBVs). The dispatch method is responsible for routing incoming requests to the appropriate HTTP method handlers (<code>get</code>, <code>post</code>, <code>put</code>, etc.) based on the request's HTTP method.</p> <p>Overall, <code>dispatch</code> serves as the entry point for request handling in <code>class-based views</code>, providing a centralized mechanism for routing requests to the appropriate method handlers and enabling extensibility and integration with Django's middleware architecture.</p> <p>When to use dispatch</p> <p>You should use the <code>dispatch</code> method in Django when you are working with <code>class-based views</code> (CBVs) and need to customize or extend the default request-handling behavior.</p> <p>Here are some scenarios where you might use <code>dispatch</code>:</p> <ol> <li> <p>Authentication and Authorization:</p> <p>You might use <code>dispatch</code> to enforce authentication and authorization requirements for your views. For example, you could override dispatch to check whether the user is authenticated and redirect them to a login page if not.</p> </li> <li> <p>Custom Request Processing:</p> <p>If you need to perform custom processing on incoming requests before they are handled by the view's methods (<code>get</code>, <code>post</code>, etc.), you can override <code>dispatch</code> to add this logic. This could include validation, parsing request data, or logging.</p> </li> <li> <p>Error Handling:</p> <p><code>dispatch</code> can be used to implement custom error handling logic for specific types of errors that occur during request processing. For example, you could override dispatch to catch certain exceptions and return a custom error response.</p> </li> <li> <p>Middleware Integration:</p> <p>If you're working with Django middleware and need to interact with requests at an early stage of processing, you can override <code>dispatch</code> to integrate middleware functionality. Middleware can intercept requests before they reach the view methods.</p> </li> <li> <p>Request Routing:</p> <p>While Django's default dispatch implementation routes requests based on the HTTP method (<code>GET</code>, <code>POST</code>, etc.), you might need to implement custom request routing logic for specialized use cases. Overriding dispatch allows you to customize how requests are routed within your view.</p> </li> </ol> <pre><code>from django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\n\nclass ProtectedView(View):\n    @method_decorator(login_required)\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n\n    def get(self, request):\n        return HttpResponse(\"This is a protected GET request.\")\n\n    def post(self, request):\n        return HttpResponse(\"This is a protected POST request.\")\n</code></pre> <p>In summary, you should use the dispatch method whenever you need to customize or extend the default request-handling behavior of class-based views in Django. It provides a centralized hook for implementing various request-processing features, making it a powerful tool for building flexible and feature-rich web applications.</p>"},{"location":"research/draft/#testing-active-link-ajax","title":"TESTING active link ajax","text":"<p>To remove the <code>active</code> class from the previously clicked link before adding it to the currently <code>clicked link</code>, you can store a reference to the previously clicked link and remove the active class from it before adding it to the currently clicked link.</p> business.html<pre><code>$(document).ready(function(){\n    var previousClickedLink = null;  // Reference to the previously clicked link\n\n    function getCookie(name) {\n        var cookieValue = null;\n        if (document.cookie &amp;&amp; document.cookie !== '') {\n            var cookies = document.cookie.split(';');\n            for (var i = 0; i &lt; cookies.length; i++) {\n                var cookie = cookies[i].trim();\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n    var csrftoken = getCookie('csrftoken');\n\n    $('.business-item-link').click(function(event) {\n        event.preventDefault();\n\n        var slug = $(this).data('slug');\n        var clickedLink = $(this);  // Reference to the clicked link\n\n        // Remove active class from the previously clicked link\n        if (previousClickedLink !== null) {\n            previousClickedLink.removeClass('active');\n        }\n\n        // AJAX GET request to fetch data\n        $.ajax({\n            url: '/business/' + slug + '/ajax/',\n            type: 'GET',\n            beforeSend: function(xhr, settings) {\n                xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n            },\n            success: function(response){\n                if (response.hasOwnProperty('title')) {\n                    $('.bt__bussiness--title').text(response.title);\n                }\n                console.log(\"Response content: \", response.content);\n                if (response.hasOwnProperty('content')) {\n                    $('.business-item-content').html(response.content);\n                }\n\n                // Add active class to the clicked link\n                clickedLink.addClass('active');\n\n                // Store a reference to the currently clicked link as the previous clicked link\n                previousClickedLink = clickedLink;\n            },\n            error: function(xhr, errmsg, err){\n                console.error('Error fetching data:', errmsg);\n            }\n        });\n    });\n});\n</code></pre> views.py<pre><code>class BusinessItemView(TemplateView):\n    template_name = 'business/business-item.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        slug = kwargs['slug']\n        business_item = get_object_or_404(BusinessItem, slug=slug)\n        context['business_item'] = business_item\n\n        business_inner = BusinessInner.objects.first()\n        context['business_inner'] = business_inner\n\n        return context\n\n    def get_ajax_data(self, request, *args, **kwargs):\n        slug = kwargs['slug']\n        business_item = get_object_or_404(BusinessItem, slug=slug)\n\n        # Construct data to send in JSON response\n        print(\"business_item: \", business_item)\n\n        # Check if this is the active link\n        absolute_url = business_item.get_absolute_url()\n        is_active = True if request.path == absolute_url else False\n\n        print('absolute_url: ', absolute_url)\n        print('is_active: ', is_active)\n\n        data = {\n            'title': business_item.title,\n            'content': business_item.content,\n            'is_active': is_active\n            # Add more data as needed\n        }\n        return JsonResponse(data)\n\n    def dispatch(self, request, *args, **kwargs):\n        # Check if it's an AJAX request\n        # if request.is_ajax(): is depreciated\n        if request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':\n            # If yes, call the get_ajax_data method\n            return self.get_ajax_data(request, *args, **kwargs)\n        else:\n            # If not, call the parent dispatch method to handle the regular view\n            return super().dispatch(request, *args, **kwargs)\n</code></pre> models.py<pre><code>class BusinessItem(models.Model):\n    CHOICES = (\n        ('1', 'Product &amp; Services'),\n        ('2', 'Business Consulting'),\n        ('3', 'IT Services'),\n    )\n    title = models.CharField(max_length=120)\n    category = models.CharField(max_length=20, choices=CHOICES)\n    content = HTMLField(null=True, blank=True)\n    slug = AutoSlugField(populate_from='title', unique=True, blank=True, default=None, editable=True)\n\n    def get_absolute_url(self):\n        return reverse('business:item_ajax', kwargs={'slug': self.slug})\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        db_table = \"ispl_business_item\"\n        verbose_name = 'Business Item'\n        verbose_name_plural = 'Business Items'\n</code></pre>"},{"location":"research/draft/#conditonally-display-team-image","title":"Conditonally display Team Image","text":"JavascriptPython <pre><code>$(document).ready(function() {\n    // Assuming `slug` and `csrftoken` are defined elsewhere\n    $.ajax({\n        url: '/about/' + slug + '/ajax/',\n        type: 'GET',\n        beforeSend: function(xhr, settings) {\n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n        },\n        success: function(response) {\n            console.log('console response', response);\n\n            if (response.hasOwnProperty('title')) {\n                $('.bt__bussiness--title').text(response.title);\n            }\n\n            if (response.hasOwnProperty('content')) {\n                $('.business-item-content').html(response.content);\n            }\n\n            if (slug === 'message') {\n                if (response.hasOwnProperty('team_item')) {\n                    var teamItems = JSON.parse(response.team_item);\n                    $('.team-img').empty();\n                    teamItems.forEach(function(teamItem) {\n                        var itemHtml = `\n                            &lt;div class=\"team-item\"&gt;\n                                &lt;img src=\"/media/${teamItem.fields.image}\" alt=\"${teamItem.fields.name}\"&gt;\n                                &lt;h3&gt;${teamItem.fields.name}&lt;/h3&gt;\n                                &lt;h4&gt;${teamItem.fields.position}&lt;/h4&gt;\n                                ${teamItem.fields.content}\n                            &lt;/div&gt;\n                        `;\n                        $('.team-img').append(itemHtml);\n                    });\n                } else {\n                    // If `team_item` does not exist, ensure the `.team-img` is empty\n                    $('.team-img').empty();\n                }\n            } else {\n                // If `slug` is not 'message', ensure the `.team-img` is empty\n                $('.team-img').empty();\n            }\n\n            clickedLink.addClass('active');\n            previousClickedLink = clickedLink;\n        },\n        error: function(xhr, errmsg, err) {\n            console.error('Error fetching data:', errmsg);\n        }\n    });\n});\n</code></pre> views.py<pre><code>from django.shortcuts import render, get_object_or_404\nfrom django.views.generic import TemplateView, DetailView\nfrom django.http import JsonResponse\nfrom django.core.serializers import serialize\nfrom .models import About, AboutInner, AboutItem\nfrom teams.models import TeamItem\n\nclass AboutItemView(DetailView):\n    model = AboutItem\n    template_name = \"about_us/item.html\"\n    context_object_name = \"about_items\"\n    slug_field = 'slug'\n\ndef get_ajax_data(self, request, *args, **kwargs):\n    slug = kwargs['slug']\n    about_item = self.get_object()\n\n    absolute_url = about_item.get_absolute_url()\n    is_active = True if request.path == absolute_url else False\n\n    team_item = TeamItem.objects.all()\n    team_item_serailize = serialize('json', team_item)\n\n    data = {\n        'title': about_item.title,\n        'content': about_item.content,\n        'is_active': is_active,\n        'team_item': team_item_serailize\n    }\n    return JsonResponse(data)\n\ndef dispatch(self, request, *args, **kwargs):\n    # Check if it's an AJAX request\n    if request.META.get('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest':\n        # If yes, call the get_ajax_data method\n        return self.get_ajax_data(request, *args, **kwargs)\n    else:\n        # If not, call the parent dispatch method to handle the regular view\n        return super().dispatch(request, *args, **kwargs)\n</code></pre>"},{"location":"research/draft/#django-ajax-view","title":"DJANGO AJAX VIEW","text":"<p>The <code>{% if not request.is_ajax %}</code> line in a Django template is used to conditionally render content based on whether the request is an AJAX request or not. However, this syntax is not directly supported in Django templates out of the box. Instead, you typically handle AJAX requests in your views and use different templates or partial templates based on the request type. Understanding AJAX in Django Views</p> <p>To render different content based on whether the request is an AJAX request, you need to handle this logic in your Django view. Here's how you can achieve this:</p> <ol> <li> <p>Detecting AJAX Requests in the View:</p> <p>You can check if the request is an AJAX request in your view using request.is_ajax(). This method was deprecated in Django 3.1 and removed in Django 4.0. Instead, you should check the HTTP_X_REQUESTED_WITH header directly.</p> </li> <li> <p>Handling AJAX and Non-AJAX Requests:</p> <p>Based on the request type, you can render different templates or return JSON responses.</p> <p>Example Implementation</p> ViewDjango TemplateJavaScript for AJAX <p>First, create a view that handles both AJAX and non-AJAX requests.</p> Django View<pre><code>from django.http import JsonResponse\nfrom django.core.serializers import serialize\nfrom django.views.generic.detail import DetailView\nfrom teams.models import TeamItem\nfrom about.models import AboutItem  # Adjust according to your actual model import\n\nclass AboutItemView(DetailView):\n    model = AboutItem\n    template_name = \"about_us/item.html\"\n    context_object_name = \"about_items\"\n    slug_field = 'slug'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['team_items'] = TeamItem.objects.all()\n        return context\n\n    def get_ajax_data(self, request, *args, **kwargs):\n        about_item = self.get_object()\n        team_items = TeamItem.objects.all()\n        team_items_serialized = serialize('json', team_items)\n\n        data = {\n            'title': about_item.title,\n            'content': about_item.content,\n            'team_item': team_items_serialized,\n        }\n        return JsonResponse(data)\n\n    def dispatch(self, request, *args, **kwargs):\n        if request.headers.get('x-requested-with') == 'XMLHttpRequest':\n            return self.get_ajax_data(request, *args, **kwargs)\n        return super().dispatch(request, *args, **kwargs)\n</code></pre> <p>In your template, you do not need to use <code>{% if not request.is_ajax %}</code>. Instead, you prepare the template to display the data properly. Here\u2019s an example:</p> <pre><code>&lt;div class=\"col-md-9\"&gt;\n    &lt;h5 class=\"bt__bussiness--title bt-sec-title\"&gt;{{ about_items.title }}&lt;/h5&gt;\n    &lt;div class=\"business-item-content\"&gt;{{ about_items.content | safe }}&lt;/div&gt;\n    &lt;div class=\"team-img\"&gt;\n        {% for team_item in team_items %}\n            &lt;div class=\"team-item\"&gt;\n                &lt;img src=\"{{ team_item.image.url }}\" alt=\"{{ team_item.name }}\"&gt;\n                &lt;h3&gt;{{ team_item.name }}&lt;/h3&gt;\n                &lt;h4&gt;{{ team_item.position }}&lt;/h4&gt;\n                {{ team_item.content | safe }}\n            &lt;/div&gt;\n        {% endfor %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Ensure your JavaScript handles the AJAX request correctly and updates the DOM if the request is an AJAX request.</p> <pre><code>$(document).ready(function() {\n    $.ajax({\n        url: '/about/' + slug + '/ajax/',\n        type: 'GET',\n        beforeSend: function(xhr, settings) {\n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n        },\n        success: function(response) {\n            if (response.hasOwnProperty('title')) {\n                $('.bt__bussiness--title').text(response.title);\n            }\n\n            if (response.hasOwnProperty('content')) {\n                $('.business-item-content').html(response.content);\n            }\n\n            if (slug === 'message' &amp;&amp; response.hasOwnProperty('team_item')) {\n                var teamItems = JSON.parse(response.team_item);\n                $('.team-img').empty();\n                teamItems.forEach(function(teamItem) {\n                    var itemHtml = `\n                        &lt;div class=\"team-item\"&gt;\n                            &lt;img src=\"/media/${teamItem.fields.image}\" alt=\"${teamItem.fields.name}\"&gt;\n                            &lt;h3&gt;${teamItem.fields.name}&lt;/h3&gt;\n                            &lt;h4&gt;${teamItem.fields.position}&lt;/h4&gt;\n                            ${teamItem.fields.content}\n                        &lt;/div&gt;\n                    `;\n                    $('.team-img').append(itemHtml);\n                });\n            } else {\n                $('.team-img').empty();\n            }\n        },\n        error: function(xhr, errmsg, err) {\n            console.error('Error fetching data:', errmsg);\n        }\n    });\n});\n</code></pre> </li> </ol>"},{"location":"research/draft/#summary","title":"Summary","text":"<ul> <li>View: Handles both AJAX and non-AJAX requests, returning JSON for AJAX requests and rendering the full template for non-AJAX requests.</li> <li>Template: Designed to display the necessary data without conditional AJAX checks.</li> <li>JavaScript: Properly handles the AJAX request and updates the DOM based on the response.</li> </ul> <p>By structuring your view and template this way, you can cleanly separate the handling of AJAX and non-AJAX requests.</p>"},{"location":"research/draft/#plugins-ui","title":"Plugins UI","text":"<ul> <li>jQuery Flip</li> </ul>"},{"location":"research/draft/#js","title":"JS","text":"<p>How to see the JavaScrit methods in the console.</p> <p>Tips</p> <ul> <li><code>console.log(obj)</code>: Logs the entire object to the console, showing properties and methods.</li> <li><code>Object.keys(obj)</code>: Returns an array of enumerable properties directly on the object.</li> <li><code>Object.getOwnPropertyNames(obj)</code>: Returns an array of all properties directly on the object.</li> <li><code>for...in loop</code>: Iterates over all enumerable properties, including inherited ones.</li> <li><code>Reflect.ownKeys(obj)</code>: Returns an array of all property keys on the object.</li> <li><code>Object.getOwnPropertyNames(Object.getPrototypeOf(obj))</code>: Returns an array of properties on the object's prototype, which includes methods.</li> </ul>"},{"location":"research/draft/#ideas","title":"IDEAS","text":"<p>Django Project </p> <ol> <li>Multi Mullingual Database (MMDB)</li> </ol>"},{"location":"research/draft/#translating-our-static-content","title":"Translating our static content","text":"<p>To translate strings that are used in templates, Django provides us with a trans template tag.</p>"},{"location":"research/draft/#daintree-an-e-commerce-site","title":"<code>Daintree</code> \u2013 an E-commerce Site","text":"<p>A basic <code>e-commerce</code> site has one main purpose: to help users find and buy products from the online store. Django alone can be used to build an e-commerce site quickly, using database queries to allow searches across product range, but this doesn't scale well. Databases are designed to quickly save and retrieve rows of data, but they are not optimized to search across the entire dataset (or a subset). Once the traffic of your site starts to increase, you'll see the search speed go down very quickly. On top of that, there are some features that are very difficult to build with a database.</p> <p>Instead, we will use a search server. A search server is very much like a database.You give it some data to store and then you can retrieve it later. It also has features specifically built to help you add searching to your applications. You might wonder that if a search server can store our data like a database, then can we not just get rid of the database? We can, but usually it's not recommended. Why? Well, because the search server is designed for a different use case. While it can store your data, a database provides a lot of guarantees about the storage that a search server usually doesn't. For example, a good database (such as MySQL or PostgreSQL) gives you a guarantee that if you try to save something and the database returns a successful response, your data will not be lost in case of a crash or power outage or some other problem. This is called durability. A search server does not provide this guarantee because that's not what they are designed for. It is usually a good idea to keep our data in a database and use the search server just to search across our data.</p> <p>For the application that we will develop in this chapter, we will be using Elasticsearch, one of the most popular and perhaps easy-to-use search servers available. It's also open source and available for free. So let's get started. This is going to be an exciting chapter!</p> <p>To load the test data, run the following command after the <code>migrate</code> command:</p> <pre><code>python manage.py loaddata main/fixtures/initial.json\n</code></pre> <p>This should fill your database with a thousand sample products and give us enough data to play around with.</p>"},{"location":"research/draft/#searching-from-python","title":"Searching from Python","text":"<p>The library that we will be using here is <code>elasticsearch_dsl</code>.</p> <pre><code>pip install elasticsearch_dsl\n</code></pre> <pre><code>&gt; python manage.py shell\n&gt; from elasticsearch_dsl import Search\n&gt; from elasticsearch_dsl.connections import connections\n&gt; connections.create_connection(hosts=['localhost:9200'])\n&lt;Elasticsearch([{u'host': u'localhost', u'port': 9200}])&gt;\n&gt; Search(index='daintree').query('match', name='django').execute().\nto_dict()\n{   \n    u'_shards': {u'failed': 0, u'successful': 5, u'total': 5},\n    u'hits': {u'hits': [{u'_id': u'1',\n    u'_index': u'daintree',\n    u'_score': 0.19178301,\n    u'_source': {u'category': u'Book',\n    u'name': u'Django Blueprints',\n    u'price': 50,\n    u'tags': [u'django', u'python', u'web applications']},\n    u'_type': u'products'}],\n    u'max_score': 0.19178301,\n    u'total': 1},\n    u'timed_out': False,\n    u'took': 2\n}\n</code></pre> <p>Let's take a look at each line. The first two lines simply import the library. The third line is important. It uses the create_connection method to define a default connection. This is the connection that will be used whenever we try to do a search using this library with the default settings.</p>"},{"location":"research/draft/#reference","title":"Reference","text":"<ul> <li>svgviewer.dev</li> <li> <p>svgtopng.com</p> </li> <li> <p>quote: you either die a hero or live long enough to see yourself become the villain</p> </li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#django","title":"Django","text":"<ul> <li>Internationalization and Localization in Django: A Quick Guide</li> </ul>"},{"location":"tags/#linux","title":"Linux","text":"<ul> <li>gThumb lightweight image editor in ubuntu</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"},{"location":"tags/#css","title":"css","text":"<ul> <li>CSS Media Queries</li> </ul>"},{"location":"tags/#html","title":"html","text":"<ul> <li>CSS Media Queries</li> </ul>"}]}