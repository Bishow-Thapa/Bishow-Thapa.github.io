{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> <p>Let's collaborate and turn visions into reality!</p> <ul> <li>Front-End Expert: Two years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"office/draft/","title":"Draft","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul> <p>Embedded Device</p> working with .py fileDjango <p>To connect to an embedded device using Python, you typically use networking libraries such as socket or higher-level libraries built on top of it, like paramiko for SSH connections or pyserial for serial communication.</p> <p>Here's a basic example of how you can use the socket library to connect to a device using its IP address and a specific port:</p> <pre><code>import socket\n\n# IP address and port of the embedded device\ndevice_ip = '192.168.1.100'\ndevice_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the device\ntry:\n    client_socket.connect((device_ip, device_port))\n    print(\"Connected to the embedded device\")\n\n    # Here you can send and receive data to/from the device\n\n    # Example: Sending data\n    message = \"Hello, device!\"\n    client_socket.sendall(message.encode())\n\n    # Example: Receiving data\n    received_data = client_socket.recv(1024)\n    print(\"Received:\", received_data.decode())\n\nexcept ConnectionRefusedError:\n    print(\"Connection to the embedded device refused\")\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre> <p>Replace <code>192.168.1.100</code> with the actual IP address of your embedded device, and <code>12345</code> with the actual port number it's listening on.</p> <p>Once connected, you can send and receive data to/from the device as needed. Make sure to handle exceptions appropriately, such as <code>ConnectionRefusedError</code> if the connection is refused.</p> <p>Depending on your specific requirements and the capabilities of your embedded device, you might need to use different libraries or protocols. For example, if your device supports SSH, you might use <code>paramiko</code> for SSH connections. If your device communicates over serial ports, you might use <code>pyserial</code>.</p> <p>To convert the provided Python code into a Django application, you can create a Django view that handles the connection to the embedded device when a certain URL is accessed. Below is an example of how you can do this:</p> viewsurl <p>First, make sure you have Django installed. If not, you can install it using pip:</p> <pre><code>#1. \npip install django\n#2. \ndjango-admin startproject embedded_device_project\n#3.\ncd embedded_device_project\npython manage.py startapp embedded_device_app\n</code></pre> embedded_device_app/views.py<pre><code># 4. \n# embedded_device_app/views.py\n\nfrom django.http import HttpResponse\nimport socket\n\ndef connect_to_device(request):\n    # IP address and port of the embedded device\n    device_ip = '192.168.1.100'\n    device_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n    # Create a socket object\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        # Connect to the device\n        client_socket.connect((device_ip, device_port))\n        message = \"Hello, device!\"\n        client_socket.sendall(message.encode())\n        received_data = client_socket.recv(1024).decode()\n        response_message = f\"Received from device: {received_data}\"\n    except ConnectionRefusedError:\n        response_message = \"Connection to the embedded device refused\"\n    finally:\n        # Close the socket\n        client_socket.close()\n\n    return HttpResponse(response_message)\n</code></pre> urls.py<pre><code># embedded_device_project/urls.py\n\nfrom django.urls import path\nfrom embedded_device_app import views\n\nurlpatterns = [\n    path('connect-to-device/', views.connect_to_device, name='connect_to_device'),\n]\n</code></pre> <p>Now, when you access the URL <code>http://127.0.0.1:8000/connect-to-device/</code> in your browser, Django will attempt to connect to the embedded device and send a message. The response from the device (if any) will be displayed in the browser. Ensure to replace the IP address and port with the appropriate values for your embedded device.</p>"},{"location":"office/draft/#dropdown-issue-in-antd","title":"Dropdown Issue in <code>antd</code>","text":"Bug <pre><code>import React from 'react';\nimport { DownOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Dropdown, Space } from 'antd';\nconst items = [\n  {\n    key: '1',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    ),\n  },\n  {\n    key: '2',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    icon: &lt;SmileOutlined /&gt;,\n    disabled: true,\n  },\n  {\n    key: '3',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\"&gt;\n        3rd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    disabled: true,\n  },\n  {\n    key: '4',\n    danger: true,\n    label: 'a danger item',\n  },\n];\nconst App = () =&gt; (\n  &lt;Dropdown\n    menu={{\n      items,\n    }}\n  &gt;\n    &lt;a onClick={(e) =&gt; e.preventDefault()}&gt;\n      &lt;Space&gt;\n        Hover me\n        &lt;DownOutlined /&gt;\n      &lt;/Space&gt;\n    &lt;/a&gt;\n  &lt;/Dropdown&gt;\n);\nexport default App;\n</code></pre>"},{"location":"office/draft/#solution-1","title":"Solution 1","text":"<p>The issue in your code is that you are passing <code>menuItem</code> inside the <code>menu</code> prop as an object, but it should be passed as an array of menu items directly to the <code>menu</code> prop. In the Ant Design <code>Dropdown</code> component, the <code>menu</code> prop expects a <code>Menu</code> component or a configuration object for the <code>Menu</code> component, not just an array of menu items.</p> <p>Here's how you can fix it:</p> <ul> <li>Import the <code>Menu</code> component from Ant Design.</li> <li>Use the <code>Menu</code> component to wrap your <code>menu</code> items.</li> <li>Pass the <code>Menu</code> component as the <code>menu</code> prop of Dropdown.</li> </ul> Here's the corrected code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>In this updated code:</p> <ul> <li><code>Menu</code> component is used to create a menu with <code>Menu.Item</code> elements.</li> <li>The <code>menu</code> variable now holds the <code>Menu</code> component, which is passed to the <code>overlay</code> prop of the Dropdown component.</li> </ul> <p>This should resolve the error and render the dropdown menu correctly.</p>"},{"location":"office/draft/#solution-2","title":"Solution 2","text":"<p>It looks like there might be a misunderstanding or an outdated example in the documentation. The Ant Design <code>Dropdown</code> component's menu prop should indeed be passed a <code>Menu</code> component, as it expects a React node that represents the menu.</p> <p>Here\u2019s a clarification on how you should typically use the <code>Dropdown</code> and <code>Menu</code> components together:</p> <ol> <li> <p>Using <code>Menu</code> with Dropdown: You use the <code>Menu</code> component to define the menu structure and then pass it to the <code>Dropdown</code> component's <code>overlay</code> prop (previously called menu in older versions).</p> </li> <li> <p>Documentation Changes: Sometimes documentation or examples might be outdated or incorrect. Always cross-reference with the latest version of the library and check if there have been any changes in prop names or usage.</p> </li> </ol> <p>Here's a modern and correct approach based on current Ant Design practices:</p> <pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>Key Points:</p> <ul> <li><code>overlay</code> Prop: Use the <code>overlay</code> prop of <code>Dropdown</code> to pass the <code>Menu</code> component.</li> <li><code>Menu</code> Component: Create a <code>Menu</code> with <code>Menu.Item</code> elements to define the dropdown items.</li> </ul> <p>If you\u2019re seeing examples or documentation suggesting otherwise, it might be worth checking the version of Ant Design you're using or looking at the official Ant Design documentation for the version you're working with to ensure compatibility.</p>"},{"location":"office/draft/#solution-3-passing-value","title":"Solution 3 <code>passing value</code>","text":"<p>To pass the <code>record</code> to the <code>onClick</code> handler inside the <code>Dropdown</code>'s <code>Menu</code> component, you'll need to dynamically create the <code>Menu</code> with access to the record from the <code>render</code> function. Since <code>menudailytask</code> is defined outside of the <code>render</code> function, it won't have access to the <code>record</code> variable.</p> <p>Here's how you can modify your code to achieve this:</p> <ol> <li> <p>Move <code>Menu</code> Definition Inside <code>render</code>: Define the <code>Menu</code> within the <code>render</code> method where the <code>record</code> is available.</p> </li> <li> <p>Create a Function for the <code>Menu</code>: Use a function to create the <code>Menu</code> items with the <code>record</code> passed to the click handlers.</p> </li> </ol> Here\u2019s an updated version of your code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport { EyeOutlined, InteractionTwoTone, InteractionOutlined, MoreOutlined } from '@ant-design/icons';\n\nconst ActionColumn = ({ record }) =&gt; {\n\n  // Function to create the Menu with access to record\n  const createMenu = (record) =&gt; (\n    &lt;Menu&gt;\n      &lt;Menu.Item\n        key=\"1\"\n        onClick={() =&gt; {\n          console.log(\"clicked\", record);\n          // You can add other logic here\n        }}\n      &gt;\n        Yesterday Task\n      &lt;/Menu.Item&gt;\n    &lt;/Menu&gt;\n  );\n\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;div\n        className=\"task-view-btn\"\n        onClick={() =&gt; {\n          setShowModalForTasKDetail(true);\n          setTaskId(record.id);\n          setTodoDetails(record);\n          setHideInternalMessage(true);\n          setSmallChatHeight(false);\n          setChatHeight(false);\n          setchatBox(false);\n        }}\n      &gt;\n        &lt;EyeOutlined /&gt;\n      &lt;/div&gt;\n\n      &lt;Tooltip\n        title={\n          record?.todoTransferToDailyTask?.status\n            ? \"Already moved\"\n            : \"Move to Daily Diary\"\n        }\n      &gt;\n        {record?.todoTransferToDailyTask?.status ? (\n          &lt;InteractionTwoTone\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        ) : (\n          &lt;InteractionOutlined\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        )}\n      &lt;/Tooltip&gt;\n\n\n      {/* Main Code */}\n      &lt;Dropdown overlay={createMenu(record)}&gt;\n        &lt;MoreOutlined className=\"move-to-dailydairy\" /&gt;\n      &lt;/Dropdown&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ActionColumn;\n</code></pre> <p>Key Points:</p> <ul> <li><code>createMenu</code> Function: Defines the <code>Menu</code> component inside the <code>render</code> method and has access to the record.</li> <li>Pass <code>record</code> to <code>createMenu</code>: The <code>record</code> is passed to <code>createMenu</code> to make it available within the <code>Menu</code> items.</li> </ul> <p>By using this approach, you ensure that each <code>Dropdown</code> instance gets its own <code>Menu</code> with the correct <code>record</code> information.</p>"},{"location":"office/draft/#select-username","title":"Select username","text":"<pre><code>&lt;Select\n    placeholder=\"Select a User\"\n    showSearch={true}\n    allowClear\n    filterOption={(input, option) =&gt;\n        option.children[0] &amp;&amp;\n        option.children[0]\n            .toLowerCase()\n            .indexOf(input.toLowerCase()) &gt;= 0\n    }\n    onChange={(id) =&gt; {\n      setSelectedUserId(id);\n\n      if (id === null || id === undefined) {\n        // Reset the username when cleared\n        setSelectedUserName(null);\n      } else {\n        const selectedUser = user.find(u =&gt; u.appUserId === id);\n        if (selectedUser) {\n            setSelectedUserName(selectedUser.userName);\n        }\n      }\n    }}\n&gt;\n    {user.map((user) =&gt; (\n        &lt;Option key={user.appUserId}&gt;\n            {user.fullName} {`[${user.userName}]`}\n        &lt;/Option&gt;\n    ))}\n&lt;/Select&gt;\n</code></pre> <pre><code>{!showResetButton \n  ? `Daily Diary of Today` \n  : `Daily Diary of ${selectedDate}${selectedUserName ? ` [${selectedUserName}]` : ''} ${\n      dailyDairyPaginationResp?.totalCount ? `(${dailyDairyPaginationResp.totalCount})` : ''\n    }`}\n</code></pre>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Intro","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<p>Tip</p> <ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - <code>development domain</code></li> <li>cqweb.ictc.com.np - <code>production domain</code></li> </ul> <p><code>application</code></p> <ul> <li>cqnoval.info.com.np - <code>swagger</code></li> <li>cqnovalid.info.com.np - <code>login endpoint</code></li> </ul> <p><code>tools</code></p> <ul> <li>Jenkins - <code>on port 8080</code></li> <li>portainer - <code>on port 9000</code></li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p>Note</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 svgs\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 useRoles\n\u251c\u2500\u2500 json\n\u251c\u2500\u2500 layouts\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 redux\n\u2502   \u2514\u2500\u2500 store\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 styles\n\u2514\u2500\u2500 utils\n</code></pre> <p>Description</p> <ul> <li><code>assets</code> : contains the image and svg files.</li> <li><code>components</code> : list of all the resuable components.</li> <li><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</li> <li><code>json</code> : has the caleder filter data.</li> <li><code>layouts</code> : contains the base layout of cqweb.</li> <li><code>services</code> : core redux - action, reducer, store</li> <li><code>styles</code> : contains the sass styles.</li> <li><code>utils</code> : list of reusable functions.</li> </ul>"},{"location":"office/intro/#installation","title":"Installation","text":"<p>Success</p> bash<pre><code>npm i --legacy-peer-deps\n\nnpm run product\n</code></pre>"},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/intro/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/intro/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/ispl/package/","title":"Package","text":""},{"location":"office/ispl/package/#api","title":"API","text":""},{"location":"office/ispl/package/#query-string","title":"query-string","text":"<pre><code>npm i query-string\n</code></pre> <pre><code>import queryString from 'query-string';\n</code></pre> Pictures Note <ul> <li>query-string</li> <li>What is Query String? What are its advantages and limitations? </li> </ul>"},{"location":"office/ispl/package/#reducer","title":"REDUCER","text":""},{"location":"office/ispl/package/#action","title":"ACTION","text":""},{"location":"office/ispl/package/#antd-message","title":"antd <code>message</code>","text":"<pre><code>import { message } from 'antd';\n</code></pre>"},{"location":"office/ispl/secret/","title":"Secret","text":""},{"location":"office/ispl/secret/#jenkins","title":"JENKINS","text":"<pre><code>URL - http://ci-info.info.com.np:8080/\n\nuser: infoadmin\npwd: anil{****}1234\n</code></pre>"},{"location":"office/ispl/secret/#gitlab","title":"Gitlab","text":"<pre><code>URL: http://gitserver.info.com.np\n\npwd: bi{.........}\n</code></pre>"},{"location":"office/ispl/secret/#postmen","title":"Postmen","text":"<pre><code>mail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/ispl/secret/#zimbra","title":"Zimbra","text":"<pre><code>URL: https://mail.info.com.np\n\nmail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/ispl/secret/#ictc","title":"ICTC","text":"<pre><code>URL: https://cqweb.ictc.com.np/#/\n\nuser: anil\npwd: Anil@{*****}\n\nuser: admin_***\npwd: BaSs@9627{*}\n</code></pre>"},{"location":"office/ispl/secret/#cqweb","title":"CQWEB","text":"<pre><code>URL: https://cqweb.info.com.np\n\nuser: admin_bbask\npwd: SsBa@9999\n\nuser: bishow\npwd: $Bishow88\n\nuser: zoro\npwd: $Bishow88\n\nuser: biju\npwd: 1q2w3E**@\n\nuser: Aakash\npwd: 1q2w3E**@\n\nuser: sp\npwd: Password1234$\n\nuser: amit\npwd: 1q2w3E**@\n\nuser: bijay\npwd: 1q2w3E**@\n\nuser: sajal\npwd: 1q2w3E**@\n</code></pre>"},{"location":"office/ispl/secret/#infocus360-not-active","title":"Infocus360 (not active)","text":"<p>Danger</p> <pre><code>URL: https://infocus360.ispl.com.np\n\nuser: bishow\npwd: 1q2w3E**@\n\nuser: admin\npwd: 1q2w3E*\n</code></pre>"},{"location":"office/ispl/secret/#zimbra-mail-updated","title":"Zimbra MAIL <code>updated</code>","text":"<p>Success</p> <pre><code>URL: http://mail.info.com.np/webmail\n\nmail: bishow.thapa@info.com.np\npwd: I$VqIS~i%DTE\n</code></pre>"},{"location":"office/ispl/secret/#cedro","title":"Cedro","text":"<p>Success</p> <pre><code>url: https://cedro.percipio.com\nuser: anil.maharjan@ispl.com.np\npwd: Welcome1\n</code></pre>"},{"location":"office/ispl/secret/#clickup","title":"Clickup","text":"<p>Success</p> <pre><code>url: https://app.clickup.com/login\nmail: bishow.thapa@info.com.np\npwd: 75NHYbVWkWFM8pWyjWYD\n</code></pre>"},{"location":"office/ispl/secret/#ispl-website-cpanel","title":"ISPL WEBSITE CPANEL","text":"<p>Success</p> <pre><code># URL\nhttps://s717.sgp8.mysecurecloudhost.com:2083/\n# USERNAME\nbishow@allianceasianepal.org.np\n# PASSWORD\nBishow@123##\n</code></pre>"},{"location":"office/ispl/secret/#teams-for-leave-approval","title":"Teams (for leave approval)","text":"<p>Success</p> <ul> <li>teams.microsoft.com</li> <li>bishow.thapa@ispl.com.np</li> <li>"},{"location":"office/ispl/secret/#hr-app","title":"HR app","text":"<p>Note</p> <pre><code>https://hr.my/go/\ndoyahi8886@bizatop.com\nadminadmin1234\n\nhttps://hr.my/go/\nbishow.thapa@info.com.np\nadmin1234\n</code></pre>"},{"location":"office/ispl/secret/#ispl-mail-for-google-app","title":"ISPL Mail For Google App","text":"<pre><code>isplmail49@gmail.com \n</code></pre>"},{"location":"office/ispl/secret/#local-portainer-password","title":"Local Portainer password","text":"<pre><code>username: ninja\npassword: ,d:_D9rm_7w?}D8\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/circular-planning-highlight-person-contact-list/","title":"Circularplanning Highlighted contact list","text":"<pre><code>git diff --name-only\n\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nconst Companies = ({\n    ...\n    // added\n    selectedCompanyAttentionToIds,\n}) =&gt; {\n\n    const cols = [\n        ...\n        {\n            title: \"Person Name\",\n            key: \"personFullName\",\n            render: (record) =&gt; {\n                // return record.personFullName == \" \"\n                //   ? \"No Person\"\n                //   : record.personFullName;\n                const isAttention = selectedCompanyAttentionToIds.includes(record?.contactPersonId);\n\n                return (\n                &lt;span style={{ color: isAttention ? 'red' : 'inherit' }}&gt;\n                    {record.personFullName || \"No Person\"}\n                &lt;/span&gt;\n                );\n            },\n        },\n        ...\n    ]\n}\n</code></pre> <pre><code>//  src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\nconst Tender = ({\n        ...\n    }) =&gt; {\n\n    // added\n    const [selectedCompanyAttentionToIds, setSelectedCompanyAttentionToIds] = useState([]);\n\n    const rowEventhandlerscompany = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                // added\n                let attentionTo = JSON.parse(record?.attentionTo);\n                if(!isEmpty(attentionTo)) {\n                    let id = attentionTo?.map((item) =&gt; item?.AttentionId);\n                    setSelectedCompanyAttentionToIds(id)\n                }\n            },\n        };\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;Tabs\n                className=\"global-tabs-wrapper tender-tabs-wrapper\"\n                defaultActiveKey=\"1\"\n                size=\"large\"\n                activeKey={selectedBusinessTabPaneKey}\n                onChange={handleTabChange}\n            &gt;\n                &lt;TabPane\n                    tab=\"Circular Planning\"\n                    key=\"7\"\n                    className={`summary-wrapper ${showChat &amp;&amp; \"chatOpen\"}`}\n                &gt;\n                &lt;Companies\n                    getDetails={getDetails}\n                    searchEmailTender={searchEmailTender}\n                    rowEventhandlers={rowEventhandlerscompany}\n                    companyId={contactCompanyId}\n                    emailReferenceId={emailReferenceId}\n                    selectedTenderRowId={selectedTenderRowId}\n                    isCircular={isCircularTabStatus}\n                    selectedBusinessTabPaneKey={selectedBusinessTabPaneKey}\n                    // added\n                    selectedCompanyAttentionToIds={selectedCompanyAttentionToIds}\n                /&gt;\n                &lt;/TabPane&gt;\n            &lt;/Tabs&gt;\n        &lt;/div&gt;\n    );\n}\n\n\nexport default Tender;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/","title":"Dashboard Daily Diary Sorting: Task Edit and Internal Message","text":"<p>Dashboard Daily Dairy Table Sorting in Title, Ref, Created date</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#solved","title":"Solved","text":"_dashboard.css<pre><code>.dashboard_task-daily .ant-table-column-sorters, \n.dashboard_task-daily &gt; .ant-table-column-sorters-with-tooltip &gt; .ant-table-column-sorters &gt; span:first-child  {\n  width: 100%;\n}\n</code></pre> todolist.js<pre><code>const columns = [\n    ...\n    {\n        // title: \"Tasks\",\n        title: \n            (\n                &lt;div\n\n                    style={{ \n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        width: \"100%\",  \n                    }}\n                &gt;\n                    &lt;span\n                        style={{\n                            width: \"100%\",\n                            textAlign: \"left\"\n                        }}\n                    &gt;Tasks&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"tasks\",\n            width: \"40%\",\n            // added\n            fixed: \"left\",\n            // sorter: true,\n            sorter: (a, b) =&gt; a.subject.localeCompare(b.subject),\n            ...\n    },\n    {\n        title: \n            (\n                &lt;div\n\n                style={{ \n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    width: \"100%\",  \n                }}\n                &gt;\n                &lt;span\n                    style={{\n                    width: \"100%\",\n                    textAlign: \"left\"\n                    }}\n                &gt;Ref&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"red\",\n            width: \"10%\",\n            // added\n            sorter: (a, b) =&gt; a.referenceCode.localeCompare(b.referenceCode),\n            ...\n    },\n    {\n      title: \n        (\n            &lt;div\n\n            style={{ \n                display: \"flex\",\n                justifyContent: \"space-between\",\n                width: \"100%\",  \n            }}\n            &gt;\n            &lt;span\n                style={{\n                width: \"100%\",\n                textAlign: \"left\"\n                }}\n            &gt;Created Date&lt;/span&gt;\n            &lt;/div&gt;\n        ),\n        // added\n        className: \"dashboard_task-daily\",\n        key: \"created\",\n        width: \"15%\",\n        // added\n        sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)),\n        ...\n    }\n]\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#example","title":"Example","text":""},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-date","title":"Using <code>Date</code>","text":"<pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; new Date(a.creationTime) - new Date(b.creationTime), // Custom sorter for creationTime\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>sorter: (a, b): This defines a custom sorting function for the creationTime. The function compares two values (<code>a</code> and <code>b</code>) based on the <code>creationTime</code>.</li> <li>new Date(a.creationTime) and new Date(b.creationTime):     The Date object converts the string <code>creationTime</code> into a JavaScript Date.     Subtracting one date from another returns the difference in milliseconds, which the sorter uses to determine the order.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-moment","title":"Using <code>moment</code>","text":"<p>Yes, you can use <code>Moment.js</code> to handle date parsing and comparison for sorting the <code>creationTime</code>. <code>Moment.js</code> provides a convenient way to handle dates, especially for formatting and parsing.</p> <pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)), // Custom sorter using Moment.js\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>moment(a.creationTime): This converts the <code>creationTime</code> into a Moment.js object.</li> <li>moment(a.creationTime).diff(moment(b.creationTime)):<ul> <li>The <code>.diff()</code> method compares the two dates and returns the difference in milliseconds.</li> <li>The <code>sorter</code> will use this difference to order the rows.</li> </ul> </li> </ul> Why Use Moment.js? <ul> <li>Flexibility: Moment.js provides more robust parsing, particularly when handling various date formats.</li> <li>Accuracy: It handles time zones and more advanced date operations if needed, which can be useful if your dates have additional complexity.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/","title":"Scrollable Issue and Flip","text":"<p>Tender list is not scrollable in tablet view after tab is changed</p> <p><code>Tender/Projects</code> in the Dashboard</p> _dasboard.scss<pre><code>/* page-num: 604 */\n\n.flip-card-front,\n.flip-card-back {\n    /* ISSUE position */\n    /* position: absolute; */\n    width: 100%;\n    height: 100%;\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n}\n</code></pre> <p>This generates new bug in the <code>Today's Appointments</code> dashboard which is scrollable.</p> <p><code>Today's Appointments</code> inline <code>flip-card</code> remove the <code>overflow property</code></p> event.js<pre><code>// line-num: 123\n\nreturn (\n    &lt;div\n      class=\"flip-card\"\n      style={\n        type === \"public\"\n            //   ? { height: \"340px\", overflow: \"auto\" }\n            //   : { height: \"363px\", overflow: \"auto\" }\n            ? { height: \"340px\" }\n            : { height: \"363px\" }\n      }\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#card-flip-issue","title":"Card Flip Issue","text":"tenders.js<pre><code>const [isFlipped, setIsFlipped] = useState(false);\n\nconst TenderLists = ({ classNames }) =&gt; {\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n                &lt;div className=\"flip-card-front\"&gt;&lt;/div&gt;\n                &lt;div className=\"flip-card-back\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> <pre><code>// Tenders/Projects\n&lt;h4 className=\"dashboards__body--title\"&gt;\n    {/* {tenderHistory\n        ? \"Tenders\"\n        : tenderFourth\n        ? \"Tenders\"\n        : \"Tenders\"} */}\n    Tenders/Projects\n    &lt;span\n        onClick={() =&gt; {\n            // setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n    &gt;\n        &lt;img\n        src=\"./assets/svg/toggle-arrow.svg\"\n        height={15}\n        alt=\"complete\"\n        /&gt;\n    &lt;/span&gt;\n&lt;/h4&gt;\n\n\n// Projects/Tenders\n &lt;div className=\"dashboards__bodyWrap\"&gt;\n    &lt;h4 className=\"dashboards__body--title\"&gt;\n        Projects/Tenders\n        &lt;span\n        onClick={() =&gt; {\n            setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n        &gt;\n        &lt;img\n            src=\"./assets/svg/toggle-arrow.svg\"\n            height={15}\n            alt=\"complete\"\n        /&gt;\n        &lt;/span&gt;\n    &lt;/h4&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#new","title":"NEW","text":"_dashboard.scss<pre><code>/* _dashboard.scss:1158 */\n\n@media only screen and (max-width: 1462px) {\n  .tour2 {\n    /* comment this */\n    /* height: 530px !important; */\n  }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#what-is-the-main-reason-that-is-blocking-scrolling","title":"What is the main reason that is blocking scrolling","text":"<p>The main reasons that can block scrolling on a webpage include:</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#1-css-properties","title":"1. CSS Properties:","text":"<ul> <li>Setting <code>overflow: hidden;</code> on the body or a container element will prevent scrolling.</li> <li><code>position: fixed; or position: absolute;</code> can lock the scroll position, especially when applied to body or html elements.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#2-modal-or-overlay-components","title":"2. Modal or Overlay Components:","text":"<ul> <li>Many libraries (like Ant Design, Bootstrap, etc.) often disable background scrolling when a modal, drawer, or overlay is open by modifying the body\u2019s scroll behavior.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#3-javascript-interference","title":"3. JavaScript Interference:","text":"<ul> <li>Adding event listeners to block default scrolling behavior, such as using <code>e.preventDefault()</code> in a <code>wheel</code> or <code>touchmove</code> event.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#4-browser-specific-issues","title":"4. Browser-Specific Issues:","text":"<ul> <li>Certain browser settings or extensions may impact scrolling functionality.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#5-viewport-meta-tags","title":"5. Viewport Meta Tags:","text":"<ul> <li>On mobile, incorrect settings for viewport (e.g., <code>user-scalable=no</code>) can interfere with scrolling.</li> </ul> <p>Checking these areas can help you resolve scrolling issues in your application. Would you like to check the code to identify the specific cause?</p>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/","title":"isCircular conditional rendering","text":""},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#conditionally-rendering-iscircular-using-logical-and","title":"Conditionally Rendering <code>isCircular</code> using <code>Logical AND</code>","text":"<p>Remove Template and Send for Approval from Tender Company Tab its only needed in Circular Planing</p> companies.js <p><code>OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> <pre><code>// 1278\n{isCircular &amp;&amp; (\n&lt;&gt;\n    &lt;div style={{ display: \"flex\" }}&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; {\n        {\n        setIsTemplateModalOpen(true)\n        };\n        dispatch(actionForGetAllCircularPlanningTemplate())\n    }\n    } style={{ marginRight: \"8px\" }}&gt;\n        Template\n    &lt;/Button&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n        Send for Approval\n    &lt;/Button&gt;\n    &lt;/div&gt;\n&lt;/&gt;)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#lifting-the-state-up","title":"Lifting the state up","text":"<p><code>OfficeResource/Reference/Tabs/TenderTabs/index.js</code></p> <pre><code>const Tender = ({})\n\nconst [isCircularTabStatus, setIsCircularTabStatus] = useState(false);\n\n\n// 149\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n\n    if (key === \"2\") {\n      tenderCommunication();\n      updateMailOriginState(\"communication\");\n      setIsCircularTabStatus(false);\n    } else if (key === \"3\") {\n      tenderCommunication();\n      updateMailOriginState(\"companies\");\n    } else if(key === \"7\") {\n      setIsCircularTabStatus(true);\n    }\n    else {\n      // console.log(\"I'm other tab\");\n      setIsCircularTabStatus(false);\n    }\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/","title":"RegExp Validation in Mail","text":""},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/#regex-validation-in-mail","title":"Regex validation in Mail","text":"<p>There is error while sending email with \" double quote in the email address.</p> ComposeEmailDrawer.js <pre><code>// pg: 812\n// const reg = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n// solved\nconst reg = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/","title":"Conditionally Showing Button","text":""},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/#showing-button-on-condition","title":"Showing Button on Condition","text":"<p>Save button display on yesterdays and todays date only for now and other edit buttons keep as it is for now.</p> <p>Solved</p> ParentChildren <pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const [selectedAdvancedSearchDate, setSelectedAdvancedSearchDate] = useState(moment().format('YYYY-MM-DD'));\n\n    const onAdvanSearchFinish = (values) =&gt; {\n        ...\n        setSelectedAdvancedSearchDate(selectedDate)\n        ...\n    }\n\n    const handleResetAdvancedSearch = () =&gt; {\n        ...\n        let todayDate = moment().format('YYYY-MM-DD');\n        setSelectedAdvancedSearchDate(todayDate);\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"dashboards__body--main\"&gt;\n                &lt;DailyDairy\n                ...\n                selectedAdvancedSearchDate={selectedAdvancedSearchDate}\n                setSelectedAdvancedSearchDate={setSelectedAdvancedSearchDate}\n                /&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p><code>Home/DashboardComponents/MainDashboard/DailyDairy/index.jsx</code></p> <pre><code>function DailyDairy (props) {\n\n    let {\n        data,\n        loading,\n        setSelectedRecordData,\n        setIsDailyDairyModalOpen,\n        showResetButton,\n        // added\n        selectedAdvancedSearchDate,\n        setSelectedAdvancedSearchDate,\n    } = props;\n\n\n    // added\n    const today = moment().format('YYYY-MM-DD');\n    const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');\n\n    const isValidDate = (date) =&gt; {\n        console.log(\"Date params: \", date);\n        return date === today || date === yesterday;\n    };\n    const isDateValid = selectedAdvancedSearchDate === today || selectedAdvancedSearchDate === yesterday;\n\n\n    return (\n        &lt;&gt;\n            {/* added  isDateValid */}\n            {isDateValid &amp;&amp; (\n                &lt;Content\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"end\",\n                        paddingTop: \"8px\",\n                    }}\n                &gt;\n                    {/* {!loading &amp;&amp; data != null &amp;&amp; !showResetButton &amp;&amp; !isEmpty(data.items) &amp;&amp; ( */}\n                    {!loading &amp;&amp; data != null  &amp;&amp; !isEmpty(data.items) &amp;&amp; (\n                        &lt;Button\n                            type=\"primary\"\n                            onClick={handleTodaySaveDiary}\n                            style={{\n                                padding: \"0px 10px\"\n                            }}\n                        &gt;\n                            Save\n                        &lt;/Button&gt;\n                    )}\n                &lt;/Content&gt;\n            )}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/tender-module-task-edit-and-im/","title":"Tender Module: Task Edit and Internal Message","text":"<p>In Tender Section : Task Section there is no edit and Message Section .</p> TodoList.js<pre><code>const ToDoLists = (props) =&gt; {\n    // added\n    const [showUpdateTask, setShowUpdateTask] = useState(false);\n    const [updateTaskRecord, setUpdateTaskRecord] = useState(false);\n\n    // setShowUpdateTask, setUpdateTaskRecord\n    const columns = getTodoColumns({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord });\n\n\n    // added\n    useEffect(() =&gt; {\n        if(showUpdateTask) {\n        console.log(\"true\")\n        // console.log(\"updateTaskRecord: \", updateTaskRecord)\n        form.setFieldsValue({\n            subject: updateTaskRecord?.subject,\n            // referenceId: updateTaskRecord,\n            // dueDate: updateTaskRecord,\n            // organizerEventPriorityId: updateTaskRecord,\n            // todoEventStatusId: updateTaskRecord,\n        })\n        } else {\n            // console.log(\"false\")\n            form.resetFields()\n        }\n    }, [showUpdateTask])\n\n    return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;Table\n          columns={columns}\n          // rowKey=\"appUserId\"\n          rowKey={(record) =&gt; record.id}\n          // rowClassName={setTaskClassName}\n          className={`organizer__table contact-table task-table toto-table`}\n          dataSource={dataSource}\n          loading={{\n            indicator: (\n              &lt;img src={LogoImage} height=\"auto\" width=\"50px\" alt=\"logo\" /&gt;\n            ),\n            spinning: todoEventsLoading,\n          }}\n          pagination={false}\n        /&gt;\n\n\n        {(showAddTask || showUpdateTask) &amp;&amp; (\n          &lt;Form\n            form={form}\n            name=\"basic\"\n            initialValues={{\n              remember: true,\n            }}\n            layout=\"inline\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            // initialValues={worker}\n            className=\"task__form \"\n          &gt;\n            &lt;div className=\"add-task-form-item\"&gt;\n              &lt;Form.Item\n                className=\"task-form-item\"\n                name=\"subject\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"  \",\n                  },\n                ]}\n              &gt;\n                &lt;Input\n                  placeholder=\"Please enter subject\"\n                  bordered={false}\n                  autoFocus={true}\n                /&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n            &lt;div className=\"add-task-form-item add-update-task-wrapper\"&gt;\n              &lt;Form.Item className=\"task-form-item task-action-wrapper task-action-right\"&gt;\n                &lt;Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CheckOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n              &lt;Form.Item className=\"task-form-item task-action-cross\"&gt;\n                &lt;Button\n                  type=\"dotted\"\n                  onClick={() =&gt; {\n                    // setShowAddTask(!showAddTask);\n                    setShowAddTask(false);\n                    setShowUpdateTask(false);\n                  }}\n                  bordered={false}\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CloseOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n          &lt;/Form&gt;\n        )}\n\n\n\n\n        {showAddTask ? (\n          \"\"\n        ) : (\n          &lt;Button\n            onClick={() =&gt; {\n              handleAddTask();\n              setShowUpdateTask(false);\n              form.resetFields();\n            }}\n            type=\"text\"\n            size=\"small\"\n          &gt;\n            &lt;span style={{ fontSize: 14 }}&gt; + Add Task&lt;/span&gt;\n          &lt;/Button&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> TodoColumns.js<pre><code>// added\n// setShowUpdateTask, setUpdateTaskRecord\nconst getTodoColumns = ({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord }) =&gt; {\nconst dispatch = useDispatch;\n  return [\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (record) =&gt; {\n        return (&lt;&gt;\n            &lt;EditTwoTone \n              onClick={() =&gt; {\n                setShowUpdateTask(true);\n                setShowAddTask(false);\n                setUpdateTaskRecord(record);\n              }}\n            /&gt;\n        &lt;/&gt;)\n      }\n    }\n  ];\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/ispl/clickup/2024/old/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/ispl/clickup/2024/old/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/ispl/clickup/2024/old/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/ispl/clickup/2024/old/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/ispl/clickup/2024/old/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/dashboard-noticeboard-after-4pm/","title":"Dashboard Model: show after 4pm","text":""},{"location":"office/ispl/clickup/2024/old/dashboard-noticeboard-after-4pm/#dashboard-noticeboard-after-4pm-to-sent-all-users","title":"Dashboard Noticeboard after 4pm to sent all users","text":"<p>Abstract</p> old Codenew CodeAlternative Method DraggableHome.js<pre><code>const DraggableHome = forwardRef(({ navbarRef }, ref) =&gt; {\n\n\n{/* ADDED */}\nconst isAfter4PM = () =&gt; {\n    const now = moment();\n    const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0);\n    return now.isAfter(fourPM);\n};\n\nreturn (\n    &lt;&gt;\n    &lt;div className=\"dashboards dashing\" ref={ref}&gt;\n        &lt;Layout\n            ....\n        /&gt;\n        {noticeBoard?.totalCount === 0 ? (\n        \"\"\n        ) : (\n        &lt;&gt;\n            {!isEmpty(noticeBoard) &amp;&amp; (\n            &lt;&gt;\n                &lt;div\n                    style={{\n                        marginTop: \"-10px\",\n                        backgroundColor: \"white\",\n                        marginBottom: \"14px\",\n                        borderRadius: \"8px\",\n                    }}\n                &gt;\n                    &lt;div className=\"dashboard_notice_board_top\"&gt;\n                        &lt;div\n                            className=\"dashboard_notice_title\"\n                            style={{ width: \"4%\", marginLeft: \"5px\" }}\n                        &gt;\n                            Notice|\n                        &lt;/div&gt;\n                        &lt;marquee className=\"marquee_tag_dashboard\"&gt;\n                            {noticeBoard?.items?.map((data, i) =&gt; (\n                                &lt;span className=\"title_dashboard_notice\" key={i}&gt;\n                                {data?.title}\n                                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${data?.description}`}&lt;/span&gt;\n                                &lt;/span&gt;\n                            ))}\n                        &lt;/marquee&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* ADDED */}\n                {isAfter4PM() &amp;&amp; &lt;NoticeBoardModal noticeBoard={noticeBoard} /&gt;}\n            &lt;/&gt;\n            )}\n        &lt;/&gt;\n        )}\n    &lt;/&gt;\n    )\n});\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        console.log(\"xxx item xxx: \", item)\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;&gt;\n                    {/* &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt; */}\n\n                    &lt;Modal\n                        title={visibleItem?.title}\n                        visible={isModalVisible}\n                        onCancel={handleModalCancel}\n                        footer={null}\n                    &gt;\n                        &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                    &lt;/Modal&gt;\n                &lt;/&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\nimport moment from 'moment';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        // Function to check if current time is after 4 PM\n        const checkTimeToShowModal = () =&gt; {\n            const now = moment();\n            const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0); // 4 PM today\n            if (now.isAfter(fourPM)) {\n                setIsModalVisible(true);\n            } else {\n                setIsModalVisible(false);\n            }\n        };\n\n        checkTimeToShowModal(); // Initial check when component mounts\n\n        // Set interval to check the time every minute\n        const interval = setInterval(() =&gt; {\n            checkTimeToShowModal();\n        }, 60000); // Check every minute\n\n        return () =&gt; {\n            clearInterval(interval); // Clear interval on component unmount\n        };\n    }, []);\n\n    useEffect(() =&gt; {\n        // Update modal visibility based on noticeBoard\n        if (isModalVisible &amp;&amp; !isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n            } else {\n                setVisibleItem(null);\n            }\n        }\n    }, [isModalVisible, currentIndex, noticeBoard]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt;\n            )}\n            {isModalVisible &amp;&amp; (\n                &lt;Modal\n                    title={visibleItem?.title}\n                    visible={isModalVisible}\n                    onCancel={handleModalCancel}\n                    footer={null}\n                &gt;\n                    &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                &lt;/Modal&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/ispl/clickup/2024/old/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/internal-message-only-system-to-show-in-tos/","title":"Internal Message: only system user to show","text":""},{"location":"office/ispl/clickup/2024/old/internal-message-only-system-to-show-in-tos/#internal-only-the-system-users-to-be-shown-in-internal-message-section","title":"Internal : Only the System Users to be shown in Internal Message section","text":"<p>after clicking select all option . only the Internal users are selected</p> <p>By Default all the users in included in internal section . If the user is not to be added in the internal section then it will be tagged as not inlcude in internal section . </p> <p>Tip</p> <p>/organizationStructure/userReportingManagerUserListing</p> <p><code>IsExcludedInternalMessage</code> should be present in the response</p> old CodeUpdated Code Email/Includes/ReplyChatBox.js<pre><code>useEffect(() =&gt; {\n    if (chatBox) {\n        if (selectTosInternal) {\n        let allParticipantsId = allParticipants?.map(\n            (participant) =&gt; participant?.appUserId\n        );\n        let newQuickMessageParticipantDtos = allParticipants?.map(\n            (participant) =&gt; ({\n            participantUserId: participant?.appUserId,\n            })\n        );\n\n        //added\n        let isExcludedParticipantDtos = allParticipants\n            .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n            .map(participant =&gt; participant?.appUserId);\n\n        setQuickMessageParticipantDtosTo(newQuickMessageParticipantDtos);\n        form.setFieldsValue({\n            // participantTos: allParticipantsId,\n            // added\n            participantTos: isExcludedParticipantDtos,\n        });\n        } else {\n        form.setFieldsValue({\n            participantTos: [],\n        });\n        }\n    }\n}, [selectTosInternal]);\n</code></pre> <pre><code>let isExcludedParticipantDtos = allParticipantsId\n  .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n  .map(participant =&gt; participant?.appUserId);\n\nform.setFieldsValue({ \n    participantTos: isExcludedParticipantDtos,\n})\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/ispl/clickup/2024/old/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/ispl/clickup/2024/old/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/ispl/clickup/2024/old/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/ispl/clickup/2024/old/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/re-sent-outbox-mail/","title":"Re-sent & Reset Mail in Outbox","text":""},{"location":"office/ispl/clickup/2024/old/re-sent-outbox-mail/#re-sent-mail-outbox","title":"Re-sent Mail outbox","text":"MailMessageCenterHeader.js<pre><code>// line-number: 1025\n\n{/* added */}\n{selectedMailTypeAndMailData?.typeSystemName === OUTBOX &amp;&amp; (\n    &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n        multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n        \"disabled\"\n        } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n        if (currentSelectedMailMessage?.id) {\n            dispatch(resetOutboxMailFailureCount(currentSelectedMailMessage?.id))\n        }\n        }}\n    &gt;\n        &lt;Image src={trash} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n        Resend\n        &lt;/p&gt;\n    &lt;/div&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/ispl/clickup/2024/old/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/ispl/clickup/2024/old/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n\n        if (response.isSuccess) {\n          message.success(\"Successfully updated company\");\n          dispatch(\n              success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n          );\n          // added here\n          await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n          dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/clickup/2024/old/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/old/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/","title":"Circular Planning Select Debug","text":""},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-tender-module","title":"For Tender Module","text":"<p>Circular Planning Edit Only</p> oldUpdated Companies.js<pre><code>// Edit\nconst handleCircularEdit = (record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    const selectedAttendees = attentionToArray.map((item) =&gt; item.AttentionTo) || [];\n\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: selectedAttendees || [],\n        mailTo: mailAddressss || [],\n    });\n\n    if (record?.contactCompanyId) {\n        dispatch(\n            getContactPersonPagination({\n            CompanyId: record?.contactCompanyId,\n            })\n        );\n        dispatch(getCompanyorPersonEmailAddess(null, record?.contactCompanyId));\n    }\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n};\n</code></pre> <p>Update with <code>useCallback</code> and <code>Promise</code></p> <pre><code>// Edit\nconst handleCircularEdit = useCallback(async(record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setSelectedAttendees(attentionToArray)\n\n    if (record?.contactCompanyId) {\n        try {\n            await Promise.all([\n            dispatch(\n                getContactPersonPagination({\n                CompanyId: record.contactCompanyId,\n                })\n            ),\n            dispatch(getCompanyorPersonEmailAddess(null, record.contactCompanyId)),\n            ]);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: attentionToArray &amp;&amp; attentionToArray.map((item) =&gt; item.AttentionTo) || [],\n        mailTo: mailAddressss || [],\n    });\n\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n}, [dispatch, formCircularEdit]);\n</code></pre> <pre><code>&lt;Option\n    label={option.label}\n    key={option.value}\n    // value={option.label}\n    value={option.value}\n&gt;\n    {option.label}\n&lt;/Option&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-template-edit","title":"For Template <code>Edit</code>","text":"EditCompanyModal.js<pre><code>return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Edit Circular Planningxxx\"\n                visible={isCircularEditVisible}\n                onCancel={() =&gt; {\n                    setIsCircularEditVisible(false);\n                    setValueRadioAddCompany(null);\n                    form.resetFields();\n                }}\n                footer={null}\n            &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/companies-select-debug/","title":"companies.js Debug Example","text":"Companies.js<pre><code>// Edit\nconst handleCircularEdit = useCallback(\n  async (record) =&gt; {\n    if (!record) return;\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setIsCircularEditVisible(true);\n    setSelectedAttendees(attentionToArray);\n\n    let selectedPersonIds =\n      attentionToArray &amp;&amp;\n      attentionToArray?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n      }));\n\n    if (record?.contactCompanyId) {\n      try {\n        await Promise.all([\n          dispatch(\n            getContactPersonPagination({\n              CompanyId: record.contactCompanyId,\n            })\n          ),\n          dispatch(\n            getCompanyorPersonEmailAddess(\n              selectedPersonIds,\n              record.contactCompanyId\n            )\n          ),\n        ]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n\n    formCircularEdit.setFieldsValue({\n      CompanyName: record?.partyName || \"\",\n      contactCompanyId: record?.contactCompanyId || \"\",\n      attendees:\n        (attentionToArray &amp;&amp;\n          attentionToArray.map((item) =&gt; item.AttentionTo)) ||\n        [],\n      mailTo: mailAddressss || [],\n    });\n\n    switch (record?.modeofCommunication) {\n      case \"Email\":\n        setValueRadioAddCompany(\"1\");\n        break;\n      case \"Facebook\":\n        setValueRadioAddCompany(\"2\");\n        break;\n      case \"Whatsapp\":\n        setValueRadioAddCompany(\"3\");\n        break;\n      case \"Twitter\":\n        setValueRadioAddCompany(\"4\");\n        break;\n      case \"Other\":\n        setValueRadioAddCompany(\"5\");\n        break;\n      default:\n        setValueRadioAddCompany(\"1\");\n    }\n  },\n  [dispatch, formCircularEdit]\n);\n\nconst columns = [\n  {\n    title: \"Action\",\n    key: \"action\",\n    align: \"center\",\n    fixed: \"right\",\n    render: (record) =&gt; (\n      &lt;&gt;\n        &lt;Space size=\"small\"&gt;\n          &lt;PlusCircleTwoTone\n            onClick={() =&gt; {\n              setModalRemark(true);\n              setCompany(record);\n            }}\n            style={{ marginRight: \"8px\" }}\n          /&gt;\n          &lt;EditOutlined\n            style={{ marginRight: \"8px\" }}\n            onClick={() =&gt; {\n              handleCircularEdit(record);\n              setSelectedCompanyId(record?.contactCompanyId);\n            }}\n          /&gt;\n          {isTenderCompanyAdmin ? (\n            &lt;Popconfirm\n              title=\"Are you sure you want to delete this item?\"\n              onConfirm={() =&gt; handleDeleteRecord(record)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            &gt;\n              &lt;DeleteOutlined /&gt;\n            &lt;/Popconfirm&gt;\n          ) : null}\n        &lt;/Space&gt;\n      &lt;/&gt;\n    ),\n    width: 15,\n  },\n];\n\nconst debounceAttentiontoDispatch = useCallback(\n  debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n    dispatch(\n      getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId)\n    );\n  }, 300),\n  [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n  const selectedData = options\n    .map((option) =&gt; ({\n      AttentionTo: option.props.children || \"Unknown\",\n      AttentionId: option.key || null,\n    }))\n    .filter((item) =&gt; item.AttentionId);\n\n  setSelectedAttendees(selectedData);\n\n  const selectedPersonIds =\n    selectedData &amp;&amp;\n    selectedData?.map((item) =&gt; ({\n      contactPersonIds: item?.AttentionId,\n    }));\n\n  if (selectedPersonIds.length &gt; 0 &amp;&amp; selectedCompanyId) {\n    debounceAttentiontoDispatch(selectedPersonIds, selectedCompanyId);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/","title":"Add Company Email Modal","text":"<pre><code>git diff --name-only\n\nsrc/components/AddCompany/AddCompanyModal.js\nsrc/services/redux/Reference/action.js\nsrc/services/redux/Reference/api.js\nsrc/services/types.js\n</code></pre> ComponentActionAPITYPE AddCompanyModal.js<pre><code>const [formAddCompanyEmail] = Form.useForm();\nconst [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n\nconst handleAddCompanyEmailModalClose = () =&gt; {\n    formAddCompanyEmail.resetFields();\n    setIsAddCompanyEmailModalOpen(false);\n}\n\nconst onFinishAddCompanyEmail = async(values) =&gt; {\n    let body = {\n        companyId: selectedCompanyId,\n        email: values?.newEmail ?? ''\n    }\n\n    setIsAddCompanyEmailModalLoading(true);\n\n    try {\n        if (body?.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            // Call handleAddCompanyEmailModalClose only if dispatch is successful\n            handleAddCompanyEmailModalClose();\n        }\n    } catch (err) {\n        console.log(\"Error: \", err)\n    } finally {\n        setIsAddCompanyEmailModalLoading(false);\n    }\n}\n\nreturn (\n    &lt;&gt;\n        &lt;Modal\n            title=\"Add Compay Email\"\n            visible={isAddCompanyEmailModalOpen}\n            footer={null}\n            onCancel={handleAddCompanyEmailModalClose}\n        &gt;\n            &lt;Form\n                form={addCompanyEmail}\n                onFinish={onFinishAddCompanyEmail}\n            &gt;\n                &lt;Form.Item\n                    label=\"Email Addresss\"\n                    name=\"newEmail\"\n                    rules={[\n                        { \n                            required: true,\n                            message: 'Please enter the company email!',\n                        },\n                        {\n                            pattern: emailRegex,\n                            message: 'Please enter a valid email address!',\n                        },\n                    ]}\n                &gt;\n                    &lt;Input\n                        placeholder=\"Enter company email\"\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={isAddCompanyEmailModalLoading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>export const actionForAddCompanyOrContactPersonEmailAddById = (body) =&gt; {\n    return async(dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.ADD_COMPANY_EMAIL));\n        const response = await referencesService.addCompanyOrContactPersonEmailAddById(body);\n\n        try {\n            if(response.isSuccess) {\n                message.success(\"Saved Mail Address\")\n                dispatch(success(REFERENCE__TYPES.ADD_COMPANY_EMAIL, response.data));\n            } else if(!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch (err) {\n            throw err;\n        }\n\n        dispatch(finish(REFERENCE__TYPES.ADD_COMPANY_EMAIL))\n    }\n}\n</code></pre> <pre><code>// add company email address\naddCompanyOrContactPersonEmailAddById(body) {\n    let url = `${appBaseUrl}/referenceManagement/companyOrContactPersonEmailAddById`;\n    let data = postService(url, body);\n    return data;\n}\n</code></pre> types.js<pre><code>// company email add\nADD_COMPANY_EMAIL: \"ADD_COMPANY_EMAIL\",\nADD_COMPANY_EMAIL_INIT: \"ADD_COMPANY_EMAIL_INIT\",\nADD_COMPANY_EMAIL_SUCCESS: \"ADD_COMPANY_EMAIL_SUCCESS\",\nADD_COMPANY_EMAIL_FINISH: \"ADD_COMPANY_EMAIL_FINISH\", \n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/#explanation","title":"Explanation","text":"<p>To ensure that <code>handleAddCompanyEmailModalClose</code> is only called if the dispatch action succeeds, you need to move that call inside the <code>try</code> block but only after the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line. This way, it will only be executed if the dispatch action completes successfully.</p> <p>Here's how you can modify your code:</p> <pre><code>try {\n    if (body?.companyId) {\n        await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n        // Call handleAddCompanyEmailModalClose only if dispatch is successful\n        handleAddCompanyEmailModalClose();\n    }\n} catch (err) {\n    console.log(\"Error: \", err);\n} finally {\n    setIsAddCompanyEmailModalLoading(false);\n}\n</code></pre> <p>In this updated version:</p> <ul> <li>The <code>handleAddCompanyEmailModalClose</code> function is called only if the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line executes without throwing an error.</li> <li>The <code>finally</code> block ensures that <code>setIsAddCompanyEmailModalLoading(false)</code> will be called regardless of whether the <code>try</code> block succeeds or fails, ensuring proper cleanup.</li> </ul>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/","title":"Conditionally Rendering Button","text":"<p>Only render the <code>Send for Approval</code> Button if <code>isApproved</code>  is <code>false</code></p> <p>Tender Module &gt; Circular Planning Tab <code>Button</code></p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#solution","title":"Solution","text":"Companies.js<pre><code>{!getDetails?.circularPlanningApprovedStatusDto?.isApproved &amp;&amp; (\n    &lt;Button\n        type=\"primary\"\n        onClick={() =&gt; setIsCircularModalOpen(true)}\n    &gt;\n        Send for Approval\n    &lt;/Button&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#other-changes-in-companiesjs","title":"Other Changes in <code>Companies.js</code>","text":"Old CodeNew Code Companies.js<pre><code>useEffect(() =&gt; {\n    if (isCircular) {\n        dispatch(\n            actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n            })\n        );\n    } else {\n        dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Here\u2019s a refined version of your <code>useEffect</code>, with additional checks and comments:</p> Companies.js<pre><code>useEffect(() =&gt; {\n    if (searchEmailTender) { // Check if searchEmailTender is defined\n        if (isCircular) {\n            dispatch(\n                actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n                })\n            );\n        } else {\n            dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n        }\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Additional Tips</p> <ul> <li> <p>Add Error Handling: If the dispatch actions involve network requests or asynchronous operations, consider adding error handling to manage failed requests or responses.</p> </li> <li> <p>Memoize Callback Functions: If <code>dispatch</code> is a function passed down from a parent component or context, ensure that it is memoized to avoid unnecessary re-renders or effect triggers.</p> </li> <li> <p>Use Custom Hook: If you find yourself using similar logic in multiple places, consider creating a custom hook to encapsulate this effect logic.</p> </li> </ul> <p>By addressing these points and ensuring that all values and functions used in the useEffect are correctly defined and handled, you should be able to avoid bugs and ensure the effect works as intended. If you encounter any specific issues, providing additional details or error messages can help in further diagnosing the problem.</p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#improvement","title":"Improvement","text":"ExampleUsing Moment Companies.js<pre><code>const tooltipMessage = \n    !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${new Date(getDetails.circularPlanningApprovedStatusDto.approveDate).toLocaleDateString()}`\n    : 'Not yet approved';\n\nconst isButtonDisabled = getDetails?.isCircularPlanningApprovalRequestSent !== false;\n\n\nreturn (\n    &lt;&gt;\n        &lt;Tooltip\n            title={tooltipMessage}\n        &gt;\n            &lt;Button\n                type=\"primary\"\n                onClick={() =&gt; setIsCircularModalOpen(true)}\n                disabled={isButtonDisabled}\n            &gt;\n                Send for Approval\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>import moment from 'moment'; // Import moment\n\nconst tooltipMessage = !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${moment(getDetails.circularPlanningApprovedStatusDto.approveDate).format('MMMM D, YYYY')}`\n    : 'Not yet approved';\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/","title":"Converting radio to select","text":""},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#converting-the-radio-to-select","title":"Converting the <code>radio</code> to <code>select</code>","text":"AddCompanyModal.js<pre><code>// changes the number to strings.\nconst [valueRadioAddCompany, setValueRadioAddCompany] = useState('1');\n\n\nconst onChangeAddCompany = (value) =&gt; {\n    setValueRadioAddCompany(value);\n    setIsTemplateModalOpen(true);\n};\n\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n        remarks:\n            valueRadioAddCompany === '1'\n                ? \"Email\"\n                : valueRadioAddCompany === '2'\n                ? \"Facebook\"\n                : valueRadioAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueRadioAddCompany === '4'\n                ? \"Twitter\"\n                : valueRadioAddCompany === '5'\n                ? \"Other\"\n                : null,\n    };\n// ...\n// changes the number to strings.\n}\n\n\n&lt;Form.Item\n    label=\"Moc\"\n&gt;\n    &lt;Select\n        value={valueRadioAddCompany}\n        onChange={onChangeAddCompany}\n        defaultValue=\"1\"\n    &gt;\n        &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n        &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n        &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n        &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n        &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#to-convert-your-radio-buttons-into-a-select-component-using-ant-design-antd-you-can-follow-these-steps","title":"To convert your Radio buttons into a Select component using Ant Design (antd), you can follow these steps:","text":"<ol> <li> <p>Use the <code>Select</code> component: Replace the <code>Radio.Group</code> with <code>Select</code> and update your <code>onFinishAddCompany</code> function to handle the selected value from the <code>Select</code> component.</p> </li> <li> <p>Set the default value: You can set the default value to \"Email\" using the <code>defaultValue</code> prop of the <code>Select</code> component.</p> </li> </ol> <p>Here\u2019s how you can convert the Radio buttons to a Select component and ensure \"Email\" is the default selection:</p> CodeExplanation <pre><code>import React, { useState } from 'react';\nimport { Form, Select, Space } from 'antd';\n\nconst { Option } = Select;\n\nconst DynamicForm = () =&gt; {\n    const [valueSelectAddCompany, setValueSelectAddCompany] = useState('1');\n\n    const handleSelectChange = (value) =&gt; {\n        setValueSelectAddCompany(value);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n            remarks:\n                valueSelectAddCompany === '1'\n                ? \"Email\"\n                : valueSelectAddCompany === '2'\n                ? \"Facebook\"\n                : valueSelectAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueSelectAddCompany === '4'\n                ? \"Twitter\"\n                : valueSelectAddCompany === '5'\n                ? \"Other\"\n                : null,\n            };\n        console.log('Remarks Data:', remarksData);\n    };\n\n    return (\n        &lt;Form onFinish={onFinishAddCompany} layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Moc\"&gt;\n                &lt;Select\n                    value={valueSelectAddCompany}\n                    onChange={handleSelectChange}\n                    defaultValue=\"1\" // Default value set to '1' which corresponds to \"Email\"\n                &gt;\n                    &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n                    &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n                    &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n                    &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n                    &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n            &lt;Form.Item&gt;\n                &lt;Space&gt;\n                    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n                &lt;/Space&gt;\n            &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n    );\n};\n\nexport default DynamicForm;\n</code></pre> <ol> <li> <p><code>Select</code> Component: Replaces the <code>Radio.Group</code> with a <code>Select</code> component, where each option corresponds to the previous radio button values.</p> </li> <li> <p><code>defaultValue</code>: Sets the default selected value. In this case, it is set to <code>\"1\"</code>, which corresponds to \"Email\".</p> </li> <li> <p><code>handleSelectChange</code>: Function to handle changes in the select value and update the state accordingly.</p> </li> <li> <p><code>onFinishAddCompany</code>: Updated to handle the <code>valueSelectAddCompany</code> state, which stores the currently selected value.</p> </li> <li> <p><code>Option</code> Component: Represents each item in the select dropdown.</p> </li> </ol> <p>By making these changes, your form will now use a <code>Select</code> component with \"Email\" as the default selected option, providing a cleaner and more flexible approach for selecting among multiple options.</p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/","title":"CSS Scrolling Block Issue","text":"<p>In dashboard of smaller screen not able to yo scroll tender list </p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#solution","title":"Solution","text":"<p>Dasboard Module &gt; Tenders/Projects <code>Tab</code></p> scssjsx _dashboard.scss<pre><code>/* added this line of code */\n\n.flip-card-front .dashboards__todolists {\n    position: relative;\n    overflow: auto;\n    z-index: 999;\n}\n</code></pre> <p><code>src/views/Home/tenders.js</code></p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#source-of-issue","title":"Source Of Issue","text":"<p>Here are the top 5 main issues that can block scrolling on a webpage, along with brief documentation on each:</p> <ol> <li> <p>CSS <code>overflow: hidden</code></p> <p>Description: Sets the <code>overflow</code> property to <code>hidden</code> on an element or <code>body</code>, preventing scrolling.</p> <pre><code>body {\n    overflow: hidden; /* Disables scrolling */\n}\n</code></pre> <p>Documentation: Use <code>overflow: auto</code> or <code>scroll</code> to re-enable scrolling as needed.</p> </li> <li> <p>JavaScript Event Handlers</p> <p>Description: Event listeners that call <code>e.preventDefault()</code> or manipulate scrolling properties programmatically.</p> <pre><code>document.addEventListener('scroll', function(e) {\n    e.preventDefault(); /* Blocks scrolling */\n});\n</code></pre> <p>Documentation: Ensure event handlers do not prevent default behavior unless required for specific functionality.</p> </li> <li> <p>Modal or Overlay Elements</p> <p>Description: Modals or overlays that set <code>overflow: hidden</code> on the <code>body</code> to prevent scrolling of the background content.</p> <pre><code>.modal-open {\n    overflow: hidden; /* Prevents background scrolling */\n}\n</code></pre> <p>Documentation: Restore <code>overflow</code> property when the modal is closed.</p> </li> <li> <p>Fixed or Absolute Positioning</p> <p>Description: Fixed or absolute positioned elements that may cover the viewport, blocking interaction.</p> <pre><code>.fixed-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5); /* Covers viewport */\n}\n</code></pre> <p>Documentation: Ensure these elements are used appropriately to avoid unintentional blocking.</p> </li> <li> <p>Height Restrictions</p> <p>Description: Elements with restricted height and <code>overflow</code> settings that may not accommodate content.</p> <pre><code>.container {\n    height: 100px;\n    overflow: auto; /* Enables scrolling if content overflows */\n}\n</code></pre> <p>Documentation: Adjust height and <code>overflow</code> properties based on content requirements.</p> </li> </ol> <p>Each of these issues can be identified and resolved by checking relevant CSS properties, JavaScript code, and HTML structure.</p>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/","title":"Text Editor in Internal Message","text":"<p>Need Text Editor ( Like bold , highlight, font change , Color Change ) in Email compose and Internal Message Section.</p>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#email","title":"Email","text":"ComposeEmailDrawer.js <pre><code>const [toolBar, setToolBar] = useState(false);\n\n\n&lt;div\n    style={{\n        width: !visibleInternalMessage ? \"30%\" : \"50%\",\n        color: \"black\",\n    }}\n    className=\"hover aa__icon\"\n    onClick={() =&gt; {\n        setToolBar(!toolBar);\n    }}\n&gt;\n    &lt;span&gt;Aa&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div\n    className={`test compose-editor-wrapper ${\n        toolBar &amp;&amp; \"active\"\n        } ${\n            visibleInternalMessage &amp;&amp; \"internalmessage-active\"\n        }`}\n    &gt;\n        &lt;Editor\n            className=\"compose-editor\"\n            // ...\n        /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#internal-message","title":"Internal Message","text":"<p>Toggling the <code>on/off</code> the toolbar of CKEditor in Internal Message</p> ReplyChatBox.jsinternalmessage.scss <pre><code>const [showEditorHeader, setEditorHeader] = useState(false);\n\n\nreturn (\n    &lt;&gt;\n    {/* Line Number: 1102 uncommented this */}\n\n    &lt;div className=\"chat-box-editor-header-btn-wrapper\"&gt;\n        &lt;div\n            class=\"btn__chat-editor-header\"\n            onClick={() =&gt; {\n                setEditorHeader(!showEditorHeader);\n            }}\n            style={{\n                color: showEditorHeader ? \"black\" : \"white\",\n            }}\n        &gt;\n            // &lt;img src={aa} /&gt;\n            &lt;span&gt;Aa&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n\n\n    &lt;div\n        className={`replyChatBox ${replyChatheight ? \"active\" : \"\"} ${showEditorHeader ? \"showHeader\" : \"\"\n        } `}\n        style={{ position: \"relative\", width: \"100%\" }}\n    &gt;\n        &lt;Editor\n            value={editorData}\n            // toolbar_location=\"bottom\"\n            onKeyDown={(e) =&gt; {\n                const { key, altKey } = e;\n                if (altKey &amp;&amp; key === \"Enter\") {\n                setAltEnt(true);\n                }\n            }}\n\n            init={{\n                plugins: \"lists advlist\",\n                browser_spellcheck: true,\n                menubar: \"false\",\n\n                // COMMENTED THIS\n                // toolbar: \"\", //bold  italic underLine  | backcolor forecolor   |  bullist numlist\n\n                content_style: \"p{margin:0px}\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                id: \"internal_replyBox\",\n                },\n\n                // ADDED FROM THIS\n                toolbar:\n                \"fontselect fontsizeselect backcolor forecolor bold | italic | underLine lineheight |  strikethrough alignleft aligncenter alignright |  bullist numlist\",\n\n                content_style: \"p{margin:0px;padding:0px}\",\n                forced_root_block: \"div\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                class: \"editor-block-wrapper\",\n                id: \"editor-blocks\",\n                },\n                font_formats:\n                \"Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde;Arial Narrow=arial narrow,avant garde;Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier;Cambria=cambria;Calibri=calibri;Calibri Body=calibri boby;Georgia=georgia,palatino;Times New Roman=times new roman,times;Helvetica=helvetica;Verdana=verdana,geneva;\",\n                // UPTO HERE\n            }}\n        /&gt;\n\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>/* Line number: 53*/\n\n\n.replyChatBox {\nposition: relative;\n.tox-editor-header {\n    display: none;\n}\n\n&amp;.showHeader {\n    .tox-editor-header {\n    display: block;\n    }\n}\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-redux/","title":"Persist Storage Redux","text":"<pre><code>persistMail\n\n-   action.js\n-   reducer.js\n</code></pre> dispatchaction.jsreducer.js <pre><code>//\n\nif (!changeEmailStatusTypeRespLoading &amp;&amp; !mailBodyGetDetailsLoading) {\n    dispatch(selectedMailTypeAndMail(data));\n    //...\n}\n</code></pre> <pre><code>const tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n</code></pre> <pre><code>import { EMAIL_TYPES } from '../../../types';\nimport { saveMailTypeAndMail, saveActiveEmail } from 'services/common';\n\nexport const selectedMailTypeAndMail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveMailTypeAndMail(EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL, data));\n    };\n};\n\nexport const selectedActiveEmail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveActiveEmail(EMAIL_TYPES.EMAIL_TYPE_ACTIVE, data));\n    };\n};\n</code></pre> <pre><code>// common.js\nexport const saveMailTypeAndMail = (type, payload) =&gt; {\n    return {\n        type: `${type}`,\n        payload,\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { EMAIL_TYPES, AUTH_TYPES } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    selectedMailTypeAndMailData:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.selectedMailTypeAndMailData || {},\n    activeEmail:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.activeEmail || {},\n};\n\nexport default function mailMessagePersistReducer(\n    state = INITIAL_STATE,\n    action\n) {\n    switch (action.type) {\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL:\n            return {\n                ...state,\n                selectedMailTypeAndMailData: action.payload,\n            };\n\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL_UPDATE:\n            let newData =\n                state.selectedMailTypeAndMailData?.selectedMail?.id ===\n                action.query.messageCenterId\n                ? {\n                    ...state.selectedMailTypeAndMailData,\n                    selectedMail: {\n                        ...state.selectedMailTypeAndMailData?.selectedMail,\n                        ...action.emailStatus,\n                    },\n                    }\n                : { ...state.selectedMailTypeAndMailData };\n            return {\n                ...state,\n                selectedMailTypeAndMailData: newData,\n            };\n\n        case EMAIL_TYPES.EMAIL_TYPE_ACTIVE:\n            return {\n                ...state,\n                activeEmail: action.payload,\n            };\n\n        case AUTH_TYPES.USER_LOGOUT_SUCCESS:\n            return {\n                ...state,\n                activeEmail: null,\n                selectedMailTypeAndMailData: null,\n            };\n\n        default:\n            return { ...state };\n    }\n}\n</code></pre> store/index.js<pre><code>const persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\n      \"todos\",\n      \"auth\",\n      \"applicationConfig\",\n      \"mailMessagePeristState\",\n      \"contactSelectedState\",\n      \"selectedFileNameState\",\n      \"profile\",\n    ],\n};\n</code></pre> <pre><code>ComposeEmailDrawer.js\n\n\n  const  {\n    persistTenderMailDataResponse,\n    persistTenderMailDataLoading,\n  } = useSelector((state) =&gt; state.persistTenderMailState)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-tender-content/","title":"Persist Tender Content","text":"ComposeEmailDrawer.js<pre><code>  useEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      // console.log(\"I'm CONTENT Module\", persistTenderMailDataResp?.content?.content)\n\n      form.setFieldsValue({\n        // participantTos: [\"test@gmail.com\", \"newmailsearch@gmail.com\"],\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        participantTos: persistTenderMailDataResp?.tos ?? [],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n\n      setEditorData(persistTenderMailDataResp?.content?.content ?? '')\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n  ])\n</code></pre> Companies.js<pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \",getDetails?.title)\n\n    let data = {\n      tos: referencePartyListingCircularResponse ?? '',\n      refCode: getDetails?.referenceCode ?? '',\n      subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n\n      let id = getDetails?.referenceId;\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n      // persist\n      // await dispatch(actionForGetReferenceTemplateGetDetailsById(id));\n      await dispatch(actionForPersistenTenderContent(id));\n\n      // Wait for 5 seconds\n      // setTimeout(() =&gt; {\n      //   window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n      //   setIsLoadingOpeningMail(false);\n      // }, 5000);\n      await new Promise(resolve =&gt; setTimeout(resolve, 5000)); \n      window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n    } catch (err) {\n      console.log(err);\n      setIsLoadingOpeningMail(false);\n    }\n    finally {\n      setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/resuable-component-tooltip/","title":"Resuable","text":""},{"location":"office/ispl/clickup/2024/september/resuable-component-tooltip/#basic-resuable-component","title":"Basic Resuable Component","text":"ComponentUsageReusable Component <pre><code>import React from 'react';\nimport { Tooltip, Button } from 'antd';\nconst IconButtonWithTooltip = ({ tooltipText, buttonType = 'dashed', shape = 'circle', onClick, children }) =&gt; {\n    return (\n        &lt;Tooltip title={tooltipText}&gt;\n            &lt;Button\n                type={buttonType}\n                shape={shape}\n                onClick={onClick}\n            &gt;\n                {children}\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    );\n};\n\nexport default IconButtonWithTooltip;\n</code></pre> <pre><code>const [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\n&lt;IconButtonWithTooltip\n    tooltipText=\"Add Company Email\"\n    onClick={() =&gt; setIsAddCompanyEmailModalOpen(true)}\n&gt;+&lt;/IconButtonWithTooltip&gt;\n</code></pre> ComponentUsing Component QuickAddCompanyEmailModal.jsx<pre><code>import React from \"react\";\nimport { Modal, Form, Input, Button } from \"antd\";\nimport { useDispatch } from \"react-redux\";\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst QuickAddCompanyEmailModal = ({ visible, onClose, onSubmit, loading }) =&gt; {\n    const [form] = Form.useForm();\n\n    const handleFinish = async (values) =&gt; {\n        await onSubmit(values.newEmail);\n        form.resetFields();\n    };\n\n    return (\n        &lt;Modal\n            title=\"Add Company Email\"\n            visible={visible}\n            footer={null}\n            onCancel={onClose}\n        &gt;\n            &lt;Form form={form} onFinish={handleFinish}&gt;\n                &lt;Form.Item\n                    label=\"Email Address\"\n                    name=\"newEmail\"\n                    rules={[\n                        { required: true, message: \"Please enter the company email!\" },\n                        {\n                            pattern: emailRegex,\n                            message: \"Please enter a valid email address!\",\n                        },\n                    ]}\n                &gt;\n                    &lt;Input placeholder=\"Enter company email\" /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={loading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    );\n};\n\nexport default QuickAddCompanyEmailModal;\n</code></pre> Companies.js<pre><code>const [isModalNewMailOpen, setIsModalNewMailOpen] = useState(false);\nconst [isLoadingNewMail, setIsLoadingNewMail] = useState(false);\n\nconst handleModalNewMailClose = () =&gt; {\n    setIsModalNewMailOpen(false);\n};\n\nconst handleAddEmailSubmit = async (newEmail) =&gt; {\n    setIsLoadingNewMail(true);\n\n    const body = {\n        companyId: selectedCompanyId,\n        email: newEmail,\n    };\n\n    try {\n        if (body.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            handleModalNewMailClose();\n        }\n    } catch (err) {\n        console.log(\"Error: \", err);\n    } finally {\n        setIsLoadingNewMail(false);\n    }\n};\n\n&lt;QuickAddCompanyEmailModal\n    visible={isModalNewMailOpen}\n    onClose={handleModalNewMailClose}\n    onSubmit={handleAddEmailSubmit}\n    loading={isLoadingNewMail}\n/&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/resuable-component-tooltip/#advanced-resuable-component","title":"Advanced Resuable Component","text":"<pre><code>// IconButtonWithTooltip.js\nimport React from \"react\";\nimport { Tooltip, Button, Spin } from \"antd\"; // Import additional components if needed\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nconst IconButtonWithTooltip = ({\n  tooltipText,\n  buttonType = \"dashed\",\n  shape = \"circle\",\n  onClick,\n  isLoading = false,\n  className,\n  icon: Icon,\n  ariaLabel,\n  ...props\n}) =&gt; {\n  const buttonClass = classNames(\"icon-button\", className);\n\n  return (\n    &lt;Tooltip title={tooltipText}&gt;\n      &lt;Button\n        type={buttonType}\n        shape={shape}\n        onClick={onClick}\n        className={buttonClass}\n        aria-label={ariaLabel}\n        {...props}\n      &gt;\n        {isLoading ? &lt;Spin size=\"small\" /&gt; : Icon ? &lt;Icon /&gt; : props.children}\n      &lt;/Button&gt;\n    &lt;/Tooltip&gt;\n  );\n};\n\nIconButtonWithTooltip.propTypes = {\n  tooltipText: PropTypes.string.isRequired,\n  buttonType: PropTypes.oneOf([\"default\", \"primary\", \"dashed\", \"link\", \"text\"]),\n  shape: PropTypes.oneOf([\"circle\", \"round\"]),\n  onClick: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool,\n  className: PropTypes.string,\n  icon: PropTypes.elementType,\n  ariaLabel: PropTypes.string,\n};\n\nexport default IconButtonWithTooltip;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/savebase64-excel-button/","title":"Save base64 response Button","text":"Contact ModuleHR Module <ul> <li><code>Contact/ContactCompanyPerson/index.js</code></li> </ul> <p>Commented the Tab because the Export button is moved to Hr Module</p> <pre><code>&lt;Tabs\n    className=\"custom-tab-model\"\n    defaultActiveKey=\"1\"\n    onChange={key =&gt; console.log(key)}\n&gt;\n    &lt;TabPane tab=\"Search\" key=\"1\"&gt;\n    &lt;/TabPane&gt;\n    &lt;TabPane tab=\"Export\" key=\"2\"&gt;\n        &lt;div className=\"global-form-group calc\" style={{ marginTop: \".8em\" }}&gt;\n            &lt;div className=\"global-form-label\"&gt;\n                &lt;Button\n                    type=\"dashed\"\n                    onClick={handleExport}\n                &gt;\n                    Export Template\n                &lt;/Button&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n                &lt;Select\n                    autoComplete=\"off\"\n                    placeholder=\"Scopes of Work\"\n                    size=\"default\"\n                    value={selectedExportValue}\n                    onChange={(value) =&gt; setSelectedExportValue(value)}\n                    options={[\n                        {\n                            value: 'company',\n                            label: 'Company',\n                        },\n                        {\n                            value: 'person',\n                            label: 'Person',\n                        }\n                    ]}\n                &gt;&lt;/Select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;UniversalFileUpload\n            name='File'\n            form={fileForm}\n            isMultipleFileAllowed={false}\n            id='1'\n            callback={(e) =&gt; {\n                let olduploadedFileDtos = fileForm.getFieldValue()[\n                    \"attendanceDtos\"\n                ]\n                    ? [...fileForm.getFieldValue()[\"attendanceDtos\"]]\n                    : [];\n                let uploadedFileDtos = [...olduploadedFileDtos];\n                uploadedFileDtos.push(e);\n\n                form.setFieldsValue({\n                    attendanceDtos: uploadedFileDtos,\n                });\n            }}\n        /&gt;\n    &lt;/TabPane&gt;\n&lt;/Tabs&gt;\n</code></pre> <ul> <li><code>Admin/index.js</code></li> </ul> <pre><code>import {\n    Skeleton,\n    Button,\n    Input,\n    Dropdown,\n    Form,\n    Checkbox,\n    Modal,\n    Collapse,\n    Row,\n    Col,\n} from \"antd\";\n\nimport { actionForExportSiscoUserListToExcel, actionForExportCompanyUserListToExcel } from \"services/redux/holiday/action\";\nimport { saveBase64 } from \"utils/saveBase64\";\n\n\nfunction Admin() {\n\n    const {\n        holidaySampleResponse,\n        holidaySampleLoading,\n        userSiscolListResponse,\n        userSiscoListLoading\n    } = useSelector((state) =&gt; state.holiday);\n\n    // export button\n    const [isDownloadStatus, setIsDownloadStatus] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingType, setLoadingType] = useState(null);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(userSiscolListResponse) || !userSiscoListLoading) {\n            try {\n                if (isDownloadStatus) {\n                    let props = {\n                        base64Data: userSiscolListResponse?.data,\n                        fileName: userSiscolListResponse?.fileName,\n                        fileType: userSiscolListResponse?.fileExtension\n                    }\n                    saveBase64(props);\n                }\n            } catch (err) {\n                console.log(\"error: \", err);\n            } finally {\n                setIsDownloadStatus(false);\n            }\n        }\n    }, [userSiscolListResponse])\n\n    const handleExport = async (type) =&gt; {\n        setLoading(true);\n        setLoadingType(type);\n        setIsDownloadStatus(true);\n\n        try {\n            if(type == 'company') {\n                await dispatch(actionForExportCompanyUserListToExcel());\n            } else {\n                await dispatch(actionForExportSiscoUserListToExcel());\n            }\n        } catch(err) {\n            console.log(\"Error: \", err);\n        } finally {\n            setLoading(false);\n            setLoadingType(null);\n        }\n    }\n\n\n    return(\n        &lt;&gt;\n            &lt;Form\n                onFinish={handleFormSubmit}\n            &gt;\n                &lt;Row\n                    gutter={[0, 12]}\n                &gt;\n                    &lt;Col span=\"8\"&gt;Export Company&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('company')}\n                        loading={loading &amp;&amp; loadingType === 'company'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;Export Person&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('person')}\n                        loading={loading &amp;&amp; loadingType === 'person'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;show InActive Users&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Checkbox\n                        checked={isEmployeeStatusChecked}\n                        onChange={(e) =&gt; handleEmployeeStatusChange(e.target.checked)}\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            marginRight: \"6px\",\n                        }}\n                    /&gt;\n                    &lt;/Col&gt;\n                &lt;/Row&gt;\n\n                &lt;Button\n                    type=\"ghost\"\n                    shape=\"round\"\n                    htmlType=\"submit\"\n                    autoComplete=\"off\"\n                &gt;\n                    Search\n            &lt;/Button&gt;\n            &lt;/Form&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/tab-circular-planing/","title":"Circular Planning Tab Added","text":"<p>fsadfsadf</p> OldUpdated <pre><code>{/* Tender Checklist */}\n\n{contactDetails()}\n&lt;div className=\"person_info tender-checklist\"&gt;\n    &lt;div&gt;\n        &lt;div className=\"company_header\"&gt;\n        &lt;div\n            className=\"referenceDetails__label\"\n            style={{\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            }}\n        &gt;\n            &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n            Tender Checklist\n            &lt;/button&gt;\n            &lt;Button\n            style={{ height: \"28px\", lineHeight: \"21px\" }}\n            type=\"primary\"\n            onClick={() =&gt; setModalVisible(true)}\n            &gt;\n            Circular Content\n            &lt;/Button&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n    &lt;/div&gt;\n&lt;/div&gt; \n</code></pre> Companies.js<pre><code>import {\n    Tabs,\n} from \"antd\";\n\nconst Companies = ({\n    //...\n}) =&gt; {\n    const { TabPane } = Tabs;\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"company_person\"&gt;\n                {!isCircular ? (\n                    contactDetails()\n                ) : (\n                &lt;&gt;\n                    &lt;Tabs\n                        defaultActiveKey=\"1\"\n                        type=\"line\"\n                    &gt;\n                        &lt;TabPane tab=\"Contact Details\" key=\"1\"&gt;\n                            {contactDetails()}\n                        &lt;/TabPane&gt;\n                        &lt;TabPane tab=\"Tender Checklist\" key=\"2\"&gt;\n                            &lt;div className=\"person_info tender-checklist\"&gt;\n                                &lt;div className=\"company_header\"&gt;\n                                    &lt;div\n                                        className=\"referenceDetails__label\"\n                                        style={{\n                                            display: \"flex\",\n                                            width: \"100%\",\n                                            justifyContent: \"space-between\",\n                                        }}\n                                    &gt;\n                                        &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n                                            Tender Checklist\n                                        &lt;/button&gt;\n                                        &lt;Button\n                                            style={{ height: \"28px\", lineHeight: \"21px\" }}\n                                            type=\"primary\"\n                                            onClick={() =&gt; setModalVisible(true)}\n                                        &gt;\n                                            Circular Content\n                                        &lt;/Button&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n                            &lt;/div&gt;\n                        &lt;/TabPane&gt;\n                    &lt;/Tabs&gt;\n                &lt;/&gt;\n                )}\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/components/HTMLRenderer/","title":"HTMLRenderer","text":"<p>Example</p>"},{"location":"office/ispl/components/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> IndexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/ispl/components/JSON-stringify/","title":"Using JSON.stringify","text":"<p>Example</p> <p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n...\nattentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/ispl/components/old/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/components/old/useReducer/","title":"useReducer","text":"<p>explain to 5 years old. what is <code>useReducer</code> in react. when to use it. when to use <code>useState</code>.</p>"},{"location":"office/ispl/components/old/useReducer/#overview","title":"Overview","text":"<p>Sure! Let\u2019s imagine you have a big box of toy blocks and you want to build different things with them.</p>"},{"location":"office/ispl/components/old/useReducer/#usestate","title":"<code>useState</code>:","text":"<p>Think of <code>useState</code> like having a single toy box where you can keep and change one type of toy, like LEGO blocks. If you want to change what\u2019s inside the box, you can just put in new LEGO blocks or take some out. It's simple and great when you just need to manage one type of toy or one small part of your building project.</p>"},{"location":"office/ispl/components/old/useReducer/#usereducer","title":"<code>useReducer</code>:","text":"<p>Now, imagine you have a big toy set with lots of different blocks and parts. You might need a special system to keep track of all the different pieces and how they should fit together. <code>useReducer</code> is like having a smart helper who knows how to handle all these different parts. This helper listens to what you want to do (like adding a new block or moving a piece) and then figures out the best way to update your toy set based on those instructions.</p>"},{"location":"office/ispl/components/old/useReducer/#when-to-use-each","title":"When to use each:","text":"<ul> <li> <p>Use <code>useState</code> when you have just one simple thing to keep track of or change, like how many apples you have or if you want the toy car to be red or blue.</p> </li> <li> <p>Use <code>useReducer</code> when you have a more complex toy set with lots of different pieces or actions, like if you\u2019re building a big castle with many rooms and towers, and you need a clear way to manage all the different changes.</p> </li> </ul> <p>So, <code>useState</code> is for simpler situations, and <code>useReducer</code> helps when things get more complicated!</p> <p>Absolutely! Here\u2019s another real-time example where useReducer shines: managing the state of a form with multiple fields and actions.</p>"},{"location":"office/ispl/components/old/useReducer/#example-form-with-multiple-fields","title":"Example: Form with Multiple Fields","text":"<p>Imagine you\u2019re building a form where users can enter their name, email, and password. You want to handle form submission, input changes, and possibly form validation in a way that's organized and maintainable.</p> <p>Here\u2019s how you can use <code>useReducer</code> for this:</p> <pre><code>import React, { useReducer } from 'react';\n\n// Define action types\nconst UPDATE_FIELD = 'UPDATE_FIELD';\nconst RESET_FORM = 'RESET_FORM';\n\n// Define the initial state of the form\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\n// Define the reducer function\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case UPDATE_FIELD:\n      return { ...state, [action.field]: action.value };\n    case RESET_FORM:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nfunction MyForm() {\n  // Use useReducer to manage form state\n  const [state, dispatch] = useReducer(formReducer, initialState);\n\n  // Handle input changes\n  const handleChange = (event) =&gt; {\n    const { name, value } = event.target;\n    dispatch({ type: UPDATE_FIELD, field: name, value });\n  };\n\n  // Handle form submission\n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    // Perform form submission logic here\n    console.log('Form submitted:', state);\n    // Optionally reset the form\n    dispatch({ type: RESET_FORM });\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;div&gt;\n        &lt;label&gt;Name:&lt;/label&gt;\n        &lt;input\n          type=\"text\"\n          name=\"name\"\n          value={state.name}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Email:&lt;/label&gt;\n        &lt;input\n          type=\"email\"\n          name=\"email\"\n          value={state.email}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Password:&lt;/label&gt;\n        &lt;input\n          type=\"password\"\n          name=\"password\"\n          value={state.password}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default MyForm;\n</code></pre>"},{"location":"office/ispl/documentation/appuserid/","title":"AppUserId","text":"<pre><code>import storage from \"/utils/storage\";\nlet currentUserId = storage.getItem(\"userId\");\n</code></pre> <pre><code>const appUserIdUC = sessionStorage?.userId.toUpperCase();\n</code></pre>"},{"location":"office/ispl/documentation/architecture/","title":"Architecture","text":""},{"location":"office/ispl/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/ispl/documentation/blog/","title":"Blog Module","text":"<p>Success</p> StagesView.js<pre><code>...\nimport Blog from \"components/Blog\";\n...\n\n{/* Blog */}\n&lt;div className=\"business-header\"&gt;\n    &lt;div className=\"business-header-title\" style={{ fontSize: \"1.1em\" }}&gt;\n        Blog\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;Blog tenderId={tenderId} /&gt;\n</code></pre> <pre><code>src\n- components\n---- Blog\n-------BlogForm.js\n-------BlogItem.js\n-------index.js\n</code></pre> <p>Tips</p> BlogBlogItemBlogFormInfinite Scroll index.js<pre><code>import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Skeleton, Row, Col, Affix, Dropdown } from \"antd\";\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    blogAdd,\n    updateBlogMessage,\n    getBlogPagination,\n} from \"services/redux/officeresource/blog/action\";\nimport {\n    employeeProfileDetail,\n    actionForGetAllUsersPP,\n} from \"services/redux/profile/profile.action\";\nimport BlogItem from \"./BlogItem\";\nimport BlogForm from \"./BlogForm\";\n\nconst Blog = ({ tenderId }) =&gt; {\nconst dispatch = useDispatch();\nconst [form] = Form.useForm();\nconst pageSize = 40;\n\nconst scrollableRef = useRef();\n\nconst {\n    addBlogMessageLoading,\n    addBlogMessageResp,\n    getBlogMsgPaginationResp,\n    getBlogMsgPaginationLoading,\n} = useSelector((state) =&gt; state.blogReducer);\n\nconst { profileInfo } = useSelector((state) =&gt; state.profile);\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst [editMode, setEditMode] = useState(false);\nconst [editedBlog, setEditedBlog] = useState({});\n\nconst appUserIdUC = sessionStorage?.userId.toUpperCase();\n\n// SUPERAPI **************************************************************\nconst { listingAllUsersProfileResp, listingAllUsersProfileLoading } =\n    useSelector((state) =&gt; state.profile);\n\nconst [listingAllProfile, setListingAllProfile] = useState([]);\n\nuseEffect(() =&gt; {\n    dispatch(actionForGetAllUsersPP());\n}, []);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(listingAllUsersProfileResp)) {\n        setListingAllProfile(listingAllUsersProfileResp);\n    }\n}, [listingAllUsersProfileResp]);\n// end SUPERAPI **************************************************************\n\nuseEffect(() =&gt; {\n    dispatch(\n        employeeProfileDetail({\n            AppUserId: sessionStorage?.userId.replaceAll('\"', \"\"),\n        })\n    );\n}, []);\n\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nconst handleEditClick = (item) =&gt; {\n    setEditMode(true);\n    setEditedBlog({\n        id: item.id,\n        name: item.name,\n        body: item.body,\n    });\n};\n\nconst handleEditSubmit = (values) =&gt; {\n    const updatedBlog = {\n        id: editedBlog.id,\n        userId: sessionStorage?.userId,\n        subject: \"string\",\n        name: editedBlog.name,\n        body: values.editedMessage,\n        isActive: true,\n        referenceCode: tenderId,\n        lastmodified: moment().format(),\n    };\n\n    dispatch(updateBlogMessage(editedBlog.id, updatedBlog));\n\n    setEditMode(false);\n    setEditedBlog({});\n};\n\nconst onFinish = (values) =&gt; {\n    let data = {};\n    if (values) {\n    data = {\n        userId: sessionStorage?.userId,\n        referenceCode: tenderId,\n        body: values.message,\n        creationTime: moment().format(),\n        subject: \"string\",\n        isActive: true,\n    };\n    // dispatch(blogAdd(data));\n    try {\n        dispatch(blogAdd(data));\n    } catch (err) {\n        console.log(\"error: \", err);\n    } finally {\n        form.resetFields();\n    }\n    }\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n        &lt;BlogForm\n            form={form}\n            onFinish={onFinish}\n            loading={addBlogMessageLoading}\n        /&gt;\n    &lt;/div&gt;\n    );\n};\n\nexport default Blog;\n</code></pre> BlogItem.js<pre><code>import moment from \"moment\";\nimport { Form, Button, Input } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n// import BlogForm from \"./BlogForm\";\nimport MatchingImageDisplay from \"components/shared/MatchingImageDisplay\";\nconst { TextArea } = Input;\n\nconst BlogItem = ({\n    blogMsg,\n    appUserIdUC,\n    editMode,\n    setEditMode,\n    editedBlog,\n    handleEditClick,\n    handleEditSubmit,\n    listingAllProfile,\n}) =&gt; {\n\nconst [form] = Form.useForm();\n\nreturn (\n    &lt;&gt;\n    {blogMsg.map((item, index) =&gt; (\n        &lt;div\n            className=\"blogWrapper\"\n            key={index}\n            style={{\n                display: \"flex\",\n                justifyContent:\n                JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"flex-end\"\n                    : \"flex-start\",\n            }}\n        &gt;\n        {JSON.stringify(item?.userId)?.toUpperCase() !== appUserIdUC ? (\n            &lt;span\n                style={{\n                    height: \"40px\",\n                    width: \"40px\",\n                    background: \"#67a1e4\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"50%\",\n                    color: \"#FFF\",\n                    marginRight: \"12px\",\n                }}\n            &gt;\n            &lt;MatchingImageDisplay\n                listingAllProfile={listingAllProfile}\n                item={item}\n            /&gt;\n            &lt;/span&gt;\n        ) : null}\n\n        &lt;div\n            style={{\n                display: \"inline-block\",\n                maxWidth: \"80%\",\n                background:\n                    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"#E8EBFA\"\n                    : \"#FFFFFF\",\n                marginBottom: \"1em\",\n                padding: \"0.4em 1em\",\n            }}\n        &gt;\n            &lt;div&gt;\n            {editMode &amp;&amp; editedBlog.id === item.id ? (\n                // &lt;BlogForm\n                //   initialValue={item.body}\n                //   onFinish={(values) =&gt; {\n                //     handleEditSubmit(item.id, values.editedMessage);\n                //     // toggleEditMode();\n                //   }}\n                // /&gt;\n                &lt;Form\n                    onFinish={handleEditSubmit}\n                    initialValues={{ editedMessage: editedBlog.body }}\n                &gt;\n                &lt;Form.Item\n                    name=\"editedMessage\"\n                    rules={[\n                    {\n                        required: true,\n                    },\n                    ]}\n                &gt;\n                    {/* &lt;Input */}\n                    &lt;TextArea\n                        style={{\n                            // height: \"42px\",\n                            borderBottom: \"4px solid #8e92d1\",\n                            resize: \"none\",\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                    Save\n                &lt;/Button&gt;\n                &lt;Button onClick={() =&gt; setEditMode(false)}&gt;Cancel&lt;/Button&gt;\n                &lt;/Form&gt;\n            ) : (\n                &lt;&gt;\n                &lt;div\n                    style={{\n                        display: \"flex\",\n                    }}\n                &gt;\n                    &lt;span className=\"blog-username\"&gt;\n                    {item?.name?.toUpperCase()}\n                    &lt;/span&gt;\n                    &lt;span style={{ color: \"#807e7e\" }}&gt;\n                    {item?.lastmodified\n                        ? \"Modified \" + moment(item?.lastmodified).calendar()\n                        : moment(item?.creationTime).startOf(\"min\").fromNow()}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div\n                    className=\"blogBody\"\n                        style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                &gt;\n                    &lt;p&gt;{item?.body}&lt;/p&gt;\n                    &lt;span\n                    className={\n                        JSON.stringify(item?.userId) ===\n                        sessionStorage?.userId.toUpperCase()\n                        ? \"blog__content\"\n                        : \"\"\n                    }\n                    &gt;\n                    {JSON.stringify(item?.userId)?.toUpperCase() ===\n                    appUserIdUC ? (\n                        &lt;EditOutlined onClick={() =&gt; handleEditClick(item)} /&gt;\n                    ) : null}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;/&gt;\n            )}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    ))}\n    &lt;/&gt;\n);\n};\n\nexport default BlogItem;\n</code></pre> BlogForm.js<pre><code>import { Form, Input, Button, Row, Col } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nconst { TextArea } = Input;\n\nconst BlogForm = ({ form, onFinish, loading }) =&gt; {\nreturn (\n    &lt;Form\n    name=\"blog\"\n    form={form}\n    onFinish={onFinish}\n    wrapperCol={{ span: 24 }}\n    style={{ background: \"#f9f9f9\", padding: \"2em 4em\" }}\n    &gt;\n    &lt;Row gutter={8}&gt;\n        &lt;Col span={22}&gt;\n        &lt;Form.Item\n            name=\"message\"\n            rules={[\n            {\n                required: true,\n            },\n            ]}\n        &gt;\n            &lt;TextArea\n            rows={2}\n            style={{\n                // height: \"42px\",\n                borderBottom: \"4px solid #8e92d1\",\n                resize: \"none\",\n                fontSize: \"1.1em\",\n            }}\n            /&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n        &lt;Col span={2}&gt;\n        &lt;Form.Item wrapperCol={{ span: 24 }}&gt;\n            &lt;Button\n            // type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                // added\n                background: \"none\",\n                border: \"none\",\n                color: \"#67a1e4\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            loading={loading}\n            &gt;\n            {/* Submit */}\n            &lt;SendOutlined style={{ fontSize: \"28px\" }} /&gt;\n            &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;/Form&gt;\n);\n};\n\nexport default BlogForm;\n</code></pre> <pre><code>const pageSize = 40;\nconst scrollableRef = useRef();\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\n{/* USEFFECT */}\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"office/ispl/documentation/daily-dairy/","title":"Daily Dairy","text":""},{"location":"office/ispl/documentation/daily-dairy/#daily-dairy","title":"daily Dairy","text":"todolist.js <pre><code>// added\n\n\n&lt;div className=\"flip-card-back\"&gt;\n      &lt;div\n        style={{\n          backfaceVisibility: \"hidden\",\n        }}\n      &gt;\n        &lt;div\n          className={\n            \"dashboards__tenderlist dashboards__body\"\n          }\n        &gt;\n          &lt;div className=\"dashboards__bodyWrap\"&gt;\n            &lt;h4 className=\"dashboards__body--title\"&gt;\n              Daily Dairy\n              {/* ADDED */}\n              &lt;span\n                onClick={() =&gt; {\n                  setRotate(rotate + 1);\n                }}\n                style={{\n                  marginLeft: \"10px\",\n                  height: \"30px\",\n                  marginBottom: \"10px\",\n                }}\n              &gt;\n                &lt;img\n                  src=\"./assets/svg/toggle-arrow.svg\"\n                  height={15}\n                  alt=\"complete\"\n                /&gt;\n              &lt;/span&gt;\n            &lt;/h4&gt;\n\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"dashboards__body--main todolist-wrapper\"&gt;\n          &lt;ul\n            className=\"dashboards__todolists\"\n            style={{ height: heightt[1] }}\n          &gt;\n            {/* DATA */}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/documentation/excel-api-data/","title":"Excel API Data","text":""},{"location":"office/ispl/documentation/excel-api-data/#admin-module","title":"Admin Module","text":"Holiday Event<pre><code>// HolidayWithSampleButton.js\n</code></pre> <p>Example Usage</p> Generic BinaryExcel FilePracticalReact Package for ExcelTheory <p>Using <code>application/octet-stream</code> for a Generic Binary Download:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"file.bin\"\n\n(binary data)\n</code></pre> application/octet-stream<pre><code>const downloadFile = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'file.bin';\n    saveAs(blob, fileName);\n};\n</code></pre> <p>Using <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> for an Excel File:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nContent-Disposition: attachment; filename=\"spreadsheet.xlsx\"\n\n(binary data of the Excel file)\n</code></pre> application/**<pre><code>const downloadExcel = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'spreadsheet.xlsx';\n    saveAs(blob, fileName);\n};\n</code></pre> <pre><code>import { saveAs } from 'file-saver';\nimport xlsx from 'xlsx';\n\n\n// Parse the binary data\nconst workbook = XLSX.read(holidaySampleResponse, { type: 'array' });\n\n// Convert the workbook to a Blob object\nconst excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n\nconst blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n// Save the Blob as a file\nsaveAs(blob, 'holiday_sample.xlsx');\n\n\n// or\n\nconst fileName = 'holiday_sample.xlsx';\n\nconst rawblob = new File([holidaySampleResponse], {\n    // type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    type: 'application/octet-stream'\n});\nsaveAs(blob, fileName);\n</code></pre> Installation<pre><code>npm i xlsx\n</code></pre> Example<pre><code>import * as XLSX from 'xlsx/xlsx.mjs';\n\n/* load 'fs' for readFile and writeFile support */\nimport * as fs from 'fs';\nXLSX.set_fs(fs);\n\n/* load 'stream' for stream support */\nimport { Readable } from 'stream';\nXLSX.stream.set_readable(Readable);\n\n/* load the codepage support library for extended support with older formats  */\nimport * as cpexcel from 'xlsx/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cpexcel);\n</code></pre> <pre><code>const bytesData = this.props.bytesData; // Assuming you have your bytes data\nconst workbook = XLSX.read(bytesData, { type: 'array' });\n\n// Write the workbook object to an Excel file\nXLSX.writeFile(workbook, 'example.xlsx');\n</code></pre> <p>The type parameter in <code>XLSX.read</code> specifies the type of input data being provided. Here are the available types:</p> <ul> <li>array: This is used when your data is in the form of an array of bytes.</li> <li>binary: This is used when your data is in binary format.</li> <li>buffer: This is used when your data is in the form of a <code>Node.js</code> buffer.</li> <li>file: This is used when your data is in the form of a file (e.g., when using a file input).</li> <li>base64: This is used when your data is encoded in base64 format.</li> <li>string: This is used when your data is in the form of a string.</li> </ul> <p>Choose the appropriate type based on how your data is represented. In your case, if you have the bytes data as an array, you would use 'array'.</p> <p>In summary, use <code>application/octet-stream</code> for generic binary data or when you want to force a download without specifying the file type. Use <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> when you are specifically serving Excel files to ensure proper handling and identification by the client.</p> what is application/octet-stream type <p>application/octet-stream is a generic binary file type. It's used when the specific type of file being transferred is either unknown or does not fit into any of the more specific categories available. Here are some key points about application/octet-stream:</p> <p>Example</p> HolidayWithSampleButton.js<pre><code>useEffect(() =&gt; {\n    if (holidaySampleResponse || !holidaySampleLoading) {\n        try {\n            if (isDownloadStatus) {\n                const blob = new Blob([holidaySampleResponse], { type: 'application/octet-stream' });\n\n                // Create a URL for the Blob\n                const url = window.URL.createObjectURL(blob);\n\n                // Create a link element and click on it to trigger the download\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'HolidaySample.xlsx'); // Specify the file name here\n                document.body.appendChild(link);\n                link.click();\n            }\n        } catch (err) {\n            console.log(\"error: \", err)\n        } finally {\n            setIsDownloadStatus(false);\n        }\n    }\n}, [holidaySampleResponse])\n</code></pre>"},{"location":"office/ispl/documentation/excel-api-data/#reference","title":"Reference","text":"<ul> <li>xlsx</li> <li>how to download excel in response from api react js</li> <li>How to Import Export Excel &amp; CSV In React 2022</li> <li>How to Excel Export in React JS</li> <li>online excel file viewer</li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#characteristics","title":"Characteristics:","text":"<ul> <li> <p>Binary Data: It indicates that the data being transferred is binary, meaning it's not in a human-readable format like text.</p> </li> <li> <p>No Specific Format: Unlike specific MIME types such as <code>application/json</code>, <code>text/html</code>, or <code>image/jpeg</code>, <code>application/octet-stream</code> does not specify any particular structure or format for the data. It's up to the consuming application to interpret the data correctly.</p> </li> <li> <p>Download Behavior: Browsers typically initiate a download for files with this MIME type rather than trying to display the contents directly in the browser window. This behavior makes it suitable for files like executables, images, videos, or any non-text data.</p> </li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>File Downloads: Commonly used to force a file download from a web server. For example, when you click on a download link for a software installer (*.exe), the server might respond with Content-Type: application/octet-stream to ensure the file is downloaded rather than displayed in the browser.</p> </li> <li> <p>Unknown or Generic Data: It's used when the server cannot determine the specific type of data being sent, or when the data is a raw binary file without a specific MIME type.</p> </li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#example-scenarios","title":"Example Scenarios:","text":"<ul> <li> <p>File Uploads: When uploading a file to a server, if the server does not know the exact MIME type of the file (due to limitations or other reasons), it might use application/octet-stream as a fallback.</p> </li> <li> <p>Custom Applications: Some custom applications may use this MIME type to handle proprietary binary data formats that are not standardized or recognized by common MIME types.</p> </li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#handling-applicationoctet-stream-in-web-development","title":"Handling application/octet-stream in Web Development:","text":"<ul> <li> <p>Client-side Handling: When handling files with this MIME type in a web application, ensure proper handling of binary data. Use techniques such as Blob, FileReader, or libraries like FileSaver.js to manage and save the file on the client side.</p> </li> <li> <p>Server-side Considerations: Servers may need to set appropriate headers (Content-Type, Content-Disposition) to ensure correct behavior when serving binary files to clients.</p> </li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#example-usage","title":"Example Usage:","text":"<p>Here's an example of how a server might respond with <code>application/octet-stream</code> for a file download:</p> <p>In this response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"example.zip\"\nContent-Length: 12345\n\n... (binary data follows)\n</code></pre> <p>In this response:</p> <ul> <li>Content-Type: <code>application/octet-stream</code> indicates that the data being sent is binary.</li> <li>Content-Disposition: <code>attachment; filename=\"example.zip\"</code> suggests that the browser should prompt the user to download the file with the name example.zip.</li> </ul>"},{"location":"office/ispl/documentation/excel-api-data/#conclusion","title":"Conclusion:","text":"<p><code>application/octet-stream</code> is a versatile MIME type used for transmitting arbitrary binary data. It's particularly useful for ensuring files are downloaded rather than displayed in the browser, and for scenarios where the specific type of data is not well-defined or known in advance.</p>"},{"location":"office/ispl/documentation/fingerprint/","title":"Fingerprint","text":"<p>TabOne.js</p> <pre><code>const TabOne = ({\n    onFinish1,\n    startDate,\n    defaultDate,\n    setStartDate,\n    loader,\n    setLoader,\n    attendancePaginationResponse,\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    // added\n    const disabledDate = (current) =&gt; {\n        return current &amp;&amp; current &gt;= moment().startOf('day');\n    };\n\n\n    return (\n        &lt;&gt;\n            {isRoleHr ? (\n                &lt;Form form={formTest} onFinish={handleFinish} style={{ padding: \"10px 17px\"}}&gt;\n                    &lt;div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}&gt;\n                        &lt;div&gt;&lt;/div&gt;\n                        &lt;div\n                            className=\"\"\n                            style={{\n                            display: \"flex\",\n                            }}\n                        &gt;\n                            &lt;Form.Item name=\"date\"&gt;\n                                {/* added disabledDate */}\n                                &lt;RangePicker disabledDate={disabledDate} /&gt;\n                            &lt;/Form.Item&gt;\n                            &lt;Button\n                                type=\"primary\"\n                                style={{\n                                    height: \"100%\",\n                                    marginLeft: \"10px\",\n                                }}\n                                htmlType=\"submit\"\n                                loading={loadingApi}\n                            &gt;\n                                Fetch Data\n                            &lt;/Button&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/Form&gt;\n            ) : null}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/","title":"GroupChat InternalMessage","text":""},{"location":"office/ispl/documentation/groupchat-internal-message/#groupchat","title":"groupchat","text":""},{"location":"office/ispl/documentation/groupchat-internal-message/#groupchat-checkbox-in-dashboard","title":"Groupchat checkbox in dashboard","text":"index.js src/components/internalMNew/index.js<pre><code>export default function InternalM(props) {\n    ...\n    const [isGroupChat, setIsGroupChat] = useState(false);\n    ...\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n            isGroupChat: isGroupChat,\n        }\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                className=\"drawer-form-wrapper internal_message_section_email_section\"\n            &gt;\n            &lt;div className=\"internal_message_popup_email_section\"&gt;\n                &lt;div className=\"left-chat-action-btn\" style={{ marginLeft: \"14px\" }}&gt;\n                    &lt;div className=\"chat-box-send-wrapper\"&gt;\n                    {quickEmailAddresponseLoading ? (\n                        antIcon\n                    ) : (\n                        &lt;Space\n                        // &lt;Dropdown.Button\n                        // overlay={centerTypeMenu}\n                        onClick={() =&gt; {\n                            handleSaveContinue();\n                        }}\n                        &gt;\n                        &lt;img src={sendIntM} alt=\"\" /&gt;\n\n                        {/* &lt;/Dropdown.Button&gt; */}\n                        &lt;/Space&gt;\n                    )}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n\n                &lt;div className=\"chat-action-btn\" style={{ display: \"flex\" }}&gt;\n\n                    {/* ADDED */}\n                    &lt;div&gt;\n                        &lt;Checkbox\n                            onChange={(e) =&gt; {\n                            setIsGroupChat(!isGroupChat);\n                            }}\n                        &gt;\n                            GroupChat\n                        &lt;/Checkbox&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#groupchat-menu-added-in-the-mail","title":"GroupChat Menu added in the Mail","text":"Danger <pre><code>src/components/email/emailList.js\n</code></pre> <p>This file is not used, so don't change here.</p> Changes <pre><code>src/components/constants/index.js\nsrc/views/Email/EmailList.js\n</code></pre> constants/index.jsEmail/EmailList.js <pre><code>...\nexport const GROUP_CHAT = \"GroupChat\";\nexport const GROUP_CHAT_ARCHIEVE = \"GroupChatArchieve\";\n</code></pre> <pre><code>...\nconst handleEmailSharedDetails = (\n    accountHolderAppUserId,\n    msgCenterTypeName,\n    emailType\n) =&gt; {\n    setSelectedEmailType({\n        typeDisplayName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.SHAREDMAIL_INBOX\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n\n        typeSystemName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.ALL\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n    })\n}\n\n\n\n....\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === \"GroupChat\"\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;GroupChat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n        {mailPaginationCount?.archievedCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.archievedCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n\n&lt;Menu.Divider style={{ marginTop: 15 }} /&gt;\n</code></pre> Tip <pre><code>GroupChat.jsx\ngroupChatModal.jsx\ngroupChatPresentation.jsx\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#counter","title":"Counter","text":""},{"location":"office/ispl/documentation/groupchat-internal-message/#display-the-counter-on-the-groupchat-title-side","title":"Display the Counter on the Groupchat Title side","text":"EmailList.js<pre><code>// page-number: 3678\n? Number(\n    nullChecker(\n    mailPaginationCount?.circularInboxCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n    mailPaginationCount?.groupChatCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n</code></pre> Updated<pre><code>: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupChatCount?.all,\n        \"all\"\n    )\n).toLocaleString() || 0\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#counter-on-all-internal-tabpane","title":"Counter on <code>All</code> &amp; <code>Internal</code> Tabpane","text":"EmailList.js<pre><code>// All &amp; Internal Tab pane Counter:\n// pg: 4140: \n\n? Number(\n    nullChecker(\n        mailPaginationCount?.tenderBusinessCount\n        ?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName ===\n    \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupchat?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n: \"\"\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#email-messagecentertype-api","title":"Email messagecenterType API","text":"<pre><code>import { emailPaginationCount } from \"services/redux/email/mailMessageCenter/action\";\n\nconst { mailPaginationCount } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\n\n\nuseEffect(() =&gt; {\n    dispatch(emailPaginationCount({ messagecenterType: \"All\" }));\n  }, []);\n\n\n// https://cqnoval.info.com.np/api/app/mailMessageCenter/MailMessageCenterPaginationCountersByType?messagecenterType=All\n</code></pre> GroupChat.jsx<pre><code>import { getMailMessageCenterPagination } from \"services/redux/email/mailMessageCenter/action\";\n\nconst getGroupChat = (\n    MaxResultCount = 5,\n    SkipCount = 0,\n    loadMore = false,\n    MessageCenterTypeName = \"groupchat\",\n) =&gt; {\n    let appendUrl = `skipCount=${SkipCount}&amp;maxResultCount=${MaxResultCount}`;\n    if (MessageCenterTypeName) {\n        appendUrl += `&amp;messageCenterTypeName=${MessageCenterTypeName}`;\n        }\n    dispatch(getMailMessageCenterPagination(appendUrl, loadMore));\n}\n\n\nuseEffect(() =&gt; {\n    getGroupChat();\n}, [])\n\n\n// API\nexport class MailMessageCenterService {\n  async getMailMessageCenterPagination(query, source) {\n    let url = `${appBaseUrl}/mailMessageCenter/mailMessageCenterPagination?${query}`;\n    let data = await getServiceMail(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#redux-add-counter-all-in-reducer","title":"REDUX ADD Counter all in REDUCER","text":"reducer.js <p>services/redux/email/mailMessageCenter/reducer.js</p> <pre><code>const INITIAL_STATE = {\n    ...\n    allCount: null,\n    toCount: null,\n    fromCount: null,\n    ccCount: null,\n    bccCount: null,\n    pendingCount: null,\n    archievedCount: null,\n    trashCount: null,\n    junkCount: null,\n    flagCount: null,\n    drafCount: null,\n    outBoxCount: null,\n    approvalCount: null,\n    loanCount: null,\n    leaveCount: null,\n    procurementCount: null,\n    tenderBusinessCount: null,\n    circularInboxCount: null,\n    circularSentCount: null,\n    // added\n    groupChatCount: null,\n}\n\n\nlet approvalCount = \"\";\nlet allCount = \"\";\nlet toCount = \"\";\nlet fromCount = \"\";\nlet ccCount = \"\";\nlet bccCount = \"\";\nlet pendingCount = \"\";\nlet archievedCount = \"\";\nlet trashCount = \"\";\nlet junkCount = \"\";\nlet flagCount = \"\";\nlet drafCount = \"\";\nlet outBoxCount = \"\";\nlet loanCount = \"\";\nlet leaveCount = \"\";\nlet procurementCount = \"\";\nlet tenderBusinessCount = \"\";\nlet circularInboxCount = \"\";\nlet circularSentCount = \"\";\n// added\nlet groupChatCount = \"\";\n\n\nexport default function mailMessageCenterReducer(\n    state = INITIAL_STATE,\n    action\n)\n{\n    switch (action.type) {\n        case EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_INIT:\n            ...\n\n        ...\n        //pagination count\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_INIT:\n        return {\n            ...state,\n            mailPaginationCountLoading: true,\n        };\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_SUCCESS:\n        switch (action.record) {\n            case \"All\":\n                allCount = action.payload;\n                break;\n\n            case \"From\":\n                fromCount = action.payload;\n                break;\n\n            // added\n            case \"GroupChat\":\n                groupChatCount = action.payload;\n                break;\n            default:\n            ...\n        }\n\n        return {\n            ...state,\n            mailPaginationCount: {\n                allCount: allCount,\n                toCount: toCount,\n                fromCount: fromCount,\n                ccCount: ccCount,\n                bccCount: bccCount,\n                pendingCount: pendingCount,\n                archievedCount: archievedCount,\n                trashCount: trashCount,\n                junkCount: junkCount,\n                flagCount: flagCount,\n                drafCount: drafCount,\n                outBoxCount: outBoxCount,\n                approvalCount: approvalCount,\n                loanCount: loanCount,\n                leaveCount: leaveCount,\n                procurementCount: procurementCount,\n                tenderBusinessCount: tenderBusinessCount,\n                circularInboxCount: circularInboxCount,\n                circularSentCount: circularSentCount,\n                // added\n                groupChatCount: groupChatCount\n            },\n            allCount: allCount,\n            toCount: toCount,\n            fromCount: fromCount,\n            ccCount: ccCount,\n            bccCount: bccCount,\n            pendingCount: pendingCount,\n            archievedCount: archievedCount,\n            trashCount: trashCount,\n            junkCount: junkCount,\n            flagCount: flagCount,\n            drafCount: drafCount,\n            outBoxCount: outBoxCount,\n            approvalCount: approvalCount,\n            loanCount: loanCount,\n            leaveCount: leaveCount,\n            procurementCount: procurementCount,\n            tenderBusinessCount: tenderBusinessCount,\n            circularInboxCount: circularInboxCount,\n            circularSentCount: circularSentCount,\n                // added\n            groupChatCount: groupChatCount,\n            mailPaginationCountLoading: false,\n        };\n    }\n}\n</code></pre> Changes EmailList.js<pre><code>// pagenum: 450\nuseEffect(() =&gt; {\n    if (emailType !== \"Business\") {\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.ALL }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularInbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularSent\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"From\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"To\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Cc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Business\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Bcc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Pending\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Archived\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Trash\" }));\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.JUNK }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Specialflag1\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Draft\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        // added\n        dispatch(emailPaginationCount({ messagecenterType: \"GroupChat\" }));\n       },\n    }   \n[\n// replyInstanceMessageResp,\n// changeEmailStatusTypeRespLoading,\n// selectedMailTypeAndMailData,\n]);\n\n\n//\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === CONSTANT.GROUP_CHAT\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;Group Chat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n\n        {console.log(\"mailPaginationCount\", mailPaginationCount)}\n\n        {mailPaginationCount?.groupChatCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.groupChatCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#groupchat-isarchive-remove-item","title":"GROUPCHAT IsArchive Remove Item","text":"<p>it removes the item but need to hit the api: <code>getMailMessageCenterPagination</code></p> <pre><code>export const getMailMessageCenterPagination = (q, loadMore, data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION, data));\n    const response =\n      await mailMessageCenterService.getMailMessageCenterPagination(q, source);\n    if (response?.cancelApi === false) return;\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION,\n          response.data,\n          loadMore,\n          data\n        )\n      );\n      dispatch(finish(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n      message.error(response.errorMessage);\n    }\n  };\n};\n</code></pre> reducer.jsx reducer.jsx<pre><code>// redux/email/mailMessageCenter/reducer.js\n// page number: 202\n\ncase EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_UPDATE:\n  let newData = state.mailMessageCenterPagination.items.map((email) =&gt; {\n    if (\n      email.applicationTypeSystemName === \"EMail\" ||\n      email.applicationTypeSystemName === \"QuickMessage\" ||\n      email.applicationTypeSystemName === \"Leave\" ||\n      email.applicationTypeSystemName == \"Loan\" ||\n      email.applicationTypeSystemName === \"Business\" ||\n      email.applicationTypeSystemName === \"Document\" ||\n      email.applicationTypeSystemName === \"TODO\" ||\n      email.applicationTypeSystemName === \"Todo\" ||\n      email.applicationTypeSystemName === \"Procurement\" ||\n      \"Loan\"\n    ) {\n      if (action.query.messageCenterId === email.id) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    } else if (email.applicationTypeSystemName === \"InstanceMessage\") {\n      if (\n        action.query.messageCenterId === email.instanceMainMessageCenterId\n      ) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    }\n  });\n\n  let filterJunk = filterNewData.filter((data) =&gt;\n    action.emailStatus.isJunk ? !data.isJunk : data.isJunk\n  );\n  {/* ADDED */}\n  let filterChatArchive = filterNewData.filter((data) =&gt;\n    action.emailStatus.isGroupChatArchive ? !data.isGroupChatArchive : data.isGroupChatArchive\n  );\n\n\n  return {\n    ...state,\n    getResponseStatus: action.query,\n    mailMessageCenterPagination: {\n      items:\n        action.query.participantStatusName === \"Trash\"\n          ? filterTrashData\n          : action.query.participantStatusName === \"doubleTrash\"\n            ? doubleTrash\n            : action.query.participantStatusName === \"Archived\"\n              ? filterArchieve\n              : action.query.participantStatusName === \"Pending\"\n                ? filterPending\n                : action.query.participantStatusName === \"Junk\"\n                  ? filterJunk\n\n                  {/* ADDED */}\n                  :action.query.participantStatusName === \"GroupChatArchive\"\n                  ? filterChatArchive\n                  {/*----*/}\n\n\n                  : action.query.participantStatusName === \"Special1\"\n                    ? filterLowPriorityMail\n                    : filterNewData,\n      totalCount: state.mailMessageCenterPagination.totalCount,\n    },\n    mailMessageCenterPaginationLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#mailmessagecenterheaderjs","title":"MailMessageCenterHeader.js","text":"ToGroupChat Icon Added Email/Includes/MailMessageCenterHeader.js<pre><code>{\n    (selectedMailTypeAndMailData?.typeSystemName === FROM ||\n    selectedMailTypeAndMailData?.typeSystemName === INBOX) \n\n    // or \n    // selectedMailTypeAndMailData?.typeSystemName === FROM\n\n    &amp;&amp; (\n    &lt;&gt;\n        &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n            multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n            \"disabled\"\n            } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n            if (!isEmpty(selectedMailTypeAndMailData)) {\n                changeEmailStatus(\n                  { \n                    isGroupChatSwitch: true,\n                    isGroupChatSwitch_InstanceMessage: true,\n                    groupChatSwitch: GROUP_CHAT_SWITCH\n                  }\n                )\n            }\n        }}\n        &gt;\n        &lt;Image src={chatTransfer} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n            ToGroupChat\n        &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)}\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-internal-message/#componentsconstants","title":"components/constants","text":""},{"location":"office/ispl/documentation/groupchat-module/","title":"GroupChat Module","text":""},{"location":"office/ispl/documentation/groupchat-module/#group-chat-module","title":"Group Chat Module","text":"Navbar.js <pre><code>// pageNumber: 693\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;Link\n    to=\"/groupchat\"\n    onClick={() =&gt; setState({ ...state, basepath: \"/groupchat\" })}\n    className={`icons__wrapper ${\n        state.basePath === \"groupchat\" ? \"active\" : \"\"\n    }`}\n    &gt;\n        &lt;img src={Calendar} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt;Group Chat&lt;/span&gt;\n    &lt;/Link&gt;\n)}\n</code></pre> Routes.js <pre><code>&lt;AuthRoute path=\"/groupchat\" exact&gt;\n    {!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox ? \n    &lt;GroupChat /&gt; : &lt;NotFound /&gt;\n    }\n&lt;/AuthRoute&gt;\n</code></pre>"},{"location":"office/ispl/documentation/groupchat-module/#infinite-scrolling","title":"Infinite Scrolling","text":"Settings setCurrentPage Better CodeOld Code <pre><code>useEffect(() =&gt; {\n    if (!isEmpty(groupChatTitlePaginationResp?.items)) {\n        setGroupData(groupChatTitlePaginationResp.items);\n\n        // Ensure proper calculation of the current page\n        const totalItems = groupChatTitlePaginationResp.items.length;\n        const newCurrentPage = Math.ceil(totalItems / pageSize);\n\n        console.log(\"Total Items: \", totalItems);\n        console.log(\"New Current Page: \", newCurrentPage);\n\n        setCurrentPage(newCurrentPage);\n    } else {\n        setGroupData([]);\n        setCurrentPage(1);\n    }\n}, [groupChatTitlePaginationResp, pageSize]);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/import-excel-file/","title":"Import Excel File","text":""},{"location":"office/ispl/documentation/import-excel-file/#import-excel-file","title":"Import Excel File","text":"functionapiFile remanentCall.js<pre><code>// upload Contact attendence\nexport const uploadContactExcel = (resp) =&gt; {\nreturn Axios.post(appBaseUrl + '/importExcelFile');\n}\n</code></pre> <pre><code>\n</code></pre> UniversalFileUpload.js<pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/instance-and-internal-message/","title":"Instance and Internal Message","text":"Instance <code>dashboard</code> and Internal Message Chat <pre><code>const {\n    instanceChatCenterPagination,\n    instanceChatCenterPaginationLoading,\n    replyInstanceMessageResp,\n    replyInstanceMessageRespLoading,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\nconst {\n    instanceChatAddResp,\n    instanceChatAddRespLoading\n} = useSelector((state) =&gt; state.instanceChatCenter);\n</code></pre>"},{"location":"office/ispl/documentation/internal-message/","title":"Internal Message","text":""},{"location":"office/ispl/documentation/internal-message/#internal-message","title":"Internal Message","text":"<p>Note</p> Companiesindex Companies.js<pre><code>// views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nimport { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> index.js<pre><code>// views/GlobalEmailChat/index.js\n\nconst ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/ispl/documentation/internal-message/#to-get-all-the-internal-chat-pagination","title":"To get all the Internal Chat Pagination","text":"<pre><code>// IMPORT \nimport { getInstanceChatCenterPagination } from \"services/redux/instanceChat/action\";\nimport { replyInstanceMessage } from \"services/redux/email/instanceMessageCenter/action\";\n\n// SELECTOR DASHBOARD\nconst { instanceChatCenterPagination, instanceChatCenterPaginationLoading } =\n    useSelector((state) =&gt; state.instanceChatCenter);\n\n// MAIL MESSAGE CENTER\nconst {\n  instanceMessageCenterPagination,\n  instanceMessageCenterPaginationLoading,\n  replyInstanceMessageResp,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\n// ACTION\nexport const getInstanceChatCenterPagination = (query) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    const response =\n      await instanceMessageChatServices.getInstanceChatCenterPagination(query);\n    dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\n\n// API\nexport class InstanceMessageChatServices {\n  instanceChatAdd(body) {\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatAdd`;\n    let data = postService(url, body, \"post\");\n    return data;\n  }\n\n  getInstanceChatCenterPagination(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatPagination?${query}`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/login/","title":"Login","text":"<p>Note</p> late attendanceleave typeindex lateAttendence.js<pre><code>...\nimport { useEffect, useState } from \"react\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\"\nimport { validateReason } from \"utils/validateReason\";\n\n\nconst { Modal, Form, Input, Spin, Alert, Select, message } = require(\"antd\");\nconst { Option } = Select;\n\nconst LateAttendence = ({id,data,leaveReasonPopUp,leaveStartdate,leaveEndDate})=&gt;{\n\n    ...\n    const [uploaders, setUploaders] = useState();\n    const [deafultLeaveType, setDefaultLeaveType] = useState([]);\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(remainingLeaveApplicationTypesListing)) {\n            const casualLeave = remainingLeaveApplicationTypesListing.find(obj =&gt; obj.leaveApplicationTypeDto.leaveTypeName === \"Casual\");\n            if(casualLeave?.leaveApplicationTypeDto?.id) {\n                form.setFieldsValue({\n                    leaveApplicationTypeId: casualLeave?.leaveApplicationTypeDto?.id,\n                })\n            }\n        }\n    }, [remainingLeaveApplicationTypesListing])\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n\n    ...\n\n    const startDate = moment(leaveStartdate);\n    const endDate = moment(leaveEndDate);\n    const durationInDays = endDate.diff(startDate, 'days');\n\n    const handleChange = (value, option) =&gt; {\n        const selectedTitle = option ? option.title : null;\n        const selectedValue = option ? option.value : null;\n\n        setDefaultLeaveType({\n            title: selectedTitle,\n            value: selectedValue\n        });\n    }\n\n\n    return (\n        &lt;div className=\"late_login_popup\"&gt;\n            &lt;Modal visible={true} footer={null} closable ={false} wrapClassName=\"late_login_popup_modal\"&gt;\n                {data &amp;&amp; \n                &lt;div className=\"time_format_login_popup\"&gt;\n                    Login Time:{moment(data).format(\"YYYY-MM-DD,HH:mm:ss A\")}\n                &lt;/div&gt;}\n                &lt;div className=\"late_attendence_popup_header\"&gt;\n                    &lt;h3&gt;Kindly elaborate your reason for being late {leaveReasonPopUp &amp;&amp; \"and also leave reason\"} !!!&lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;br/&gt;\n                &lt;Form form={form} onFinish={onFinish}&gt;\n                    &lt;div style={{fontWeight:\"600\"}}&gt;Late Reason :&lt;/div&gt;\n                    &lt;Form.Item \n                        rules={[\n                            // {\n                            //     required:true,\n                            //     message: \"Please justify the reason\",\n                            // },\n                            validateReason(10, 2)\n                        ]}\n                        name=\"attendanceLateReason\"\n                        // label=\"Late Reason\"\n                    &gt;\n                        &lt;TextArea rows={4} style={{fontSize:\"15px\"}}/&gt;\n                    &lt;/Form.Item&gt;\n                    {leaveReasonPopUp &amp;&amp; \n                    &lt;div&gt;\n                        &lt;div style={{fontWeight:\"600\",marginTop:\"10px\"}}&gt;You have taken leave from {moment(leaveStartdate).format(\"YYYY-MM-DD\")} to {moment(leaveEndDate).format(\"YYYY-MM-DD\")} &lt;/div&gt;\n                        &lt;div &gt;Leave Reason :&lt;/div&gt;\n                        &lt;Form.Item rules={[\n                                // {\n                                //     required:true,\n                                //     message: \"Please justify the reason\",\n                                // },\n                                validateReason(10, 2)\n                            ]}\n                            name=\"attendanceLeaveReason\"\n                        // label=\"Leave Reason\"\n                        // className=\"late_reason_submit\"\n                        &gt;\n                            &lt;TextArea rows={4} style={{fontSize:\"15px\"}} /&gt;\n                        &lt;/Form.Item&gt;\n                        &lt;Form.Item\n                            className=\"form__group\"\n                            label=\"Choose Leave Type\"\n                            name=\"leaveApplicationTypeId\"\n                            rules={[\n                                {\n                                required: true,\n                                },\n                            ]}\n                            style={{\n                                paddingTop: \"10px\"\n                            }}\n                        &gt;\n                            &lt;Select\n                                placeholder=\"Please select\"\n                                autoComplete=\"off\"\n                                onChange={(value, option) =&gt; handleChange(value, option)}\n                            &gt;\n                                {\n                                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                                        &lt;Option\n                                            value={leaveType.leaveApplicationTypeId}\n                                            title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                            key={i}&gt;\n                                            {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                        &lt;/Option&gt;\n                                    ))}\n\n                            &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        {durationInDays &gt;= 3 &amp;&amp; deafultLeaveType?.title === \"Medical\"  ? (\n                            &lt;&gt;\n                            {uploaders?.map((u, i) =&gt; (\n                                &lt;Form.Item \n                                    className=\"form__group\" \n                                    name={[\"uploadedFileDtos\"]}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \"Please upload at least one file\",\n                                        },\n                                    ]} &gt;\n                                    &lt;ImageUploaderMultiple\n                                        name={u.name}\n                                        isMultipleFileAllowed={true}\n                                        id={u.id}\n                                        allowedExtensions={u.allowedExtensions}\n                                        index={i}\n                                        uploadedFileDtos={form.getFieldValue()}\n                                        formName=\"uploadedFileDtos\"\n                                        form={form}\n                                        callback={(e) =&gt; {\n                                            let olduploadedFileDtos = form.getFieldValue()\n                                                .uploadedFileDtos\n                                                ? [...form.getFieldValue().uploadedFileDtos]\n                                                : [];\n\n                                            let uploadedFileDtos = [...olduploadedFileDtos];\n                                            uploadedFileDtos.push(e);\n\n                                            form.setFieldsValue({\n                                                uploadedFileDtos,\n                                            });\n                                        }}\n                                    /&gt;\n                                &lt;/Form.Item&gt;\n                            ))} \n                            &lt;/&gt;\n                        ) : null}\n\n\n                    &lt;/div&gt;\n                    }\n                    &lt;Alert\n                        message=\"Informational Notes\"\n                        description=\"Give Valid Reason with 10 minimum character &amp; 2 words\"\n                        type=\"info\"\n                        showIcon\n                        style={{marginTop: '20px'}}\n                    /&gt;\n                &lt;div className=\"button_submit\"&gt;\n                    &lt;button className=\"late_Reason_Attendence_Submit\" htmlType=\"submit\"&gt;\n                    {attendenceAddNewResponseLoading ? &lt;Spin className=\"late_reason_spinner\"/&gt;: \"Submit\"}\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> leaveForm.js<pre><code>&lt;Form.Item\n    className=\"form__group\"\n    label=\"Choose Leave Type\"\n    name=\"leaveApplicationTypeId\"\n    rules={[\n        {\n            required: true,\n\n        },\n        ]}\n&gt;\n    &lt;Select\n        placeholder=\"Please select\"\n        autoComplete=\"off\"\n    &gt;\n        {\n            !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n            remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                &lt;Option\n                    value={leaveType.leaveApplicationTypeId}\n                    title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                    key={i}&gt;\n                    {leaveType?.leaveApplicationTypeDto?.leaveTypeName} {`(${leaveType?.remainingLeave &gt; 0 ? leaveType?.remainingLeave : 0} remaining out of ${leaveType?.allowedleave} days)`}\n                &lt;/Option&gt;\n            ))}\n\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>import { getRemainingLeaveApplicationTypesForEmployee } from \"../../../services/redux/requistions/leaveApplication/action\";\n\nconst {\n    leaveApplicationPagination,\n    leaveApplicationPaginationLoading,\n    remainingLeaveApplicationTypesListing,\n    remainingLeaveApplicationTypesListingLoading,\n    addLeaveApplicationResp,\n} = useSelector((state) =&gt; state.leaveApplication);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(addLeaveApplicationResp))\n    dispatch(getRemainingLeaveApplicationTypesForEmployee());\n}, [addLeaveApplicationResp]);\n</code></pre>"},{"location":"office/ispl/documentation/login/#mail-leave-details","title":"Mail <code>leave Details</code>","text":"<p>Note</p> LeaveDetails.js<pre><code>import {\n    ...,\n    Select\n} from \"antd\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\";\n\nconst { Option } = Select;\n\nconst LeaveDetails = ({ leaveAppId }) =&gt; {\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(details)) {\n        form.setFieldsValue({\n            leaveApplicationTypeIdxx: details?.leaveApplicationTypeId,\n        })\n\n        console.log(\"details: \", details)\n        }\n    }, [details])\n\n     return !isEmpty(details) ? (\n        &lt;div className=\"mail-leave-details\"&gt;\n            ...\n\n            &lt;Form.Item\n                className=\"form__group\"\n                label=\"Choose Leave Type\"\n                name=\"leaveApplicationTypeIdxx\"\n                // rules={[\n                //     {\n                //     required: true,\n                //     },\n                // ]}\n                style={{\n                    paddingTop: \"10px\"\n                }}\n            &gt;\n                &lt;Select\n                    placeholder=\"Please select\"\n                    autoComplete=\"off\"\n                &gt;\n                    {\n                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                        &lt;Option\n                        value={leaveType.leaveApplicationTypeId}\n                        title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        key={i}&gt;\n                        {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        &lt;/Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            ...\n        &lt;/div&gt;\n     )\n\n}\n\nexport default LeaveDetails;\n</code></pre> leaveForm.js<pre><code>import { message } from \"antd\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\n\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nconst LeaveForm = ({\n    remainingLeaveApplicationTypesListing,\n    setHideLeaveDrawer,\n}) =&gt; {\n\n    const [uploaders, setUploaders] = useState();\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {uploaders?.map((u, i) =&gt; (\n                &lt;Form.Item className=\"form__group\" name={[\"uploadedFileDtos\"]} &gt;\n                    &lt;ImageUploaderMultiple\n                        name={u.name}\n                        isMultipleFileAllowed={true}\n                        id={u.id}\n                        allowedExtensions={u.allowedExtensions}\n                        index={i}\n                        uploadedFileDtos={form.getFieldValue()}\n                        formName=\"uploadedFileDtos\"\n                        form={form}\n                        callback={(e) =&gt; {\n                            let olduploadedFileDtos = form.getFieldValue()\n                                .uploadedFileDtos\n                                ? [...form.getFieldValue().uploadedFileDtos]\n                                : [];\n\n                            let uploadedFileDtos = [...olduploadedFileDtos];\n                            uploadedFileDtos.push(e);\n\n                            form.setFieldsValue({\n                                uploadedFileDtos,\n                            });\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n            ))} \n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/login/#utils","title":"utils","text":"<p>Tip</p> validate Reason <pre><code>export const validateReason = (minChars, minWords) =&gt; ({\n    validator: (_, value) =&gt; {\n    const words = value.trim().split(/\\s+/);\n    const characterCount = value.trim().length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n        return Promise.reject(\n        new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n        );\n    }\n    return Promise.resolve();\n    },\n});\n</code></pre>"},{"location":"office/ispl/documentation/mail/","title":"Mail","text":"<p>While searching the reference in the <code>compose mail</code>, it doesn't show all the reference items?</p> <p>ComposeEmailDrawer</p> ComposeEmailDrawer.js<pre><code>onSearch={(value) =&gt; {\n    setSearchValueReference(value);\n    setReferencevalue(value);\n    setFilterParticipantType(\"REF\");\n    handleFilter(value, \"REF\");\n}}\n&lt;Form \n    name = \"participantTos\"/&gt;\nconst displayMessages = (status) = {}\n\n// page number: 3710\nreturn (\n    &lt;Option\n        key={index}\n        // key={data.id}\n        value={data.title}\n        // className={index}\n        // id={index}\n        label={[data.code, data.title]}\n    &gt;\n        &lt;div\n        className=\"compose-reference-wrapper\"\n        // key={index}\n        key={data.id}\n        &gt;\n        &lt;div\n            className=\"compose-references-code\"\n            title={data?.code}\n        &gt;\n            &lt;span&gt;{data?.code}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-title\"\n            title={data?.title}\n        &gt;\n            &lt;span&gt; {data?.title}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-description\"\n            title={data?.description}\n        &gt;\n            &lt;span&gt;{data?.description}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Option&gt;\n);\n</code></pre> <p>Solved</p> Solved BasicSolved Advanced ComposeEmailDrawer.js<pre><code>// const isSelected = mailRefDtos.includes(data.code);\n// also add this \nconst isSelected = mailRefDtos.includes(`${data.code}-${data.title}`);\n&lt;Option\n    key={index}\n    //value={data.title}\n    // add this\n    value={`${data.code}-${data.title}`}\n    label={[data.code, data.title]}\n&gt;\n&lt;/Option&gt;\n</code></pre> ComposeEmailDrawer.js<pre><code>&lt;div className=\"email-text\"&gt;Reference&lt;/div&gt;\n&lt;Form.Item\n    className=\"form__group compose-ref-select\"\n    name=\"mailMessageReferenceDtos\"\n    rules={[\n        {\n            required: closeWindow === \"newDraft\" ? false : true,\n            message: \"\",\n        },\n    ]}\n&gt;\n    &lt;Select\n        onSelect={(value) =&gt; {\n            {/* OLD CODE */}\n            const uniqueArray = Array.from(\n                new Set([...mailRefDtos, value])\n            );\n\n            {/* NEW CODE */}\n            const uniqueArray = Array.from(\n                new Set([\n                    // Extract substring before underscore\n                    ...mailRefDtos.map(dto =&gt; dto.split('_')[0]),\n\n                    // Extract substring before underscore from the new value\n                    value.split('_')[0]\n                ])\n            );\n        })}\n    /&gt;\n&lt;/Form.Item&gt;\n\n\n{/* ADDED THIS CODE */}\nconst isSelected = mailRefDtos.includes(data?.code);\n\nreturn (\n    &lt;Option\n        key={index}\n        {/* ADDED UNDERSCORE */}\n        value={`${data.code}_${data.title}`}\n        label={[data.code, data.title]}\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/mail/#dashboard-events","title":"Dashboard Events","text":"PublicEvents Home/Events/PublicEvents.js<pre><code>// added Dropdown, Menu\nimport { Form, Image, Modal, Skeleton, Tooltip, Dropdown, Menu } from \"antd\";\n\nconst PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n\n    // added\n    const [openEventModal, setOpenEventModal] = useState(false);\n\n    const menu = (\n        &lt;Menu&gt;\n        &lt;Menu.Item\n            onClick={() =&gt; {\n                setOpenEventModal(true);\n            }}\n        &gt;\n            Holiday\n        &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                &lt;h4 className=\"dashboards__body--title\"&gt;Events&lt;/h4&gt;\n                &lt;div className=\"\"&gt;\n                    &lt;WechatOutlined\n                        onClick={() =&gt; {\n                            setInternalVisible(true);\n                        }}\n                    /&gt;\n\n                    {/* added */}\n                    &lt;Dropdown.Button\n                        overlay={menu}\n                        className=\"new_menu\"\n                        style={{\n                            marginBottom: \"5px\",\n                            width: \"20px\",\n                            border: \"none\",\n                            marginLeft: \"2px\",\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/mail/#dashboard-flip-card","title":"Dashboard Flip Card","text":"flip-card tender.js<pre><code>import ProjectsLists from \"./DashboardComponents/ProjectsLists\";\n\nconst TenderLists = ({ classNames }) =&gt; {\n    const [rotate, setRotate] = useState(0);\n\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n\n                {/* FRONT */}\n                &lt;div className=\"flip-card-front\"&gt;\n                    &lt;div\n                        className={\"dashboards__tenderlist dashboards__body \" + classNames}\n                        style={{ height: \"495px\" }}\n                    &gt;\n                        &lt;div className=\"dashboards__bodyWrap\"&gt;\n                        &lt;h4 className=\"dashboards__body--title\"&gt;\n                            Tenders/Projects\n                            &lt;span\n                                onClick={() =&gt; {\n                                    setRotate(rotate + 1);\n                                }}\n                                style={{\n                                    marginLeft: \"10px\",\n                                    height: \"30px\",\n                                    marginBottom: \"10px\",\n                                }}\n                            &gt;\n                                &lt;img\n                                    src=\"./assets/svg/toggle-arrow.svg\"\n                                    height={15}\n                                    alt=\"complete\"\n                                /&gt;\n                            &lt;/span&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* BACK */}\n                &lt;div className=\"flip-card-back\"&gt;\n                    &lt;div\n                        style={{\n                        backfaceVisibility: \"hidden\",\n                        }}\n                    &gt;\n                        &lt;div\n                            className={\n                                \"dashboards__tenderlist dashboards__body \" + classNames\n                            }\n                            &gt;\n                            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                                &lt;h4 className=\"dashboards__body--title\"&gt;\n                                Projects/Tenders\n                                &lt;span\n                                    onClick={() =&gt; {\n                                        setRotate(rotate + 1);\n                                    }}\n                                    style={{\n                                        marginLeft: \"10px\",\n                                        height: \"30px\",\n                                        marginBottom: \"10px\",\n                                    }}\n                                &gt;\n                                    &lt;img\n                                        src=\"./assets/svg/toggle-arrow.svg\"\n                                        height={15}\n                                        alt=\"complete\"\n                                    /&gt;\n                                &lt;/span&gt;\n                                &lt;/h4&gt;\n                            &lt;/div&gt;\n\n                            {/* Components */}\n                            &lt;ProjectsLists /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/mail/#email-issue","title":"Email Issue","text":"<p>while <code>reply all</code>, <code>reply</code>, <code>forward</code> the application crashed</p> <ul> <li><code>/email-compose?applicationType=newEmail</code> - working</li> <li><code>/email-compose?applicationType=reply</code> - not working</li> <li><code>/email-compose?applicationType=replyall</code> - not working</li> <li><code>/email-compose?applicationType=forward</code> - not working</li> </ul> <p>Danger</p> displayMessagescontactQuickAddEmailRespsonsecurrentSelectedMessage useEffectComposeEmailDrawer <pre><code>useEffect(() =&gt; {\n    {/* DEBUG THIS WHEN NEW CONTACT ADDED THIS BECOMES EMPTY */}\n    console.log(\"participantTypeTos: \", participantTypeTos)\n\n    if (applicationTypeStatus) {\n        if (applicationTypeStatus === \"reply\") {\n\n            // IMPORTANT\n            displayMessages(applicationTypeStatus);\n\n            form.setFieldsValue({\n                participantCCs: [],\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n            });\n        } else if (applicationTypeStatus === \"replyall\") {\n            form.setFieldsValue({\n                participantCCs: newCCs?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                uploadedFileDtos: [],\n            });\n        }\n\n        // others ...\n    }\n})\n</code></pre> ComposeEmailDrawer.js<pre><code>const displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom = currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n    let participantTypeTos =\n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        });\n    let participantTypeCCs = !isEmpty(\n        currentSelectedMailMessage?.applicationTypeDetails?.cCs\n        )\n        ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map(\n            (typeTos) =&gt; {\n                return { emailAddress: typeTos.emailAddress };\n            }\n        )\n    : [];\n\n    const participantTos = getParticipantsInfo(participantTypeTos);\n    const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n\n    if (status !== \"reSend\") {\n\n        if (status === \"composeDraft\") {\n            form.setFieldsValue({\n                participantFrom: messageParticipantsFrom[0],\n            });\n            setEditorData(currentSelectedMailMessage.body);\n        } else {\n            let data = `From:${\n                participantTypeFrom?.emailAddress\n            }  &lt;br&gt; To:${participantTos} ${\n                partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n            } &lt;br&gt;  Date:${\n                currentSelectedMailMessage?.creationTime &amp;&amp;\n                moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n                },${moment(currentSelectedMailMessage?.creationTime).format(\n                \"LT\"\n            )} &lt;br&gt; ${currentSelectedMailMessage.body} &lt;br&gt;`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n        if (status === \"emailForwardSend\") {\n            let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")},${moment(\n            currentSelectedMailMessage?.creationTime,\"HH:mm:ss\"\n            ).format(\"LT\")} ${\n            (currentSelectedMailMessage?.companyName\n                ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                    .companyName\n                : \"\",\n            currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                .emailAddress)\n            }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n    } else if (status === \"reSend\") {\n        let data = `${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    } else {\n        let data = `Date:${\n            currentSelectedMailMessage?.creationTime &amp;&amp;\n            moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n        } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n};\n</code></pre> <pre><code>  const { contactQuickAddEmailRespsonse } = useSelector((state) =&gt; state.contactCompanyPerson);\n\n  useEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n        if (filterParticipantType == \"To\") {\n            form.setFieldsValue({\n            participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n                ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n                : [emailAddressResp],\n            });\n        } else if (filterParticipantType == \"CC\") {\n            form.setFieldsValue({\n            participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n                ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n                : [emailAddressResp],\n            });\n        }\n    }\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> <pre><code>useEffect(() =&gt; {\n    // ...\n    if (!isEmpty(currentSelectedMailMessage)) {}\n}, [\n    applicationTypeStatus,\n    currentSelectedMailMessage,\n    messageParticipantsFrom,\n]);\n</code></pre> <ul> <li>file-saver <code>npm</code></li> </ul>"},{"location":"office/ispl/documentation/mail/#bug-pin-pointed","title":"Bug pin-pointed","text":"<p>Bug</p> ComposeEmailDrawer.js<pre><code>{/* page number: 1222 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        // displayMessages(applicationTypeStatus);\\\n        console.log(\"participantTypeTos: \", participantTypeTos)\n        form.setFieldsValue({\n            participantCCs: [],\n            // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n            //   return typeTos;\n            // }),\n        });\n    }\n}\n</code></pre> <p>Success</p> Solved Tos <code>Reply</code>git file changes ComposeEmailDrawer.js<pre><code>const[contactTos, setContactTos] = useState([])\n\n\n{/* pagenumber: 572 */}\nconst displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* ADDDED !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos)\n    ?\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n    })\n    : [];\n}\n\n---\n\n{/* pagenumber: 1225 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        displayMessages(applicationTypeStatus);\n        form.setFieldsValue({\n        participantCCs: [],\n\n        {/* ADD !isEmpty */}\n        participantTos: !isEmpty(participantTypeTos) ?\n            participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        })\n        //: [],\n        : contactTos\n        })\n    }\n}\n\n{/* page num: 1469  */}\nuseEffect(() =&gt; {\n    if (activeEmailSignatureDetailsResponse) {\n\n    let signatureData = activeEmailSignatureDetailsResponse?.body\n        ? `&lt;div id=\"signatureData\" ref={${ref}}&gt;&lt;br/&gt;${activeEmailSignatureDetailsResponse?.body}&lt;/div&gt;`\n        : \"\";\n    const sign = localStorage.getItem(\"signatureData\");\n\n    let participantTypeFrom = \n        currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* aded !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos) ? \n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map(\n        (typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        }\n        ) : [];\n    }\n})\n\n{/* pagenumber: 1409 */}\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n    let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n    setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n\n        {/* ADDED */}\n        const uniqueMail = new Set([...form.getFieldsValue()?.participantTos, emailAddressResp])\n        setContactTos([...uniqueMail])\n\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n}, [contactQuickAddEmailRespsonse]);\n\n\n{/* pagenumber: 1649 */}\nconst autoDraft = (e, participant) =&gt; {\n    {/* UPDATE THIS */}\n    let newParticipantArrTo = form.getFieldsValue().participantTos \n    ? [...form.getFieldsValue().participantTos]\n    : [];\n}\n</code></pre> <pre><code>git diff --stat\nsrc/views/Email/Includes/ComposeEmailDrawer.js | 42 ++++++++++++++++++++++++++++++------------\n1 file changed, 30 insertions(+), 12 deletions(-)\n</code></pre> <p>Abstract</p> <pre><code>const [currentSelectedMailMessage, setCurrentSelectedMailMessage] = useState({});\n\n{/* ADD THIS STATE */}\nconst [currentSelectedMailTos, setCurrentSelectedMailTos] = useState([]);\n\n\nconsole.log(\"currentSelectedMailTos: \", currentSelectedMailTos)\n</code></pre>"},{"location":"office/ispl/documentation/mail/#api","title":"API","text":"<p>api</p> <pre><code>HOLIDAY  EXCEL in admin\nhttps://localhost:44386/api/app/adminModule/downloadSampleHolidayUploadExcel\nhttps://localhost:44386/api/app/adminModule/importHoliday\n\nHOLIDAY YEAR GET LISTING\nhttps://localhost:44386/api/app/organizerEvent/holidayEventsPagination?SearchByNepaliYear=2080&amp;MaxResultCount=50&amp;SkipCount=0\n</code></pre>"},{"location":"office/ispl/documentation/permisison-based-access-control/","title":"Permission Based Access Control","text":""},{"location":"office/ispl/documentation/permisison-based-access-control/#permission-based-access-control-in-react","title":"Permission-Based Access Control in react","text":"<p>In <code>permission-based</code> control, users are granted individual permissions directly (e.g., \"canViewDashboard\", \"canEditProfile\"). Permissions are more granular and allow for fine-tuning access control.</p> <pre><code>import { isEmpty } from \"lodash\";\n\nconst [grantedPolices, setGrantedPolices] = useState({});\n\nconst { applicationConfiguration } = useSelector(\n    (state) =&gt; state.applicationConfig\n);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(applicationConfiguration?.auth?.grantedPolicies)) {\n        setGrantedPolices(applicationConfiguration?.auth?.grantedPolicies);\n        console.log(\"applicationConfiguration?.auth?.grantedPolicies: \", applicationConfiguration?.auth?.grantedPolicies);\n    }\n}, [applicationConfiguration]);\n\n\n\n\nreturn (\n\n    &lt;&gt;\n        {!isEmpty(grantedPolices) &amp;&amp;  \n        grantedPolices[\"CQNovalFramework.DashboardMenu.DailyDiary.UserListing\"] &amp;&amp; (\n            &lt;div className=\"global-form-group calc\"&gt;\n                &lt;div className=\"global-form-label\"&gt;\n                    &lt;label&gt;Users&lt;/label&gt;\n                &lt;/div&gt;\n                &lt;div className=\"global-form-input\"&gt;\n                    &lt;Form.Item\n                        className=\"form__group\"\n                        name=\"UserId\"\n                    &gt;\n                        &lt;Select\n                            placeholder=\"Select a User\"\n                            showSearch={true}\n                            allowClear\n                            filterOption={(input, option) =&gt;\n                            option.children[0] &amp;&amp;\n                            option.children[0]\n                                .toLowerCase()\n                                .indexOf(input.toLowerCase()) &gt;= 0\n                            }\n                            onChange={(id, value) =&gt; {\n                                setSelectedUserId(id);\n                                if (id === null || id === undefined) {\n                                setSelectedUserName(null);\n                                } else {\n                                    const selectedUser = user.find(u =&gt; u.appUserId === id);\n                                    if (selectedUser) {\n                                    setSelectedUserName(selectedUser.userName);\n                                    }\n                                }\n                            }}\n                        &gt;\n                            {user.map((user) =&gt; (\n                                &lt;Option key={user.appUserId} &gt;\n                                    {user.fullName} {`[${user.userName}]`}\n                                &lt;/Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )}\n    &lt;/&gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/permisison-based-access-control/#api-action-reducer","title":"API, Action &amp; Reducer","text":"APIActionReducer <pre><code>import { rootBaseUrl } from \"utils/config\";\nimport { getService } from \"../../../commonServices\";\n\nexport class ApplicationConfigurationService {\n    getApplicationConfiguration() {\n        let url = `${rootBaseUrl}/abp/application-configuration`;\n        let data = getService(url);\n        return data;\n    }\n}\n</code></pre> <pre><code>import { APPLICATION_CONFIGURATION } from \"../../../types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { ApplicationConfigurationService } from \"./api\";\n\nconst applicationConfigurationService = new ApplicationConfigurationService();\n\nexport const getApplicationConfiguration = () =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n        const response = await applicationConfigurationService.getApplicationConfiguration();\n        dispatch(finish(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n\n        if (response.isSuccess) {\n            dispatch(success(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION, { auth: response?.data?.auth || {}, currentUser: response?.data?.currentUser || {} }));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { APPLICATION_CONFIGURATION } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    applicationConfiguration: jsonParser(jsonParser(sessionStorage.getItem(\"persist:root\"))?.applicationConfig)\n    ?.applicationConfiguration || [],\n    applicationConfigurationLoading: false,\n};\n\nexport default function applicationConfigurationReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_INIT:\n            return {\n                ...state,\n                applicationConfiguration: [],\n                applicationConfigurationLoading: true,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_SUCCESS:\n            return {\n                ...state,\n                applicationConfiguration: action.payload,\n                applicationConfigurationLoading: false,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_FINISH:\n            return {\n                ...state,\n                applicationConfigurationLoading: false,\n            };\n        default:\n            return { ...state };\n    }\n}\n</code></pre>"},{"location":"office/ispl/documentation/priority-listing-select/","title":"Priority Select Listing","text":"<pre><code>const priorityEventsState = useSelector((state) =&gt; state.priorityEvents);\nconst { organizerEventPriorityListing } = priorityEventsState;\n\n\n&lt;Form.Item\n  label=\"Priority\"\n  name=\"organizerEventPriorityId\"\n  className=\"form__group\"\n  initialValue={organizerEventPriorityListing[3]?.id}\n&gt;\n  &lt;Select\n    placeholder=\"Select Priority\"\n    autoComplete=\"off\"\n    getPopupContainer={(trigger) =&gt; trigger.parentNode}\n  &gt;\n    {!isEmpty(organizerEventPriorityListing) &amp;&amp;\n      organizerEventPriorityListing.map((status, index) =&gt; {\n        return (\n          &lt;Option value={status.id} key={index}&gt;\n            {status.name}\n          &lt;/Option&gt;\n        );\n      })}\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/documentation/public-events/","title":"Dashboard Events","text":"<p>Example</p> <p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/ispl/documentation/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/ispl/documentation/redux-action-advanced/#api","title":"API","text":"<p>Example</p> <p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/ispl/documentation/redux-action-advanced/#action","title":"ACTION","text":"<p>Example</p> <p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/redux-action-advanced/#reducer","title":"REDUCER","text":"<p>Example</p> <p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/reference-project-circular/","title":"Project Circular","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/reference-tender-circular/","title":"Tender Circular","text":"<p>Tender</p> <p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/ispl/documentation/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre>"},{"location":"office/ispl/documentation/sending-mail/","title":"Sending Mail","text":"<p>Example</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/ispl/documentation/setting-setValue-in-select/","title":"Setting Value in Select","text":"GroupChatDrawer.jsx<pre><code>const [filterReference, setFilterReference] = useState([]);\n\n\nuseEffect(() =&gt; {\n    if (!isEmpty(referenceListing) &amp;&amp; filterParticipantType == \"REF\") {\n        setFilterReference(referenceListing.items);\n    }\n}, [referenceListing]);\n\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        console.log(\"groupChatTitleDetailsResp: \", groupChatTitleDetailsResp)\n\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        form.setFieldsValue({\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n    }\n}, [groupChatTitleDetailsResp, form])\n\n\n\nreturn(\n    &lt;&gt;\n    &lt;div className=\"drawer-form-group\"&gt;\n        &lt;Form.Item\n            className=\"form__group\"\n            name=\"referenceId\"\n            label=\"Reference ID\"\n            rules={[\n                {\n                    required: true,\n                    message: 'Please select reference',\n                },\n            ]}\n        &gt;\n            &lt;Select\n                getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                showSearch\n                placeholder=\"Select reference\"\n                optionFilterProp=\"label\"\n                allowClear={true}\n                onSearch={(value) =&gt; {\n                    setSearchValueReference(value);\n                    setFilterParticipantType(\"REF\");\n                }}\n                autoComplete=\"off\"\n            &gt;\n\n            {console.log(\"XXXX filterReference: \", filterReference)}\n\n            {/********************************************* EXAMPLE *********************************************/}\n\n            {filterReference.map((reference, index) =&gt; {\n                return (\n                    &lt;Option\n                        value={reference.id}\n                        key={index}\n                        label={[reference.code, reference.title]}\n                    &gt;\n                        &lt;div className=\"demo-option-label-item\"&gt;\n                            &lt;div&gt;\n                                {reference.code} {\"\"}\n                            &lt;/div&gt;\n                            &lt;div&gt;{reference.title}&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Option&gt;\n                );\n            })}\n            &lt;/Select&gt;\n        &lt;/Form.Item&gt;\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> Tips <pre><code>import { getAllUsers } from 'services/remanentCalls';\n\n\nconst [user, setUsers] = useState([]);\n\nuseEffect(() =&gt; {\n    fetchAllUsers();\n}, []);\n\n// func\nconst fetchAllUsers = async () =&gt; {\n    const resp = await getAllUsers().catch((err) =&gt; {\n        message.error(\"Failure\");\n    });\n\n    if (resp &amp;&amp; resp.status === 200) {\n        setUsers(resp.data);\n    }\n};\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        // we are setting the recently used tags because it doesnt fetch all listing of reference tags.\n        // and we set the previous selected tags only.\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        // we only selected the previous selected users, and add its id to UserListIds because \n        // the listing of users is already fetch.\n        let selectedUserId = groupChatTitleDetailsResp.userList?.map((item, index) =&gt; item?.userId);\n\n        form.setFieldsValue({\n            chatGroupName: groupChatTitleDetailsResp?.chatGroupName,\n            description: groupChatTitleDetailsResp?.description,\n            userListIds: selectedUserId,\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n\n        /*********************************************************************/\n        // BEGIN: BUG =&gt; Don't do this\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setUsers(updatedData)\n        // END\n        /*********************************************************************/\n    }\n}, [groupChatTitleDetailsResp, form])\n</code></pre>"},{"location":"office/ispl/documentation/setting-setValue-in-select/#data-transformation-to-rename-a-property-and-replacing-with-new-names","title":"Data Transformation: To rename a property and replacing with new names","text":"<p>To rename a property (e.g., <code>userIds</code> to <code>AppuserId</code>) in each object of an array, you can use the <code>map</code> function to create a new array with the updated property names. Here\u2019s how you can achieve this:</p> Example <pre><code>const data = [\n    { userIds: '123', name: 'Alice' },\n    { userIds: '456', name: 'Bob' },\n    // More objects\n];\n\nconst updatedData = data.map(item =&gt; {\n    const { userIds, ...rest } = item; // Destructure to separate userIds from the rest of the properties\n    return { AppuserId: userIds, ...rest }; // Create a new object with AppuserId and the rest of the properties\n});\n\nconsole.log(updatedData);\n</code></pre>"},{"location":"office/ispl/documentation/setting-setValue-in-select/#explanation","title":"Explanation","text":"<ul> <li>Destructuring: We destructure <code>item</code> to separate <code>userIds</code> from the rest of the properties.</li> <li>Returning a New Object: We create and return a new object with <code>AppuserId</code> and the rest of the properties using the spread operator.</li> </ul>"},{"location":"office/ispl/documentation/setting-setValue-in-select/#example-in-a-react-component","title":"Example in a React Component","text":"<p>If you need to perform this transformation in a React component, you can do it inside a useEffect or a function that processes your data:</p> <pre><code>import React, { useEffect, useState } from 'react';\n\nconst MyComponent = () =&gt; {\n    const [data, setData] = useState([\n        { userIds: '123', name: 'Alice' },\n        { userIds: '456', name: 'Bob' },\n        // More objects\n    ]);\n\n    useEffect(() =&gt; {\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setData(updatedData);\n    }, []); // Empty dependency array means this runs once after initial render\n\n    return (\n        &lt;div&gt;\n            {data.map(item =&gt; (\n                &lt;div key={item.AppuserId}&gt;\n                    &lt;p&gt;AppuserId: {item.AppuserId}&lt;/p&gt;\n                    &lt;p&gt;Name: {item.name}&lt;/p&gt;\n                &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/documentation/setting-setValue-in-select/#explanation_1","title":"Explanation","text":"<ul> <li>State Initialization: <code>data</code> is initialized with the original array of objects.</li> <li>useEffect: The <code>useEffect</code> hook runs after the initial render and transforms the <code>data</code> array to rename <code>userIds</code> to <code>AppuserId</code>.</li> <li>Rendering: The component renders the updated data, displaying each <code>AppuserId</code> and <code>name</code>.</li> </ul> <p>This approach ensures that the data transformation is handled efficiently and the component state is updated accordingly.</p>"},{"location":"office/ispl/documentation/sisco-view/","title":"Hr Module","text":"<p>HR Module</p> SicoViewindexAddUpdateSisterCompanyDrawer <p>To view the data in the <code>Basic</code>.</p> SiscoView.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/SiscoView.js\n\nconst SiscoView = ({\n    isUpdateSiscoCredentials,\n    showAddUpdateSisterCompanyDrawer,\n}) =&gt; {\n    return (\n        &lt;div className=\"profile__info profile__wrap--sister\"&gt;\n            &lt;div className=\"profile__info--wrapper\"&gt;\n                &lt;div className=\"profile__info--body\"&gt;\n                    &lt;div className=\"contactsDetails__info mb-3 sisco-header-wapper\"&gt;\n                        &lt;span className=\"contactsDetails--title bold w-100\"&gt;Basic&lt;/span&gt;\n                        &lt;div className=\"sisco-action-button\"&gt;\n                            &lt;div\n                                onClick={() =&gt; {\n                                showAddUpdateSisterCompanyDrawer(isUpdateSiscoCredentials);\n                                }}\n                            &gt;\n                                &lt;img src={editIcon} /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    {/* *********** IMPORTANT **************** */}\n\n                    {!isUpdateSiscoCredentials?.creationTime ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row sister\"&gt;\n                            &lt;div className=\"profile__row--label sister--label\"&gt;\n                                &lt;span className=\"profile__bodyTitle\"&gt;Creation Time&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div className=\"profile__row--data sister--data\"&gt;\n                                &lt;span className=\"profile__bodyInfo\"&gt;\n                                {moment(isUpdateSiscoCredentials?.creationTime).format(\n                                    \"YYYY/MM/DD\"\n                                )}\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                    {/* Added */}\n                    {!isUpdateSiscoCredentials?.address ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.address}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.website ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.website}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.linkedin ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.linkedin}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationNumber ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationNumber}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationDate ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationDate}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> index.js<pre><code>// views/Admin/index.js\n\nfunction Admin() {\n    const [isUpdateSiscoCredentials, setIsUpdateSiscoCredentials] = useState();\n\n    useEffect(() =&gt; {\n        if (addUpdatesisterCompanyResponse) {\n            console.log(\"addUpdatesisterCompanyResponse: \",addUpdatesisterCompanyResponse)\n            setIsUpdateSiscoCredentials(addUpdatesisterCompanyResponse);\n        }\n    }, [addUpdatesisterCompanyResponse]);\n\n    const rowEventhandlersSisco = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                setIsUpdateSiscoCredentials(record);\n                setSiscoCompanyId(record.id);\n                setHidden(false);\n                setEmployeeId();\n                setEmployeeUserId();\n                setDepartment({ id: \"\", type: \"\" });\n                setSiscoId(record.id);\n            },\n        };\n    };\n\n\n    const showAddUpdateSisterCompanyDrawer = (record) =&gt; {\n        form.resetFields();\n        if (record) {\n            setIsUpdateSisterCompany(record);\n        }\n        setAddUpdateSisterCompanyDrawerVisibility(true);\n    };\n\n    return (\n        &lt;div className=\"sidebars\"&gt;\n            {/* ... */}\n            &lt;div className=\"profiledetails\"&gt;\n                &lt;Collapse\n                    expandIconPosition=\"right\"\n                    accordion={true}\n                    defaultActiveKey={[\"1\"]}\n                &gt;\n                    &lt;Panel key=\"1\" header=\"Sisco User list\"&gt;\n                        &lt;div&gt;\n                            &lt;div style={{ height: \"43%\" }}&gt;\n                                &lt;SiscoUserList\n                                    setSiscoClassName={setSiscoClassName}\n                                    grantedPolices={grantedPolices}\n                                    rowEventhandlersSisco={rowEventhandlersSisco}\n                                    inputSearchValue={inputSearchValue}\n                                    sisterCompanyPagination={sisterCompanyPagination}\n                                    sisterCompanyPaginationLoading={\n                                    sisterCompanyPaginationLoading\n                                    }\n                                /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Panel&gt;\n                &lt;/Collapse&gt;\n            &lt;/div&gt;\n            {/* ... */}\n        &lt;/div&gt;\n    )\n}\n\nexport default Admin;\n</code></pre> AddUpdateSisterCompanyDrawer.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/AddUpdateSisterCompanyDrawer.js\n\nconst AddUpdateSisterCompanyDrawer = ({\n    onAddUpdateSisterCompanyClose,\n    drawerVisibility,\n    isUpdateSisterCompany,\n    sisterCompanyListing,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            visible={drawerVisibility}\n            width={472}\n            maskClosable={false}\n            className=\"drawer main-drawer-wrapper\"\n            onClose={onAddUpdateSisterCompanyClose}\n            closable={false}\n        &gt;\n            &lt;Header className=\"drawer__header\"&gt;\n                &lt;h4 className=\"drawer__header--title\"&gt;\n                {`${isUpdateSisterCompany ? \"Update\" : \"Create\"} Sister Company`}\n                &lt;/h4&gt;\n            &lt;/Header&gt;\n            &lt;div className=\"drawer__content\"&gt;\n                &lt;div className=\"drawer__content--wrapper\"&gt;\n                    &lt;div className=\"contact__content__wrapper\"&gt;\n                        &lt;Form\n                            layout=\"vertical\"\n                            form={form}\n                            name=\"control-hooks\"\n                            validateMessages={validateMessages}\n                            className=\"drawer-form-wrapper\"\n                        &gt;\n                        &lt;div className=\"drawer-form-row\"&gt;\n                            &lt;div className=\"drawer-form-group\"&gt;\n                                &lt;Form.Item\n                                    name=\"name\"\n                                    className=\"form__group\"\n                                    label=\"Sister Company Name\"\n                                    rules={[{ required: true }]}\n                                &gt;\n                                    &lt;Input autoComplete=\"off\" /&gt;\n                                &lt;/Form.Item&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/Drawer&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/documentation/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":"<p>Example</p> apiactionreducer <p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre> <p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/important/debounce/","title":"Debounce","text":"<p>debounce</p> <pre><code>import { debounce } from \"lodash\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nconst debouncedDispatch = useCallback(\n    debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n        dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    }, 300),\n    [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n    const selectedData = options.map((option) =&gt; ({\n        AttentionTo: option.props.children,\n        AttentionId: option.key,\n    }));\n\n    let selectedPersonIds = selectedData &amp;&amp; selectedData?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n    }));\n\n    setSelectedAttendees(selectedData);\n    setHasSelectedAttentionTos(!isEmpty(values));\n\n    // dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    debouncedDispatch(selectedPersonIds, selectedCompanyId);\n};\n\n\n\nreturn (\n    &lt;&gt;\n    &lt;Form.Item label=\"Attention to\" name=\"attendees\"&gt;\n        &lt;Select\n            showSearch\n            mode=\"multiple\"\n            autoComplete=\"off\"\n            optionFilterProp=\"label\"\n            placeholder=\"Select Person\"\n            allowClear\n            onSearch={(value) =&gt; {\n                setSearchKeywordContactPerson(value);\n            }}\n\n            // ONCHANGE\n            onChange={handleSelectChange}\n        /&gt;\n    &lt;/Form.Item&gt;\n    &lt;/&gt;\n)\n</code></pre> Companies.js<pre><code>const debounceDispatch = useCallback(\n    debounce((selectedKeys) =&gt; {\n        console.log(\"dispatch\", selectedKeys)\n        let id = getDetails?.referenceId;\n        if (id)\n            dispatch(getCompanyPersonEmailAddress(id, selectedKeys))\n    }, 2000), [dispatch]\n)\n\nconst rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      let contactCompanyIds = selectedRows &amp;&amp; selectedRows.map(row =&gt; row.contactCompanyId);\n      setSelectedRowKeys(selectedKeys);debounceDispatch(contactCompanyIds);\n    },\n    type: 'checkbox',\n};\n</code></pre> action.jsreducer.jstypes.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        if (response.isSuccess) {\n            dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n            );\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n}\n</code></pre> <pre><code>// EMAIL ADRESS\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_INIT:\n    return {\n        ...state,\n        personMailListing: [],\n        personMailListingLoading: true,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_SUCCESS:\n    return {\n        ...state,\n        personMailListing: action.payload,\n        personMailListingLoading: false,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_FINISH:\n    return {\n        ...state,\n        personMailListingLoading: false,\n    };\n</code></pre> <pre><code>// LISTING\nCOMPANY_PERSON_EMAIL_LISTING: \"COMPANY_PERSON_EMAIL_LISTING\",\nCOMPANY_PERSON_EMAIL_LISTING_INIT: \"COMPANY_PERSON_EMAIL_LISTING_INIT\",\nCOMPANY_PERSON_EMAIL_LISTING_FINISH: \"COMPANY_PERSON_EMAIL_LISTING_FINISH\",\nCOMPANY_PERSON_EMAIL_LISTING_SUCCESS: \"COMPANY_PERSON_EMAIL_LISTING_SUCCESS\", \n</code></pre>"},{"location":"office/ispl/important/draft/","title":"draft","text":"<p>skhkwejd</p>"},{"location":"office/ispl/important/draft/#throwing-error","title":"THROWING ERROR","text":"Component LevelAction Level <p>If the <code>catch</code> block is not preventing the new tab from opening, it\u2019s likely due to how the error handling and asynchronous operations are managed. Here's a revised approach to ensure the new tab only opens if all operations are successful and if errors are properly handled.</p> <p>Updated Approach</p> <ul> <li>Ensure that <code>window.open</code> is inside the <code>try</code> block after all asynchronous operations and only if there are no errors.</li> <li>Check for errors in the <code>catch</code> block and make sure <code>window.open</code> is not executed in case of errors.</li> </ul> <pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \", getDetails?.title)\n\n    let data = {\n        tos: referencePartyListingCircularResponse ?? '',\n        refCode: getDetails?.referenceCode ?? '',\n        subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n        let id = getDetails?.referenceId;\n\n        // Await the dispatch for getting company person email address\n        await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n        // Persist tender content\n        await dispatch(actionForPersisteRTenderContent(id));\n\n        // Optionally, save response data to session storage if needed\n        // const response = await someAsyncOperationToGetData(); \n        // sessionStorage.setItem('key', JSON.stringify(response));\n\n        // Use a promise-based delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 5000)); \n\n        // Open the new tab after operations are complete and delay\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n\n    } catch (err) {\n        // Handle any errors that occurred during the dispatches or delay\n        console.log(\"Error occurred:\", err);\n    } finally {\n        // Always stop the loading indicator regardless of success or failure\n        setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre> <p>Troubleshooting Tips</p> <ol> <li> <p>Ensure <code>catch</code> Block is Executed: Add debug statements like <code>console.log(\"Error occurred:\", err);</code> in your <code>catch</code> block to verify that the errors are being logged. If you don't see the error log, the <code>catch</code> block may not be triggered correctly.</p> </li> <li> <p>Verify <code>await</code> Operation: Ensure that the <code>await</code> statements are correctly handling promises and that any error thrown by the <code>dispatch</code> calls or the <code>new Promise</code> is being caught.</p> </li> <li> <p>Check Asynchronous Code: Confirm that all your async functions (like <code>getCompanyPersonEmailAddress</code> and <code>actionForPersisteRTenderContent</code>) correctly return promises and throw errors properly.</p> </li> <li> <p>Check for Unhandled Errors: Make sure no errors are silently caught or not propagated. If errors are handled internally by some library or function and not re-thrown, they won't reach your <code>catch</code> block.</p> </li> </ol> <p>Example with Explicit Error Throwing</p> <p>Sometimes it\u2019s helpful to explicitly throw errors in asynchronous operations to ensure they are properly caught:</p> <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            const response = await participationStatusService.getCompanyPersonEmailAddress(id, body);\n            dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n            if (response.isSuccess) {\n                dispatch(success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data));\n                dispatch(actionForPersistTenderMailTos(response.data));\n            } else {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);  // Ensure error is thrown\n            }\n        } catch (err) {\n            dispatch(error(err.message || \"An error occurred\"));\n            throw err;  // Ensure error is re-thrown\n        }\n    };\n}\n</code></pre> <p>By ensuring that all errors are properly thrown and caught, and by checking if the catch block is being hit, you should be able to manage the new tab opening correctly based on the success or failure of your operations.</p>"},{"location":"office/ispl/important/draft/#promise","title":"Promise","text":"<p>What the Promise Does</p> <p>A <code>Promise</code> in JavaScript represents the completion (or failure) of an asynchronous operation and its resulting value. It provides a way to attach callbacks that handle the result or error when the operation is complete.</p> <p>In your function, the <code>Promise</code> is used to create a delay:</p> <pre><code>await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n</code></pre> <p>This <code>Promise</code> is created with a <code>setTimeout</code> function that waits for 5000 milliseconds (5 seconds) before calling the <code>resolve</code> function. This effectively causes the <code>await</code> to pause for 5 seconds.</p> What Happens in Your Scenario <ol> <li> <p>Both dispatch Calls:</p> <ul> <li><code>await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));</code></li> <li><code>await dispatch(actionForPersisteRTenderContent(id));</code></li> </ul> <p>These <code>dispatch</code> calls are awaited sequentially. If either of these operations fails, the <code>catch</code> block will handle the error.</p> </li> <li> <p>Delay:</p> <ul> <li><code>await new Promise(resolve =&gt; setTimeout(resolve, 5000));</code></li> </ul> <p>After the <code>dispatch</code> operations succeed, the <code>await</code> for the <code>Promise</code> will cause the function to pause for 5 seconds. During this time, the function does nothing but wait.</p> </li> <li> <p>Open New Tab:</p> <ul> <li><code>window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");</code></li> </ul> <p>After the 5-second delay (if the <code>Promise</code> resolves successfully), the new tab will be opened.</p> </li> </ol> If the dispatch Calls Are Successful Before 5 Seconds <ul> <li>If the two dispatch calls complete successfully before the 5-second delay is over, the function will still wait for the full 5 seconds due to the await on the Promise. The new tab will only be opened after this 5-second delay.</li> </ul> If the dispatch Calls Fail <ul> <li>If any of the dispatch calls throw an error, the catch block will handle the error, and the setIsLoadingOpeningMail(false) will be executed to stop the loading indicator. The new tab will not be opened because the function will exit early due to the error.</li> </ul> Summary <ul> <li>The <code>Promise</code> with <code>setTimeout</code> ensures that the code execution pauses for 5 seconds, regardless of how quickly the previous asynchronous operations complete.</li> <li>If any <code>dispatch</code> operation fails, the error is caught, and the new tab is not opened.</li> <li>If all operations succeed and the 5-second delay completes, the new tab will be opened.</li> </ul> <p>This approach provides a way to control the timing of when you open the new tab, ensuring it happens after all necessary operations and any required delays.</p>"},{"location":"office/ispl/important/draft/#why-use-try-catch-in-both-actions-and-components","title":"Why Use <code>try-catch</code> in Both Actions and Components?","text":"<p>In modern JavaScript applications, especially those using frameworks like React with Redux, you often find yourself dealing with asynchronous actions and state management. It\u2019s crucial to handle errors effectively to ensure a smooth user experience and maintainable code. This involves using <code>try-catch</code> blocks both in your action creators (for managing async operations) and in your components (for managing UI and state). Here\u2019s why handling errors at both levels is important:</p> <ol> <li> <p>Error Handling in Action Creators</p> ExampleExplanation <pre><code>export const fetchData = () =&gt; async (dispatch) =&gt; {\n    try {\n        const response = await fetch('/api/data');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE', error: error.message });\n    }\n};\n</code></pre> <p>Purpose: Action creators, especially those involving asynchronous operations (e.g., API calls), need to handle errors to ensure that they correctly manage and propagate error states.</p> <ul> <li> <p>Manage Asynchronous Operations:</p> <p>When making asynchronous requests (e.g., fetching data from an API), errors can occur due to network issues, server errors, or invalid responses. Handling these errors in the action creator ensures that the application can respond appropriately (e.g., showing an error message to the user).</p> </li> <li> <p>Dispatch Error Actions:</p> <p>If an error occurs in an action creator, it\u2019s essential to dispatch an error action to update the application state. This allows the UI to reflect the error state and provides users with feedback about what went wrong.</p> </li> <li> <p>Ensure Consistency:</p> <p>Proper error handling in actions helps maintain a consistent and predictable application state. Without it, your application might enter an inconsistent state if errors are not properly managed.</p> </li> </ul> </li> <li> <p>Error Handling in Components</p> ExampleExplanation <pre><code>const MyComponent = () =&gt; {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() =&gt; {\n        const fetchData = async () =&gt; {\n            try {\n                const response = await fetch('/api/data');\n                if (!response.ok) throw new Error('Network response was not ok');\n                const result = await response.json();\n                setData(result);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    if (!data) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n    return &lt;div&gt;Data: {data}&lt;/div&gt;;\n};\n</code></pre> <p>Purpose: Components are responsible for rendering UI and managing user interactions. Handling errors in components is crucial for providing a good user experience and ensuring that the application remains functional even when errors occur.</p> <ul> <li> <p>Display Error Messages:</p> <p>Components should handle and display error messages to users, allowing them to understand what went wrong and take corrective actions if possible.</p> </li> <li> <p>Manage Component State:</p> <p>Components need to manage their internal state based on the results of asynchronous operations. Proper error handling ensures that the UI remains consistent and provides feedback to users when errors occur.</p> </li> <li> <p>Prevent Application Crashes:</p> <p>By catching errors at the component level, you can prevent errors from propagating up and potentially crashing the entire application. This helps in maintaining stability and reliability.</p> </li> </ul> </li> </ol> Summary <ul> <li> <p>Error Handling in Actions: Ensures that asynchronous operations are managed properly, errors are dispatched to the state, and the application remains in a consistent state.</p> </li> <li> <p>Error Handling in Components: Provides a mechanism to handle and display errors to users, manage component state, and prevent crashes.</p> </li> </ul> <p>Using <code>try-catch</code> in both action creators and components ensures robust error handling throughout your application, providing a better user experience and easier maintenance.</p>"},{"location":"office/ispl/important/persist-local-storage/","title":"Local Storage","text":"ComposeEmailDrawer<pre><code>if (applicationTypeStatus !== \"newEmail\" &amp;&amp; \n    applicationTypeStatus !== \"tenderModule\") \n{\n    form.setFieldsValue({\n        subject: `${currentSelectedMailMessage.subject}`,\n    });\n}\n\n\nuseEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      console.log(\"I'm Tender Module\", persistTenderMailDataResp)\n      form.setFieldsValue({\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n])\n\n\n\n// FOr Debug value\nuseEffect(() =&gt; {\n    console.log(\"useEffect Triggered - State:\", persistTenderMailDataResp);\n}, [persistTenderMailDataResp]);\n\n// research\nuseEffect(() =&gt; {\n    if (\n      !isEmpty(idComposeEmailCead) &amp;&amp;\n      isEmpty(tenderCeadComposeEmailDetailsData)\n    ) {\n      dispatch(actionForCeadEmailCompose(idComposeEmailCead));\n    }\n    if (!isEmpty(tenderCeadComposeEmailDetailsData)) {\n      form.setFieldsValue({\n        participantTos:\n          // tenderCeadComposeEmailDetailsData?.clientEmailAddressList,\n          tenderCeadComposeEmailDetailsData?.ceaD_PRINCIPAL_EmailAddressList,\n        participantFrom: defaultEmailAddress ? defaultEmailAddress : \"\",\n        subject: tenderCeadComposeEmailDetailsData?.contract,\n        mailMessageReferenceDtos: [\n          tenderCeadComposeEmailDetailsData?.referenceDto?.referenceCode,\n        ],\n        // currentSelectedMailMessage.mailMessageReferenceDtos?.map(\n        //   (reference) =&gt; {\n        //     return reference.referenceCode;\n        //   }\n        // ),\n      });\n    }\n  }, [\n    idComposeEmailCead,\n    tenderCeadComposeEmailDetailsData,\n    applicationTypeStatus,\n  ]);\n</code></pre> <pre><code>persistTender\n- action.js\n- reducer.js\n</code></pre> dispatchActionReducerStorage Tab <pre><code>export const TenderPagination = ({\n    ...\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    return (\n        &lt;&gt;\n            &lt;div\n            style={{ background: backGroundColor }}\n            className={`reference ${\n                selectedTenderRowId === data.referenceCode &amp;&amp; \"active\"\n            }`}\n            onClick={() =&gt; {\n                rowEventhandlersTender(data.id);\n                setSelectedTenderRowId(data.referenceCode);\n                setSearchEmailTender(data.referenceCode);\n                // setSearchKeyword(data.referenceCode);\n                // searchDataAtBusinessHeaderForm.setFieldsValue({\n                //   searchDataAtBusinessHeader: data.referenceCode,\n                // });\n\n                // ADDED\n                let payload = {\n                    tos: '',\n                    refCode: data?.referenceCode ?? '',\n                    subject: data?.title ?? '',\n                }\n                dispatch(actionForPersistTenderMailData(payload));\n            }}\n            key={key}\n            &gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>import { PERSIST_DATA } from 'services/types';\nimport { persistSelectedTenderMail } from 'services/common';\n\nexport const actionForPersistTenderMailData = (data) =&gt; {\n    return async (dispatch, getState) =&gt; {\n        //  // Retrieve the updated state from Redux after the dispatch\n        // const updatedState = getState().persistTenderMailState;\n        // console.log(\"ACTION updatedState: \",updatedState)\n        console.log(\"data: \", data)\n        dispatch(persistSelectedTenderMail(PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS, data));\n    };\n};\n</code></pre> reducer.js<pre><code>import { PERSIST_DATA } from \"services/types\";\nimport { jsonParser } from \"utils/misc\";\n\nconst INITIAL_STATE = {\n    persistTenderMailDataResp: {\n        tos: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.tos || {},\n\n        refCode: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.refCode || {},\n\n        subject: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.subject || {},\n    },\n    loading: false,\n};\n\n\nexport default function persistTenderMailReducer (state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case PERSIST_DATA.PERSIST_DATA_TENDER_INIT:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS:\n            console.log(\"REDUCER: action\", action)\n            return {\n                ...state,\n                persistTenderMailDataResp: {\n                    tos: action.payload.tos,\n                    refCode: action.payload.refCode,\n                    subject: action?.payload.subject,\n                },\n                loading: false,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_FINISH:\n            return {\n                ...state,\n                loading: false,\n            };\n\n        default:\n            return {\n                ...state,\n            }\n    }\n}\n</code></pre> <p>Session Sorage Tab</p> <ul> <li>see the <code>persistTenderMailState</code> key value.</li> </ul>"},{"location":"office/ispl/important/persist-local-storage/#tos","title":"TOs","text":"action.jsreducer.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            if (response.isSuccess) {\n                dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n                );\n\n                // DISPATCHES\n                dispatch(actionForPersistTenderMailTos(response.data))\n\n            } else if (!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch(err) {\n            throw err;\n        }\n    };\n}\n</code></pre> <pre><code>case PERSIST_DATA.PERSIST_DATA_TENDER_TOS:\n    console.log(\"REDUCER action.payload: \", action)\n    return {\n        ...state,\n        persistTenderMailDataResp: {\n            ...state.persistTenderMailDataResp,\n            // tos: action.payload.tos || state.persistTenderMailDataResp.tos,\n            tos: action.payload,\n        },\n        loading: false,\n    };\n</code></pre>"},{"location":"office/ispl/important/persist-local-storage/#loading-status","title":"Loading Status","text":"<pre><code>import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'; // Import useDispatch if you are using Redux\nimport { Button } from 'antd'; // or any UI library you're using\n\nconst MyComponent = () =&gt; {\n  const [isLoadingOpeningMail, setIsLoadingOpeningMail] = useState(false);\n  const dispatch = useDispatch(); // Initialize dispatch\n  const handleTenderMail = async () =&gt; {\n    setIsLoadingOpeningMail(true); // Set loading state to true\n    try {\n      const id = getDetails?.referenceId; // Retrieve ID\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds)); // Dispatch the action\n\n      // Wait for 5 seconds\n      setTimeout(() =&gt; {\n        // Open the URL in a new tab\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n        setIsLoadingOpeningMail(false); // Reset loading state after opening the new tab\n      }, 5000);\n    } catch (err) {\n      console.log(err); // Log the error\n      setIsLoadingOpeningMail(false); // Ensure loading state is reset even if an error occurs\n    }\n  };\n\n  return (\n    &lt;Button\n      type=\"primary\"\n      style={{ marginRight: \"8px\" }}\n      onClick={handleTenderMail}\n      loading={isLoadingOpeningMail} // Show loading indicator if true\n    &gt;\n      Circular\n    &lt;/Button&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/important/sorting-table-antd/","title":"Sorting andt table","text":""},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming","title":"Defensive Programming","text":"<p>To handle the case where <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code> during sorting, you can modify the sorter function to check for <code>null</code> values and provide a fallback for comparison. Here's how you can write defensive programming for this case:</p> Normal CodeDefensive ProgrammingExplanation <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; a.partyName.localeCompare(b.partyName),\n}\n</code></pre> <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; {\n        const partyNameA = a.partyName ?? ''; // Fallback to an empty string if null or undefined\n        const partyNameB = b.partyName ?? ''; // Fallback to an empty string if null or undefined\n        return partyNameA.localeCompare(partyNameB);\n    },\n}\n</code></pre> <ul> <li>Nullish Coalescing (<code>??</code>): The <code>??</code> operator checks whether <code>partyName</code> is <code>null</code> or <code>undefined</code>. If it is, the empty string (<code>''</code>) is used as a fallback. This avoids runtime errors during the <code>localeCompare</code> operation.</li> <li>Safe Comparison: By ensuring both <code>partyNameA</code> and <code>partyNameB</code> are always strings (even if empty), we guarantee that <code>localeCompare</code> will work without throwing errors.</li> </ul> Why Use Defensive Programming Here? <ul> <li>Avoid Crashes: If <code>partyName</code> is ever <code>null</code> or <code>undefined</code>, without defensive programming, the <code>localeCompare</code> method would throw an error since it expects a string.</li> <li>Graceful Fallback: Providing a fallback value ensures that even if some data is missing, the app continues to function without issues, and the UI remains stable.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#updated-code-with-defensive-programming","title":"Updated Code with Defensive Programming:","text":"CodeExplanation <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication || ''; // Fallback to empty string if null or undefined\nconst modeB = b.modeofCommunication || ''; // Fallback to empty string if null or undefined\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ul> <li>Fallback to Empty String: When <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code>, it is replaced with an empty string (''). This prevents errors during the <code>localeCompare</code> operation.</li> <li>Handling Null Safely: Since empty strings come before any real strings in lexicographical order, this ensures that <code>null</code> or <code>undefined</code> values will be treated as smaller than any valid strings and handled correctly during sorting.</li> </ul> <p>This approach ensures that the sorting logic won't fail even when some <code>modeofCommunication</code> values are missing or <code>null</code>.</p>"},{"location":"office/ispl/important/sorting-table-antd/#optimized-code-for-sorting-with-null-values","title":"Optimized Code for Sorting with <code>null</code> Values:","text":"<p>The code provided is a good solution for handling null or undefined values during sorting. It ensures that comparisons can happen without causing runtime errors when dealing with missing data. However, we can take a step further for readability and maintainability by making the code slightly more declarative and robust.</p> <p>Here's an improved version of the sorting function:</p> CodeChanges <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nconst modeB = b.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ol> <li>Nullish Coalescing (<code>??</code>): The nullish coalescing operator (<code>??</code>) is a modern JavaScript feature that checks if a value is <code>null</code> or <code>undefined</code> and assigns a fallback (in this case, an empty string). It is more precise than the logical OR (<code>||</code>) because it only considers <code>null</code> or <code>undefined</code> as \"falsy\" while allowing values like <code>0</code> or <code>false</code> to remain unchanged.</li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming-in-react","title":"Defensive Programming in React:","text":"<p>Defensive programming is a practice that helps make your code more robust and fault-tolerant. It involves anticipating potential issues, such as null or undefined values, and writing code that handles these cases gracefully.</p> <p>While React itself is a library for building UI, defensive programming is valuable in certain scenarios within a React app:</p> <ol> <li> <p>Handling API Responses: When dealing with external APIs, it's common for data to be missing or incomplete. Defensive programming helps ensure your app won't break due to <code>null</code> or <code>undefined</code> values.</p> </li> <li> <p>Form Input Validation: When processing user input, defensive programming prevents issues from invalid or empty values that may cause your app to behave unexpectedly.</p> </li> <li> <p>Component Lifecycle and Props: React components may not always receive the expected props, especially in complex apps. Defensive programming ensures components can handle missing props or incorrect data types.</p> </li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#when-to-use-defensive-programming","title":"When to Use Defensive Programming:","text":"<ul> <li>Handling User Input: Always validate and sanitize user input to avoid issues such as empty fields or invalid values.</li> <li>Working with Asynchronous Data: If your app relies on fetching data from APIs or external sources, always check for null/undefined values in the data.</li> <li>Complex Component State: When components have a complex internal state, use defensive techniques to avoid bugs due to incorrect state updates or missing state values.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#conclusion","title":"Conclusion:","text":"<p>Defensive programming is not always necessary for every React app, but it's essential when working with dynamic data (e.g., API responses, user input) or when the app is expected to handle edge cases gracefully. It helps prevent runtime errors and ensures a smoother user experience. The above code is a good example of how to apply defensive programming in the context of sorting.</p>"},{"location":"office/ispl/important/sorting-table-antd/#reference","title":"Reference","text":"<ul> <li>Sorting</li> </ul>"},{"location":"office/ispl/important/table-rowid/","title":"rowKey","text":"<p>vdsfds</p> <pre><code>const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      setSelectedRowKeys(selectedKeys);\n    },\n    type: 'checkbox',\n};\n\n\n&lt;div className=\"organizer__table company-table-wrapper\"&gt;\n    &lt;Table\n        className=\"company-table\"\n        // rowSelection={isCircular ? {\n        //   type: 'checkbox',\n        //   ...rowSelection,\n        // } : null} \n\n        // VERY IMPORTARNT\n        rowKey=\"id\"\n\n\n        rowSelection={isCircular &amp;&amp; rowSelection}\n\n        columns={isCircular ? columnCircular : columns}\n        dataSource={\n        isCircular\n            ? referencePartyListingCircularResponse\n            : referencePartyListingResponse\n        }\n        loading={\n        isCircular\n            ? referencePartyListingCircularLoading\n            : referencePartyListingLoading\n        }\n        scroll={true}\n        pagination={false}\n        onRow={rowEventhandlers}\n        rowClassName={setTaskClassName}\n    /&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>  // const rowSelection = {\n  //   selectedRowKeys,\n  //   onChange: handleSelectionChange,\n  //   getCheckboxProps: (record) =&gt; ({\n  //     disabled: false, // Enable checkboxes\n  //   }),\n  // };\n  // console.log(\"referencePartyListingCircularResponse: \", JSON.stringify(referencePartyListingCircularResponse))\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#solution","title":"SOLUTION","text":""},{"location":"office/ispl/important/table-rowid/#1-verify-rowselection-setup","title":"1. Verify <code>rowSelection</code> Setup","text":"<p>Ensure your <code>rowSelection</code> object is correctly set up and that the <code>onChange</code> function is defined correctly. The <code>onChange</code> callback should receive <code>selectedRowKeys</code> and <code>selectedRows</code> as arguments.</p> <pre><code>const rowSelection = {\n  type: 'radio', // Ensure this matches your requirement ('radio' for single selection, 'checkbox' for multiple)\n  selectedRowKeys,\n  onChange: (selectedKeys, selectedRows) =&gt; {\n    console.log('Selected Keys:', selectedKeys); // Debug: Check what\u2019s being logged\n    console.log('Selected Rows:', selectedRows); // Debug: Check the selected rows\n    setSelectedRowKeys(selectedKeys);\n  },\n};\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#2-ensure-selectedrowkeys-state-is-managed-correctly","title":"2. Ensure <code>selectedRowKeys</code> State Is Managed Correctly","text":"<p>The <code>selectedRowKeys</code> state should be managed correctly in your component\u2019s state. Make sure it is initialized properly and updated through the <code>onChange</code> callback.</p> <pre><code>const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#3-check-table-configuration","title":"3. Check Table Configuration","text":"<p>Make sure your table component is configured to use <code>rowSelection</code> and that <code>rowKey</code> is set to ensure unique keys:</p> <pre><code>&lt;Table\n  columns={columnCircular}\n  dataSource={dataSource}\n  rowSelection={rowSelection}\n  rowKey=\"id\" // Ensure this key matches the key field in your data\n/&gt;\n</code></pre>"},{"location":"office/primesales/intro/","title":"Intro","text":""},{"location":"office/primesales/intro/#intro","title":"Intro","text":""},{"location":"office/primesales/intro/#setup","title":"Setup","text":"<p>Success</p> <pre><code># Installing PHP\nsudo apt install php-cli\n\nsudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-xmlrpc php8.2-zip\n\n\n# Installing Composer\nsudo apt install composer\n\n#\ncomposer global require laravel/installer\n</code></pre> <p>To Check PHP Version in Ubutnu</p> <pre><code>#1. Command Line Interface (CLI):\nphp --version\n\n# using the dpkg command:\ndpkg -l | grep php\n\n#2. Using Laravel Artisan Command:\nphp artisan --version\n</code></pre> <p>If you prefer not to use the command line interface, you can check the PHP version being used in your Laravel project by examining the <code>composer.json</code> file. Laravel specifies the PHP version requirement in this file.</p> <ol> <li>Navigate to the root directory of your Laravel project.</li> <li>Open the <code>composer.json</code> file in a text editor.</li> <li>Look for the <code>require</code> section. Within this section, you should find an entry for \"php\" along with a version constraint. For example:</li> </ol> composer.json<pre><code>\"require\": {\n    \"php\": \"^7.3\",\n    // other dependencies...\n}\n</code></pre> <p>In this example, Laravel requires PHP version <code>7.3</code> or higher.</p> PHP Version <code>major</code> &amp; <code>minor</code> <p>In PHP, the versioning convention is similar to many other programming languages and software systems. PHP version numbers typically consist of three numbers separated by periods, following a pattern similar to Semantic Versioning (SemVer).</p> <p>Major version:</p> <p>The first number represents the major version. When the major version number changes, it signifies significant updates that may not be backward compatible with previous versions. Major updates often introduce new features, architectural changes, or major enhancements.</p> <p>Minor version:</p> <p>The second number represents the minor version. A change in the minor version number usually indicates smaller updates or improvements compared to major updates. Minor updates may include new features or improvements while maintaining backward compatibility within the same major version.</p> <p>Patch version:</p> <p>The third number represents the patch version. Changes in the patch version number typically denote bug fixes, security patches, or minor updates that do not introduce new features and maintain backward compatibility within the same major and minor version. For example:</p> <ul> <li>In PHP version <code>7.2.0</code>, <code>7</code> is the major version, 2 is the minor version, and 0 is the patch version.</li> <li>In PHP version <code>8.0.1</code>, <code>8</code> is the major version, 0 is the minor version, and 1 is the patch version.</li> </ul> <p>When specifying version constraints in PHP projects using tools like Composer, version ranges and constraints are often defined in the composer.json file. The caret (^) symbol is commonly used to specify a range of compatible versions within the same major version, similar to other package management systems. For example, \"<code>^7.2</code>\" would include all versions from PHP <code>7.2</code> up to, but not including, PHP <code>8.0</code>.</p> <p>--</p>"},{"location":"office/primesales/intro/#url","title":"URL","text":"<p>webcrm</p> <p>username: sampurna password: primesales360##</p>"},{"location":"office/primesales/intro/#reference","title":"Reference","text":"<p>PHP Version History</p> <ul> <li>Brief Timeline of PHP Versions</li> <li>PHP Versions</li> <li>Zend PHP Versions</li> <li>educba PHP Versions</li> </ul> <p>Installation</p> <ul> <li>How to install and configure PHP</li> </ul> <p>Composer</p> <ul> <li>composer official</li> </ul> <p>Online</p> <ul> <li>Laravel Key Generator</li> </ul>"},{"location":"office/redux/codesnap/","title":"Codesnap","text":"<p>c0denap</p>"},{"location":"office/redux/hidden/","title":"Hidden","text":"Daily DiayMail <pre><code>services/reudx/dailyDiary/action.js\n\n// updated \nexport const updateDailyDiaryReducer = (GET_PAGINATION_DAILY_DIARY_UPDATE, data) =&gt; {\n    return {\n        type:  DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE, \n        payload: data,\n    }\n}\n\n// status\nexport const changeDailyDiaryStatus = (data) =&gt; {\n    return {\n        type: DAILY_DAIRY.GET_PAGIGATION_DAILY_DIARY_STATUS,\n        payload: data,\n    }\n}\n</code></pre> <pre><code>import { updateDailyDiaryReducer } from \"services/redux/dailyDairy/action\";\n\nexport const toDoMarkAsComplete = (id) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(TODO_TYPES.TODO_COMPLETE));\n        const response = await toDoListService.toDoMarkAsComplete(id);\n        dispatch(finish(TODO_TYPES.TODO_COMPLETE));\n\n        if (response.isSuccess) {\n            dispatch(success(TODO_TYPES.TODO_COMPLETE, response.data));\n            // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n            let status = response.data.markItOff ? \"complete\" : \"incomplete\";\n            message.success(`Todo status updated successfully`);\n\n            // added\n            // console.log(\"ACTION response: \", response.data);\n\n            // ****************************************************************\n            dispatch(updateDailyDiaryReducer(DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE, response.data));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>// update in mail\ncase REFERENCE__TYPES.GET_CIRCULAR_REFERENCE_TEMPLATE_UPDATE:\n    let updatedTemplateMail = state?.singleCircularReferenceTemplateResponse &amp;&amp; \n        (state.singleCircularReferenceTemplateResponse.id === action.payload.id\n        ? { ...action.payload }\n        : state.singleCircularReferenceTemplateResponse\n        )\n\n    return {\n        ...state,\n        singleCircularReferenceTemplateLoading: false,\n        singleCircularReferenceTemplateResponse: updatedTemplateMail,\n    }\n\n\ntry {\n    if (data) {\n        dispatch(actionForAddUpdateReferenceTemplate(updateApiData));\n        if (origin === \"mail\") {\n            let apiPayload = {\n                ...updateApiData,\n                id: updateApiData?.referenceTemplateId,\n            }\n\n            delete apiData?.referenceId;\n            delete apiData?.referenceTemplateId;\n\n            dispatch(actionForUpdateTemplate(apiPayload))\n        } else {\n            dispatch(actionForGetReferenceTemplateGetDetailsById(referenceId));\n        }\n    } else {\n        dispatch(actionForAddUpdateReferenceTemplate(apiData));\n    }\n} catch(err) {\n    console.log(\"Error: \", err)\n}\n</code></pre>"},{"location":"office/redux/hidden/#heres-a-breakdown-of-the-category-and-type-of-redux-pattern","title":"Here's a breakdown of the category and type of Redux pattern:","text":"<ol> <li>Asynchronous Actions (Async Actions)</li> <li>Thunk Middleware</li> <li>Action Chaining (Dispatching Multiple Actions)</li> </ol> Category Breakdown <ul> <li>Middleware-enhanced Redux: This falls under Redux with middleware enhancement because of the use of <code>redux-thunk</code>.</li> <li>Async Workflow: This approach is used when handling asynchronous workflows in your Redux actions.</li> <li>Action Chaining: It uses chained actions where you dispatch multiple actions from a single action creator, often in response to an async operation.</li> </ul>"},{"location":"office/redux/intro/","title":"Intro","text":"<p>intro</p>"},{"location":"research/cancel-axios/","title":"Cancel Axios","text":"ExmapleScenarioExplanation <pre><code>import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst MyComponent = () =&gt; {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() =&gt; {\n        // Create a cancel token source\n        const source = axios.CancelToken.source();\n\n        const fetchData = async () =&gt; {\n            try {\n                const response = await axios.get(\"https://api.example.com/data\", {\n                    cancelToken: source.token,\n                });\n                setData(response.data);\n            } catch (err) {\n                if (axios.isCancel(err)) {\n                    console.log(\"Request canceled\", err.message);\n                } else {\n                    setError(err);\n                }\n            }\n        };\n\n        fetchData();\n\n        // Cleanup function to cancel the request\n        return () =&gt; {\n            source.cancel(\"Operation canceled by the user.\");\n        };\n    }, []);\n\n    return (\n        &lt;div&gt;\n            {error &amp;&amp; &lt;p&gt;Error: {error.message}&lt;/p&gt;}\n            {data ? &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt; : &lt;p&gt;Loading...&lt;/p&gt;}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre> <p>To cancel an Axios HTTP request in a cleanup function, you can use the CancelToken feature provided by Axios. This is useful in React components, especially when making requests in effects. Here's a step-by-step guide:</p> <ol> <li>Create a Cancel Token: Use <code>axios.CancelToken.source()</code> to create a cancel token source.</li> <li>Make the request with the token: Pass the token to your Axios request.</li> <li>Cancel the request in cleanup: In the cleanup function of your <code>useEffect</code>, call the <code>cancel</code> method on the cancel token.</li> </ol> <ul> <li>Cancel Token Creation: <code>const source = axios.CancelToken.source();</code> creates a new cancel token.</li> <li>Making the Request: The cancel token is passed to the request via <code>cancelToken: source.token</code>.</li> <li>Cleanup: In the cleanup function returned from <code>useEffect</code>, you call <code>source.cancel(...)</code> to cancel the request if the component unmounts before the request completes.</li> </ul> <p>This approach helps avoid potential memory leaks and unnecessary state updates if the component is unmounted during the request.</p>"},{"location":"research/cancel-axios/#reducerjs","title":"<code>reducer.js</code>","text":"<p>can we use <code>reducer.js</code> without using redux</p> <p>Yes, you can use a reducer pattern without Redux. The reducer concept is a fundamental part of state management in JavaScript, often associated with the \"Reducer\" pattern used in libraries like Redux. However, you can implement similar functionality directly in your components or custom hooks.</p> <p>Using Reducers Without Redux</p> <p>You can utilize the <code>useReducer</code> hook provided by React to manage complex state logic without Redux. Here's a simple example:</p> <ol> <li>Basic Example of useReducer</li> </ol> ExampleExplanationAdvantages of Using <code>useReducer</code> <pre><code>import React, { useReducer } from \"react\";\n\n// Define the initial state\nconst initialState = {\n  loading: false,\n  data: null,\n  error: null,\n};\n\n// Define the reducer function\nconst reducer = (state, action) =&gt; {\n  switch (action.type) {\n    case \"FETCH_DATA_REQUEST\":\n      return { ...state, loading: true, error: null };\n    case \"FETCH_DATA_SUCCESS\":\n      return { ...state, loading: false, data: action.payload };\n    case \"FETCH_DATA_FAILURE\":\n      return { ...state, loading: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst MyComponent = () =&gt; {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchData = async () =&gt; {\n    dispatch({ type: \"FETCH_DATA_REQUEST\" });\n    try {\n      const response = await fetch(\"https://api.example.com/data\");\n      const data = await response.json();\n      dispatch({ type: \"FETCH_DATA_SUCCESS\", payload: data });\n    } catch (error) {\n      dispatch({ type: \"FETCH_DATA_FAILURE\", payload: error.message });\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={fetchData}&gt;Fetch Data&lt;/button&gt;\n\n      {state.loading &amp;&amp; &lt;p&gt;Loading...&lt;/p&gt;}\n      {state.error &amp;&amp; &lt;p&gt;Error: {state.error}&lt;/p&gt;}\n      {state.data &amp;&amp; &lt;pre&gt;{JSON.stringify(state.data, null, 2)}&lt;/pre&gt;}\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre> <ul> <li>Initial State: You define an initial state object to represent your component's state.</li> <li>Reducer Function: The <code>reducer</code> function processes actions and returns a new state based on the action type.</li> <li>useReducer Hook: The <code>useReducer</code> hook is used to initialize state and provide a dispatch function to send actions.</li> <li>Fetch Logic: The <code>fetchData</code> function handles the API call and dispatches actions based on the result.</li> </ul> <ul> <li>State Management: It provides a way to manage complex state logic without external libraries.</li> <li>Clear Structure: It organizes state transitions clearly with a central reducer function.</li> <li>Component Scope: The state is scoped to the component, avoiding potential conflicts with other components.</li> </ul> Summary <p>You can absolutely use a reducer pattern with <code>useReducer</code> in React without Redux. This approach is particularly useful for managing local state in a component, especially when dealing with complex state transitions or multiple related state variables.</p>"},{"location":"research/cancel-axios/#reducer-pattern","title":"reducer pattern","text":"<p>The reducer pattern is a design pattern commonly used in state management to handle state changes in a predictable way. It is particularly well-known in libraries like Redux but can be applied in various contexts, including React\u2019s <code>useReducer</code> hook. Here\u2019s a breakdown of the reducer pattern:</p> Key Concepts of the Reducer Pattern <ol> <li> <p>Pure Function:</p> <ul> <li>A reducer is a pure function that takes the current state and an action as arguments and returns a new state.</li> <li>It does not mutate the existing state; instead, it creates a new state object based on the provided action.</li> </ul> </li> <li> <p>State Management:</p> <ul> <li>The reducer handles the state transitions of an application or component based on the actions dispatched to it.</li> <li>Each action represents a specific type of change (e.g., fetching data, updating values, handling errors).</li> </ul> </li> <li> <p>Actions:</p> <ul> <li>Actions are plain JavaScript objects that describe what happened in the application. Each action typically has a <code>type</code> property (a string) and may have a <code>payload</code> containing additional data.</li> </ul> </li> <li> <p>Initial State:</p> <ul> <li>The reducer starts with an initial state that defines the starting conditions for the application or component.</li> </ul> </li> </ol> Structure of a Reducer <p>A typical reducer looks like this:</p> <pre><code>const initialState = {\n    count: 0,\n    loading: false,\n    error: null,\n};\n\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case 'INCREMENT':\n            return { ...state, count: state.count + 1 };\n        case 'DECREMENT':\n            return { ...state, count: state.count - 1 };\n        case 'FETCH_REQUEST':\n            return { ...state, loading: true, error: null };\n        case 'FETCH_SUCCESS':\n            return { ...state, loading: false, data: action.payload };\n        case 'FETCH_FAILURE':\n            return { ...state, loading: false, error: action.payload };\n        default:\n            return state;\n    }\n};\n</code></pre> <p>Example of Using a Reducer</p> ExampleAdvantages of the Reducer Pattern <p>Here\u2019s an example using the <code>useReducer</code> hook in a React component:</p> <pre><code>import React, { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"INCREMENT\":\n            return { ...state, count: state.count + 1 };\n        case \"DECREMENT\":\n            return { ...state, count: state.count - 1 };\n        default:\n            return state;\n    }\n};\n\nconst Counter = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{state.count}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; dispatch({ type: \"INCREMENT\" })}&gt;Increment&lt;/button&gt;\n            &lt;button onClick={() =&gt; dispatch({ type: \"DECREMENT\" })}&gt;Decrement&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>Predictability: Since the reducer is a pure function, given the same input (state and action), it will always produce the same output. This makes debugging and testing easier.</li> <li>Separation of Concerns: The reducer separates the logic for updating the state from the UI components, improving code organization and maintainability.</li> <li>Centralized State Management: By using a reducer, you centralize the state management logic, making it easier to understand and modify.</li> </ul> Conclusion <p>The reducer pattern is a powerful tool for managing state in applications, especially when state logic is complex. It promotes a clear and predictable way to handle state transitions and is widely used in modern JavaScript frameworks and libraries.</p>"},{"location":"research/docker/","title":"Docker","text":""},{"location":"research/docker/#installation","title":"Installation","text":"<p>The core of Docker is made of the Docker engine, a single-host software daemon that allows you to create and manage containers. Before diving into using Docker, you need to install the Docker engine on a host, either your desktop, laptop, or a server.</p> <p>A <code>Dockerfile</code> is a manifest that describes how to build a container image. This is a core concept in Docker.</p> Abstract DockerfileTheoryPractical <pre><code># Use an existing image as a base\nFROM alpine:latest\n\n# Run a command in the container\nCMD [\"echo\", \"Hello, Jenkins!\"]\n</code></pre> <p><code>Docker</code>, <code>Docker Compose</code>, and <code>Docker Swarm</code> are all related tools in the Docker ecosystem, but they serve different purposes:</p> <ol> <li> <p>Docker:</p> <p>Docker is a platform and tool for building, distributing, and running <code>containers</code>. Containers allow developers to package an application with all of its dependencies into a standardized unit for software development. Docker provides the tools needed to create and manage these containers efficiently. With Docker, you can build container images, run containers from those images, and manage container lifecycles.</p> </li> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for defining and running <code>multi-container</code> Docker applications. It allows you to use a YAML file to configure the services that make up your application, including their dependencies, networking, and volumes. Docker Compose then takes care of starting, stopping, and managing all of these containers as a single application stack. It simplifies the process of managing complex applications composed of multiple interconnected containers.</p> </li> <li> <p>Docker Swarm:</p> <p>Docker Swarm is Docker's native clustering and <code>orchestration tool</code>. It allows you to create and manage a cluster of Docker nodes, turning them into a single virtual Docker engine. Docker Swarm enables you to deploy and manage multi-container applications across multiple hosts, providing features such as service scaling, rolling updates, and high availability. It simplifies the management of containerized applications at scale and provides built-in features for load balancing and service discovery.</p> </li> </ol> <p>In summary:</p> <ul> <li><code>Docker</code>: The core platform for building, distributing, and running containers.</li> <li><code>Docker Compose</code>: A tool for defining and managing multi-container applications using a YAML configuration file.</li> <li><code>Docker Swarm</code>: Docker's native clustering and orchestration tool for managing multi-container applications across multiple hosts.</li> </ul> <pre><code>$ sudo apt-get install &lt;docker.deb&gt;\n</code></pre> <p>Commands</p> bash<pre><code># List containers:\n$ docker containers ls\n\n# List only running container: (ps-process status)\n$ docker ps -a\n\n# List images:\n$ docker images\n</code></pre> <p>Restart Docker</p> bash<pre><code># To restart a Docker container based on an image\n\n# 1.Identify the Container:\n$ docker ps\n\n# 2. Restart the Container:\n$ docker restart &lt;container_id_or_name&gt;\n\n# 3. Verify Restart:\n$ docker ps\n</code></pre>"},{"location":"research/docker/#clarifying-docker-terms","title":"Clarifying Docker terms","text":"Abstract <p>Docker Registry</p> <p>A Docker Registry is a place where Docker images can be stored in order to be publicly or privately found, accessed, and used by software developers worldwide for quickly crafting fresh and composite applications without any risks. Because all the stored images will have gone through multiple validations, verifications, and refinements, the quality of those images is really high. You can dispatch your Docker image to the registry so that it is registered and deposited using the <code>docker push</code> subcommand. You can download Docker images from the registry using the <code>docker pull</code> subcommand.</p> <p>Docker Registry could be hosted by a third party as a public or private registry, like one of the following registries:</p> <ul> <li>Docker Hub</li> <li>Quay</li> <li>Google Container Registry</li> <li>AWS Container Registry</li> </ul> <p>Every institution, innovator, and individual can have their own Docker Registry to stock up their images for internal and/or external access and usage.</p> <ul> <li>Learning Docker Second Edition by Jeeva S. Chelladhurai, pg:31</li> </ul>"},{"location":"research/docker/#nginx-engine-x-web-server","title":"nginx (Engine X) <code>web server</code>","text":"Abstract TheoryPractical bash<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p><code>/etc/nginx/nginx.conf</code></p> <p>The server_name directive in Nginx should specify only the domain name or names without the protocol (e.g., <code>http://</code>). Therefore, you need to modify your configuration like this:</p> nginx<pre><code>http {\n    server {\n        listen 9000;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n        # Jenkins running on port 9000\n        proxy_pass http://10.114.0.175:9000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 8080;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> <p>After making this change, you should test the configuration to ensure there are no syntax errors:</p> bash<pre><code>sudo nginx -t\n</code></pre> <p>If the test is successful, reload Nginx to apply the changes:</p> bash<pre><code>sudo systemctl reload nginx\n</code></pre> <p>This should resolve the issue, and Nginx should be able to start without errors.</p> Using Paths to Differentiate Services <p>If Hostnames Are Not Available</p> <p>If you cannot use different hostnames, you will need to use different ports or subpaths as described in previous responses.</p> <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location /jenkins/ {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/jenkins(.*) $1 break;\n        }\n\n        location /portainer/ {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/portainer(.*) $1 break;\n        }\n    }\n}\n</code></pre> <p>Explanation</p> <ul> <li>Single Server Block: Only one server block is needed, listening on port 80.</li> <li>Path-Based Routing: Requests to /jenkins are routed to Jenkins running on port 9000, and requests to /portainer are routed to Portainer running on port 8080.</li> <li>Rewrite Directive: The rewrite directive ensures that the backend service receives the correct path.</li> </ul> <p>Access URLs</p> <ul> <li>Jenkins: <code>http://&lt;your-server-ip&gt;/jenkins</code></li> <li>Portainer: <code>http://&lt;your-server-ip&gt;/portainer</code></li> </ul> same port <p>To serve both Jenkins and Portainer on the same port (port 80) without using subpaths like /jenkins and /portainer, you need to use different hostnames. Each service will be accessible via a different domain or subdomain. This approach requires DNS configuration to resolve different hostnames to your server's IP address.</p> <pre><code>http {\n    server {\n        listen 80;\n        server_name jenkins.example.com;\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name portainer.example.com;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> Different Port <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 81;\n        # No server_name specified\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"research/docker/#docker-images","title":"Docker Images","text":"Abstract TheoryPracticalDangling images bash<pre><code># List Docker images\n$ docker images\n\n# Remove Docker image by ID\n$ docker rmi &lt;image_id&gt;\n\n# Remove Docker image by repository and tag\n$ docker rmi &lt;repository_name&gt;:&lt;tag&gt;\n\n# Forcefully remove images\n$ docker rmi -f &lt;image_id&gt;\n# or\n$ docker rmi --force &lt;image_id&gt;\n</code></pre> <p>Create Docker Image</p> <p>When working with Docker, you typically create an image first and then use that image to create containers.</p> <ol> <li> <p>Create Image:</p> <p>An image is like a template that contains the filesystem and configuration needed to run a container. You define an image using a <code>Dockerfile</code>, which specifies the instructions to build the image. You use the docker build command to create an image from a Dockerfile.</p> </li> <li> <p>Create Container:</p> <p>Once you have an image, you can create one or more containers from it. A container is a running instance of an image. You use the docker run command to create and start a container from an image. Each container runs in isolation from other containers but can communicate with them if configured to do so.</p> </li> </ol> <p>Here's a basic sequence of commands:</p> <ol> <li>Create the image:</li> </ol> <pre><code>$ docker build -t my-image .\n</code></pre> <ol> <li>Run a container based on that image:</li> </ol> <pre><code>$ docker run --name my-container my-image\n</code></pre> <p>So, to summarize, first, you build an image using a <code>Dockerfile</code>, then you create and run containers based on that image.</p> <p>Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space.</p> <p>Dangling images are created while creating new build of a image without renaming/updating the version of the image. So that the old image are converted into dangling images.</p> <pre><code># List Dangling images\n$ docker images -f dangling=true\n\n# Remove Dangling images\n$ docker rmi $(docker images -f dangling=true -q)\n\n##\n# To remove all dangling images.\n$ docker image prune\n\n# To remove all images which aren't used by existing containers, use the -a flag:\n$ docker image prune -a\n\n# To remove all stopped containers.\n$ docker container prune\n\n# To removes stopped containers older than 24 hours:\n$ docker container prune --filter \"until=24h\"\n\n# To remove all volumes not used by at least one container.\n$ docker volume prune\n\n# To remove all networks not used by at least one container.\n$ docker network prune\n\n# The docker system prune command is a shortcut that prunes images, containers, and networks.\n# Volumes aren't pruned by default, and you must specify the --volumes flag for docker system prune to prune volumes.\n\n# To prune images, containers and network\n$ docker system prune\n\n# To also prune volumes, add the --volumes flag:\n$ docker system prune --volumes\n</code></pre> <ul> <li>Remove unnecessary images</li> <li>Docker container and image prune</li> </ul>"},{"location":"research/docker/#docker-container","title":"Docker Container","text":"Abstract TheoryPracticalAdditional <p>Create Docker Container</p> <p>example of creating a new container:</p> bash<pre><code># syntax\n# 1. Run a new container with the new image:\n$ docker run --name &lt;container_name&gt; -d &lt;new_image_name&gt;\n\n# 2. Stop the existing container:\n$ docker stop &lt;container_name_or_id&gt;\n\n# 3. Remove the existing container (optional):\n$ docker rm &lt;container_name_or_id&gt;\n\n# example\n$ docker run --name my-container -d my-image\n</code></pre> <ul> <li><code>--name my-container</code> sets the name of the container to my-container.</li> <li><code>-d</code> runs the container in detached mode (in the background).</li> <li><code>my-image</code> is the name of the image from which to create the container.</li> </ul> <p>This command will create a new container using the specified image. If the image is not available locally, Docker will automatically pull it from a registry like Docker Hub before creating the container.</p> <p>After running the command, you can use <code>docker ps</code> to see the list of running containers.</p> <p>Check the IP Address of the Docker Container</p> bash<pre><code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n</code></pre> <p>Then try accessing the site using <code>curl</code> with the <code>IP address</code> and the <code>mapped port</code> (<code>8082</code> in this case).</p> <p>if you want to check if a container named my_container is using any volumes:</p> bash<pre><code>docker inspect &lt;my_container&gt; | grep Mounts\n</code></pre> bash<pre><code>docker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\njenkins/jenkins:lts\n\ndocker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nmy-jenkins\n</code></pre>"},{"location":"research/docker/#docker-volume","title":"Docker Volume","text":"Abstract TheoryPracticalAdditional bash<pre><code># List Volumes in Use:\n$ docker volume ls\n\n# list all containers to find out which volumes are in use:\n$ docker ps -a\n\n# delete the volumes\n$ docker volume rm &lt;volume_name_or_id&gt;\n\n# delete volumes along with the containers that use them\n$ docker rm -v &lt;container_name_or_id&gt;\n</code></pre> <p>Recap Docker Volume</p> <p>In a previous chapter, we used the \"<code>-v</code>\" option to a \"<code>docker run</code>\" command to declare that we wanted to use a volume with a container. The abbreviated \"<code>-v</code>\" option is exactly the same as the \"<code>--volume</code>\" option. However, the newer and preferred way to mount volumes in a container is the \"<code>--mount</code>\" option. Docker recommends that you use \"<code>--mount</code>\" instead of \"<code>-v</code>\" or \"<code>--volume</code>\", as their research has shown \"<code>--mount</code>\" is easier to use. However, if you are an old Docker user like myself, then you're probably accustomed to using and seeing \"<code>-v</code>\". In any case, either works, but we will focus on \"<code>--mount</code>\", as it\u2019s the recommended way.</p> <pre><code>$ docker run -d --name withvolume --mount source=mydata1,destination=/root/volume nginx\n\n#\ndocker run -d --name withvolume2 --mount src=mydata1,dst=/root/volume nginx\n\n$ docker run -dit --name ephemeral --mount type=tmpfs,destination=/root/volume nginx\n</code></pre> <ul> <li>Docker: A project based learning</li> <li>Publish Docker image to Dockerhub using Jenkins Pipeline</li> <li>Build a Docker Jenkins Pipeline to Implement CI/CD Workflow</li> </ul>"},{"location":"research/docker/#portainer","title":"Portainer","text":"Abstract TheoryPracticalAdditional <p>Docker pull Command</p> bash<pre><code>$ docker pull portainer/portainer-ce\n</code></pre> <p>After installing Portainer in Docker on a Linux server, you can run it by executing the Docker run command with appropriate options. Here's how you can do it:</p> <ol> <li> <p>Open a Terminal:</p> <p>Log in to your Linux server via SSH or open a terminal window if you're working directly on the server.</p> </li> <li> <p>Run Portainer Container:</p> <p>Use the following command to start the Portainer container:</p> bash<pre><code>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 9000:9000</code>: Map port 9000 on the host to port 9000 inside the container. This allows you to access Portainer's web interface on port 9000 of your server.</p> </li> <li> <p><code>--name portainer</code>: Assign the name \"portainer\" to the container.</p> </li> <li> <p><code>--restart always</code>: Ensure that the container restarts automatically if it stops.</p> </li> <li> <p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: Mount the Docker socket inside the container, allowing Portainer to communicate with the Docker daemon.</p> </li> </ul> </li> <li> <p>Verify Portainer Container:</p> <p>You can verify that the Portainer container is running by executing the following command:</p> bash<pre><code>$ sudo docker ps\n</code></pre> <p>This command will list all running containers, and you should see an entry for the Portainer container.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:9000\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Set up Portainer:</p> <p>When you access the Portainer web interface for the first time, you'll be prompted to set up an admin user and password. Follow the on-screen instructions to complete the setup process.</p> </li> </ol> <p>That's it! You have now successfully run Portainer in Docker on your Linux server, and you can start managing your Docker environment through the Portainer web interface.</p> <p>Portainer with Docker</p> <p>To use Docker Swarm mode with Portainer, you need to set up a Docker Swarm cluster and then deploy Portainer as a service within the Swarm. Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Initialize Docker Swarm:</p> <p>If you haven't already initialized Docker Swarm on your Docker host, you can do so by running the following command in your terminal:</p> bash<pre><code>$ docker swarm init\n</code></pre> <p>This command initializes Docker Swarm mode on the current Docker host and creates a Swarm manager node.</p> </li> <li> <p>Deploy Portainer as a Service:</p> <p>Once Docker Swarm is initialized, you can deploy Portainer as a service within the Swarm. Run the following command to create a Portainer service:</p> bash<pre><code>docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \\\nportainer/portainer-ce\n</code></pre> <p>This command creates a new service named \"portainer\" using the Portainer Community Edition (CE) image. It publishes Portainer's web interface on port 9000 and mounts the Docker socket from the host into the Portainer container, allowing Portainer to interact with the Docker API.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer service is deployed, you can access the Portainer web interface by navigating to http://:9000 in your web browser. If you're running Portainer locally, you can use http://localhost:9000.</p> </li> <li> <p>Set Up Portainer:</p> <p>Follow the on-screen instructions to complete the initial setup of Portainer. You'll be prompted to create an admin user, choose a password, and specify whether you want to manage the local Docker environment or a remote Docker Swarm cluster.</p> </li> <li> <p>Connect Portainer to Docker Swarm:</p> <p>If you're managing a remote Docker Swarm cluster, you'll need to specify the Swarm endpoint URL and optionally provide authentication credentials. This allows Portainer to communicate with the Docker Swarm API and manage services, nodes, and other resources within the cluster.</p> </li> <li> <p>Start Managing Services:</p> <p>Once connected, you can start managing Docker Swarm services, nodes, stacks, and other resources using the Portainer web interface. You can create, scale, update, and monitor services, deploy applications using stacks, and perform various administrative tasks.</p> </li> </ol> <p>By following these steps, you can set up and use Docker Swarm mode with Portainer to manage your containerized applications at scale. Make sure to consult the official Portainer documentation for more detailed instructions and best practices.</p> <pre><code>server {\n    listen 80;\n    server_name generic.com.np;\n\n    location / {\n        proxy_pass http://&lt;container-ip&gt;:&lt;container-port&gt;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"research/docker/#jenkins","title":"Jenkins","text":"Abstract TheoryPractical <p>Docker Pull Command</p> bash<pre><code>$ docker pull jenkins/jenkins\n</code></pre> <p>After pulling the Docker Jenkins image onto your Linux server, you can start using Jenkins by running the container and accessing its web interface. Here's how you can do it:</p> <ol> <li> <p>Run Jenkins Container:</p> <p>Use the following command to start the Jenkins container:</p> title<pre><code>docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 8080:8080 -p 50000:50000</code>: Map port 8080 on the host to port 8080 inside the container for accessing Jenkins web interface, and map port 50000 for Jenkins agent communication.</p> </li> <li> <p><code>--name jenkins</code>: Assign the name \"jenkins\" to the container.</p> </li> <li> <p><code>jenkins/jenkins:lts</code>: This specifies the Jenkins Docker image to use. In this case, we're using the LTS (Long-Term Support) version.</p> </li> </ul> </li> <li> <p>Access Jenkins Web Interface:</p> <p>Once the Jenkins container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:8080\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Unlock Jenkins:</p> <p>When you access the Jenkins web interface for the first time, you'll be prompted to unlock Jenkins. To do this, you need to retrieve the initial admin password from the Jenkins container logs. Run the following command to view the logs:</p> <pre><code>docker logs jenkins\n</code></pre> <p>Look for the line containing \"Please use the following password to proceed to installation:\", and copy the provided password.</p> </li> <li> <p>Complete Jenkins Setup:</p> <p>Paste the copied password into the Jenkins web interface and click \"Continue\". Follow the on-screen instructions to complete the setup process, including installing recommended plugins.</p> </li> <li> <p>Create Admin User:</p> <p>After plugin installation, you'll be prompted to create an admin user. Provide the required information to create the admin user.</p> </li> <li> <p>Start Using Jenkins:</p> <p>Once you've completed the setup process, you can start using Jenkins to create and manage jobs, automate tasks, and perform continuous integration and continuous delivery (CI/CD) pipelines.</p> </li> </ol> <p>That's it! You've successfully pulled and started the Jenkins Docker container on your Linux server, and you can now begin configuring Jenkins for your development and deployment needs.</p>"},{"location":"research/docker/#docker-hub","title":"Docker Hub","text":"<p><code>Docker Hub</code> is to Docker what <code>GitHub</code> is to source code.</p> <p>You can think of Docker Hub as being like GitHub.</p> <p>It allows anyone to host its image online and share it publicly or keep it private. To share an image on Docker Hub, you need to do the following:</p> <ul> <li>Create an account on Docker Hub.</li> <li>Log in to the hub on your Docker host.</li> <li>Push your image.</li> </ul> <pre><code>$ docker login\nUsername: how2dock\nPassword:\nEmail: how2dock@gmail.com\nLogin Succeeded\n</code></pre> <ul> <li>Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</li> </ul>"},{"location":"research/docker/#docker-networking","title":"Docker Networking","text":"<p>As you build your distributed application, services that compose it will need to be able to communicate with each other. These services, running in containers, might be on a single host or on multiple hosts and even across data centers. Therefore container networking is a critical enabler of any Docker-based distributed application.</p>"},{"location":"research/docker/#downloading-the-first-docker-image","title":"Downloading the first Docker image","text":"<p>The Docker Registry is an application repository that hosts various applications, ranging from basic Linux images to advanced applications. The <code>docker pull</code> subcommand is used to download any number of images from the registry.</p> <pre><code>$ sudo docker pull hello-world\n</code></pre> <p>Once the images have been downloaded, they can be verified using the <code>docker images</code> subcommand, as shown here:</p> <pre><code>$ sudo docker images\n</code></pre>"},{"location":"research/docker/#running-the-first-docker-container","title":"Running the first Docker container","text":"<pre><code>$ docker run hello-world\n</code></pre> <p>Cool, isn't it? You have set up your first Docker container in no time. In the preceding example, the <code>docker run</code> subcommand has been used to create a container from the hello-world image.</p>"},{"location":"research/docker/#troubleshooting-docker-containers-or-sudo-service","title":"Troubleshooting Docker containers <code>or</code> sudo service","text":"<p>You can <code>stop</code>, <code>start</code>, and <code>restart</code> the service. For example, to restart it:</p> <pre><code>$ sudo service docker status\n$ sudo service docker restart\n</code></pre>"},{"location":"research/docker/#certbot-in-linux","title":"certbot in linux","text":"Abstract InstallationSSL Certificate with Certbot <pre><code># There is two ways you can download certbot\n# 1. with PIP\n# 2. with snapd\n\n# step1: Install snapd:\nsudo apt install snapd\n\n# step2: Ensure you have the latest snapd version installed:\nsudo snap install core; sudo snap refresh coreCopied!\n\n# step3: Install Certbot with snapd:\nsudo snap install --classic certbot\n\n# step4: Create a symlink to ensure Certbot runs:\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n</code></pre> <p>Create an SSL Certificate with Certbot</p> <pre><code># step1: Choose the best option for your needs.\n# Create SSL certs for all domains and configure redirects in the web server:\nsudo certbot --apache\nsudo certbot --nginx\n\n# Create SSL certs for a specified domain (recommended if you\u2019re using your system hostname):\nsudo certbot --apache -d example.com -d www.example.com\n\n# Only install SSL certs:\nsudo certbot certonly --apache\nsudo certbot certonly --nginx\n\n\n# step2: Enter an email address for renewal and security notices.\n# step3: Agree to the terms of service.\n# step4: Specify whether to receive emails from EFF.\n# step5: If prompted, choose whether to redirect HTTP traffic to HTTPS \u2013 1 (no redirect, no further changes to the server) or # 2 (redirect all HTTP requests to HTTPS).\n</code></pre> <ul> <li>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</li> <li>Install Let\u2019s Encrypt SSL Certificates using Certbot</li> </ul> <p>Solved</p> <ul> <li>Issue using certbot with nginx: stackoverflow</li> <li>Whaaaat Are AAAA Records in DNS? youtube</li> </ul> Docker Common Issue Solved Presentation <p>Docker</p> Docker: <code>Host</code> port vs <code>Container</code> port <p>What is left side of port ant right side of port in docker</p> <p>In Docker, when you expose ports for containers, you specify the port mappings using the <code>-p</code> flag or <code>--publish</code> flag when running a container. The syntax is typically <code>hostPort</code>:<code>containerPort</code>.</p> <ul> <li> <p>Left side (<code>hostPort</code>):</p> <p>This is the port on the host machine, the system where Docker is running. It is the port to which you can connect from outside the Docker container to access the services running within the container. If you specify a port on the left side, Docker will bind that port on the host system to the container port specified on the right side.</p> </li> <li> <p>Right side (<code>containerPort</code>):</p> <p>This is the port exposed within the Docker container. It is the port on which your application or service within the container is listening. When Docker starts the container, it will forward any traffic received on the host port (left side) to this port within the container.</p> </li> </ul> <p>For example, if you run a container with <code>-p 8080:80</code>, it means that port <code>80</code> inside the container will be accessible from port <code>8080</code> on the host machine. If you were to access <code>http://localhost:8080</code> on your host machine, Docker would forward that request to port <code>80</code> inside the container.</p> <p>This port mapping mechanism allows Docker containers to communicate with the outside world and for multiple containers to run on the same host without port conflicts.</p> Listen services running on specific port <code>:8000</code> <code>:9000</code> <pre><code># You can use the following commands to find out which processes are using these ports:\nsudo lsof -i :9000\nsudo lsof -i :8080\n</code></pre> <p>Once you identify the processes using these ports, you can decide whether to stop them or reconfigure them to use different ports. After ensuring that the ports are available, you can attempt to start the Nginx service again.</p> Last things you need to remeber in Docker Dind <p>Host os:</p> <ol> <li> <p>Add <code>Jenkins</code> user to the Docker group:</p> <p>On the host machine where Docker is installed, run the following command:</p> bash<pre><code>sudo usermod -aG docker jenkins\n</code></pre> <p>This command adds the Jenkins user to the docker group, granting it permission to interact with the Docker daemon.</p> </li> <li> <p>Ensure permissions on the Docker socket:</p> <p>The Docker daemon socket (<code>/var/run/docker.sock</code>) should be readable and writable by members of the docker group. You can check and     adjust the permissions if needed with the following command:</p> bash<pre><code>sudo chmod 666 /var/run/docker.sock\n</code></pre> </li> <li> <p>Restart Jenkins:</p> <p>Restart the Jenkins service to apply the changes:</p> bash<pre><code>sudo systemctl restart jenkins\n# or\ndocker restart &lt;container_id or container_name&gt;\n</code></pre> </li> </ol> <p>With these changes, the Jenkins user should now have the necessary permissions to execute Docker commands, and <code>you should no longer encounter permission denied errors when running Docker commands from Jenkins job scripts</code>. Make sure to test your Jenkins job again after applying these changes.</p>"},{"location":"research/docker/#docker-common-issue-solved","title":"Docker Common Issue Solved","text":"Share Docker sockDocker Port Mappingstep1:Final Solution <p>Connect: To share Docker daemon from the host with jenkins nodes</p> <p>To run Docker commands inside Jenkins, especially within a Jenkins instance running inside a Docker container, you have a couple of options:</p> <ol> <li> <p>Docker Socket Binding:</p> bash<pre><code>$ docker run -v /var/run/docker.sock:/var/run/docker.sock &lt;jenkins-image:tag&gt;\n</code></pre> </li> <li> <p>Docker-in-Docker (DinD):</p> bash<pre><code>$ docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock docker:dind\n</code></pre> </li> </ol> <p>How to fix docker: Got permission denied while trying to connect to the Docker daemon socket</p> <p>After an search hour this following solution finaly worked :</p> bash<pre><code>$ sudo chmod 666 /var/run/docker.sock\n</code></pre> <ul> <li>Got permission denied while trying to connect to the Docker daemon socket</li> </ul> <p></p> <p>what is differnce between 8080:80 and 8080:8080. is there any real difference</p> <ul> <li>8080:80</li> </ul> <p>This notation maps port 80 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 80 inside the Docker container. This is useful when you want to expose a service running inside the container on a standard HTTP port (80) of the host machine.</p> <ul> <li>8080:8080</li> </ul> <p>This notation maps port 8080 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 8080 inside the Docker container. This is useful when you want to expose a service running inside the container on a non-standard port (8080) of the host machine.</p> <p>In both cases, the first port number (8080) specifies the port on the host machine, and the second port number (80 or 8080) specifies the port inside the Docker container. The port on the host machine is what you use to access the service running inside the container.</p> <p>So, the difference lies in which port on the host machine you want to use to access the service and which port inside the container the service is listening on.</p> <p>so why the jenkins not running on 8080:80 but running on 8080:8080</p> <p>If Jenkins is running inside a Docker container and you've mapped port 8080:8080 but not <code>8080:80</code>, it means that Jenkins is configured to listen for incoming connections on port 8080 inside the container.</p> <p>When you map <code>8080:8080</code>, it indicates that traffic directed to port <code>8080</code> on the host machine should be forwarded to port <code>8080</code> inside the Docker container where Jenkins is running. This setup expects Jenkins to be listening for connections on port <code>8080</code> inside the container.</p> <p>If Jenkins is running on port <code>8080</code> inside the container, mapping <code>8080:8080</code> correctly exposes Jenkins to external traffic on port <code>8080</code> of the host machine.</p> <p>On the other hand, if you were to map <code>8080:80</code>, it would expect Jenkins to be configured to listen on port <code>80</code> inside the container. By default, Jenkins typically runs on port 8080, so mapping <code>8080:80</code> wouldn't work unless you specifically configured Jenkins to listen on port 80 inside the container.</p> <p>Therefore, mapping <code>8080:8080</code> correctly exposes Jenkins running on port <code>8080</code> inside the container to external traffic on port <code>8080</code> of the host machine, which is why it works in your case.</p> <p>Issue Solved</p> <p>Step-by-step instructions to create a Docker image for Jenkins with Docker installed inside it and then run a Jenkins container with the Docker socket mounted from the host:</p> <ol> <li> <p>Create a Dockerfile:</p> <p>Create a file named <code>Dockerfile</code> with the following content:</p> <pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker prerequisites\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; \\\n    sh get-docker.sh\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>This Dockerfile installs Docker inside the Jenkins container and adds the Jenkins user to the Docker group.</p> </li> <li> <p>Build the Docker Image:</p> <p>Open a terminal and navigate to the directory containing the <code>Dockerfile</code>. Then, run the following command to build the Docker image:</p> <pre><code>docker build -t my-jenkins .\n</code></pre> <p>This command builds the Docker image using the Dockerfile and tags it with the name <code>my-jenkins</code>.</p> </li> <li> <p>Run the Jenkins Container:</p> <p>After the Docker image is built, you can run a Jenkins container with the Docker socket mounted from the host:</p> bash<pre><code>docker run -d \\\n--name jenkins \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-p 8080:8080 -p 50000:50000 \\\nmy-jenkins\n</code></pre> <p>This command starts a Jenkins container named <code>jenkins</code>. It mounts the Docker socket (<code>/var/run/docker.sock</code>) from the host into the container and exposes the Jenkins web interface on port <code>8080</code> and the Jenkins agent communication port on port <code>50000</code>.</p> </li> </ol> <p>With these steps, you have a Jenkins container running with Docker installed inside it, and the Docker socket mounted from the host. This setup allows the Jenkins container to communicate with the Docker daemon on the host and perform Docker-related tasks within Jenkins pipelines or jobs.</p> <p>Docker Socket bind with docker command</p> <pre><code>docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/custom_volume/jenkins/:/var/jenkins_home/ --privileged --name b_jenkins 6b7d79a0229e\n</code></pre> <ul> <li>Docker cli excutable file not found</li> <li>docker not found in jenkins pipeline</li> <li>docker not found in jenkins pipeline 2</li> <li>docker: ibm</li> <li>what is docker and why it is darn popular?</li> <li>docker introduction aws</li> </ul>"},{"location":"research/docker/#docker-presentation","title":"Docker Presentation","text":""},{"location":"research/docker/#docker-architecture","title":"Docker Architecture","text":"<p>cgroups &amp; namespaces The backbone of the Docker technology are cgroups (short for control groups) and kernel namespaces.</p> <p>With <code>cgroups</code>, the Linux operating system can easily manage and monitor resource allocation for a given process and set resource limits, like CPU, memory, and network limits.</p> <p><code>Namespaces</code> are helpful in isolating process groups from each other. There are six default namespaces in Linux: <code>mnt</code>, <code>IPC</code>, <code>net</code>, <code>usr</code>, <code>pid</code>, and <code>uts</code>. Each container will have its own namespace and processes running inside that namespace, and will not have access to anything outside its namespace.</p> <p></p>"},{"location":"research/docker/#docker-steps","title":"Docker Steps","text":""},{"location":"research/docker/#docker-images_1","title":"Docker Images","text":"<p>Where Are Docker Images Stored on the Host Machine? </p> <pre><code>$ docker info\n</code></pre> <p>Now, typically there are two categories of Docker Images</p> <ul> <li>Official Base Images</li> </ul> <p>that are pre-built and can be downloaded or pulled from registries, and</p> <ul> <li>Customized Images</li> </ul> <p>that use base images to create application-specific environments.</p> <p></p> <p></p>"},{"location":"research/docker/#docker-container_1","title":"Docker Container","text":"<p>The major difference between a <code>container</code> and an <code>image</code> is the top writable layer.</p> <p></p> <p>All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.</p> <p>When the container is stopped writable layer remains, and if container was removed writable layer is deleted. So that\u2019s why people say, containers are stateless.</p> <p></p>"},{"location":"research/docker/#docker-volume_1","title":"Docker Volume","text":"<p>How to Handle Container Storage</p> <p>To make data of any container persistent and accessible outside of the container, Docker provides two options:</p> <ul> <li>Volumes</li> <li>Bind mounts</li> </ul> <p></p>"},{"location":"research/docker/#docker-port-mapping","title":"Docker Port Mapping","text":""},{"location":"research/docker/#docker-vs-docker-compose-vs-docker-swarm","title":"Docker vs Docker Compose vs Docker Swarm","text":""},{"location":"research/docker/#docker-swarm","title":"Docker Swarm","text":""},{"location":"research/docker/#practical-guide-jenkins","title":"Practical Guide Jenkins","text":"<p>Using Statefull persistant volume </p> <p> </p> <p>Jenkins Tutorial  </p> <p> </p>"},{"location":"research/docker/#reference","title":"Reference","text":"<p>Linux (<code>Ubuntu</code>)</p> <ul> <li>Install Docker Desktop on Ubuntu</li> <li>how-to-install-docker-on-ubuntu-22-04-20-04 :UPDATED</li> <li>pass tutorial</li> <li>3 Best Ways to Run Docker in Docker Container</li> </ul> <p>Blog</p> <ul> <li>What is a Docker Swarm?</li> <li>Key Differences Between Docker and Docker Swarm </li> </ul> <p>Youtube</p> <ul> <li>Docker Swarm: Simplilearn</li> <li>Docker Swarm Step by Step: Intellipaat</li> <li>Docker vs Kubernetes vs Docker Swarm: Techworld with Nana</li> <li>The EASIEST Docker Swarm Tutorial</li> <li>Docker Compose Tutorial: Programming with Mosh</li> <li>Become a Docker Swarm Expert in just 20 minutes</li> </ul> <p>tmux</p> <ul> <li>tmux resizing pane</li> </ul> <p>Misc <code>youtube</code></p> <ul> <li>what is podman vs docker</li> </ul> <p>Book - Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</p>"},{"location":"research/package/","title":"Package","text":"<ul> <li>django-braces : Reusable, generic mixins for Django</li> </ul> PCEP <p>The exam consists of four sections:</p> Section Description <code>section 1 -&gt; 7 items</code> Max Raw Score: 180 (<code>18%</code>) <code>section 2 -&gt; 8 items</code> Max Raw Score: 290 (<code>29%</code>) <code>section 3 -&gt; 7 items</code> Max Raw Score: 250 (<code>25%</code>) <code>section 4 -&gt; 8 items</code> Max Raw Score: 280 (<code>28%</code>) Abstract <p>Section 3: Data Collections \u2013 Tuples, Dictionaries, Lists, and Strings (<code>25%</code>)</p> <p>Objectives covered by the block (7 exam items)</p> <p>PCEP-30-02 3.1 \u2013 Collect and process data using lists</p> <ul> <li>constructing vectors</li> <li>indexing and slicing</li> <li>the len() function</li> <li>list methods: <code>append()</code>, <code>insert()</code>, <code>index()</code>, etc.</li> <li>functions: <code>len()</code>, <code>sorted()</code></li> <li>the <code>del</code> instruction</li> <li>iterating through lists with the for loop</li> <li>initializing loops</li> <li>the <code>in</code> and <code>not</code> in operators</li> <li>list comprehensions</li> <li>copying and cloning</li> <li>lists in lists: matrices and cubes</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<ul> <li>Programming</li> <li>Web Development</li> <li>Design</li> <li>Testing</li> <li>Database</li> </ul>"},{"location":"tags/#frameworks","title":"Frameworks","text":"<ul> <li>Django</li> <li>Drf</li> <li>React</li> <li>Jest</li> </ul>"},{"location":"tags/#language","title":"Language","text":"<ul> <li>Python</li> <li>JavaScript</li> </ul>"},{"location":"tags/#tools","title":"Tools","text":"<ul> <li>Vim</li> <li>Git</li> <li>Github</li> <li>SSH</li> </ul>"},{"location":"tags/#misc","title":"Misc","text":"<ul> <li>Personal</li> <li>Postman</li> <li>Redis</li> <li>RabbitMQ</li> <li>SimpleJWT</li> </ul>"},{"location":"tags/#personal","title":"Personal","text":"<ul> <li>Embarking on a Tech Odyssey</li> <li>Embracing Change: Navigating the Landscape of 2023</li> <li>Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer</li> </ul>"},{"location":"tags/#python","title":"Python","text":"<ul> <li>Adding Syntax hightlighting in the material</li> </ul>"}]}