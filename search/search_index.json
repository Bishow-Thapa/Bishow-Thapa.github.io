{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello, I'm Bishow Thapa, a dedicated and versatile full-stack developer on a mission to deliver comprehensive solutions to clients. I proudly graduated from Leeds Beckett University with a BSc. in Computing, laying the groundwork for my multifaceted journey in the world of technology.</p> <p>In my two years as a front-end developer, I've passionately crafted intuitive and visually appealing user interfaces. My proficiency extends beyond the front-end realm, encompassing a solid year of hands-on experience with React\u2014a testament to my commitment to staying at the forefront of cutting-edge JavaScript libraries.</p> <p>But that's not all\u2014my skill set goes beyond the client-side. I've delved into the realm of full-stack development, mastering the intricacies of both front-end and back-end technologies. On the server side, I've honed my expertise in Django, leveraging its robust capabilities to build robust and scalable applications.</p> <p>Beyond coding, I'm deeply passionate about creating exceptional user experiences. My UX/UI design skills allow me to bridge the gap between functionality and aesthetics, ensuring that the solutions I deliver not only meet technical requirements but also delight end-users.</p> <p>My ultimate goal is to provide holistic solutions for clients, addressing their unique challenges with a blend of technical expertise and a keen eye for design. As a full-stack developer with a knack for Django and a passion for UX/UI, I'm poised to contribute to the success of your projects.</p> Let's collaborate and turn visions into reality! <ul> <li>Front-End Expert: Three years of hands-on experience in front-end development, specializing in React.</li> <li>Back-End Proficiency: Skilled in Django for robust and scalable server-side development.</li> <li>UX/UI Enthusiast: Passionate about crafting seamless and visually appealing user experiences.</li> <li>Client-Focused: Committed to providing holistic solutions that meet both technical and design needs.</li> <li>Collaborative: Ready to contribute expertise to turn visions into reality.</li> </ul>"},{"location":"#experience","title":"Experience","text":""},{"location":"#share-workspace-in-vscode","title":"Share workspace in vscode","text":".gitignore<pre><code>.vscode/*\n!.vscode/settings.json\n!.vscode/extensions.json\n</code></pre> <p>To share workspace and VS Code settings for other developers in a React repository, you can use a combination of <code>settings.json</code>, <code>.vscode</code> folder, and perhaps some configuration files like <code>.editorconfig</code> or <code>.eslint.json</code> to standardize your development environment across your team. Here's a step-by-step guide:</p> <ol> <li> <p>Create a <code>.vscode</code> folder</p> <p>In the root of your React repository, create a <code>.vscode</code> folder. This folder will contain project-specific settings that can be shared with your team.</p> <pre><code>/your-project\n\u251c\u2500\u2500 .vscode/\n\u2514\u2500\u2500 ...\n</code></pre> </li> <li> <p>Create or modify <code>settings.json</code></p> <p>Inside the <code>.vscode</code> folder, create a <code>settings.json</code> file. This file will hold VS Code settings that should be shared with all developers. Here are some common settings you might want to include:</p> <pre><code>// .vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"eslint.alwaysShowStatus\": true,\n  \"editor.tabSize\": 2,\n  \"editor.insertSpaces\": true,\n  \"files.autoSave\": \"onWindowChange\",\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\", // Assuming you're using Prettier\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\"\n  ],\n  \"prettier.requireConfig\": true\n}\n</code></pre> </li> <li> <p>Share extensions via <code>extensions.json</code></p> <p>If you want to recommend extensions for all developers working on this project (e.g., ESLint, Prettier, etc.), you can create an <code>extensions.json</code> file inside the <code>.vscode</code> folder as well.</p> <pre><code>// .vscode/extensions.json\n{\n  \"recommendations\": [\n    \"dbaeumer.vscode-eslint\",\n    \"esbenp.prettier-vscode\",\n    \"graphql.vscode-graphql\",\n    \"formulahendry.auto-rename-tag\"\n  ]\n}\n</code></pre> <p>This ensures that other developers working on the project are prompted to install the recommended extensions.</p> </li> </ol> <p>Share ESLint and Prettier configs (optional but recommended)</p> <p>For further consistency across team members, you should also share ESLint and Prettier configurations in your repository. If your project doesn't already include them, you can set up:</p> <ul> <li>ESLint: Create a <code>.eslintrc.js</code> file or <code>.eslint.json</code>.</li> <li>Prettier: Add a <code>.prettierrc</code> or <code>.prettierconfig</code> file.</li> </ul> .eslintrc.js.prettierrc <pre><code>module.exports = {\n    extends: [\n        'eslint:recommended',\n        'plugin:react/recommended',\n        'plugin:prettier/recommended',\n    ],\n    parserOptions: {\n        ecmaVersion: 2020,\n        sourceType: 'module',\n    },\n    rules: {\n        'react/prop-types': 'off',\n        'prettier/prettier': ['error'],\n    },\n};\n</code></pre> <pre><code>{\n    \"semi\": true,\n    \"singleQuote\": true,\n    \"trailingComma\": \"all\",\n    \"tabWidth\": 2\n}\n</code></pre> <p>By including these configurations in the repository, all developers will have the same code style and linting rules enforced.</p> <p>Final Structure Example:</p> <pre><code>/your-project\n  \u251c\u2500\u2500 .vscode/\n  \u2502   \u251c\u2500\u2500 settings.json\n  \u2502   \u2514\u2500\u2500 extensions.json\n  \u251c\u2500\u2500 .editorconfig\n  \u251c\u2500\u2500 .eslintrc.js\n  \u251c\u2500\u2500 .prettierrc\n  \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"#comparing-objects-in-js","title":"Comparing Objects in JS","text":"<ul> <li>geeksforgeeks: How to Compare Objects in JavaScript?</li> <li>codedamn: How to compare objects in JavaScript?</li> <li>personal Blog: How to Compare Objects in JavaScript</li> <li>syncfusion: 5 Different Ways to Deep Compare JavaScript Objects</li> <li>stackoverflow</li> <li>comparing objects</li> <li>Mastering Object Comparison in JavaScript: 4 techniques to compare </li> </ul> <p>why strings are equal when <code>===</code> but array arent in js</p> <p>In JavaScript, the <code>===</code> operator checks both value and type for equality, but it behaves differently for primitive types (like strings and numbers) and reference types (like arrays and objects).</p> <ol> <li> <p>Strings:</p> <p>Strings are primitive values in JavaScript. When you compare strings using <code>===</code>, JavaScript checks if the actual content (the sequence of characters) is the same. Since strings are immutable, when two string values have the same characters, they are considered equal.</p> Example<pre><code>let str1 = \"hello\";\nlet str2 = \"hello\";\nconsole.log(str1 === str2); // true\n</code></pre> </li> <li> <p>Arrays:</p> <p>Arrays are objects in JavaScript, which means they are reference types. When you compare arrays using <code>===</code>, JavaScript checks if the two arrays reference the exact same object in memory, not whether their contents are the same.</p> <p>Even if two arrays have the same elements, they're considered not equal because they are different objects in memory.</p> Example<pre><code>let arr1 = [1, 2, 3];\nlet arr2 = [1, 2, 3];\nconsole.log(arr1 === arr2); // false\n</code></pre> <p>In this case, <code>arr1</code> and <code>arr2</code> are two different objects in memory, so they are not considered equal by <code>===</code>.</p> </li> </ol> Tip <p>To compare arrays by their contents, you would need to iterate through them and check each element, or use a utility function (e.g., <code>JSON.stringify(arr1) === JSON.stringify(arr2)</code>).</p> can we console the memory location of object ? <p>In JavaScript, you can't directly access the memory location of an object like you can in lower-level languages such as C or C++. JavaScript abstracts away memory management to make it easier to work with.</p> <p>However, you can still observe references to objects. When you log an object in the console, you get a representation of it, but not the actual memory address. If you compare two variables holding objects, what you're comparing is their references (or the \"pointer\" to the object in memory, in a sense). Two variables can point to the same object, or to different objects.</p> <pre><code>let obj1 = { name: 'Alice' };\nlet obj2 = obj1;  // obj2 references the same object as obj1\nlet obj3 = { name: 'Alice' };  // obj3 is a different object with the same content\n\nconsole.log(obj1 === obj2);  // true, both point to the same object\nconsole.log(obj1 === obj3);  // false, they are different objects in memory\n</code></pre> <p>While you can't see the actual memory address, you can compare the references and check if two variables refer to the same object.</p> <p>If you're using the console in a browser (like Chrome), when you log an object, the console will show the object structure, and you can even interactively explore it. But again, this is a representation of the object, not its memory location.</p> <p>If you're looking to dive deeper into performance, memory management, or debugging, you might use tools like Chrome's DevTools heap profiler, but these tools focus more on memory usage and object lifecycles rather than exposing the raw memory addresses.</p> <ul> <li>Free Tool: Emoji Picker</li> </ul>"},{"location":"#npm-i-vs-npm-i-with-flag","title":"<code>npm i</code> vs <code>npm i</code> with flag","text":"<ul> <li><code>npm i</code>: Installs dependencies with npm's current (v7+) peer dependency resolution, which may cause errors if there are conflicting peer dependencies.</li> <li><code>npm i --legacy-peer-deps</code>: Installs dependencies while ignoring peer dependency conflicts, falling back to the older, pre-v7 behavior.</li> </ul> <p>In practice, if you're working with older packages that haven't been updated to work with npm v7+ peer dependency handling, using <code>--legacy-peer-deps</code>might help you avoid issues.</p>"},{"location":"#js-array-destructive-and-non-destructive-methods","title":"JS Array Destructive and Non-Destructive Methods","text":"<p>what exaclty is javascript destructive method and non desctructive method</p> <p>In JavaScript, destructive and non-destructive methods refer to how operations affect the data they operate on, especially in the context of arrays or objects.</p>"},{"location":"#destructive-methods","title":"Destructive Methods","text":"<p>A destructive method (also called a mutating method) directly modifies the original data structure (like an array or object). It changes the data in place, rather than creating a new copy. These methods are often used when you want to update or alter the original data directly.</p> Examples of Destructive Methods: <ol> <li> <p>Array Methods:</p> <ul> <li><code>push()</code>: Adds one or more elements to the end of an array.</li> <li><code>pop()</code>: Removes the last element from an array.</li> <li><code>shift()</code>: Removes the first element from an array.</li> <li><code>unshift()</code>: Adds one or more elements to the beginning of an array.</li> <li><code>splice()</code>: Adds, removes, or replaces elements at a specific index in an array.</li> <li><code>sort()</code>: Sorts the elements of the array in place.</li> <li><code>reverse()</code>: Reverses the order of elements in the array.</li> </ul> </li> <li> <p>Object Methods:</p> <ul> <li>Directly modifying properties on an object is destructive.</li> </ul> javascript<pre><code>const obj = { a: 1, b: 2 };\nobj.a = 3; // Modifies the original object\n</code></pre> </li> </ol> Example of a Destructive Method<pre><code>let arr = [1, 2, 3];\narr.push(4); // Modifies the original array\nconsole.log(arr); // [1, 2, 3, 4]\n</code></pre>"},{"location":"#non-destructive-methods","title":"Non-Destructive Methods","text":"<p>A non-destructive method (also called a non-mutating method) does not modify the original data structure. Instead, it creates and returns a new data structure with the updated values, leaving the original one unchanged.</p> Examples of Non-Destructive Methods <ol> <li> <p>Array Methods:</p> <ul> <li><code>concat()</code>: Merges two or more arrays without modifying the original ones.</li> <li><code>slice()</code>: Returns a shallow copy of a portion of an array, leaving the original array intact.</li> <li><code>map()</code>: Creates a new array with the results of calling a provided function on every element in the array.</li> <li><code>filter()</code>: Creates a new array with all elements that pass the test implemented by the provided function.</li> <li><code>reduce()</code>: Accumulates a value based on the array\u2019s elements (but does not mutate the original array).</li> </ul> </li> <li> <p>String Methods:</p> <ul> <li>Methods like <code>slice()</code>, <code>toLowerCase()</code>, and <code>toUpperCase()</code> return new strings without modifying the original one.</li> </ul> </li> <li> <p>Object Methods:</p> <ul> <li>Using <code>Object.assign()</code> or the spread operator (<code>{...obj}</code>) to copy an object creates a new object, leaving the original object unchanged.</li> </ul> </li> </ol> Example of a Non-Destructive Method<pre><code>let arr = [1, 2, 3];\nlet newArr = arr.concat(4); // Does not modify the original array\nconsole.log(arr); // [1, 2, 3]\nconsole.log(newArr); // [1, 2, 3, 4]\n</code></pre>"},{"location":"#key-differences","title":"Key Differences:","text":"<ul> <li>Destructive Methods: Modify the original data.</li> <li>Non-Destructive Methods: Do not modify the original data but instead return a new data structure.</li> </ul> <p>Choosing between destructive and non-destructive methods depends on whether you want to preserve the original data or directly alter it.</p>"},{"location":"#using-in-real-time","title":"Using in Real Time","text":"<p>when does it is used in real time application in js or react</p> <p>In real-time applications, destructive and non-destructive methods in JavaScript (and React) are often used based on the specific behavior needed for managing state or manipulating data. Here's how and when each type of method is commonly used in JavaScript and React:</p>"},{"location":"#1-destructive-methods-in-real-time-applications","title":"1. Destructive Methods in Real-time Applications","text":"When to Use Destructive Methods <ol> <li> <p>When performance optimization is crucial:</p> <ul> <li>Destructive methods directly modify the existing data, which can be faster in scenarios where creating a new copy of data is resource-intensive. This is particularly useful in performance-critical applications where you need to avoid unnecessary copies of large datasets.</li> </ul> </li> <li> <p>Managing application state with direct mutations (React):</p> <ul> <li>In some cases, modifying data directly (destructive methods) can be acceptable, but in React, this should be done cautiously. React requires you to treat state immutably to trigger re-renders, but there are times when mutable operations are used temporarily (before triggering a state update).</li> </ul> </li> <li> <p>Manipulating local data structures (arrays, objects) that don\u2019t need to be copied:</p> <ul> <li>When working with non-shared data that doesn\u2019t need to be reused, modifying the original structure directly is more straightforward and often necessary. For example, modifying a local array with <code>.push()</code>, <code>.pop()</code>, or <code>.shift()</code>.</li> </ul> </li> </ol> Example in Real-Time Applications (React/JS) <ul> <li> <p>Modifying an array of items in state:</p> <ul> <li> <p>You might want to add or remove items from an array in state, but in React, you should avoid mutating state directly. However, it could be useful when working with data before setting state or for manipulating data before rendering.</p> <pre><code>const handleAddItem = (newItem) =&gt; {\n    const newItems = [...items]; // Copy the array (non-destructive approach)\n    newItems.push(newItem); // Destructive method to modify the copied array\n    setItems(newItems); // Set the state with the modified array\n}\n</code></pre> </li> </ul> </li> </ul> Example of Destructive Methods in Non-React JS <ul> <li> <p>Modifying arrays or objects in client-side JavaScript: You might use destructive methods when manipulating data in a client-side application, such as adding/removing users from an array.</p> <pre><code>let users = [\"Alice\", \"Bob\", \"Charlie\"];\nusers.push(\"David\"); // Destructive method\nconsole.log(users); // [\"Alice\", \"Bob\", \"Charlie\", \"David\"]\n</code></pre> </li> </ul>"},{"location":"#2-non-destructive-methods-in-real-time-applications","title":"2. Non-Destructive Methods in Real-time Applications","text":"When to Use Non-Destructive Methods <ol> <li> <p>React State Management:</p> <ul> <li>React relies on the immutability of state to ensure that components re-render properly when state changes. Non-destructive methods (e.g., <code>.map()</code>, <code>.filter()</code>, <code>.concat()</code>) are used to create new state objects or arrays without mutating the original state directly. This ensures that React can detect the changes and trigger the necessary re-renders.</li> </ul> </li> <li> <p>When you need to preserve the original data:</p> <ul> <li>If you need to maintain the integrity of the original data (for example, when it's shared across different parts of the application), non-destructive methods are preferred because they create a new copy of the data.</li> </ul> </li> <li> <p>In scenarios with data sharing between components:</p> <ul> <li>If you have a data structure that is shared between components, you don't want to inadvertently modify it in one component and cause unexpected side effects in another. Using non-destructive methods ensures that the original data is not altered.</li> </ul> </li> </ol> Example in React (Non-Destructive Methods for State) <ol> <li> <p>Adding or Removing Items from an Array in State (React-specific):</p> <ul> <li> <p>When updating the state in React, you should use non-destructive methods to avoid direct mutation of state. Here's an example where you are adding a new item to an array state using <code>.concat()</code> (non-destructive) rather than <code>.push()</code> (destructive).</p> <pre><code>const handleAddItem = (newItem) =&gt; {\n    const updatedItems = items.concat(newItem); // Non-destructive\n    setItems(updatedItems); // Update the state with the new array\n};\n</code></pre> </li> </ul> </li> <li> <p>Updating a specific value in an object (React):</p> <ul> <li> <p>To update an object property in React, you should use the spread operator (<code>...</code>) to create a new object rather than mutating the original one. This triggers a re-render in React.</p> <pre><code>const updateUser = (newName) =&gt; {\n    const updatedUser = {...user, name: newName}; // Non-destructive method\n    setUser(updatedUser); // Set the updated user object to the state\n};\n</code></pre> </li> </ul> </li> </ol> Example in Real-Time JavaScript (Non-Destructive Methods) <ul> <li> <p>Creating a copy of an array and updating it without affecting the original array:</p> <pre><code>let arr = [1, 2, 3];\nlet newArr = arr.slice(); // Non-destructive: creates a shallow copy of the array\nnewArr.push(4);\nconsole.log(arr); // [1, 2, 3] (original array remains unchanged)\nconsole.log(newArr); // [1, 2, 3, 4] (new array with modification)\n</code></pre> </li> <li> <p>Object cloning with spread operator:</p> <pre><code>let obj = {name: \"John\", age: 30};\nlet newObj = {...obj, age: 31}; // Non-destructive, creates a new object\nconsole.log(obj); // {name: \"John\", age: 30}\nconsole.log(newObj); // {name: \"John\", age: 31}\n</code></pre> </li> </ul> When Does It Apply in Real-Time React Applications? <ul> <li> <p>State Updates: In React, non-destructive methods are essential when you update the state. For example, when adding items to an array or updating an object in the state, you must not mutate the state directly (i.e., no <code>.push()</code>, <code>.splice()</code>, or direct property changes). Instead, use methods like <code>.concat()</code>, <code>.map()</code>, and the spread operator to ensure immutability and proper re-rendering.</p> </li> <li> <p>Immutable Data Patterns: Applications that use Redux or other state management libraries that rely on immutability (common in React apps) heavily utilize non-destructive methods to ensure that the state changes are tracked and updates happen correctly.</p> </li> <li> <p>Data Persistence or Local Modifications: For operations that don\u2019t need to update the state or affect other parts of the app, destructive methods can be used locally within a function or component. For example, manipulating temporary data or cache data might be done using destructive methods.</p> </li> </ul> <p>In Conclusion:</p> <ul> <li>Destructive methods are useful for quick, localized, or performance-sensitive operations but should be avoided in React state management due to the need for immutability.</li> <li>Non-destructive methods are favored in React to ensure state changes are predictable, and re-renders occur properly without mutating data directly.</li> </ul> <p>In a real-time application (such as React), non-destructive methods are more common when dealing with state, as React relies on immutability to trigger the necessary updates to the UI. Destructive methods can still be useful in situations where performance is critical or when you want to manipulate temporary data.</p>"},{"location":"#host-on-network","title":"HOST ON NETWORK","text":"<pre><code>pnpm run dev --host 0.0.0.0\n</code></pre>"},{"location":"#understanding-the-100vh-issue-on-mobile-browsers-why-it-doesnt-work-as-expected-and-how-to-fix-it","title":"Understanding the <code>100vh</code> Issue on Mobile Browsers: Why It Doesn't Work as Expected and How to Fix It","text":"<p>The issue with using <code>100vh</code> on mobile browsers lies in how mobile browsers handle the viewport height, especially when dynamic UI elements like the address bar, toolbars, or tabs appear and disappear.</p> Here's a step-by-step explanation of the problem <ol> <li> <p>What is 100vh?</p> <ul> <li><code>100vh</code> refers to 100% of the viewport height. It's a CSS unit that means \"the full height of the screen or browser window.\"</li> </ul> </li> <li> <p>How mobile browsers handle the viewport:</p> <ul> <li>On desktop browsers, <code>100vh</code> simply means the visible part of the browser window (the area that excludes the window border, scrollbars, etc.).</li> <li> <p>On mobile browsers, the viewport height (<code>100vh</code>) is calculated based on the entire height of the browser window, including any space taken up by UI elements like:</p> <ul> <li>The address bar (the URL bar at the top of the screen)</li> <li>The browser toolbar</li> <li>The tabs bar</li> </ul> </li> </ul> <p>The mobile browser will initially consider the height of the screen as 100vh to include these UI elements.</p> </li> <li> <p>Dynamic UI Elements in Mobile Browsers:</p> <ul> <li>On mobile browsers, the address bar and toolbar often hide or show as you scroll up or down the page. This behavior is common on browsers like Safari (iOS) and Chrome (Android).</li> <li>When you first load a page on mobile, the address bar is usually visible, and it takes up space, making the 100vh taller than the actual visible area.</li> </ul> </li> <li> <p>Problem with 100vh:</p> <ul> <li>Initial Load: When a page first loads, the browser will measure the 100vh including the address bar (which is visible at the top). As a result, the height is larger than the visible area of the screen.<ul> <li>Example: The browser will try to display your element at 100vh, but the visible height of the screen is less because the address bar is taking up space at the top.</li> </ul> </li> <li>After Scrolling: When you scroll, the address bar or toolbar may hide or shrink, and the visible height of the screen increases. But, 100vh does not automatically adjust; it still considers the initial calculation, causing the page to look like it has extra space at the bottom or the content might overflow the screen.</li> </ul> </li> <li> <p>Example:</p> <p>Imagine a simple page with a div that has height: 100vh.</p> <ul> <li> <p>On a mobile device:</p> <ul> <li>When the page loads, the height is measured including the address bar at the top of the screen.</li> <li>The <code>div</code> is shown taller than the actual visible area because of the address bar.</li> <li>If you scroll down, the address bar hides, and the height of the screen increases, but the <code>div</code> height still doesn\u2019t adjust, leaving extra space at the bottom.</li> </ul> </li> </ul> </li> </ol> <p>How Does This Affect Your Layout?</p> <ul> <li>Overflow Issues: Your layout may overflow, causing unwanted scrolling or hidden content, since the 100vh height is calculated including the hidden browser UI.</li> <li>Visible Space Mismatch: The <code>div</code> with <code>height: 100vh</code> might look taller than the actual visible area on initial load, and after scrolling, there may be excess space at the bottom.</li> </ul> <p>Solution</p> <p>How to Fix This:</p> <p>You can solve this problem by using a dynamic height calculation (using JavaScript) that measures the actual visible height excluding the address bar and other UI elements.</p> <p>Here\u2019s how you can handle it:</p> <ol> <li> <p>Dynamically Adjust Height with JavaScript:</p> <ul> <li>Using JavaScript, you can calculate the actual visible height of the screen and apply that dynamically to your element.</li> </ul> </li> <li> <p>Use <code>100%</code> on Parent Elements:</p> <ul> <li>Another approach is to set height: <code>100%</code> on the parent elements (<code>html</code>, <code>body</code>, etc.) to ensure a consistent height across devices.</li> </ul> </li> </ol> In Summary <p>The issue with <code>100vh</code> on mobile browsers arises from how the viewport height is calculated, especially considering dynamic UI elements like the address bar and toolbar. On mobile, <code>100vh</code> includes these UI elements, causing the element to appear too tall initially, and after scrolling, it may leave extra space at the bottom. Using JavaScript to dynamically calculate the actual visible height can solve this problem.</p>"},{"location":"#display-different-title-on-development-mode-in-react","title":"Display Different title on <code>development</code> mode in react","text":"index.htmlApp.jsx <pre><code>&lt;!doctype html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\" /&gt;\n        &lt;link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n        &lt;title&gt;Bank App&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"root\"&gt;&lt;/div&gt;\n        &lt;script type=\"module\" src=\"/src/main.jsx\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { ConfigProvider } from \"antd\";\nimport { store, persistor } from \"@shared/store/store\";\nimport { lightTheme } from \"@shared/utils/theme\";\nimport ErrorBoundaryWrapper from \"@shared/components/ErrorBoundary/ErrorBoundaryWrapper.jsx\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport logger from \"@shared/utils/logger\";\n\nimport App from \"./App.jsx\";\nimport \"./shared/styles/main.scss\";\n\nasync function enableMocking() {\n    if (CONFIG.MODE !== \"development\") {\n        return;\n    }\n\n    const { worker } = await import(\"./mocks/browser\");\n\n    return worker.start();\n    }\n\n    if (import.meta.env.MODE === \"development\") {\n    document.title = \"\ud83d\udea7 Bank App\";\n    }\n\n    enableMocking().then(() =&gt; {\n    createRoot(document.getElementById(\"root\")).render(\n        &lt;StrictMode&gt;\n            &lt;Provider store={store}&gt;\n                &lt;PersistGate loading={null} persistor={persistor}&gt;\n                    &lt;ConfigProvider theme={lightTheme}&gt;\n                        &lt;ErrorBoundaryWrapper&gt;\n                            &lt;App /&gt;\n                        &lt;/ErrorBoundaryWrapper&gt;\n                    &lt;/ConfigProvider&gt;\n                &lt;/PersistGate&gt;\n            &lt;/Provider&gt;\n        &lt;/StrictMode&gt;\n    );\n});\n</code></pre>"},{"location":"#football-highlights","title":"Football Highlights","text":"<ul> <li>Hoofoot.com</li> <li>vipbox.lc</li> </ul>"},{"location":"#jsdocs","title":"JSDocs","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":""},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/","title":"Adding a Loader to Your React Button Clicks","text":"","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#adding-a-loader-to-your-react-button-clicks","title":"Adding a Loader to Your React Button Clicks","text":"<p>In modern web applications, providing a smooth user experience is crucial. One effective way to enhance that experience is by implementing loaders during asynchronous actions. This blog will walk you through adding a loader to a button click in your React application, ensuring users know that their action is being processed.</p> <p>Adding a Loader to Your React Button Clicks: A Simple Guide</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#why-use-loaders","title":"Why Use Loaders?","text":"<p>Loaders indicate to users that an action is in progress, helping to manage expectations. Without loaders, users may think the application is unresponsive, leading to frustration. Implementing loaders can significantly improve user satisfaction and engagement.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#step-by-step-implementation","title":"Step-by-Step Implementation","text":"<ol> <li> <p>Manage Loading State:</p> <p>Start by creating a state variable to track whether the loader should be displayed. In your React component, use <code>useState</code> to create an <code>isLoading</code> variable.</p> <pre><code>const [isLoading, setIsLoading] = useState(false);\n</code></pre> </li> <li> <p>Set the Loader State on Click:</p> <p>When the button is clicked, set the loading state to <code>true</code>. This indicates that the action has started.</p> <pre><code>const handleClick = async () =&gt; {\n  setIsLoading(true);\n  // Your async action here\n};\n</code></pre> </li> <li> <p>Perform Your Action:</p> <p>Dispatch your action (e.g., a Redux action) inside the <code>handleClick</code> function. Use <code>try-catch</code> to handle any errors that may occur during the process.</p> </li> <li> <p>Reset the Loader State:</p> <p>In the <code>finally</code> block of your <code>try-catch</code>, reset the loading state to <code>false</code> once the action completes, whether successful or not.</p> </li> <li> <p>Render the Loader:</p> <p>Conditionally render a loader UI based on the <code>isLoading</code> state. You can use a simple text loader or a spinner.</p> <pre><code>{\n  isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;;\n}\n</code></pre> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#example-code","title":"Example Code","text":"<p>Here\u2019s a concise example of a button that shows a loader when clicked:</p> <pre><code>const YourComponent = () =&gt; {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = async () =&gt; {\n    setIsLoading(true);\n    try {\n      await dispatchYourAsyncAction();\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleClick} disabled={isLoading}&gt;\n        {isLoading ? \"Loading...\" : \"Submit\"}\n      &lt;/button&gt;\n      {isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;}\n    &lt;/div&gt;\n  );\n};\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#conclusion","title":"Conclusion","text":"<p>Implementing loaders in your React application enhances user experience by providing visual feedback during asynchronous operations. By following the steps outlined above, you can easily integrate a loader into your button clicks, ensuring your users stay informed and engaged. Remember, a smooth experience keeps users coming back!</p>","tags":["Personal"]},{"location":"blog/2024/04/01/adding-a-loader-to-your-react-button-clicks/#additional","title":"Additional","text":"<p>To implement a loader after clicking a button in your React application, you can follow these steps:</p> <ol> <li> <p>Manage Loading State: Use a state variable to track whether the loader should be displayed.</p> </li> <li> <p>Set the Loader State: Set the loader state to <code>true</code> when the button is clicked and reset it when the asynchronous action completes.</p> </li> <li> <p>Display the Loader: Conditionally render the loader based on the loading state.</p> </li> </ol> Example ImplementationKey Steps ExplainedNotes <p>Here\u2019s a complete example based on your code snippet:</p> <pre><code>import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { instanceChatAdd } from 'yourActions'; // adjust the import according to your setup\n\nconst YourComponent = ({ formType, module, body, isDashbord, setInternalVisible }) =&gt; {\n    const dispatch = useDispatch();\n    const [isLoading, setIsLoading] = useState(false); // Step 1: Loader state\n\n    const handleClick = async () =&gt; {\n        setIsLoading(true); // Step 2: Show loader\n        console.log(\"trying.....\");\n\n        try {\n            if (formType !== \"newCutting\" &amp;&amp; module !== \"Circular_Planning\") {\n                await dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n            } else if (module === \"Circular_Planning\") {\n                let circulayPayload = {\n                    ...body,\n                    IsCircularPlanningRequestForApproval: true,\n                };\n                await dispatch(instanceChatAdd(circulayPayload, isDashbord, setInternalVisible));\n            }\n        } catch (error) {\n            console.error(\"Error:\", error);\n            // Handle the error (e.g., show a notification)\n        } finally {\n            setIsLoading(false); // Step 3: Hide loader after the action\n        }\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;button onClick={handleClick} disabled={isLoading}&gt;\n                {isLoading ? 'Loading...' : 'Submit'}\n            &lt;/button&gt;\n            {isLoading &amp;&amp; &lt;div className=\"loader\"&gt;Loading...&lt;/div&gt;} {/* Step 4: Loader UI */}\n        &lt;/div&gt;\n    );\n};\n\nexport default YourComponent;\n</code></pre> <ol> <li> <p>Loader State: <code>const [isLoading, setIsLoading] = useState(false);</code> initializes a state variable to manage the loading state.</p> </li> <li> <p>Handle Click: In the <code>handleClick</code> function, <code>setIsLoading(true);</code> shows the loader when the button is clicked. The asynchronous action is dispatched using <code>await</code>.</p> </li> <li> <p>Error Handling: If an error occurs, it is logged, and you can also implement additional error handling as needed.</p> </li> <li> <p>Loader UI: The loader is conditionally rendered based on the <code>isLoading</code> state. You can customize the loader\u2019s appearance with CSS.</p> </li> </ol> <ul> <li>Ensure your action creators (like <code>instanceChatAdd</code>) return a promise if you want to use <code>await</code>.</li> <li>You may want to add more robust error handling and user feedback for a better user experience.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/","title":"API Calls Cancelation in React","text":"","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#api-calls-cancelation-in-react","title":"API Calls Cancelation in React","text":"<p>In React, API calls do not automatically get canceled when a component unmounts. If you initiate an API call and the component unmounts before the call completes, it can lead to issues such as trying to update the state of an unmounted component, which can cause warnings or memory leaks.</p> <p>Do I need to cancel API calls in React when a component unmounts, or does React handle this automatically?</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#introduction","title":"Introduction","text":"<p>When using APIs in React components, it's important to consider what happens when a component unmounts. This document explains whether you need to manually cancel API calls and how to handle cleanup in your components.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#do-you-need-to-cancel-api-calls","title":"Do You Need to Cancel API Calls?","text":"<p>React does not automatically cancel API calls when a component unmounts. If an API call is still in progress when the component is unmounted, you may encounter memory leaks or attempts to update the state of an unmounted component.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#risks-of-not-canceling-api-calls","title":"Risks of Not Canceling API Calls","text":"<ol> <li>Memory Leaks: Unhandled responses may keep the component in memory longer than necessary.</li> <li>State Updates on Unmounted Components: Attempting to update the state of a component that is no longer in the DOM can lead to errors and warnings.</li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#how-to-cancel-api-calls","title":"How to Cancel API Calls","text":"<p>There are several strategies to handle API calls and cleanup in React:</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#1-using-abortcontroller","title":"1. Using <code>AbortController</code>","text":"<p>The <code>AbortController</code> API allows you to abort a fetch request.</p> <pre><code>import React, { useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  useEffect(() =&gt; {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const fetchData = async () =&gt; {\n      try {\n        const response = await fetch(\"https://api.example.com/data\", {\n          signal,\n        });\n        const data = await response.json();\n        // Handle your data\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          console.log(\"Fetch aborted\");\n        } else {\n          // Handle other errors\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      controller.abort(); // Cleanup on unmount\n    };\n  }, []);\n\n  return &lt;div&gt;My Component&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#2-using-useeffect-cleanup-function","title":"2. Using <code>useEffect</code> Cleanup Function","text":"<p>You can also manage state updates with a cleanup function in <code>useEffect</code>.</p> <pre><code>import React, { useState, useEffect } from \"react\";\n\nconst MyComponent = () =&gt; {\n  const [data, setData] = useState(null);\n  let isMounted = true;\n\n  useEffect(() =&gt; {\n    const fetchData = async () =&gt; {\n      const response = await fetch(\"https://api.example.com/data\");\n      const result = await response.json();\n      if (isMounted) {\n        setData(result);\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      isMounted = false; // Set the flag to false on unmount\n    };\n  }, []);\n\n  return &lt;div&gt;{data ? JSON.stringify(data) : \"Loading...\"}&lt;/div&gt;;\n};\n\nexport default MyComponent;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#conclusion","title":"Conclusion","text":"<p>In summary, you should manage API calls carefully to avoid potential issues when components unmount. Using <code>AbortController</code> or setting flags in a cleanup function are effective strategies for preventing unwanted state updates.</p>","tags":["Personal"]},{"location":"blog/2024/04/11/api-calls-cancelation-in-react/#references","title":"References","text":"<ul> <li>React Documentation on Effects</li> <li>Using AbortController</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/","title":"Approach to loading state in createSlice in Redux Toolkit","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#approach-to-loading-state-in-createslice-in-redux-toolkit","title":"Approach to loading state in <code>createSlice</code> in Redux Toolkit","text":"<p>Both slices of code you provided demonstrate effective use of Redux Toolkit for managing state in a React application, but they serve different purposes and have slight variations in implementation.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#overview","title":"Overview","text":"<p>Here's a breakdown of each:</p> Blog SliceTodo Slice <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchBlogs } from \"./service\";\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null;\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload;\n            });\n    },\n});\n\nexport const { actions, reducer } = blogSlice;\nexport default reducer;\n</code></pre> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchTodoData } from \"./api\";\n\nexport const getTodoData = createAsyncThunk(\"todo/getData\", fetchTodoData);\n\nconst todoSlice = createSlice({\n    name: \"todo\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n    },\n    reducers: {},\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(getTodoData.pending, (state) =&gt; {\n                state.loading = true;\n                state.error = null; // Reset error\n            })\n            .addCase(getTodoData.fulfilled, (state, action) =&gt; {\n                state.loading = false;\n                state.items = action.payload;\n            })\n            .addCase(getTodoData.rejected, (state, action) =&gt; {\n                state.loading = false;\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport default todoSlice.reducer;\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#comparison","title":"Comparison","text":"<ol> <li> <p>Structure and State Management:</p> <ul> <li>The blogSlice uses a <code>status</code> field to manage loading states, which is clear and helps in tracking the loading state (idle, loading, succeeded, failed).</li> <li>The todoSlice uses a <code>loading</code> boolean, which is also effective but less descriptive compared to the status approach.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Both slices handle error states well. The blog slice directly assigns <code>action.payload</code> on rejection, while the todo slice uses <code>action.error.message</code>. This might result in different formats of error messages based on how errors are structured in your services.</li> </ul> </li> <li> <p>Async Thunk Creation:</p> <ul> <li>The todoSlice uses <code>createAsyncThunk</code>, which is good for separating the asynchronous logic from the slice itself, making the code cleaner and more maintainable. The blogSlice assumes <code>fetchBlogs</code> is an async function, which is valid but slightly less modular.</li> </ul> </li> <li> <p>Reducer Complexity:</p> <ul> <li>Both slices are relatively simple. The choice between the two might come down to preference or project requirements. The blog slice has a more explicit state management approach with more detailed statuses</li> </ul> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/14/approach-to-loading-state-in-createslice-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<ul> <li>Best Practices: If you prioritize clarity and maintainability, the todoSlice may be slightly better due to the use of <code>createAsyncThunk</code> for async actions, which separates concerns more clearly.</li> <li>Clarity of State: If you want to manage more granular loading states, the blogSlice with its <code>status</code> field provides a richer understanding of the loading process.</li> <li>Final Choice: Ultimately, the choice depends on the specific needs of your application and your team\u2019s preferences for managing state. If your application has complex async requirements, consider using <code>createAsyncThunk</code> as in the todoSlice. If you're dealing with simpler state management or want a more explicit status, the blogSlice works well.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/","title":"Best Method to store the multiple api base in react","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#best-method-to-store-the-multiple-api-base-in-react","title":"Best Method to store the multiple api base in react","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#1-using-axiosinstancejs-alone","title":"1. Using <code>axiosInstance.js</code> Alone","text":"<p>If you only have one base URL or if all your API calls can be managed using a single Axios instance, you can stick with just <code>axiosInstance.js</code>. This is straightforward and works well for smaller applications.</p> ExampleUsage <pre><code>// services/axiosInstance.js\nimport axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n});\n\nexport default axiosInstance;\n</code></pre> <pre><code>// features/blog/service.js\nimport axiosInstance from '../../services/axiosInstance';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n    const response = await axiosInstance.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#2-using-apimanagerjs-for-multiple-apis","title":"2. Using <code>apiManager.js</code> for Multiple APIs","text":"<p>If your application interacts with multiple APIs (like a blog API and a dashboard API), using <code>apiManager.js</code> is beneficial. This allows you to create different Axios instances with their respective base URLs, making your code cleaner and more manageable.</p> ExampleUsage <pre><code>// services/apiManager.js\nimport axiosInstance from \"./axiosInstance\";\n\nconst apiManager = {\n    blog: axiosInstance.create({\n        baseURL: process.env.REACT_APP_BLOG_API_URL,\n    }),\n    dashboard: axiosInstance.create({\n        baseURL: process.env.REACT_APP_BASE_API_URL,\n    }),\n};\n\nexport default apiManager;\n</code></pre> <pre><code>// features/blog/service.js\nimport apiManager from '../../services/apiManager';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n    const response = await apiManager.blog.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n\n// features/dashboard/service.js\nimport apiManager from '../../services/apiManager';\n\nexport const fetchDashboardData = async (signal) =&gt; {\n    const response = await apiManager.dashboard.get('/posts', { cancelToken: signal });\n    return response.data;\n};\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/best-method-to-store-the-multiple-api-base-in-react/#3-using-configjs","title":"3. Using <code>config.js</code>","text":"Example <pre><code>export const accessTokenKey = \"token\";\n\nexport const baseUrl = process.env.REACT_APP_BASE_URL;\nexport const blogBaseUrl = process.env.REACT_APP_BLOG_API_URL;\n// export const appBaseUrl = process.env.REACT_APP_BASE_URL + \"/api/app\";\n// export const rootBaseUrl = process.env.REACT_APP_BASE_URL + \"/api\";\nexport const appBaseUrl = `${baseUrl}/api/app`;\nexport const rootBaseUrl = `${baseUrl}/api`;\nexport const appNotifyUrl = process.env.REACT_APP_NOTIFY_URL;\n</code></pre> Summary: Which to Use? <p>Use <code>axiosInstance.js</code> if:</p> <ul> <li>Your application is small or only communicates with a single API.</li> <li>You want a simple setup without additional complexity.</li> </ul> <p>Use <code>apiManager.js</code> if:</p> <ul> <li>Your application interacts with multiple APIs.</li> <li>You want better organization and clearer separation of API concerns.</li> <li>You may need different configurations (e.g., different timeouts, headers) for different APIs.</li> </ul> <p>Conclusion</p> <p>For a scalable approach, especially if you foresee adding more APIs or configurations in the future, using <code>apiManager.js</code> is the better choice. It allows for cleaner code and better organization of your API calls. If you stick with just <code>axiosInstance.js</code>, it can become unwieldy as the complexity of your application grows.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/","title":"Best Practices for Managing Constants and Functions in Large React Applications","text":"","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#best-practices-for-managing-constants-and-functions-in-large-react-applications","title":"Best Practices for Managing Constants and Functions in Large React Applications","text":"<p>Use constants for fixed values to enhance readability and avoid magic numbers, and use functions for dynamic logic or reusable code to encapsulate complex operations.</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-constants-or-functions-in-react","title":"Using Constants or Functions in react","text":"","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#constants-vs-functions-overview","title":"Constants vs. Functions: Overview","text":"<ul> <li> <p>Constants: Used for values that do not change. They can make code easier to read and maintain since their purpose is clear and they can be reused throughout the application.</p> </li> <li> <p>Functions: Ideal for encapsulating logic, especially when that logic might change or requires parameters. Functions can also help prevent code duplication and improve readability by abstracting complex logic.</p> </li> </ul> <pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const {\n        transferToDailyDairyResp,\n        transferToDailyDairyLoading,\n        dailyDairyPaginationResp,\n        dailyDairyPaginationLoading,\n    } = useSelector((state) =&gt; state.dailyDiaryReducer);\n\n    // Added\n    const [\n        hasTodoDiaryBeenAdvancedSearched,\n        setHasTodoDiaryBeenAdvancedSearched,\n    ] = useState(false);\n    const [isDownloadingExcel, setIsDownloadingExcel] = useState(false);\n\n\n    const exxxcelItems = dailyDairyPaginationResp?.items || [];\n    const isDownloadExcelEnabled =\n    hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n\n\n    const buttonProps = {\n        // type: \"primary\",\n        disabled: !isDownloadExcelEnabled,\n        icon: &lt;DownloadOutlined /&gt;,\n        loading: isDownloadingExcel,\n        onClick: handleDownloadTodoExcel,\n    };\n\n    return(\n        &lt;&gt;\n            {\n                hasTodoDiaryBeenAdvancedSearched &amp;&amp; (\n                    &lt;Tooltip\n                    title={\n                        isDownloadExcelEnabled\n                        ? \"You can download Excel here\"\n                        : \"Opps, nothing to download...\"\n                    }\n                    &gt;\n                    &lt;Button\n                        {...buttonProps}\n                        // onClick={handleDownloadTodoExcel}\n                        // loading={isDownloadingExcel}\n                    /&gt;\n                    &lt;/Tooltip&gt;\n                );\n            }\n        &lt;/&gt;\n    )\n}\n</code></pre> <p>In React, whether to use constants or functions often depends on the specific use case and the complexity of the logic. Here\u2019s a breakdown of when to use each approach:</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-constants","title":"Using Constants","text":"<p>Using constants is a good practice when:</p> <ol> <li> <p>Simple Logic: The logic is straightforward and does not require additional processing or side effects. For example:</p> <pre><code>const exxxcelItems = dailyDairyPaginationResp?.items || [];\nconst isDownloadExcelEnabled =\n  hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n</code></pre> </li> <li> <p>Readability: Keeping it as constants can improve readability, especially when they represent a clear, static condition.</p> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#using-functions","title":"Using Functions","text":"<p>Using functions is more appropriate when:</p> <ol> <li>Complex Logic: The condition involves more complex logic that may benefit from encapsulation.</li> <li>Reusability: If the logic is needed in multiple places, wrapping it in a function promotes reusability.</li> <li>Dynamic Calculation: If the values depend on other changing state or props that may not be available at the time of the constant declaration.</li> </ol> <p>Example of Using a Function</p> <p>If you want to encapsulate the logic in a function, it might look like this:</p> <pre><code>const shouldDownloadExcel = (hasTodoDiaryBeenAdvancedSearched, items) =&gt; {\n  return hasTodoDiaryBeenAdvancedSearched &amp;&amp; items.length &gt; 0;\n};\n\nconst exxxcelItems = dailyDairyPaginationResp?.items || [];\nconst isDownloadExcelEnabled = shouldDownloadExcel(\n  hasTodoDiaryBeenAdvancedSearched,\n  exxxcelItems\n);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#conclusion","title":"Conclusion","text":"<p>For your specific case, if the logic is simple and only used once, keeping it as constants is perfectly fine and often preferred for clarity. If you foresee the need for this logic to be more complex or reused, consider encapsulating it in a function.</p> <p>In summary, choose constants for simplicity and readability, and use functions for complexity, reusability, or dynamic calculations. Both approaches can be valid depending on your specific scenario!</p>","tags":["Personal"]},{"location":"blog/2024/04/09/best-practices-for-managing-constants-and-functions-in-large-react-applications/#example","title":"Example","text":"When to Use ConstantsWhen to Use FunctionsCombiningBest Practice <p>Use Constants When:</p> <ul> <li> <p>Static Values: The value does not change and will be reused. For example, configuration values or fixed strings.\"</p> <pre><code>const API_BASE_URL = \"https://api.example.com\";\nconst MAX_RETRIES = 3;\n</code></pre> </li> <li> <p>Readability: Using constants with descriptive names can improve code readability.</p> <pre><code>const STATUS_PENDING = \"pending\";\nconst STATUS_COMPLETED = \"completed\";\n</code></pre> </li> <li> <p>Avoiding Magic Numbers or Strings: To prevent hardcoding values, which can make the code difficult to understand and maintain.</p> </li> </ul> <p>Use Functions When:</p> <ul> <li> <p>Dynamic Logic: If the value needs to be computed based on input parameters or application state.</p> <pre><code>const calculateDiscount = (price, discount) =&gt; {\n    return price - (price * discount);\n};\n</code></pre> </li> <li> <p>Reusable Logic: If you find yourself repeating the same logic in multiple places, it\u2019s better to encapsulate it in a function. This also simplifies changes since you only have to update the logic in one place.</p> <pre><code>const formatCurrency = (amount) =&gt; {\n    return `$${amount.toFixed(2)}`;\n};\n</code></pre> </li> <li> <p>Complex Conditions: If the logic requires multiple steps or conditions, a function can help keep it organized and readable.</p> <pre><code>const isEligibleForDiscount = (user) =&gt; {\n    return user.isMember &amp;&amp; user.purchaseHistory.length &gt; 5;\n};\n</code></pre> </li> </ul> <p>Often, the best practice is to use a combination of both constants and functions to create clear, maintainable code. Here\u2019s how you can do that:</p> <p>Example of Combined Use</p> <ol> <li> <p>Define Constants for Fixed Values:</p> <pre><code>const DISCOUNT_RATE = 0.1; // 10% discount\nconst MAX_DISCOUNT = 50; // Maximum discount amount\n</code></pre> </li> <li> <p>Use Functions to Encapsulate Logic:</p> <pre><code>const calculateDiscount = (price) =&gt; {\n    const discount = price * DISCOUNT_RATE;\n    return discount &gt; MAX_DISCOUNT ? MAX_DISCOUNT : discount;\n};\n</code></pre> </li> <li> <p>Usage in Components:</p> <pre><code>const Checkout = ({ totalPrice }) =&gt; {\n    const discount = calculateDiscount(totalPrice);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Total: ${totalPrice}&lt;/h1&gt;\n            &lt;h2&gt;Discount: ${discount}&lt;/h2&gt;\n            &lt;h2&gt;Final Price: ${totalPrice - discount}&lt;/h2&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre> </li> </ol> <p><code>Best Practices for Large Codebases</code></p> <ul> <li> <p>Group Related Constants and Functions:</p> <ul> <li>Organize constants and functions in modules or files based on functionality or feature. This improves discoverability and maintenance.</li> </ul> </li> <li> <p>Document Your Code:</p> <ul> <li>Use comments or documentation tools to explain what constants represent and what functions do, especially if they encapsulate complex logic.</li> </ul> </li> <li> <p>Testing:</p> <ul> <li>Write unit tests for functions to ensure they behave correctly, especially when they encapsulate complex logic. Constants can be tested indirectly through functions that use them.</li> </ul> </li> <li> <p>Type Safety:</p> <ul> <li>If using TypeScript, define types for your constants and functions to improve type safety and reduce runtime errors.</li> </ul> </li> </ul> <p>Conclusion</p> <p>In large applications, the choice between constants and functions is crucial for maintaining clean, efficient, and readable code. Use constants for static values and readability, while functions should encapsulate dynamic or complex logic. Combining both effectively, organizing them in a logical structure, and adhering to best practices will help you build a scalable and maintainable codebase.</p>","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/","title":"Canceling API Calls in React: Why It Matters","text":"","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/#canceling-api-calls-in-react-why-it-matters","title":"Canceling API Calls in React: Why It Matters","text":"<p>Yes, if you want to ensure that API requests can be canceled when a component unmounts, you should pass a cancel token for each request you want to be able to cancel.</p> <p>This is particularly useful in scenarios where:</p> <ul> <li>A component may unmount before the request completes, preventing potential memory leaks.</li> <li>You want to avoid updating state on an unmounted component, which can lead to errors.</li> </ul> <p>Each request needs its own cancel token, so if you have multiple API calls in a component, you should create a separate cancel token for each one. Here's an example of how you might handle this:</p> <pre><code>const MyComponent = () =&gt; {\n  const dispatch = useDispatch();\n\n  useEffect(() =&gt; {\n    const source1 = axios.CancelToken.source();\n    const source2 = axios.CancelToken.source();\n\n    dispatch(fetchFirstApi(source1.token));\n    dispatch(fetchSecondApi(source2.token));\n\n    return () =&gt; {\n      source1.cancel();\n      source2.cancel();\n    };\n  }, [dispatch]);\n\n  // component logic...\n};\n</code></pre> <p>In this example, both API calls are made with their respective cancel tokens, ensuring that if the component unmounts, both requests can be canceled properly.</p> <p>If you find that managing multiple tokens becomes cumbersome, consider using a library like react-query or redux-saga that handles cancellations and side effects more elegantly.</p>","tags":["Personal"]},{"location":"blog/2024/04/07/canceling-api-calls-in-react-why-it-matters/#additional","title":"Additional","text":"<p>When using Redux Toolkit with Axios, handling cancellation tokens for API calls can indeed become tedious if you're making multiple requests. Here are some approaches and best practices that you might consider, especially when comparing with libraries like Redux-Saga and React Query:</p> <p>1. Centralize API Calls with Axios Interceptors</p> <p>Instead of creating a cancel token for every single request in your components, you can use Axios interceptors to handle cancelation globally. Here\u2019s how you can do it:</p> <ul> <li>Create an Axios instance.</li> <li>Set up interceptors to attach cancel tokens automatically.</li> </ul> <pre><code>import axios from \"axios\";\n\nconst axiosInstance = axios.create();\n\nconst cancelTokenSource = axios.CancelToken.source();\n\naxiosInstance.interceptors.request.use((config) =&gt; {\n  config.cancelToken = cancelTokenSource.token;\n  return config;\n});\n\n// You can then cancel all requests when needed\nconst cancelAllRequests = () =&gt; {\n  cancelTokenSource.cancel(\"Operation canceled due to new request.\");\n};\n\n// In your component:\nuseEffect(() =&gt; {\n  dispatch(fetchBlogs());\n\n  return () =&gt; {\n    cancelAllRequests();\n  };\n}, [dispatch]);\n</code></pre> <p>2. Use Redux Middleware for API Calls</p> <p>You can create a custom middleware that manages API calls. This middleware can handle cancellation tokens and their lifecycle without cluttering your components.</p> <p>3. Consider Using React Query</p> <p>React Query abstracts away many complexities of data fetching, including caching and cancellation. When you use React Query, you don\u2019t need to manually manage tokens for cancellation; it automatically handles this for you, allowing you to focus on building your app:</p> <pre><code>import { useQuery } from \"react-query\";\n\nconst fetchBlogs = async () =&gt; {\n  const response = await axios.get(\"/api/blogs\");\n  return response.data;\n};\n\nconst MyComponent = () =&gt; {\n  const { data, error, isLoading } = useQuery(\"blogs\", fetchBlogs);\n\n  // Handle loading, error, and data states...\n};\n</code></pre> <p>4. Use Redux-Saga for More Complex Scenarios</p> <p>If your application requires complex side effects, Redux-Saga is a powerful option. Sagas can manage multiple API calls and handle cancellation easily:</p> <pre><code>import { call, put, takeLatest, cancel, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* fetchBlogs() {\n  const source = axios.CancelToken.source();\n  try {\n    const response = yield call(axios.get, '/api/blogs', {\n      cancelToken: source.token,\n    });\n    yield put({ type: 'FETCH_BLOGS_SUCCESS', payload: response.data });\n  } catch (error) {\n    if (axios.isCancel(error)) {\n      console.log('Request canceled', error.message);\n    } else {\n      yield put({ type: 'FETCH_BLOGS_FAILURE', error });\n    }\n  }\n}\n\nfunction* watchFetchBlogs() {\n  yield takeLatest('FETCH_BLOGS_REQUEST', fetchBlogs);\n}\n\n// In your component:\nuseEffect(() =&gt; {\n  const task = yield fork(watchFetchBlogs);\n  return () =&gt; {\n    cancel(task); // Cancels the saga when the component unmounts\n  };\n}, []);\n</code></pre> Summary <ul> <li>For Simple Apps: Consider using Axios with <code>interceptors</code> to manage cancellation tokens centrally.</li> <li>For Complex Apps: Use React Query for its built-in cancellation and data management features or Redux-Saga for more intricate side effects handling.</li> </ul> <p>Each approach has its strengths, and the best choice depends on your specific use case and app complexity. If you find yourself frequently dealing with async logic and want to simplify state management, React Query or Redux-Saga are both great options.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/","title":"Configuring Django Channels with Redis: Connecting to Redis in Docker vs. Localhost","text":"","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost","title":"Configuring Django Channels with Redis: Connecting to Redis in Docker vs. Localhost","text":"<p>When configuring a Django project with Channels and Redis, the host used in the <code>CHANNEL_LAYERS</code> setting depends on where Redis is running relative to your Django backend.</p> <p>Here\u2019s how to decide when to use <code>127.0.0.1</code> (localhost) or <code>redis</code>:</p>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#use-127001-when","title":"Use <code>127.0.0.1</code> when:","text":"<ul> <li>Redis is running on the same machine as your Django backend.</li> <li>This means both Django and Redis are running on the same computer, so <code>127.0.0.1</code> (localhost) is the correct address to use.</li> <li>This is typical if Redis is installed directly on your local machine (not in a Docker container) and your Django app runs natively on your computer.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#use-redis-when","title":"Use <code>redis</code> when:","text":"<ul> <li>Redis is running in a Docker container and your Django app is outside Docker (on your local machine or another server).</li> <li>If Redis is running inside a Docker container, you typically reference the container by the name of the service or container as defined in your Docker setup (usually in a <code>docker-compose.yml</code> file). This is because Docker containers can communicate with each other by container names, so you would use <code>redis</code> as the hostname if that is the service name of your Redis container.</li> </ul> <p>In your case, since you mentioned Redis is running in Docker and your backend is on your local computer, you should modify your configuration like this:</p> <pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('redis', 6379)],  # 'redis' is the container name or service name in Docker\n        },\n    },\n}\n</code></pre>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#docker-compose-setup","title":"Docker Compose Setup:","text":"<p>If you're using <code>docker-compose</code>, your Redis service might be named something like this:</p> <pre><code>version: \"3\"\n\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n</code></pre> <p>In this case, you can reference the <code>redis</code> container by the service name <code>redis</code> in your <code>CHANNEL_LAYERS</code> setting.</p> Summary <ul> <li>If Redis is on the same machine as your Django app, use <code>127.0.0.1</code>.</li> <li>If Redis is running inside a Docker container, use the container's name (<code>redis</code> in this example) as the host.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#integrate-with-docker","title":"Integrate with Docker","text":"<p>To integrate your Django application with Redis using Docker Compose, you need to combine your Django app\u2019s Docker setup with the Redis service. This will allow your Django app to communicate with the Redis container for things like Channels or caching. Here\u2019s how to compose it:</p> <ol> <li> <p>Create a <code>docker-compose.yml</code> File</p> <p>Here\u2019s an example of how your <code>docker-compose.yml</code> file could look to run both Redis and your Django application:</p> yml<pre><code>version: \"3\"\n\nservices:\n  redis:\n    image: redis\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n\n  django:\n    build: .\n    container_name: django\n    command: [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n    volumes:\n      - .:/app\n    depends_on:\n      - redis\n    ports:\n      - \"8000:8000\"\n    environment:\n      - REDIS_HOST=redis\n</code></pre> Explanation <ul> <li><code>redis</code> service: Runs the official Redis image and exposes port <code>6379</code>. This is the default Redis port.</li> <li> <p><code>django</code> service:</p> </li> <li> <p><code>build: .</code> builds the Docker image for your Django app (assuming you have a <code>Dockerfile</code> in the same directory).</p> </li> <li>The <code>command</code> specifies how to run your Django application (using <code>python manage.py runserver</code>).</li> <li><code>volumes: - .:/app</code> maps your local Django project directory to the <code>/app</code> directory inside the container.</li> <li><code>depends_on: - redis</code> ensures that the Django container starts after Redis is up and running.</li> <li><code>environment: REDIS_HOST=redis</code> defines the environment variable <code>REDIS_HOST</code>, which is the hostname Django will use to connect to Redis.</li> </ul> </li> <li> <p>Create a <code>Dockerfile</code> for Your Django Application</p> <p>You\u2019ll need a <code>Dockerfile</code> for your Django application if you don\u2019t already have one. Here's a basic example:</p> Dockerfile<pre><code># Use an official Python runtime as a parent image\nFROM python:3.9-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app/\n\n# Install any needed dependencies\nRUN pip install --upgrade pip\nRUN pip install -r requirements.txt\n\n# Make port 8000 available to the world outside the container\nEXPOSE 8000\n\n# Define environment variable\nENV PYTHONUNBUFFERED 1\n</code></pre> <p>This <code>Dockerfile</code> does the following:</p> <ul> <li>Uses an official Python 3.9 image as the base.</li> <li>Sets the working directory inside the container.</li> <li>Copies your local project files into the container.</li> <li>Installs the required Python dependencies from <code>requirements.txt</code>.</li> <li>Exposes port <code>8000</code> for the Django app.</li> </ul> </li> <li> <p>Configure Django to Use Redis</p> <p>Now, make sure that your Django Channels settings (or any other Redis-related configuration) point to the Redis container. Update your <code>settings.py</code> in the Django app to connect to Redis by using the hostname <code>redis</code> (the service name in the Docker Compose file):</p> python<pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [('redis', 6379)],  # 'redis' is the container name of the Redis service\n        },\n    },\n}\n</code></pre> </li> <li> <p>Build and Run with Docker Compose</p> <p>Once you have your <code>docker-compose.yml</code>, <code>Dockerfile</code>, and Django settings configured, you can use Docker Compose to build and run the containers:</p> <ol> <li> <p>Build the images:</p> <pre><code>docker-compose build\n</code></pre> </li> <li> <p>Start the services:</p> <pre><code>docker-compose up\n</code></pre> </li> </ol> <p>Docker Compose will start both the Redis and Django services, and you can access your Django application at <code>http://localhost:8000</code>. Your Django app will connect to Redis using the <code>redis</code> hostname.</p> </li> <li> <p>Access the Django App</p> <p>Once everything is running, you can access your Django app via <code>http://localhost:8000</code>, and it should be able to connect to Redis via the hostname <code>redis</code>.</p> </li> </ol> Notes <ul> <li>The <code>depends_on</code> in the Docker Compose file ensures that the Django app will wait for Redis to be ready before starting.</li> <li>If you plan to use Redis for Django Channels or caching, make sure the Redis settings in <code>settings.py</code> are configured correctly (like shown above).</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/configuring-django-channels-with-redis-connecting-to-redis-in-docker-vs-localhost/#docker-compose","title":"Docker Compose","text":"<p>The <code>docker-compose.yml</code> file and the <code>Dockerfile</code> should be stored in your project's root directory. Here's how your directory structure should look:</p> Project StructureExplanation <pre><code>your_project/\n\u251c\u2500\u2500 docker-compose.yml  # Docker Compose configuration\n\u251c\u2500\u2500 Dockerfile          # Dockerfile for Django app\n\u251c\u2500\u2500 your_django_app/    # Your Django application folder (contains settings.py, models.py, etc.)\n\u251c\u2500\u2500 requirements.txt    # Python dependencies for Django\n\u251c\u2500\u2500 manage.py           # Django manage script\n\u2514\u2500\u2500 ...\n</code></pre> <ul> <li><code>docker-compose.yml</code>: This file defines how all the services (like your Django app and Redis) will run together using Docker Compose. It coordinates the containers, their dependencies, and network configurations.</li> <li><code>Dockerfile</code>: This file contains instructions on how to build the Docker image for your Django app. It tells Docker how to install dependencies, set up the environment, and run your application inside the container.</li> </ul> Where to store the files <ul> <li><code>docker-compose.yml</code>: Place this file in the root directory of your project (e.g., <code>your_project/docker-compose.yml</code>).</li> <li><code>Dockerfile</code>: This file should also be placed in the root directory of your Django project (e.g., <code>your_project/Dockerfile</code>).</li> </ul> Example Directory Layout<pre><code>my_django_project/\n\u251c\u2500\u2500 docker-compose.yml      # Docker Compose file that defines services\n\u251c\u2500\u2500 Dockerfile              # Dockerfile to build the Django container\n\u251c\u2500\u2500 your_django_app/        # Django app folder\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py         # Django settings file\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 manage.py               # Django manage script\n\u251c\u2500\u2500 requirements.txt        # Python dependencies (Django, channels_redis, etc.)\n\u2514\u2500\u2500 ...\n</code></pre> Steps for Setup: <ol> <li> <p>Navigate to your project\u2019s root directory where both <code>docker-compose.yml</code> and <code>Dockerfile</code> are stored.</p> </li> <li> <p>Build and run the containers using the following commands:</p> <ul> <li> <p>Build the Docker images:</p> bash<pre><code>docker-compose build\n</code></pre> </li> <li> <p>Run the services (Django app + Redis):</p> <pre><code>docker-compose up\n</code></pre> </li> </ul> </li> </ol> <p>This structure keeps everything in one place and ensures that Docker can correctly build and run your services.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/","title":"Customizing Error Handling with rejectWithValue in Redux Toolkit","text":"","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#customizing-error-handling-with-rejectwithvalue-in-redux-toolkit","title":"Customizing Error Handling with <code>rejectWithValue</code> in Redux Toolkit","text":"<p>The two code snippets you provided represent different approaches to handling asynchronous operations in a Redux slice using <code>createAsyncThunk</code>.</p> <p>Here's a breakdown of the core differences and an assessment of which method might be considered better:</p> Potential Bug CodeSolved Code <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\n    \"blog/fetchBlogs\",\n    async (_, { signal }) =&gt; {\n        const response = await axios.get(\n            \"https://jsonplaceholder.typicode.com/posts\",\n            {\n                cancelToken: signal,\n            }\n        );\n        return response.data;\n    }\n);\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null; // Clear error on success\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                if (axios.isCancel(action.error)) {\n                state.status = \"failed\";\n                state.error = action.error.message;\n                }\n            });\n    },\n});\n\nexport default blogSlice.reducer;\n</code></pre> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\n    \"blog/fetchBlogs\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await axios.get(\n                \"https://jsonplaceholder.typicode.com/posts\",\n                {\n                cancelToken: signal, // Use the cancel token\n                }\n            );\n            return response.data;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                console.log(\"Request canceled:\", err.message);\n                return rejectWithValue(\"Request was canceled\");\n            }\n            return rejectWithValue(err.message); // Return the error message for actual errors\n        }\n    }\n);\n\nconst blogSlice = createSlice({\n    name: \"blog\",\n    initialState: {\n        blogs: [],\n        status: \"idle\",\n        error: null,\n    },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchBlogs.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.blogs = action.payload;\n                state.error = null; // Clear error on success\n            })\n            .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload; // Use the rejected value\n            });\n    },\n});\n\nexport default blogSlice.reducer;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#core-differences","title":"Core Differences","text":"<ol> <li> <p>Error Handling:</p> <ul> <li>First Snippet: This version relies on automatic error handling provided by <code>createAsyncThunk</code>. If the Axios request fails, the error will be caught, and the action will be rejected with the error message directly. The error handling is less explicit.</li> <li>Second Snippet: This version explicitly handles errors using <code>try...catch</code>. If the request fails, it checks if the error was caused by a cancellation (using <code>axios.isCancel()</code>) and can differentiate that from other types of errors. It uses <code>rejectWithValue</code> to provide a custom error message back to the reducer.</li> </ul> </li> <li> <p>Cancel Token Handling:</p> <ul> <li>In both snippets, the <code>cancelToken</code> is passed to Axios for handling request cancellation. However, the second snippet allows for more nuanced error handling, specifically catering to cancellation.</li> </ul> </li> <li> <p>State Management on Success:</p> <ul> <li>The first snippet does not clear the error state upon a successful fetch, while the second snippet explicitly sets <code>state.error</code> to <code>null</code> on a successful response. This can help prevent displaying stale error messages after a successful fetch.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#which-is-better-and-why","title":"Which is Better and Why?","text":"<p>The Second Snippet is Generally Better:</p> <ul> <li>Explicit Error Handling: By using <code>try...catch</code>, you can handle different types of errors more gracefully. This is especially useful for user experience, as you can differentiate between a canceled request and a network error.</li> <li>Clarity and Control: The explicit nature of error handling makes the code easier to read and maintain. Developers can quickly understand how errors are being managed.</li> <li>Clean State Management: Resetting the error state on success ensures that users do not see old error messages, improving the app's usability.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<p>While both approaches can work, the second snippet is preferable for production-level applications due to its robustness, clarity, and better handling of different error scenarios. It provides more control over the flow of data and how errors are represented in the state, ultimately leading to a better user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/customizing-error-handling-with-rejectwithvalue-in-redux-toolkit/#additional","title":"Additional","text":"<p><code>rejectWithValue</code> is a utility function provided by createAsyncThunk in Redux Toolkit. It allows you to return a custom error value from a rejected async action. Here\u2019s why and when to use it:</p> Why Use <code>rejectWithValue</code>When to Use <code>rejectWithValue</code> <ol> <li> <p>Custom Error Handling:</p> <ul> <li><code>rejectWithValue</code> allows you to send a specific error message or object back to your reducers when the async operation fails. This can be particularly useful when you want to provide more detailed error information to the UI.</li> </ul> </li> <li> <p>Improved User Experience:</p> <ul> <li>By customizing the error value, you can display more meaningful messages to the user. For instance, instead of showing a generic error message, you can convey why the operation failed (e.g., \"Network Error: Please check your connection\" or \"Authorization failed\").</li> </ul> </li> <li> <p>Type Safety:</p> <ul> <li>Using <code>rejectWithValue</code> helps maintain type safety in TypeScript applications. You can define a specific type for your error payload, ensuring that your error handling logic remains consistent.</li> </ul> </li> <li> <p>Clearer State Management:</p> <ul> <li>It enables you to manage your state more effectively by differentiating between various types of errors. For example, you can distinguish between a canceled request and a validation error.</li> </ul> </li> </ol> <ol> <li> <p>Error Scenarios:</p> <ul> <li>Use it when your async operation can fail due to different reasons and you want to capture those specific errors. For example, API errors, validation failures, or user-triggered cancellations.</li> </ul> </li> <li> <p>Enhanced User Feedback:</p> <ul> <li>When you want to provide feedback to the user about why a request failed. If you\u2019re building a user-facing application, clear error messages are crucial for a good user experience.</li> </ul> </li> <li> <p>Handling Business Logic:</p> <ul> <li>If your business logic requires different actions based on the type of error (e.g., retry on certain errors but not others), <code>rejectWithValue</code> can help you return those different error scenarios.</li> </ul> </li> </ol> <p>Example Usage</p> <p>Here's an example demonstrating the use of <code>rejectWithValue</code>:</p> <pre><code>import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchData = createAsyncThunk(\n  \"data/fetchData\",\n  async (_, { rejectWithValue }) =&gt; {\n    try {\n      const response = await axios.get(\"https://api.example.com/data\");\n      return response.data;\n    } catch (error) {\n      if (axios.isCancel(error)) {\n        return rejectWithValue(\"Request was canceled\");\n      }\n      return rejectWithValue(\n        error.response?.data?.message || \"An error occurred\"\n      );\n    }\n  }\n);\n\nconst dataSlice = createSlice({\n  name: \"data\",\n  initialState: {\n    items: [],\n    status: \"idle\",\n    error: null,\n  },\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchData.pending, (state) =&gt; {\n        state.status = \"loading\";\n      })\n      .addCase(fetchData.fulfilled, (state, action) =&gt; {\n        state.status = \"succeeded\";\n        state.items = action.payload;\n        state.error = null;\n      })\n      .addCase(fetchData.rejected, (state, action) =&gt; {\n        state.status = \"failed\";\n        state.error = action.payload; // Use the custom error message\n      });\n  },\n});\n\nexport default dataSlice.reducer;\n</code></pre> <p>In this example, <code>rejectWithValue</code> allows you to return a meaningful error message to the reducer, which can then be displayed in the UI, enhancing the overall user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/","title":"Difference between AbstractUser and AbstractBaseUser","text":"","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#difference-between-abstractuser-and-abstractbaseuser","title":"Difference between AbstractUser and AbstractBaseUser","text":"<p>In summary, use <code>AbstractUser</code> for a simpler extension of the default user model, and <code>AbstractBaseUser</code> when you need to create a completely custom user model.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#using-abstractuser","title":"Using <code>AbstractUser</code>","text":"<p>When you want to extend the existing user model provided by Django, you can subclass <code>AbstractUser</code> and add your own fields.</p> ExampleExplanation <pre><code># models.py\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    # Adding additional fields\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    bio = models.TextField(blank=True, null=True)\n\n# settings.py\nAUTH_USER_MODEL = 'your_app_name.CustomUser'\n</code></pre> <ul> <li>We inherit from <code>AbstractUser</code>, which already includes fields like <code>username</code>, <code>email</code>, etc.</li> <li>We add two custom fields: <code>phone_number</code> and <code>bio</code>.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#using-abstractbaseuser","title":"Using <code>AbstractBaseUser</code>","text":"<p>If you want to create a completely custom user model with more control, you can subclass <code>AbstractBaseUser</code>. This requires implementing additional functionality, such as a custom user manager.</p> ExampleExplanation <pre><code># models.py\n\nfrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"The Email field must be set\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n\n        return self.create_user(email, password, **extra_fields)\n\nclass CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    name = models.CharField(max_length=30, blank=True)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n\n    objects = CustomUserManager()\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = []\n\n# settings.py\nAUTH_USER_MODEL = 'your_app_name.CustomUser'\n</code></pre> <ul> <li>We create a <code>CustomUserManager</code> to handle user creation.</li> <li>The <code>CustomUser</code> model includes only the fields we define: <code>email</code>, <code>name</code>, <code>is_active</code>, and <code>is_staff</code>.</li> <li>We specify <code>USERNAME_FIELD</code> to use <code>email</code> as the identifier instead of <code>username</code>.</li> <li><code>REQUIRED_FIELDS</code> can be left empty if no additional fields are required for superuser creation.</li> </ul> Summary <ul> <li>Using <code>AbstractUser</code>: Good for extending the default user model easily with minimal code.</li> <li>Using <code>AbstractBaseUser</code>: Good for creating a completely custom user model, allowing full control over the fields and behavior.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/04/difference-between-abstractuser-and-abstractbaseuser/#major-difference","title":"Major Difference","text":"<p>The major difference between <code>AbstractUser</code> and <code>AbstractBaseUser</code> in Django is that:</p> <ul> <li> <p>AbstractUser: This is a complete user model that inherits from Django's built-in User model. It includes all the standard user fields (like <code>username</code>, <code>email</code>, <code>first_name</code>, etc.) and authentication functionality, allowing for easy extension with additional fields.</p> </li> <li> <p>AbstractBaseUser: This is a minimal base class that provides only the core authentication features (like password handling) without any predefined fields. It requires you to define your own user model fields and implement additional functionality (like a user manager), giving you full control over the user model's structure.</p> </li> </ul> <p>In summary, <code>AbstractUser</code> is for extending the existing user model with less effort, while <code>AbstractBaseUser</code> is for creating a completely custom user model from scratch.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/","title":"Understanding Dockerfile and builderdocker.sh: A Brief Overview","text":"","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#understanding-dockerfile-and-builderdockersh-a-brief-overview","title":"Understanding Dockerfile and builderdocker.sh: A Brief Overview","text":"<p>In modern software development, Docker has become an essential tool for creating and managing containerized applications. Among the key components of a Docker-based development environment are the <code>Dockerfile</code> and <code>builderdocker.sh</code> scripts. Let's explore what these files are, why they're important, and how they can be used to streamline your development and deployment workflows.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#what-is-a-dockerfile","title":"What is a Dockerfile?","text":"<p>A Dockerfile is a script that contains instructions for building a Docker image. It defines the steps that need to be followed to set up the environment, install dependencies, copy files, and run the application. Dockerfiles ensure that the environment is consistent across all stages of development, testing, and production.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#key-parts-of-a-dockerfile","title":"Key Parts of a Dockerfile:","text":"<ul> <li>Base Image: Specifies the operating system or environment where your application will run (e.g., <code>node:14</code>).</li> <li>COPY: Adds files from your local machine into the Docker image.</li> <li>RUN: Executes commands inside the image (e.g., <code>npm install</code> or <code>pnpm install</code>).</li> <li>WORKDIR: Sets the working directory inside the container.</li> <li>CMD/ENTRYPOINT: Specifies the command to run when the container starts.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#example","title":"Example","text":"<p>Here\u2019s a simplified example of a Dockerfile for a Node.js app:</p> <pre><code>FROM node:14\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nCMD [\"npm\", \"start\"]\n</code></pre> <p>This Dockerfile defines the steps for creating an image with Node.js, installing dependencies, and starting the application.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#what-is-a-builderdockersh-file","title":"What is a <code>builderdocker.sh</code> File?","text":"<p>A <code>builderdocker.sh</code> file is a shell script often used alongside the Dockerfile to streamline the process of building and managing Docker images. The script is typically used to automate tasks such as setting environment variables, passing arguments to the Docker build process, or managing multiple Docker builds with different configurations.</p> <p>For example, you might use the <code>builderdocker.sh</code> file to:</p> <ul> <li>Set build-time arguments (like environment variables for different environments such as development or production).</li> <li>Pass configuration options when building or running Docker images.</li> <li>Simplify the process of building and pushing Docker images to a container registry.</li> </ul>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#example_1","title":"Example","text":"<p>Here\u2019s a simple example of a <code>builderdocker.sh</code> file:</p> sh<pre><code>#!/bin/bash\n\n# Build the Docker image with a specific argument\ndocker build --build-arg ENV_FILE=$1 -t my-app:$1 .\n\n# Optionally push the image to a registry\ndocker push my-app:$1\n</code></pre> <p>In this case, the script takes an argument (<code>$1</code>), which is used as the environment file during the build process.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#conclusion","title":"Conclusion","text":"<p>In summary, Dockerfiles and builderdocker.sh files are essential for creating consistent, automated, and flexible containerized environments. They streamline the process of building and deploying applications by defining the necessary steps in a Dockerfile and automating the process through a shell script like <code>builderdocker.sh</code>.</p> <p>By using build-time arguments and dynamically choosing configuration files (e.g., <code>.env.production</code> or <code>.env.development</code>) based on the Git branch, you can tailor your build process to different environments, ensuring a seamless experience from development to production.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#when-to-use-which","title":"When to Use Which?","text":"<ul> <li> <p>Use a <code>Dockerfile</code> if you want to define the steps for building your Docker image, especially if the conditional logic is related to image configuration, environment setup, or conditional installation of dependencies during the build.</p> </li> <li> <p>Use a <code>builderdocker.sh</code> if you need more advanced automation or orchestration, such as controlling the flow of tasks before or after building the image, interacting with Docker commands dynamically, or managing Docker containers and images.</p> </li> </ul> <p>In summary, both can contain conditional logic, but they serve different purposes and are executed in different contexts.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#fundamental-differences","title":"Fundamental Differences:","text":"Aspect Dockerfile builderdocker.sh Purpose Defines steps for building a Docker image. Automates tasks, including Docker build or management. Execution Context During image build. In the host shell environment (before or after build). Conditional Logic Limited to <code>RUN</code> commands or build arguments. Full shell scripting capabilities (<code>if</code>, <code>for</code>, etc.). Flexibility Limited logic and conditional statements. Highly flexible for complex logic. Example Use Case Creating the final image with build-time conditions. Automating the build and deployment process. Conclusion <ul> <li> <p><code>Dockerfile</code> is used to define how a Docker image should be built. It\u2019s essential for creating consistent, reproducible environments.</p> </li> <li> <p><code>builderdocker.sh</code> is an optional script that simplifies and automates the process of building Docker images by handling dynamic arguments, environment selection, and other tasks that might need to be repeated.</p> </li> <li> <p>If you don\u2019t use <code>builderdocker.sh</code>, you\u2019ll still be able to build Docker images, but you\u2019ll lose the benefits of automation, reduced manual errors, and simplified workflows.</p> </li> </ul> <p>The script is especially useful in CI/CD pipelines or when you need to manage complex build scenarios where environment-specific configurations are required, based on things like the current branch or deployment environment.</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#docker-arguments","title":"Docker Arguments","text":"<p>In <code>Dockerfile</code> and <code>builderdocker.sh</code> (a script file), there are different types of arguments (args) used for defining and configuring the Docker image build process. Let\u2019s go through the main types of arguments used in both:</p>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#dockerfile","title":"Dockerfile","text":"<p>In a Dockerfile, you typically use <code>ARG</code> and <code>ENV</code> to define and pass arguments.</p> <ol> <li> <p><code>ARG</code> (Build-time Argument)</p> <ul> <li> <p><code>ARG</code> is used to define variables that can be passed at build time to the Docker image.</p> </li> <li> <p>These arguments are only available during the build process and are not included in the final image unless you explicitly use <code>ENV</code> to make them available in the image.</p> </li> <li> <p>Syntax:</p> <pre><code>ARG &lt;name&gt;[=&lt;default_value&gt;]\n</code></pre> </li> <li> <p>Example:</p> <pre><code>ARG VERSION=1.0\n</code></pre> </li> </ul> </li> <li> <p><code>ENV</code> (Environment Variable)</p> <ul> <li> <p><code>ENV</code> is used to define environment variables in the Docker image. These variables are accessible within the container once the image is built and the container is running.</p> </li> <li> <p>You can use <code>ARG</code> in conjunction with <code>ENV</code> to pass build-time arguments into the runtime environment.</p> </li> <li> <p>Syntax:</p> <pre><code>ENV &lt;key&gt;=&lt;value&gt;\n</code></pre> </li> <li> <p>Example:</p> <pre><code>ENV APP_VERSION=$VERSION\n</code></pre> </li> </ul> </li> <li> <p><code>--build-arg</code> (Build Arguments Passed During Build)</p> <ul> <li> <p>This is a flag used in the <code>docker build</code> command to pass values to <code>ARG</code> in the Dockerfile.</p> </li> <li> <p>Example:</p> <pre><code>docker build --build-arg VERSION=2.0 .\n</code></pre> </li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2025/04/04/understanding-dockerfile-and-builderdockersh-a-brief-overview/#builderdockersh-shell-script","title":"<code>builderdocker.sh</code> (Shell Script)","text":"<p>In a shell script like <code>builderdocker.sh</code>, arguments are typically passed through positional parameters or flags. These arguments can be used to define variables that will be used within the script for configuring the Docker build or handling build-specific tasks.</p> <ol> <li> <p>Positional Parameters (<code>$1</code>, <code>$2</code>, etc.)</p> <ul> <li> <p>Positional parameters are used to pass arguments to a shell script.</p> </li> <li> <p>They are accessed using <code>$1</code>, <code>$2</code>, etc., where <code>$1</code> represents the first argument, <code>$2</code> represents the second argument, and so on.</p> </li> <li> <p>Example:</p> <pre><code># builderdocker.sh\necho \"The first argument is: $1\"\n</code></pre> </li> </ul> </li> <li> <p>Flags (<code>--flag-name</code> or <code>-f</code>)</p> <ul> <li>Flags can be used in the script to pass options or configuration values.</li> <li>You would typically use a command-line argument parser to handle these flags.</li> <li> <p>Example:</p> <pre><code># builderdocker.sh\nwhile getopts \"a:b:\" opt; do\n    case $opt in\n        a) ARG_A=$OPTARG ;;\n        b) ARG_B=$OPTARG ;;\n        *) echo \"Invalid option\"; exit 1 ;;\n    esac\ndone\n</code></pre> </li> </ul> </li> <li> <p>Environment Variables</p> <ul> <li>You can also pass environment variables in <code>builderdocker.sh</code> that can be accessed in the script.</li> <li>These can be set in the script or passed when running the script.</li> <li> <p>Example:</p> <pre><code>export VERSION=1.0\n</code></pre> </li> </ul> </li> </ol> Summary <ul> <li> <p>In a Dockerfile:</p> <ul> <li><code>ARG</code> defines build-time arguments.</li> <li><code>ENV</code> defines environment variables in the image.</li> <li><code>--build-arg</code> passes arguments to the <code>ARG</code> during the build.</li> </ul> </li> <li> <p>In builderdocker.sh:</p> <ul> <li>Positional parameters (<code>$1</code>, <code>$2</code>, etc.) capture input arguments.</li> <li>Flags (<code>-a</code>, <code>-b</code>, etc.) can be used for more complex input parsing.</li> <li>Environment variables can also be set and used inside the script.</li> </ul> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/","title":"Leveraging .env Files for Scalable React Development","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#leveraging-env-files-for-scalable-react-development","title":"Leveraging <code>.env</code> Files for Scalable React Development","text":"<p>In a large React codebase, there are several important things you might want to define in your <code>.env</code> file to manage configuration effectively.</p> <p>Beyond Hardcoding: Leveraging <code>.env</code> Files for Scalable React Development</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#overview","title":"Overview","text":"<p>Here are some key variables you should consider:</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#1-api-urls","title":"1. API URLs","text":"<ul> <li>Base URL for API Endpoints: This allows you to switch between different environments (development, staging, production).</li> </ul> <pre><code>REACT_APP_API_URL=https://api.yourapp.com\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#2-feature-flags","title":"2. Feature Flags","text":"<ul> <li>Feature Toggles: Use environment variables to enable or disable certain features dynamically.</li> </ul> <pre><code>REACT_APP_ENABLE_NEW_FEATURE=true\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#3-authentication-secrets","title":"3. Authentication Secrets","text":"<ul> <li>API Keys or Tokens: If you are using third-party services (e.g., Stripe, Firebase), store your API keys or tokens securely.</li> </ul> <pre><code>REACT_APP_STRIPE_PUBLIC_KEY=your_stripe_key\nREACT_APP_FIREBASE_API_KEY=your_firebase_key\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#4-analytics-and-tracking-ids","title":"4. Analytics and Tracking IDs","text":"<ul> <li>Analytics IDs: Store any IDs for tracking services like Google Analytics or Mixpanel.</li> </ul> <pre><code>REACT_APP_GOOGLE_ANALYTICS_ID=your_ga_id\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#5-environment-specific-settings","title":"5. Environment Specific Settings","text":"<ul> <li>Environment Type: Define the environment type to make conditional logic easier in your code.</li> </ul> <pre><code>REACT_APP_ENV=development\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#6-static-file-paths","title":"6. Static File Paths","text":"<ul> <li>Base Paths for Assets: If you have a CDN or specific folder structure for static assets.</li> </ul> <pre><code>REACT_APP_ASSET_BASE_URL=https://cdn.yourapp.com/assets/\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#7-timeout-and-retry-settings","title":"7. Timeout and Retry Settings","text":"<ul> <li>Timeout Settings: Define how long your app should wait for a response before timing out.</li> </ul> <pre><code>REACT_APP_API_TIMEOUT=5000\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#8-uiux-configurations","title":"8. UI/UX Configurations","text":"<ul> <li>Theme or Layout Settings: Define settings related to UI themes or layouts.</li> </ul> <pre><code>REACT_APP_DEFAULT_THEME=light\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#9-server-configuration","title":"9. Server Configuration","text":"<ul> <li>Backend Server URL: If your app needs to interact with a backend service, define the server URL.</li> </ul> <pre><code>REACT_APP_BACKEND_URL=http://localhost:5000\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#10-other-third-party-service-configurations","title":"10. Other Third-party Service Configurations","text":"<ul> <li>Webhook URLs, Third-party service keys: Any additional services your app interacts with.</li> </ul> <pre><code>REACT_APP_WEBHOOK_URL=https://your-webhook-url.com\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#best-practices","title":"Best Practices","text":"<ul> <li>Prefix Variables: Always prefix your environment variables with <code>REACT_APP_</code> to make them accessible in a React app.</li> <li>Secure Sensitive Information: Do not commit sensitive information to your version control. Use a <code>.gitignore</code> file to exclude <code>.env</code> files from being tracked.</li> <li>Documentation: Document the environment variables and their purposes for easy reference for your team.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#conclusion","title":"Conclusion","text":"<p>Organizing your environment variables in a <code>.env</code> file enhances the flexibility, security, and maintainability of your React application, especially as it grows in complexity.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/13/leveraging-env-files-for-scalable-react-development/#additional","title":"Additional","text":"<p>The requirement for environment variables to start with the <code>REACT_APP_</code> prefix is specific to Create React App (CRA) and similar React setups, rather than a general Node.js environment requirement. Here\u2019s a bit more detail:</p> <ol> <li> <p>Create React App Specific</p> <ul> <li>CRA Behavior: When using Create React App, the build process (which is based on Webpack) is configured to only expose environment variables that have the <code>REACT_APP_</code> prefix to the client-side code. This is a deliberate design choice to ensure that only explicitly intended variables are accessible in the browser.</li> </ul> </li> <li> <p>Node.js Environment</p> <ul> <li>General Node.js: In a Node.js environment (for server-side applications), there are no such restrictions. You can define and access environment variables freely, and they do not need a specific prefix. You can access them using <code>process.env.VARIABLE_NAME</code> directly.</li> </ul> </li> </ol> <p>Summary</p> <ul> <li>For React (especially with CRA): Use the <code>REACT_APP_</code> prefix for any environment variables you want to access in your React components.</li> <li>For Node.js: There are no such restrictions, and you can define and access environment variables without any specific prefix.</li> </ul> <p>This distinction is important to keep in mind when working on full-stack applications that involve both server-side and client-side code.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/","title":"Effortless Object Management: Excluding Empty Properties in JavaScript","text":"","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#effortless-object-management-excluding-empty-properties-in-javascript","title":"Effortless Object Management: Excluding Empty Properties in JavaScript","text":"<p>To ensure that you only include properties in <code>props</code> that have values, you can create the <code>props</code> object conditionally.</p> <p>Here are a couple of ways to achieve that:</p>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-1-conditional-object-construction","title":"Method 1: Conditional Object Construction","text":"<p>You can conditionally add properties to the <code>props</code> object using a combination of object spread syntax and conditional checks.</p> <pre><code>let props = {\n  ...(sortTypeValue &amp;&amp; { SortType: sortTypeValue }),\n  ...(selectedUserId &amp;&amp; { UserId: selectedUserId }),\n  ...(selectedDate &amp;&amp; { DailyDiaryDate: selectedDate }),\n  ...(startDate &amp;&amp; { DailyDiaryDateFrom: startDate }),\n  ...(endDate &amp;&amp; { DailyDiaryDateTo: endDate }),\n};\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-2-using-a-helper-function","title":"Method 2: Using a Helper Function","text":"<pre><code>const createProps = (\n  sortTypeValue,\n  selectedUserId,\n  selectedDate,\n  startDate,\n  endDate\n) =&gt; {\n  const props = {};\n  if (sortTypeValue) props.SortType = sortTypeValue;\n  if (selectedUserId) props.UserId = selectedUserId;\n  if (selectedDate) props.DailyDiaryDate = selectedDate;\n  if (startDate) props.DailyDiaryDateFrom = startDate;\n  if (endDate) props.DailyDiaryDateTo = endDate;\n  return props;\n};\n\nlet props = createProps(\n  sortTypeValue,\n  selectedUserId,\n  selectedDate,\n  startDate,\n  endDate\n);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#method-3-using-objectentries-and-reduce","title":"Method 3: Using <code>Object.entries</code> and <code>reduce</code>","text":"<p>Another way to dynamically filter properties is to use <code>Object.entries</code> combined with <code>reduce</code>:</p> <pre><code>const initialProps = {\n  SortType: sortTypeValue,\n  UserId: selectedUserId,\n  DailyDiaryDate: selectedDate,\n  DailyDiaryDateFrom: startDate,\n  DailyDiaryDateTo: endDate,\n};\n\nlet props = Object.entries(initialProps).reduce((acc, [key, value]) =&gt; {\n  if (value) {\n    acc[key] = value;\n  }\n  return acc;\n}, {});\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#summary","title":"Summary","text":"<p>All of these methods effectively create an object containing only the properties that have non-empty values. Choose the approach that you find most readable and maintainable for your codebase!</p>","tags":["Personal"]},{"location":"blog/2024/04/10/effortless-object-management-excluding-empty-properties-in-javascript/#utility-function-createprops","title":"Utility Function: <code>createProps</code>","text":"<p>You can create a utility function to conditionally construct an object, which can then be reused throughout your codebase. Here\u2019s how you can implement such a utility function in JavaScript:</p> <pre><code>// conditionalProps.js\n// utility.js\n\n/**\n * Create an object with only defined properties.\n *\n * @param {Object} properties - An object where each value can be any type.\n * @returns {Object} - A new object containing only the properties with truthy values.\n */\nexport const createProps = (properties) =&gt; {\n  return Object.entries(properties).reduce((acc, [key, value]) =&gt; {\n    if (value) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n};\n</code></pre> Usage ExampleBenefits <p>You can use this utility function as follows:</p> <pre><code>import { createProps } from './utility';\n\nconst sortTypeValue = \"asc\"; // Example values\nconst selectedUserId = null;  // Example values\nconst selectedDate = \"2024-10-01\"; // Example values\nconst startDate = \"\"; // Example values\nconst endDate = \"2024-10-31\"; // Example values\n\nconst props = createProps({\n    SortType: sortTypeValue,\n    UserId: selectedUserId,\n    DailyDiaryDate: selectedDate,\n    DailyDiaryDateFrom: startDate,\n    DailyDiaryDateTo: endDate,\n});\n\nconsole.log(props);\n// Output: { SortType: \"asc\", DailyDiaryDate: \"2024-10-01\", DailyDiaryDateTo: \"2024-10-31\" }\n</code></pre> <p>Benefits of Using a Utility Function</p> <ol> <li>Reusability: You can use this function in multiple places throughout your application.</li> <li>Maintainability: If you need to change how properties are filtered, you can do so in one place.</li> <li>Clarity: The function name clearly describes its purpose, improving code readability.</li> </ol> <p>This utility function can be enhanced further if needed, for example, by allowing for custom checks for \"defined\" values or by handling different data types more specifically. But as it stands, it provides a solid foundation for creating objects with only the necessary properties.</p>","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/","title":"Embarking on a Tech Odyssey","text":"","tags":["Personal"]},{"location":"blog/2023/01/31/embarking-on-a-tech-odyssey/#embarking-on-a-tech-odyssey","title":"Embarking on a Tech Odyssey","text":"<p>My Journey into the World of Technology</p> <p>Greetings, fellow tech enthusiasts! As I take my first steps into the vast and ever-evolving realm of technology, I'm thrilled to inaugurate my blog\u2014a digital canvas where I'll document my journey of learning, exploring, and embracing the marvels of the tech universe.</p> <p>This blog is more than just a digital diary; it's a chronicle of my endeavor to comprehend the intricacies of coding, unravel the mysteries of software development, and navigate the dynamic landscapes of emerging technologies. Expect a blend of excitement, curiosity, and occasional challenges as I embark on this exhilarating adventure.</p> <p>Join me as I delve into the core of programming languages, grapple with the nuances of web development, and dance with the algorithms that power our digital world. I'm here to share not just the victories but also the stumbles, turning each obstacle into a stepping stone towards proficiency.</p> <p>Whether you're a seasoned coder or a fellow novice, I invite you to accompany me on this odyssey. Let's celebrate the victories, learn from the setbacks, and collectively revel in the awe-inspiring world of technology. Here's to the start of a thrilling journey\u2014one blog post at a time!</p>","tags":["Personal"]},{"location":"blog/2024/04/15/folder-structure/","title":"Folder Structure","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#folder-structure","title":"Folder Structure","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#axios-interceptors","title":"Axios Interceptors","text":"<p>Using Axios interceptors is a great way to handle requests and responses globally, allowing you to add features like authentication tokens, error handling, or logging without modifying individual API calls. Here's how you can incorporate Axios interceptors into your project:</p> <pre><code>src\n\u2502\n\u251c\u2500\u2500 features\n\u2502   \u251c\u2500\u2500 blog\n\u2502   \u2502   \u251c\u2500\u2500 api.js\n\u2502   \u2502   \u251c\u2500\u2500 service.js\n\u2502   \u2502   \u2514\u2500\u2500 slice.js\n\u2502   \u2514\u2500\u2500 gallery\n\u2502       \u251c\u2500\u2500 api.js\n\u2502       \u251c\u2500\u2500 service.js\n\u2502       \u2514\u2500\u2500 slice.js\n\u2502\n\u251c\u2500\u2500 middleware\n\u2502   \u251c\u2500\u2500 loggerMiddleware.js\n\u2502\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 axiosInstance.js\n\u2502   \u251c\u2500\u2500 dataService.js\n\u2502   \u2514\u2500\u2500 axiosInterceptors.js\n\u2502\n\u2514\u2500\u2500 store\n    \u251c\u2500\u2500 rootReducer.js\n    \u2514\u2500\u2500 store.js\n</code></pre> axiosInstance.jsaxiosInterceptors.jsdataService.js <pre><code>import axios from \"axios\";\n\nconst axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n});\n\nexport default axiosInstance;\n</code></pre> <pre><code>import axiosInstance from \"./axiosInstance\";\n\n// Request interceptor\naxiosInstance.interceptors.request.use(\n    (config) =&gt; {\n        // Add authorization token or modify request config\n        const token = localStorage.getItem(\"token\"); // Example: Retrieve token from localStorage\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) =&gt; {\n        return Promise.reject(error);\n    }\n);\n\n// Response interceptor\naxiosInstance.interceptors.response.use(\n    (response) =&gt; {\n        // Handle successful response\n        return response;\n    },\n    (error) =&gt; {\n        // Handle errors globally\n        console.error(\"API Error:\", error);\n        return Promise.reject(error);\n    }\n);\n\nexport default axiosInstance; // Export the configured client\n</code></pre> <pre><code>import axiosInstance from \"./axiosInstance\";\n\nexport const fetchData = (url, signal) =&gt; {\n    return axiosInstance.get(url, {\n        cancelToken: signal,\n    });\n};\n\nexport const postData = (url, data, signal) =&gt; {\n    return axiosInstance.post(url, data, {\n        cancelToken: signal,\n    });\n};\n\nexport const putData = (url, data, signal) =&gt; {\n    return axiosInstance.put(url, data, {\n        cancelToken: signal,\n    });\n};\n\nexport const deleteData = (url, signal) =&gt; {\n    return axiosInstance.delete(url, {\n        cancelToken: signal,\n    });\n};\n</code></pre> ExampleBenefitsExplanation of the MethodsMeaningful Name <pre><code>// src/features/blog/apiEndpoints.js\n\nimport { fetchData, postData, putData, deleteData } from '../../services/dataService';\n\n// Example usage\nexport const getBlogPosts = (signal) =&gt; {\n    return fetchData('/posts', signal);\n};\n\nexport const createBlogPost = (data, signal) =&gt; {\n    return postData('/posts', data, signal);\n};\n\nexport const updateBlogPost = (id, data, signal) =&gt; {\n    return putData(`/posts/${id}`, data, signal);\n};\n\nexport const deleteBlogPost = (id, signal) =&gt; {\n    return deleteData(`/posts/${id}`, signal);\n};\n</code></pre> <ul> <li>Reusability: You can reuse these methods across different parts of your application, making your code cleaner and more modular.</li> <li>Maintainability: If you need to change how requests are made or add common headers, you can do it in one place.</li> <li>Scalability: As your application grows, you can easily add more methods to <code>dataService.js</code> without affecting existing functionality.</li> </ul> <ol> <li>fetchData: This method handles GET requests to retrieve data from a specified URL.</li> <li>postData: This method handles POST requests to send data to a specified URL.</li> <li>putData: This method handles PUT requests to update existing data at a specified URL.</li> <li>deleteData: This method handles DELETE requests to remove data from a specified URL.</li> </ol> <p>For <code>apiClient</code>:</p> <ul> <li><code>httpClient</code>: A straightforward name that indicates it handles HTTP requests.</li> <li><code>axiosInstance</code>: Indicates that this is an instance of Axios specifically configured for your app.</li> <li><code>requestClient</code>: Emphasizes that this client is responsible for making requests.</li> <li><code>apiConnector</code>: Suggests that this module connects your application to the API.</li> <li><code>networkClient</code>: Highlights that this client is responsible for network communications.</li> </ul> <p>For <code>apiService</code>:</p> <ul> <li><code>apiEndpoints</code>: Indicates that this file defines the various endpoints your application communicates with.</li> <li><code>apiRequests</code>: Focuses on the request methods being defined within the file.</li> <li><code>dataService</code>: Suggests that this module handles data-fetching logic.</li> <li><code>apiUtility</code>: Implies that the file contains utility functions for API interactions.</li> <li><code>apiFacade</code>: Indicates that this module serves as a facade for interacting with the API.</li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/15/folder-structure/#advanced","title":"Advanced","text":"StructureBenefits of This Placement <pre><code>redux\n\u2502\n\u251c\u2500\u2500 features                   // Slice features for different domains\n\u2502   \u251c\u2500\u2500 blog                   // Blog-related functionality\n\u2502   \u2502   \u251c\u2500\u2500 api.js             // API endpoint functions for the blog\n\u2502   \u2502   \u251c\u2500\u2500 service.js         // Business logic and API calls for the blog\n\u2502   \u2502   \u2514\u2500\u2500 slice.js           // Redux slice for managing blog state\n\u2502   \u2514\u2500\u2500 gallery                // Gallery-related functionality\n\u2502       \u251c\u2500\u2500 api.js             // API endpoint functions for the gallery\n\u2502       \u251c\u2500\u2500 service.js         // Business logic and API calls for the gallery\n\u2502       \u2514\u2500\u2500 slice.js           // Redux slice for managing gallery state\n\u2502\n\u251c\u2500\u2500 middleware                 // Custom middleware for Redux\n\u2502   \u251c\u2500\u2500 loggerMiddleware.js     // Middleware for logging actions\n\u2502\n\u251c\u2500\u2500 services                   // Shared services and configurations\n\u2502   \u251c\u2500\u2500 axiosInstance.js       // Axios instance for API calls\n\u2502   \u251c\u2500\u2500 dataService.js         // Generic data fetching utilities\n\u2502   \u251c\u2500\u2500 axiosInterceptors.js    // Axios interceptors for request/response handling\n\u2502   \u2514\u2500\u2500 apiManager.js          // Centralized API configuration for different APIs\n\u2502\n\u2514\u2500\u2500 store                      // Redux store setup\n    \u251c\u2500\u2500 rootReducer.js         // Combines all reducers\n    \u2514\u2500\u2500 store.js               // Creates and configures the Redux store\n</code></pre> <ol> <li> <p>Centralized Configuration: By placing <code>apiManager.js</code> in the <code>services</code> folder, you centralize the logic for API management alongside other shared services. This makes it easy to find and manage all related configurations.</p> </li> <li> <p>Easy Access: Features that require API interactions can easily import <code>apiManager.js</code> along with other services, promoting code reusability.</p> </li> <li> <p>Logical Grouping: Keeping the API manager with other service-related files keeps your project organized and logically structured.</p> </li> </ol> <p>Example of <code>apiManager.js</code></p> <p>Here\u2019s a simple implementation of what your <code>apiManager.js</code> might look like:</p> <pre><code>// services/apiManager.js\nimport axiosInstance from \"./axiosInstance\";\n\nconst apiManager = {\n  blog: axiosInstance.create({\n    baseURL: process.env.REACT_APP_BLOG_API_URL,\n  }),\n  dashboard: axiosInstance.create({\n    baseURL: process.env.REACT_APP_BASE_API_URL,\n  }),\n};\n\nexport default apiManager;\n</code></pre> <p>Usage in Feature Files</p> <p>You can now use the <code>apiManager</code> in your feature service files. For example, in <code>blog/service.js</code>, you might have:</p> <pre><code>// features/blog/service.js\nimport apiManager from \"../../services/apiManager\";\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n  const response = await apiManager.blog.get(\"/posts\", { cancelToken: signal });\n  return response.data;\n};\n\n// Add other functions for the blog feature as needed\n</code></pre> <p>Summary</p> <p>Placing <code>apiManager.js</code> in the services folder keeps your structure clean and organized, making it easier to manage and access various API configurations. This approach promotes reusability and clarity in your project.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/","title":"React State Updates: When to Use Functional Patterns vs. Direct Assignments","text":"","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#react-state-updates-when-to-use-functional-patterns-vs-direct-assignments","title":"React State Updates: When to Use Functional Patterns vs. Direct Assignments","text":"<p>The difference between <code>setContextRightClickId(prevId =&gt; id)</code> and <code>setContextRightClickId(data?.id)</code> lies in how each approach updates the state.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#1-using-functional-update-setcontextrightclickidprevid-id","title":"1. Using Functional Update: <code>setContextRightClickId(prevId =&gt; id)</code>","text":"<ul> <li>Description: This approach uses a functional update. It takes the previous state as an argument and returns the new state.</li> <li>Use Case: It's beneficial when the new state depends on the previous state, such as when multiple updates might occur quickly in succession.</li> <li>Standard Practice: This is often used for cases where you need to rely on the current state to compute the new state. It helps avoid potential issues with stale state.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#2-using-direct-assignment-setcontextrightclickiddataid","title":"2. Using Direct Assignment: <code>setContextRightClickId(data?.id)</code>","text":"<ul> <li>Description: This approach directly sets the state to a new value without depending on the previous state.</li> <li>Use Case: It\u2019s straightforward when you're simply updating the state based on an event or action that doesn't rely on the previous state.</li> <li>Standard Practice: This is perfectly acceptable for many cases, especially when you're directly setting a value based on an event (like a click).</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#which-to-use","title":"Which to Use?","text":"<ul> <li> <p>Use Functional Update: When you need to ensure the update is based on the latest state or when the update logic is more complex. For example, if you're incrementing a count or toggling a value based on the previous state.</p> </li> <li> <p>Use Direct Assignment: When you simply want to set a state based on an event or static data, and there's no chance of multiple updates overlapping.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#recommendation","title":"Recommendation","text":"<p>For your specific case of setting the context menu ID based on a right-click, either method will work. However, if you're confident that there will be no rapid state updates affecting this particular value, you can use <code>setContextRightClickId(data?.id)</code>. If you want to be extra cautious or if there's any complexity, prefer the functional update.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#example-in-context","title":"Example in Context","text":"<p>For setting the right-clicked ID, both approaches are valid, but typically:</p> <pre><code>// When directly using the ID from an event\nsetContextRightClickId(data?.id); // Direct assignment\n\n// When you might have complex state logic or multiple updates\nsetContextRightClickId((prevId) =&gt; id); // Functional update (not strictly necessary here)\n</code></pre> <p>In many practical scenarios, developers tend to use direct assignments for simplicity unless state dependencies dictate otherwise.</p>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#main-difference","title":"Main Difference","text":"<p>The main differences between using <code>setContextRightClickId(prevId =&gt; id)</code> (functional update) and <code>setContextRightClickId(data?.id)</code> (direct assignment) are:</p> 1. Context of Use2. Concurrency Handling3. Readability and Complexity <ul> <li> <p>Functional Update (<code>prevId =&gt; id</code>):</p> <ul> <li>Utilizes the previous state to calculate the new state.</li> <li>Essential when the new state depends on the old state, especially in scenarios with potential concurrent updates.</li> </ul> </li> <li> <p>Direct Assignment (<code>data?.id</code>):</p> <ul> <li>Sets the state directly to a specific value based on external input (like an event).</li> <li>Simplifies the logic when you don't need to consider the previous state.</li> </ul> </li> </ul> <ul> <li> <p>Functional Update:</p> <ul> <li>Safer in scenarios where multiple state updates may occur quickly or simultaneously. It ensures you're working with the most up-to-date state.</li> </ul> </li> <li> <p>Direct Assignment:</p> <ul> <li>May lead to stale state issues if there are rapid updates, as it does not consider the current state when setting the new value.</li> </ul> </li> </ul> <ul> <li> <p>Functional Update:</p> <ul> <li>Can be more verbose, which may be helpful in complex scenarios, but could add unnecessary complexity if the previous state is not needed.</li> </ul> </li> <li> <p>Direct Assignment:</p> <ul> <li>More concise and easier to read when the new value does not depend on the previous state.</li> </ul> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/01/react-state-updates-when-to-use-functional-patterns-vs-direct-assignments/#when-to-use-each-approach","title":"When to Use Each Approach","text":"Use Functional UpdateUse Direct Assignment <ul> <li>When the next state depends on the current state.</li> <li>When dealing with updates that may occur rapidly or in quick succession.</li> </ul> <ul> <li>When you're directly assigning a value that doesn't depend on the previous state.</li> <li>When you want clearer, simpler code and are certain about the context.</li> </ul> Summary <ul> <li>Functional Update is more robust and safe for scenarios where the new state depends on the previous state.</li> <li>Direct Assignment is simpler and works well when you have a straightforward update.</li> </ul> <p>In your specific case of setting an ID on right-click, either can work, but if you don't anticipate rapid updates or dependencies, the direct assignment is often the preferred choice for its simplicity.</p>","tags":["Personal"]},{"location":"blog/2024/01/05/giscus-comment-system/","title":"Giscus comment system","text":""},{"location":"blog/2024/01/05/giscus-comment-system/#giscus-comment-system","title":"Giscus comment system","text":"<p>A comments system powered by GitHub Discussions. GitHub discussions is a forum that can be enabled on every GitHub repository. It makes it easy for developers to discuss new features, get feedback from the community, create polls, make announcements, and more.</p> <p>GitHub Discussions is a one stop collaboration place for developers and community members.</p> <pre><code>&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  // pathname is after your top-level domain url.\n  // Example: bishow-thapa.github.io/blog\n  // your data-mapping should be blog\n\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n</code></pre> <p>I'm using mkdocs, in mkdocks your should override the comment.html file. To overide the comments.html file, you should add <code>custom_dir</code> properties in the <code>mkdocs.yml</code> file. In the root folder (parent to docs folder) of your project, create a folder called <code>overrides</code>, inside overrides create a folder called <code>partials</code>. In the partials folder, create a <code>comments.html</code> file.</p> <p>After generating code for here, paste your code below <code>&lt;!-- Insert generated snippet here --&gt;</code>. Make sure to add the <code>pathname</code>.</p> <pre><code>{% if page.meta.comments %}\n&lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n\n// &lt;!-- Insert generated snippet here --&gt;\n&lt;script\n  src=\"https://giscus.app/client.js\"\n  data-repo=\"Bishow-Thapa/github-comments\"\n  data-repo-id=\"your_repo_id\"\n  data-category=\"Announcements\"\n  data-category-id=\"your_category_id\"\n  data-mapping=\"blog\"\n  data-strict=\"0\"\n  data-reactions-enabled=\"1\"\n  data-emit-metadata=\"0\"\n  data-input-position=\"bottom\"\n  data-theme=\"preferred_color_scheme\"\n  data-lang=\"en\"\n  crossorigin=\"anonymous\"\n  async\n&gt;&lt;/script&gt;\n\n&lt;!-- Synchronize Giscus theme with palette --&gt;\n&lt;script&gt;\n  var giscus = document.querySelector(\"script[src*=giscus]\");\n\n  // Set palette on initial load\n  var palette = __md_get(\"__palette\");\n  if (palette &amp;&amp; typeof palette.color === \"object\") {\n    var theme = palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n    // Instruct Giscus to set theme\n    giscus.setAttribute(\"data-theme\", theme);\n  }\n\n  // Register event handlers after documented loaded\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var ref = document.querySelector(\"[data-md-component=palette]\");\n    ref.addEventListener(\"change\", function () {\n      var palette = __md_get(\"__palette\");\n      if (palette &amp;&amp; typeof palette.color === \"object\") {\n        var theme =\n          palette.color.scheme === \"slate\" ? \"transparent_dark\" : \"light\";\n\n        // Instruct Giscus to change theme\n        var frame = document.querySelector(\".giscus-frame\");\n        frame.contentWindow.postMessage(\n          { giscus: { setConfig: { theme } } },\n          \"https://giscus.app\"\n        );\n      }\n    });\n  });\n&lt;/script&gt;\n{% endif %}\n</code></pre>"},{"location":"blog/2024/01/05/giscus-comment-system/#reference","title":"Reference","text":"<ul> <li>giscus-app</li> <li>Tips for using giscus</li> <li>Pathname match : giscus issue</li> <li>Adding a comment system</li> <li>giscus pathmane demo</li> <li>How to set your blog: step by step</li> <li>github discussion tutorial: freecodecamp</li> </ul>"},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/","title":"Embracing Change: Navigating the Landscape of 2023","text":"","tags":["Personal"]},{"location":"blog/2023/12/31/embracing-change-navigating-the-landscape-of-2023/#embracing-change-navigating-the-landscape-of-2023","title":"Embracing Change: Navigating the Landscape of 2023","text":"<p>As we step into the dawn of 2023, the world is a canvas painted with innovation and resilience. The past year has been a testament to humanity's ability to adapt and thrive in the face of challenges. In 2023, we find ourselves at the intersection of technology and human connection, where the digital and physical realms seamlessly intertwine.</p> <p>The rapid evolution of technology continues to redefine the way we live, work, and interact. Artificial intelligence, blockchain, and quantum computing are no longer buzzwords but integral components of our daily lives. As we embrace these advancements, a renewed focus on sustainability and ethical practices is shaping our collective consciousness.</p> <p>2023 is not just a year; it's a chapter in our ongoing story of progress. Climate action takes center stage as communities worldwide unite to address environmental concerns. The global shift towards renewable energy and sustainable practices reflects a shared commitment to preserving our planet for future generations.</p> <p>In the midst of change, a sense of unity prevails. The challenges of recent times have ignited a spirit of compassion and empathy. As we forge ahead into 2023, let us celebrate the triumphs of resilience, the promise of technological innovation, and the power of collective humanity to shape a brighter, interconnected future.</p> <p></p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/","title":"How to Generate a Secure Secret Key in Django","text":"","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#how-to-generate-a-secure-secret-key-in-django","title":"How to Generate a Secure Secret Key in Django","text":"<p>To quickly generate a secret key for a Django project, you can use several methods. Here are a couple of easy ways to do it directly in your terminal or using Python:</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-1-using-djangos-get_random_secret_key","title":"Method 1: Using Django's <code>get_random_secret_key</code>","text":"<p>If you have Django installed, you can use Django's built-in method:</p> <pre><code>python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n</code></pre> <p>This will output a secure random secret key.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-2-using-python-with-secrets","title":"Method 2: Using Python with <code>secrets</code>","text":"<p>If you want to create a secret key manually using Python's <code>secrets</code> module, you can run:</p> <pre><code>python -c \"import secrets; print(secrets.token_urlsafe(50))\"\n</code></pre> <p>This generates a secure random URL-safe text string that can be used as a secret key.</p>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#method-3-using-django-shell","title":"Method 3: Using Django Shell","text":"<p>If you're already working within a Django project, you can also generate a secret key in the Django shell:</p> <ol> <li> <p>Start the Django shell:</p> <pre><code>python manage.py shell\n</code></pre> </li> <li> <p>Then run:</p> <pre><code>from django.core.management.utils import get_random_secret_key\nprint(get_random_secret_key())\n</code></pre> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/04/how-to-generate-a-secure-secret-key-in-django/#adding-to-your-django-settings","title":"Adding to Your Django Settings","text":"<p>Once you've generated a secret key, add it to your <code>settings.py</code> file:</p> <pre><code>SECRET_KEY = 'your_generated_secret_key_here'\n</code></pre> <p>Make sure to keep this key secure and never expose it in public repositories!</p> python -c <p>In the context of the <code>python -c</code> command, the <code>-c</code> option stands for \"command.\" It tells the Python interpreter to execute the string of Python code that follows it as a command, rather than running a script from a file.</p> <p>Summary</p> <ul> <li><code>-c</code>: Short for \"command.\"</li> <li>Usage: Allows you to run Python code provided directly as a string.</li> </ul> <p>This feature is useful for executing quick, one-off snippets of Python code directly from the command line without the need to create a separate script file.</p>","tags":["Personal"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/","title":"Adding Syntax hightlighting in the material","text":"","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#adding-syntax-hightlighting-in-the-material","title":"Adding Syntax hightlighting in the material","text":"<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code.</p>","tags":["Python"]},{"location":"blog/2024/01/09/adding-syntax-hightlighting-in-the-material/#dependencies","title":"Dependencies","text":"<pre><code>pip list\n</code></pre> <p>if you haven't installed <code>Pygments</code>.</p> <pre><code>#Install\n\npip install Pygments\n</code></pre> <p>Added this in the <code>mkdocs.yml</code> file.</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul> <p>Important</p> <ul> <li>Using code blocks</li> <li>Adding a title</li> <li>Adding line numbers</li> <li>Highlighting specific lines</li> <li>Custom syntax theme</li> </ul> <p>Look for Grouping code blocks it's amazing</p> <p>If you want to add copy clipboard in your code then</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> <p>For more info click here</p> <p>List of language &amp; framework supported by the Pygments with their short names used in markdown.</p> Name Extension(s) Short name(s) <code>CSS</code> *.css css <code>SCSS</code> *.scss scss <code>JavaScript</code> .js, .jsm javascript, js <code>TypeScript</code> *.ts typescript, ts <code>JSX</code> .jsx, .react jsx, react <code>Python</code> .py, .pyw, .pyi, .jy, *.sage, python, py, sage, python3 <code>Django/Jinja</code> None django, jinja <code>Batchfile</code> .bat, .cmd batch, bat, dosbatch, winbatch","tags":["Python"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"","tags":["Personal"]},{"location":"blog/2024/01/01/elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer/#elevating-my-craft-unveiling-the-2024-resolutions-of-a-react-developer","title":"Elevating My Craft: Unveiling the 2024 Resolutions of a React Developer","text":"<p>As the digital landscape continues to evolve, the role of a software engineer, especially one specializing in React development, becomes increasingly dynamic. As I stand on the threshold of 2024, it's time to set resolutions that will not only propel my career forward but also reflect the spirit of continuous learning inherent in the tech industry.</p> <p>First and foremost, my resolution is to deepen my expertise in React development. React, a JavaScript library for building user interfaces, has seen remarkable advancements, and I am eager to explore its latest features and best practices. This involves staying abreast of updates, diving into the React ecosystem, and mastering advanced concepts to deliver more efficient and scalable applications.</p> <p>In tandem with mastering React, I aim to broaden my skill set by exploring complementary technologies. This includes delving into state management libraries like Redux, enhancing my understanding of server-side rendering, and embracing GraphQL for more efficient data querying. The goal is not just proficiency but a holistic understanding of the tools that synergize with React, creating a well-rounded skill set.</p> <p>Beyond technical skills, I aspire to become an active contributor to the developer community. Engaging in open-source projects, participating in forums, and sharing knowledge through blogs or tutorials will not only contribute to the collective learning but also foster connections within the expansive world of React developers.</p> <p>2024 is the year I commit to attending industry conferences and meetups to network with fellow developers, share experiences, and gain fresh perspectives. Learning from others' successes and challenges is an invaluable aspect of professional growth, and these interactions can provide insights that go beyond what traditional learning resources offer.</p> <p>In essence, my 2024 resolutions are not just about acquiring technical knowledge but also about fostering a mindset of continuous improvement. By delving deeper into React, expanding my technological horizons, contributing to the community, and connecting with peers, I aim to elevate my career as a React developer to new heights in the fast-paced and ever-evolving world of software engineering.</p> <p></p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/","title":"Resolving GPG Key Errors in Ubuntu Repositories: Causes, Solutions, and Prevention","text":"","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention","title":"Resolving GPG Key Errors in Ubuntu Repositories: Causes, Solutions, and Prevention","text":"<p>This documentation provides an overview of how to troubleshoot and resolve GPG key errors in Ubuntu repositories, such as the \"NO_PUBKEY\" error. It also provides guidelines on how to prevent these errors in the future.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#introduction","title":"Introduction","text":"<p>When you encounter errors like \"The following signatures couldn't be verified because the public key is not available: NO_PUBKEY,\" it usually means the system is unable to authenticate packages from a specific repository. This guide covers the reasons behind these errors, how to solve them, and how to prevent them from occurring in the future.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Causes of GPG Key Errors</li> <li>Solutions to GPG Key Errors</li> <li>Preventing GPG Key Errors in the Future</li> </ul>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#causes-of-gpg-key-errors","title":"Causes of GPG Key Errors","text":"<p>The \"NO_PUBKEY\" error is usually triggered by one or more of the following reasons:</p> <ol> <li> <p>Missing or Invalid GPG Key</p> <p>Each repository uses a GPG key to sign its package metadata. If your system does not have the correct public key, it will fail to verify the repository, resulting in this error.</p> </li> <li> <p>Repository Key Rotation</p> <p>Repositories, such as Docker, periodically rotate their GPG keys. When this happens, the older keys may no longer work, causing verification errors.</p> </li> <li> <p>Repository Added Without Key</p> <p>When a repository is added manually but its associated GPG key is not imported, the repository's authenticity cannot be verified, triggering the \"NO_PUBKEY\" error.</p> </li> </ol> Conclusion <p>These are the primary causes of GPG key errors in Ubuntu repositories. Understanding the root cause will help you quickly resolve the issue and avoid future errors.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#solutions-to-gpg-key-errors","title":"Solutions to GPG Key Errors","text":"<p>To resolve GPG key errors in Ubuntu repositories, follow these steps:</p> <ol> <li> <p>Add the Missing GPG Key</p> <p>If the error indicates that a public key is missing, you can import it manually using the following command:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc\n</code></pre> </li> <li> <p>Update Your Package List</p> <p>After adding the key, refresh your package list with:</p> <pre><code>sudo apt update\n</code></pre> <p>This will allow Ubuntu to fetch the repository metadata and use the newly added GPG key for verification.</p> </li> <li> <p>Verify Repository Integrity</p> <p>To ensure the error is resolved, you can check if the repository's metadata is now authenticated. If the error persists, verify that the correct key has been added and that the repository URL is accurate.</p> </li> </ol> Conclusion <p>By adding the missing key and updating your package list, you can easily resolve GPG key errors in Ubuntu repositories.</p>","tags":["Personal"]},{"location":"blog/2025/03/01/resolving-gpg-key-errors-in-ubuntu-repositories-causes-solutions-and-prevention/#preventing-gpg-key-errors-in-the-future","title":"Preventing GPG Key Errors in the Future","text":"<p>To avoid GPG key errors in the future, consider the following best practices:</p> <ol> <li> <p>Regularly Update Repository Keys</p> <p>Repositories periodically rotate their GPG keys. It's a good idea to check for key updates from time to time, especially when you encounter errors. Docker, for example, will often announce key changes on their website.</p> </li> <li> <p>Use the New Keyring Management System</p> <p>Instead of using the deprecated apt-key command, store GPG keys in <code>/etc/apt/trusted.gpg.d/</code> for better key management:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc\n</code></pre> </li> <li> <p>Automate Key Management</p> <p>If you're managing multiple systems, automate the key management process. You can write scripts to check for key updates and ensure they are properly added.</p> </li> <li> <p>Monitor Repository Security Notices</p> <p>Keep track of security announcements from your repository providers. They will often announce key rotations or other important updates, which can help you stay ahead of any potential issues.</p> </li> </ol> Conclusion <p>By following these practices, you can minimize the chances of encountering GPG key errors in the future and ensure smooth package management on your system.</p>","tags":["Personal"]},{"location":"blog/2024/04/17/rtk-in-depth/","title":"RTK in depth","text":"","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#rtk-in-depth","title":"RTK in depth","text":"<p>RTK (Redux Toolkit) provides a powerful way to manage state in a React application using Redux. One of its key features is the createSlice function, which simplifies the process of creating Redux actions and reducers. When you create a slice, it automatically generates action creators based on the reducers you define.</p>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#breakdown-of-createslice","title":"Breakdown of createSlice","text":"<ol> <li> <p>Structure: A slice contains three main components:</p> <ul> <li>Name: A string that identifies the slice.</li> <li>Initial State: The starting state of your slice.</li> <li>Reducers: An object where each key is an action type and its corresponding value is a reducer function that defines how the state should change.</li> </ul> </li> <li> <p>Generated Actions: When you define reducers in a slice, RTK automatically generates action creators for each of them. These action creators are functions that return action objects, which can be dispatched to the Redux store.</p> </li> </ol> ExampleKey Concepts <pre><code>import { createSlice } from '@reduxjs/toolkit';\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: { value: 0 },\n    reducers: {\n        increment: (state) =&gt; {\n            state.value += 1; // Directly mutates the state\n        },\n        decrement: (state) =&gt; {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action) =&gt; {\n            state.value += action.payload;\n        },\n    },\n});\n\n// Actions generated from the reducers\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The reducer itself\nexport default counterSlice.reducer;\n</code></pre> <ol> <li>Automatic Action Creators: In the above example, <code>increment</code>, <code>decrement</code>, and <code>incrementByAmount</code> are action creators that RTK generates for you. You can dispatch these actions in your components.</li> <li>Payloads: The <code>incrementByAmount</code> action takes a payload (which is passed in the action parameter) to adjust the counter by a specific amount.</li> <li>Immutable Updates: RTK uses Immer under the hood, which allows you to write \"mutative\" code in reducers. Immer takes care of creating a new state tree, making your reducers simpler and more intuitive.</li> </ol>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/17/rtk-in-depth/#using-the-actions","title":"Using the Actions","text":"<p>You can dispatch these actions in your components like this:</p> ExampleSummary <pre><code>import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increment, decrement, incrementByAmount } from './counterSlice';\n\nconst Counter = () =&gt; {\n    const dispatch = useDispatch();\n    const count = useSelector((state) =&gt; state.counter.value);\n\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{count}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; dispatch(increment())}&gt;Increment&lt;/button&gt;\n            &lt;button onClick={() =&gt; dispatch(decrement())}&gt;Decrement&lt;/button&gt;\n            &lt;button onClick={() =&gt; dispatch(incrementByAmount(5))}&gt;Increment by 5&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default Counter;\n</code></pre> <ul> <li>Efficiency: RTK's <code>createSlice</code> simplifies state management by automatically generating actions and reducers.</li> <li>Readability: The approach makes it easier to read and understand the flow of state changes.</li> <li>Best Practices: Encourages best practices with immutability and structure, making your Redux code cleaner and more maintainable.</li> </ul> <p>This encapsulation of actions and reducers not only streamlines your code but also enhances maintainability, especially in larger applications.</p>","tags":["React","Toolkit","RTK"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/","title":"Understanding Async/Await in Redux Thunks and React Components","text":"","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#understanding-asyncawait-in-redux-thunks-and-react-components","title":"Understanding Async/Await in Redux Thunks and React Components","text":"<p>As modern web applications grow in complexity, managing asynchronous operations becomes crucial. When using Redux for state management, you might find yourself dealing with asynchronous actions using <code>createAsyncThunk</code> from Redux Toolkit.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#overview","title":"Overview","text":"<p>This blog post explores how to effectively use <code>async/await</code> in both Redux thunks and React components to handle API calls.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#what-is-createasyncthunk","title":"What is createAsyncThunk?","text":"<p><code>createAsyncThunk</code> is a utility from Redux Toolkit that simplifies the process of creating thunks for handling asynchronous logic. It allows you to dispatch actions based on the lifecycle of a promise\u2014pending, fulfilled, and rejected. This can significantly reduce boilerplate code when making API requests.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#using-asyncawait-in-thunks","title":"Using Async/Await in Thunks","text":"<p>When defining a thunk, you can use <code>async/await</code> to handle asynchronous API requests cleanly. For example, consider the following thunk that fetches blog posts:</p> <pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const fetchBlogs = createAsyncThunk(\"blog/fetchBlogs\", async (token) =&gt; {\n  const response = await axios.get(\n    \"https://jsonplaceholder.typicode.com/posts\",\n    {\n      cancelToken: token,\n    }\n  );\n  return response.data;\n});\n</code></pre> <p>In this example, the <code>fetchBlogs</code> thunk uses <code>async/await</code> to make the Axios GET request, returning the fetched data or throwing an error if the request fails.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#handling-api-calls-in-react-components","title":"Handling API Calls in React Components","text":"<p>In your React components, you might also want to handle asynchronous logic when dispatching actions. While you can use <code>async/await</code> here as well, it's often more straightforward to handle the promise directly:</p> <pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchBlogs } from \"./blogSlice\";\nimport axios from \"axios\";\n\nconst BlogList = () =&gt; {\n  const dispatch = useDispatch();\n  const { blogs, status, error } = useSelector((state) =&gt; state.blog);\n\n  useEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n\n    const fetchData = () =&gt; {\n      if (status === \"idle\") {\n        dispatch(fetchBlogs(source.token)).catch((error) =&gt; {\n          if (axios.isCancel(error)) {\n            console.log(\"Request canceled:\", error.message);\n          } else {\n            console.error(\"Error fetching blogs:\", error);\n          }\n        });\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      source.cancel(\"Operation canceled by the user.\");\n    };\n  }, [dispatch, status]);\n\n  // Render logic...\n};\n</code></pre> <p>In this example, the fetchData function dispatches the <code>fetchBlogs</code> action and handles the promise directly with .catch(). This can simplify your code and make it more readable.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#conclusion","title":"Conclusion","text":"<p>Using <code>async/await</code> in Redux thunks can enhance code readability and maintainability. While you can also use <code>async/await</code> in your React components, handling promises directly can simplify the flow, especially in simple use cases. Understanding when and where to use these patterns will make your application more efficient and your code cleaner. Happy coding!</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#additional","title":"Additional","text":"<p>In Redux thunks created with <code>createAsyncThunk</code>, you typically do not need to use a <code>try/catch</code> block for error handling inside the thunk itself. This is because <code>createAsyncThunk</code> automatically handles the promise's rejection and dispatches the appropriate actions based on its state (pending, fulfilled, or rejected).</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#how-error-handling-works-in-createasyncthunk","title":"How Error Handling Works in <code>createAsyncThunk</code>","text":"<p>When you define a thunk using <code>createAsyncThunk</code>, any errors thrown during the execution of the thunk will be caught and the corresponding <code>rejected</code> action will be dispatched with the error information. This means you can handle errors directly in your slice's extra reducers.</p> <p>Here's a brief overview of how it works:</p> <ul> <li> <p>Thunk Definition: The thunk can simply return the result of an asynchronous operation (like an API call). If it throws an error, Redux Toolkit takes care of dispatching the <code>rejected</code> action.</p> </li> <li> <p>Error Handling in the Slice: You handle errors in the slice's <code>extraReducers</code> to update the state appropriately.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#example-without-trycatch-in-the-thunk","title":"Example Without <code>try/catch</code> in the Thunk","text":"<p>Here's how your thunk might look:</p> <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Thunk to fetch blogs\nexport const fetchBlogs = createAsyncThunk(\"blog/fetchBlogs\", async (token) =&gt; {\n  const response = await axios.get(\n    \"https://jsonplaceholder.typicode.com/posts\",\n    {\n      cancelToken: token,\n    }\n  );\n  return response.data; // If this fails, it will automatically be handled\n});\n\n// Slice definition\nconst blogSlice = createSlice({\n  name: \"blog\",\n  initialState: {\n    blogs: [],\n    status: \"idle\",\n    error: null,\n  },\n  extraReducers: (builder) =&gt; {\n    builder\n      .addCase(fetchBlogs.pending, (state) =&gt; {\n        state.status = \"loading\";\n      })\n      .addCase(fetchBlogs.fulfilled, (state, action) =&gt; {\n        state.status = \"succeeded\";\n        state.blogs = action.payload;\n      })\n      .addCase(fetchBlogs.rejected, (state, action) =&gt; {\n        state.status = \"failed\";\n        state.error = action.error.message; // Handle the error here\n      });\n  },\n});\n\nexport default blogSlice.reducer;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#error-handling-in-the-component","title":"Error Handling in the Component","text":"<p>In your component, you would still want to handle errors, especially for the UI or logging:</p> <pre><code>useEffect(() =&gt; {\n  const source = axios.CancelToken.source();\n\n  if (status === \"idle\") {\n    dispatch(fetchBlogs(source.token)).catch((error) =&gt; {\n      if (axios.isCancel(error)) {\n        console.log(\"Request canceled:\", error.message);\n      } else {\n        console.error(\"Error fetching blogs:\", error);\n      }\n    });\n  }\n\n  return () =&gt; {\n    source.cancel(\"Operation canceled by the user.\");\n  };\n}, [dispatch, status]);\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#conclusion_1","title":"Conclusion","text":"<ul> <li>No <code>try/catch</code> in Thunks: You don't need to use <code>try/catch</code> in thunks defined with <code>createAsyncThunk</code> because Redux Toolkit handles rejections automatically.</li> <li>Error Handling in Slice: Use <code>extraReducers</code> in the slice to manage error states.</li> <li>UI Error Handling: Handle errors in your component for user feedback or logging.</li> </ul> <p>This approach keeps your thunks cleaner and focuses error handling where it is most useful!</p> <p>createAsyncThunk indeed handles promise rejections automatically, dispatching the appropriate actions for the pending, fulfilled, and rejected states.</p>","tags":["Personal"]},{"location":"blog/2024/04/05/understanding-asyncawait-in-redux-thunks-and-react-components/#clarification-on-error-handling","title":"Clarification on Error Handling","text":"<ul> <li> <p>Automatic Error Handling: If a promise returned from <code>createAsyncThunk</code> is rejected, Redux Toolkit automatically dispatches the <code>rejected</code> action, and you can manage the error in the reducer without needing to wrap the async logic in a <code>try/catch</code> block.</p> </li> <li> <p>Using <code>try/catch</code>: While you don\u2019t need to use <code>try/catch</code> for basic error handling, it can still be useful if:</p> </li> <li>You want to customize the error message being returned (e.g., using <code>rejectWithValue</code>).</li> <li>You need to handle specific error cases, like distinguishing between a cancellation error and a network error.</li> <li>You want to perform additional actions upon catching an error, such as logging.</li> </ul> Example without <code>try/catch</code>Example with try/catch <p>Here\u2019s an example of using <code>createAsyncThunk</code> without <code>try/catch</code>:</p> <pre><code>export const fetchData = createAsyncThunk('data/fetchData', async () =&gt; {\n  const response = await axios.get('https://api.example.com/data');\n  return response.data; // Automatically handles errors\n});\n\n// Reducer setup...\n</code></pre> <p>And here\u2019s how you would use it with <code>try/catch</code> for custom error handling:</p> <pre><code>export const fetchData = createAsyncThunk(\n  'data/fetchData',\n  async (_, { rejectWithValue }) =&gt; {\n    try {\n      const response = await axios.get('https://api.example.com/data');\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || 'An error occurred');\n    }\n  }\n);\n</code></pre> <p>Conclusion</p> <p>In summary, while <code>createAsyncThunk</code> simplifies error handling significantly, using <code>try/catch</code> can still provide benefits in specific scenarios where you want more control over error messages or additional handling. Your approach should depend on the complexity of the operations you're performing and how much control you need over the error handling process</p>","tags":["Personal"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/","title":"Understanding Naming Conventions in Redux Toolkit","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#understanding-naming-conventions-in-redux-toolkit","title":"Understanding Naming Conventions in Redux Toolkit","text":"<p>In modern web development, maintaining clear and organized code is crucial for scalability and collaboration, especially when using state management libraries like Redux Toolkit. One important aspect of this is naming conventions for actions and slices.</p> <p>Understanding Naming Conventions in Redux Toolkit: A Guide to Clear and Consistent Action Naming</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#overview","title":"Overview","text":"<p>This guide explores how to effectively name your Redux actions to ensure clarity and consistency throughout your application.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#why-naming-conventions-matter","title":"Why Naming Conventions Matter","text":"<p>Proper naming conventions serve several purposes:</p> <ol> <li> <p>Clarity: Descriptive names make it easier to understand what actions do at a glance. This is especially important in larger projects where multiple developers might be working on the same codebase.</p> </li> <li> <p>Maintainability: Consistent naming helps in maintaining the code over time. When returning to a project after a break or onboarding new team members, clear naming conventions facilitate quicker comprehension.</p> </li> <li> <p>Avoiding Conflicts: By using a structured naming system, you minimize the risk of naming conflicts in your Redux store, which can lead to unexpected behavior.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#the-structure-of-action-names","title":"The Structure of Action Names","text":"<p>A widely accepted practice is to use a two-part naming convention for Redux actions:</p> <ol> <li> <p>First Part (Slice Name): This should represent the feature or slice of state the action relates to. For instance, if you\u2019re working with blog posts, you might use <code>blog</code>.</p> </li> <li> <p>Second Part (Action Type): This describes the specific action being performed. It\u2019s helpful to use a verb-noun structure, such as <code>fetchBlogs</code>, <code>createBlog</code>, or <code>deleteBlog</code>. This helps clarify the action\u2019s purpose.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#example-of-naming-actions","title":"Example of Naming Actions","text":"<p>Here\u2019s how you might structure your action names in a Redux slice related to blog posts:</p> <pre><code>// actions.js\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { fetchBlogsApi, createBlogApi } from \"./api\"; // Import API functions\n\nexport const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\", // Slice name and action type\n  async () =&gt; {\n    const response = await fetchBlogsApi();\n    return response.data;\n  }\n);\n\nexport const createBlog = createAsyncThunk(\n  \"blog/createBlog\", // Slice name and action type\n  async (blogData) =&gt; {\n    const response = await createBlogApi(blogData);\n    return response.data;\n  }\n);\n</code></pre>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#flexibility-within-structure","title":"Flexibility Within Structure","text":"<p>While it\u2019s best practice to adhere to the slice/action structure, there\u2019s room for flexibility. You can adapt the naming to better fit your application\u2019s context. For instance, you might choose to use <code>post/fetchPosts</code> instead of <code>blog/fetchBlogs</code> if that aligns better with your terminology.</p> <p>However, avoid vague names like <code>performAction</code>, as they offer little insight into the action\u2019s purpose. Strive for meaningful names that accurately describe the action.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#conclusion","title":"Conclusion","text":"<p>By following a consistent and clear naming convention for your Redux actions, you create a more maintainable and understandable codebase. Using structured names, such as <code>blog/fetchBlogs</code> and <code>blog/createBlog</code>, not only enhances clarity but also aids collaboration among team members. In a world where code readability can make or break a project, investing time in good naming conventions is always worthwhile.</p> <p>This approach will not only improve your current project but will also set a strong foundation for any future work in state management with Redux Toolkit. Happy coding!</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#additional","title":"Additional","text":"<p>Understanding Redux Toolkit Naming Conventions: Flexibility vs. Clarity</p> <p>When working with Redux Toolkit, naming your slices and action types is crucial for clarity and maintainability. However, you might wonder how flexible you can be with these names while still ensuring they remain clear and understandable.</p> Can You Name Anything?Prioritizing Clarity <ol> <li> <p>Flexibility in Naming:</p> <ul> <li>Technically, you can name your slices and action types anything you want. There are no strict rules enforced by Redux Toolkit regarding naming conventions.</li> <li>You might choose to use unconventional names based on your project\u2019s context, team preferences, or domain-specific terminology.</li> </ul> </li> <li> <p>Examples of Flexible Naming:</p> <ul> <li>Instead of the standard <code>blog/fetchBlogs</code>, you might use <code>posts/getAll</code> if your application deals with a broader set of data.</li> <li>If your project is a social media app, you could use <code>user/createProfile</code> instead of <code>profile/createUser</code>.</li> </ul> </li> </ol> <p>While flexibility is allowed, the primary goal should always be clarity. Here are some guidelines to ensure your naming remains clear:</p> <ol> <li> <p>Meaningful Names:</p> <ul> <li>Choose names that accurately describe the functionality. For instance, <code>createBlogPost</code> is clearer than <code>createItem</code>.</li> </ul> </li> <li> <p>Consistent Structure:</p> <ul> <li>Maintain a consistent naming pattern (e.g., <code>feature/action</code>). This helps in understanding the purpose of the action at a glance.</li> </ul> </li> <li> <p>Avoid Ambiguity:</p> <ul> <li>Avoid generic names like <code>handleData</code> or <code>performAction</code>. Instead, be specific: <code>fetchUserData</code> or <code>deleteComment</code>.</li> </ul> </li> </ol> <p>Recommended Naming Conventions</p> <ol> <li> <p>Slice Names:</p> <ul> <li>Should reflect the domain or feature: <code>blog</code>, <code>user</code>, <code>comment</code>, etc.</li> <li>Example:</li> </ul> <pre><code>const blogSlice = createSlice({\n  name: \"blog\",\n  // ...\n});\n</code></pre> </li> <li> <p>Action Types:</p> <ul> <li>Use a verb-noun structure: <code>fetchBlogs</code>, <code>createComment</code>, <code>updateUser</code>.</li> <li>Example:</li> </ul> <pre><code>export const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\",\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> </ol> <p>Conclusion</p> <p>While you can name your slices and action types anything you like in Redux Toolkit, prioritizing clarity and consistency is crucial for maintainability. Aim for meaningful, descriptive names that follow a consistent structure to enhance code readability and collaboration within your team.</p> <p>In essence, flexibility exists, but clarity should always be your guiding principle when naming in Redux Toolkit. If you have specific examples or situations in mind, feel free to share!</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/12/understanding-naming-conventions-in-redux-toolkit/#question","title":"Question","text":"<p>should we define the function name and action type name same or what</p> <p>When using <code>createAsyncThunk</code> in Redux Toolkit, it\u2019s not strictly necessary for the function name and the action type name to be the same, but there are advantages to keeping them aligned. Here\u2019s a breakdown of considerations:</p> <ol> <li> <p>Consistency</p> <ul> <li>Same Naming: Using the same name for both the async thunk and the action type can enhance readability and maintainability. When you see <code>fetchBlogs</code> in your code, you immediately know that it corresponds to the action type <code>\"blog/fetchBlogs\"</code>.</li> </ul> <pre><code>export const fetchBlogs = createAsyncThunk(\n  \"blog/fetchBlogs\", // Action type\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> <li> <p>Descriptive Function Names</p> <ul> <li> <p>Different Names: If you prefer more descriptive function names for clarity, you can name them differently. The function name should indicate what the thunk does, while the action type can still reflect the feature and action.</p> </li> <li> <p>For example:</p> </li> </ul> <pre><code>export const loadBlogPosts = createAsyncThunk(\n  \"blog/fetchBlogs\", // Action type\n  async () =&gt; {\n    // Fetch logic\n  }\n);\n</code></pre> </li> <li> <p>Benefits of Matching Names</p> <ul> <li>Ease of Understanding: When you follow a consistent naming pattern, it becomes easier for developers (including future you) to understand the purpose of the thunk and its associated action.</li> <li>Debugging: If there\u2019s a mismatch, it can lead to confusion when tracing actions in the Redux dev tools, as the function name and the action type won't align.</li> </ul> </li> <li> <p>Conclusion</p> <p>While it\u2019s perfectly valid to have different names for the async thunk function and the action type, keeping them aligned helps maintain clarity. If the function name clearly describes what it does (like <code>fetchBlogs</code>), it\u2019s often best to use the same name in the action type. However, if you find a more descriptive name adds value, feel free to differentiate them while ensuring the overall structure remains clear.</p> </li> </ol> <p>Ultimately, choose a naming convention that works best for your team and project, and aim for consistency throughout your codebase.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/","title":"Understanding the render Function in Table Components","text":"","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#understanding-the-render-function-in-table-components","title":"Understanding the <code>render</code> Function in Table Components","text":"<p>When building user interfaces with libraries like Ant Design or similar, you often work with table components to display data in a structured format. A key feature of these tables is the <code>render</code> function, which allows you to customize how data is displayed in each cell.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#overview","title":"Overview","text":"","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#what-is-the-render-function","title":"What is the <code>render</code> Function?","text":"<p>The <code>render</code> function is a powerful tool that lets you define how each cell in a table should appear. It takes several parameters, but the most commonly used are:</p> <ul> <li> <p>text: This represents the value of the specific cell being rendered. For instance, if your column is for \"creationTime,\" the <code>text</code> parameter will hold the corresponding creation time for that row.</p> </li> <li> <p>record: This parameter provides access to the entire row of data. This is useful when you want to reference other fields in the same row or need context beyond just the cell value.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#example-usage","title":"Example Usage","text":"<p>Let's look at a practical example. Imagine you have a column that displays the creation time of entries. You want to format this time to include both date and time, displaying the time in red. Here\u2019s how you might set that up:</p> ExampleWhy Use the render Function? <pre><code>{\n    title: \"Creation Time\",\n    dataIndex: \"creationTime\",\n    key: \"creationTime\",\n    render: (text, record) =&gt; {\n        const formattedDate = moment(text).format(\"YYYY-MM-DD\");\n        const formattedTime = moment(text).format(\"hh:mm A\");\n\n        return (\n            &lt;span&gt;\n                {formattedDate} &lt;span style={{ color: 'red' }}&gt;{formattedTime}&lt;/span&gt;\n            &lt;/span&gt;\n        );\n    },\n}\n</code></pre> <p>In this example, the <code>render</code> function formats the creation time using the <code>moment</code> library to ensure it is displayed correctly. The date is presented in a standard format, while the time is shown in a 12-hour format with AM/PM, colored red for emphasis.</p> <ol> <li> <p>Customization: It gives you the flexibility to format data as needed, adding styles or additional elements, like icons or buttons.</p> </li> <li> <p>Conditional Rendering: You can use the <code>render</code> function to conditionally display content based on the cell\u2019s value or the row\u2019s data.</p> </li> <li> <p>Enhanced Readability: Proper formatting improves the readability of your data, making it easier for users to interpret.</p> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#conclusion","title":"Conclusion","text":"<p>The <code>render</code> function is an essential feature for anyone working with table components in modern UI libraries. By understanding how to leverage parameters like <code>text</code> and <code>record</code>, you can create more dynamic and user-friendly interfaces that present data clearly and attractively. Whether you're formatting dates, adding styles, or implementing complex logic, the <code>render</code> function empowers you to customize the display of your data effectively.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#additional","title":"Additional","text":"<p>Example of Conditional Rendering in the <code>render</code> Function</p> <p>Conditional rendering in the render function allows you to display different content based on certain conditions. Here\u2019s a simple example that demonstrates how to use conditional rendering to display a status message:</p> Basic ExampleComplex Example <pre><code>{\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (text, record) =&gt; {\n        // Assume text is a status string like \"active\" or \"inactive\"\n        return (\n        &lt;span&gt;\n            {text === \"active\" ? (\n            &lt;span style={{ color: 'green' }}&gt;Active&lt;/span&gt;\n            ) : (\n            &lt;span style={{ color: 'red' }}&gt;Inactive&lt;/span&gt;\n            )}\n        &lt;/span&gt;\n        );\n    },\n}\n</code></pre> Explanation <ul> <li>Condition Check: The <code>render</code> function checks the value of <code>text</code> (which represents the <code>status</code>).</li> <li>Ternary Operator: It uses a ternary operator to determine what to display:<ul> <li>If <code>text</code> is \"active\", it displays \"Active\" in green.</li> <li>If <code>text</code> is anything else (e.g., \"inactive\"), it displays \"Inactive\" in red.</li> </ul> </li> </ul> <p>You can also incorporate more complex logic. For example, if you want to show different icons based on the status:</p> <pre><code>import { Icon } from 'antd';\n\n{\n    title: \"Status\",\n    dataIndex: \"status\",\n    key: \"status\",\n    render: (text, record) =&gt; {\n        if (text === \"active\") {\n            return (\n                &lt;span&gt;\n                    &lt;Icon type=\"check-circle\" style={{ color: 'green' }} /&gt; Active\n                &lt;/span&gt;\n            );\n        } else if (text === \"inactive\") {\n            return (\n                &lt;span&gt;\n                    &lt;Icon type=\"close-circle\" style={{ color: 'red' }} /&gt; Inactive\n                &lt;/span&gt;\n            );\n        } else {\n            return &lt;span&gt;Unknown Status&lt;/span&gt;;\n        }\n    },\n}\n</code></pre> Explanation <ul> <li>Icon Usage: In this example, we use Ant Design's <code>Icon</code> component to visually indicate the status.</li> <li>Multiple Conditions: The <code>render</code> function checks for \"active\" and \"inactive\" statuses, displaying different icons and colors accordingly. If the status is neither, it defaults to \"Unknown Status\".</li> </ul> <p>Conclusion</p> <p>Using conditional rendering in the <code>render</code> function allows you to create dynamic and informative table cells that enhance the user experience. You can leverage the <code>text</code> and <code>record</code> parameters to access the data you need and display it conditionally based on its value.</p>","tags":["Personal"]},{"location":"blog/2024/04/03/understanding-the-render-function-in-table-components/#predefined-parameter-in-render-function","title":"Predefined Parameter in <code>render</code> function","text":"<p>In Ant Design's table component, the <code>render</code> function can accept several predefined parameters. Here are the most commonly used ones:</p> <ol> <li> <p>text</p> <ul> <li>Description: The value of the cell for the current row and column.</li> <li>Usage: This is the primary parameter used to access the data you want to format or display.</li> </ul> </li> <li> <p>record</p> <ul> <li>Description: The entire data object for the current row.</li> <li>Usage: This allows you to access any other fields in the same row, making it useful for conditional rendering based on other column values.</li> </ul> </li> <li> <p>index</p> <ul> <li>Description: The index of the current row in the table.</li> <li>Usage: Useful when you need to reference the position of the row, such as for applying styles or tracking order.</li> </ul> </li> <li> <p>extra</p> <ul> <li>Description: Additional information about the current row, which may include context-specific data.</li> <li>Usage: Rarely used in typical scenarios but can provide extra context depending on how the table is set up.</li> </ul> </li> </ol> <p>Example of Using Multiple Parameters</p> <p>Here\u2019s an example that utilizes <code>text</code>, <code>record</code>, and <code>index</code> in the <code>render</code> function:</p> ExampleExplanation <pre><code>{\ntitle: \"Actions\",\ndataIndex: \"actions\",\nkey: \"actions\",\n    render: (text, record, index) =&gt; {\n        return (\n            &lt;div&gt;\n                &lt;button onClick={() =&gt; editRecord(record)}&gt;Edit&lt;/button&gt;\n                &lt;button onClick={() =&gt; deleteRecord(record.id)}&gt;Delete&lt;/button&gt;\n                &lt;span style={{ marginLeft: '10px' }}&gt;Row {index + 1}&lt;/span&gt;\n            &lt;/div&gt;\n        );\n    },\n}\n</code></pre> <ul> <li>Edit and Delete Buttons: The <code>render</code> function provides buttons for editing and deleting the current row's record.</li> <li>Using <code>record</code>: The <code>record</code> parameter allows access to the entire row's data for actions.</li> <li>Using <code>index</code>: The <code>index</code> parameter shows the position of the row, which can be useful for displaying row numbers or ordering.</li> </ul> <p>Conclusion</p> <p>Using these predefined parameters in the <code>render</code> function gives you great flexibility to customize how data is displayed in Ant Design tables. By combining <code>text</code>, <code>record</code>, and <code>index</code>, you can create highly interactive and user-friendly tables that enhance the overall user experience.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/","title":"Using rejectWithValue for cancellation tokens in rtk","text":"","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#using-rejectwithvalue-for-cancellation-tokens-in-rtk","title":"Using <code>rejectWithValue</code> for cancellation tokens in rtk","text":"<p>The confusion seems to arise from how <code>createAsyncThunk</code> handles error scenarios and how cancellation tokens work with Axios.</p> <p>Let\u2019s break down why <code>rejectWithValue</code> is effective in the context of error handling, and clarify how cancellation tokens should be utilized within <code>createAsyncThunk</code>.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#understanding-rejectwithvalue","title":"Understanding <code>rejectWithValue</code>","text":"<ol> <li> <p>Purpose of <code>rejectWithValue</code>:</p> <ul> <li>When you call <code>rejectWithValue</code> in the thunk, you're providing a way to return a custom error message or value when the thunk is rejected. This is particularly useful for handling both network errors and cancellations.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>If you catch an error in your thunk and decide that it should be treated as a rejection, you can call <code>rejectWithValue(err.message)</code> to propagate that error back to the component.   This allows you to maintain control over the error messages that reach the component state, enabling clearer user feedback.</li> </ul> </li> </ol> How Cancellation Tokens Work <ol> <li> <p>Cancellation with Axios:</p> <ul> <li>When you create a cancellation token with <code>axios.CancelToken.source()</code>, you can pass the token to Axios requests. If you need to cancel the request (for example, when a component unmounts), you can call <code>source.cancel()</code>. If a request is canceled, Axios throws a specific error (<code>CanceledError</code>), which you can check using <code>axios.isCancel(err)</code>.</li> </ul> </li> <li> <p>Extra Parameters in Thunks:</p> <ul> <li>The second parameter of the thunk (the <code>extraArgument</code> in your case) can contain <code>signal</code> (the cancellation token). However, for Axios, it's often simpler to manage cancellation using the cancellation token created in the component.</li> </ul> </li> </ol> Why It Might Seem Not to Work <ol> <li> <p>Misinterpretation of Cancellation:</p> <ul> <li>If you're not correctly distinguishing between a canceled request and a regular error, you may end up treating a canceled request as a failure, leading to unexpected behavior in your state management.</li> </ul> </li> <li> <p>Improper Use of the <code>signal</code> Parameter:</p> <ul> <li>If you try to pass <code>signal</code> directly to <code>axios.get</code> without setting it up correctly in the thunk, it might lead to confusion and not work as intended.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#recommended-approach","title":"Recommended Approach","text":"Example Implementation <pre><code>import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Create async thunk\nexport const fetchUser = createAsyncThunk(\n    \"user/fetchUser\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await axios.get(\n                \"https://jsonplaceholder.typicode.com/users/1\",\n                {\n                cancelToken: signal, // Pass the cancel token\n                }\n            );\n            return response.data;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                console.log(\"Request canceled:\", err.message);\n                return rejectWithValue(\"Request was canceled\"); // Use rejectWithValue for cancellations\n            }\n            return rejectWithValue(err.message); // Handle other errors\n        }\n    }\n);\n\n// Create the slice\nconst userSlice = createSlice({\n    name: \"user\",\n    initialState: { user: null, status: \"idle\", error: null },\n    extraReducers: (builder) =&gt; {\n        builder\n            .addCase(fetchUser.pending, (state) =&gt; {\n                state.status = \"loading\";\n            })\n            .addCase(fetchUser.fulfilled, (state, action) =&gt; {\n                state.status = \"succeeded\";\n                state.user = action.payload;\n            })\n            .addCase(fetchUser.rejected, (state, action) =&gt; {\n                state.status = \"failed\";\n                state.error = action.payload; // Use the error from rejectWithValue\n            });\n    },\n});\n\nexport default userSlice.reducer;\n</code></pre> <p>Conclusion</p> <p>By properly managing cancellation tokens and using <code>rejectWithValue</code>, you can create a clear and effective error handling mechanism within your thunks. If you ensure you're distinguishing between regular errors and cancellations, you can maintain a clean state in your Redux store and provide meaningful feedback to users.</p>","tags":["Personal"]},{"location":"blog/2024/04/06/using-rejectwithvalue-for-cancellation-tokens-in-rtk/#reference","title":"Reference","text":"<ul> <li>createAsyncThunk</li> <li>How to Handle Asynchronous Data Requests Using Redux Toolkit</li> <li>Cancel API requests and avoid race conditions when fetching data with Redux</li> <li>How to cancel Axios requests in React with redux? </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/","title":"When to Use selectedKeys Over the .active Class in Ant Design","text":"","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#when-to-use-selectedkeys-over-the-active-class-in-ant-design","title":"When to Use <code>selectedKeys</code> Over the <code>.active</code> Class in Ant Design","text":"<p>In modern web applications, managing the active state of navigation elements is crucial for enhancing user experience. Ant Design provides powerful components like <code>Menu</code> that offer built-in methods for managing active states.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#overview","title":"Overview","text":"<p>In this post, we\u2019ll explore the advantages of using <code>selectedKeys</code> over manually applying the <code>.active</code> class to links.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#understanding-selectedkeys-and-active","title":"Understanding <code>selectedKeys</code> and <code>.active</code>","text":"<ul> <li> <p>selectedKeys: This is a prop in Ant Design's <code>Menu</code> component that allows you to specify which menu item is currently selected. It takes an array of keys that correspond to the <code>key</code> prop of the <code>Menu.Item</code>.</p> </li> <li> <p><code>.active</code> Class: This is a traditional approach where you manually apply a class to the link to indicate it is active. This usually requires additional logic to handle state changes.</p> </li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#advantages-of-using-selectedkeys","title":"Advantages of Using <code>selectedKeys</code>","text":"<ol> <li> <p>Built-in State Management</p> <ul> <li><code>selectedKeys</code> automatically handles the selected state based on the current route or application state, reducing the need for custom logic.</li> </ul> </li> <li> <p>Cleaner Code</p> <ul> <li>By leveraging <code>selectedKeys</code>, your code becomes simpler and more readable. There\u2019s no need to add conditional logic for class names.</li> </ul> </li> <li> <p>Consistency Across Components</p> <ul> <li>Using <code>selectedKeys</code> ensures that the styling and behavior of active items remain consistent with Ant Design\u2019s design principles.</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Built-in handling can lead to better performance, especially in larger applications where manually managing classes could introduce overhead.</li> </ul> </li> <li> <p>Less Error-Prone</p> <ul> <li>Avoids potential bugs associated with managing the active class manually, such as forgetting to update the class or dealing with state synchronization issues.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#when-to-use-active-class","title":"When to Use <code>.active</code> Class","text":"<p>While <code>selectedKeys</code> is generally preferred, there are scenarios where you might consider using the <code>.active</code> class:</p> <ol> <li> <p>Custom Styling Needs</p> <ul> <li>If your application requires highly customized styling for active links that deviates from Ant Design\u2019s defaults, using the <code>.active</code> class might be necessary.</li> </ul> </li> <li> <p>Non-Ant Design Components</p> <ul> <li>If you're using other libraries or custom components for navigation that don\u2019t support selectedKeys, you might need to implement manual class management.</li> </ul> </li> <li> <p>Specific Logic Requirements</p> <ul> <li>In cases where you have complex logic determining the active state beyond route matching, the <code>.active</code> class can offer more flexibility.</li> </ul> </li> </ol>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#best-practices","title":"Best Practices","text":"<ul> <li>For most scenarios, stick with <code>selectedKeys</code> in Ant Design's Menu.</li> <li>If you opt for the <code>.active</code> class, ensure you have clear logic in place to manage its application.   Always consider future maintainability when choosing your approach.</li> </ul> Summary <ul> <li><code>selectedKeys</code>: Best for straightforward navigation and leveraging Ant Design's built-in capabilities for consistency and simplicity.</li> <li><code>.active</code> class: Best for custom styles or when you need more flexibility for complex active state management.</li> </ul>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#conclusion","title":"Conclusion","text":"<p>Choosing between <code>selectedKeys</code> and the <code>.active</code> class in Ant Design is a decision that impacts the maintainability and clarity of your code. By leveraging <code>selectedKeys</code>, you can streamline active state management, improve performance, and maintain consistency across your application. In most cases, it\u2019s the recommended approach for modern React applications using Ant Design.</p>","tags":["Personal"]},{"location":"blog/2024/04/08/when-to-use-selectedkeys-over-the-active-class-in-ant-design/#example","title":"Example","text":"Not Good ApproachGood Practice Danger <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                &lt;Menu.Item key=\"1\" style={{ color: \"#fff\" }}&gt;\n                    &lt;Link\n                        to=\"/\"\n                        className={`${location.pathname === \"/\" ? \"active\" : \"\"}`}\n                    &gt;\n                        Home\n                    &lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                &lt;Menu.Item key=\"2\" style={{ color: \"#fff\" }}&gt;\n                    &lt;Link\n                        to=\"/blog\"\n                        className={`${location.pathname === \"/blog\" ? \"active\" : \"\"}`}\n                    &gt;\n                        Blog\n                    &lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> Success <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        { key: \"1\", label: \"Home\", path: \"/\" },\n        { key: \"2\", label: \"Blog\", path: \"/blog\" },\n        // Add more items here as needed\n    ];\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[menuItems.find(item =&gt; item.path === location.pathname)?.key]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                {menuItems.map(item =&gt; (\n                    &lt;Menu.Item key={item.key}&gt;\n                        &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;\n                    &lt;/Menu.Item&gt;\n                ))}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre>","tags":["Personal"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/","title":"Why do we need axios interceptors?","text":"","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#why-do-we-need-axios-interceptors","title":"Why do we need axios interceptors?","text":"<p>You don't necessarily need to use interceptors for every API base URL; it depends on your application's requirements.</p> <p>Interceptors are useful for handling tasks like adding authentication tokens, logging requests/responses, or managing errors uniformly across multiple API calls. Here's a breakdown of their main uses and when you might need them:</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#main-uses-of-axios-interceptors","title":"Main Uses of Axios Interceptors","text":"<ol> <li> <p>Adding Authorization Tokens: If your APIs require authentication, interceptors can automatically attach the token to each request. This way, you don't have to manually add the token in every API call.</p> </li> <li> <p>Logging Requests and Responses: You can use interceptors to log details about requests and responses, which is useful for debugging and monitoring.</p> </li> <li> <p>Handling Errors Globally: You can set up interceptors to catch errors from any request and handle them in a uniform way, like displaying a notification to the user.</p> </li> <li> <p>Modifying Requests/Responses: Interceptors allow you to modify requests or responses before they are handled by your application. For example, you might want to standardize response formats or transform data.</p> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#when-you-might-not-need-interceptors","title":"When You Might Not Need Interceptors","text":"<ul> <li> <p>No Authentication Required: If your blog API does not require a token or any additional headers, you may not need an interceptor for that specific instance.</p> </li> <li> <p>Simple APIs: If your API calls are straightforward and don\u2019t require common handling (like logging or error management), you can call them directly without interceptors.</p> </li> </ul>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#example-scenarios","title":"Example Scenarios","text":"<ol> <li> <p>API Requiring a Token (e.g., authentication API):</p> <ul> <li>You might want to add an interceptor to attach a token for every request.</li> </ul> <pre><code>instance.interceptors.request.use((config) =&gt; {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n</code></pre> </li> <li> <p>API Not Requiring a Token (e.g., blog API):</p> <ul> <li>If the blog API does not require an authentication token, you might not need an interceptor.</li> </ul> <pre><code>const blogAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BLOG_API_URL,\n});\n// No interceptors needed\n</code></pre> </li> </ol>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#summary","title":"Summary","text":"<ul> <li>Use interceptors when you have common functionality across multiple API calls, such as adding authentication tokens, logging, or handling errors.</li> <li>Skip interceptors for APIs that don\u2019t require them, keeping your code simpler and more focused.</li> </ul> <p>Ultimately, it's about balancing the need for consistent handling of requests/responses with the complexity of your application. If only a specific API requires interceptors, you can add them only to that instance. For APIs like the blog API that don't require such handling, you can keep them straightforward without interceptors.</p>","tags":["React","Toolkit"]},{"location":"blog/2024/04/16/why-do-we-need-axios-interceptors/#additional","title":"Additional","text":"<p>If you need to send an API key specifically for the blog API (and not a token from the base API), you can set up an interceptor for that particular Axios instance. Here\u2019s how to do it:</p> <p>Using Axios Interceptors to Add an API Key</p> <p>You can create a specific Axios instance for your blog API and configure an interceptor to include the API key in the headers for every request.</p> Example of Configuring Axios with Interceptors <pre><code>// services/axiosInstance.js\nimport axios from 'axios';\nimport { blogBaseUrl } from '../utils/config';\n\nconst blogAxiosInstance = axios.create({\n    baseURL: blogBaseUrl,\n});\n\n// Add an interceptor to include the API key in each request\nblogAxiosInstance.interceptors.request.use(config =&gt; {\n    // Add your API key here\n    const apiKey = process.env.REACT_APP_BLOG_API_KEY; // Ensure you have this in your .env file\n    config.headers['X-API-Key'] = apiKey; // Use the appropriate header key for your API\n\n    return config;\n}, error =&gt; {\n    return Promise.reject(error);\n});\n\nexport { blogAxiosInstance };\n</code></pre> <p>Usage in Service Files</p> <p>Now, whenever you use the <code>blogAxiosInstance</code> for making API calls to the blog API, the API key will be automatically included in the headers:</p> <pre><code>// features/blog/service.js\nimport { blogAxiosInstance } from '../../services/axiosInstance';\n\nexport const fetchBlogPosts = async (signal) =&gt; {\n  const response = await blogAxiosInstance.get('/posts', { cancelToken: signal });\n  return response.data;\n};\n\n// Another example for a different endpoint\nexport const fetchBlogComments = async (postId, signal) =&gt; {\n  const response = await blogAxiosInstance.get(`/posts/${postId}/comments`, { cancelToken: signal });\n  return response.data;\n};\n</code></pre> <p>Summary</p> <ul> <li>Interceptor Usage: The interceptor for the <code>blogAxiosInstance</code> automatically adds the API key to every request sent to the blog API.</li> <li>Environment Variable: Ensure that your API key is stored in your environment variables (e.g., <code>.env</code> file) and accessed safely in your code.</li> <li>Simplifies API Calls: This approach keeps your API calls clean and ensures that the necessary headers are included without needing to repeat the code in every request.</li> </ul> <p>This way, you can manage different authentication methods or API keys for different APIs efficiently using Axios interceptors.</p>","tags":["React","Toolkit"]},{"location":"office/common-error/","title":"Common Bugs","text":""},{"location":"office/common-error/#overview","title":"Overview","text":""},{"location":"office/common-error/#typeerror-cyclic-object-value","title":"TypeError Cyclic Object Value","text":"Problem OccuranceSolutionReference Blogs <pre><code>    let person = {\n    name: \"ram\",\n    age: 22,\n};\n\nperson.myself = person;\n\n// console.log(person);\nJSON.stringify(person);\n</code></pre> <p>Uncaught TypeError: cyclic object value</p> <ul> <li>Troubleshooting TypeError Cyclic Object Value: A Simple Approach</li> <li>TypeError: cyclic object value </li> <li>JavaScript TypeError \u2013 Cyclic object value</li> <li>freecodecamp</li> <li>douglascrockford json</li> <li>Serializing object that contains cyclic object value - stackoverflow</li> </ul>"},{"location":"office/common-error/#typeerror-o-is-undefined","title":"TypeError: o is undefined","text":"Problem OccuranceSolutionReference Blogs <p>Here\u2019s an example of a JavaScript <code>TypeError: Cannot read property of undefined</code> thrown when a property is attempted to be read on an undefined variable:</p> <pre><code>function myFunc(a) {\n    console.log(a.b);\n}\n\nvar myVar;\nmyFunc(myVar);\n</code></pre> <p>Since the variable <code>myVar</code> is declared but not initialized, it is undefined. When it is passed to the <code>myFunc</code> function, the property <code>b</code> is attempted to be accessed. Since <code>a</code> is undefined at that point, running the code causes the following error:</p> <p>TypeError: Cannot read properties of undefined (reading 'b')</p> <ul> <li> <p>Optional Chaining (ES2020+)</p> <p>Optional chaining allows you to safely access nested object properties, even if an intermediate property doesn't exist:</p> <pre><code>function myFunc(a) {\n    console.log(a?.b);\n}\n\nlet myVar;\nmyFunc(myVar); // Logs: undefined (instead of throwing an error)\n\nmyVar = { b: 'myProperty' };\nmyFunc(myVar); // Logs: myProperty\n</code></pre> <p>This approach is particularly useful for deeply nested properties:</p> <pre><code>const user = {};\nconsole.log(user.address?.street); // undefined\nconsole.log(user.address?.street?.name); // undefined\n</code></pre> </li> <li> <p>Providing Default Values</p> <p>You can use the <code>OR</code> operator (||) or the nullish coalescing operator (??) to provide default values:</p> <pre><code>function greet(name) {\n    // Use OR operator (||) for falsy values (undefined, null, '', 0, false)\n    console.log(Hello, ${name || 'Guest'}!);\n\n    // Use nullish coalescing operator (??) for null or undefined only\n    console.log(Welcome, ${name ?? 'Anonymous'}!);\n}\n\ngreet(); // Logs: \"Hello, Guest!\" and \"Welcome, Anonymous!\"\ngreet('Alice'); // Logs: \"Hello, Alice!\" and \"Welcome, Alice!\"\n</code></pre> <p>These two methods provide more concise ways to handle potential undefined values, making your code more robust and easier to read.</p> </li> </ul> <ul> <li>Best Two Method Solution</li> </ul> <ul> <li>How to Fix TypeError: Cannot Read Property of Undefined in JavaScript</li> </ul> <p>Warning: [antd: Menu] children is deprecated. Please use items instead. Component Stack: </p> ProblemSolution <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { HomeOutlined, BookOutlined, ReadOutlined } from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        {\n            key: \"1\",\n            label: \"Dashboard\",\n            path: \"/dashboard\",\n            icon: &lt;HomeOutlined /&gt;,\n        },\n        { key: \"2\", label: \"Blog\", path: \"/blog\", icon: &lt;BookOutlined /&gt; },\n        { key: \"3\", label: \"Todo\", path: \"/todo\", icon: &lt;ReadOutlined /&gt; },\n        { key: \"4\", label: \"Gallery\", path: \"/gallery\", icon: &lt;ReadOutlined /&gt; },\n    ];\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[\n                    menuItems.find((item) =&gt; item.path === location.pathname)?.key,\n                ]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n            &gt;\n                {menuItems.map((item) =&gt; (\n                &lt;Menu.Item\n                    key={item.key}\n                    icon={item.icon}\n                    style={{ textAlign: \"left\" }}\n                &gt;\n                    &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                ))}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <pre><code>import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { HomeOutlined, BookOutlined, ReadOutlined } from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\nconst { Sider } = Layout;\n\nconst Sidebar = ({ width }) =&gt; {\n    const location = useLocation();\n\n    const menuItems = [\n        {\n            key: \"1\",\n            label: \"Dashboard\",\n            path: \"/dashboard\",\n            icon: &lt;HomeOutlined /&gt;,\n        },\n        { key: \"2\", label: \"Blog\", path: \"/blog\", icon: &lt;BookOutlined /&gt; },\n        { key: \"3\", label: \"Todo\", path: \"/todo\", icon: &lt;ReadOutlined /&gt; },\n        { key: \"4\", label: \"Gallery\", path: \"/gallery\", icon: &lt;ReadOutlined /&gt; },\n    ];\n\n    const items = menuItems.map((item) =&gt; ({\n        key: item.key,\n        label: &lt;Link to={item.path}&gt;{item.label}&lt;/Link&gt;,\n        icon: item.icon,\n    }));\n\n    return (\n        &lt;Sider\n            width={width}\n            style={{\n                background: \"#001529\",\n                height: \"100vh\",\n                position: \"fixed\",\n                overflowY: \"auto\",\n            }}\n        &gt;\n            &lt;Menu\n                mode=\"inline\"\n                selectedKeys={[\n                    menuItems.find((item) =&gt; item.path === location.pathname)?.key,\n                ]}\n                theme=\"dark\"\n                style={{ height: \"100%\", borderRight: 0 }}\n                items={items} // Use items prop here\n            /&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <p>Key Changes:</p> <ol> <li> <p>Mapping to <code>items</code>: We create a new <code>items</code> array by mapping over <code>menuItems</code> to match the structure that the <code>Menu</code> component expects. Each object in <code>items</code> now contains <code>key</code>, <code>label</code>, and <code>icon</code>.</p> </li> <li> <p>Using <code>items</code> prop: Instead of mapping over <code>menuItems</code> to create <code>Menu.Item</code> components, we pass the entire <code>items</code> array to the <code>Menu</code> component.</p> </li> </ol> <p>With these changes, your component should no longer trigger the deprecation warning, and it will work seamlessly with the latest version of Ant Design.</p>"},{"location":"office/draft/","title":"Draft","text":"Companies Companies.js<pre><code>// NEW BISHOW\nuseEffect(() =&gt; {\n    if (!isEmpty(contactPersonPaginationResponse)) {\n    const newData = (contactPersonPaginationResponse?.items || []).map(\n        (x) =&gt; ({\n        label: x.personFullName,\n        value: x.contactPersonId,\n        })\n    );\n\n    setData(newData);\n    }\n}, [contactPersonPaginationResponse, isAddNewPersonStatus]);\n\n\nuseEffect(() =&gt; {\n    try {\n        if (isAddNewPersonStatus) {\n            dispatch(getContactPersonPagination({ CompanyId: selectedCompanyId }));\n            console.log(\"CONSOLE: GETTING NEW PERSON LIST\");\n        }\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setisAddNewPersonStatus(false);\n    }\n}, [isAddNewPersonStatus]);\n</code></pre>"},{"location":"office/draft/#error-handling","title":"Error handling","text":"<p>Optimization Before Dispatching Action</p> CheckListContainer.js<pre><code>const handleCheckbox = (record) =&gt; {\n  if (!referenceId || !record?.id) {\n    console.error(\"Invalid referenceId or record.id\");\n    return;\n  }\n\n  const apiData = {\n    referenceId,\n    checklistid: record.id,\n    isactive: true,\n  };\n\n  // Assuming actionForAddUpdatedCircularChecklist is an action creator\n  dispatch(actionForAddUpdatedCircularChecklist(apiData));\n};\n</code></pre>"},{"location":"office/draft/#improvements-made","title":"Improvements made:","text":"<ul> <li> <p><code>Error Handling</code>: Added a check for <code>referenceId</code> and <code>record?.id</code>. If either of them is falsy, an error is logged, and the function returns early.</p> </li> <li> <p><code>Correct Dispatch</code>: Assuming <code>actionForAddUpdatedCircularChecklist</code> is an action creator, the action is created with the apiData object and then dispatched.</p> </li> </ul> <p>Make sure to replace <code>actionForAddUpdatedCircularChecklist</code> with the actual action creator from your code. Also, ensure that the action creator accepts the correct payload format.</p> <p>Remember to adapt this code to fit into the structure and requirements of your specific application.</p>"},{"location":"office/draft/#optimizations-made","title":"Optimizations made:","text":"<ul> <li> <p><code>Simplified Object Literal</code>: In the <code>apiData</code> object, you can directly use referenceId instead of <code>referenceId: referenceId</code> when the variable name matches the property name.</p> </li> <li> <p><code>Concise Dispatch</code>: Combined the creation and dispatch of the action in a single line for brevity.</p> </li> </ul> <p>This version maintains the clarity and correctness of your original code while making it more concise.</p>"},{"location":"office/draft/#tender-module-companiesjs","title":"Tender Module <code>Companies.js</code>","text":"<ol> <li> <p>Consolidate Similar Blocks:</p> <ul> <li>Merge the common properties in remarksPayload and companyAddPayload since they seem to share most of the same attributes.</li> <li>Consolidate the common properties into a single payload, and modify only the properties that differ.</li> </ul> javascript<pre><code>let commonPayload = {\n  ProjectId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  remarks: values?.remarks,\n  isDefaultOrCircular: isCircular ? 1 : 2,\n};\n\nlet remarksPayload = {\n  ...commonPayload,\n  tenderBasicId: getDetails.id,\n};\n\nlet companyAddPayload = {\n  ...commonPayload,\n};\n</code></pre> </li> <li> <p>Reduce Repetitive Code:</p> <ul> <li>Instead of repeating the same conditional logic for determining the remarks value, you can create a separate function.</li> </ul> javascript<pre><code>const getRemarks = (value) =&gt; {\n  switch (value) {\n    case 1:\n      return \"Email\";\n    case 2:\n      return \"Facebook\";\n    case 3:\n      return \"Whatsapp\";\n    case 4:\n      return \"Twitter\";\n    case 5:\n      return \"Other\";\n    default:\n      return null;\n  }\n};\n\nlet remarksData = {\n  remarks: getRemarks(valueRadioAddCompany),\n};\n</code></pre> </li> <li> <p>Error Handling:</p> <ul> <li>Consider handling errors more gracefully. Logging the error is a good start, but you might want to provide user feedback or take specific actions based on the type of error.</li> </ul> </li> <li> <p>Variable Naming:</p> <ul> <li>Ensure consistent variable naming conventions throughout your code.</li> </ul> </li> </ol> <p>Applying these suggestions can make your code more concise, easier to read, and maintainable. Additionally, remember that these are just general suggestions, and the final decision should be based on the specific requirements and coding standards of your project.</p>"},{"location":"office/draft/#ternary-operator","title":"Ternary Operator","text":"<p>ternary operator can be chained to handle more than two values. It is achieved by nesting multiple ternary operators</p> javascript<pre><code>const userRole = \"admin\"; // You might get this dynamically from your application\n\nconst message =\n  userRole === \"admin\"\n    ? \"Welcome, Admin!\"\n    : userRole === \"user\"\n    ? \"Hello, User!\"\n    : userRole === \"guest\"\n    ? \"Greetings, Guest!\"\n    : \"Unknown User Role\";\n\nconsole.log(message);\n// Output: Welcome, Admin!\n</code></pre> <p>In this example:</p> <ul> <li>If <code>userRole</code> is \"admin\", the message will be \"Welcome, Admin!\".</li> <li>If <code>userRole</code> is \"user\", the message will be \"Hello, User!\".</li> <li>If <code>userRole</code> is \"guest\", the message will be \"Greetings, Guest!\".</li> <li>If <code>userRole</code> is none of the specified roles, the message will be \"Unknown User Role\".</li> </ul> <p>While this example demonstrates a ternary operator with three conditions, you can continue chaining ternaries to handle more values. However, keep in mind that readability may decrease with too many nested ternaries, so consider alternative approaches if the logic becomes too complex.</p>"},{"location":"office/draft/#blog","title":"Blog","text":"<p>Dynamic Unveilings: <code>[source]</code> vs <code>source</code> - Decoding JavaScript Object Property Naming</p> <p><code>[source]</code> in JavaScript object literals is used for dynamic property names. When you enclose a variable or expression in square brackets within an object literal, the value of that variable is evaluated, and its result is used as the property name.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  [source]: getDetails.id,\n};\n// Resulting property name is either \"projectId\" or \"tenderBasicId\" based on showProjectTab\n</code></pre> <p>On the other hand, <code>source</code> without square brackets is treated as a literal static property name. In this case, the property name remains fixed as \"source\", regardless of the value of the <code>source</code> variable.</p> <p>Example:</p> javascript<pre><code>let source = showProjectTab ? \"projectId\" : \"tenderBasicId\";\nlet apiData = {\n  source: getDetails.id,\n};\n// Resulting property name is always \"source\", regardless of the value of showProjectTab\n</code></pre> <p>In summary, <code>[source]</code> is for dynamic, computed property names, while source without <code>square</code> brackets is for static, literal property names.</p>"},{"location":"office/draft/#mastering-javascript-array","title":"Mastering JavaScript Array","text":"<p>To master working with arrays in JavaScript, there are several advanced concepts and methods you should explore. Here's a list of advanced JavaScript topics related to arrays:</p> <ol> <li> <p>Functional Programming:</p> <p>Learn about functional programming concepts like <code>map</code>, <code>filter</code>, <code>reduce</code>, and how they can be applied to arrays.</p> </li> <li> <p>Arrow Functions:</p> <p>Understand arrow functions (<code>=&gt;</code>) and how they can be used to write concise and expressive code when working with arrays.</p> </li> <li> <p>Spread and Rest Operators:</p> <p>Explore the spread (<code>...</code>) and rest (<code>...rest</code>) operators to manipulate and merge arrays more efficiently.</p> </li> <li> <p>Destructuring:</p> <p>Learn array destructuring to efficiently extract values from arrays into variables.</p> </li> <li> <p>Higher-Order Functions:</p> <p>Understand higher-order functions, which take functions as arguments or return functions. Examples include <code>forEach</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, etc.</p> </li> <li> <p>Map, Filter, and Reduce:</p> <p>Dive deeper into how <code>map</code>, <code>filter</code>, and <code>reduce</code> functions work and their applications for transforming, filtering, and aggregating array data.</p> </li> <li> <p>Promises and Asynchronous Programming:</p> <p>Explore asynchronous programming concepts, Promises, and how they can be used in combination with arrays for asynchronous operations.</p> </li> <li> <p>Async/Await:</p> <p>Learn about <code>async</code> and <code>await</code> syntax for handling asynchronous operations more elegantly.</p> </li> <li> <p>Immutable.js:</p> <p>Understand the principles of immutability and explore libraries like Immutable.js for working with immutable data structures, which can enhance performance and predictability in your applications.</p> </li> <li> <p>Array Methods (some, every, find, findIndex):</p> <p>Get familiar with less commonly used array methods like <code>some</code>, <code>every</code>, <code>find</code>, and <code>findIndex</code> for specific use cases.</p> </li> <li> <p>Array Sorting:</p> <p>Explore different methods for sorting arrays, including custom sorting functions.</p> </li> <li> <p>Array.prototype.flatMap():</p> <p>Learn about <code>flatMap()</code> for mapping and flattening arrays in a single step.</p> </li> <li> <p>Array Buffer and Typed Arrays:</p> <p>Understand concepts like ArrayBuffer and Typed Arrays for working with binary data in arrays.</p> </li> <li> <p>Web Workers:</p> <p>Explore the use of Web Workers for parallelizing array processing in a multi-threaded environment.</p> </li> </ol> <p>By mastering these advanced JavaScript concepts, you'll gain a deeper understanding of how to efficiently manipulate and work with arrays in various scenarios. Keep in mind that practical experience and hands-on coding exercises are crucial for solidifying your understanding of these concepts.</p>"},{"location":"office/draft/#insightfull-code","title":"Insightfull Code","text":"<p>Certainly! If you want to append the data to the existing data state when <code>quickPersonAddResponse</code> changes, you can modify your <code>useEffect</code> like this:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    if (quickPersonAddResponse) {\n      // Append the new data to the existing data\n      setData((prevData) =&gt; [...prevData, ...newData]);\n    } else {\n      // Set the new data as it is if quickPersonAddResponse is not available\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This modification checks if <code>quickPersonAddResponse</code> is truthy and appends the new data to the existing data state using the spread operator <code>([...prevData, ...newData])</code>. If <code>quickPersonAddResponse</code> is falsy, it simply sets the new data as it</p>"},{"location":"office/draft/#suggestion","title":"Suggestion","text":"<p>Your code looks good! It checks if <code>quickPersonAddResponse</code> is truthy and if so, it creates a new person object using the information from <code>quickPersonAddResponse</code> and appends it to the existing <code>data</code> state. If quickPersonAddResponse is falsy, it seems to fall back to setting the <code>data</code> state to a new dataset.</p> <p>Just a small suggestion for improvement: Instead of using the conditional (<code>if-else</code>) to set the <code>data</code> state, you can simplify it to directly use the result of the condition:</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    // Check if quickPersonAddResponse is available\n    newData = quickPersonAddResponse\n      ? [\n          ...newData,\n          {\n            label:\n              quickPersonAddResponse?.firstName +\n              quickPersonAddResponse?.lastName,\n            value: quickPersonAddResponse?.id,\n          },\n        ]\n      : newData;\n\n    console.log(\"quickPersonAddResponse: \", quickPersonAddResponse);\n    setData(newData);\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>This way, you directly assign the result of the condition to <code>newData</code>, making the code a bit more concise. The logic remains the same.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    let newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    if (!isEmpty(quickPersonAddResponse)) {\n      const newPersonData = {\n        label:\n          quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n        value: quickPersonAddResponse.id,\n      };\n\n      // Check if newPersonData already exists in data\n      const isAlreadyAdded = newData.some(\n        (item) =&gt; item.value === newPersonData.value\n      );\n\n      if (!isAlreadyAdded) {\n        setData((prevData) =&gt; [...prevData, newPersonData]);\n        console.log(\"new person added: \", newPersonData);\n      } else {\n        console.log(\"new person already exists: \", newPersonData);\n      }\n    } else {\n      setData(newData);\n    }\n  };\n\n  fetchData();\n}, [contactPersonPaginationResponse, quickPersonAddResponse]);\n</code></pre> <p>Change Above code to now</p> Companies.js<pre><code>useEffect(() =&gt; {\n  if (contactPersonPaginationResponse) {\n    const newData = (contactPersonPaginationResponse?.items || []).map((x) =&gt; ({\n      label: x.personFullName,\n      value: x.contactPersonId,\n    }));\n\n    setData(newData);\n  }\n}, [contactPersonPaginationResponse]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(quickPersonAddResponse)) {\n    const newPersonData = {\n      label: quickPersonAddResponse.firstName + quickPersonAddResponse.lastName,\n      value: quickPersonAddResponse.id,\n    };\n\n    // Check if newPersonData already exists in data\n    const isAlreadyAdded = data.some(\n      (item) =&gt; item.value === newPersonData.value\n    );\n\n    if (!isAlreadyAdded) {\n      setData((prevData) =&gt; [...prevData, newPersonData]);\n      // console.log(\"new person added: \", newPersonData);\n    } else {\n      // console.log(\"new person already exists: \", newPersonData);\n    }\n  }\n}, [quickPersonAddResponse]);\n</code></pre>"},{"location":"office/draft/#images","title":"Images","text":""},{"location":"office/draft/#insightfull-code-2","title":"Insightfull code 2","text":"<p>If you want to collect the values generated by <code>console.log</code> inside an array, you can use <code>map</code> to iterate over the array and create a new array with the results. Here's how you can modify your code to achieve that:</p> javascript<pre><code>const participantIds = test?.applicationTypeDetails?.tos?.map((item) =&gt; {\n  console.log(\"Ttos: \", item?.participantId);\n  return item?.participantId;\n});\n\nconsole.log(participantIds);\n</code></pre> <p>In this code:</p> <ul> <li><code>map</code> iterates over each item in the tos array.</li> <li>For each item, it executes the function provided.</li> <li>Inside the function, <code>console.log</code> prints the participant ID.</li> <li>The participant ID is then returned from the function and collected into the <code>participantIds</code> array.</li> <li>Finally, <code>participantIds</code> contains all the participant IDs, and you can log or use this array as needed.</li> </ul> <p>Embedded Device</p> working with .py fileDjango <p>To connect to an embedded device using Python, you typically use networking libraries such as socket or higher-level libraries built on top of it, like paramiko for SSH connections or pyserial for serial communication.</p> <p>Here's a basic example of how you can use the socket library to connect to a device using its IP address and a specific port:</p> <pre><code>import socket\n\n# IP address and port of the embedded device\ndevice_ip = '192.168.1.100'\ndevice_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n# Create a socket object\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to the device\ntry:\n    client_socket.connect((device_ip, device_port))\n    print(\"Connected to the embedded device\")\n\n    # Here you can send and receive data to/from the device\n\n    # Example: Sending data\n    message = \"Hello, device!\"\n    client_socket.sendall(message.encode())\n\n    # Example: Receiving data\n    received_data = client_socket.recv(1024)\n    print(\"Received:\", received_data.decode())\n\nexcept ConnectionRefusedError:\n    print(\"Connection to the embedded device refused\")\nfinally:\n    # Close the socket\n    client_socket.close()\n</code></pre> <p>Replace <code>192.168.1.100</code> with the actual IP address of your embedded device, and <code>12345</code> with the actual port number it's listening on.</p> <p>Once connected, you can send and receive data to/from the device as needed. Make sure to handle exceptions appropriately, such as <code>ConnectionRefusedError</code> if the connection is refused.</p> <p>Depending on your specific requirements and the capabilities of your embedded device, you might need to use different libraries or protocols. For example, if your device supports SSH, you might use <code>paramiko</code> for SSH connections. If your device communicates over serial ports, you might use <code>pyserial</code>.</p> <p>To convert the provided Python code into a Django application, you can create a Django view that handles the connection to the embedded device when a certain URL is accessed. Below is an example of how you can do this:</p> viewsurl <p>First, make sure you have Django installed. If not, you can install it using pip:</p> <pre><code>#1. \npip install django\n#2. \ndjango-admin startproject embedded_device_project\n#3.\ncd embedded_device_project\npython manage.py startapp embedded_device_app\n</code></pre> embedded_device_app/views.py<pre><code># 4. \n# embedded_device_app/views.py\n\nfrom django.http import HttpResponse\nimport socket\n\ndef connect_to_device(request):\n    # IP address and port of the embedded device\n    device_ip = '192.168.1.100'\n    device_port = 12345  # Example port number, replace with the actual port your device is listening on\n\n    # Create a socket object\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        # Connect to the device\n        client_socket.connect((device_ip, device_port))\n        message = \"Hello, device!\"\n        client_socket.sendall(message.encode())\n        received_data = client_socket.recv(1024).decode()\n        response_message = f\"Received from device: {received_data}\"\n    except ConnectionRefusedError:\n        response_message = \"Connection to the embedded device refused\"\n    finally:\n        # Close the socket\n        client_socket.close()\n\n    return HttpResponse(response_message)\n</code></pre> urls.py<pre><code># embedded_device_project/urls.py\n\nfrom django.urls import path\nfrom embedded_device_app import views\n\nurlpatterns = [\n    path('connect-to-device/', views.connect_to_device, name='connect_to_device'),\n]\n</code></pre> <p>Now, when you access the URL <code>http://127.0.0.1:8000/connect-to-device/</code> in your browser, Django will attempt to connect to the embedded device and send a message. The response from the device (if any) will be displayed in the browser. Ensure to replace the IP address and port with the appropriate values for your embedded device.</p>"},{"location":"office/draft/#dropdown-issue-in-antd","title":"Dropdown Issue in <code>antd</code>","text":"Bug <pre><code>import React from 'react';\nimport { DownOutlined, SmileOutlined } from '@ant-design/icons';\nimport { Dropdown, Space } from 'antd';\nconst items = [\n  {\n    key: '1',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    ),\n  },\n  {\n    key: '2',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    icon: &lt;SmileOutlined /&gt;,\n    disabled: true,\n  },\n  {\n    key: '3',\n    label: (\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\"&gt;\n        3rd menu item (disabled)\n      &lt;/a&gt;\n    ),\n    disabled: true,\n  },\n  {\n    key: '4',\n    danger: true,\n    label: 'a danger item',\n  },\n];\nconst App = () =&gt; (\n  &lt;Dropdown\n    menu={{\n      items,\n    }}\n  &gt;\n    &lt;a onClick={(e) =&gt; e.preventDefault()}&gt;\n      &lt;Space&gt;\n        Hover me\n        &lt;DownOutlined /&gt;\n      &lt;/Space&gt;\n    &lt;/a&gt;\n  &lt;/Dropdown&gt;\n);\nexport default App;\n</code></pre>"},{"location":"office/draft/#solution-1","title":"Solution 1","text":"<p>The issue in your code is that you are passing <code>menuItem</code> inside the <code>menu</code> prop as an object, but it should be passed as an array of menu items directly to the <code>menu</code> prop. In the Ant Design <code>Dropdown</code> component, the <code>menu</code> prop expects a <code>Menu</code> component or a configuration object for the <code>Menu</code> component, not just an array of menu items.</p> <p>Here's how you can fix it:</p> <ul> <li>Import the <code>Menu</code> component from Ant Design.</li> <li>Use the <code>Menu</code> component to wrap your <code>menu</code> items.</li> <li>Pass the <code>Menu</code> component as the <code>menu</code> prop of Dropdown.</li> </ul> Here's the corrected code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>In this updated code:</p> <ul> <li><code>Menu</code> component is used to create a menu with <code>Menu.Item</code> elements.</li> <li>The <code>menu</code> variable now holds the <code>Menu</code> component, which is passed to the <code>overlay</code> prop of the Dropdown component.</li> </ul> <p>This should resolve the error and render the dropdown menu correctly.</p>"},{"location":"office/draft/#solution-2","title":"Solution 2","text":"<p>It looks like there might be a misunderstanding or an outdated example in the documentation. The Ant Design <code>Dropdown</code> component's menu prop should indeed be passed a <code>Menu</code> component, as it expects a React node that represents the menu.</p> <p>Here\u2019s a clarification on how you should typically use the <code>Dropdown</code> and <code>Menu</code> components together:</p> <ol> <li> <p>Using <code>Menu</code> with Dropdown: You use the <code>Menu</code> component to define the menu structure and then pass it to the <code>Dropdown</code> component's <code>overlay</code> prop (previously called menu in older versions).</p> </li> <li> <p>Documentation Changes: Sometimes documentation or examples might be outdated or incorrect. Always cross-reference with the latest version of the library and check if there have been any changes in prop names or usage.</p> </li> </ol> <p>Here's a modern and correct approach based on current Ant Design practices:</p> <pre><code>import React from 'react';\nimport { Dropdown, Menu, Button } from 'antd';\n\nconst menu = (\n  &lt;Menu&gt;\n    &lt;Menu.Item key=\"1\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\"&gt;\n        1st menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n    &lt;Menu.Item key=\"2\"&gt;\n      &lt;a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\"&gt;\n        2nd menu item\n      &lt;/a&gt;\n    &lt;/Menu.Item&gt;\n  &lt;/Menu&gt;\n);\n\nconst App = () =&gt; (\n  &lt;Dropdown overlay={menu}&gt;\n    &lt;Button&gt;bottomLeft&lt;/Button&gt;\n  &lt;/Dropdown&gt;\n);\n\nexport default App;\n</code></pre> <p>Key Points:</p> <ul> <li><code>overlay</code> Prop: Use the <code>overlay</code> prop of <code>Dropdown</code> to pass the <code>Menu</code> component.</li> <li><code>Menu</code> Component: Create a <code>Menu</code> with <code>Menu.Item</code> elements to define the dropdown items.</li> </ul> <p>If you\u2019re seeing examples or documentation suggesting otherwise, it might be worth checking the version of Ant Design you're using or looking at the official Ant Design documentation for the version you're working with to ensure compatibility.</p>"},{"location":"office/draft/#solution-3-passing-value","title":"Solution 3 <code>passing value</code>","text":"<p>To pass the <code>record</code> to the <code>onClick</code> handler inside the <code>Dropdown</code>'s <code>Menu</code> component, you'll need to dynamically create the <code>Menu</code> with access to the record from the <code>render</code> function. Since <code>menudailytask</code> is defined outside of the <code>render</code> function, it won't have access to the <code>record</code> variable.</p> <p>Here's how you can modify your code to achieve this:</p> <ol> <li> <p>Move <code>Menu</code> Definition Inside <code>render</code>: Define the <code>Menu</code> within the <code>render</code> method where the <code>record</code> is available.</p> </li> <li> <p>Create a Function for the <code>Menu</code>: Use a function to create the <code>Menu</code> items with the <code>record</code> passed to the click handlers.</p> </li> </ol> Here\u2019s an updated version of your code:<pre><code>import React from 'react';\nimport { Dropdown, Menu, Tooltip } from 'antd';\nimport { EyeOutlined, InteractionTwoTone, InteractionOutlined, MoreOutlined } from '@ant-design/icons';\n\nconst ActionColumn = ({ record }) =&gt; {\n\n  // Function to create the Menu with access to record\n  const createMenu = (record) =&gt; (\n    &lt;Menu&gt;\n      &lt;Menu.Item\n        key=\"1\"\n        onClick={() =&gt; {\n          console.log(\"clicked\", record);\n          // You can add other logic here\n        }}\n      &gt;\n        Yesterday Task\n      &lt;/Menu.Item&gt;\n    &lt;/Menu&gt;\n  );\n\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;div\n        className=\"task-view-btn\"\n        onClick={() =&gt; {\n          setShowModalForTasKDetail(true);\n          setTaskId(record.id);\n          setTodoDetails(record);\n          setHideInternalMessage(true);\n          setSmallChatHeight(false);\n          setChatHeight(false);\n          setchatBox(false);\n        }}\n      &gt;\n        &lt;EyeOutlined /&gt;\n      &lt;/div&gt;\n\n      &lt;Tooltip\n        title={\n          record?.todoTransferToDailyTask?.status\n            ? \"Already moved\"\n            : \"Move to Daily Diary\"\n        }\n      &gt;\n        {record?.todoTransferToDailyTask?.status ? (\n          &lt;InteractionTwoTone\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        ) : (\n          &lt;InteractionOutlined\n            className=\"move-to-dailydairy\"\n            onClick={() =&gt; handleMovetoDiary(record)}\n          /&gt;\n        )}\n      &lt;/Tooltip&gt;\n\n\n      {/* Main Code */}\n      &lt;Dropdown overlay={createMenu(record)}&gt;\n        &lt;MoreOutlined className=\"move-to-dailydairy\" /&gt;\n      &lt;/Dropdown&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ActionColumn;\n</code></pre> <p>Key Points:</p> <ul> <li><code>createMenu</code> Function: Defines the <code>Menu</code> component inside the <code>render</code> method and has access to the record.</li> <li>Pass <code>record</code> to <code>createMenu</code>: The <code>record</code> is passed to <code>createMenu</code> to make it available within the <code>Menu</code> items.</li> </ul> <p>By using this approach, you ensure that each <code>Dropdown</code> instance gets its own <code>Menu</code> with the correct <code>record</code> information.</p>"},{"location":"office/draft/#select-username","title":"Select username","text":"<pre><code>&lt;Select\n    placeholder=\"Select a User\"\n    showSearch={true}\n    allowClear\n    filterOption={(input, option) =&gt;\n        option.children[0] &amp;&amp;\n        option.children[0]\n            .toLowerCase()\n            .indexOf(input.toLowerCase()) &gt;= 0\n    }\n    onChange={(id) =&gt; {\n      setSelectedUserId(id);\n\n      if (id === null || id === undefined) {\n        // Reset the username when cleared\n        setSelectedUserName(null);\n      } else {\n        const selectedUser = user.find(u =&gt; u.appUserId === id);\n        if (selectedUser) {\n            setSelectedUserName(selectedUser.userName);\n        }\n      }\n    }}\n&gt;\n    {user.map((user) =&gt; (\n        &lt;Option key={user.appUserId}&gt;\n            {user.fullName} {`[${user.userName}]`}\n        &lt;/Option&gt;\n    ))}\n&lt;/Select&gt;\n</code></pre> <pre><code>{!showResetButton \n  ? `Daily Diary of Today` \n  : `Daily Diary of ${selectedDate}${selectedUserName ? ` [${selectedUserName}]` : ''} ${\n      dailyDairyPaginationResp?.totalCount ? `(${dailyDairyPaginationResp.totalCount})` : ''\n    }`}\n</code></pre>"},{"location":"office/draft/#reference","title":"Reference","text":"<ul> <li>SyntaxError: JSON.parse: bad parsing</li> </ul>"},{"location":"office/intro/","title":"Intro","text":""},{"location":"office/intro/#domain","title":"Domain","text":"<p>Tip</p> <ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - <code>development domain</code></li> <li>cqweb.ictc.com.np - <code>production domain</code></li> </ul> <p><code>application</code></p> <ul> <li>cqnoval.info.com.np - <code>swagger</code></li> <li>cqnovalid.info.com.np - <code>login endpoint</code></li> </ul> <p><code>tools</code></p> <ul> <li>Jenkins - <code>on port 8080</code></li> <li>portainer - <code>on port 9000</code></li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/intro/#folder-structure","title":"Folder Structure","text":"<p>Note</p> <pre><code>src\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 svgs\n\u251c\u2500\u2500 components\n\u251c\u2500\u2500 hooks\n\u2502   \u2514\u2500\u2500 useRoles\n\u251c\u2500\u2500 json\n\u251c\u2500\u2500 layouts\n\u251c\u2500\u2500 services\n\u2502   \u251c\u2500\u2500 redux\n\u2502   \u2514\u2500\u2500 store\n\u251c\u2500\u2500 views\n\u251c\u2500\u2500 styles\n\u2514\u2500\u2500 utils\n</code></pre> <p>Description</p> <ul> <li><code>assets</code> : contains the image and svg files.</li> <li><code>components</code> : list of all the resuable components.</li> <li><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</li> <li><code>json</code> : has the caleder filter data.</li> <li><code>layouts</code> : contains the base layout of cqweb.</li> <li><code>services</code> : core redux - action, reducer, store</li> <li><code>styles</code> : contains the sass styles.</li> <li><code>utils</code> : list of reusable functions.</li> </ul>"},{"location":"office/intro/#installation","title":"Installation","text":"<p>Success</p> bash<pre><code>npm i --legacy-peer-deps\n\nnpm run product\n</code></pre>"},{"location":"office/intro/#reference","title":"Reference","text":""},{"location":"office/intro/#terminal-command","title":"Terminal Command","text":"<pre><code># flushing the dns\nipconfig /flushdns\n\n# Display the dns\nipconfig /displaydns\n\n# PROXY SITE\nhttps://www.proxysite.com/\n\n# BEST\nhttps://proxyium.com/\n</code></pre>"},{"location":"office/intro/#host-file","title":"Host file","text":"<p><code>c:/windows/system32/drivers/etc/hosts</code></p> <pre><code># Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to host names. Each\n# entry should be kept on an individual line. The IP address should\n# be placed in the first column followed by the corresponding host name.\n# The IP address and the host name should be separated by at least one\n# space.\n#\n# Additionally, comments (such as these) may be inserted on individual\n# lines or following the machine name denoted by a '#' symbol.\n#\n# For example:\n#\n#      102.54.94.97     rhino.acme.com          # source server\n#       38.25.63.10     x.acme.com              # x client host\n\n# localhost name resolution is handled within DNS itself.\n#   127.0.0.1       localhost\n#   ::1             localhost\n# Added by Docker Desktop\n192.168.1.152 host.docker.internal\n192.168.1.152 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n127.0.0.1 kubernetes.docker.internal\n127.0.0.1 rabbitmq\n# End of section\n203.78.165.198 cqweb.info.com.np\n203.78.165.198 cqnoval.info.com.np\n203.78.165.198 cqnovalid.info.com.np\n203.78.165.22 gitserver.info.com.np\n185.199.110.153 bishow-thapa.github.io\n</code></pre>"},{"location":"office/bank/antd-chartd/","title":"antd chart","text":"Summary of Key AntV Graph and Network Packages <ul> <li>G6: Network and graph visualizations.</li> <li>X6: Diagrams and flowchart visualizations.</li> <li>L7: Geospatial data visualizations.</li> <li>F2: Mobile-friendly charts and graphs.</li> <li>G2: Grammar of graphics for general data visualization.</li> </ul> <pre><code>npm install @ant-design/charts --save\n\n# or\n\npnpm add @ant-design/charts\n</code></pre> Usage<pre><code>import React from \"react\";\nimport { Line } from \"@ant-design/charts\";\n\nconst Page: React.FC = () =&gt; {\n  const data = [\n    { year: \"1991\", value: 3 },\n    { year: \"1992\", value: 4 },\n    { year: \"1993\", value: 3.5 },\n    { year: \"1994\", value: 5 },\n    { year: \"1995\", value: 4.9 },\n    { year: \"1996\", value: 6 },\n    { year: \"1997\", value: 7 },\n    { year: \"1998\", value: 9 },\n    { year: \"1999\", value: 13 },\n  ];\n\n  const config = {\n    data,\n    height: 400,\n    xField: \"year\",\n    yField: \"value\",\n  };\n  return &lt;Line {...config} /&gt;;\n};\nexport default Page;\n</code></pre>"},{"location":"office/bank/antd-chartd/#updated-code","title":"Updated Code","text":"<pre><code>const VerticalStepsForm = () =&gt; {\n  const {\n    currentStep,\n    formValues,\n    nextStep,\n    prevStep,\n    resetSteps,\n    updateForm,\n  } = useStepReducer();\n\n  const {\n    data: currencyData,\n    loading: currencyLoading,\n    error: currencyError,\n  } = useGetCurrencyQuery();\n\n  const [form] = Form.useForm();\n\n  const [buyingCurrency, setBuyingCurrency] = useState(null);\n  const [sellingCurrency, setSellingCurrency] = useState(null);\n\n  // Description\n  const description1 = currentStep === 0 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"buyingCurrency\"\n        label=\"Buying Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Buying Currency!\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          placeholder=\"Select Buying Currency\"\n          onChange={(value) =&gt; {\n            setBuyingCurrency(value);\n            console.log(\"value: \", value);\n          }}\n        &gt;\n          {currencyData &amp;&amp;\n            currencyData\n              .filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== sellingCurrency\n              )\n              .map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"sellingCurrency\"\n        label=\"Selling Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Selling Currency\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          placeholder=\"Select Selling Currency\"\n          onChange={(value) =&gt; {\n            setSellingCurrency(value);\n            console.log(\"Selling Selected: \", value);\n          }}\n        &gt;\n          {currencyData &amp;&amp;\n            currencyData\n              .filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== buyingCurrency\n              )\n              .map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item&gt;\n        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n          Next\n        &lt;/Button&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre> <p>Test</p> JSXuseFilteredCurrencies.js <pre><code>import React, { useState } from \"react\";\nimport { Form, Select } from \"antd\";\nimport useFilteredCurrencies from \"./useFilteredCurrencies\"; // Import the custom hook\n\nconst YourComponent = () =&gt; {\n    const [buyingCurrency, setBuyingCurrency] = useState(null);\n    const [sellingCurrency, setSellingCurrency] = useState(null);\n\n    const currencies = [\n        { value: \"USD\", label: \"Dollar\", isActive: true },\n        { value: \"EUR\", label: \"Euro\", isActive: true },\n        { value: \"INR\", label: \"Indian Rupee\", isActive: false },\n        { value: \"GBP\", label: \"British Pound\", isActive: true },\n        // Add more currencies here...\n    ];\n\n    // Use the custom hook to filter currencies\n    const filteredBuyingCurrencies = useFilteredCurrencies(\n        currencies,\n        sellingCurrency,\n        sellingCurrency\n    );\n    const filteredSellingCurrencies = useFilteredCurrencies(\n        currencies,\n        buyingCurrency,\n        buyingCurrency\n    );\n\n    return (\n        &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n            &lt;Form.Item\n                name=\"buyingCurrency\"\n                label=\"Buying Currency\"\n                rules={[{ required: true, message: \"Please select Buying Currency!\" }]}\n            &gt;\n                &lt;Select\n                    placeholder=\"Select Buying Currency\"\n                    value={buyingCurrency}\n                    onChange={setBuyingCurrency}\n                &gt;\n                    {filteredBuyingCurrencies.map((currency) =&gt; (\n                        &lt;Select.Option key={currency.value} value={currency.value}&gt;\n                        {currency.label}\n                        &lt;/Select.Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            &lt;Form.Item\n                name=\"sellingCurrency\"\n                label=\"Selling Currency\"\n                rules={[{ required: true, message: \"Please select Selling Currency\" }]}\n            &gt;\n                &lt;Select\n                    placeholder=\"Select Selling Currency\"\n                    value={sellingCurrency}\n                    onChange={setSellingCurrency}\n                &gt;\n                    {filteredSellingCurrencies.map((currency) =&gt; (\n                        &lt;Select.Option key={currency.value} value={currency.value}&gt;\n                        {currency.label}\n                        &lt;/Select.Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n    );\n};\n</code></pre> <pre><code>import { useMemo } from \"react\";\n\n// Custom hook to filter currencies for buying and selling\nconst useFilteredCurrencies = (currencies, selectedCurrency, excludeValue) =&gt; {\n    return useMemo(() =&gt; {\n        return currencies\n            .filter((currency) =&gt; currency.isActive &amp;&amp; currency.value !== excludeValue)\n            .map(({ value, label }) =&gt; ({\n                value,\n                label,\n            }));\n    }, [currencies, excludeValue]);\n};\n\nexport default useFilteredCurrencies;\n</code></pre>"},{"location":"office/bank/antd-chartd/#added-util-code","title":"Added <code>util</code> code","text":"<p>You can create a utility function to find the <code>label</code> based on the <code>value</code>:</p> SyntaxCustomAdvanced <pre><code>const getLabelByValue = (value, options) =&gt; {\n    const option = options.find((option) =&gt; option.value === value);\n    return option ? option.label : null;\n};\n</code></pre> <pre><code>    const getLabelByValue = (id, options) =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option?.name : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <pre><code>const getLabelByValue = (id, options, property = \"name\") =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option[property] : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <pre><code>const label = getLabelByValue(1, options);  // Defaults to 'name'\n// or\nconst label = getLabelByValue(1, options, 'description');\n</code></pre> Tip <ul> <li><code>getLabelByValue</code> function: This function takes a value (e.g., the <code>id</code> or <code>value</code>) and maps it to the corresponding <code>label</code> from the banks array. It is used in the final step to display the readable label rather than the <code>id</code>.</li> <li>Displaying <code>label</code> in summary: In the final step (<code>description5</code>), instead of directly showing the <code>value</code> (e.g., <code>formValues.payFrom</code>), we use <code>getLabelByValue(formValues.payFrom, banks)</code> to get the label associated with that value.</li> <li>Updating the form state: The form state (<code>formValues</code>) is updated by selecting values (e.g., <code>payFrom</code>, <code>theyReceivedAt</code>, etc.) using the <code>onChange</code> event handler inside each <code>Select</code> component.</li> </ul> <p>This approach allows you to keep the internal <code>id</code> values while presenting the user-friendly <code>label</code> in the UI.</p> <pre><code>const description5 = currentStep === 4 &amp;&amp; (\n  &lt;Form form={form} className=\"form-step\" name=\"step5-form\" layout=\"vertical\"&gt;\n    &lt;Row gutter={40} style={{ marginBottom: \"2em\" }}&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Selling Currency&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues?.sellingCurrency}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Rate&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.rate}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Buying Currency&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.buyingCurrency}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Selling Value (NPR)&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.sellingAmount}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Counterparty name&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;\n            {/* {formValues.counterpartyName} */}\n            {getLabelByValue(formValues.counterpartyName, bank)}\n          &lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;We Pay From&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.payFrom}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Counter Party Name&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;\n            {getLabelByValue(formValues.counterpartyDealer, bankUser)}\n          &lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;They Receive at&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.theyReceivedAt}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;Buying Amount (USD)&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues.buyingAmount}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n      &lt;Col span={12}&gt;\n        &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n          &lt;Paragraph className=\"title-paragraph\"&gt;We Receive at&lt;/Paragraph&gt;\n          &lt;Text className=\"title-text\"&gt;{formValues?.weReceivedAt}&lt;/Text&gt;\n        &lt;/Space&gt;\n      &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;Form.Item&gt;\n      &lt;Button type=\"default\" onClick={handlePrev}&gt;\n        Back\n      &lt;/Button&gt;\n      &lt;Button type=\"primary\" onClick={handleNext} style={{ marginLeft: 10 }}&gt;\n        Next\n      &lt;/Button&gt;\n    &lt;/Form.Item&gt;\n  &lt;/Form&gt;\n);\n</code></pre>"},{"location":"office/bank/antd-chartd/#advanced-code","title":"Advanced Code","text":"<p>Yes, you can make the <code>option?.name</code> dynamic by passing the property name as an argument to the <code>getLabelByValue</code> function. This way, instead of hardcoding <code>name</code>, you can access any property dynamically by referencing the property name passed to the function.</p> CodeExplanation <p>Here's how you can modify the code:</p> <pre><code>const getLabelByValue = (id, options, property = \"name\") =&gt; {\n    const option = options.find((option) =&gt; option?.id === id);\n    return option ? option[property] : null;\n};\n\nexport default getLabelByValue;\n</code></pre> <ol> <li>property = 'name': The <code>property</code> parameter is added with a default value of <code>'name'</code>, which means if no property is passed, it will default to <code>'name'</code>.</li> <li>option[property]: This accesses the dynamic property of the found <code>option</code>.</li> </ol> Example Usage <p>If you want to get the name:</p> <pre><code>const label = getLabelByValue(1, options);  // Defaults to 'name'\n</code></pre> <p>If you want to get a different property, such as description:</p> <pre><code>const label = getLabelByValue(1, options, 'description');\n</code></pre> <p>This makes the function flexible to return any dynamic property of the object within the <code>options</code> array.</p>"},{"location":"office/bank/antd-chartd/#reference","title":"Reference","text":"<ul> <li>Ant Design Charts: AntV</li> <li>AntV Gallery</li> <li>What is the best approach to show a loader / error message / data? </li> </ul>"},{"location":"office/bank/guide/","title":"Guide","text":""},{"location":"office/bank/guide/#usereducer","title":"useReducer","text":"FormReducer Hooks useStepForm.js<pre><code>import { useReducer } from \"react\";\n\n// Initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        case \"UPDATE_FORM\":\n            return {\n                ...state,\n                formValues: { ...state.formValues, ...action.payload },\n            };\n        default:\n            return state;\n    }\n};\n\n// Custom hook for form steps management\nconst useStepReducer = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep, formValues } = state;\n\n    const nextStep = () =&gt; dispatch({ type: \"NEXT\" });\n    const prevStep = () =&gt; dispatch({ type: \"PREV\" });\n    const resetSteps = () =&gt; dispatch({ type: \"RESET\" });\n    const updateForm = (values) =&gt;\n        dispatch({ type: \"UPDATE_FORM\", payload: values });\n\n    return {\n        currentStep,\n        formValues,\n        nextStep,\n        prevStep,\n        resetSteps,\n        updateForm,\n    };\n};\n\nexport default useStepReducer;\n</code></pre> VerticalStepsForm.jsx<pre><code>import React from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\nimport useStepReducer from \"./useStepReducer\"; // Import the custom hook\n\nconst currencies = [\n    { value: \"USD\", label: \"USD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"CAD\", label: \"CAD\" },\n    { value: \"INR\", label: \"INR\" },\n];\n\nconst VerticalStepsForm = () =&gt; {\n    const { currentStep, nextStep, prevStep, resetSteps, updateForm } =\n        useStepForm();\n    const [form] = Form.useForm();\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        form.resetFields(); // Reset form fields\n        resetSteps(); // Reset steps to the first step\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            await form.validateFields();\n            updateForm(form.getFieldsValue()); // Update form values in state\n            nextStep(); // Move to next step\n        } catch (error) {\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    // Handle moving to the previous step\n    const handlePrev = () =&gt; {\n        prevStep(); // Move to previous step\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n            title=\"Step 1\"\n            description={\n                currentStep === 0 &amp;&amp; (\n                &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"buyingCurrency\"\n                    label=\"Buying Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Buying Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item\n                    name=\"sellingCurrency\"\n                    label=\"Selling Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Selling Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n            title=\"Step 2\"\n            description={\n                currentStep === 1 &amp;&amp; (\n                &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"counterpartyName\"\n                    label=\"Counterparty Name\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please input Counterparty Name!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n            title=\"Step 3\"\n            description={\n                currentStep === 2 &amp;&amp; (\n                &lt;Form\n                    form={form}\n                    name=\"step3-form\"\n                    layout=\"vertical\"\n                    onFinish={onFinishSubmit}\n                &gt;\n                    &lt;Form.Item\n                    name=\"address\"\n                    label=\"Address\"\n                    rules={[\n                        { required: true, message: \"Please input your address!\" },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Submit\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre>"},{"location":"office/bank/intro/","title":"Intro","text":""},{"location":"office/bank/intro/#app","title":"APP","text":"<ul> <li>bk-fk.info.com.np - For FrontEnd</li> <li>bk-api.info.com.np - For API Backend</li> </ul> <pre><code>anil\nPass123$\n</code></pre>"},{"location":"office/bank/intro/#jenkins","title":"Jenkins","text":"<pre><code>adminbank\nIphone1234!@#$\n</code></pre> <ul> <li>http://ci-demo.info.com.np:8080</li> </ul>"},{"location":"office/bank/intro/#portainer","title":"Portainer","text":"<ul> <li>http://ci-demo.info.com.np:9000/</li> </ul>"},{"location":"office/bank/intro/#trunk-based-development","title":"Trunk Based Development","text":"2 things <ul> <li>only commit in the feature branch such as <code>PROD-FE-001</code></li> <li><code>MR</code> merge in branch such as <code>dev</code></li> </ul> <pre><code>master (stale)\n|\ndev (only associated)\n|\nstaging\n|\nrelease\n|\nTrunk\n</code></pre>"},{"location":"office/bank/intro/#trunk-based-development-tbd-explained","title":"Trunk-Based Development (TBD) Explained","text":"<p>Trunk-Based Development (TBD) is a software development approach where all developers continuously commit their changes to a single branch, called the <code>trunk</code> (often named <code>main</code> or <code>master</code>). The core philosophy behind TBD is to keep the codebase in a constantly deployable state, minimize integration issues, and encourage collaboration by frequently merging small changes.</p> To make TBD successful, you need: <ul> <li>Frequent commits</li> <li>Continuous testing and integration</li> <li>Short-lived feature branches (if needed)</li> <li>Feature flags for incomplete features</li> <li>A solid CI/CD pipeline</li> </ul>"},{"location":"office/bank/intro/#reference","title":"Reference","text":"<pre><code># .scss and .sass\nnpm add -D sass-embedded\n\n# sass\nnpm add -D sass\n</code></pre> <ul> <li>How to run SASS with React on Vite?</li> <li>How to setup SASS in Vite Environment and brief notes on important sass functionalities </li> <li>Sass &amp; Vite: A Guide for Your Next Workflow</li> <li>4 Steps to Add SASS/SCSS to React Typescript Project</li> <li>Sass Official</li> </ul>"},{"location":"office/bank/intro/#lodash","title":"Lodash","text":"<ul> <li>lodash: npmjs</li> <li>lodash: github</li> </ul> <ul> <li><code>(index) =&gt; {}</code>: Directly handles the index but does not involve event handling.</li> <li><code>(index) =&gt; (e) =&gt; {}</code>: Uses currying to handle dynamic events, capturing both the index (or other data) and the event (e), making it suitable for handling multiple events, like in lists of form elements.</li> </ul>"},{"location":"office/bank/intro/#others","title":"Others","text":"<pre><code>const handleRateAmtChange = () =&gt; {\n  let buyingAmount = form?.getFieldsValue().buyingAmount;\n  let rate = form?.getFieldsValue().rate;\n\n  if (buyingAmount &amp;&amp; rate) {\n    let calculate = buyingAmount * rate;\n    setSellingAmtRate(calculate);\n\n    // Correct method to set the field value\n    form.setFieldsValue({\n      sellingAmount: calculate,\n    });\n\n    logger.info({ msg: \"Rate Amount Change\", rate, calculate });\n  }\n};\n</code></pre> <pre><code>import React, { useState, useEffect } from \"react\";\nimport {\n  Steps,\n  Form,\n  Input,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  Row,\n  Col,\n  Typography,\n  Space,\n} from \"antd\";\nimport moment from \"moment\";\nimport logger from \"@shared/utils/logger\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport getLabelByValue from \"@shared/utils/getLabelByValue\";\nimport useStepReducer from \"@features/forex/hooks/useStepReducer\";\nimport {\n  useGetCurrencyQuery,\n  useGetCounterPartyQuery,\n  useGetCounterPartyByIdQuery,\n  useGetCounterPartyDealerQuery,\n  useGetDealCounterPartyAccQuery,\n  useGetDealCounterPartyAccByCurrencyQuery,\n  useGetExchangeRateQuery,\n} from \"@features/settings/services/settingApi\";\nimport { getLatestObjectForToday } from \"@shared/utils/todayRate\";\nimport { curencyFormatter } from \"@shared/utils/currencyFormatter\";\n\nimport \"../styles/VerticalStepsForm.scss\";\nimport { isEmpty } from \"lodash\";\n\nconst isDevelopmentMode = CONFIG.MODE === \"development\" ? false : true;\n\nconst { Text, Paragraph } = Typography;\nconst today = moment().format(\"YYYY-MM-DD\");\n\nconst VerticalStepsForm = () =&gt; {\n  const {\n    currentStep,\n    formValues,\n    nextStep,\n    prevStep,\n    resetSteps,\n    updateForm,\n  } = useStepReducer();\n\n  // Internal State\n  const [selectedIds, setSelectedIds] = useState({});\n  const [form] = Form.useForm();\n  const sellingCurrencyId = formValues?.sellingCurrency || \"\";\n\n  const {\n    data: exchangeRateData,\n    isLoading: exchangeRateLoading,\n    error: exchangeRateError,\n  } = useGetExchangeRateQuery(\n    {\n      date: today,\n      currencyId: formValues?.sellingCurrency,\n      exchangeType: 1,\n    },\n    {\n      skip: !formValues?.sellingCurrency,\n    }\n  );\n  const {\n    data: currency,\n    isLoading: currencyLoading,\n    error: currencyError,\n  } = useGetCurrencyQuery();\n  const {\n    data: bank,\n    isLoading: bankLoading,\n    error: bankError,\n  } = useGetCounterPartyQuery();\n  const {\n    data: bankUser,\n    isLoading: bankUserLoading,\n    error: bankUserError,\n  } = useGetCounterPartyByIdQuery(\n    { currencyId: selectedIds?.counterPartyId },\n    {\n      skip: !selectedIds?.counterPartyId,\n    }\n  );\n  const {\n    data: approvalUser,\n    isLoading: approvalUserLoading,\n    error: approvalUserError,\n  } = useGetCounterPartyDealerQuery();\n  const {\n    data: counterPartyAccount,\n    isLoading: counterPartyAccountLoading,\n    error: counterPartyAccountError,\n  } = useGetDealCounterPartyAccQuery();\n\n  const {\n    data: payFromAccount,\n    isLoading: payFromLoading,\n    error: payFromError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    { currencyCode: selectedIds?.sellingCurrencyCode, isOwnedByUs: true },\n    {\n      skip: !selectedIds.sellingCurrencyCode,\n    }\n  );\n\n  const {\n    data: theyReceivedAtAccount,\n    isLoading: theyReceivedAtLoading,\n    error: theyReceivedAtError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    { currencyCode: selectedIds?.buyingCurrencyCode, isOwnedByUs: false },\n    {\n      skip: !selectedIds.buyingCurrencyCode,\n    }\n  );\n\n  const {\n    data: weReceivedAtAccount,\n    isLoading: weReceivedAtLoading,\n    error: weReceivedAtError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    { currencyCode: selectedIds?.buyingCurrencyCode, isOwnedByUs: true },\n    {\n      skip: !selectedIds.buyingCurrencyCode,\n    }\n  );\n\n  let sellingCUR = getLabelByValue(\n    formValues.sellingCurrency,\n    currency,\n    \"code\"\n  );\n\n  logger.info({\n    msg: \"FORM: \",\n    currentStep,\n  });\n\n  useEffect(() =&gt; {\n    if (!isEmpty(exchangeRateData)) {\n      let todayRate = getLatestObjectForToday(exchangeRateData);\n      form.setFieldsValue({\n        rate: todayRate?.rate || null,\n      });\n    } else {\n      form.setFieldsValue({\n        rate: null,\n      });\n    }\n  }, [exchangeRateData, form, sellingCurrencyId]);\n\n  // Handle\n  const onFinishSubmit = async (values) =&gt; {\n    await form.validateFields();\n    updateForm(form.getFieldsValue());\n    // logger.info({ msg: \"Form Submit: \", formValues, values });\n    message.success(\"All steps completed! Your data has been submitted.\");\n    form.resetFields();\n    resetSteps();\n  };\n\n  const handleNext = async () =&gt; {\n    try {\n      await form.validateFields();\n      updateForm(form.getFieldsValue());\n      nextStep();\n    } catch (error) {\n      logger.error({ msg: \"Error: \", error });\n    }\n  };\n\n  const handlePrev = () =&gt; {\n    prevStep();\n  };\n\n  // Hanlde Amount Change\n  const handleSellingAmtChange = () =&gt; {\n    let buyingAmount = form?.getFieldsValue().buyingAmount || 0;\n    let rate = form?.getFieldsValue().rate || 0;\n\n    if (buyingAmount || rate) {\n      let calculate = buyingAmount * rate;\n\n      form.setFieldsValue({\n        sellingAmount: calculate,\n      });\n    }\n  };\n\n  // Handle Select\n  const handleSelect = (value, field) =&gt; {\n    setSelectedIds((prevState) =&gt; ({\n      ...prevState,\n      [field]: value,\n    }));\n  };\n\n  // Description\n  // const description1 = currentStep === 0 &amp;&amp; (\n  const description1 = currentStep &gt;= 0 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"buyingCurrency\"\n        label=\"Buying Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Buying Currency!\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Buying Currency\"\n          onChange={(value) =&gt; {\n            let code = getLabelByValue(value, currency, \"code\");\n            handleSelect(code, \"buyingCurrencyCode\");\n          }}\n        &gt;\n          {currency?.map((currency) =&gt; (\n            &lt;Select.Option key={currency.id} value={currency.id}&gt;\n              {currency.code}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"sellingCurrency\"\n        label=\"Selling Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Selling Currency\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Selling Currency\"\n          onChange={(value) =&gt; {\n            let code = getLabelByValue(value, currency, \"code\");\n            handleSelect(code, \"sellingCurrencyCode\");\n          }}\n        &gt;\n          {currency?.map((currency) =&gt; (\n            &lt;Select.Option key={currency.id} value={currency.id}&gt;\n              {currency.code}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 0 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description2 = currentStep === 1 &amp;&amp; (\n  const description2 = currentStep &gt;= 1 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step2-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"counterpartyName\"\n        label=\"Counterparty\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Counterparty\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Counterparty\"\n          onChange={(value) =&gt; handleSelect(value, \"counterPartyId\")}\n        &gt;\n          {bank?.map((bank) =&gt; (\n            &lt;Select.Option key={bank.id} value={bank.id}&gt;\n              {bank.name}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"counterpartyDealer\"\n        label=\"Counterparty Dealer\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Counterparty Dealer\",\n          },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Counterparty Dealer\"&gt;\n          {bankUser?.map((user) =&gt; (\n            &lt;Select.Option key={user.id} value={user.id}&gt;\n              {user.name}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 1 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt;\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description3 = currentStep === 2 &amp;&amp; (\n  const description3 = currentStep &gt;= 2 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step3-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"buyingAmount\"\n        label={`Buying Amount:  ${\n          getLabelByValue(formValues.buyingCurrency, currency, \"code\") ?? \"\"\n        }`}\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please input Buying Amount\",\n          },\n        ]}\n      &gt;\n        &lt;InputNumber\n          // min={0}\n          // max={9999999}\n          formatter={(value) =&gt;\n            curencyFormatter(\n              value,\n              getLabelByValue(formValues.sellingCurrency, currency, \"code\") ??\n                \"\"\n            )\n          }\n          onChange={handleSellingAmtChange}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"rate\"\n        label=\"Rate\"\n        rules={[{ required: false, message: \"Please input Rate\" }]}\n        onChange={handleSellingAmtChange}\n      &gt;\n        &lt;InputNumber style={{ width: \"100%\" }} /&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"sellingAmount\"\n        label={`Selling Amount: ${\n          getLabelByValue(formValues.sellingCurrency, currency, \"code\") ?? \"\"\n        }`}\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please input Selling Amount!\",\n          },\n        ]}\n      &gt;\n        &lt;InputNumber\n          formatter={(value) =&gt;\n            curencyFormatter(\n              value,\n              getLabelByValue(formValues.sellingCurrency, currency, \"code\") ??\n                \"\"\n            )\n          }\n          // formatter={(value) =&gt; value}\n          // parser={(value) =&gt; value?.replace(/\\$\\s?|(,*)/g, \"\")}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 2 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt;\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description4 = currentStep === 3 &amp;&amp; (\n  const description4 = currentStep &gt;= 3 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step4-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name=\"payFrom\"\n        label=\"We Pay From\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Payment\",\n          },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Payment\"&gt;\n          {payFromAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"theyReceivedAt\"\n        label=\"They Received at\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Received\" },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Received\"&gt;\n          {theyReceivedAtAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"weReceivedAt\"\n        label=\"We Received at\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select We Received!\",\n          },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Received\"&gt;\n          {weReceivedAtAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 3 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt;\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description5 = currentStep === 4 &amp;&amp; (\n  const description5 = currentStep &gt;= 4 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step5-form\" layout=\"vertical\"&gt;\n      &lt;Row gutter={40} style={{ marginBottom: \"2em\" }}&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Selling Currency&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(formValues?.sellingCurrency, currency)}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Rate&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;{formValues?.rate}&lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Buying Currency&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(formValues?.buyingCurrency, currency)}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Selling Value (NPR)\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;{formValues?.sellingAmount}&lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Counterparty name&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(formValues?.counterpartyName, bank)}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;We Pay From&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.payFrom,\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Counter Party Name\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(formValues?.counterpartyDealer, bankUser)}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;They Receive at&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.theyReceivedAt,\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Buying Amount (USD)\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;{formValues?.buyingAmount}&lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;We Receive at&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.weReceivedAt,\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n      &lt;/Row&gt;\n\n      {currentStep === 4 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt;\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description6 = currentStep === 5 &amp;&amp; (\n  const description6 = currentStep &gt;= 5 &amp;&amp; (\n    &lt;Form\n      form={form}\n      className=\"form-step\"\n      name=\"step6-form\"\n      layout=\"vertical\"\n      onFinish={onFinishSubmit}\n    &gt;\n      &lt;Form.Item\n        name=\"approvalPerson\"\n        label=\"Approval Person\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Received\" },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Received\" mode=\"multiple\"&gt;\n          {approvalUser?.map((user) =&gt; (\n            &lt;Select.Option key={user.id} value={user.id}&gt;\n              {user.name}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"remarks\"\n        label=\"Remarks\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please give your Remarks\" },\n        ]}\n      &gt;\n        &lt;Input.TextArea showCount maxLength={50} /&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 5 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt;\n          &lt;Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 10 }}&gt;\n            Submit\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  const description7 = currentStep &gt;= 6 &amp;&amp; (\n    // const description7 = currentStep === 6 &amp;&amp; (\n    &lt;Form\n      form={form}\n      className=\"form-step\"\n      name=\"step7-form\"\n      layout=\"vertical\"\n    &gt;&lt;/Form&gt;\n  );\n\n  return (\n    &lt;&gt;\n      &lt;div className=\"currency-exchange-steps\"&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n          &lt;Steps.Step title=\"Step 1\" description={description1} /&gt;\n          &lt;Steps.Step title=\"Step 2\" description={description2} /&gt;\n          &lt;Steps.Step title=\"Step 3\" description={description3} /&gt;\n          &lt;Steps.Step title=\"Step 4\" description={description4} /&gt;\n          &lt;Steps.Step title=\"Step 5\" description={description5} /&gt;\n          &lt;Steps.Step title=\"Step 6\" description={description6} /&gt;\n        &lt;/Steps&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default VerticalStepsForm;\n</code></pre> <ul> <li>[React] - How to calculate the total price in our cart using React.js Toolkit</li> </ul>"},{"location":"office/bank/last-update/","title":"Last Update","text":""},{"location":"office/bank/last-update/#last-update","title":"Last Update","text":"ForexForm.jsx<pre><code>// Side Effects\nuseEffect(() =&gt; {\n  if (transationTypeWatch === TRANSACTION_TYPE.BUY) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.SELLING_CURRENCY]: undefined,\n    });\n    const isBuyingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.BUYING_CURRENCY,\n    ]);\n    if (isBuyingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isBuyingCurrencySelected });\n    }\n  } else if (transationTypeWatch === TRANSACTION_TYPE.SELL) {\n    form.setFieldsValue({\n      [FOREX_DEAL?.BUYING_CURRENCY]: undefined,\n    });\n    const isSellingCurrencySelected = form.getFieldValue([\n      FOREX_DEAL?.SELLING_CURRENCY,\n    ]);\n    if (isSellingCurrencySelected) {\n      getCurrencyPairListingById({ currencyId: isSellingCurrencySelected });\n    }\n  }\n\n  form.setFieldsValue({\n    [FOREX_DEAL?.SELLING_AMOUNT]: undefined,\n    [FOREX_DEAL?.BUYING_AMOUNT]: undefined,\n    //\n    [FOREX_DEAL?.DEAL_APPROVERS]: null,\n    [FOREX_DEAL.DEAL_VERIFIERS]: null,\n  });\n  setApprovalOptions([]);\n  setVerifierOptions([]);\n  setSelectedApprovals([]);\n  setSelectedVerifier([]);\n}, [transationTypeWatch, form]);\n\nconst debouncedTriggerGetApprovalPerson = useCallback(\n  debounce((payload) =&gt; {\n    triggerGetApprovalPerson(payload);\n  }, 3000),\n  [triggerGetApprovalPerson]\n);\n\nuseEffect(() =&gt; {\n  const currentFormValues = form.getFieldsValue();\n  const buyingAmountValue = currentFormValues[FOREX_DEAL?.BUYING_AMOUNT];\n  const sellingAmountValue = currentFormValues[FOREX_DEAL?.SELLING_AMOUNT];\n\n  if (\n    transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n    buyingAmountValue !== \"undefined\" &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    !isNaN(sellingAmountValue) &amp;&amp;\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: sellingAmountValue,\n        sellingCurrencyId: buyingCurrencyWatch,\n      });\n  } else if (\n    transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n    sellingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    !isNaN(buyingAmountValue) &amp;&amp;\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: buyingAmountValue,\n        sellingCurrencyId: sellingCurrencyWatch,\n      });\n  }\n}, [\n  buyingAmountWatch,\n  sellingAmountWatch,\n\n  buyingCurrencyWatch,\n  sellingCurrencyWatch,\n  transationTypeWatch,\n  debouncedTriggerGetApprovalPerson,\n  form,\n]);\n\n// useEffect(() =&gt; {\n//   if (isSkipVerifierApprover) return null;\n//   if (!isSkipVerifierApprover) {\n//     if (\n//       transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n//       debouncedBuyingAmount &amp;&amp;\n//       buyingCurrencyWatch &amp;&amp;\n//       sellingCurrencyWatch\n//     ) {\n//       debouncedTriggerGetApprovalPerson({\n//         sellingAmount: debouncedSellingAmount,\n//         sellingCurrencyId: buyingCurrencyWatch,\n//       });\n//     } else if (\n//       transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n//       debouncedSellingAmount &amp;&amp;\n//       buyingCurrencyWatch &amp;&amp;\n//       sellingCurrencyWatch\n//     ) {\n//       debouncedTriggerGetApprovalPerson({\n//         sellingAmount: debouncedBuyingAmount,\n//         sellingCurrencyId: sellingCurrencyWatch,\n//       });\n//     }\n//   }\n// }, [\n//   debouncedBuyingAmount,\n//   debouncedSellingAmount,\n//   buyingCurrencyWatch,\n//   sellingCurrencyWatch,\n//   transationTypeWatch,\n//   debouncedTriggerGetApprovalPerson,\n//   isSkipVerifierApprover,\n// ]);\n</code></pre> processAmount.js<pre><code>const processAmount = (amount) =&gt; {\n  const parsedAmount = parseFloat(amount);\n\n  // Check if parsedAmount is a valid number and not NaN\n  if (!isNaN(parsedAmount)) {\n    return parsedAmount.toFixed(4); // Return the formatted value\n  }\n\n  // Return null for invalid input\n  return null;\n};\n\nexport default processAmount;\n</code></pre> <p>Updated this logic in the the <code>ForexForm.js</code></p> ForexForm.jsx<pre><code>useEffect(() =&gt; {\n  const currentFormValues = form.getFieldsValue();\n  const buyingAmountValue = currentFormValues[FOREX_DEAL?.BUYING_AMOUNT];\n  const sellingAmountValue = currentFormValues[FOREX_DEAL?.SELLING_AMOUNT];\n\n  // Helper function to handle the logic of checking if a value is a valid number\n  const processAmount = (amount) =&gt; {\n    const parsedAmount = parseFloat(amount);\n    if (!isNaN(parsedAmount)) {\n      return parsedAmount.toFixed(4); // Return the formatted value if it's a valid number\n    }\n    return null; // Return null if the amount is not valid\n  };\n\n  // Transaction logic for 'BUY'\n  if (\n    transationTypeWatch === TRANSACTION_TYPE.BUY &amp;&amp;\n    buyingAmountValue !== undefined &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    const formattedSellingAmount = processAmount(sellingAmountValue);\n    if (formattedSellingAmount !== null) {\n      console.log(\"sellingAmountValue: \", formattedSellingAmount);\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedSellingAmount,\n        sellingCurrencyId: buyingCurrencyWatch,\n      });\n    } else {\n      console.log(\"Invalid sellingAmountValue\");\n    }\n  }\n\n  // Transaction logic for 'SELL'\n  else if (\n    transationTypeWatch === TRANSACTION_TYPE.SELL &amp;&amp;\n    sellingAmountValue &amp;&amp;\n    buyingCurrencyWatch &amp;&amp;\n    sellingCurrencyWatch\n  ) {\n    const formattedBuyingAmount = processAmount(buyingAmountValue);\n    if (formattedBuyingAmount !== null) {\n      console.log(\"buyingAmountValue: \", formattedBuyingAmount);\n      debouncedTriggerGetApprovalPerson({\n        sellingAmount: formattedBuyingAmount,\n        sellingCurrencyId: sellingCurrencyWatch,\n      });\n    } else {\n      console.log(\"Invalid buyingAmountValue\");\n    }\n  }\n}, [\n  buyingAmountWatch,\n  sellingAmountWatch,\n  buyingCurrencyWatch,\n  sellingCurrencyWatch,\n  transationTypeWatch,\n  debouncedTriggerGetApprovalPerson,\n  form,\n]);\n</code></pre>"},{"location":"office/bank/last-update/#utility-function","title":"Utility Function","text":"<pre><code>export function newCurrentVerifiers(data) {\n  if (!Array.isArray(data)) return [];\n\n  const { VERIFIER } = HIERARCHY_LEVEL_STATUS || {};\n\n  // return data.filter((item) =&gt; item?.levelStatus === VERIFIER);\n\n  const filteredVerifiers = data\n    .filter((item) =&gt; item?.levelStatus === VERIFIER)\n    .sort((a, b) =&gt; a?.approvalOrderNumber - b?.approvalOrderNumber);\n\n  return filteredVerifiers;\n}\n\nexport function newCurrentApprovers(data) {\n  if (!Array.isArray(data)) return [];\n\n  const { APPROVER } = HIERARCHY_LEVEL_STATUS || {};\n\n  // return data.filter((item) =&gt; item?.levelStatus === APPROVER);\n\n  const filteredApprovers = data\n    .filter((item) =&gt; item?.levelStatus === APPROVER)\n    .sort((a, b) =&gt; a?.approvalOrderNumber - b?.approvalOrderNumber);\n\n  return filteredApprovers;\n}\n</code></pre>"},{"location":"office/bank/optimization/","title":"Optimize","text":"<pre><code>// src/pages/DashboardLayout.js\nimport { Outlet } from \"react-router-dom\";\n\nconst DashboardLayout = () =&gt; {\n  return (\n    &lt;div className=\"dashboard-layout\"&gt;\n      &lt;nav className=\"sidebar\"&gt;\n        {/* Sidebar with links to Analysis, Workspace, etc. */}\n      &lt;/nav&gt;\n      &lt;main className=\"content\"&gt;\n        &lt;Outlet /&gt; {/* Child routes will be rendered here */}\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default DashboardLayout;\n</code></pre> <pre><code>pnpm add sass\n</code></pre> main.scssApp.jsx <pre><code>/* src/styles/main.scss */\n$primary-color: #42b983;\n\nbody {\n    background-color: $primary-color;\n    font-family: Arial, sans-serif;\n}\n</code></pre> <pre><code>// src/App.jsx or src/App.tsx\nimport React from 'react';\nimport './styles/main.scss';  // Importing the Sass file\n\nfunction App() {\n    return (\n        &lt;div className=\"App\"&gt;\n            &lt;h1&gt;Hello, React with Vite and Sass!&lt;/h1&gt;\n        &lt;/div&gt;\n    );\n}\n\nexport default App;\n</code></pre>"},{"location":"office/bank/optimization/#sass-example-folder-structure","title":"SASS Example Folder Structure:","text":"<pre><code>src/\n\u2502\n\u251c\u2500\u2500 assets/             # Images, fonts, icons, etc.\n\u2502\n\u251c\u2500\u2500 features/           # Feature-specific code\n\u2502   \u251c\u2500\u2500 dashboard/      # Feature 1\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.scss\n\u2502   \u251c\u2500\u2500 user/           # Feature 2\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u251c\u2500\u2500 user.scss\n\u2502\n\u251c\u2500\u2500 shared/             # Shared code\n\u2502   \u251c\u2500\u2500 components/     # Reusable components (buttons, modals, etc.)\n\u2502   \u251c\u2500\u2500 styles/         # Global styles (variables, mixins, etc.)\n\u2502   \u2502   \u251c\u2500\u2500 _variables.scss\n\u2502   \u2502   \u251c\u2500\u2500 _mixins.scss\n\u2502   \u2502   \u251c\u2500\u2500 _global.scss\n\u2502\n\u251c\u2500\u2500 App.jsx             # Your main React component\n\u251c\u2500\u2500 index.js            # Entry point\n</code></pre>"},{"location":"office/bank/optimization/#details-on-folder-structure","title":"Details on Folder Structure","text":"<p>1. Shared Folder (Global Styles)</p> <p>In the <code>shared</code> folder, you can maintain global styles, such as Sass variables, mixins, resets, and global styles that will be used across the application.</p> <pre><code>src/shared/styles/\n  \u251c\u2500\u2500 _variables.scss   # Global variables like colors, fonts, etc.\n  \u251c\u2500\u2500 _mixins.scss      # Global mixins\n  \u251c\u2500\u2500 _global.scss      # Global styles (reset, body, fonts, etc.)\n  \u251c\u2500\u2500 _animations.scss  # Global animations\n</code></pre> <p>2. Feature-Specific Styles</p> <p>Each feature can have its own scss file to store styles relevant to that feature. This keeps styles modular and scoped to the feature.</p> <pre><code>src/features/dashboard/dashboard.scss   # Styles specific to the dashboard feature\nsrc/features/user/user.scss             # Styles specific to the user feature\n</code></pre> <p>Within each feature folder, you can also organize the components and any nested styles specific to that feature. For example:</p> <pre><code>src/features/dashboard/components/      # Individual component styles for the dashboard\nsrc/features/user/components/           # Individual component styles for the user\n</code></pre> <p>3. Importing and Using Sass</p> <ul> <li>Shared Styles: Import shared styles globally, usually at the root of the app or in the entry file (like <code>App.jsx</code>).</li> </ul> src/App.jsx<pre><code>import \"./shared/styles/global.scss\"; // Global styles (reset, fonts, etc.)\nimport \"./shared/styles/_variables.scss\"; // Global variables (if needed)\nimport \"./shared/styles/_mixins.scss\"; // Global mixins\n</code></pre> <ul> <li>Feature-Specific Styles: Import the feature-specific styles in the corresponding component.</li> </ul> src/features/dashboard/Dashboard.jsx<pre><code>import \"./dashboard.scss\"; // Importing feature-specific styles\n</code></pre>"},{"location":"office/bank/optimization/#best-practices-for-managing-sass-in-a-feature-based-structure","title":"Best Practices for Managing Sass in a Feature-Based Structure","text":"<ol> <li> <p>Modularity: Keep feature-specific styles scoped to the relevant feature folder. This makes your app more modular and easier to manage as it scales.</p> </li> <li> <p>Shared Styles: Define global styles such as colors, font sizes, and mixins in the <code>shared/styles/</code> folder. This avoids duplication and ensures consistency across features.</p> </li> <li> <p>Naming Conventions:</p> <ul> <li>Use descriptive and consistent naming for styles. For example, if a feature is called <code>dashboard</code>, its styles could be named <code>dashboard.scss</code>.</li> <li>Use underscores (<code>_</code>) for partial files in Sass (those that don't compile into standalone CSS files but are imported into other files), such as <code>_variables.scss</code>, <code>_mixins.scss</code>, and <code>_global.scss</code>.</li> </ul> </li> <li> <p>Avoid Global Overrides: While it's fine to have global styles for body, fonts, and layout, try to avoid defining styles that could unintentionally override styles within specific features. Instead, scope styles to features as much as possible.</p> </li> <li> <p>Nesting: If necessary, use Sass's nesting feature to scope styles to a specific class or element.</p> </li> </ol> <pre><code>/* src/features/dashboard/dashboard.scss */\n.dashboard {\n  background-color: $primary-color;\n  .card {\n    padding: 10px;\n  }\n}\n</code></pre>"},{"location":"office/bank/optimization/#final-folder-structure-example-with-sass","title":"Final Folder Structure Example with Sass","text":"<pre><code>src/\n\u251c\u2500\u2500 assets/\n\u251c\u2500\u2500 features/\n\u2502   \u251c\u2500\u2500 dashboard/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.jsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Card.scss\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.scss\n\u2502   \u251c\u2500\u2500 user/\n\u2502   \u2502   \u251c\u2500\u2500 components/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserCard.jsx\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 UserCard.scss\n\u2502   \u2502   \u251c\u2500\u2500 user.scss\n\u251c\u2500\u2500 shared/\n\u2502   \u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u2502   \u251c\u2500\u2500 _variables.scss\n\u2502   \u2502   \u251c\u2500\u2500 _mixins.scss\n\u2502   \u2502   \u251c\u2500\u2500 _global.scss\n\u251c\u2500\u2500 App.jsx\n\u251c\u2500\u2500 index.js\n</code></pre>"},{"location":"office/bank/optimization/#conclusion","title":"Conclusion","text":"<p>In summary, the best practice for organizing your Sass files in a feature-based folder structure is:</p> <ul> <li>Place global styles (variables, mixins, resets) in the <code>shared/styles/</code> folder.</li> <li>Organize each feature's styles within the <code>features/{featureName}/</code> folder, keeping them scoped to the feature.</li> <li>Import global styles once in your main <code>App.jsx</code> or entry file and feature-specific styles within their corresponding components.</li> </ul> <p>This approach keeps your styles modular, scalable, and easy to maintain as your project grows.</p>"},{"location":"office/bank/optimization/#antd-steps","title":"Antd Steps","text":"VerticalStepsForm.jsxImproved 2Improved 3 <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button } from \"antd\";\n\nconst { Step } = Steps;\n\n// Define steps and initial state\nconst steps = [\n    { title: \"Step 1\", content: \"Form 1\" },\n    { title: \"Step 2\", content: \"Form 2\" },\n    { title: \"Step 3\", content: \"Form 3\" },\n    { title: \"Step 4\", content: \"Form 4\" },\n    { title: \"Step 5\", content: \"Form 5\" },\n];\n\nconst initialState = { currentStep: 0 };\n\n// Reducer function\nconst reducer = (state, action) =&gt; {\nswitch (action.type) {\n    case \"NEXT\":\n    return { ...state, currentStep: state.currentStep + 1 };\n    case \"PREV\":\n    return { ...state, currentStep: state.currentStep - 1 };\n    case \"RESET\":\n    return { ...state, currentStep: 0 };\n    default:\n    return state;\n}\n};\n\nconst VerticalStepsForm = () =&gt; {\nconst [state, dispatch] = useReducer(reducer, initialState);\n\nconst handleNext = () =&gt; dispatch({ type: \"NEXT\" });\nconst handlePrev = () =&gt; dispatch({ type: \"PREV\" });\nconst handleReset = () =&gt; dispatch({ type: \"RESET\" });\n\nconst renderForm = (step) =&gt; {\n    switch (step) {\n    case 0:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Name\" name=\"name\"&gt;\n            &lt;Input placeholder=\"Enter your name\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 1:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Email\" name=\"email\"&gt;\n            &lt;Input placeholder=\"Enter your email\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 2:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Phone\" name=\"phone\"&gt;\n            &lt;Input placeholder=\"Enter your phone number\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 3:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Address\" name=\"address\"&gt;\n            &lt;Input placeholder=\"Enter your address\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    case 4:\n        return (\n        &lt;Form layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Summary\" name=\"summary\"&gt;\n            &lt;Input.TextArea placeholder=\"Enter summary\" /&gt;\n            &lt;/Form.Item&gt;\n            &lt;Button onClick={handlePrev}&gt;Previous&lt;/Button&gt;\n            &lt;Button type=\"primary\" onClick={handleReset}&gt;\n            Finish\n            &lt;/Button&gt;\n        &lt;/Form&gt;\n        );\n    default:\n        return null;\n    }\n};\n\nreturn (\n    &lt;div style={{ display: \"flex\", gap: \"20px\" }}&gt;\n    &lt;div style={{ width: \"30%\" }}&gt;\n        &lt;Steps direction=\"vertical\" current={state.currentStep}&gt;\n        {steps.map((step, index) =&gt; (\n            &lt;Step key={index} title={step.title} /&gt;\n        ))}\n        &lt;/Steps&gt;\n    &lt;/div&gt;\n    &lt;div style={{ width: \"70%\" }}&gt;{renderForm(state.currentStep)}&lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n\nexport default VerticalStepsForm;\n</code></pre> <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\n\n// Define the initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        default:\n            return state;\n    }\n};\n\nconst VerticalStepsForm = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep } = state;\n\n    const [form] = Form.useForm();\n\n    // Currency options\n    const currencies = [\n        { value: \"USD\", label: \"USD\" },\n        { value: \"EUR\", label: \"EUR\" },\n        { value: \"GBP\", label: \"GBP\" },\n        { value: \"JPY\", label: \"JPY\" },\n        { value: \"AUD\", label: \"AUD\" },\n        { value: \"CAD\", label: \"CAD\" },\n        { value: \"INR\", label: \"INR\" },\n    ];\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        dispatch({ type: \"RESET\" }); // Reset after submission\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            // Validate the current form fields\n            const values = await form.validateFields();\n            // If validation passes, move to the next step\n            dispatch({ type: \"NEXT\" });\n        } catch (error) {\n            // If validation fails, show an error message\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n                title=\"Step 1\"\n                description={\n                    currentStep === 0 &amp;&amp; (\n                    &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                        &lt;Form.Item\n                            name=\"buyingCurrency\"\n                            label=\"Buying Currency\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please select Buying Currency!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                            {currencies.map((currency) =&gt; (\n                            &lt;Select.Option\n                                key={currency.value}\n                                value={currency.value}\n                            &gt;\n                                {currency.label}\n                            &lt;/Select.Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item\n                            name=\"sellingCurrency\"\n                            label=\"Selling Currency\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please select Selling Currency!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                            {currencies.map((currency) =&gt; (\n                            &lt;Select.Option\n                                key={currency.value}\n                                value={currency.value}\n                            &gt;\n                                {currency.label}\n                            &lt;/Select.Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                            Next\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n                title=\"Step 2\"\n                description={\n                    currentStep === 1 &amp;&amp; (\n                    &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                        &lt;Form.Item\n                            name=\"counterpartyName\"\n                            label=\"Counterparty Name\"\n                            rules={[\n                                {\n                                required: true,\n                                message: \"Please input Counterparty Name!\",\n                                },\n                            ]}\n                        &gt;\n                        &lt;Input /&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                            Next\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"default\"\n                            onClick={() =&gt; dispatch({ type: \"PREV\" })}\n                            style={{ marginLeft: 10 }}\n                        &gt;\n                            Back\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n                title=\"Step 3\"\n                description={\n                    currentStep === 2 &amp;&amp; (\n                    &lt;Form\n                        form={form}\n                        name=\"step3-form\"\n                        layout=\"vertical\"\n                        onFinish={onFinishSubmit}\n                    &gt;\n                        &lt;Form.Item\n                            name=\"address\"\n                            label=\"Address\"\n                            rules={[\n                                { required: true, message: \"Please input your address!\" },\n                            ]}\n                        &gt;\n                        &lt;Input /&gt;\n                        &lt;/Form.Item&gt;\n\n                        &lt;Form.Item&gt;\n                        &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"default\"\n                            onClick={() =&gt; dispatch({ type: \"PREV\" })}\n                            style={{ marginLeft: 10 }}\n                        &gt;\n                            Back\n                        &lt;/Button&gt;\n                        &lt;/Form.Item&gt;\n                    &lt;/Form&gt;\n                    )\n                }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre> <pre><code>import React, { useReducer } from \"react\";\nimport { Steps, Form, Input, Button, Select, message } from \"antd\";\n\n// Define the initial state\nconst initialState = {\n    currentStep: 0,\n    formValues: {},\n};\n\n// Reducer function to manage state changes\nconst reducer = (state, action) =&gt; {\n    switch (action.type) {\n        case \"NEXT\":\n            return { ...state, currentStep: state.currentStep + 1 };\n        case \"PREV\":\n            return { ...state, currentStep: state.currentStep - 1 };\n        case \"RESET\":\n            return { ...state, currentStep: 0 };\n        default:\n            return state;\n    }\n};\n\nconst VerticalStepsForm = () =&gt; {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentStep } = state;\n\n    const [form] = Form.useForm();\n\n    // Currency options\n    const currencies = [\n        { value: \"USD\", label: \"USD\" },\n        { value: \"EUR\", label: \"EUR\" },\n        { value: \"GBP\", label: \"GBP\" },\n        { value: \"JPY\", label: \"JPY\" },\n        { value: \"AUD\", label: \"AUD\" },\n        { value: \"CAD\", label: \"CAD\" },\n        { value: \"INR\", label: \"INR\" },\n    ];\n\n    // Handle form submission for Step 3 (final submit)\n    const onFinishSubmit = (values) =&gt; {\n        console.log(\"Final submitted values:\", values);\n        message.success(\"All steps completed! Your data has been submitted.\");\n        form.resetFields(); // Reset form fields\n        dispatch({ type: \"RESET\" }); // Reset steps to the first step\n    };\n\n    // Handle moving to the next step with validation\n    const handleNext = async () =&gt; {\n        try {\n            // Validate the current form fields\n            await form.validateFields();\n            // If validation passes, move to the next step\n            dispatch({ type: \"NEXT\" });\n        } catch (error) {\n            console.log(\"Validation failed:\", error);\n        }\n    };\n\n    // Handle moving to the previous step\n    const handlePrev = () =&gt; {\n        dispatch({ type: \"PREV\" });\n    };\n\n    return (\n        &lt;&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n            {/* Step 1 */}\n            &lt;Steps.Step\n            title=\"Step 1\"\n            description={\n                currentStep === 0 &amp;&amp; (\n                &lt;Form form={form} name=\"step1-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"buyingCurrency\"\n                    label=\"Buying Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Buying Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Buying Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item\n                    name=\"sellingCurrency\"\n                    label=\"Selling Currency\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please select Selling Currency!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Select placeholder=\"Select Selling Currency\"&gt;\n                        {currencies.map((currency) =&gt; (\n                        &lt;Select.Option\n                            key={currency.value}\n                            value={currency.value}\n                        &gt;\n                            {currency.label}\n                        &lt;/Select.Option&gt;\n                        ))}\n                    &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 2 */}\n            &lt;Steps.Step\n            title=\"Step 2\"\n            description={\n                currentStep === 1 &amp;&amp; (\n                &lt;Form form={form} name=\"step2-form\" layout=\"vertical\"&gt;\n                    &lt;Form.Item\n                    name=\"counterpartyName\"\n                    label=\"Counterparty Name\"\n                    rules={[\n                        {\n                        required: true,\n                        message: \"Please input Counterparty Name!\",\n                        },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" onClick={handleNext}&gt;\n                        Next\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n\n            {/* Step 3 */}\n            &lt;Steps.Step\n            title=\"Step 3\"\n            description={\n                currentStep === 2 &amp;&amp; (\n                &lt;Form\n                    form={form}\n                    name=\"step3-form\"\n                    layout=\"vertical\"\n                    onFinish={onFinishSubmit}\n                &gt;\n                    &lt;Form.Item\n                    name=\"address\"\n                    label=\"Address\"\n                    rules={[\n                        { required: true, message: \"Please input your address!\" },\n                    ]}\n                    &gt;\n                    &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n\n                    &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Submit\n                    &lt;/Button&gt;\n                    &lt;Button\n                        type=\"default\"\n                        onClick={handlePrev}\n                        style={{ marginLeft: 10 }}\n                    &gt;\n                        Back\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n                )\n            }\n            /&gt;\n        &lt;/Steps&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default VerticalStepsForm;\n</code></pre>"},{"location":"office/bank/sass/","title":"Sass","text":"bash<pre><code>pnpm add sass\n\n# .scss and .sass\nnpm add -D sass-embedded\n\n# sass\nnpm add -D sass\n</code></pre> <p>Deprecation [legacy-js-api]: The legacy JS API is deprecated and will be removed in Dart Sass 2.0.0.</p> Solved<pre><code>export default defineConfig({\n  /* Solved */\n  css: {\n    preprocessorOptions: {\n      scss: {\n        api: \"modern\",\n      },\n    },\n  },\n});\n</code></pre> Quote <p>No need to define <code>MODE</code> in <code>.env</code> files, as Vite automatically sets it.</p> <ul> <li>Vite env and mode</li> </ul>"},{"location":"office/bank/sass/#sass-folder-structure-for-feature-base-file-structure","title":"Sass Folder Structure for feature base file structure","text":"SCSS file structure UsageConclusion <pre><code>src/\n    shared/\n        styles/\n            _variables.scss        # Global variables (colors, fonts, etc.)\n            _mixins.scss           # Global mixins (reusable pieces of code)\n            _media-queries.scss    # Media queries and breakpoints\n            _base.scss             # Base styles (reset, normalization)\n            _typography.scss       # Typography settings (fonts, line heights, etc.)\n            _buttons.scss          # Button styles\n            _card.scss             # Card component styles\n            _grid.scss             # Grid layout system\n            _forms.scss            # Form element styles\n            _icons.scss            # Icon styles\n            _utilities.scss        # Utility classes (margins, paddings, etc.)\n            _theme.scss            # Theme styles (e.g., dark/light mode)\n            _animations.scss       # Animation keyframes and classes\n            _global.scss           # Global styles (import all files here)\n</code></pre> <pre><code>/* main.scss */\n@import 'shared/styles/variables';\n@import 'shared/styles/mixins';\n@import 'shared/styles/global';\n@import 'shared/styles/animations';\n@import 'shared/styles/media-queries';\n@import 'shared/styles/base';\n@import 'shared/styles/typography';\n@import 'shared/styles/buttons';\n@import 'shared/styles/card';\n@import 'shared/styles/grid';\n@import 'shared/styles/forms';\n@import 'shared/styles/icons';\n@import 'shared/styles/utilities';\n@import 'shared/styles/theme';\n</code></pre> <ul> <li>Base styles, typography, and utilities provide a solid foundation for your project.</li> <li>Component-specific styles (e.g., buttons, cards, forms) ensure reusability and consistency across UI components.</li> <li>Grid and layout styles make it easier to manage page structures and responsive layouts.</li> <li>Animations and media queries improve the user experience and provide responsiveness.</li> </ul> <p>Deprecation Warning: Sass <code>@import</code> rules are deprecated and will be removed in Dart Sass 3.0.</p> <p>The deprecation warning you are seeing is due to the fact that the @import rule in Sass is being deprecated and will eventually be removed in Dart Sass 3.0. The recommended approach is to replace <code>@import</code> with the newer <code>@use</code> rule, which offers better modularization and namespace management.</p> Key Differences Between @import and @use: <ul> <li>Namespace Management: <code>@use</code> automatically places the variables, mixins, and functions it imports into a namespace to avoid naming conflicts.With <code>@import</code>, everything is global by default.</li> <li>Performance: <code>@use</code> loads a file once per stylesheet, while <code>@import</code> can potentially load the same file multiple times, affecting performance.</li> <li>Organization: <code>@use</code> encourages more structured and modular SCSS by enforcing namespace rules.</li> </ul>"},{"location":"office/bank/sass/#how-to-migrate-from-import-to-use","title":"How to Migrate from @import to @use","text":"<p>Here\u2019s how you can migrate your current @import approach to @use.</p>"},{"location":"office/bank/sass/#1-use-usefor-scss-files","title":"1. Use <code>@use</code>for SCSS files","text":"<p>You should replace <code>@import</code> with <code>@use</code> in your SCSS files. Below are the steps you need to follow:</p> <ul> <li>Replace @import: Change your <code>@import</code> rules to <code>@use</code>.</li> <li>Namespace: When you use <code>@use</code>, it creates a namespace for the file being imported, unless you explicitly specify an alias.</li> </ul> <p>???+ example title=\"Changing @import to @use\"</p> <pre><code>=== \"Before (using @import)\"\n\n    ```scss\n    /* _global.scss */\n    @import 'variables';\n    @import 'mixins';\n    @import 'media-queries';\n\n    /* Your global styles */\n    ```\n\n=== \"After (using @use)\"\n\n    ```scss\n    /* _global.scss */\n    @use 'variables' as *; // This imports everything globally from 'variables'\n    @use 'mixins' as *;     // This imports everything globally from 'mixins'\n    @use 'media-queries' as mq; // 'mq' will be the namespace for media-queries\n\n    /* Your global styles */\n    ```\n\nIn this example, the `@use 'variables' as *;` statement brings all variables, mixins, and functions into the global scope (like `@import` did).\n\nFor files where you want to namespace them (like media queries), you can use an alias to prevent naming conflicts. Here, `@use 'media-queries' as mq;` means you\u2019ll reference any media query mixins like `mq.respond-to(md)`.\n</code></pre>"},{"location":"office/bank/sass/#2-adjust-your-imports-in-mainscss","title":"2. Adjust Your Imports in <code>main.scss</code>","text":"<p>In your <code>main.scss</code>, change your imports to <code>@use</code> as well.</p> Example Before (using @import)After (using @use) <pre><code>/* main.scss */\n@import 'shared/styles/variables';\n@import 'shared/styles/mixins';\n@import 'shared/styles/global';\n@import 'shared/styles/animations';\n@import 'shared/styles/media-queries';\n</code></pre> <pre><code>/* main.scss */\n@use 'shared/styles/variables' as *;\n@use 'shared/styles/mixins' as *;\n@use 'shared/styles/global' as *;\n@use 'shared/styles/animations' as *;\n@use 'shared/styles/media-queries' as mq; /* Using 'mq' as namespace for media queries */\n</code></pre>"},{"location":"office/bank/sass/#3-handling-specific-files-with-aliases","title":"3. Handling Specific Files with Aliases","text":"<p>You can also choose to alias specific files when using <code>@use</code> to avoid naming conflicts or create better structure.</p> ExampleExplanation <pre><code>/* Example with aliasing */\n@use 'shared/styles/variables' as v;\n@use 'shared/styles/mixins' as m;\n@use 'shared/styles/animations' as anim;\n@use 'shared/styles/media-queries' as mq;\n\nbody {\n    background-color: v.$primary-color;\n}\n\nh1 {\n    @include m.border-radius(5px);\n    animation: anim.fadeIn 1s ease-in-out;\n}\n\n@include mq.respond-to(sm) {\n    h1 {\n        font-size: 1.5rem;\n    }\n}\n</code></pre> <p>In this case:</p> <ul> <li>Variables are accessed via <code>v.$primary-color</code>.</li> <li>Mixins are accessed via <code>m.border-radius()</code>.</li> <li>Animations are accessed via <code>anim.fadeIn</code>.</li> <li>Media queries are accessed via <code>mq.respond-to()</code>.</li> </ul>"},{"location":"office/bank/sass/#4-handling-file-paths","title":"4. Handling File Paths","text":"<p>Ensure that the file paths are correct when using <code>@use</code>. For example, if your SCSS files are located in <code>src/shared/styles</code>, and you want to import them, you\u2019ll need to either specify the full relative path or configure your project to resolve the paths automatically.</p> <ul> <li>Relative Path: Use relative paths like <code>@use '../styles/variables';</code> or <code>@use '../../styles/variables';</code> depending on your file structure.</li> <li>Vite Configuration: If you're using Vite, you can configure SCSS path aliases to make your imports cleaner and shorter.</li> </ul> Vite ConfigUsage <pre><code>// vite.config.js\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n    plugins: [react()],\n    resolve: {\n        alias: {\n            \"@styles\": \"/src/shared/styles\", // Set up an alias for styles folder\n        },\n    },\n});\n</code></pre> <pre><code>@use '@styles/variables' as *;\n@use '@styles/mixins' as *;\n@use '@styles/media-queries' as mq;\n</code></pre>"},{"location":"office/bank/sass/#5-additional-notes","title":"5. Additional Notes","text":"<ul> <li>Avoid Overusing <code>@import</code>: With <code>@use</code>, the module is loaded only once, unlike <code>@import</code>, which can cause multiple loadings of the same file.</li> <li>No Global Variables: By default, <code>@use</code> keeps variables and mixins in the namespace. However, if you want to use them globally, use <code>as *</code> or reference them using the alias (e.g., <code>variables.$primary-color</code>).</li> </ul> Conclusion <p>The Sass team recommends using <code>@use</code> instead of <code>@import</code> for better modularization, namespacing, and performance. Transitioning to <code>@use</code> should be done gradually to ensure compatibility, but it's a good practice to start now to avoid issues when Sass fully deprecates <code>@import</code> in future versions.</p>"},{"location":"office/bank/sass/#reference","title":"Reference","text":"<ul> <li>The legacy JS API is deprecated and will be removed in Dart Sass 2.0.0</li> <li>Shared Options - css.preprocessorOptions </li> <li>Legacy JS API is deprecated message missing info   #2352</li> <li>@use</li> <li>@use &amp; @forward in SASS</li> <li>The @use feature of Sass: stackoverflow</li> </ul>"},{"location":"office/bank/usefull-code/","title":"Usefull Code","text":""},{"location":"office/bank/usefull-code/#usefull-code","title":"Usefull Code","text":"Success <p>To ensure that <code>setSelectedItem</code> is called only once and not triggered on every change to <code>data</code>, you can add a condition inside the <code>useEffect</code> to check if <code>selectedItem</code> is already set. If <code>selectedItem</code> is already populated, you can avoid setting it again.</p> <p>Here\u2019s an updated version of your code that makes sure <code>setSelectedItem</code> is called only once:</p> DealsList.jsx<pre><code>/*\n* POST SUBMIT SELECTING THE ITEM\n*/\nuseEffect(() =&gt; {\n    if (!selectedItem) {\n        const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n        if (itemToSelect) {\n            setSelectedItem(itemToSelect);\n        } else if (data?.length &gt; 0) {\n            setSelectedItem(data[0]);\n        }\n    }\n}, [formCreationId, data, selectedItem]);\n</code></pre> Explanation <ul> <li>The <code>useEffect</code> now checks if <code>selectedItem</code> is already set (if (<code>!selectedItem</code>)).</li> <li>If <code>selectedItem</code> is not set yet, it proceeds to find the item based on <code>formCreationId</code> and set the <code>selectedItem</code>.</li> <li>The <code>useEffect</code> will run whenever <code>formCreationId</code>, <code>data</code>, or <code>selectedItem</code> changes.</li> </ul> <p>This ensures that <code>setSelectedItem</code> is called only once when the component first renders, or when the <code>formCreationId</code> is updated. It won\u2019t get triggered on every data update if the <code>selectedItem</code> is already set.</p> Bug <pre><code>/*\n* POST SUBMIT SELECTING THE ITEM\n*/\nuseEffect(() =&gt; {\n    // const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n    // if (itemToSelect) {\n    //   setSelectedItem(itemToSelect);\n    // }\n    // else if (data?.length &gt; 0) {\n    //   setSelectedItem(data[0]);\n    // }\n\n    if (!formCreationId) {\n        setSelectedItem(data?.[0] || null);\n        return;\n    }\n    const itemToSelect = data?.find((deal) =&gt; deal?.id === formCreationId);\n    if (itemToSelect) {\n        setSelectedItem(itemToSelect);\n    } else if (data?.length &gt; 0) {\n        setSelectedItem(data[0]);\n    }\n}, [formCreationId, data]);\n</code></pre> Problem <ul> <li>Re-running on every change: Every time <code>formCreationId</code> or <code>data</code> changes, the <code>useEffect</code> runs, even if <code>setSelectedItem</code> doesn't need to be called again. For instance, if <code>formCreationId</code> is set multiple times, the effect will run again each time, even if the item to select doesn't change.</li> <li>No guard against redundant updates: There\u2019s no check to see if <code>selectedItem</code> has already been set, which can lead to unnecessary updates or resets of the selected item.</li> </ul> <p>The underlying issue is that the code doesn't account for the fact that <code>setSelectedItem</code> should ideally only be called once under certain conditions (e.g., when the component first mounts or when a relevant prop changes). Without such a guard, every change to <code>formCreationId</code> or <code>data</code> triggers a new update, even if it isn't necessary.</p> <p>Solution:</p> <p>To resolve this, you would add a check to ensure that setSelectedItem is only called when needed, preventing unnecessary updates to the state.</p>"},{"location":"office/bank/usefull-code/#definition","title":"DEFINITION","text":"<p>what difference between query and lazy query in rtk query. how to define them</p> <p>In RTK Query, which is part of Redux Toolkit, the two main types of queries are <code>query</code> and <code>lazy query</code>. Both are used for making API requests, but they differ in how and when they are triggered.</p>"},{"location":"office/bank/usefull-code/#1-query","title":"1. Query","text":"<p>A <code>query</code> is automatically triggered when the component using the <code>useQuery</code> hook renders (or when its dependencies change). It is typically used for fetching data that needs to be retrieved as soon as the component is mounted or when a dependency (such as an ID) changes.</p> <ul> <li>Automatic execution: A query is automatically executed when the component is rendered.</li> <li>When to use: Use it when you need to fetch data immediately or when the data should be fetched based on the component's lifecycle (e.g., when the component mounts).</li> </ul> <p>How to define a query:</p> jsx<pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst api = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api\" }),\n  endpoints: (builder) =&gt; ({\n    getUser: builder.query({\n      query: (id) =&gt; `user/${id}`,\n    }),\n  }),\n});\n\nexport const { useGetUserQuery } = api;\n</code></pre> <ul> <li>Triggering the query: In your component, the <code>useGetUserQuery</code> hook will automatically trigger the API request when the component renders or when the id dependency changes.</li> </ul> <pre><code>const { data, error, isLoading } = useGetUserQuery(userId);\n</code></pre>"},{"location":"office/bank/usefull-code/#2-lazy-query","title":"2. Lazy Query","text":"<p>A <code>lazy query</code> (or \"manual query\") allows you to trigger the API call manually rather than automatically on component render. It is useful when you want to trigger a request based on user interaction or other events (e.g., a button click).</p> <ul> <li>Manual execution: The query is only triggered when you explicitly call the <code>trigger</code> function returned by the hook.</li> <li>When to use: Use it when you want to control when the API call is made (e.g., after a user submits a form or clicks a button).</li> </ul> <p>How to define a lazy query:</p> <pre><code>import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst api = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"/api\" }),\n  endpoints: (builder) =&gt; ({\n    getUser: builder.query({\n      query: (id) =&gt; `user/${id}`,\n    }),\n  }),\n});\n\nexport const { useLazyGetUserQuery } = api;\n</code></pre> <ul> <li>Triggering the query manually: In your component, you can now call the <code>trigger</code> function to make the request.</li> </ul> <pre><code>const [getUser, { data, error, isLoading }] = useLazyGetUserQuery();\n\nconst handleClick = () =&gt; {\n  getUser(userId); // Trigger the query manually when needed\n};\n</code></pre> <p>Here, the <code>getUser</code> function is returned as part of the <code>useLazyGetUserQuery</code> hook, and you call it explicitly (e.g., when the user clicks a button). It does not trigger the API request automatically on component mount like the regular <code>useGetUserQuery</code> does.</p>"},{"location":"office/bank/usefull-code/#key-differences","title":"Key Differences","text":"Feature Query Lazy Query Triggering Automatically triggered on component mount or dependency change Manually triggered by calling a function Use case Fetch data automatically when the component mounts Fetch data based on user actions (e.g., button click) Hook name <code>useGetUserQuery</code> <code>useLazyGetUserQuery</code> Return value <code>data</code>, <code>error</code>, <code>isLoading</code>, etc. A function to trigger the query and the same <code>data</code>, <code>error</code>, <code>isLoading</code> values"},{"location":"office/bank/usefull-code/#when-to-use-each","title":"When to Use Each","text":"<ul> <li> <p>Use a query when you need the data to be fetched automatically when the component renders or when a dependency changes (e.g., when the component is mounted or a prop changes).</p> </li> <li> <p>Use a lazy query when you need to fetch data based on an event like a button click, form submission, or some other user interaction.</p> </li> </ul>"},{"location":"office/bank/usefull-code/#example-scenario","title":"Example Scenario:","text":"<ul> <li> <p>Query Example: You are displaying user data as soon as the component is mounted. You might use a regular query (<code>useGetUserQuery</code>) to fetch the user's data as soon as the page loads.</p> </li> <li> <p>Lazy Query Example: You have a button that triggers the fetching of user data when clicked, such as when a user clicks \"Load User\". In this case, you would use <code>useLazyGetUserQuery</code> and call it manually when the button is clicked.</p> </li> </ul>"},{"location":"office/bank/clickup/2024/december/week4/03-tuesday-task/","title":"03-Tuesday","text":"<ul> <li>Main Content Layout fixed scrolling all the layout, now only scrolling the content area only.</li> <li>Merge and Feedback for Tsering code for User Navbar and Form.</li> </ul>"},{"location":"office/bank/clickup/2024/december/week4/04-wednesday-task/","title":"04-Wednesday","text":"<ul> <li>Create a Forex Buying and Selling Form.</li> <li>Added Route for Forex Route.</li> </ul>"},{"location":"office/bank/clickup/2024/november/week1/02-task/","title":"Week 1","text":"<p>fasdf</p>"},{"location":"office/bank/permission/intro/","title":"Intro","text":""},{"location":"office/bank/permission/intro/#intro","title":"Intro","text":"useUpdatePermissions.js<pre><code>import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { updatePermission } from \"@features/auth/services/authSlice\";\nimport { useGetPollingPermissionsQuery } from \"@features/settings/services/settingApi\";\nimport { extractSelectedPermissions } from \"@shared/utils/permissionListing\";\n\nconst useUpdatePermissions = () =&gt; {\n  const dispatch = useDispatch();\n  const currentPermissions = useSelector((state) =&gt; state.auth.permissions);\n  const appUserId = useSelector((state) =&gt; state.auth.appUserId);\n  const {\n    data: newPermissions,\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useGetPollingPermissionsQuery(\n    { id: appUserId },\n    {\n      pollingInterval: 30000,\n    }\n  );\n\n  useEffect(() =&gt; {\n    if (\n      newPermissions &amp;&amp;\n      JSON.stringify(newPermissions) !== JSON.stringify(currentPermissions)\n    ) {\n      dispatch(\n        updatePermission({\n          permissions: newPermissions,\n        })\n      );\n    }\n  }, [newPermissions, currentPermissions, dispatch]);\n\n  return {\n    isLoading,\n    isError,\n    error,\n    refetch,\n  };\n};\n\nexport default useUpdatePermissions;\n</code></pre> authSlice.js<pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n// import logger from \"@shared/utils/logger\";\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    token: null,\n    refresh: null,\n    role: null,\n    permissions: null,\n    appUserId: null,\n    scope: null,\n    isAuthenticated: false,\n  },\n  reducers: {\n    setAuth: (state, action) =&gt; {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.refresh = action.payload.refresh;\n      state.role = action.payload.role;\n      state.permissions = action.payload.permissions;\n      state.appUserId = action.payload.appUserId;\n      state.scope = action.payload.scope;\n      state.isAuthenticated = true;\n    },\n    logout: (state) =&gt; {\n      state.user = null;\n      state.token = null;\n      state.refresh = null;\n      state.role = null;\n      state.permissions = null;\n      state.appUserId = null;\n      state.scope = null;\n      state.isAuthenticated = false;\n    },\n    updateRefreshToken: (state, action) =&gt; {\n      const { access_token, refresh_token } = action.payload;\n      state.refresh = refresh_token;\n      state.token = access_token;\n    },\n    updatePermission: (state, action) =&gt; {\n      // const { permissions } = action.payload;\n      // state.permissions = permissions;\n    },\n  },\n});\n\nexport const { setAuth, logout, updateRefreshToken, updatePermission } =\n  authSlice.actions;\nexport default authSlice.reducer;\n</code></pre> MainLayout<pre><code>import { useState, useCallback } from \"react\";\nimport { Layout } from \"antd\";\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from \"@ant-design/icons\";\n// added\nimport useUpdatePermissions from \"@shared/hooks/useUpdatePermissions\";\nimport { Header, Sidebar } from \"../DashbordLayout\";\n\nconst { Content } = Layout;\n\nconst MainLayout = ({ children }) =&gt; {\n  // added\n  // const { isLoading, isError, error } = useUpdatePermissions();\n  const [collapsed, setCollapsed] = useState(false);\n};\n</code></pre> <p><code>features/settings/services/settings.api</code></p> <pre><code>export const pollingPermissionsApi = createApi({\n  reducerPath: \"permissionsApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"PermissionAPI\"],\n  endpoints: (builder) =&gt; ({\n    getPollingPermissions: builder.query({\n      query: ({ id }) =&gt; ({\n        url: `Roles/${id}/permissions`,\n        method: HTTP_METHODS.GET,\n      }),\n      transformResponse: (response) =&gt; {\n        const transformed = response\n          .map((group) =&gt;\n            group.permissions.map((permission) =&gt; permission.value)\n          )\n          .flat();\n        return transformed;\n      },\n      async onQueryStarted(arg, { dispatch, queryFulfilled, getState }) {\n        try {\n          await queryFulfilled;\n        } catch (err) {\n          notify(\n            \"error\",\n            \"topRight\",\n            \"Error\",\n            err?.error?.data?.title ||\n              \"An unexpected error occurred getting the Permissions List.\",\n            1\n          );\n        }\n      },\n      providesTags: [\"PermissionAPI\"],\n    }),\n  }),\n});\n\nexport const { useGetPollingPermissionsQuery } = pollingPermissionsApi;\n</code></pre> <pre><code>const debounceQueryBuying = useDebounce(buyingAmountWatch, 3000);\n\nuseEffect(() =&gt; {\n  if (\n    isSkipVerifierApprover ||\n    !debouncedQuery ||\n    !sellingAmountWatch ||\n    !buyingAmountWatch\n  ) {\n    return;\n  }\n  const isBuyTransaction = transationTypeWatch === TRANSACTION_TYPE.BUY;\n  const sellingAmount = isBuyTransaction ? debouncedQuery : debounceQueryBuying;\n  const sellingCurrencyId = isBuyTransaction\n    ? sellingCurrencyWatch\n    : buyingCurrencyWatch;\n\n  // if (transationTypeWatch === TRANSACTION_TYPE.BUY) {\n  //   triggerGetApprovalPerson({\n  //     debouncedQuery,\n  //     sellingCurrencyWatch,\n  //   });\n  // } else if (transationTypeWatch === TRANSACTION_TYPE.SELL) {\n  //   triggerGetApprovalPerson({\n  //     debounceQueryBuying,\n  //     buyingCurrencyWatch,\n  //   });\n  // }\n\n  console.log(\"XXX BUY: \", debouncedQuery, sellingCurrencyWatch);\n  console.log(\"XXX SELL: \", debounceQueryBuying, buyingCurrencyWatch);\n}, [\n  debouncedQuery,\n  triggerGetApprovalPerson,\n  sellingAmountWatch,\n  buyingAmountWatch,\n  sellingCurrencyWatch,\n  buyingCurrencyWatch,\n  isSkipVerifierApprover,\n  transationTypeWatch,\n  debounceQueryBuying,\n]);\n</code></pre>"},{"location":"office/bank/permission/streaming-updates/","title":"RTK Streaming Update","text":""},{"location":"office/bank/permission/streaming-updates/#streaming-updates","title":"Streaming Updates","text":"<pre><code> docker ps\npermission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.48/containers/json\": dial unix /var/run/docker.sock: connect: permission denied\n(dating-django-api) ninja@ninja:~/Documents/DEVELOPMENT/dating-django-api$ sudo usermod -aG docker $USER\n</code></pre> <p>!!! bug \"docker ps permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get \"http://%2Fvar%2Frun%2Fdocker.sock/v1.48/containers/json\": dial unix /var/run/docker.sock: connect: permission denied how to give docker permission so i donot use the sudo docker ps\"</p> <p>Solution</p> <p>The error you're seeing indicates that your user does not have the necessary permissions to access Docker without using <code>sudo</code>. The Docker daemon socket (<code>/var/run/docker.sock</code>) is owned by the <code>root</code> user by default, and only users in the <code>docker</code> group have permission to access it without <code>sudo</code>.</p> <p>To resolve this issue, you need to add your user to the docker group. Here's how you can do it:</p> <ol> <li> <p>Add your user to the docker group:</p> <p>Run the following command, replacing <code>&lt;your_username&gt;</code> with your actual username (or use <code>$USER</code> for the current user):</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>The <code>-aG</code> option appends your user to the <code>docker</code> group.</p> </li> <li> <p>Log out and log back in:</p> <p>After adding the user to the <code>docker</code> group, you need to log out and log back in, or you can simply restart your system to apply the changes.</p> </li> <li> <p>Verify the permissions:</p> <p>After logging back in, you can verify that the permissions are set correctly by running:</p> <pre><code>docker ps\n</code></pre> <p>This should work without needing to use <code>sudo</code> anymore.</p> </li> </ol> <p>If you want to avoid logging out and logging back in, you can also run:</p> <pre><code>newgrp docker\n</code></pre> <p>This will activate the new group membership for your current session without needing a full logout.</p>"},{"location":"office/bank/permission/streaming-updates/#updates","title":"UPDATES","text":"<p>Which Database is Best for a Django Dating App?</p> <p>For a Django dating application API, PostgreSQL is by far the most recommended database. It offers:</p> <ul> <li>ACID compliance (data consistency).</li> <li>Full-text search and geospatial data support (important for features like location-based matching).</li> <li>Scalability to handle the growth of your user base.</li> <li>Excellent integration with Django, making it easy to manage with migrations.</li> </ul> <p>Steps to Set Up PostgreSQL with Django:</p> <ol> <li> <p>Install PostgreSQL:</p> <p>In your <code>requirements.txt</code> or <code>Pipfile</code>, include <code>psycopg2</code> (the PostgreSQL adapter for Python):</p> <pre><code>pipenv install psycopg2\n</code></pre> </li> <li> <p>Update <code>settings.py</code> to use PostgreSQL as the database backend:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'your_db_name',\n        'USER': 'your_db_user',\n        'PASSWORD': 'your_db_password',\n        'HOST': 'localhost',  # or your PostgreSQL container's IP\n        'PORT': '5432',  # Default PostgreSQL port\n    }\n}\n</code></pre> </li> <li> <p>Run migrations: Once PostgreSQL is set up, don't forget to run:</p> <pre><code>python manage.py migrate\n</code></pre> </li> </ol> conclusion <ul> <li>PostgreSQL is the best choice for a Django dating application API, thanks to its scalability, support for relational data, and advanced features like full-text search and geospatial support.</li> <li>MySQL is also a good option but has fewer advanced features than PostgreSQL.</li> <li>SQLite is fine for local development but not recommended for production.</li> <li>MongoDB or Cassandra could be considered if your application requires handling unstructured data at a very large scale, but they aren't the best fit for a relational app like a dating app.</li> </ul>"},{"location":"office/bank/permission/streaming-updates/#reference","title":"Reference","text":"<ul> <li>Official: Streaming updates</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/","title":"antd drawer","text":"<p>Certainly! You can create a drawer for adding todos, similar to how the <code>SearchModal</code> was implemented. Using an Ant Design <code>Drawer</code> provides a more compact and visually distinct way to present forms compared to a modal.</p> <p>Here\u2019s how you can implement an <code>AddTodoDrawer</code> component that allows users to add a todo.</p> Step 1Step 2 <p>Step 1: Create the Add Todo Drawer Component</p> <p>Create a new file called <code>AddTodoDrawer.js</code>:</p> <pre><code>// AddTodoDrawer.js\nimport React from \"react\";\nimport { Drawer, Form, Input, Button } from \"antd\";\n\nconst AddTodoDrawer = ({ visible, onClose, onFinish }) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            title=\"Add Todo\"\n            placement=\"right\"\n            onClose={onClose}\n            visible={visible}\n            footer={null}\n        &gt;\n            &lt;Form form={form} onFinish={onFinish}&gt;\n                &lt;Form.Item\n                    label=\"Todo Title\"\n                    name=\"title\"\n                    rules={[{ required: true, message: \"Please input the todo title!\" }]}\n                &gt;\n                    &lt;Input /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                        Add Todo\n                    &lt;/Button&gt;\n                    &lt;Button style={{ marginLeft: 8 }} onClick={onClose}&gt;\n                        Cancel\n                    &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Drawer&gt;\n    );\n};\n\nexport default AddTodoDrawer;\n</code></pre> <p>Step 2: Update the Dashboard Component</p> <p>Now, update your <code>DashboardTodo</code> component to use the new <code>AddTodoDrawer</code>:</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { Button } from \"antd\";\nimport ResuableCard from \"../../components/Card/ResuableCard\";\nimport { PlusCircleTwoTone, CopyTwoTone, SearchOutlined } from \"@ant-design/icons\";\nimport SearchModal from \"../../components/SearchModal\"; // Assuming you have this\nimport AddTodoDrawer from \"../../components/AddTodoDrawer\"; // Import the AddTodoDrawer\n\nconst DashboardTodo = () =&gt; {\n    const dispatch = useDispatch();\n    const { todos, hasTodos, loading, error } = useSelector((state) =&gt; state.dashboardTodo);\n\n    const [isAddDrawerVisible, setIsAddDrawerVisible] = useState(false);\n    const [isSearchModalVisible, setIsSearchModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        const source = axios.CancelToken.source();\n        dispatch(dashboardTodoService(source.token));\n\n        return () =&gt; {\n            source.cancel();\n        };\n    }, [dispatch]);\n\n    const handleTodoAdd = () =&gt; {\n        setIsAddDrawerVisible(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        console.log(\"New Todo:\", values);\n        // Here you would typically dispatch an action to add the todo\n        // dispatch(addTodoAction(values));\n        setIsAddDrawerVisible(false);\n    };\n\n    return (\n        &lt;&gt;\n            &lt;ResuableCard\n                title=\"Todo\"\n                content={&lt;p&gt;Your todo content here.&lt;/p&gt;} // Adjust as necessary\n                extra={[\n                    &lt;SearchOutlined key=\"search\" onClick={() =&gt; setIsSearchModalVisible(true)} /&gt;,\n                    &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n                ]}\n                icon={\n                    &lt;Link to=\"/todo\"&gt;\n                        &lt;CopyTwoTone key=\"navigate\" /&gt;\n                    &lt;/Link&gt;\n                }\n            /&gt;\n\n            {/* Add Todo Drawer */}\n            &lt;AddTodoDrawer\n                visible={isAddDrawerVisible}\n                onClose={() =&gt; setIsAddDrawerVisible(false)}\n                onFinish={onFinish}\n            /&gt;\n\n            {/* Search Modal for Todos */}\n            &lt;SearchModal\n                open={isSearchModalVisible}\n                onClose={() =&gt; setIsSearchModalVisible(false)}\n                todos={todos}\n            /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <p>Explanation</p> <ol> <li> <p>AddTodoDrawer Component:</p> <ul> <li>This component uses an Ant Design <code>Drawer</code> to present the form for adding a todo.</li> <li>It accepts <code>visible</code>, <code>onClose</code>, and <code>onFinish</code> props.</li> <li>The form inside the drawer includes a title input and buttons for submission and cancellation.</li> </ul> </li> <li> <p>DashboardTodo Component:</p> <ul> <li>The <code>isAddDrawerVisible</code> state controls the visibility of the <code>AddTodoDrawer</code>.</li> <li>The <code>handleTodoAdd</code> function opens the drawer.</li> <li>The <code>onFinish</code> function handles form submission and closes the drawer after the todo is added.</li> </ul> </li> </ol> <p>Conclusion</p> <p>Using a <code>Drawer</code> for adding todos provides a sleek, modern interface that doesn't block the main content, making it easier for users to interact with your application. You can customize the styles and functionality further based on your requirements.</p>"},{"location":"office/codesnapshot/antd-drawer/#question","title":"Question","text":""},{"location":"office/codesnapshot/antd-drawer/#q1","title":"Q.1:","text":"<pre><code>why AddTodoDrawer has defined form in in it and  SearchModal defined form in the parent component. and why AddTodoDrawer use onFinish and SearchModal use onOk\n</code></pre> <p>The distinction between how the AddTodoDrawer and SearchModal manage their forms and handle events is mainly about their intended use cases and design choices. Here\u2019s a breakdown of why they\u2019re structured differently:</p> 1. Form Management2. Event Naming <p><code>AddTodoDrawer</code>:</p> <ul> <li>Internal Form Management: The <code>AddTodoDrawer</code> has its own form defined within it. This design is appropriate because the drawer is responsible for collecting new todo data (title, etc.) and directly handling that input.</li> <li>Self-Contained Logic: It encapsulates all the logic needed for adding a todo, including form validation, submission, and state management related to that specific action.</li> </ul> <p><code>SearchModal</code>:</p> <ul> <li>External Form Management: In contrast, the <code>SearchModal</code> is primarily used for searching existing todos, and it might not require complex form handling like adding a new todo.</li> <li>Event Propagation: It\u2019s designed to communicate with the parent component rather than handle form submissions itself. This allows the parent to maintain control over the todo list and how search results are managed.</li> </ul> <p><code>onFinish (AddTodoDrawer)</code>:</p> <ul> <li>The onFinish prop is used to signify the completion of the form submission process, which is a standard naming convention in Ant Design. It indicates that the form is successfully validated and ready to submit its data.</li> </ul> <p><code>onOk (SearchModal)</code>:</p> <ul> <li>The onOk prop is often used in modals to signify an affirmative action (like \"Okay\" or \"Confirm\"). This makes sense for a modal that might have multiple actions, and onOk implies a specific action taken in response to user input.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#summary-of-choices","title":"Summary of Choices","text":"<ol> <li> <p>Purpose-Driven Design:</p> <ul> <li>The AddTodoDrawer is more complex in terms of data handling, requiring its own state management. Therefore, it includes the form internally.</li> <li>The SearchModal, on the other hand, is more about interaction with existing data rather than managing new data input.</li> </ul> </li> <li> <p>Event Handling:</p> <ul> <li>Different naming conventions (<code>onFinish</code> for form submissions and <code>onOk</code> for confirming actions) reflect their distinct roles within the application. Each naming choice aims to improve clarity and understanding of the component\u2019s purpose.</li> </ul> </li> </ol>"},{"location":"office/codesnapshot/antd-drawer/#conclusion","title":"Conclusion","text":"<p>These design decisions reflect typical best practices in React component architecture, emphasizing separation of concerns and clear communication between components. By organizing components in this way, you can maintain a more scalable and understandable codebase.</p>"},{"location":"office/codesnapshot/antd-drawer/#q2","title":"Q.2:","text":"<p><code>what is the best choicce and why</code></p> <p>The best choice between using internal form management versus relying on the parent component to manage state and handle events largely depends on the specific use case and desired functionality of your application. Here\u2019s a breakdown of considerations for each approach:</p> When to Use Internal Form Management (e.g., in <code>AddTodoDrawer</code>) <p>Pros:</p> <ul> <li>Encapsulation: The component manages its own state, making it self-contained. This is useful for components that are highly interactive or need complex validation.</li> <li>Simpler API: The component exposes a straightforward API (like <code>onFinish</code>) for handling form submissions, reducing the need for the parent component to manage form state.</li> <li>Reusability: The component can be reused elsewhere without relying on parent components to manage its internal state.</li> </ul> <p>Cons:</p> <ul> <li>Less Control: The parent component has less control over the form state and submission process. If you need to coordinate actions between multiple components, it can become cumbersome.</li> <li>Complexity in State Management: If the form\u2019s state needs to interact with other parts of the application, this encapsulation can lead to additional complexity in state management.</li> </ul> When to Use External Form Management (e.g., in <code>SearchModal</code>) <p>Pros:</p> <ul> <li>Centralized Control: The parent component has full control over the data and can manage state changes, making it easier to coordinate between multiple components.</li> <li>Simpler Components: Individual components can remain simpler and focused on their primary purpose without managing additional state.</li> <li>Easier Data Handling: If the search results affect other components, it\u2019s easier to update state centrally.</li> </ul> <p>Cons:</p> <ul> <li>Tight Coupling: The modal or drawer becomes dependent on the parent component\u2019s state, making it less reusable in different contexts.</li> <li>More Boilerplate: You may need to pass more props and handlers around, which can lead to more boilerplate code.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#best-choice","title":"Best Choice","text":"<p>Use Internal Form Management when:</p> <ul> <li>The component needs to handle its own complex form state and validations.</li> <li>The component is intended to be reusable in multiple contexts without requiring external state management.</li> </ul> <p>Use External Form Management when:</p> <ul> <li>You need centralized control over the data or need to share data between multiple components.</li> <li>The form is relatively simple and can be effectively managed by the parent.</li> </ul>"},{"location":"office/codesnapshot/antd-drawer/#conclusion_1","title":"Conclusion","text":"<p>In many cases, the best choice is context-dependent. For example, a complex form for adding new data (like the <code>AddTodoDrawer</code>) is best handled internally, while a simpler search functionality (like the <code>SearchModal</code>) can benefit from external management.</p> <p>Ultimately, the choice should align with the principles of maintainability, scalability, and clarity in your codebase. Strive for a balance that allows components to be both reusable and maintainable while minimizing complexity in data flow.</p>"},{"location":"office/codesnapshot/antd-modal/","title":"antd modal","text":"<p>Creating a reusable modal component that can dynamically accept forms and their functionalities is a great approach to enhance code maintainability and reusability. Here\u2019s a standard practice to achieve this using Ant Design, React, and functional components.</p> Step 1Step 2Explanation <p>Create a Reusable Modal Component</p> <p>You can create a <code>ReusableModal</code> component that accepts props for the title, visibility, form components, and submission handling.</p> <pre><code>// ReusableModal.js\nimport React from 'react';\nimport { Modal } from 'antd';\n\nconst ReusableModal = ({ visible, title, onCancel, onOk, children }) =&gt; {\n    return (\n        &lt;Modal\n            title={title}\n            visible={visible}\n            onCancel={onCancel}\n            footer={null} // Control footer visibility from the parent\n        &gt;\n            {children}\n            &lt;div style={{ display: 'flex', justifyContent: 'flex-end' }}&gt;\n                &lt;button onClick={onCancel} style={{ marginRight: '8px' }}&gt;\n                    Cancel\n                &lt;/button&gt;\n                &lt;button onClick={onOk} type=\"primary\"&gt;\n                    Submit\n                &lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/Modal&gt;\n    );\n};\n\nexport default ReusableModal;\n</code></pre> <p>Use the Reusable Modal in Your Component</p> <p>You can then use this <code>ReusableModal</code> in your <code>DashboardTodo</code> component, injecting the form dynamically.</p> <pre><code>import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { Form, Input, Button } from \"antd\";\nimport { dashboardTodoService } from \"../../redux/features/dashboard/services\";\nimport ErrorMessage from \"../../components/ImageGallery/ErrorMessage\";\nimport LoadingSpinner from \"../../components/ImageGallery/LoadingSpinner\";\nimport ReusableModal from \"../../components/ReusableModal\";\nimport ResuableCard from \"../../components/Card/ResuableCard\";\nimport { DownloadOutlined, PlusCircleTwoTone, CopyTwoTone } from \"@ant-design/icons\";\n\nconst DashboardTodo = () =&gt; {\nconst dispatch = useDispatch();\nconst { todos, hasTodos, loading, error } = useSelector((state) =&gt; state.dashboardTodo);\n\nconst [isModalVisible, setIsModalVisible] = useState(false);\nconst [form] = Form.useForm();\n\nuseEffect(() =&gt; {\n    const source = axios.CancelToken.source();\n    dispatch(dashboardTodoService(source.token));\n\n    return () =&gt; {\n        source.cancel();\n    };\n}, [dispatch]);\n\nif (loading) {\n    return &lt;LoadingSpinner /&gt;;\n}\n\nif (error) {\n    return &lt;ErrorMessage message={error} /&gt;;\n}\n\nif (!hasTodos) {\n    return &lt;div&gt;No Todos Available&lt;/div&gt;;\n}\n\nconst handleAdd = () =&gt; {\n    setIsModalVisible(true);\n};\n\nconst handleOk = () =&gt; {\n    form\n    .validateFields()\n    .then(values =&gt; {\n        console.log(\"New Todo:\", values);\n        // Dispatch addTodo action here\n\n        // Close the modal\n        setIsModalVisible(false);\n        form.resetFields();\n    })\n    .catch(info =&gt; {\n        console.log('Validation Failed:', info);\n    });\n};\n\n    return (\n        &lt;&gt;\n            &lt;ResuableCard\n                title=\"Todo List\"\n                content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n                extra={[\n                    &lt;DownloadOutlined key=\"download\" /&gt;,\n                    &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                ]}\n                icon={&lt;CopyTwoTone /&gt;}\n            /&gt;\n\n            &lt;ReusableModal\n                visible={isModalVisible}\n                title=\"Add Todo\"\n                onCancel={() =&gt; setIsModalVisible(false)}\n                onOk={handleOk}\n            &gt;\n                &lt;Form form={form}&gt;\n                    &lt;Form.Item\n                        label=\"Todo Title\"\n                        name=\"title\"\n                        rules={[{ required: true, message: 'Please input the todo title!' }]}\n                    &gt;\n                        &lt;Input /&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/ReusableModal&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <ol> <li> <p>ReusableModal Component:</p> <ul> <li>The <code>ReusableModal</code> accepts <code>visible</code>, <code>title</code>, <code>onCancel</code>, <code>onOk</code>, and <code>children</code> props.</li> <li>This allows the parent component to control the modal's visibility and actions while allowing dynamic content via <code>children</code>.</li> </ul> </li> <li> <p>Using the Modal:</p> <ul> <li>In the <code>DashboardTodo</code> component, the modal is displayed when the \"Add\" button is clicked.</li> <li>The form inside the modal is defined using Ant Design\u2019s <code>Form</code> component.</li> </ul> </li> <li> <p>Form Submission:</p> <ul> <li>The <code>handleOk</code> function validates the form fields. Upon successful validation, it logs the new todo and resets the form fields.</li> </ul> </li> </ol>"},{"location":"office/codesnapshot/antd-modal/#standard-practices","title":"Standard Practices","text":"<ul> <li>Separation of Concerns: Keeping the modal and the form separate promotes reusability. The modal can be reused across different components with different forms.</li> <li>Dynamic Content: By passing <code>children</code> to the modal, you can inject any form or content as needed.</li> <li>Controlled Components: Using Ant Design's <code>Form</code> ensures validation and state management are handled effectively.</li> <li>Clear Functionality: Define clear functions for handling modal visibility and form submission, making it easy to understand and maintain.</li> </ul>"},{"location":"office/codesnapshot/antd-modal/#further-enhancements","title":"Further Enhancements","text":"<ul> <li>Custom Footer: Allow passing a custom footer if you need different buttons or actions.</li> <li>Error Handling: Implement better error handling and user feedback.</li> <li>Styling: Enhance the modal\u2019s styling as needed to fit your application\u2019s design.</li> </ul>"},{"location":"office/codesnapshot/antd-modal/#react-router-dom","title":"react-router-dom","text":"<p>To navigate from the <code>/dashboard</code> route to the <code>/todo</code> route when clicking an icon, you can use the <code>useHistory</code> hook from react-router-dom (for versions 5 and below) or <code>useNavigate</code> from react-router-dom (for version 6 and above). Here\u2019s how to implement this in your application.</p> Step 1Step 2Step 3 <p>Step 1: Install react-router-dom</p> <p>If you haven't already, ensure that react-router-dom is installed in your project:</p> <pre><code>npm install react-router-dom\n</code></pre> <p>Step 2: Set Up Routing in Your Application</p> <p>Make sure your main application file has routing set up. Here's a basic example using React Router:</p> <pre><code>// App.js or your main component\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Dashboard from './Dashboard';\nimport Todo from './Todo'; // Your Todo component\n\nconst App = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;Switch&gt;\n                &lt;Route path=\"/dashboard\" component={Dashboard} /&gt;\n                &lt;Route path=\"/todo\" component={Todo} /&gt;\n            &lt;/Switch&gt;\n        &lt;/Router&gt;\n    );\n};\n\nexport default App;\n</code></pre> <p>Step 3: Modify the Icon Click Handler</p> <p>Now, in your <code>DashboardTodo</code> component, modify the icon's click handler to navigate to the <code>/todo</code> route.</p> For React Router v6:For React Router v5:Explanation <pre><code>import { useNavigate } from \"react-router-dom\";\n\n// Inside your DashboardTodo component\nconst DashboardTodo = () =&gt; {\n    const navigate = useNavigate();\n\n    const handleNavigateToTodo = () =&gt; {\n        navigate(\"/todo\"); // Navigate to the /todo route\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo List\"\n            content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n            extra={[\n                &lt;DownloadOutlined key=\"download\" /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;, // Navigate on click\n            ]}\n            icon={&lt;CopyTwoTone /&gt;}\n        /&gt;\n        {/* ... other components */}\n        &lt;/&gt;\n    );\n};\n</code></pre> <p>If you're using version 5, you would do something like this:</p> <pre><code>import { useHistory } from \"react-router-dom\";\n\n// Inside your DashboardTodo component\nconst DashboardTodo = () =&gt; {\n    const history = useHistory();\n\n    const handleNavigateToTodo = () =&gt; {\n        history.push(\"/todo\"); // Navigate to the /todo route\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo List\"\n            content={todos.map(item =&gt; &lt;p key={item.id}&gt;{item.title}&lt;/p&gt;)}\n            extra={[\n                &lt;DownloadOutlined key=\"download\" /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleAdd} /&gt;,\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;, // Navigate on click\n            ]}\n            icon={&lt;CopyTwoTone /&gt;}\n        /&gt;\n        {/* ... other components */}\n        &lt;/&gt;\n    );\n};\n</code></pre> <ol> <li> <p>Navigation Hook:</p> <ul> <li>Use <code>useNavigate</code> (v6) or <code>useHistory</code> (v5) to programmatically navigate to different routes.</li> </ul> </li> <li> <p>Click Handler:</p> <ul> <li>The <code>handleNavigateToTodo</code> function is called when the icon is clicked, redirecting the user to the <code>/todo</code> route.</li> </ul> </li> <li> <p>Icon Integration:</p> <ul> <li>Attach the click handler to the desired icon in the <code>extra</code> prop of your <code>ReusableCard</code>.</li> </ul> </li> </ol> <p>This setup will allow you to navigate seamlessly between the dashboard and todo components when the respective icons are clicked.</p>"},{"location":"office/codesnapshot/antd-modal/#so-when-to-use-and-historypush","title":"so when to use  and history.push.","text":"<p>Using <code>&lt;Link&gt;</code> and <code>history.push</code> (or <code>navigate</code> in React Router v6) serves similar purposes\u2014navigating between routes in a React application\u2014but they are suited for different scenarios. Here\u2019s a breakdown of when to use each:</p> When to Use <code>&lt;Link&gt;</code>When to Use <code>history.push</code> (or <code>navigate</code>) <ol> <li> <p>Static Navigation:</p> <ul> <li>Use <code>&lt;Link&gt;</code> when you have static navigation elements, such as links in a navigation bar, menu, or list items.</li> <li>It provides better accessibility, as it renders an anchor (<code>&lt;a&gt;</code>) tag.</li> </ul> <pre><code>import { Link } from 'react-router-dom';\n\nconst Navigation = () =&gt; (\n    &lt;nav&gt;\n        &lt;Link to=\"/dashboard\"&gt;Dashboard&lt;/Link&gt;\n        &lt;Link to=\"/todo\"&gt;Todo&lt;/Link&gt;\n    &lt;/nav&gt;\n);\n</code></pre> </li> <li> <p>Declarative Navigation:</p> <ul> <li><code>&lt;Link&gt;</code> is declarative and easier to read. It handles navigation without needing to manage state or event handling manually. It also automatically handles active styling when using NavLink.</li> </ul> </li> <li> <p>Multiple Links:</p> <ul> <li>If you need multiple links on a page, <code>&lt;Link&gt;</code> is simpler and cleaner than managing click events for each.</li> </ul> </li> </ol> <ol> <li> <p>Programmatic Navigation:</p> <ul> <li>Use <code>history.push</code> (v5) or <code>navigate</code> (v6) when you need to navigate based on certain conditions or events (e.g., after a form submission, button click, or an API response).</li> </ul> <pre><code>const handleSubmit = () =&gt; {\n    // Do some processing\n    history.push(\"/success\");\n};\n</code></pre> </li> <li> <p>Conditional Navigation:</p> <ul> <li>When navigation depends on user actions, like authentication or responses from API calls, using <code>history.push</code> or <code>navigate</code> allows for more control.</li> </ul> </li> <li> <p>Dynamic Routes:</p> <ul> <li>If you need to navigate to a route that includes dynamic parameters (e.g., user IDs), you can easily construct the path using string interpolation.</li> </ul> <pre><code>const handleNavigateToUser = (userId) =&gt; {\n    navigate(`/users/${userId}`);\n};\n</code></pre> </li> </ol> <p>Summary</p> <ul> <li>Use  for simple, declarative navigation where no additional logic is required. It's suitable for static links in your UI.</li> <li>Use <code>history.push</code> or <code>navigate</code> for programmatic navigation, especially when user interactions or conditions determine when to navigate. This allows for greater flexibility and control over the navigation process.</li> </ul> <p>Both methods can coexist in your application depending on the context, allowing you to choose the best approach for each scenario.</p>"},{"location":"office/codesnapshot/axios-cancel/","title":"Axios Cancellation","text":"<pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiForGetGallery } from \"./api\";\nimport axios from \"axios\";\n\nexport const getPhotosService = createAsyncThunk(\n  \"gallery/getPhotosService\",\n  async (signal, { rejectWithValue }) =&gt; {\n    try {\n      const response = await apiForGetGallery(signal);\n      return response;\n    } catch (err) {\n      if (axios.isCancel(err)) {\n        // return rejectWithValue(\"Request was cancelled\");\n        return rejectWithValue(null);\n      }\n      return rejectWithValue(err.message);\n    }\n  }\n);\n</code></pre> <p>When using <code>axios</code>, it's common to handle cancellations of requests, especially in cases where you want to avoid unnecessary state updates when the component unmounts or when the request is no longer needed.</p> <p>In your code, you're already checking for cancellations using <code>axios.isCancel(err)</code>. If you want to \"silently\" handle this by not rejecting with a specific value (like <code>\"Request was cancelled\"</code>), returning <code>rejectWithValue(null)</code> is acceptable, especially if you want to ignore these cases in the consuming component.</p> SolutionStandard Practice <p>Here's a clean way to handle this:</p> <pre><code>export const getPhotosService = createAsyncThunk(\n    \"gallery/getPhotosService\",\n    async (signal, { rejectWithValue }) =&gt; {\n        try {\n            const response = await apiForGetGallery(signal);\n            return response;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                // Optionally log or handle the cancellation quietly\n                return rejectWithValue(null); // or simply return; if you prefer to do nothing\n            }\n            return rejectWithValue(err.message);\n        }\n    }\n);\n</code></pre> <ol> <li>Silencing Cancellations: Returning <code>null</code> or simply doing nothing is fine if you want to ignore cancellations. It depends on your application needs.</li> <li>Logging: Sometimes it's helpful to log the cancellation for debugging purposes, so consider adding a console log if that fits your needs.</li> <li>State Handling: Ensure that your application\u2019s state management can handle <code>null</code> values gracefully, or simply avoid state updates if you choose not to reject at all.</li> <li>Documentation: Commenting on why you\u2019re handling it this way can be helpful for future maintainers of your code.</li> </ol> <p>Overall, it\u2019s about balancing clarity, performance, and your specific application requirements.</p>"},{"location":"office/codesnapshot/codesnap/","title":"Intro","text":""},{"location":"office/codesnapshot/codesnap/#reducer","title":"REDUCER","text":""},{"location":"office/codesnapshot/codesnap/#infinite-scolling-reverse","title":"Infinite Scolling <code>reverse</code>","text":""},{"location":"office/codesnapshot/codesnap/#rtk","title":"RTK","text":""},{"location":"office/codesnapshot/improvement/","title":"Improvement","text":"services.jsslice.js <pre><code>import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiForGetGallery } from \"./api\";\nimport axios from \"axios\";\n\nexport const getPhotosService = createAsyncThunk(\n\"gallery/getPhotosService\",\nasync (signal, { rejectWithValue }) =&gt; {\n    try {\n    const response = await apiForGetGallery(signal);\n    return response;\n    } catch (err) {\n    if (axios.isCancel(err)) {\n        return rejectWithValue(\"Request was cancelled\");\n    }\n    return rejectWithValue(err.message);\n    }\n}\n);\n</code></pre> <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\nimport { getPhotosService } from \"./services\";\n\nconst gallerySlice = createSlice({\nname: \"gallery\",\ninitialState: {\n    items: [],\n    loading: false,\n    error: null,\n},\nextraReducers: (builder) =&gt; {\n    builder\n    .addCase(getPhotosService.pending, (state) =&gt; {\n        state.loading = true;\n        state.error = null;\n    })\n    .addCase(getPhotosService.fulfilled, (state, action) =&gt; {\n        // console.log(\"SLICE: \", action.payload);\n        state.loading = false;\n        state.items = action.payload;\n    })\n    .addCase(getPhotosService.rejected, (state, action) =&gt; {\n        state.loading = false;\n        state.error = action.error.message;\n    });\n},\n});\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Your Redux slice and service for fetching gallery photos look solid! Here\u2019s a brief overview and some suggestions for improvement or clarity:</p> Overview <ol> <li> <p>Service (<code>services.js</code>):</p> </li> <li> <p>Utilizes <code>createAsyncThunk</code> for handling asynchronous requests.</p> </li> <li> <p>Uses axios to make API calls and properly handles cancellation of requests.</p> </li> <li> <p>Slice (<code>slice.js</code>):</p> </li> <li> <p>Defines the initial state with <code>items</code>, <code>loading</code>, and <code>error</code>.</p> </li> <li>Manages state transitions for the async actions: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>.</li> </ol>"},{"location":"office/codesnapshot/improvement/#suggestions-for-improvement","title":"Suggestions for Improvement","text":"<ol> <li> <p>Error Handling:</p> <ul> <li>In the <code>rejected</code> case, you might want to ensure you return a meaningful error message. Currently, it uses <code>action.error.message</code>, but if you want to access the custom message from <code>rejectWithValue</code>, you should use <code>action.payload</code> instead.</li> </ul> <pre><code>.addCase(getPhotosService.rejected, (state, action) =&gt; {\n    state.loading = false;\n    state.error = action.payload; // Use payload for custom error messages\n});\n</code></pre> </li> <li> <p>Type Safety (if using TypeScript):</p> <ul> <li>If your project uses TypeScript, consider adding types for the state and actions to improve maintainability.</li> </ul> </li> <li> <p>Additional State Management:</p> <ul> <li>Consider adding a <code>refresh</code> or <code>reset</code> action to clear the state, especially if users can trigger the fetching of new photos multiple times.</li> </ul> </li> <li> <p>Memoizing Selectors:</p> <ul> <li>If you plan to select parts of the state frequently, using reselect can help with performance by memoizing the selectors.</li> </ul> </li> <li> <p>Handling Empty States:</p> <ul> <li>Consider adding a state to handle scenarios where no photos are returned, so the UI can provide appropriate feedback to users.</li> </ul> <p>Here\u2019s a small update incorporating some of these suggestions:</p> <pre><code>.addCase(getPhotosService.rejected, (state, action) =&gt; {\n    state.loading = false;\n    state.error = action.payload || \"An error occurred\"; // Fallback error message\n});\n</code></pre> <p>Overall, your implementation is clear and follows Redux best practices.</p> <p>Handling empty states is a great way to enhance user experience. You can manage this by adding a new piece of state to track whether any photos were fetched. Here's how you can modify your slice to incorporate this:</p> Step 1Step 2Step 3Summary <p>Step 1: Update Initial State</p> <p>Add a <code>hasPhotos</code> boolean to the initial state:</p> <pre><code>initialState: {\n    items: [],\n    loading: false,\n    error: null,\n    hasPhotos: false, // New state to track if photos are available\n},\n</code></pre> <p>Step 2: Update Fulfilled Case</p> <p>In the <code>fulfilled</code> case of your async thunk, set <code>hasPhotos</code> based on the length of the fetched items:</p> <pre><code>.addCase(getPhotosService.fulfilled, (state, action) =&gt; {\n    state.loading = false;\n    state.items = action.payload;\n    state.hasPhotos = action.payload.length &gt; 0; // Set hasPhotos based on the payload\n});\n</code></pre> <p>Step 3: Handle Empty State in UI</p> <p>In your UI component, you can now check hasPhotos to provide feedback. For example:</p> <pre><code>const GalleryComponent = () =&gt; {\n    const { items, loading, error, hasPhotos } = useSelector((state) =&gt; state.gallery);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;; // Feedback for empty state\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre> <p>By adding the <code>hasPhotos</code> state, you provide a clear indication in the UI when there are no photos available, improving the overall user experience. This pattern helps to maintain clarity and provides users with meaningful feedback based on the state of their request. If you have any more questions or need further assistance, feel free to ask!</p> </li> </ol>"},{"location":"office/codesnapshot/improvement/#using-reselect","title":"Using Reselect","text":"<p>Using reselect for creating memoized selectors can enhance performance and maintainability in your Redux applications</p> <p>Sure! Here\u2019s how to set up both reselect and Redux Toolkit (RTK) for creating memoized selectors. You can choose either approach based on your needs.</p>"},{"location":"office/codesnapshot/improvement/#1-using-reselect-with-rtk","title":"1. Using Reselect with RTK","text":"Step 1Step 2Step 3Step 4 <p>Step 1: Install Reselect</p> <p>First, if you haven't already, install the reselect library:</p> <pre><code>npm install reselect\n</code></pre> <p>Step 2: Create Your Slice</p> <p>Here\u2019s an example of a Redux slice for your gallery:</p> <pre><code>// gallerySlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst gallerySlice = createSlice({\n    name: \"gallery\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n        hasPhotos: false,\n    },\n    reducers: {\n        // Define your reducers here\n    },\n});\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Step 3: Create Selectors Using Reselect</p> <p>Now, create a separate file for your selectors:</p> <pre><code>// selectors.js\nimport { createSelector } from 'reselect';\n\nconst selectGalleryState = (state) =&gt; state.gallery;\n\nexport const selectItems = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.items\n);\n\nexport const selectLoading = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.loading\n);\n\nexport const selectError = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.error\n);\n\nexport const selectHasPhotos = createSelector(\n    [selectGalleryState],\n    (gallery) =&gt; gallery.hasPhotos\n);\n</code></pre> <p>Step 4: Use Selectors in Your Component</p> <p>Now you can use these selectors in your components:</p> <pre><code>// GalleryComponent.js\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    selectItems,\n    selectLoading,\n    selectError,\n    selectHasPhotos,\n} from './selectors';\n\nconst GalleryComponent = () =&gt; {\n    const items = useSelector(selectItems);\n    const loading = useSelector(selectLoading);\n    const error = useSelector(selectError);\n    const hasPhotos = useSelector(selectHasPhotos);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;;\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"office/codesnapshot/improvement/#2-using-rtk-without-reselect","title":"2. Using RTK Without Reselect","text":"<p>If you decide to create simple selectors directly within your slice without using reselect, you can do it as follows:</p> Step 1Step 2 <p>Step 1\": Create Your Slice with Simple Selectors</p> <p>You can include selectors directly in your slice file:</p> <pre><code>// gallerySlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst gallerySlice = createSlice({\n    name: \"gallery\",\n    initialState: {\n        items: [],\n        loading: false,\n        error: null,\n        hasPhotos: false,\n    },\n    reducers: {\n        // Define your reducers here\n    },\n});\n\n// Simple selectors\nexport const selectGallery = (state) =&gt; state.gallery;\nexport const selectItems = (state) =&gt; selectGallery(state).items;\nexport const selectLoading = (state) =&gt; selectGallery(state).loading;\nexport const selectError = (state) =&gt; selectGallery(state).error;\nexport const selectHasPhotos = (state) =&gt; selectGallery(state).hasPhotos;\n\nexport const { actions, reducer } = gallerySlice;\nexport default reducer;\n</code></pre> <p>Step 2: Use Selectors in Your Component</p> <p>You can use the same <code>GalleryComponent</code> as shown earlier, but now directly accessing the selectors from the slice:</p> <pre><code>// GalleryComponent.js\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectItems, selectLoading, selectError, selectHasPhotos } from './gallerySlice';\n\nconst GalleryComponent = () =&gt; {\n    const items = useSelector(selectItems);\n    const loading = useSelector(selectLoading);\n    const error = useSelector(selectError);\n    const hasPhotos = useSelector(selectHasPhotos);\n\n    if (loading) {\n        return &lt;div&gt;Loading...&lt;/div&gt;;\n    }\n\n    if (error) {\n        return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    }\n\n    if (!hasPhotos) {\n        return &lt;div&gt;No photos available.&lt;/div&gt;;\n    }\n\n    return (\n        &lt;div&gt;\n            {items.map((photo) =&gt; (\n                &lt;img key={photo.id} src={photo.url} alt={photo.title} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n</code></pre> <p>Where to Place the Files</p> <ul> <li><code>gallerySlice.js</code>: This file can be placed in your <code>features</code> or <code>slices</code> directory, depending on your project structure.</li> <li><code>selectors.js</code>: If you're using <code>reselect</code>, you can create a separate <code>selectors.js</code> file in the same directory as your slice or within a dedicated selectors directory.</li> </ul>"},{"location":"office/codesnapshot/improvement/#summary","title":"Summary","text":"<p>Both approaches have their merits. Using <code>reselect</code> can help with performance in larger applications, while simple selectors are perfectly fine for smaller or less complex applications. Choose the approach that best fits your project needs! Let me know if you have further questions!</p>"},{"location":"office/codesnapshot/improvement/#react-18","title":"React 18","text":"<p>React 18 introduced several exciting features that enhance performance and usability. Here are the main highlights:</p> <ol> <li> <p>Concurrent Rendering: React 18 allows React to work on multiple tasks simultaneously, making rendering more efficient and improving the user experience, especially for large applications.</p> </li> <li> <p>Automatic Batching: Updates within the same event loop are batched automatically, reducing the number of renders and improving performance.</p> </li> <li> <p>Transition API: This API helps manage UI transitions more effectively, allowing developers to mark certain updates as non-urgent, which helps keep the app responsive.</p> </li> <li> <p>Suspense for Data Fetching: React 18 extends Suspense to work with data fetching, making it easier to handle asynchronous operations and provide a better loading experience.</p> </li> <li> <p>Streaming Server Rendering: Improved support for server-side rendering (SSR) allows React to send HTML to the client in chunks, which can lead to faster loading times.</p> </li> <li> <p>New Hooks: Introduction of new hooks like <code>useTransition</code> and <code>useDeferredValue</code> for better state management during concurrent rendering.</p> </li> <li> <p>React Server Components: Although still experimental, this feature allows developers to create components that run on the server, reducing the amount of JavaScript sent to the client.</p> </li> </ol> <p>These features collectively enhance performance, usability, and the developer experience, making React applications more efficient and responsive.</p>"},{"location":"office/codesnapshot/improvement/#error-boundry","title":"Error Boundry","text":"ErrorBoundaryComponent <pre><code>import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true }; // Update state to indicate an error has occurred\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.error(\"Error caught by Error Boundary:\", error, errorInfo);\n    }\n\n    render() {\n        if (this.state.hasError) {\n        return &lt;h2&gt;Something went wrong with loading the image.&lt;/h2&gt;;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n</code></pre> <pre><code>import React from \"react\";\nimport ErrorBoundary from \"./ErrorBoundary\"; // Import your ErrorBoundary\nimport DashboardPicture from \"./Picture\";\nimport DashboardTodo from \"./Todo\";\n\nconst Dashboard = () =&gt; {\n    return (\n        &lt;&gt;\n            &lt;h1&gt; Welcome to Dashboard &lt;/h1&gt;\n            &lt;ErrorBoundary&gt;\n                &lt;DashboardPicture /&gt;\n            &lt;/ErrorBoundary&gt;\n            &lt;DashboardTodo /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default Dashboard;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/","title":"Logging In React","text":"Recommendation <ol> <li> <p>Development Phase: Use console logging to understand how often requests are being canceled and ensure that your application is behaving as expected.</p> </li> <li> <p>Production Phase: If cancellations are well understood and not problematic, consider switching to returning <code>null</code> to keep the console clean. If you still want visibility, you could use a logging library that allows you to control the log levels (e.g., only log cancellations in debug mode).</p> </li> </ol> <p>In summary, a balanced approach often works best: log cancellations during development, then refine your handling for production based on what you\u2019ve learned.</p>"},{"location":"office/codesnapshot/loggin-in-react/#logging-library","title":"Logging Library","text":"<p>There are several logging libraries you can use in React that work well in both development and production environments. Here are some popular options:</p> <ol> <li> <p>Winston</p> <ul> <li>Description: A versatile logging library for Node.js that can also be used in the browser.</li> <li>Features: Supports multiple transports (e.g., file, console, HTTP), custom formatting, and log levels.</li> <li>Use Case: Great for complex applications requiring advanced logging features.</li> </ul> </li> <li> <p>Log4js</p> <ul> <li>Description: A logging framework inspired by log4j, offering a rich set of features.</li> <li>Features: Supports multiple appenders (e.g., console, file), categories, and layouts.</li> <li>Use Case: Suitable for applications needing structured logging.</li> </ul> </li> <li> <p>pino</p> <ul> <li>Description: A fast and low-overhead logging library for Node.js, with browser support.</li> <li>Features: High performance, JSON output, and easy integration with various transports.</li> <li>Use Case: Ideal for performance-sensitive applications.</li> </ul> </li> <li> <p>React Logger</p> <ul> <li>Description: A lightweight logger specifically designed for React applications.</li> <li>Features: Simple API, can log messages to the console or send them to a server.</li> <li>Use Case: Good for basic logging needs in React apps.</li> </ul> </li> <li> <p>Sentry</p> <ul> <li>Description: Primarily an error tracking service, Sentry also provides logging capabilities.</li> <li>Features: Automatic error capturing, performance monitoring, and contextual logging.</li> <li>Use Case: Great for applications where error tracking and logging are combined.</li> </ul> </li> <li> <p>LogRocket</p> <ul> <li>Description: A logging and monitoring service that captures logs along with user sessions.</li> <li>Features: Records user sessions, network requests, and errors, allowing you to replay sessions.</li> <li>Use Case: Useful for understanding user behavior and diagnosing issues.</li> </ul> </li> <li> <p>Bunyan</p> <ul> <li>Description: A simple and fast JSON logging library for Node.js.</li> <li>Features: Provides a structured logging format, log levels, and supports streams.</li> <li>Use Case: Good for applications needing structured log output.</li> </ul> </li> </ol> <p>Recommendations for Development and Production</p> <ul> <li>Development: Use libraries like <code>console</code> for basic logging or <code>Winston/Log4js</code> for more structured logs.</li> <li>Production: Consider using <code>Sentry</code> or <code>LogRocket</code> for error tracking and session replay, and complement them with a logging library like <code>pino</code> for performance.</li> </ul> <p>Configurable Log Levels</p> <p>Regardless of the library you choose, you can often configure log levels (e.g., debug, info, error) to control what gets logged in different environments. This allows you to log more detailed information during development while keeping production logs cleaner.</p>"},{"location":"office/codesnapshot/loggin-in-react/#logging","title":"Logging","text":"<p>For logging in a React app that works well in both development and production, the best approach combines a lightweight, browser-compatible logging library with good configurability. Here are two excellent options: loglevel and winston (with a focus on browser compatibility).</p>"},{"location":"office/codesnapshot/loggin-in-react/#option-1-using-loglevel","title":"Option 1: Using loglevel","text":"<p>loglevel is a simple, lightweight logging library designed for browser use. It allows you to set different log levels and works well for both development and production environments.</p> InstallationConfigurationUsage in Components <pre><code>npm install loglevel\n</code></pre> <p>Create a logger configuration file:</p> <pre><code>// src/utils/logger.js\nimport log from 'loglevel';\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Set the log level based on the environment\nlog.setLevel(isProduction ? 'error' : 'debug');\n\n// Optionally, you can customize log messages\nif (!isProduction) {\n    log.getLogger().setLevel('debug');\n}\n\nexport default log;\n</code></pre> <p>You can now use this logger in your components:</p> <pre><code>// src/components/ComponentA.jsx\nimport React, { useEffect } from 'react';\nimport logger from '../utils/logger';\n\nconst ComponentA = () =&gt; {\n    useEffect(() =&gt; {\n        logger.info('ComponentA has mounted');\n\n        // Simulate an error\n        try {\n            throw new Error('Simulated error');\n        } catch (error) {\n            logger.error(`An error occurred in ComponentA: ${error.message}`);\n        }\n\n        return () =&gt; {\n            logger.info('ComponentA will unmount');\n        };\n    }, []);\n\n    return &lt;div&gt;Component A&lt;/div&gt;;\n};\n\nexport default ComponentA;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#sentry-and-logrocket","title":"<code>Sentry</code> and <code>LogRocket</code>","text":"<p>For a medium-sized application, choosing between Sentry and LogRocket depends on your specific needs and priorities. Here are some considerations to help you decide:</p> Considerations for Medium-Sized Apps <ol> <li> <p>Error Tracking and Performance Monitoring:</p> <p>Choose Sentry if:</p> <ul> <li>You want robust error tracking with detailed stack traces and alerts.</li> <li>You need to monitor application performance and identify bottlenecks.</li> <li>Catching and resolving errors quickly is a priority for your team.</li> <li>You want real-time notifications when new errors occur.</li> </ul> </li> <li> <p>User Experience Insights:</p> <p>Choose LogRocket if:</p> <ul> <li>Understanding user interactions and behaviors is crucial for your application.</li> <li>You want to replay user sessions to diagnose UI/UX issues visually.</li> <li>You\u2019re looking to improve user experience based on actual usage patterns.</li> <li>You need to debug issues related to specific user actions.</li> </ul> </li> </ol> Recommendation <p>Given that your app is medium-sized, you might want to consider starting with Sentry for the following reasons:</p> <ul> <li>Immediate Benefits: Sentry provides essential error tracking and performance monitoring, which can help you quickly address issues that may affect your users.</li> <li>Lower Overhead: Sentry is straightforward to integrate and can provide immediate value without the complexity of visual debugging.</li> <li>Scalability: As your application grows, Sentry's features can help you manage more complex error tracking and monitoring needs.</li> </ul> <p>Future Consideration</p> <p>Once you have Sentry set up and are comfortable with it, you can always consider adding LogRocket later if you find you need more insights into user interactions or if you face frequent UI/UX issues.</p> <p>Summary</p> <ul> <li>Start with Sentry for error tracking and performance monitoring.</li> <li>Consider LogRocket later if you need deeper insights into user behavior and session replays.</li> </ul> <p>This approach allows you to establish a solid foundation for monitoring and debugging while keeping your initial setup manageable.</p> <p>To use Sentry in your React application, you'll need to follow these steps to set it up and start capturing errors and performance data. Here's a detailed guide:</p>"},{"location":"office/codesnapshot/loggin-in-react/#step-1-create-a-sentry-account-and-project","title":"Step 1: Create a Sentry Account and Project","text":"<pre><code>Sign Up for Sentry:\n    Go to Sentry's website and create an account if you don't have one.\n\nCreate a New Project:\n    Once logged in, create a new project. Choose \"JavaScript\" as the platform and select \"React\" as the framework.\n\nGet Your DSN:\n    After creating the project, Sentry will provide you with a DSN (Data Source Name). You'll need this to configure Sentry in your app.\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-2-install-sentry-sdk","title":"Step 2: Install Sentry SDK","text":"<p>In your React project, install the Sentry SDK:</p> <pre><code>npm install @sentry/react @sentry/tracing\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-3-configure-sentry-in-your-application","title":"Step 3: Configure Sentry in Your Application","text":"<p>You\u2019ll want to initialize Sentry in your application, typically in your main entry file (like <code>index.js</code> or <code>App.js</code>).</p> <p>Example Configuration in index.js:</p> <pre><code>// src/index.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\n\nSentry.init({\n  dsn: \"YOUR_SENTRY_DSN\", // Replace with your actual DSN\n  integrations: [new Integrations.BrowserTracing()],\n  // Optional: adjust the tracesSampleRate to control the amount of performance data sent to Sentry\n  tracesSampleRate: 1.0, // Capture 100% of transactions for performance monitoring\n});\n\nReactDOM.render(&lt;App /&gt;, document.getElementById(\"root\"));\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-4-capture-errors-in-your-components","title":"Step 4: Capture Errors in Your Components","text":"<p>Sentry automatically captures unhandled exceptions and unhandled promise rejections. However, you can also manually capture errors in your components.</p> <p>Example: Capturing Errors in a Component:</p> <pre><code>// src/components/ComponentA.jsx\nimport React, { useEffect } from \"react\";\nimport * as Sentry from \"@sentry/react\";\n\nconst ComponentA = () =&gt; {\n  useEffect(() =&gt; {\n    try {\n      // Simulate an error\n      throw new Error(\"Simulated error in ComponentA\");\n    } catch (error) {\n      Sentry.captureException(error);\n    }\n  }, []);\n\n  return &lt;div&gt;Component A&lt;/div&gt;;\n};\n\nexport default ComponentA;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-5-adding-error-boundaries-optional","title":"Step 5: Adding Error Boundaries (Optional)","text":"<p>You can wrap your components with Sentry\u2019s <code>ErrorBoundary</code> to automatically capture errors in the component tree.</p> <p>Example: Using Sentry Error Boundary:</p> <pre><code>// src/App.js\nimport React from \"react\";\nimport * as Sentry from \"@sentry/react\";\nimport ComponentA from \"./components/ComponentA\";\n\nconst App = () =&gt; (\n  &lt;Sentry.ErrorBoundary fallback={&lt;h1&gt;Something went wrong&lt;/h1&gt;}&gt;\n    &lt;ComponentA /&gt;\n    {/* Other components can go here */}\n  &lt;/Sentry.ErrorBoundary&gt;\n);\n\nexport default App;\n</code></pre>"},{"location":"office/codesnapshot/loggin-in-react/#step-6-testing-your-setup","title":"Step 6: Testing Your Setup","text":"<ol> <li> <p>Trigger an Error:</p> <ul> <li>You can trigger an error in your app by using the code provided in the component example.</li> </ul> </li> <li> <p>Check Sentry Dashboard:</p> <ul> <li>After triggering an error, go to your Sentry dashboard to see if the error was captured. It should appear under the Issues tab in your project.</li> </ul> </li> </ol> <p>Summary</p> <ol> <li>Create an Account and Project on Sentry and get your DSN.     Install the Sentry SDK in your React project.     Initialize Sentry in your main entry file.     Capture Errors manually in components or use Sentry\u2019s ErrorBoundary.     Test your setup to ensure errors are being reported to Sentry.</li> </ol> <p>With these steps, you should have a functional Sentry integration in your React application, allowing you to monitor errors and performance effectively!</p>"},{"location":"office/codesnapshot/router-dom/","title":"router dom","text":"<pre><code>import { useNavigate } from \"react-router-dom\";\n\nconst navigate = useNavigate();\n\nconst handleNavigateToTodo = () =&gt; {\n  navigate(\"/todo\"); // Navigate to the /todo route\n};\n\nreturn (\n  &lt;&gt;\n    &lt;ResuableCard\n      title=\"Todo\"\n      content={todosContent}\n      extra={[\n        &lt;SearchOutlined /&gt;,\n        &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n      ]}\n      icon={\n        &lt;&gt;\n          &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n        &lt;/&gt;\n      }\n    /&gt;\n  &lt;/&gt;\n);\n</code></pre> <p>You can use <code>&lt;Link&gt;</code> instead of <code>useNavigate</code>, but the choice between the two depends on your specific requirements. Here's a breakdown of your code with both options, along with recommendations.</p> Using <code>&lt;Link&gt;</code>Using <code>useNavigate</code>Comparison <p>If you want to navigate to the <code>/todo</code> route when clicking on the icon, you can use <code>&lt;Link&gt;</code> like this:</p> <pre><code>import { Link } from \"react-router-dom\";\n\n// Inside your component\nreturn (\n    &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={todosContent}\n            extra={[\n                &lt;SearchOutlined /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n            ]}\n            icon={\n                &lt;Link to=\"/todo\"&gt;\n                    &lt;CopyTwoTone key=\"navigate\" /&gt;\n                &lt;/Link&gt;\n            }\n        /&gt;\n    &lt;/&gt;\n);\n</code></pre> <p>Using <code>useNavigate</code> allows you to handle more complex logic or conditions before navigating. For example:</p> <pre><code>import { useNavigate } from \"react-router-dom\";\n\nconst MyComponent = () =&gt; {\n    const navigate = useNavigate();\n\n    const handleNavigateToTodo = () =&gt; {\n        // You might have some logic here before navigating\n        navigate(\"/todo\");\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={todosContent}\n            extra={[\n                &lt;SearchOutlined /&gt;,\n                &lt;PlusCircleTwoTone key=\"add\" onClick={handleTodoAdd} /&gt;,\n            ]}\n            icon={\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n            }\n        /&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre> <ol> <li> <p>Using <code>&lt;Link&gt;</code>:</p> <p>Pros: -   Simpler for straightforward navigation. -   Better for SEO and accessibility since it renders a clickable anchor element.</p> <p>Cons: -   Less flexible for complex logic (e.g., conditional navigation based on form submission).</p> </li> <li> <p>Using <code>useNavigate</code>:</p> <p>Pros: -   Allows for programmatic control and conditional logic before navigation. -   Useful if you need to perform actions (like validation) before navigating.</p> <p>Cons: -   Slightly more verbose than  for simple use cases.</p> </li> </ol> <p>Recommendation</p> <ul> <li>Use <code>&lt;Link&gt;</code>: If the navigation is straightforward (just moving to another route) and you don't need any additional logic or conditions.</li> <li>Use <code>useNavigate</code>: If you have conditions to check or need to perform actions before navigating (like validation, API calls, or complex routing logic).</li> </ul> <p>In your case, if clicking the icon is purely for navigation without additional checks, <code>&lt;Link&gt;</code> might be the better and cleaner option. If you have some logic you need to run before navigating, stick with <code>useNavigate</code>.</p>"},{"location":"office/codesnapshot/router-dom/#example","title":"Example","text":"<p>Certainly! Here\u2019s a practical example demonstrating how to use <code>useNavigate</code> with some conditional logic before navigating to another route. This example will include checking if a user is authenticated before allowing them to navigate to the <code>/todo</code> page.</p> ExampleExplanation <p>Example: Conditional Navigation Based on Authentication</p> <p>Assume you have a simple authentication check in your application. If the user is not authenticated, you might want to show an alert or redirect them to a login page instead of navigating to the <code>/todo</code> page.</p> <pre><code>import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { message } from 'antd'; // For user feedback\nimport { CopyTwoTone, PlusCircleTwoTone } from '@ant-design/icons';\nimport ResuableCard from './ResuableCard'; // Your reusable card component\n\nconst DashboardTodo = () =&gt; {\n    const navigate = useNavigate();\n\n    // Simulating an authentication state\n    const isAuthenticated = false; // Change this to simulate authentication\n\n    const handleNavigateToTodo = () =&gt; {\n        if (isAuthenticated) {\n            navigate(\"/todo\"); // Navigate if authenticated\n        } else {\n            message.warning(\"You need to be logged in to access the Todo page.\"); // Feedback for the user\n            // Optionally, you can navigate to a login page\n            // navigate(\"/login\");\n        }\n    };\n\n    return (\n        &lt;&gt;\n        &lt;ResuableCard\n            title=\"Todo\"\n            content={&lt;p&gt;Your todo content here.&lt;/p&gt;}\n            extra={[\n                &lt;PlusCircleTwoTone key=\"add\" onClick={() =&gt; console.log('Add Todo')} /&gt;,\n            ]}\n            icon={\n                &lt;CopyTwoTone key=\"navigate\" onClick={handleNavigateToTodo} /&gt;\n            }\n        /&gt;\n        &lt;/&gt;\n    );\n};\n\nexport default DashboardTodo;\n</code></pre> <ol> <li> <p>Authentication Check:</p> <ul> <li>The <code>isAuthenticated</code> variable simulates the authentication state. In a real application, you would likely fetch this from your application's state (e.g., Redux or Context API).</li> </ul> </li> <li> <p>handleNavigateToTodo:</p> <ul> <li>This function checks if the user is authenticated.</li> <li>If they are, it uses <code>navigate(\"/todo\")</code> to redirect to the Todo page.</li> <li>If not, it shows a warning message using Ant Design's message component, informing the user that they need to log in.</li> </ul> </li> <li> <p>User Feedback:</p> <ul> <li>The <code>message.warning</code> function provides immediate feedback to the user, enhancing the user experience.</li> </ul> </li> <li> <p>Optional Navigation:</p> <ul> <li>You can also include an optional navigation to a login page if desired (commented out in this example).</li> </ul> </li> </ol> <p>When to Use This Pattern</p> <p>This pattern is particularly useful when you want to protect certain routes (like <code>/todo</code>) and ensure users meet certain conditions (like being authenticated) before accessing them. It allows for a more controlled and user-friendly navigation experience.</p>"},{"location":"office/codesnapshot/slice/","title":"Slice","text":""},{"location":"office/ispl/package/","title":"Package","text":""},{"location":"office/ispl/package/#api","title":"API","text":""},{"location":"office/ispl/package/#query-string","title":"query-string","text":"<pre><code>npm i query-string\n</code></pre> <pre><code>import queryString from 'query-string';\n</code></pre> Pictures Note <ul> <li>query-string</li> <li>What is Query String? What are its advantages and limitations? </li> </ul>"},{"location":"office/ispl/package/#reducer","title":"REDUCER","text":""},{"location":"office/ispl/package/#action","title":"ACTION","text":""},{"location":"office/ispl/package/#antd-message","title":"antd <code>message</code>","text":"<pre><code>import { message } from 'antd';\n</code></pre>"},{"location":"office/ispl/secret/","title":"PW","text":""},{"location":"office/ispl/secret/#jenkins","title":"JENKINS","text":"<pre><code>URL - http://ci-info.info.com.np:8080/\n\nuser: infoadmin\npwd: anil{****}1234\n</code></pre>"},{"location":"office/ispl/secret/#gitlab","title":"Gitlab","text":"<pre><code>URL: http://gitserver.info.com.np\n\npwd: bi{.........}\n</code></pre>"},{"location":"office/ispl/secret/#postmen","title":"Postmen","text":"<pre><code>mail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/ispl/secret/#zimbra","title":"Zimbra","text":"<pre><code>URL: https://mail.info.com.np\n\nmail: bishow.thapa@info.com.np\npwd: Iphone123!@#\n</code></pre>"},{"location":"office/ispl/secret/#ictc","title":"ICTC","text":"<pre><code>URL: https://cqweb.ictc.com.np/#/\n\nuser: anil\npwd: Anil@{*****}\n\nuser: admin_***\npwd: BaSs@9627{*}\n</code></pre>"},{"location":"office/ispl/secret/#cqweb","title":"CQWEB","text":"<pre><code>URL: https://cqweb.info.com.np\n\nuser: admin_bbask\npwd: SsBa@9999\n\nuser: bishow\npwd: $Bishow88\n\nuser: zoro\npwd: $Bishow88\n\nuser: biju\npwd: 1q2w3E**@\n\nuser: Aakash\npwd: 1q2w3E**@\n\nuser: sp\npwd: Password1234$\n\nuser: amit\npwd: 1q2w3E**@\n\nuser: bijay\npwd: 1q2w3E**@\n\nuser: sajal\npwd: 1q2w3E**@\n</code></pre>"},{"location":"office/ispl/secret/#infocus360-not-active","title":"Infocus360 (not active)","text":"<p>Danger</p> <pre><code>URL: https://infocus360.ispl.com.np\n\nuser: bishow\npwd: 1q2w3E**@\n\nuser: admin\npwd: 1q2w3E*\n</code></pre>"},{"location":"office/ispl/secret/#zimbra-mail-updated","title":"Zimbra MAIL <code>updated</code>","text":"<p>Success</p> <pre><code>URL: http://mail.info.com.np/webmail\n\nmail: bishow.thapa@info.com.np\npwd: I$VqIS~i%DTE\n</code></pre>"},{"location":"office/ispl/secret/#cedro","title":"Cedro","text":"<p>Success</p> <pre><code>url: https://cedro.percipio.com\nuser: anil.maharjan@ispl.com.np\npwd: Welcome1\n</code></pre>"},{"location":"office/ispl/secret/#clickup","title":"Clickup","text":"<p>Success</p> <pre><code>url: https://app.clickup.com/login\nmail: bishow.thapa@info.com.np\npwd: 75NHYbVWkWFM8pWyjWYD\n</code></pre>"},{"location":"office/ispl/secret/#ispl-website-cpanel","title":"ISPL WEBSITE CPANEL","text":"<p>Success</p> <pre><code># URL\nhttps://s717.sgp8.mysecurecloudhost.com:2083/\n# USERNAME\nbishow@allianceasianepal.org.np\n# PASSWORD\nBishow@123##\n</code></pre>"},{"location":"office/ispl/secret/#teams-for-leave-approval","title":"Teams (for leave approval)","text":"<p>Success</p> <ul> <li>teams.microsoft.com</li> <li>bishow.thapa@ispl.com.np</li> <li>"},{"location":"office/ispl/secret/#hr-app","title":"HR app","text":"<p>Note</p> <pre><code>https://hr.my/go/\ndoyahi8886@bizatop.com\nadminadmin1234\n\nhttps://hr.my/go/\nbishow.thapa@info.com.np\nadmin1234\n</code></pre>"},{"location":"office/ispl/secret/#ispl-mail-for-google-app","title":"ISPL Mail For Google App","text":"<pre><code>isplmail49@gmail.com \n</code></pre>"},{"location":"office/ispl/secret/#local-portainer-password","title":"Local Portainer password","text":"<pre><code>username: ninja\npassword: ,d:_D9rm_7w?}D8\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"ReplyChatBox.js<pre><code>// changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/","title":"Circular Planning","text":"<p>Tender Module</p> <p><code>views/OfficeResource/Reference/Tabs/companies/Companies.js</code></p> New Code Companies.js<pre><code>const Companies = ({\n    searchEmailTender,\n    rowEventhandlers,\n    companyId,\n    emailReferenceId,\n    getDetails,\n    selectedTenderRowId,\n    isCircular,\n}) =&gt; {\n    // const [companyIdForRemark, setCompanyId] = useState(false);\n    const [valueRadioAddCompany, setValueRadioAddCompany] = useState(1);\n    const [formCompanyId, setFormCompanyId] = useState(\"\");\n    const [value, setValue] = useState(\"\");\n    const [visibleQuickModal, setVisibleQuickModal] = useState(false);\n    // added\n    const [isCircularModalOpen, setIsCircularModalOpen] = useState(false);\n\n    const handleAddCompanyModal = () =&gt; {\n        setIsAddCompanyModelOpen(false);\n        setFormCompanyId(null);\n    };\n\n    const handleCircularModal = () =&gt; {\n        setIsCircularModalOpen(false);\n        setHideInternalMessage(true);\n    };\n\n    const onFinish = (values) =&gt; {\n        let newValues = {\n        ...values,\n        ReferenceId: emailReferenceId,\n        };\n\n        setIsAddCompanyModelOpen(true);\n        // dispatch(ReferenceCompanyManualAdd(newValues));\n        // added\n        setFormCompanyId(values?.CompanyId);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n        remarks:\n            valueRadioAddCompany === 1\n            ? \"Facebook\"\n            : valueRadioAddCompany === 2\n            ? \"Whatsapp\"\n            : valueRadioAddCompany === 3\n            ? \"Twitter\"\n            : valueRadioAddCompany === 4\n            ? // ? values?.companyAddRemarks\n                \"Other\"\n            : null,\n        };\n\n        // for manual Company Add\n        const api1 = {\n            ReferenceId: emailReferenceId,\n            CompanyId: formCompanyId,\n        };\n\n        // for remarks\n        const api2 = {\n            tenderBasicId: getDetails.id,\n            contactCompanyId: formCompanyId,\n            ModeofCommunication: remarksData?.remarks,\n            remarks: values?.remarks,\n        };\n\n        try {\n            if (isCircular) {\n                dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n            } else {\n                dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n            }\n        } catch (err) {\n            console.log(\"error\", err);\n        } finally {\n            setIsAddCompanyModelOpen(false);\n            addCompanyModelForm.resetFields();\n        }\n    };\n\n      // helper functions\n    const renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n        &lt;Radio key={value} value={value}&gt;\n        {label}\n        {valueRadioAddCompany === value &amp;&amp; (\n            &lt;Form.Item name={remarksFieldName} rules={[{ required: true }]}&gt;\n            &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n            &lt;/Form.Item&gt;\n        )}\n        &lt;/Radio&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"\"\n                className=\"\"\n                visible={isAddCompanyModelOpen}\n                onCancel={handleAddCompanyModal}\n                footer={null}&gt;\n                &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Radio.Group\n                            onChange={onChangeAddCompany}\n                            value={valueRadioAddCompany}\n                            name=\"addupdateremarks\"\n                        &gt;\n                        &lt;Space direction=\"vertical\"&gt;\n                            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n                            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n                            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n                            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n                        &lt;/Space&gt;\n                        &lt;/Radio.Group&gt;\n                    &lt;/Form.Item&gt;\n                    &lt;Form.Item&gt;\n                        &lt;Button\n                            className=\"company-add-save-btn\"\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                            shape=\"round\"\n                        &gt;\n                            Submit\n                        &lt;/Button&gt;\n                        &lt;Button\n                            type=\"dotted\"\n                            onClick={() =&gt; {\n                                setIsAddCompanyModelOpen(false);\n                            }}\n                            bordered={false}\n                            shape=\"round\"\n                        &gt;\n                            Close\n                        &lt;/Button&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/#reducer","title":"REDUCER","text":"<p><code>ACTION API: referenceCircularPlanningRemarksAdd</code></p> reducer.js<pre><code>// src/services/redux/Reference/reducer.js\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n        // modeofCommunication: action.payload?.modeofCommunication,\n        // attentionTo: action.payload?.attentionTo,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n\n    return {\n    ...state,\n    circularPlanningRemarksResp: action.payload,\n    circularPlanningRemarksLoading: false,\n    referencePartyListingCircularResponse:\n        updatedPartyListingCircularResponse,\n    };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/circular-planning/#advanced-redux","title":"Advanced REDUX","text":"<pre><code>// solo REMARKS\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n  return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n  const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n      ? \"referencePartyListingCircularResponse\"\n      : \"referencePartyListingResponse\";\n  return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    // referencePartyListingCircularResponse:\n    //   state?.referencePartyListingCircularResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    // referencePartyListingResponse:\n    //   state?.referencePartyListingResponse?.map((item) =&gt; {\n    //     if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n    //       return {\n    //         ...item,\n    //         remarks: action.payload.remarks,\n    //       };\n    //     } else {\n    //       return {\n    //         ...item,\n    //       };\n    //     }\n    //   }),\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n      if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n          ...item,\n          remarks: action.payload.remarks,\n        };\n      } else {\n        return {\n          ...item,\n        };\n      }\n    }),\n  };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n  return {\n    ...state,\n    soloRemarksAddLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/","title":"Compose Email Drawer","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/#problem","title":"Problem","text":"<p>Scenario</p> <p>When searching and selecting the <code>Reference</code> in the compose. The selected reference tags is removed in the selected input when new search term is searched.</p> <p><code>mailMessageReferenceDtos</code> is used in two places <code>useEffect</code>.</p> <pre><code>const [mailRefDtos, setmailRefDto] = useState([]);\n\n// 1: linenumber: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n\n// line number: 2783\nuseEffect(() =&gt; {\n  form.setFieldsValue({\n    mailMessageReferenceDtos: mailRefDtos,\n  });\n}, [mailRefDtos]);\n\n// .. return\n&lt;Form.Item\n  className=\"form__group compose-ref-select\"\n  name=\"mailMessageReferenceDtos\"\n/&gt;;\n&lt;Select\n    onSelect={(value) =&gt; {\n        //...\n         setmailRefDto(uniqueArray);\n    }}\n&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/compose-email-drawer/#solution","title":"Solution","text":"<p>I have commented the <code>mailMessageReferenceDtos</code> from setting the value in the <code>form</code>.</p> ComposeEmailDrawer.js<pre><code>const { referenceListingResponse, referenceListingLoading } = useSelector(\n  (state) =&gt; state.reference\n);\n\nconst getReferencePagination = (\n  MaxResultCount = 110,\n  SkipCount = 0,\n  loadMore = false\n) =&gt; {\n  dispatch(\n    getReferenceListing(\n      {\n        MaxResultCount,\n        SkipCount,\n        SearchKeyword: searchValueReference,\n      },\n      loadMore\n    )\n  );\n};\n\n// getReferencePagination is called in useEffect(() =&gt; {})\n// remeber searchValueReference, the useEffect is depened on the searchValueReference\nuseEffect(() =&gt; {\n    // ...\n     else if (filterParticipantType === \"REF\") {\n      setInfiniteScroll(false);\n      const timeoutId = setTimeout(\n        () =&gt; getReferencePagination(200, 0, false),\n        150\n      );\n      return () =&gt; clearTimeout(timeoutId);\n    }\n}, [addNewEmailText, searchValueCc, searchValueBCC, searchValueReference]);\n\n// line number: 257\nuseEffect(() =&gt; {\n  const idRef = referenceListingResponse?.items?.find((x) =&gt; {\n    return x?.code == searchKeywordFormatData;\n  });\n\n  form.setFieldsValue({\n    // mailMessageReferenceDtos: idRef?.code,\n    subject:\n      form.getFieldsValue()[\"subject\"] === undefined\n        ? searchKeywordFormatData\n        : form.getFieldsValue()[\"subject\"],\n  });\n}, [referenceListingResponse?.items]);\n</code></pre> <p>hello bug</p> <p>while searching <code>hello</code>, the response is <code>2</code> items but it doesn't show the dropdown at that time.</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-module/","title":"Dasboard Financial Status","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-module/#dashboard-module","title":"Dashboard Module","text":"Budget.js<pre><code>// line number: 104\n\nconst tableDataSource = [\n    {\n        type: \"Fee Due\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDue !== 0) {\n            return x.feeDue;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueUsd !== 0) {\n            return x.feeDueUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeDueTotal !== 0) {\n            return x.feeDueTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        # Added\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeDue\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n    {\n        type: \"Fee Remaining\",\n        amount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemaining !== 0) {\n            return x.feeRemaining;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        dollarAmount: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingUsd !== 0) {\n            return x.feeRemainingUsd;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        total: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x.feeRemainingTotal !== 0) {\n            return x.feeRemainingTotal;\n            }\n        })\n        .filter((x) =&gt; x !== undefined),\n        lastUpdatedDate: filteredDataSource\n        ?.map((x) =&gt; {\n            if (x?.accountCategory === \"FeeRemaining\") {\n            return x.lastUpdatedDate;\n            }\n        })\n        .filter((x) =&gt; x !== undefined)\n        .join(\"\"),\n    },\n];\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-noticeboard-after-4pm/","title":"Dashboard Model: show after 4pm","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-noticeboard-after-4pm/#dashboard-noticeboard-after-4pm-to-sent-all-users","title":"Dashboard Noticeboard after 4pm to sent all users","text":"<p>Abstract</p> old Codenew CodeAlternative Method DraggableHome.js<pre><code>const DraggableHome = forwardRef(({ navbarRef }, ref) =&gt; {\n\n\n{/* ADDED */}\nconst isAfter4PM = () =&gt; {\n    const now = moment();\n    const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0);\n    return now.isAfter(fourPM);\n};\n\nreturn (\n    &lt;&gt;\n    &lt;div className=\"dashboards dashing\" ref={ref}&gt;\n        &lt;Layout\n            ....\n        /&gt;\n        {noticeBoard?.totalCount === 0 ? (\n        \"\"\n        ) : (\n        &lt;&gt;\n            {!isEmpty(noticeBoard) &amp;&amp; (\n            &lt;&gt;\n                &lt;div\n                    style={{\n                        marginTop: \"-10px\",\n                        backgroundColor: \"white\",\n                        marginBottom: \"14px\",\n                        borderRadius: \"8px\",\n                    }}\n                &gt;\n                    &lt;div className=\"dashboard_notice_board_top\"&gt;\n                        &lt;div\n                            className=\"dashboard_notice_title\"\n                            style={{ width: \"4%\", marginLeft: \"5px\" }}\n                        &gt;\n                            Notice|\n                        &lt;/div&gt;\n                        &lt;marquee className=\"marquee_tag_dashboard\"&gt;\n                            {noticeBoard?.items?.map((data, i) =&gt; (\n                                &lt;span className=\"title_dashboard_notice\" key={i}&gt;\n                                {data?.title}\n                                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${data?.description}`}&lt;/span&gt;\n                                &lt;/span&gt;\n                            ))}\n                        &lt;/marquee&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* ADDED */}\n                {isAfter4PM() &amp;&amp; &lt;NoticeBoardModal noticeBoard={noticeBoard} /&gt;}\n            &lt;/&gt;\n            )}\n        &lt;/&gt;\n        )}\n    &lt;/&gt;\n    )\n});\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        console.log(\"xxx item xxx: \", item)\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;&gt;\n                    {/* &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt; */}\n\n                    &lt;Modal\n                        title={visibleItem?.title}\n                        visible={isModalVisible}\n                        onCancel={handleModalCancel}\n                        footer={null}\n                    &gt;\n                        &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                    &lt;/Modal&gt;\n                &lt;/&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> NoticeBoardModal.js<pre><code>import React, { useState, useEffect } from 'react';\nimport { Modal, List } from 'antd';\nimport { isEmpty } from 'lodash';\nimport moment from 'moment';\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        // Function to check if current time is after 4 PM\n        const checkTimeToShowModal = () =&gt; {\n            const now = moment();\n            const fourPM = moment().set('hour', 16).set('minute', 0).set('second', 0); // 4 PM today\n            if (now.isAfter(fourPM)) {\n                setIsModalVisible(true);\n            } else {\n                setIsModalVisible(false);\n            }\n        };\n\n        checkTimeToShowModal(); // Initial check when component mounts\n\n        // Set interval to check the time every minute\n        const interval = setInterval(() =&gt; {\n            checkTimeToShowModal();\n        }, 60000); // Check every minute\n\n        return () =&gt; {\n            clearInterval(interval); // Clear interval on component unmount\n        };\n    }, []);\n\n    useEffect(() =&gt; {\n        // Update modal visibility based on noticeBoard\n        if (isModalVisible &amp;&amp; !isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n            } else {\n                setVisibleItem(null);\n            }\n        }\n    }, [isModalVisible, currentIndex, noticeBoard]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex(prevIndex =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n            &lt;List.Item&gt;\n                &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n                &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n            &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n            {isModalVisible &amp;&amp; (\n                &lt;List\n                    size=\"small\"\n                    dataSource={visibleItem ? [visibleItem] : []}\n                    renderItem={renderItem}\n                /&gt;\n            )}\n            {isModalVisible &amp;&amp; (\n                &lt;Modal\n                    title={visibleItem?.title}\n                    visible={isModalVisible}\n                    onCancel={handleModalCancel}\n                    footer={null}\n                &gt;\n                    &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n                &lt;/Modal&gt;\n            )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/","title":"Dashboard Today Task","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/#scenario","title":"Scenario","text":"<p>After adding the Task from the dashboard, it doesn't comes in the task list.</p> <p><code>views/Home/todolist.js</code></p> <p>line number: <code>318</code></p> todoList.js<pre><code>const onFinish = async (values) =&gt; {\n  let newValues = {\n    startDate: moment(values.startDate),\n    privateUserId: participantFrom,\n    organizerEventLabelId: \"5ed65d11-e8e4-4ca9-a35f-14dbaa6509a6\",\n    normalOrPhoneOrVisit: calls ? 1 : visit ? 2 : 0,\n    isToday: 1,\n    ...values,\n  };\n\n  // Comment old code\n  // await dispatch(addToDoEvent(newValues));\n\n  // Structure\n  // addToDoEvent(data, &lt;type&gt;, &lt;taskCat&gt;)\n\n  // finally add this\n  await dispatch(addToDoEvent(newValues, undefined, \"today\"));\n\n  // Remove this\n  // await fetchMoreData();\n\n  await setCalls(false);\n  await setVisit(false);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/dashboard-today-task/#reducer","title":"Reducer","text":"<p><code>services/redux/organizer/todoLists/action.js</code></p> <p>line Number: <code>69</code></p> action.js<pre><code>export const addToDoEvent = (body, type, taskCat) =&gt; {\n  return async (dispatch) =&gt; {\n    // console.log(\"type: \", type, \", taskCat at last: \", taskCat);\n    dispatch(init(TODO_TYPES.ADD_TODO_LISTS));\n    const response = await toDoListService.addToDoEvent(body);\n    dispatch(finish(TODO_TYPES.ADD_TODO_LISTS));\n    if (response.isSuccess) {\n      // if (type !== \"calls\") {\n      //   dispatch(getTodoEventsPagination());\n      // }\n\n      dispatch(\n        success(TODO_TYPES.ADD_TODO_LISTS, { ...response.data, taskCat })\n      );\n      dispatch(todoEventGetAllCounter());\n      // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n      message.success(\"To-Do Event added successfully\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/internal-message-only-system-to-show-in-tos/","title":"Internal Message: only system user to show","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/internal-message-only-system-to-show-in-tos/#internal-only-the-system-users-to-be-shown-in-internal-message-section","title":"Internal : Only the System Users to be shown in Internal Message section","text":"<p>after clicking select all option . only the Internal users are selected</p> <p>By Default all the users in included in internal section . If the user is not to be added in the internal section then it will be tagged as not inlcude in internal section . </p> <p>Tip</p> <p>/organizationStructure/userReportingManagerUserListing</p> <p><code>IsExcludedInternalMessage</code> should be present in the response</p> old CodeUpdated Code Email/Includes/ReplyChatBox.js<pre><code>useEffect(() =&gt; {\n    if (chatBox) {\n        if (selectTosInternal) {\n        let allParticipantsId = allParticipants?.map(\n            (participant) =&gt; participant?.appUserId\n        );\n        let newQuickMessageParticipantDtos = allParticipants?.map(\n            (participant) =&gt; ({\n            participantUserId: participant?.appUserId,\n            })\n        );\n\n        //added\n        let isExcludedParticipantDtos = allParticipants\n            .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n            .map(participant =&gt; participant?.appUserId);\n\n        setQuickMessageParticipantDtosTo(newQuickMessageParticipantDtos);\n        form.setFieldsValue({\n            // participantTos: allParticipantsId,\n            // added\n            participantTos: isExcludedParticipantDtos,\n        });\n        } else {\n        form.setFieldsValue({\n            participantTos: [],\n        });\n        }\n    }\n}, [selectTosInternal]);\n</code></pre> <pre><code>let isExcludedParticipantDtos = allParticipantsId\n  .filter(participant =&gt; participant?.IsExcludedInternalMessage)\n  .map(participant =&gt; participant?.appUserId);\n\nform.setFieldsValue({ \n    participantTos: isExcludedParticipantDtos,\n})\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/","title":"Reply Mail & Quick Person Add Bug","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/#while-replying-the-mail-and-adding-quick-person-add","title":"While Replying the mail and adding Quick Person Add","text":"<p><code>ComposeEmailDrawer.js</code></p> <p><code></code></p> Old CodeNew Code ComposeEmailDrawer.js<pre><code>// check1: line number: 1230\nform.setFieldsValue({\n    participantCCs: [],\n    participantTos: participantTypeTos?.map((typeTos) =&gt; {\n        return typeTos;\n    }),\n})\n\n// check2: line number: 1441\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> ComposeEmailDrawer.js<pre><code>form.setFieldsValue({\n    participantCCs: [],\n\n    // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n    //   return typeTos;\n    // }),\n\n    participantTos: !isEmpty(contactQuickAddEmailRespsonse)\n        ? [\n            ...form.getFieldsValue()?.participantTos,\n        ]\n        : participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        }),\n});\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-reply-bug/#display-message","title":"Display Message","text":"<pre><code>status === \"composeDraft\"\nstatus === \"emailForwardSend\"\nstatus === \"reSend\"\n</code></pre> <pre><code>// line number: 572\nconst displayMessages = (status) =&gt; {\n  let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n  let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n  let participantTypeTos =\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n      return { emailAddress: typeTos.emailAddress };\n    });\n  let participantTypeCCs = !isEmpty(\n    currentSelectedMailMessage?.applicationTypeDetails?.cCs\n  )\n    ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n      })\n    : [];\n\n  const participantTos = getParticipantsInfo(participantTypeTos);\n  const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n  if (status !== \"reSend\") {\n    if (status === \"composeDraft\") {\n      form.setFieldsValue({\n        participantFrom: messageParticipantsFrom[0],\n      });\n      setEditorData(currentSelectedMailMessage.body);\n    } else {\n      let data = `From:${\n        participantTypeFrom?.emailAddress\n      }  &lt;br&gt; To:${participantTos} ${\n        partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n      } &lt;br&gt;  Date:${\n        currentSelectedMailMessage?.creationTime &amp;&amp;\n        moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n      },${moment(currentSelectedMailMessage?.creationTime).format(\"LT\")} &lt;br&gt; ${\n        currentSelectedMailMessage.body\n      } &lt;br&gt;`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n    if (status === \"emailForwardSend\") {\n      let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\n        \"MM/DD/YYYY\"\n      )},${moment(currentSelectedMailMessage?.creationTime, \"HH:mm:ss\").format(\n        \"LT\"\n      )} ${\n        (currentSelectedMailMessage?.companyName\n          ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n              .companyName\n          : \"\",\n        currentSelectedMailMessage?.applicationTypeDetails.from[0].emailAddress)\n      }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n      setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n  } else if (status === \"reSend\") {\n    let data = `${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  } else {\n    let data = `Date:${\n      currentSelectedMailMessage?.creationTime &amp;&amp;\n      moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n    } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n    setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/","title":"Mail & Tender communication Loader","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#tender-company-email-listing-needs-to-have-loader-section","title":"Tender Company email Listing needs to have loader section","text":"<p>Changes file names</p> <pre><code>src/App.js\nsrc/components/Navbar.js\nsrc/views/Email/EmailList.js\nsrc/views/Email/EmailListDetails.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <p>Scenario</p>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#adding-context-api","title":"Adding Context API","text":"<p>Make a folder called <code>context</code> and add these two files</p> Context ProviderContext ContextProvider.jsx<pre><code>import React, { useState } from \"react\";\nimport MyContext from \"./MyContext\";\n\nconst ContextProvider = ({ children }) =&gt; {\nconst [mailOriginState, setMailOriginState] = useState(\"\");\n\nconst updateMailOriginState = (newValue) =&gt; {\n    setMailOriginState(newValue);\n};\n\nreturn (\n    &lt;MyContext.Provider value={{ mailOriginState, updateMailOriginState }}&gt;\n    {children}\n    &lt;/MyContext.Provider&gt;\n);\n};\n\nexport default ContextProvider;\n</code></pre> MyContext.jsx<pre><code>import { createContext } from \"react\";\n\nconst MyContext = createContext();\n\nexport default MyContext;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#implmenting-context-provider-consumer","title":"Implmenting Context Provider &amp; Consumer","text":"<p>Add Provider <code>src/App.js</code></p> App.js<pre><code>import ContextProvider from \"context/ContextProvider\";\n\n&lt;ContextProvider&gt;\n  &lt;MainApp /&gt;\n&lt;/ContextProvider&gt;;\n</code></pre> <p>Consuming Context and updating value</p> <p>Updating the <code>context state</code></p> NavbarTender Navbar.js<pre><code>// `src/components/Navbar.js`\nimport React, {\n    forwardRef,\n    useEffect,\n    useRef,\n    useState,\n    // add this\n    useContext,\n} from \"react\";\n\n// context\nimport MyContext from \"context/MyContext\";\n\nconst Navbar = forwardRef(({ canGoBack, view }, ref) =&gt; {\n// add this\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n&lt;Link\n    to=\"/home\"\n    className={`icons__wrapper ${state.basePath === \"home\" ? \"active\" : \"\"}`}\n&gt;\n    &lt;div\n    onClick={() =&gt; {\n        updateMailOriginState(\"mailbox\");\n    }}\n    &gt;\n    &lt;img src={Mail} alt=\"\" /&gt;\n    &lt;span className=\"icons__wrapper--name\"&gt;MailBox&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Link&gt;;\n});\n</code></pre> index.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport MyContext from \"context/MyContext\";\n\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\nconst tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n    if (key === \"2\") {\n        tenderCommunication();\n        updateMailOriginState(\"communication\");\n    } else if (key === \"3\") {\n        tenderCommunication();\n        updateMailOriginState(\"companies\");\n    } else {\n        console.log(\"I'm other tab\");\n    }\n};\n\nreturn (\n    &lt;div&gt;\n        &lt;Tabs\n            className=\"global-tabs-wrapper tender-tabs-wrapper\"\n            defaultActiveKey=\"1\"\n            size=\"large\"\n            activeKey={selectedBusinessTabPaneKey}\n            // onChange={(key) =&gt; {\n            //   setBusinessTabPaneKey(key);\n            //   if (key === \"2\" || key === \"3\") {\n            //     let saveData = {\n            //       typeSystemName: \"Inbox\",\n            //       typeDisplayName: \"Inbox\",\n            //       // count: mailMessageCenterPagination.totalCount,\n            //       // icon: mailInbox,\n            //       // selectedMail: mailMessageCenterPagination.items[0],\n            //       // totalLength: currentSelectedMailIndex + 1,\n            //       currentTab: \"All\",\n            //       index: 0,\n            //     };\n            //     dispatch(selectedMailTypeAndMail(saveData));\n            //   }\n            // }}\n\n            // added this\n            onChange={handleTabChange}\n        &gt;\n\n            &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n            &lt;Communication\n                setChatHeight={setChatHeight}\n                searchEmailTender={searchEmailTender}\n                chatHeight={chatHeight}\n                height={height}\n                getDetails={getDetails}\n                selectedTenderRowId={selectedTenderRowId}\n                // add this\n                origin={mailOriginState}\n            /&gt;\n            &lt;/TabPane&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n)\n</code></pre> <p>Consuming the context state value</p> EmailListEmailListDetailsCommunication EmailList.js<pre><code>// src/views/Email/EmailList.js\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import context\nimport MyContext from \"context/MyContext\";\n\nconst EmailList = ({\n    // ... other, importants props are origin &amp; tenderSelectedRowId\n    origin,\n    tenderSelectedRowId,\n}) =&gt; {\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n    setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n};\n\nreturn (\n&lt;&gt;\n    {/* UPDATED */}\n    {showNoDataMessage ? (\n    &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        &lt;span&gt;No data&lt;/span&gt;\n        )}\n    &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {emailType === \"Business\" ||\n        (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n        mailMessageCenterPagination?.items?.length === 0) ? (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        )}\n    &lt;/&gt;\n    )}\n&lt;/&gt;\n);\n</code></pre> EmailListDetails.js<pre><code>// src/views/Email/EmailListDetails.js\nconst EmailListDetails = ({\n    hideMailListHeaderAndTabs,\n    height,\n    setChatHeight,\n    chatHeight,\n    searchEmailTender,\n    emailType,\n    Reference_SearchKeyword,\n    origin,\n    emailDetailCompany,\n    // added\n    tenderSelectedRowId,\n}) =&gt; {\nreturn (\n    &lt;div className=\"main__body\"&gt;\n    &lt;div className=\"organizer email\"&gt;\n        &lt;div style={{ display: \"flex\", flexFlow: \"row wrap\", width: \"100%\" }}&gt;\n        &lt;div className=\"emailList\"&gt;\n            &lt;EmailList\n            // others\n            // added\n            tenderSelectedRowId={tenderSelectedRowId}\n            /&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n);\n};\n</code></pre> Communication.js<pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/communication/Communication.js\nconst Communication = ({\n    setChatHeight,\n    chatHeight,\n    height,\n    searchEmailTender,\n    getDetails,\n    selectedTenderRowId,\n\n    // added\n    origin,\n}) =&gt; {\nreturn (\n    &lt;&gt;\n    {selectedTenderRowId &amp;&amp; (\n        &lt;EmailListDetails\n        // searchEmailTender={searchEmailTender}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        height={height}\n        emailType=\"Business\"\n        Reference_SearchKeyword={selectedTenderRowId}\n        //\n        // added\n        origin={origin}\n        tenderSelectedRowId={selectedTenderRowId}\n        /&gt;\n    )}\n    &lt;/&gt;\n);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/mail-tender-loader/#old-code-vs-new-code","title":"Old Code vs New Code","text":"New CodeOld Code EmailList.js<pre><code>// `src/views/Email/EmailList.js`\n// import useContext\nimport React, { useContext, useEffect, useState } from \"react\";\n\n// import your context\nimport MyContext from \"context/MyContext\";\n\n// passing props\ntenderSelectedRowId,\n\n// added consumer context STATE\nconst { mailOriginState, updateMailOriginState } = useContext(MyContext);\n\n// added by bishow\nuseEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n        setShowNoDataMessage(true);\n    }, 30000);\n    // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n    return () =&gt; {\n        clearTimeout(timer);\n        setShowNoDataMessage(false);\n    };\n}, [origin, tenderSelectedRowId]);\n\n// Updated the loder logic\n{\n    showNoDataMessage ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n            {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; &lt;span&gt;No data&lt;/span&gt;}\n        &lt;/div&gt;\n    ) : (\n    &lt;&gt;\n        {/* {emailType === \"Business\" ||\n                    selectedMailTypeAndMailData?.typeSystemName ===\"Inbox\" ? (\n                      &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n                    ) : null}\n        */}\n        {emailType === \"Business\" ||\n            (selectedMailTypeAndMailData?.typeSystemName === \"Inbox\" &amp;&amp;\n            mailMessageCenterPagination?.items?.length === 0) ? (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            ) : (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )\n        }\n    &lt;/&gt;\n    );\n}\n</code></pre> EmailList.js<pre><code>&lt;div\n    onClick={() =&gt; {\n        setShowSideMenuEmail(false);\n    }}\n&gt;\n    {emailType === \"Business\" ? (\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : selectedMailTypeAndMailData?.typeSystemName ===\n        \"Inbox\" ? (\n        // \"\"\n        //changed for No Data\n        // &lt;div className=\"no-data-wrapper\"&gt;\n        //   {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n        //     &lt;span&gt;No data&lt;/span&gt;\n        //   )}\n        // &lt;/div&gt;\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    ) : showNoDataMessage ? (\n        // &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n        &lt;div className=\"no-data-wrapper\"&gt;\n        {/* {mailMessageCenterPagination?.items?.length &lt; 0 &amp;&amp; ( */}\n        {mailMessageCenterPagination?.items?.length === 0 &amp;&amp; (\n            &lt;span&gt;No data&lt;/span&gt;\n        )}\n        &lt;/div&gt;\n    ) : (\n        &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n    )}\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/modes-of-communication/","title":"Mode of Communnication","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/modes-of-communication/#_1","title":"Mode of Communnication","text":"<p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> New CodeOld Code Companies.js<pre><code>// helper functions\nconst renderRadioWithRemarks = (value, label, remarksFieldName) =&gt; (\n    &lt;Radio key={value} value={value}&gt;\n    {label}\n    {valueRadioAddCompany === value &amp;&amp; (\n        &lt;Form.Item name={remarksFieldName}&gt;\n        &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n        &lt;/Form.Item&gt;\n    )}\n    &lt;/Radio&gt;\n);\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n    remarks:\n        valueRadioAddCompany === 1\n        ? \"Facebook\"\n        : valueRadioAddCompany === 2\n        ? \"Whatsapp\"\n        : valueRadioAddCompany === 3\n        ? \"Twitter\"\n        : valueRadioAddCompany === 4\n        ? // ? values?.companyAddRemarks\n            \"Other\"\n        : null,\n    };\n\n    const api2 = {\n        tenderBasicId: getDetails.id,\n        contactCompanyId: formCompanyId,\n        // remarks: remarksData?.remarks,\n        // added\n        remarks: values?.remarks,\n        ModeofCommunication: remarksData?.remarks,\n    };\n\n    // if (isCircular) {\n    //   dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n    // } else {\n    //   dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    // }\n    try {\n        if (isCircular) {\n            dispatch(actionForReferenceCircularPlanningAdd(api1, api2));\n        } else {\n            dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n        }\n    } catch (err) {\n        console.log(\"error\", err);\n    } finally {\n        addCompanyModelForm.resetFields();\n    }\n}\n\nreturn(\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n      &lt;Form.Item&gt;\n        &lt;Radio.Group\n          onChange={onChangeAddCompany}\n          value={valueRadioAddCompany}\n          name=\"addupdateremarks\"\n        &gt;\n          &lt;Space direction=\"vertical\"&gt;\n            {/*\n                {renderRadioWithRemarks(1, \"Facebook\", \"facebookRemarks\")}\n                {renderRadioWithRemarks(2, \"Whatsapp\", \"whatsappRemarks\")}\n                {renderRadioWithRemarks(3, \"Twitter\", \"twitterRemarks\")}\n                {renderRadioWithRemarks(4, \"More...\", \"companyAddRemarks\")}\n            */}\n\n            {renderRadioWithRemarks(1, \"Facebook\", \"remarks\")}\n            {renderRadioWithRemarks(2, \"Whatsapp\", \"remarks\")}\n            {renderRadioWithRemarks(3, \"Twitter\", \"remarks\")}\n            {renderRadioWithRemarks(4, \"Other\", \"remarks\")}\n          &lt;/Space&gt;\n        &lt;/Radio.Group&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre> Companies.js<pre><code>return (\n    &lt;Form form={addCompanyModelForm} onFinish={onFinishAddCompany}&gt;\n        &lt;Form.Item&gt;\n            &lt;Radio.Group\n                onChange={onChangeAddCompany}\n                value={valueRadioAddCompany}\n                name=\"addupdateremarks\"\n            &gt;\n                &lt;Space direction=\"vertical\"&gt;\n                    &lt;Radio value={1}&gt;\n                        Facebook\n                        &lt;&gt;\n                            {valueRadioAddCompany === 1 ? (\n                            &lt;Form.Item name=\"facebookRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={2}&gt;\n                        Whatsapp\n                        &lt;&gt;\n                            {valueRadioAddCompany === 2 ? (\n                            &lt;Form.Item name=\"whatsappRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={3}&gt;\n                        Twitter\n                        &lt;&gt;\n                            {valueRadioAddCompany === 3 ? (\n                            &lt;Form.Item name=\"twitterRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/&gt;\n                    &lt;/Radio&gt;\n                    &lt;Radio value={4}&gt;\n                        More...\n                        &lt;p&gt;\n                            {valueRadioAddCompany === 4 ? (\n                            &lt;Form.Item name=\"companyAddRemarks\"&gt;\n                                &lt;Input.TextArea rows={4} placeholder=\"Remarks\" /&gt;\n                            &lt;/Form.Item&gt;\n                            ) : null}\n                        &lt;/p&gt;\n                    &lt;/Radio&gt;\n                &lt;/Space&gt;\n            &lt;/Radio.Group&gt;\n        &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/re-sent-outbox-mail/","title":"Re-sent & Reset Mail in Outbox","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/re-sent-outbox-mail/#re-sent-mail-outbox","title":"Re-sent Mail outbox","text":"MailMessageCenterHeader.js<pre><code>// line-number: 1025\n\n{/* added */}\n{selectedMailTypeAndMailData?.typeSystemName === OUTBOX &amp;&amp; (\n    &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n        multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n        \"disabled\"\n        } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n        if (currentSelectedMailMessage?.id) {\n            dispatch(resetOutboxMailFailureCount(currentSelectedMailMessage?.id))\n        }\n        }}\n    &gt;\n        &lt;Image src={trash} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n        Resend\n        &lt;/p&gt;\n    &lt;/div&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/","title":"Multiple API Action","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#hitting-both-api-at-once","title":"Hitting both api at once","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#actions","title":"ACTIONS","text":"<p>ACTION: <code>services/redux/Reference/action.js</code></p> <p>Line number: <code>180</code></p> action.js<pre><code>// add company and remarks both\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n        const response = await referencesService.ReferenceCompanyManualAdd(data1);\n        dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n\n        if (response.isSuccess) {\n          message.success(\"Successfully updated company\");\n          dispatch(\n              success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n          );\n          // added here\n          await dispatch(referencePartyRemarksHistoryAdd(data2));\n        } else if (!response.isSuccess) {\n          dispatch(error(response.errorMessage));\n        }\n    };\n};\n\n// ReferencePartyRemarksHistoryAdd\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n    return async (dispatch) =&gt; {\n      dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      const response = await referencesService.referencePartyRemarksHistoryAdd(\n        apiData\n      );\n      dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n      if (response.isSuccess) {\n        message.success(\"Successfully added Remarks\");\n        dispatch(\n          success(\n            REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n            response.data\n          )\n        );\n      } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n      }\n    };\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-actions/#reducer","title":"REDUCER","text":"<pre><code>// Line number: 298\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD_SUCCESS:\n  const lastParty =\n    state.referencePartyListingResponse[\n      state.referencePartyListingResponse.length - 1\n    ];\n\n  const updatedLastParty = {\n    ...lastParty,\n    remarks: action.payload?.remarks,\n  };\n\n  const updatedPartyListingResponse = [\n    ...state.referencePartyListingResponse.slice(0, -1),\n    updatedLastParty,\n  ];\n\n  return {\n    ...state,\n    referencePartyHistoryAddResponse: action.payload,\n    referencePartyHistoryAddLoading: false,\n    referencePartyRemarksHistoryListingResponse: [\n      // ...state.referencePartyRemarksHistoryListingResponse,\n      ...state.referencePartyListingResponse,\n      action.payload,\n    ],\n    referencePartyListingResponse: updatedPartyListingResponse,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/redux-add-upate/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/clickup/2024/allOldClickups/redux-add-upate/#reducer","title":"REDUCER","text":"<p><code>services/redux/admin/Tutorial/reducer</code></p> <p>line number: <code>73</code></p> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n  return {\n    ...state,\n    updateTutorialLoading: true,\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n      ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n          return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n          return {\n            ...item,\n          };\n        }\n      })\n      .filter((item) =&gt; item !== null)\n      .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n  };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n  return {\n    ...state,\n    updateTutorialLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/tender-mail-circular/","title":"Circular Planning list to be shared to Message","text":"<p>git diff --name-only</p> <pre><code>src/services/redux/instanceChat/action.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n</code></pre> CompaniesActionComponents Companies.js<pre><code>import CircularMail from \"components/internalMNew/CircularMail\";\n\nconst Companies = ({\n   //..\n}) =&gt; {\n    return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Send Circular Planning\"\n                visible={isCircularModalOpen}\n                onCancel={handleCircularModal}\n                footer={null}\n            &gt;\n                {/* ADDED */}\n                &lt;CircularMail\n                    setInternalVisible={setIsCircularModalOpen}\n                    form={form}\n                    origin=\"Circular Planning\"\n                    applicationId={getDetails?.referenceId}\n                    module=\"Circular_Planning\"\n                /&gt;\n            &lt;/Modal&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>export const instanceChatAdd = (body, isDashbord, setOpenNewMessage) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        const response = await instanceMessageChatServices.instanceChatAdd(body);\n        dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT));\n        if (response.isSuccess) {\n        dispatch(\n            success(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT, response.data)\n        );\n        message.success(\"Message sent successfull\");\n        // added\n        setOpenNewMessage &amp;&amp; setOpenNewMessage(false);\n        if (isDashbord) {\n            setOpenNewMessage(false);\n        }\n\n        // setNewId();\n        //amit commet setNewId()\n        // setNewId();\n        // dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_MESSAGE_CHAT))\n        } else if (!response.isSuccess) {\n        dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> CircularMail.js<pre><code>// src/components/internalMNew/CircularMail.js\n\nimport { instanceChatAdd } from \"services/redux/instanceChat/action\";\nimport { messageApplicationTypeListing } from \"services/remanentCalls\";\n\nexport default function CircularMail(props) {\n    const { form, setInternalVisible, origin, applicationId, module } = props;\n\n    const [applicationType, setApplicationType] = useState();\n\n    // added\n    const applicationTypeListing = async () =&gt; {\n        try {\n        const resp = await messageApplicationTypeListing();\n        if (resp &amp;&amp; resp.status == 200) {\n            resp?.data?.map((type) =&gt; {\n                if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n                    setApplicationType(type.id);\n                } else if (\n                    module === \"Circular_Planning\" &amp;&amp;\n                    type.displayName === \"CircularPlanning\"\n                ) {\n                    setApplicationType(type.id);\n                }\n            });\n        }\n        } catch (error) {\n            message.error(\"Failure\");\n        }\n    };\n\n    useEffect(() =&gt; {\n        if (isEmpty(userListing)) {\n            fetchUserListing();\n        }\n        // added\n        applicationTypeListing();\n    }, []);\n\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n        // isQuickMessage: true,\n        // added\n        applicationId: applicationId,\n        applicationTypeId: applicationType,\n        instanceMessageAttachmentDtos: uploadedFileDtos,\n        instanceMessageStatusName: \"Normal\",\n        mailMessageParticipantWithTypeDtos: {\n            participantTos: tos,\n            participantCCs: ccs,\n        },\n        messageText: messageText,\n        remarks: internalEditorData,\n        mailMessageReferenceDtos: referenceFields?.map((x) =&gt; {\n            return {\n            referenceCode: x,\n            };\n        }),\n        };\n        let isDashbord = false;\n        if (formType !== \"newCutting\") {\n        // dispatch(quickEmailAddEmailSection(body, setInternalVisible));\n        // NEW\n        dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n        } else {\n        }\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/allOldClickups/tender-mail/","title":"Tender Mail","text":"<p><code>views/OfficeResource/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// added\n\nconst [mailOrigin, setMailOrigin] = useState(\"\");\n\nconst tenderCommunication = () =&gt; {\n  let saveData = {\n    typeSystemName: \"Inbox\",\n    typeDisplayName: \"Inbox\",\n    currentTab: \"All\",\n    index: 0,\n  };\n  dispatch(selectedMailTypeAndMail(saveData));\n};\n\nconst handleTabChange = (key) =&gt; {\n  setBusinessTabPaneKey(key);\n  if (key === \"2\") {\n    tenderCommunication();\n    setMailOrigin(\"communication\");\n  } else if (key === \"3\") {\n    tenderCommunication();\n    setMailOrigin(\"companies\");\n  } else {\n    console.log(\"I'm other tab\");\n    setMailOrigin(null);\n  }\n};\n\n&lt;Tabs\n  className=\"global-tabs-wrapper tender-tabs-wrapper\"\n  defaultActiveKey=\"1\"\n  size=\"large\"\n  activeKey={selectedBusinessTabPaneKey}\n  // onChange={(key) =&gt; {\n  //   setBusinessTabPaneKey(key);\n  //   if (key === \"2\" || key === \"3\") {\n  //     let saveData = {\n  //       typeSystemName: \"Inbox\",\n  //       typeDisplayName: \"Inbox\",\n  //       // count: mailMessageCenterPagination.totalCount,\n  //       // icon: mailInbox,\n  //       // selectedMail: mailMessageCenterPagination.items[0],\n  //       // totalLength: currentSelectedMailIndex + 1,\n  //       currentTab: \"All\",\n  //       index: 0,\n  //     };\n  //     dispatch(selectedMailTypeAndMail(saveData));\n  //   }\n  // }}\n  onChange={handleTabChange}\n&gt;\n  &lt;TabPane tab=\"Communication\" key=\"2\"&gt;\n    &lt;Communication\n      setChatHeight={setChatHeight}\n      searchEmailTender={searchEmailTender}\n      chatHeight={chatHeight}\n      height={height}\n      getDetails={getDetails}\n      // added\n      selectedTenderRowId={selectedTenderRowId}\n      origin={mailOrigin}\n    /&gt;\n  &lt;/TabPane&gt;\n&lt;/Tabs&gt;;\n</code></pre> <p><code>views/Email/EmailList.js</code></p> EmailList.js<pre><code>// added by bishow\n\nuseEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    console.log(\"----------------------------------------- CALLED\");\n    setShowNoDataMessage(true);\n  }, 30000);\n  // wait for 30 seconds to arrive data, while waiting display the skeleton\n\n  return () =&gt; {\n    clearTimeout(timer);\n    setShowNoDataMessage(false);\n  };\n}, [origin, tenderSelectedRowId]);\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/circular-planning-highlight-person-contact-list/","title":"Circularplanning Highlighted contact list","text":"<pre><code>git diff --name-only\n\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\n</code></pre> <pre><code>// src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nconst Companies = ({\n    ...\n    // added\n    selectedCompanyAttentionToIds,\n}) =&gt; {\n\n    const cols = [\n        ...\n        {\n            title: \"Person Name\",\n            key: \"personFullName\",\n            render: (record) =&gt; {\n                // return record.personFullName == \" \"\n                //   ? \"No Person\"\n                //   : record.personFullName;\n                const isAttention = selectedCompanyAttentionToIds.includes(record?.contactPersonId);\n\n                return (\n                &lt;span style={{ color: isAttention ? 'red' : 'inherit' }}&gt;\n                    {record.personFullName || \"No Person\"}\n                &lt;/span&gt;\n                );\n            },\n        },\n        ...\n    ]\n}\n</code></pre> <pre><code>//  src/views/OfficeResource/Reference/Tabs/TenderTabs/index.js\nconst Tender = ({\n        ...\n    }) =&gt; {\n\n    // added\n    const [selectedCompanyAttentionToIds, setSelectedCompanyAttentionToIds] = useState([]);\n\n    const rowEventhandlerscompany = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                // added\n                let attentionTo = JSON.parse(record?.attentionTo);\n                if(!isEmpty(attentionTo)) {\n                    let id = attentionTo?.map((item) =&gt; item?.AttentionId);\n                    setSelectedCompanyAttentionToIds(id)\n                }\n            },\n        };\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;Tabs\n                className=\"global-tabs-wrapper tender-tabs-wrapper\"\n                defaultActiveKey=\"1\"\n                size=\"large\"\n                activeKey={selectedBusinessTabPaneKey}\n                onChange={handleTabChange}\n            &gt;\n                &lt;TabPane\n                    tab=\"Circular Planning\"\n                    key=\"7\"\n                    className={`summary-wrapper ${showChat &amp;&amp; \"chatOpen\"}`}\n                &gt;\n                &lt;Companies\n                    getDetails={getDetails}\n                    searchEmailTender={searchEmailTender}\n                    rowEventhandlers={rowEventhandlerscompany}\n                    companyId={contactCompanyId}\n                    emailReferenceId={emailReferenceId}\n                    selectedTenderRowId={selectedTenderRowId}\n                    isCircular={isCircularTabStatus}\n                    selectedBusinessTabPaneKey={selectedBusinessTabPaneKey}\n                    // added\n                    selectedCompanyAttentionToIds={selectedCompanyAttentionToIds}\n                /&gt;\n                &lt;/TabPane&gt;\n            &lt;/Tabs&gt;\n        &lt;/div&gt;\n    );\n}\n\n\nexport default Tender;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/","title":"Dashboard Daily Diary Sorting: Task Edit and Internal Message","text":"<p>Dashboard Daily Dairy Table Sorting in Title, Ref, Created date</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#solved","title":"Solved","text":"_dashboard.css<pre><code>.dashboard_task-daily .ant-table-column-sorters, \n.dashboard_task-daily &gt; .ant-table-column-sorters-with-tooltip &gt; .ant-table-column-sorters &gt; span:first-child  {\n  width: 100%;\n}\n</code></pre> todolist.js<pre><code>const columns = [\n    ...\n    {\n        // title: \"Tasks\",\n        title: \n            (\n                &lt;div\n\n                    style={{ \n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                        width: \"100%\",  \n                    }}\n                &gt;\n                    &lt;span\n                        style={{\n                            width: \"100%\",\n                            textAlign: \"left\"\n                        }}\n                    &gt;Tasks&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"tasks\",\n            width: \"40%\",\n            // added\n            fixed: \"left\",\n            // sorter: true,\n            sorter: (a, b) =&gt; a.subject.localeCompare(b.subject),\n            ...\n    },\n    {\n        title: \n            (\n                &lt;div\n\n                style={{ \n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    width: \"100%\",  \n                }}\n                &gt;\n                &lt;span\n                    style={{\n                    width: \"100%\",\n                    textAlign: \"left\"\n                    }}\n                &gt;Ref&lt;/span&gt;\n                &lt;/div&gt;\n            ),\n            className: \"dashboard_task-daily\",\n            key: \"red\",\n            width: \"10%\",\n            // added\n            sorter: (a, b) =&gt; a.referenceCode.localeCompare(b.referenceCode),\n            ...\n    },\n    {\n      title: \n        (\n            &lt;div\n\n            style={{ \n                display: \"flex\",\n                justifyContent: \"space-between\",\n                width: \"100%\",  \n            }}\n            &gt;\n            &lt;span\n                style={{\n                width: \"100%\",\n                textAlign: \"left\"\n                }}\n            &gt;Created Date&lt;/span&gt;\n            &lt;/div&gt;\n        ),\n        // added\n        className: \"dashboard_task-daily\",\n        key: \"created\",\n        width: \"15%\",\n        // added\n        sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)),\n        ...\n    }\n]\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#example","title":"Example","text":""},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-date","title":"Using <code>Date</code>","text":"<pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; new Date(a.creationTime) - new Date(b.creationTime), // Custom sorter for creationTime\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>sorter: (a, b): This defines a custom sorting function for the creationTime. The function compares two values (<code>a</code> and <code>b</code>) based on the <code>creationTime</code>.</li> <li>new Date(a.creationTime) and new Date(b.creationTime):     The Date object converts the string <code>creationTime</code> into a JavaScript Date.     Subtracting one date from another returns the difference in milliseconds, which the sorter uses to determine the order.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-daily-task-table-sorting/#using-moment","title":"Using <code>moment</code>","text":"<p>Yes, you can use <code>Moment.js</code> to handle date parsing and comparison for sorting the <code>creationTime</code>. <code>Moment.js</code> provides a convenient way to handle dates, especially for formatting and parsing.</p> <pre><code>{\n  title: (\n    &lt;div className=\"dashboard_task-daily\"&gt;\n      &lt;span style={{ textAlign: \"left\", width: \"100%\" }}&gt;Tasks&lt;/span&gt;\n    &lt;/div&gt;\n  ),\n  key: \"tasks\",\n  width: \"40%\",\n  fixed: \"left\",\n  sorter: (a, b) =&gt; moment(a.creationTime).diff(moment(b.creationTime)), // Custom sorter using Moment.js\n  render: (record) =&gt; {\n    return (\n      &lt;div style={{ display: \"flex\", alignItems: \"center\" }}&gt;\n        {/* Your render content */}\n      &lt;/div&gt;\n    );\n  },\n}\n</code></pre> Explanation: <ul> <li>moment(a.creationTime): This converts the <code>creationTime</code> into a Moment.js object.</li> <li>moment(a.creationTime).diff(moment(b.creationTime)):<ul> <li>The <code>.diff()</code> method compares the two dates and returns the difference in milliseconds.</li> <li>The <code>sorter</code> will use this difference to order the rows.</li> </ul> </li> </ul> Why Use Moment.js? <ul> <li>Flexibility: Moment.js provides more robust parsing, particularly when handling various date formats.</li> <li>Accuracy: It handles time zones and more advanced date operations if needed, which can be useful if your dates have additional complexity.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/","title":"Scrollable Issue and Flip","text":"<p>Tender list is not scrollable in tablet view after tab is changed</p> <p><code>Tender/Projects</code> in the Dashboard</p> _dasboard.scss<pre><code>/* page-num: 604 */\n\n.flip-card-front,\n.flip-card-back {\n  /* ISSUE position */\n  /* position: absolute; */\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n}\n</code></pre> <p>This generates new bug in the <code>Today's Appointments</code> dashboard which is scrollable.</p> <p><code>Today's Appointments</code> inline <code>flip-card</code> remove the <code>overflow property</code></p> event.js<pre><code>// line-num: 123\n\nreturn (\n    &lt;div\n      class=\"flip-card\"\n      style={\n        type === \"public\"\n            //   ? { height: \"340px\", overflow: \"auto\" }\n            //   : { height: \"363px\", overflow: \"auto\" }\n            ? { height: \"340px\" }\n            : { height: \"363px\" }\n      }\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#card-flip-issue","title":"Card Flip Issue","text":"tenders.js<pre><code>const [isFlipped, setIsFlipped] = useState(false);\n\nconst TenderLists = ({ classNames }) =&gt; {\n  return (\n    &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n      &lt;div\n        class=\"flip-card-inner\"\n        style={{ transform: `rotateY(${rotate * 180}deg)` }}\n      &gt;\n        &lt;div className=\"flip-card-front\"&gt;&lt;/div&gt;\n        &lt;div className=\"flip-card-back\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre> <pre><code>// Tenders/Projects\n&lt;h4 className=\"dashboards__body--title\"&gt;\n    {/* {tenderHistory\n        ? \"Tenders\"\n        : tenderFourth\n        ? \"Tenders\"\n        : \"Tenders\"} */}\n    Tenders/Projects\n    &lt;span\n        onClick={() =&gt; {\n            // setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n    &gt;\n        &lt;img\n        src=\"./assets/svg/toggle-arrow.svg\"\n        height={15}\n        alt=\"complete\"\n        /&gt;\n    &lt;/span&gt;\n&lt;/h4&gt;\n\n\n// Projects/Tenders\n &lt;div className=\"dashboards__bodyWrap\"&gt;\n    &lt;h4 className=\"dashboards__body--title\"&gt;\n        Projects/Tenders\n        &lt;span\n        onClick={() =&gt; {\n            setRotate(rotate + 1);\n            setIsFlipped(!isFlipped);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n        &gt;\n        &lt;img\n            src=\"./assets/svg/toggle-arrow.svg\"\n            height={15}\n            alt=\"complete\"\n        /&gt;\n        &lt;/span&gt;\n    &lt;/h4&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#new","title":"NEW","text":"_dashboard.scss<pre><code>/* _dashboard.scss:1158 */\n\n@media only screen and (max-width: 1462px) {\n  .tour2 {\n    /* comment this */\n    /* height: 530px !important; */\n  }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#finally-solve-it","title":"Finally Solve it","text":"tenders.jsflip-card-frontflip-card-back <pre><code>const TenderLists = ({ classNames }) =&gt; {\n// added\nconst [isFlippedBack, setIsFlippedBack] = useState(false);\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                className=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n                &lt;div className=\"flip-card-front\"&gt;\n                    {/* UPDATED */}\n                &lt;/div&gt;\n\n                &lt;div className=\"flip-card-back\"&gt;\n                    {/* UPDATED */}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre> <pre><code>&lt;div className=\"flip-card-front\"&gt;\n    &lt;span\n        onClick={() =&gt; {\n            setRotate(rotate + 1);\n            // added\n            setIsFlippedBack((prev) =&gt; !prev);\n        }}\n        style={{\n            marginLeft: \"10px\",\n            height: \"30px\",\n            marginBottom: \"10px\",\n        }}\n    &gt;&lt;/span&gt;\n\n    &lt;ul\n        className=\"dashboards__todolists\"\n        // added\n        style={{\n            position: !isFlippedBack ? \"relative\" : \"static\",\n            zIndex: !isFlippedBack ? 2 : \"auto\",\n        }}\n    &gt;&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>&lt;div className=\"flip-card-back\"&gt;\n    &lt;div\n        style={{\n            backfaceVisibility: \"hidden\",\n        }}\n    &gt;\n        {/* ADDED */}\n        &lt;span\n            onClick={() =&gt; {\n                setRotate(rotate + 1);\n                // added\n                setIsFlippedBack((prev) =&gt; !prev);\n            }}\n            style={{\n                marginLeft: \"10px\",\n                height: \"30px\",\n                marginBottom: \"10px\",\n            }}\n        &gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#what-is-the-main-reason-that-is-blocking-scrolling","title":"What is the main reason that is blocking scrolling","text":"<p>The main reasons that can block scrolling on a webpage include:</p>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#1-css-properties","title":"1. CSS Properties:","text":"<ul> <li>Setting <code>overflow: hidden;</code> on the body or a container element will prevent scrolling.</li> <li><code>position: fixed; or position: absolute;</code> can lock the scroll position, especially when applied to body or html elements.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#2-modal-or-overlay-components","title":"2. Modal or Overlay Components:","text":"<ul> <li>Many libraries (like Ant Design, Bootstrap, etc.) often disable background scrolling when a modal, drawer, or overlay is open by modifying the body\u2019s scroll behavior.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#3-javascript-interference","title":"3. JavaScript Interference:","text":"<ul> <li>Adding event listeners to block default scrolling behavior, such as using <code>e.preventDefault()</code> in a <code>wheel</code> or <code>touchmove</code> event.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#4-browser-specific-issues","title":"4. Browser-Specific Issues:","text":"<ul> <li>Certain browser settings or extensions may impact scrolling functionality.</li> </ul>"},{"location":"office/ispl/clickup/2024/august/dashboard-tender-scrollable-issue-in-tablet-view/#5-viewport-meta-tags","title":"5. Viewport Meta Tags:","text":"<ul> <li>On mobile, incorrect settings for viewport (e.g., <code>user-scalable=no</code>) can interfere with scrolling.</li> </ul> <p>Checking these areas can help you resolve scrolling issues in your application. Would you like to check the code to identify the specific cause?</p>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/","title":"isCircular conditional rendering","text":""},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#conditionally-rendering-iscircular-using-logical-and","title":"Conditionally Rendering <code>isCircular</code> using <code>Logical AND</code>","text":"<p>Remove Template and Send for Approval from Tender Company Tab its only needed in Circular Planing</p> companies.js <p><code>OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> <pre><code>// 1278\n{isCircular &amp;&amp; (\n&lt;&gt;\n    &lt;div style={{ display: \"flex\" }}&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; {\n        {\n        setIsTemplateModalOpen(true)\n        };\n        dispatch(actionForGetAllCircularPlanningTemplate())\n    }\n    } style={{ marginRight: \"8px\" }}&gt;\n        Template\n    &lt;/Button&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n        Send for Approval\n    &lt;/Button&gt;\n    &lt;/div&gt;\n&lt;/&gt;)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/isCircular-conditionaly-rendering/#lifting-the-state-up","title":"Lifting the state up","text":"<p><code>OfficeResource/Reference/Tabs/TenderTabs/index.js</code></p> <pre><code>const Tender = ({})\n\nconst [isCircularTabStatus, setIsCircularTabStatus] = useState(false);\n\n\n// 149\nconst handleTabChange = (key) =&gt; {\n    setBusinessTabPaneKey(key);\n\n    if (key === \"2\") {\n      tenderCommunication();\n      updateMailOriginState(\"communication\");\n      setIsCircularTabStatus(false);\n    } else if (key === \"3\") {\n      tenderCommunication();\n      updateMailOriginState(\"companies\");\n    } else if(key === \"7\") {\n      setIsCircularTabStatus(true);\n    }\n    else {\n      // console.log(\"I'm other tab\");\n      setIsCircularTabStatus(false);\n    }\n  };\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/","title":"RegExp Validation in Mail","text":""},{"location":"office/ispl/clickup/2024/august/reg-validation-in-mail/#regex-validation-in-mail","title":"Regex validation in Mail","text":"<p>There is error while sending email with \" double quote in the email address.</p> ComposeEmailDrawer.js <pre><code>// pg: 812\n// const reg = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n// solved\nconst reg = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/","title":"Conditionally Showing Button","text":""},{"location":"office/ispl/clickup/2024/august/showing-button-on-condition/#showing-button-on-condition","title":"Showing Button on Condition","text":"<p>Save button display on yesterdays and todays date only for now and other edit buttons keep as it is for now.</p> <p>Solved</p> ParentChildren <pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const [selectedAdvancedSearchDate, setSelectedAdvancedSearchDate] = useState(moment().format('YYYY-MM-DD'));\n\n    const onAdvanSearchFinish = (values) =&gt; {\n        ...\n        setSelectedAdvancedSearchDate(selectedDate)\n        ...\n    }\n\n    const handleResetAdvancedSearch = () =&gt; {\n        ...\n        let todayDate = moment().format('YYYY-MM-DD');\n        setSelectedAdvancedSearchDate(todayDate);\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"dashboards__body--main\"&gt;\n                &lt;DailyDairy\n                ...\n                selectedAdvancedSearchDate={selectedAdvancedSearchDate}\n                setSelectedAdvancedSearchDate={setSelectedAdvancedSearchDate}\n                /&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <p><code>Home/DashboardComponents/MainDashboard/DailyDairy/index.jsx</code></p> <pre><code>function DailyDairy (props) {\n\n    let {\n        data,\n        loading,\n        setSelectedRecordData,\n        setIsDailyDairyModalOpen,\n        showResetButton,\n        // added\n        selectedAdvancedSearchDate,\n        setSelectedAdvancedSearchDate,\n    } = props;\n\n\n    // added\n    const today = moment().format('YYYY-MM-DD');\n    const yesterday = moment().subtract(1, 'day').format('YYYY-MM-DD');\n\n    const isValidDate = (date) =&gt; {\n        console.log(\"Date params: \", date);\n        return date === today || date === yesterday;\n    };\n    const isDateValid = selectedAdvancedSearchDate === today || selectedAdvancedSearchDate === yesterday;\n\n\n    return (\n        &lt;&gt;\n            {/* added  isDateValid */}\n            {isDateValid &amp;&amp; (\n                &lt;Content\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"end\",\n                        paddingTop: \"8px\",\n                    }}\n                &gt;\n                    {/* {!loading &amp;&amp; data != null &amp;&amp; !showResetButton &amp;&amp; !isEmpty(data.items) &amp;&amp; ( */}\n                    {!loading &amp;&amp; data != null  &amp;&amp; !isEmpty(data.items) &amp;&amp; (\n                        &lt;Button\n                            type=\"primary\"\n                            onClick={handleTodaySaveDiary}\n                            style={{\n                                padding: \"0px 10px\"\n                            }}\n                        &gt;\n                            Save\n                        &lt;/Button&gt;\n                    )}\n                &lt;/Content&gt;\n            )}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/august/tender-module-task-edit-and-im/","title":"Tender Module: Task Edit and Internal Message","text":"<p>In Tender Section : Task Section there is no edit and Message Section .</p> TodoList.js<pre><code>const ToDoLists = (props) =&gt; {\n    // added\n    const [showUpdateTask, setShowUpdateTask] = useState(false);\n    const [updateTaskRecord, setUpdateTaskRecord] = useState(false);\n\n    // setShowUpdateTask, setUpdateTaskRecord\n    const columns = getTodoColumns({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord });\n\n\n    // added\n    useEffect(() =&gt; {\n        if(showUpdateTask) {\n        console.log(\"true\")\n        // console.log(\"updateTaskRecord: \", updateTaskRecord)\n        form.setFieldsValue({\n            subject: updateTaskRecord?.subject,\n            // referenceId: updateTaskRecord,\n            // dueDate: updateTaskRecord,\n            // organizerEventPriorityId: updateTaskRecord,\n            // todoEventStatusId: updateTaskRecord,\n        })\n        } else {\n            // console.log(\"false\")\n            form.resetFields()\n        }\n    }, [showUpdateTask])\n\n    return (\n    &lt;&gt;\n      &lt;div&gt;\n        &lt;Table\n          columns={columns}\n          // rowKey=\"appUserId\"\n          rowKey={(record) =&gt; record.id}\n          // rowClassName={setTaskClassName}\n          className={`organizer__table contact-table task-table toto-table`}\n          dataSource={dataSource}\n          loading={{\n            indicator: (\n              &lt;img src={LogoImage} height=\"auto\" width=\"50px\" alt=\"logo\" /&gt;\n            ),\n            spinning: todoEventsLoading,\n          }}\n          pagination={false}\n        /&gt;\n\n\n        {(showAddTask || showUpdateTask) &amp;&amp; (\n          &lt;Form\n            form={form}\n            name=\"basic\"\n            initialValues={{\n              remember: true,\n            }}\n            layout=\"inline\"\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            // initialValues={worker}\n            className=\"task__form \"\n          &gt;\n            &lt;div className=\"add-task-form-item\"&gt;\n              &lt;Form.Item\n                className=\"task-form-item\"\n                name=\"subject\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"  \",\n                  },\n                ]}\n              &gt;\n                &lt;Input\n                  placeholder=\"Please enter subject\"\n                  bordered={false}\n                  autoFocus={true}\n                /&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n            &lt;div className=\"add-task-form-item add-update-task-wrapper\"&gt;\n              &lt;Form.Item className=\"task-form-item task-action-wrapper task-action-right\"&gt;\n                &lt;Button\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CheckOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n              &lt;Form.Item className=\"task-form-item task-action-cross\"&gt;\n                &lt;Button\n                  type=\"dotted\"\n                  onClick={() =&gt; {\n                    // setShowAddTask(!showAddTask);\n                    setShowAddTask(false);\n                    setShowUpdateTask(false);\n                  }}\n                  bordered={false}\n                  shape=\"round\"\n                  size=\"small\"\n                &gt;\n                  &lt;CloseOutlined /&gt;\n                &lt;/Button&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n          &lt;/Form&gt;\n        )}\n\n\n\n\n        {showAddTask ? (\n          \"\"\n        ) : (\n          &lt;Button\n            onClick={() =&gt; {\n              handleAddTask();\n              setShowUpdateTask(false);\n              form.resetFields();\n            }}\n            type=\"text\"\n            size=\"small\"\n          &gt;\n            &lt;span style={{ fontSize: 14 }}&gt; + Add Task&lt;/span&gt;\n          &lt;/Button&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> TodoColumns.js<pre><code>// added\n// setShowUpdateTask, setUpdateTaskRecord\nconst getTodoColumns = ({ hideButton, todoEventsLoading, token, setShowAddTask, setShowUpdateTask, setUpdateTaskRecord }) =&gt; {\nconst dispatch = useDispatch;\n  return [\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (record) =&gt; {\n        return (&lt;&gt;\n            &lt;EditTwoTone \n              onClick={() =&gt; {\n                setShowUpdateTask(true);\n                setShowAddTask(false);\n                setUpdateTaskRecord(record);\n              }}\n            /&gt;\n        &lt;/&gt;)\n      }\n    }\n  ];\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/","title":"Added Properties in Circular Mail","text":""},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/#overview","title":"Overview","text":"<p>Added IsCircularPlanning and CircularPlanningReferenceId properties while sending circular mail from tender module</p> TICKET ISSUE <p><code>#86eqr1jgz [in review] Added IsCircularPlanning and CircularPlanningReferenceId properties while sending circular mail from tender module</code></p> ComposeEmailDrawer.jsx<pre><code>const onFinish = async (centerTypeSystemName, isClose) =&gt; {\n    if () {\n\n    } else {\n      try {\n        let body = {\n          body: bodyData,\n           /* Added */\n          ...(applicationTypeStatus === \"tenderModule\" &amp;&amp; {\n            IsCircularPlanning: true,\n            CircularPlanningReferenceId:\n              persistTenderMailDataResp?.refCode?.[0]?.id || null,\n          }),\n        }\n      }\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/14-tender-mail-added-refID/#donot-close-window-after-sending-mail","title":"DONOT CLOSE WINDOW AFTER SENDING MAIL","text":"<pre><code>useEffect(() =&gt; {\n  if (!isEmpty(composeEmailResp) &amp;&amp; closeWindow === \"newEmail\") {\n    setTimeout(() =&gt; {\n      // COMMENT THIS\n      //   window.close();\n      //   window.location.reload();\n    }, 1000);\n  }\n}, [composeEmailResp, closeWindow]);\n\nuseEffect(() =&gt; {\n  if (!isEmpty(composeCircularEmailResp)) {\n    // COMMENT THIS\n    // window.close();\n  }\n}, [composeCircularEmailResp]);\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/23-subsector-tendermodule/","title":"Sub Sector in tender Mail","text":"<p>Need to Add Sub Sector in Tender Section</p> <pre><code>src/services/redux/officeresource/business/action.js\nsrc/services/redux/officeresource/business/api.js\nsrc/services/redux/officeresource/business/reducer.js\nsrc/services/types.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/information/Summary.js\n</code></pre> Summary.jstypes.js <pre><code>import {\n    // added\n    getSubSectors,\n} from \"services/redux/officeresource/business/action\";\n\nconst [sectors, setSectors] = useState([]);\n// added\nconst [subSectors, setSubSectors] = useState([]);\nconst [selectedSectorsId, setSelectedSectorsId] = useState(\"\");\n\n\nconst handleSectorsCategory = (values, option) =&gt; {\n    setSelectedSectorsId(values);\n};\n\n// subsectors\nconst debouncedDispatchSectors = useCallback(\n    debounce((categoryId) =&gt; {\n        dispatch(getSubSectors({ subSector: categoryId }));\n    }, 500),\n    [dispatch]\n);\n\nuseEffect(() =&gt; {\n    if (!selectedSectorsId) return;\n\n    debouncedDispatchSectors(selectedSectorsId);\n}, [selectedSectorsId, debouncedDispatchSectors]);\n// endhere\n\nuseEffect(() =&gt; {\n    if (!isEmpty(subSectorsListingResponse)) {\n        setSubSectors(subSectorsListingResponse);\n    } else {\n        setSubSectors([]);\n    }\n}, [subSectorsListingResponse]);\n\n\nuseEffect(() =&gt; {\n    if (isEmpty(getDetails)) {\n        form.resetFields();\n        return;\n    } else {\n        setSelectedCategoryId(getDetails?.tenderTypeId);\n        // added\n        setSelectedSectorsId(getDetails?.sectorId);\n    }}\n)\n\n\nreturn (\n    &lt;&gt;\n        &lt;div className=\"global-form-group calc\"&gt;\n            &lt;div className=\"global-form-label\"&gt;\n              &lt;label&gt;\n                Sector&lt;span className=\"red-star\"&gt;*&lt;/span&gt;\n              &lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n              &lt;Form.Item\n                name=\"sectorId\"\n                rules={[\n                  {\n                    required: true,\n                    message: \"\",\n                  },\n                ]}\n              &gt;\n                &lt;Select\n                  allowClear\n                  size=\"small\"\n                  showSearch={true}\n                  filterOption={(input, option) =&gt;\n                    option.children\n                      .toLowerCase()\n                      .indexOf(input.toLowerCase()) &gt;= 0\n                  }\n                  getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                  onChange={handleSectorsCategory}\n                &gt;\n                  {sectors.map((data, i) =&gt; (\n                    &lt;Option key={i} value={data.id}&gt;\n                      {data.sectorName}\n                    &lt;/Option&gt;\n                  ))}\n                &lt;/Select&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;div className=\"global-form-group calc\"&gt;\n            &lt;div className=\"global-form-label\"&gt;\n              &lt;label&gt;Sub Sector&lt;/label&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n              &lt;Form.Item\n                name=\"subSectorId\"\n                rules={[\n                  {\n                    required: false,\n                    message: \"\",\n                  },\n                ]}\n              &gt;\n                &lt;Select\n                  allowClear\n                  size=\"small\"\n                  showSearch={true}\n                  filterOption={(input, option) =&gt;\n                    option.children\n                      .toLowerCase()\n                      .indexOf(input.toLowerCase()) &gt;= 0\n                  }\n                  getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                &gt;\n                  {subSectors?.items?.map((data, i) =&gt; (\n                    &lt;Option key={i} value={data.id}&gt;\n                      {data.sectorName}\n                    &lt;/Option&gt;\n                  ))}\n                &lt;/Select&gt;\n              &lt;/Form.Item&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/23-subsector-tendermodule/#misc","title":"Misc","text":"Summary.js<pre><code>const [selectedSectorsItem, setSelectedSectorsItem] = useState([]);\nconst [selectedCategoryItem, setSelectedCategoryItem] = useState([]);\n\nlet val = {\n    ...newValues,\n    subTenderTypeId: selectedCategoryItem,\n    subSectorId: selectedSectorsItem,\n}\n\n\nonChange={(values, option) =&gt; {\n    const selectedData = option.map((option) =&gt; ({\n        id: option.value,\n        tenderTypeName: option.children,\n    }));\n    setSelectedCategoryItem(selectedData);\n}}\n\nonChange={(values, option) =&gt; {\n    const selectedData = option.map((option) =&gt; ({\n        id: option.value,\n        tenderTypeName: option.children,\n    }));\n    setSelectedCategoryItem(selectedData);\n}}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/25-sub-category-in-tenderModule/","title":"Sub Category in tender Mail","text":"<pre><code>git diff --name-only\n\n\nsrc/services/redux/Reference/Tender/action.js\nsrc/services/redux/Reference/Tender/api.js\nsrc/services/redux/Reference/Tender/reducer.js\nsrc/services/types.js\nsrc/views/OfficeResource/Reference/Tabs/TenderTabs/information/Summary.js\n</code></pre> services/types.jsSummary.js <pre><code>export const REFERENCE__TYPES = {\n    // SUBTYPELISTING\n    GET_TENDER_SUBTYPE_LISTING: \"GET_TENDER_SUBTYPE_LISTING\",\n    GET_TENDER_SUBTYPE_LISTING_INIT: \"GET_TENDER_SUBTYPE_LISTING_INIT\",\n    GET_TENDER_SUBTYPE_LISTING_FINISH: \"GET_TENDER_SUBTYPE_LISTING_FINISH\",\n    GET_TENDER_SUBTYPE_LISTING_SUCCESS: \"GET_TENDER_SUBTYPE_LISTING_SUCCESS\",\n}\n</code></pre> <pre><code>const [subTypeListing, setSubTypeListing] = useState([]);\nconst [selectedCategoryId, setSelectedCategoryId] = useState(\"\");\n\n\n// subcategory\nconst debouncedDispatch = useCallback(\n    debounce((categoryId) =&gt; {\n        dispatch(tenderSubTypeListing({ subTender: categoryId }));\n        }, 500),\n    [dispatch]\n);\n\nuseEffect(() =&gt; {\nif (!selectedCategoryId) return;\n\n    debouncedDispatch(selectedCategoryId);\n\n}, [selectedCategoryId, debouncedDispatch]);\n// upto here\n\nuseEffect(() =&gt; {\n    if (!isEmpty(tenderSubTypeListingResponse)) {\n        setSubTypeListing(tenderSubTypeListingResponse);\n    } else {\n        setSubTypeListing([]);\n    }\n}, [tenderSubTypeListingResponse]);\n\n\nconst handleSelectCategory = (values, option) =&gt; {\n    setSelectedCategoryId(values);\n};\n\n\nuseEffect(() =&gt; {\nif (isEmpty(getDetails)) {\n  form.resetFields();\n  return;\n} else {\n   form.setFieldsValue({})}\n   {/* ADDED */}\n   setSelectedCategoryId(getDetails?.tenderTypeId);\n}, [getDetails, showEditForm])\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/","title":"Added Loader in Bussiness Model","text":""},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/#overview","title":"Overview","text":"Old CodeNew Code <pre><code>const handleOk = () =&gt; {\n    // console.log(\"uniqueNames\", uniqueNames);\n    // setComposeIfReference(null);\n    if (!isEmpty(uniqueNames)) {\n        if (multipleSelectedEmail &amp;&amp; multipleSelectedEmail.length &gt; 0) {\n            let val = [];\n            let body = {\n                messageCenterIds: multipleSelectedEmail?.map((x) =&gt; {\n                    // return x?.id;\n                    return x?.instanceMainMessageCenterId;\n                }),\n                referenceCodes: uniqueNames,\n            };\n\n            document.querySelectorAll(\".email-list-checkbox\").forEach((item) =&gt; {\n                if (item.checked) {\n                    return (item.checked = false);\n                }\n            });\n            // dispatch(mailReferenceTagMultipleUpdate(val));\n            dispatch(mailReferenceTagMultipleUpdate(body));\n            deselectCheckboxFunction();\n        } else {\n            let val = {\n                tenderDtos: uniqueNames.map((tenderCode) =&gt; ({\n                    messageCenterId:\n                    !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                    instanceMessageCenterPagination?.instanceMainMessageCenterId,\n                    referenceCode: tenderCode,\n                })),\n            };\n            dispatch(\n                mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n            );\n            // history.push(\"/email-compose?applicationType=forward\")\n            if (composeIfReferenceValue === \"replyAll\") {\n                window.open(`/#/email-compose?applicationType=replyall`, \"_blank\");\n            } else if (\n                !!composeIfReferenceValue &amp;&amp;\n                composeIfReferenceValue !== \"replyAll\"\n            ) {\n                window.open(\n                    `/#/email-compose?applicationType=${composeIfReferenceValue}`,\n                    \"_blank\"\n                );\n            }\n        }\n    } else if (isEmpty(uniqueNames)) {\n        let val = {\n            tenderDtos: [\n            {\n                messageCenterId:\n                !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                instanceMessageCenterPagination?.id,\n                referenceCode: null,\n            },\n            ],\n        };\n        dispatch(\n            mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n        );\n    }\n    // setTenderData([]);\n    // setProjectData([]);\n    // setOthersData([]);\n    setShowBusinessModal(false);\n};\n</code></pre> <p>After Adding Loader</p> views/Email/Includes/BusinessModal.js<pre><code>const [loading, setLoading] = useState(false);\n\nconst { mailReferenceUpdateRespoonseLoading } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\nconst { multipleReferenceUpdateLoading } = useSelector(\n    (state) =&gt; state.multipleSelectedEmail\n);\n\nconst handleOk = async () =&gt; {\n    setLoading(true);\n    // wrap with try, catch, finally and aded async await in handleOk button\n    try {\n        if (!isEmpty(uniqueNames)) {\n            if (multipleSelectedEmail &amp;&amp; multipleSelectedEmail.length &gt; 0) {\n                let val = [];\n                let body = {\n                    messageCenterIds: multipleSelectedEmail?.map((x) =&gt; {\n                        return x?.instanceMainMessageCenterId;\n                    }),\n                    referenceCodes: uniqueNames,\n                };\n\n                document.querySelectorAll(\".email-list-checkbox\").forEach((item) =&gt; {\n                    if (item.checked) {\n                        return (item.checked = false);\n                    }\n                });\n                // dispatch(mailReferenceTagMultipleUpdate(val));\n                await dispatch(mailReferenceTagMultipleUpdate(body));\n                deselectCheckboxFunction();\n            } else {\n                let val = {\n                    tenderDtos: uniqueNames.map((tenderCode) =&gt; ({\n                        messageCenterId:\n                        !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                        instanceMessageCenterPagination?.instanceMainMessageCenterId,\n                        referenceCode: tenderCode,\n                    })),\n                };\n                await dispatch(\n                    mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n                );\n                // history.push(\"/email-compose?applicationType=forward\")\n                if (composeIfReferenceValue === \"replyAll\") {\n                    window.open(`/#/email-compose?applicationType=replyall`, \"_blank\");\n                } else if (\n                    !!composeIfReferenceValue &amp;&amp;\n                    composeIfReferenceValue !== \"replyAll\"\n                ) {\n                    window.open(\n                        `/#/email-compose?applicationType=${composeIfReferenceValue}`,\n                        \"_blank\"\n                    );\n                }\n            }\n        } else if (isEmpty(uniqueNames)) {\n            let val = {\n                tenderDtos: [\n                {\n                    messageCenterId:\n                    !isEmpty(instanceMessageCenterPagination) &amp;&amp;\n                    instanceMessageCenterPagination?.id,\n                    referenceCode: null,\n                },\n                ],\n            };\n            dispatch(\n                mailReferenceTagUpdate(val.tenderDtos, currentSelectedMailMessage)\n            );\n        }\n    } catch (err) {\n        console.log(err);\n    } finally {\n        setShowBusinessModal(false);\n        setLoading(false);\n    }\n};\n\nconst handleCancel = () =&gt; {\n    ...\n    setLoading(false);\n}\n\nreturn (\n    &lt;Modal\n    className=\"modal popup-wrapper tender-ref-model\"\n    title={inputTitle()}\n    visible={showBusinessModal || emailBusinessModal}\n    closable={false}\n    onOk={handleOk}\n    onCancel={handleCancel}\n    footer={[\n        &lt;Button key=\"cancel\" onClick={handleCancel}&gt;\n        Cancel\n        &lt;/Button&gt;,\n        &lt;Button key=\"ok\" type=\"primary\" onClick={handleOk} loading={loading}&gt;\n        OK\n        &lt;/Button&gt;,\n    ]}\n    &gt;\n        {/* ... */}\n    &lt;/Modal&gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/added-loader-in-business-model/#theory","title":"Theory","text":"<p>The footer buttons, such as the \"OK\" and \"Cancel\" buttons, are usually rendered by default in an Ant Design <code>&lt;Modal&gt;</code> component. However, if you're not seeing them, it's possible that they are either customized or omitted.</p> <p>In your code snippet:</p> <pre><code>&lt;Modal\n  className=\"modal popup-wrapper tender-ref-model\"\n  title={inputTitle()}\n  visible={showBusinessModal || emailBusinessModal}\n  closable={false}\n  onOk={handleOk}\n  onCancel={handleCancel}\n/&gt;\n</code></pre> <p>Ant Design's <code>&lt;Modal&gt;</code> component typically includes the OK and Cancel buttons by default unless you override the <code>footer</code> prop.</p> <p>If you want to explicitly define or customize the footer buttons, you can pass a <code>footer</code> prop to the <code>&lt;Modal&gt;</code> like this:</p> <p>Example of customized footer with \"OK\" and \"Cancel\" buttons:</p> ExampleExplanation <pre><code>&lt;Modal\n    className=\"modal popup-wrapper tender-ref-model\"\n    title={inputTitle()}\n    visible={showBusinessModal || emailBusinessModal}\n    closable={false}\n    onOk={handleOk}\n    onCancel={handleCancel}\n    footer={[\n        &lt;Button key=\"cancel\" onClick={handleCancel}&gt;\n            Cancel\n        &lt;/Button&gt;,\n        &lt;Button key=\"ok\" type=\"primary\" onClick={handleOk}&gt;\n            OK\n        &lt;/Button&gt;\n    ]}\n/&gt;\n</code></pre> <ul> <li><code>footer</code>: This prop allows you to customize or remove the default footer buttons. By default, Ant Design renders \"OK\" and \"Cancel\" buttons, but by passing your own JSX to <code>footer</code>, you can change their appearance, actions, or even remove them.</li> <li><code>Button</code>: You can add custom buttons in the <code>footer</code> array, and bind them to your event handlers (<code>onClick={handleOk}</code> and <code>onClick={handleCancel}</code>).</li> </ul> <p>In the code above, if you want to keep the default behavior, you can leave out the <code>footer</code> prop entirely, and the modal will show the default \"OK\" and \"Cancel\" buttons. If you don't want any footer at all, set <code>footer={null}</code>.</p>"},{"location":"office/ispl/clickup/2024/november/adding-hyperlink-in-internal-toolbar/","title":"Adding HyperLink in Toolbar","text":"<p>fsadf</p> src/views/Email/Includes/ReplyChatBox.js<pre><code>init={{\n    plugins: \"lists advlist link\",\n    toolbar: \"fontselect fontsizeselect backcolor forecolor bold | italic | underLine lineheight |  strikethrough alignleft aligncenter alignright |  bullist numlist | link\",\n}}\n</code></pre>"},{"location":"office/ispl/clickup/2024/november/mail-mulitple-reference-issue/","title":"Selecting multiple mail Ref Issue","text":""},{"location":"office/ispl/clickup/2024/november/mail-mulitple-reference-issue/#selecting-multiple-mail-and-adding-reference-tags-is-not-working","title":"Selecting multiple mail and adding reference tags is not working","text":"src/views/Email/Includes/BusinessModal.js<pre><code>const handleOk = () =&gt; {\n  // Commented it\n  // setComposeIfReference(null);\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/","title":"Circular Planning Select Debug","text":""},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-tender-module","title":"For Tender Module","text":"<p>Circular Planning Edit Only</p> oldUpdated Companies.js<pre><code>// Edit\nconst handleCircularEdit = (record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    const selectedAttendees = attentionToArray.map((item) =&gt; item.AttentionTo) || [];\n\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: selectedAttendees || [],\n        mailTo: mailAddressss || [],\n    });\n\n    if (record?.contactCompanyId) {\n        dispatch(\n            getContactPersonPagination({\n            CompanyId: record?.contactCompanyId,\n            })\n        );\n        dispatch(getCompanyorPersonEmailAddess(null, record?.contactCompanyId));\n    }\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n};\n</code></pre> <p>Update with <code>useCallback</code> and <code>Promise</code></p> <pre><code>// Edit\nconst handleCircularEdit = useCallback(async(record) =&gt; {\n    if (!record) return;\n\n    setIsCircularEditVisible(true);\n    setSelectedCompanyId(record?.contactCompanyId);\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setSelectedAttendees(attentionToArray)\n\n    if (record?.contactCompanyId) {\n        try {\n            await Promise.all([\n            dispatch(\n                getContactPersonPagination({\n                CompanyId: record.contactCompanyId,\n                })\n            ),\n            dispatch(getCompanyorPersonEmailAddess(null, record.contactCompanyId)),\n            ]);\n        } catch (error) {\n            console.error('Error fetching data:', error);\n        }\n    }\n\n    formCircularEdit.setFieldsValue({\n        CompanyName: record?.partyName || '',\n        contactCompanyId: record?.contactCompanyId || '',\n        attendees: attentionToArray &amp;&amp; attentionToArray.map((item) =&gt; item.AttentionTo) || [],\n        mailTo: mailAddressss || [],\n    });\n\n\n    switch (record?.modeofCommunication) {\n        case \"Email\":\n            setValueRadioAddCompany(\"1\");\n            break;\n        case \"Facebook\":\n            setValueRadioAddCompany(\"2\");\n            break;\n        case \"Whatsapp\":\n            setValueRadioAddCompany(\"3\");\n            break;\n        case \"Twitter\":\n            setValueRadioAddCompany(\"4\");\n            break;\n        case \"Other\":\n            setValueRadioAddCompany(\"5\");\n            break;\n        default:\n            setValueRadioAddCompany(\"1\");\n        }\n}, [dispatch, formCircularEdit]);\n</code></pre> <pre><code>&lt;Option\n    label={option.label}\n    key={option.value}\n    // value={option.label}\n    value={option.value}\n&gt;\n    {option.label}\n&lt;/Option&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/circular-planning-select-value-debug/#for-template-edit","title":"For Template <code>Edit</code>","text":"EditCompanyModal.js<pre><code>return(\n        &lt;&gt;\n            &lt;Modal\n                title=\"Edit Circular Planningxxx\"\n                visible={isCircularEditVisible}\n                onCancel={() =&gt; {\n                    setIsCircularEditVisible(false);\n                    setValueRadioAddCompany(null);\n                    form.resetFields();\n                }}\n                footer={null}\n            &gt;\n)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/companies-select-debug/","title":"companies.js Debug Example","text":"Companies.js<pre><code>// Edit\nconst handleCircularEdit = useCallback(\n  async (record) =&gt; {\n    if (!record) return;\n\n    const attentionToArray = JSON.parse(record?.attentionTo || \"[]\");\n    let mailAddressss = JSON.parse(record?.emailTo || \"[]\");\n\n    setIsCircularEditVisible(true);\n    setSelectedAttendees(attentionToArray);\n\n    let selectedPersonIds =\n      attentionToArray &amp;&amp;\n      attentionToArray?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n      }));\n\n    if (record?.contactCompanyId) {\n      try {\n        await Promise.all([\n          dispatch(\n            getContactPersonPagination({\n              CompanyId: record.contactCompanyId,\n            })\n          ),\n          dispatch(\n            getCompanyorPersonEmailAddess(\n              selectedPersonIds,\n              record.contactCompanyId\n            )\n          ),\n        ]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n\n    formCircularEdit.setFieldsValue({\n      CompanyName: record?.partyName || \"\",\n      contactCompanyId: record?.contactCompanyId || \"\",\n      attendees:\n        (attentionToArray &amp;&amp;\n          attentionToArray.map((item) =&gt; item.AttentionTo)) ||\n        [],\n      mailTo: mailAddressss || [],\n    });\n\n    switch (record?.modeofCommunication) {\n      case \"Email\":\n        setValueRadioAddCompany(\"1\");\n        break;\n      case \"Facebook\":\n        setValueRadioAddCompany(\"2\");\n        break;\n      case \"Whatsapp\":\n        setValueRadioAddCompany(\"3\");\n        break;\n      case \"Twitter\":\n        setValueRadioAddCompany(\"4\");\n        break;\n      case \"Other\":\n        setValueRadioAddCompany(\"5\");\n        break;\n      default:\n        setValueRadioAddCompany(\"1\");\n    }\n  },\n  [dispatch, formCircularEdit]\n);\n\nconst columns = [\n  {\n    title: \"Action\",\n    key: \"action\",\n    align: \"center\",\n    fixed: \"right\",\n    render: (record) =&gt; (\n      &lt;&gt;\n        &lt;Space size=\"small\"&gt;\n          &lt;PlusCircleTwoTone\n            onClick={() =&gt; {\n              setModalRemark(true);\n              setCompany(record);\n            }}\n            style={{ marginRight: \"8px\" }}\n          /&gt;\n          &lt;EditOutlined\n            style={{ marginRight: \"8px\" }}\n            onClick={() =&gt; {\n              handleCircularEdit(record);\n              setSelectedCompanyId(record?.contactCompanyId);\n            }}\n          /&gt;\n          {isTenderCompanyAdmin ? (\n            &lt;Popconfirm\n              title=\"Are you sure you want to delete this item?\"\n              onConfirm={() =&gt; handleDeleteRecord(record)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            &gt;\n              &lt;DeleteOutlined /&gt;\n            &lt;/Popconfirm&gt;\n          ) : null}\n        &lt;/Space&gt;\n      &lt;/&gt;\n    ),\n    width: 15,\n  },\n];\n\nconst debounceAttentiontoDispatch = useCallback(\n  debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n    dispatch(\n      getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId)\n    );\n  }, 300),\n  [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n  const selectedData = options\n    .map((option) =&gt; ({\n      AttentionTo: option.props.children || \"Unknown\",\n      AttentionId: option.key || null,\n    }))\n    .filter((item) =&gt; item.AttentionId);\n\n  setSelectedAttendees(selectedData);\n\n  const selectedPersonIds =\n    selectedData &amp;&amp;\n    selectedData?.map((item) =&gt; ({\n      contactPersonIds: item?.AttentionId,\n    }));\n\n  if (selectedPersonIds.length &gt; 0 &amp;&amp; selectedCompanyId) {\n    debounceAttentiontoDispatch(selectedPersonIds, selectedCompanyId);\n  }\n};\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/","title":"Add Company Email Modal","text":"<pre><code>git diff --name-only\n\nsrc/components/AddCompany/AddCompanyModal.js\nsrc/services/redux/Reference/action.js\nsrc/services/redux/Reference/api.js\nsrc/services/types.js\n</code></pre> ComponentActionAPITYPE AddCompanyModal.js<pre><code>const [formAddCompanyEmail] = Form.useForm();\nconst [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n\nconst handleAddCompanyEmailModalClose = () =&gt; {\n    formAddCompanyEmail.resetFields();\n    setIsAddCompanyEmailModalOpen(false);\n}\n\nconst onFinishAddCompanyEmail = async(values) =&gt; {\n    let body = {\n        companyId: selectedCompanyId,\n        email: values?.newEmail ?? ''\n    }\n\n    setIsAddCompanyEmailModalLoading(true);\n\n    try {\n        if (body?.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            // Call handleAddCompanyEmailModalClose only if dispatch is successful\n            handleAddCompanyEmailModalClose();\n        }\n    } catch (err) {\n        console.log(\"Error: \", err)\n    } finally {\n        setIsAddCompanyEmailModalLoading(false);\n    }\n}\n\nreturn (\n    &lt;&gt;\n        &lt;Modal\n            title=\"Add Compay Email\"\n            visible={isAddCompanyEmailModalOpen}\n            footer={null}\n            onCancel={handleAddCompanyEmailModalClose}\n        &gt;\n            &lt;Form\n                form={addCompanyEmail}\n                onFinish={onFinishAddCompanyEmail}\n            &gt;\n                &lt;Form.Item\n                    label=\"Email Addresss\"\n                    name=\"newEmail\"\n                    rules={[\n                        { \n                            required: true,\n                            message: 'Please enter the company email!',\n                        },\n                        {\n                            pattern: emailRegex,\n                            message: 'Please enter a valid email address!',\n                        },\n                    ]}\n                &gt;\n                    &lt;Input\n                        placeholder=\"Enter company email\"\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={isAddCompanyEmailModalLoading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>export const actionForAddCompanyOrContactPersonEmailAddById = (body) =&gt; {\n    return async(dispatch) =&gt; {\n        dispatch(init(REFERENCE__TYPES.ADD_COMPANY_EMAIL));\n        const response = await referencesService.addCompanyOrContactPersonEmailAddById(body);\n\n        try {\n            if(response.isSuccess) {\n                message.success(\"Saved Mail Address\")\n                dispatch(success(REFERENCE__TYPES.ADD_COMPANY_EMAIL, response.data));\n            } else if(!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch (err) {\n            throw err;\n        }\n\n        dispatch(finish(REFERENCE__TYPES.ADD_COMPANY_EMAIL))\n    }\n}\n</code></pre> <pre><code>// add company email address\naddCompanyOrContactPersonEmailAddById(body) {\n    let url = `${appBaseUrl}/referenceManagement/companyOrContactPersonEmailAddById`;\n    let data = postService(url, body);\n    return data;\n}\n</code></pre> types.js<pre><code>// company email add\nADD_COMPANY_EMAIL: \"ADD_COMPANY_EMAIL\",\nADD_COMPANY_EMAIL_INIT: \"ADD_COMPANY_EMAIL_INIT\",\nADD_COMPANY_EMAIL_SUCCESS: \"ADD_COMPANY_EMAIL_SUCCESS\",\nADD_COMPANY_EMAIL_FINISH: \"ADD_COMPANY_EMAIL_FINISH\", \n</code></pre>"},{"location":"office/ispl/clickup/2024/september/company-email-model/#explanation","title":"Explanation","text":"<p>To ensure that <code>handleAddCompanyEmailModalClose</code> is only called if the dispatch action succeeds, you need to move that call inside the <code>try</code> block but only after the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line. This way, it will only be executed if the dispatch action completes successfully.</p> <p>Here's how you can modify your code:</p> <pre><code>try {\n    if (body?.companyId) {\n        await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n        // Call handleAddCompanyEmailModalClose only if dispatch is successful\n        handleAddCompanyEmailModalClose();\n    }\n} catch (err) {\n    console.log(\"Error: \", err);\n} finally {\n    setIsAddCompanyEmailModalLoading(false);\n}\n</code></pre> <p>In this updated version:</p> <ul> <li>The <code>handleAddCompanyEmailModalClose</code> function is called only if the <code>await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));</code> line executes without throwing an error.</li> <li>The <code>finally</code> block ensures that <code>setIsAddCompanyEmailModalLoading(false)</code> will be called regardless of whether the <code>try</code> block succeeds or fails, ensuring proper cleanup.</li> </ul>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/","title":"Conditionally Rendering Button","text":"<p>Only render the <code>Send for Approval</code> Button if <code>isApproved</code>  is <code>false</code></p> <p>Tender Module &gt; Circular Planning Tab <code>Button</code></p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#solution","title":"Solution","text":"Companies.js<pre><code>{!getDetails?.circularPlanningApprovedStatusDto?.isApproved &amp;&amp; (\n    &lt;Button\n        type=\"primary\"\n        onClick={() =&gt; setIsCircularModalOpen(true)}\n    &gt;\n        Send for Approval\n    &lt;/Button&gt;\n)}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#other-changes-in-companiesjs","title":"Other Changes in <code>Companies.js</code>","text":"Old CodeNew Code Companies.js<pre><code>useEffect(() =&gt; {\n    if (isCircular) {\n        dispatch(\n            actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n            })\n        );\n    } else {\n        dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Here\u2019s a refined version of your <code>useEffect</code>, with additional checks and comments:</p> Companies.js<pre><code>useEffect(() =&gt; {\n    if (searchEmailTender) { // Check if searchEmailTender is defined\n        if (isCircular) {\n            dispatch(\n                actionForReferencePartyListingCircular({\n                referenceCode: searchEmailTender,\n                })\n            );\n        } else {\n            dispatch(referencePartyListing({ referenceCode: searchEmailTender }));\n        }\n    }\n}, [searchEmailTender, isCircular]);\n</code></pre> <p>Additional Tips</p> <ul> <li> <p>Add Error Handling: If the dispatch actions involve network requests or asynchronous operations, consider adding error handling to manage failed requests or responses.</p> </li> <li> <p>Memoize Callback Functions: If <code>dispatch</code> is a function passed down from a parent component or context, ensure that it is memoized to avoid unnecessary re-renders or effect triggers.</p> </li> <li> <p>Use Custom Hook: If you find yourself using similar logic in multiple places, consider creating a custom hook to encapsulate this effect logic.</p> </li> </ul> <p>By addressing these points and ensuring that all values and functions used in the useEffect are correctly defined and handled, you should be able to avoid bugs and ensure the effect works as intended. If you encounter any specific issues, providing additional details or error messages can help in further diagnosing the problem.</p>"},{"location":"office/ispl/clickup/2024/september/conditional-rendering-button/#improvement","title":"Improvement","text":"ExampleUsing Moment Companies.js<pre><code>const tooltipMessage = \n    !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${new Date(getDetails.circularPlanningApprovedStatusDto.approveDate).toLocaleDateString()}`\n    : 'Not yet approved';\n\nconst isButtonDisabled = getDetails?.isCircularPlanningApprovalRequestSent !== false;\n\n\nreturn (\n    &lt;&gt;\n        &lt;Tooltip\n            title={tooltipMessage}\n        &gt;\n            &lt;Button\n                type=\"primary\"\n                onClick={() =&gt; setIsCircularModalOpen(true)}\n                disabled={isButtonDisabled}\n            &gt;\n                Send for Approval\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>import moment from 'moment'; // Import moment\n\nconst tooltipMessage = !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${getDetails.circularPlanningApprovedStatusDto.approverName} on ${moment(getDetails.circularPlanningApprovedStatusDto.approveDate).format('MMMM D, YYYY')}`\n    : 'Not yet approved';\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/","title":"Converting radio to select","text":""},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#converting-the-radio-to-select","title":"Converting the <code>radio</code> to <code>select</code>","text":"AddCompanyModal.js<pre><code>// changes the number to strings.\nconst [valueRadioAddCompany, setValueRadioAddCompany] = useState('1');\n\n\nconst onChangeAddCompany = (value) =&gt; {\n    setValueRadioAddCompany(value);\n    setIsTemplateModalOpen(true);\n};\n\n\nconst onFinishAddCompany = (values) =&gt; {\n    let remarksData = {\n        remarks:\n            valueRadioAddCompany === '1'\n                ? \"Email\"\n                : valueRadioAddCompany === '2'\n                ? \"Facebook\"\n                : valueRadioAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueRadioAddCompany === '4'\n                ? \"Twitter\"\n                : valueRadioAddCompany === '5'\n                ? \"Other\"\n                : null,\n    };\n// ...\n// changes the number to strings.\n}\n\n\n&lt;Form.Item\n    label=\"Moc\"\n&gt;\n    &lt;Select\n        value={valueRadioAddCompany}\n        onChange={onChangeAddCompany}\n        defaultValue=\"1\"\n    &gt;\n        &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n        &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n        &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n        &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n        &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/converting-radio-to-select/#to-convert-your-radio-buttons-into-a-select-component-using-ant-design-antd-you-can-follow-these-steps","title":"To convert your Radio buttons into a Select component using Ant Design (antd), you can follow these steps:","text":"<ol> <li> <p>Use the <code>Select</code> component: Replace the <code>Radio.Group</code> with <code>Select</code> and update your <code>onFinishAddCompany</code> function to handle the selected value from the <code>Select</code> component.</p> </li> <li> <p>Set the default value: You can set the default value to \"Email\" using the <code>defaultValue</code> prop of the <code>Select</code> component.</p> </li> </ol> <p>Here\u2019s how you can convert the Radio buttons to a Select component and ensure \"Email\" is the default selection:</p> CodeExplanation <pre><code>import React, { useState } from 'react';\nimport { Form, Select, Space } from 'antd';\n\nconst { Option } = Select;\n\nconst DynamicForm = () =&gt; {\n    const [valueSelectAddCompany, setValueSelectAddCompany] = useState('1');\n\n    const handleSelectChange = (value) =&gt; {\n        setValueSelectAddCompany(value);\n    };\n\n    const onFinishAddCompany = (values) =&gt; {\n        let remarksData = {\n            remarks:\n                valueSelectAddCompany === '1'\n                ? \"Email\"\n                : valueSelectAddCompany === '2'\n                ? \"Facebook\"\n                : valueSelectAddCompany === '3'\n                ? \"Whatsapp\"\n                : valueSelectAddCompany === '4'\n                ? \"Twitter\"\n                : valueSelectAddCompany === '5'\n                ? \"Other\"\n                : null,\n            };\n        console.log('Remarks Data:', remarksData);\n    };\n\n    return (\n        &lt;Form onFinish={onFinishAddCompany} layout=\"vertical\"&gt;\n            &lt;Form.Item label=\"Moc\"&gt;\n                &lt;Select\n                    value={valueSelectAddCompany}\n                    onChange={handleSelectChange}\n                    defaultValue=\"1\" // Default value set to '1' which corresponds to \"Email\"\n                &gt;\n                    &lt;Option value=\"1\"&gt;Email&lt;/Option&gt;\n                    &lt;Option value=\"2\"&gt;Facebook&lt;/Option&gt;\n                    &lt;Option value=\"3\"&gt;Whatsapp&lt;/Option&gt;\n                    &lt;Option value=\"4\"&gt;Twitter&lt;/Option&gt;\n                    &lt;Option value=\"5\"&gt;Other&lt;/Option&gt;\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n            &lt;Form.Item&gt;\n                &lt;Space&gt;\n                    &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n                &lt;/Space&gt;\n            &lt;/Form.Item&gt;\n        &lt;/Form&gt;\n    );\n};\n\nexport default DynamicForm;\n</code></pre> <ol> <li> <p><code>Select</code> Component: Replaces the <code>Radio.Group</code> with a <code>Select</code> component, where each option corresponds to the previous radio button values.</p> </li> <li> <p><code>defaultValue</code>: Sets the default selected value. In this case, it is set to <code>\"1\"</code>, which corresponds to \"Email\".</p> </li> <li> <p><code>handleSelectChange</code>: Function to handle changes in the select value and update the state accordingly.</p> </li> <li> <p><code>onFinishAddCompany</code>: Updated to handle the <code>valueSelectAddCompany</code> state, which stores the currently selected value.</p> </li> <li> <p><code>Option</code> Component: Represents each item in the select dropdown.</p> </li> </ol> <p>By making these changes, your form will now use a <code>Select</code> component with \"Email\" as the default selected option, providing a cleaner and more flexible approach for selecting among multiple options.</p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/","title":"CSS Scrolling Block Issue","text":"<p>In dashboard of smaller screen not able to yo scroll tender list </p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#solution","title":"Solution","text":"<p>Dasboard Module &gt; Tenders/Projects <code>Tab</code></p> scssjsx _dashboard.scss<pre><code>/* added this line of code */\n\n.flip-card-front .dashboards__todolists {\n    position: relative;\n    overflow: auto;\n    z-index: 999;\n}\n</code></pre> <p><code>src/views/Home/tenders.js</code></p>"},{"location":"office/ispl/clickup/2024/september/css-scrolling-block-issue/#source-of-issue","title":"Source Of Issue","text":"<p>Here are the top 5 main issues that can block scrolling on a webpage, along with brief documentation on each:</p> <ol> <li> <p>CSS <code>overflow: hidden</code></p> <p>Description: Sets the <code>overflow</code> property to <code>hidden</code> on an element or <code>body</code>, preventing scrolling.</p> <pre><code>body {\n    overflow: hidden; /* Disables scrolling */\n}\n</code></pre> <p>Documentation: Use <code>overflow: auto</code> or <code>scroll</code> to re-enable scrolling as needed.</p> </li> <li> <p>JavaScript Event Handlers</p> <p>Description: Event listeners that call <code>e.preventDefault()</code> or manipulate scrolling properties programmatically.</p> <pre><code>document.addEventListener('scroll', function(e) {\n    e.preventDefault(); /* Blocks scrolling */\n});\n</code></pre> <p>Documentation: Ensure event handlers do not prevent default behavior unless required for specific functionality.</p> </li> <li> <p>Modal or Overlay Elements</p> <p>Description: Modals or overlays that set <code>overflow: hidden</code> on the <code>body</code> to prevent scrolling of the background content.</p> <pre><code>.modal-open {\n    overflow: hidden; /* Prevents background scrolling */\n}\n</code></pre> <p>Documentation: Restore <code>overflow</code> property when the modal is closed.</p> </li> <li> <p>Fixed or Absolute Positioning</p> <p>Description: Fixed or absolute positioned elements that may cover the viewport, blocking interaction.</p> <pre><code>.fixed-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5); /* Covers viewport */\n}\n</code></pre> <p>Documentation: Ensure these elements are used appropriately to avoid unintentional blocking.</p> </li> <li> <p>Height Restrictions</p> <p>Description: Elements with restricted height and <code>overflow</code> settings that may not accommodate content.</p> <pre><code>.container {\n    height: 100px;\n    overflow: auto; /* Enables scrolling if content overflows */\n}\n</code></pre> <p>Documentation: Adjust height and <code>overflow</code> properties based on content requirements.</p> </li> </ol> <p>Each of these issues can be identified and resolved by checking relevant CSS properties, JavaScript code, and HTML structure.</p>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/","title":"Mail Auto Select in Editor","text":"<p>Auto \"To \"does not work here also . Pls fix it ( Internal Message ) Section</p>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/#replychatboxjs","title":"ReplyChatBox.js","text":"ReplyChatBox.jsReplyChatBox.js <pre><code>const handleEditorFocus = () =&gt; {\n    let data = editorData?.replace(par, \"\");\n    if (replyStatus !== \"reply\" &amp;&amp; replyStatus !== \"replyall\") {\n        let participantsName = \"\";\n        messageParticipants\n        .filter((obj) =&gt;\n            form.getFieldsValue().participantTos?.includes(obj.appUserId)\n        )\n        .map((x, index) =&gt; {\n            participantsName =\n            participantsName +\n            x?.userName\n                ?.toUpperCase()\n                .concat(\n                index + 1 === form.getFieldsValue().participantTos?.length\n                    ? \":\"\n                    : \"/\"\n                );\n        });\n        setPar(participantsName);\n        editorRef.current.insertContent(participantsName);\n        setEditorData(participantsName + data);\n    }\n    editorRef.current.selection.setCursorLocation(editorRef.current.getBody(), 1);\n};\n</code></pre> <pre><code>&lt;Editor\n    value={editorData}\n    id=\"replyChatBox\"\n    onFocus={handleEditorFocus}\n/&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/mail-onFocus/#replychatboxglobaljs","title":"ReplyChatBoxGlobal.js","text":"<p>In ReplyChatBoxGlobal there is not <code>handleEditorFocus</code> function add this and also the related <code>useState</code>.</p> ReplyChatBoxGlobal.js <pre><code>import React, { useEffect, useState, useRef } from \"react\";\n\nconst editorRef = useRef(null);\nconst [par, setPar] = useState(\"\");\nconst [isFocused, setIsFocused] = useState(false);\n\nconst handleEditorFocus = () =&gt; {\n    let data = editorData?.replace(par, \"\");\n\n    if (replyStatus !== \"reply\" &amp;&amp; replyStatus !== \"replyall\") {\n        let participantsName = \"\";\n        messageParticipants\n        .filter((obj) =&gt;\n            form.getFieldsValue().participantTos?.includes(obj.appUserId)\n        )\n        .map((x, index) =&gt; {\n            participantsName =\n            participantsName +\n            x?.userName\n                ?.toUpperCase()\n                .concat(\n                index + 1 === form.getFieldsValue().participantTos?.length\n                    ? \":\"\n                    : \"/\"\n                );\n        });\n        setPar(participantsName);\n        editorRef.current.insertContent(participantsName);\n        setEditorData(participantsName + data);\n    }\n    editorRef.current.selection.setCursorLocation(editorRef.current.getBody(), 1);\n};\n\n&lt;Editor\n    value={editorData}\n    // adding onMouseEnter solved the entering user to last, not first\n\n    onMouseEnter={() =&gt; setIsFocused(false)}\n    onFocus={handleEditorFocus}\n/&gt;;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/","title":"Text Editor in Internal Message","text":"<p>Need Text Editor ( Like bold , highlight, font change , Color Change ) in Email compose and Internal Message Section.</p>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#email","title":"Email","text":"ComposeEmailDrawer.js <pre><code>const [toolBar, setToolBar] = useState(false);\n\n\n&lt;div\n    style={{\n        width: !visibleInternalMessage ? \"30%\" : \"50%\",\n        color: \"black\",\n    }}\n    className=\"hover aa__icon\"\n    onClick={() =&gt; {\n        setToolBar(!toolBar);\n    }}\n&gt;\n    &lt;span&gt;Aa&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div\n    className={`test compose-editor-wrapper ${\n        toolBar &amp;&amp; \"active\"\n        } ${\n            visibleInternalMessage &amp;&amp; \"internalmessage-active\"\n        }`}\n    &gt;\n        &lt;Editor\n            className=\"compose-editor\"\n            // ...\n        /&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/need-text-editor-in-im/#internal-message","title":"Internal Message","text":"<p>Toggling the <code>on/off</code> the toolbar of CKEditor in Internal Message</p> ReplyChatBox.jsinternalmessage.scss <pre><code>const [showEditorHeader, setEditorHeader] = useState(false);\n\n\nreturn (\n    &lt;&gt;\n    {/* Line Number: 1102 uncommented this */}\n\n    &lt;div className=\"chat-box-editor-header-btn-wrapper\"&gt;\n        &lt;div\n            class=\"btn__chat-editor-header\"\n            onClick={() =&gt; {\n                setEditorHeader(!showEditorHeader);\n            }}\n            style={{\n                color: showEditorHeader ? \"black\" : \"white\",\n            }}\n        &gt;\n            // &lt;img src={aa} /&gt;\n            &lt;span&gt;Aa&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n\n\n    &lt;div\n        className={`replyChatBox ${replyChatheight ? \"active\" : \"\"} ${showEditorHeader ? \"showHeader\" : \"\"\n        } `}\n        style={{ position: \"relative\", width: \"100%\" }}\n    &gt;\n        &lt;Editor\n            value={editorData}\n            // toolbar_location=\"bottom\"\n            onKeyDown={(e) =&gt; {\n                const { key, altKey } = e;\n                if (altKey &amp;&amp; key === \"Enter\") {\n                setAltEnt(true);\n                }\n            }}\n\n            init={{\n                plugins: \"lists advlist\",\n                browser_spellcheck: true,\n                menubar: \"false\",\n\n                // COMMENTED THIS\n                // toolbar: \"\", //bold  italic underLine  | backcolor forecolor   |  bullist numlist\n\n                content_style: \"p{margin:0px}\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                id: \"internal_replyBox\",\n                },\n\n                // ADDED FROM THIS\n                toolbar:\n                \"fontselect fontsizeselect backcolor forecolor bold | italic | underLine lineheight |  strikethrough alignleft aligncenter alignright |  bullist numlist\",\n\n                content_style: \"p{margin:0px;padding:0px}\",\n                forced_root_block: \"div\",\n                forced_root_block_attrs: {\n                style: \"font-family: Arial; font-size: 10pt\",\n                class: \"editor-block-wrapper\",\n                id: \"editor-blocks\",\n                },\n                font_formats:\n                \"Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde;Arial Narrow=arial narrow,avant garde;Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier;Cambria=cambria;Calibri=calibri;Calibri Body=calibri boby;Georgia=georgia,palatino;Times New Roman=times new roman,times;Helvetica=helvetica;Verdana=verdana,geneva;\",\n                // UPTO HERE\n            }}\n        /&gt;\n\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> <pre><code>/* Line number: 53*/\n\n\n.replyChatBox {\nposition: relative;\n.tox-editor-header {\n    display: none;\n}\n\n&amp;.showHeader {\n    .tox-editor-header {\n    display: block;\n    }\n}\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-redux/","title":"Persist Storage Redux","text":"<pre><code>persistMail\n\n-   action.js\n-   reducer.js\n</code></pre> dispatchaction.jsreducer.js <pre><code>//\n\nif (!changeEmailStatusTypeRespLoading &amp;&amp; !mailBodyGetDetailsLoading) {\n    dispatch(selectedMailTypeAndMail(data));\n    //...\n}\n</code></pre> <pre><code>const tenderCommunication = () =&gt; {\n    let saveData = {\n        typeSystemName: \"Inbox\",\n        typeDisplayName: \"Inbox\",\n        currentTab: \"All\",\n        index: 0,\n    };\n\n    dispatch(selectedMailTypeAndMail(saveData));\n};\n</code></pre> <pre><code>import { EMAIL_TYPES } from '../../../types';\nimport { saveMailTypeAndMail, saveActiveEmail } from 'services/common';\n\nexport const selectedMailTypeAndMail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveMailTypeAndMail(EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL, data));\n    };\n};\n\nexport const selectedActiveEmail = (data) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(saveActiveEmail(EMAIL_TYPES.EMAIL_TYPE_ACTIVE, data));\n    };\n};\n</code></pre> <pre><code>// common.js\nexport const saveMailTypeAndMail = (type, payload) =&gt; {\n    return {\n        type: `${type}`,\n        payload,\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { EMAIL_TYPES, AUTH_TYPES } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    selectedMailTypeAndMailData:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.selectedMailTypeAndMailData || {},\n    activeEmail:\n        jsonParser(\n            jsonParser(sessionStorage.getItem(\"persist:root\"))?.mailMessagePeristState\n        )?.activeEmail || {},\n};\n\nexport default function mailMessagePersistReducer(\n    state = INITIAL_STATE,\n    action\n) {\n    switch (action.type) {\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL:\n            return {\n                ...state,\n                selectedMailTypeAndMailData: action.payload,\n            };\n\n        case EMAIL_TYPES.SELECTED_MAIL_TYPE_AND_MAIL_UPDATE:\n            let newData =\n                state.selectedMailTypeAndMailData?.selectedMail?.id ===\n                action.query.messageCenterId\n                ? {\n                    ...state.selectedMailTypeAndMailData,\n                    selectedMail: {\n                        ...state.selectedMailTypeAndMailData?.selectedMail,\n                        ...action.emailStatus,\n                    },\n                    }\n                : { ...state.selectedMailTypeAndMailData };\n            return {\n                ...state,\n                selectedMailTypeAndMailData: newData,\n            };\n\n        case EMAIL_TYPES.EMAIL_TYPE_ACTIVE:\n            return {\n                ...state,\n                activeEmail: action.payload,\n            };\n\n        case AUTH_TYPES.USER_LOGOUT_SUCCESS:\n            return {\n                ...state,\n                activeEmail: null,\n                selectedMailTypeAndMailData: null,\n            };\n\n        default:\n            return { ...state };\n    }\n}\n</code></pre> store/index.js<pre><code>const persistConfig = {\n    key: \"root\",\n    storage,\n    whitelist: [\n      \"todos\",\n      \"auth\",\n      \"applicationConfig\",\n      \"mailMessagePeristState\",\n      \"contactSelectedState\",\n      \"selectedFileNameState\",\n      \"profile\",\n    ],\n};\n</code></pre> <pre><code>ComposeEmailDrawer.js\n\n\n  const  {\n    persistTenderMailDataResponse,\n    persistTenderMailDataLoading,\n  } = useSelector((state) =&gt; state.persistTenderMailState)\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/persist-storage-tender-content/","title":"Persist Tender Content","text":"ComposeEmailDrawer.js<pre><code>  useEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      // console.log(\"I'm CONTENT Module\", persistTenderMailDataResp?.content?.content)\n\n      form.setFieldsValue({\n        // participantTos: [\"test@gmail.com\", \"newmailsearch@gmail.com\"],\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        participantTos: persistTenderMailDataResp?.tos ?? [],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n\n      setEditorData(persistTenderMailDataResp?.content?.content ?? '')\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n  ])\n</code></pre> Companies.js<pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \",getDetails?.title)\n\n    let data = {\n      tos: referencePartyListingCircularResponse ?? '',\n      refCode: getDetails?.referenceCode ?? '',\n      subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n\n      let id = getDetails?.referenceId;\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n      // persist\n      // await dispatch(actionForGetReferenceTemplateGetDetailsById(id));\n      await dispatch(actionForPersistenTenderContent(id));\n\n      // Wait for 5 seconds\n      // setTimeout(() =&gt; {\n      //   window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n      //   setIsLoadingOpeningMail(false);\n      // }, 5000);\n      await new Promise(resolve =&gt; setTimeout(resolve, 5000)); \n      window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n    } catch (err) {\n      console.log(err);\n      setIsLoadingOpeningMail(false);\n    }\n    finally {\n      setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/savebase64-excel-button/","title":"Save base64 response Button","text":"Contact ModuleHR Module <ul> <li><code>Contact/ContactCompanyPerson/index.js</code></li> </ul> <p>Commented the Tab because the Export button is moved to Hr Module</p> <pre><code>&lt;Tabs\n    className=\"custom-tab-model\"\n    defaultActiveKey=\"1\"\n    onChange={key =&gt; console.log(key)}\n&gt;\n    &lt;TabPane tab=\"Search\" key=\"1\"&gt;\n    &lt;/TabPane&gt;\n    &lt;TabPane tab=\"Export\" key=\"2\"&gt;\n        &lt;div className=\"global-form-group calc\" style={{ marginTop: \".8em\" }}&gt;\n            &lt;div className=\"global-form-label\"&gt;\n                &lt;Button\n                    type=\"dashed\"\n                    onClick={handleExport}\n                &gt;\n                    Export Template\n                &lt;/Button&gt;\n            &lt;/div&gt;\n            &lt;div className=\"global-form-input\"&gt;\n                &lt;Select\n                    autoComplete=\"off\"\n                    placeholder=\"Scopes of Work\"\n                    size=\"default\"\n                    value={selectedExportValue}\n                    onChange={(value) =&gt; setSelectedExportValue(value)}\n                    options={[\n                        {\n                            value: 'company',\n                            label: 'Company',\n                        },\n                        {\n                            value: 'person',\n                            label: 'Person',\n                        }\n                    ]}\n                &gt;&lt;/Select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;UniversalFileUpload\n            name='File'\n            form={fileForm}\n            isMultipleFileAllowed={false}\n            id='1'\n            callback={(e) =&gt; {\n                let olduploadedFileDtos = fileForm.getFieldValue()[\n                    \"attendanceDtos\"\n                ]\n                    ? [...fileForm.getFieldValue()[\"attendanceDtos\"]]\n                    : [];\n                let uploadedFileDtos = [...olduploadedFileDtos];\n                uploadedFileDtos.push(e);\n\n                form.setFieldsValue({\n                    attendanceDtos: uploadedFileDtos,\n                });\n            }}\n        /&gt;\n    &lt;/TabPane&gt;\n&lt;/Tabs&gt;\n</code></pre> <ul> <li><code>Admin/index.js</code></li> </ul> <pre><code>import {\n    Skeleton,\n    Button,\n    Input,\n    Dropdown,\n    Form,\n    Checkbox,\n    Modal,\n    Collapse,\n    Row,\n    Col,\n} from \"antd\";\n\nimport { actionForExportSiscoUserListToExcel, actionForExportCompanyUserListToExcel } from \"services/redux/holiday/action\";\nimport { saveBase64 } from \"utils/saveBase64\";\n\n\nfunction Admin() {\n\n    const {\n        holidaySampleResponse,\n        holidaySampleLoading,\n        userSiscolListResponse,\n        userSiscoListLoading\n    } = useSelector((state) =&gt; state.holiday);\n\n    // export button\n    const [isDownloadStatus, setIsDownloadStatus] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [loadingType, setLoadingType] = useState(null);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(userSiscolListResponse) || !userSiscoListLoading) {\n            try {\n                if (isDownloadStatus) {\n                    let props = {\n                        base64Data: userSiscolListResponse?.data,\n                        fileName: userSiscolListResponse?.fileName,\n                        fileType: userSiscolListResponse?.fileExtension\n                    }\n                    saveBase64(props);\n                }\n            } catch (err) {\n                console.log(\"error: \", err);\n            } finally {\n                setIsDownloadStatus(false);\n            }\n        }\n    }, [userSiscolListResponse])\n\n    const handleExport = async (type) =&gt; {\n        setLoading(true);\n        setLoadingType(type);\n        setIsDownloadStatus(true);\n\n        try {\n            if(type == 'company') {\n                await dispatch(actionForExportCompanyUserListToExcel());\n            } else {\n                await dispatch(actionForExportSiscoUserListToExcel());\n            }\n        } catch(err) {\n            console.log(\"Error: \", err);\n        } finally {\n            setLoading(false);\n            setLoadingType(null);\n        }\n    }\n\n\n    return(\n        &lt;&gt;\n            &lt;Form\n                onFinish={handleFormSubmit}\n            &gt;\n                &lt;Row\n                    gutter={[0, 12]}\n                &gt;\n                    &lt;Col span=\"8\"&gt;Export Company&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('company')}\n                        loading={loading &amp;&amp; loadingType === 'company'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;Export Person&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Button\n                        type=\"dashed\"\n                        onClick={() =&gt; handleExport('person')}\n                        loading={loading &amp;&amp; loadingType === 'person'}\n                    &gt;Download&lt;/Button&gt;\n                    &lt;/Col&gt;\n                    &lt;Col span=\"8\"&gt;show InActive Users&lt;/Col&gt;\n                    &lt;Col span=\"16\"&gt;\n                    &lt;Checkbox\n                        checked={isEmployeeStatusChecked}\n                        onChange={(e) =&gt; handleEmployeeStatusChange(e.target.checked)}\n                        style={{\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            marginRight: \"6px\",\n                        }}\n                    /&gt;\n                    &lt;/Col&gt;\n                &lt;/Row&gt;\n\n                &lt;Button\n                    type=\"ghost\"\n                    shape=\"round\"\n                    htmlType=\"submit\"\n                    autoComplete=\"off\"\n                &gt;\n                    Search\n            &lt;/Button&gt;\n            &lt;/Form&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/tab-circular-planing/","title":"Circular Planning Tab Added","text":"<p>fsadfsadf</p> OldUpdated <pre><code>{/* Tender Checklist */}\n\n{contactDetails()}\n&lt;div className=\"person_info tender-checklist\"&gt;\n    &lt;div&gt;\n        &lt;div className=\"company_header\"&gt;\n        &lt;div\n            className=\"referenceDetails__label\"\n            style={{\n            display: \"flex\",\n            width: \"100%\",\n            justifyContent: \"space-between\",\n            }}\n        &gt;\n            &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n            Tender Checklist\n            &lt;/button&gt;\n            &lt;Button\n            style={{ height: \"28px\", lineHeight: \"21px\" }}\n            type=\"primary\"\n            onClick={() =&gt; setModalVisible(true)}\n            &gt;\n            Circular Content\n            &lt;/Button&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n    &lt;/div&gt;\n&lt;/div&gt; \n</code></pre> Companies.js<pre><code>import {\n    Tabs,\n} from \"antd\";\n\nconst Companies = ({\n    //...\n}) =&gt; {\n    const { TabPane } = Tabs;\n\n    return (\n        &lt;&gt;\n            &lt;div className=\"company_person\"&gt;\n                {!isCircular ? (\n                    contactDetails()\n                ) : (\n                &lt;&gt;\n                    &lt;Tabs\n                        defaultActiveKey=\"1\"\n                        type=\"line\"\n                    &gt;\n                        &lt;TabPane tab=\"Contact Details\" key=\"1\"&gt;\n                            {contactDetails()}\n                        &lt;/TabPane&gt;\n                        &lt;TabPane tab=\"Tender Checklist\" key=\"2\"&gt;\n                            &lt;div className=\"person_info tender-checklist\"&gt;\n                                &lt;div className=\"company_header\"&gt;\n                                    &lt;div\n                                        className=\"referenceDetails__label\"\n                                        style={{\n                                            display: \"flex\",\n                                            width: \"100%\",\n                                            justifyContent: \"space-between\",\n                                        }}\n                                    &gt;\n                                        &lt;button className=\"referenceDetails--title header_print_btn\"&gt;\n                                            Tender Checklist\n                                        &lt;/button&gt;\n                                        &lt;Button\n                                            style={{ height: \"28px\", lineHeight: \"21px\" }}\n                                            type=\"primary\"\n                                            onClick={() =&gt; setModalVisible(true)}\n                                        &gt;\n                                            Circular Content\n                                        &lt;/Button&gt;\n                                    &lt;/div&gt;\n                                &lt;/div&gt;\n                                &lt;CheckListContainer referenceId={getDetails?.referenceId} /&gt;\n                            &lt;/div&gt;\n                        &lt;/TabPane&gt;\n                    &lt;/Tabs&gt;\n                &lt;/&gt;\n                )}\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/task-module-set-tos-ccs/","title":"Task chat tos","text":"<pre><code>modified:   services/redux/Reference/Tender/reducer.js\nmodified:   views/Expert/ContactCompanyPerson/index.js\nmodified:   views/GlobalEmailChat/GlobalChat.js\nmodified:   views/GlobalEmailChat/ReplyChatBoxGlobal.js\nmodified:   views/GlobalEmailChat/TaskDetailsLabel.js\nmodified:   views/GlobalEmailChat/index.js\nmodified:   views/Oragnizer/todoList/TodoLists.js\nmodified:   views/Oragnizer/todoList/index.js\n</code></pre> <pre><code>&lt;ToDo&gt;\n    &lt;ToDoLists&gt;\n        {hideInternalMessage ? (\n            &lt;Drawer&gt;\n                &lt;ChatDetail&gt;\n                    &lt;GlobalChatBox&gt;\n                    &lt;GlobalChatBox&gt;\n                &lt;/ChatDetail&gt;\n            &lt;/Drawer&gt;\n        )}\n    &lt;/ToDoLists&gt;\n&lt;/ToDo&gt;\n</code></pre> todoList/index.jsTodoLists.jsGlobalEmailChat/ <pre><code>const ToDo = (props) =&gt; {\nconst [selectedTaskTos, setSelectedTaskTos] = useState([]);\nconst [selectedTaskCcs, setSelectedTaskCcs] = useState([]);\n\n    return (\n        &lt;&gt;\n        &lt;div className=\"main__body task__body sidebar-width-calc\"&gt;\n            &lt;ToDoLists\n                // added\n                setSelectedTaskTos={setSelectedTaskTos}\n                setSelectedTaskCcs={setSelectedTaskCcs}\n            /&gt;\n\n        {hideInternalMessage ? (\n            &lt;Drawer\n                title=\"Task Module\"\n                placement=\"right\"\n                onClose={closeDrawer}\n                visible={hideInternalMessage}\n                className=\"task-drawer\"\n                width={543}\n            &gt;\n            &lt;ChatDetails\n                isPrivate={props.isPrivate}\n                setShowChat={setShowChat}\n                setHideInternalMessage={setHideInternalMessage}\n                hideInternalMessage={hideInternalMessage}\n                taskId={toShowKanbanData ? toShowKanbanData?.id : taskId}\n                setTaskId={setTaskId}\n                todoDetails={toShowKanbanData ? toShowKanbanData : todoDetails}\n                handleChangeEvent={handleChangeEvent}\n                setSmallChatHeight={setSmallChatHeight}\n                setChatHeight={setChatHeight}\n                chatHeight={chatHeight}\n                smallChatHeight={smallChatHeight}\n                setchatBox={setchatBox}\n                chatBox={chatBox}\n                module=\"Task\"\n                // added\n                selectedTaskTos={selectedTaskTos}\n                selectedTaskCcs={selectedTaskCcs}\n            /&gt;\n            &lt;/Drawer&gt;\n        ) : null}\n        &lt;/&gt;\n    );\n};\n</code></pre> <pre><code>const ToDoLists = (props) =&gt; {\n\n\n    const {\n        // added\n        setSelectedTaskTos,\n        setSelectedTaskCcs,\n    } = props;\n\n    &lt;div\n        onClick={() =&gt; {\n            dispatch(toDoGetDetails(record?.id));\n            //show the drawer\n            setHideInternalMessage(true);\n            setSmallChatHeight(false);\n            setChatHeight(false);\n            setchatBox(false);\n            // const ccs =\n            //   record?.todoEventCandidateDtos\n            //     ?.filter((item) =&gt; item?.isWatcher)\n            //     ?.map((item) =&gt; item?.candidateId) || [];\n            // const tos =\n            //   record?.todoEventCandidateDtos\n            //     ?.filter((item) =&gt; !item?.isWatcher)\n            //     ?.map((item) =&gt; item?.candidateId) || [];\n            // setSelectedTaskTos(tos);\n            // setSelectedTaskCcs(ccs);\n\n            const { todoEventCandidateDtos } = record || {};\n            const getCandidateIds = (isWatcher) =&gt;\n                todoEventCandidateDtos\n                ?.filter((item) =&gt; item?.isWatcher === isWatcher)\n                ?.map((item) =&gt; item?.candidateId) || [];\n\n            setSelectedTaskTos(getCandidateIds(false));\n            setSelectedTaskCcs(getCandidateIds(true));\n        }}\n    &gt;\n}\n</code></pre> index.jsReplyChatBoxGlobal.js <pre><code>const ChatDetails = (props) =&gt; {\n    const {\n        selectedTaskTos,\n        selectedTaskCcs,\n    } = props;\n\n    return (\n        &lt;&gt;\n            &lt;GlobalChat/&gt;\n            &lt;ReplyChatBoxGlobal\n                // added\n                selectedTaskTos={selectedTaskTos}\n                selectedTaskCcs={selectedTaskCcs}\n            &gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> <pre><code>const ReplyChatBoxGlobal = ({\n    // added\n    selectedTaskTos,\n    selectedTaskCcs,\n}) =&gt; {\n\n    // added\n    useEffect(() =&gt; {\n        if (chatBox === true) {\n            form.setFieldsValue({\n                participantTos: selectedTaskTos,\n                participantCCs: selectedTaskCcs,\n            });\n        }\n    }, [chatBox]);\n}\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/clickup/2024/september/tender-pagination-isActive/","title":"Tender Pagination isActive","text":""},{"location":"office/ispl/clickup/2024/september/tender-pagination-isActive/#tender-module","title":"Tender Module","text":"Tender/reducer.js<pre><code>    case REFERENCE__TYPES.TENDER_BASIC_PAGINATION_SUCCESS:\n      return {\n        ...state,\n        tenderBasicPaginationResponse: {\n          items: action.loadMore\n            ? uniqBy(\n                state.tenderBasicPaginationResponse.items.concat(\n                  action.payload.items\n                ),\n                \"id\"\n              )\n            : action.payload.items,\n          totalCount: action.payload.totalCount,\n        },\n        // tenderBasicPaginationResponse: {\n        //   items: action.loadMore\n        //     ? uniqBy(\n        //         state.tenderBasicPaginationResponse.items\n        //           .concat(action.payload.items)\n        //           .filter((item) =&gt; item.isActive),\n        //         \"id\"\n        //       )\n        //     : uniqBy(\n        //         action.payload.items.filter((item) =&gt; item.isActive),\n        //         \"id\"\n        //       ),\n        //   totalCount: action.payload.totalCount,\n        // },\n        // tenderBasicPaginationLoading: false,\n      };\n</code></pre>"},{"location":"office/ispl/documentation/architecture/","title":"Architecture","text":""},{"location":"office/ispl/documentation/architecture/#react-architecture-in-details","title":"React Architecture in Details","text":""},{"location":"office/ispl/documentation/auth/","title":"Auth","text":"auth.action.js<pre><code>export const loginUser = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(AUTH_TYPES.USER_LOGIN));\n    const response = await authService.loginUser(body);\n    dispatch(finish(AUTH_TYPES.USER_LOGIN));\n    if (response.isSuccess) {\n      const decodedTokenData = decodedToken(response.data.access_token);\n      let sub = decodedTokenData.sub;\n      Storage.setItem(\"role\", decodedTokenData.role);\n      Storage.setItem(\"role\", decodedTokenData.role);\n      Storage.setItem(\"userId\", sub);\n      Storage.setItem(\"name\", decodedTokenData.name);\n      autoLogout(dispatch, decodedTokenData.exp, decodedTokenData.auth_time);\n      dispatch(success(AUTH_TYPES.USER_LOGIN, response.data.access_token));\n      dispatch(checkInDailyAttendance());\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> Login/index.jsNavbar.jsStoreProvider.jsmisc.js <pre><code>const Login = ({ userName, checkDailyAttendenceResponseLoading }) =&gt; {\n\nconst [form] = Form.useForm();\nconst name = Storage.getItem('name');\n\nconst onFinish = (values) =&gt; {\n    dispatch(loginUser(values));\n};\n}\n</code></pre> <pre><code>const { LimitedRoleDemo, isLimitedRoleMailBox } = useRoles();\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;div className=\"icon1\"&gt;\n    &lt;Link\n        to=\"/dashBoard\"\n        className={`icons__wrapper ${\n        state.basePath === \"dashBoard\" ? \"active\" : \"\"\n        }`}\n    &gt;\n        &lt;img src={Home} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt; Dashboard &lt;/span&gt;\n    &lt;/Link&gt;\n    &lt;/div&gt;\n)}\n</code></pre> <pre><code>import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport configureStore from \"./index\";\nconst { store, persistor } = configureStore();\n\nexport default function StoreProvider({ children }) {\n    return (\n        &lt;Provider store={store}&gt;\n            &lt;PersistGate loading={null} persistor={persistor}&gt;\n                {children}\n            &lt;/PersistGate&gt;\n        &lt;/Provider&gt;\n    );\n}\n</code></pre> <pre><code>import jwtDecode from \"jwt-decode\";\nimport Storage from \"utils/storage\";\nimport moment from \"moment\";\n\nexport const jsonParser = (content) =&gt; {\n    try {\n        return JSON.parse(content);\n    } catch (ex) {\n        return {};\n    }\n};\n\nexport const isTokenExpired = (token) =&gt; {\n    if (typeof window == \"undefined\") {\n        return false;\n    }\n\n    if (token) {\n        const { exp } = jwtDecode(token);\n\n        if (exp &lt; (new Date().getTime() + 1) / 1000) {\n        return true;\n        }\n        return false;\n    } else {\n        return true;\n    }\n};\n\nexport const decodedToken = (token) =&gt; {\n    if (typeof window == \"undefined\") {\n        return false;\n    }\n\n    if (token) {\n        const decodedToken = jwtDecode(token);\n\n        if (decodedToken.exp &gt; (new Date().getTime() + 1) / 1000) {\n        return decodedToken;\n        }\n        return false;\n    } else {\n        return false;\n    }\n};\n\nexport const renderNameOrNA = (name) =&gt; name || \"N/A\";\n\nexport const isAdmin = () =&gt; {\n    const role = Storage.getItem(\"role\");\n    if (!role) return;\n\n    if (role === \"admin\") {\n        return true;\n    }\n\n    return false;\n};\n\nexport const validateMessages = {\n    required: \"${label} is required!\",\n    whitespace: \"${label} can not be empty!\",\n    types: {\n        email: \"${label} is not valid!\",\n    },\n};\n\nexport const requiredRule = [\n    {\n        required: true,\n        whitespace: true,\n    },\n];\n\nexport function getDayDiff(endDate, startDate) {\n    let parsedEndDate = moment(endDate).format(\"YYYY-MM-DDTHH:mm:00.000\") + \"Z\";\n    let parsedStartDate =\n        moment(startDate).format(\"YYYY-MM-DDTHH:mm:00.000\") + \"Z\";\n    let diff = moment(parsedEndDate).diff(parsedStartDate);\n    let days = moment.duration(diff).days();\n    return days;\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/blog/","title":"Blog Module","text":"<p>Success</p> StagesView.js<pre><code>...\nimport Blog from \"components/Blog\";\n...\n\n{/* Blog */}\n&lt;div className=\"business-header\"&gt;\n    &lt;div className=\"business-header-title\" style={{ fontSize: \"1.1em\" }}&gt;\n        Blog\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;Blog tenderId={tenderId} /&gt;\n</code></pre> <pre><code>src\n- components\n---- Blog\n-------BlogForm.js\n-------BlogItem.js\n-------index.js\n</code></pre> <p>Tips</p> BlogBlogItemBlogFormInfinite Scroll index.js<pre><code>import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, Skeleton, Row, Col, Affix, Dropdown } from \"antd\";\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n    blogAdd,\n    updateBlogMessage,\n    getBlogPagination,\n} from \"services/redux/officeresource/blog/action\";\nimport {\n    employeeProfileDetail,\n    actionForGetAllUsersPP,\n} from \"services/redux/profile/profile.action\";\nimport BlogItem from \"./BlogItem\";\nimport BlogForm from \"./BlogForm\";\n\nconst Blog = ({ tenderId }) =&gt; {\nconst dispatch = useDispatch();\nconst [form] = Form.useForm();\nconst pageSize = 40;\n\nconst scrollableRef = useRef();\n\nconst {\n    addBlogMessageLoading,\n    addBlogMessageResp,\n    getBlogMsgPaginationResp,\n    getBlogMsgPaginationLoading,\n} = useSelector((state) =&gt; state.blogReducer);\n\nconst { profileInfo } = useSelector((state) =&gt; state.profile);\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\nconst [editMode, setEditMode] = useState(false);\nconst [editedBlog, setEditedBlog] = useState({});\n\nconst appUserIdUC = sessionStorage?.userId.toUpperCase();\n\n// SUPERAPI **************************************************************\nconst { listingAllUsersProfileResp, listingAllUsersProfileLoading } =\n    useSelector((state) =&gt; state.profile);\n\nconst [listingAllProfile, setListingAllProfile] = useState([]);\n\nuseEffect(() =&gt; {\n    dispatch(actionForGetAllUsersPP());\n}, []);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(listingAllUsersProfileResp)) {\n        setListingAllProfile(listingAllUsersProfileResp);\n    }\n}, [listingAllUsersProfileResp]);\n// end SUPERAPI **************************************************************\n\nuseEffect(() =&gt; {\n    dispatch(\n        employeeProfileDetail({\n            AppUserId: sessionStorage?.userId.replaceAll('\"', \"\"),\n        })\n    );\n}, []);\n\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nconst handleEditClick = (item) =&gt; {\n    setEditMode(true);\n    setEditedBlog({\n        id: item.id,\n        name: item.name,\n        body: item.body,\n    });\n};\n\nconst handleEditSubmit = (values) =&gt; {\n    const updatedBlog = {\n        id: editedBlog.id,\n        userId: sessionStorage?.userId,\n        subject: \"string\",\n        name: editedBlog.name,\n        body: values.editedMessage,\n        isActive: true,\n        referenceCode: tenderId,\n        lastmodified: moment().format(),\n    };\n\n    dispatch(updateBlogMessage(editedBlog.id, updatedBlog));\n\n    setEditMode(false);\n    setEditedBlog({});\n};\n\nconst onFinish = (values) =&gt; {\n    let data = {};\n    if (values) {\n    data = {\n        userId: sessionStorage?.userId,\n        referenceCode: tenderId,\n        body: values.message,\n        creationTime: moment().format(),\n        subject: \"string\",\n        isActive: true,\n    };\n    // dispatch(blogAdd(data));\n    try {\n        dispatch(blogAdd(data));\n    } catch (err) {\n        console.log(\"error: \", err);\n    } finally {\n        form.resetFields();\n    }\n    }\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n        &lt;BlogForm\n            form={form}\n            onFinish={onFinish}\n            loading={addBlogMessageLoading}\n        /&gt;\n    &lt;/div&gt;\n    );\n};\n\nexport default Blog;\n</code></pre> BlogItem.js<pre><code>import moment from \"moment\";\nimport { Form, Button, Input } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\n// import BlogForm from \"./BlogForm\";\nimport MatchingImageDisplay from \"components/shared/MatchingImageDisplay\";\nconst { TextArea } = Input;\n\nconst BlogItem = ({\n    blogMsg,\n    appUserIdUC,\n    editMode,\n    setEditMode,\n    editedBlog,\n    handleEditClick,\n    handleEditSubmit,\n    listingAllProfile,\n}) =&gt; {\n\nconst [form] = Form.useForm();\n\nreturn (\n    &lt;&gt;\n    {blogMsg.map((item, index) =&gt; (\n        &lt;div\n            className=\"blogWrapper\"\n            key={index}\n            style={{\n                display: \"flex\",\n                justifyContent:\n                JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"flex-end\"\n                    : \"flex-start\",\n            }}\n        &gt;\n        {JSON.stringify(item?.userId)?.toUpperCase() !== appUserIdUC ? (\n            &lt;span\n                style={{\n                    height: \"40px\",\n                    width: \"40px\",\n                    background: \"#67a1e4\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"50%\",\n                    color: \"#FFF\",\n                    marginRight: \"12px\",\n                }}\n            &gt;\n            &lt;MatchingImageDisplay\n                listingAllProfile={listingAllProfile}\n                item={item}\n            /&gt;\n            &lt;/span&gt;\n        ) : null}\n\n        &lt;div\n            style={{\n                display: \"inline-block\",\n                maxWidth: \"80%\",\n                background:\n                    JSON.stringify(item?.userId)?.toUpperCase() === appUserIdUC\n                    ? \"#E8EBFA\"\n                    : \"#FFFFFF\",\n                marginBottom: \"1em\",\n                padding: \"0.4em 1em\",\n            }}\n        &gt;\n            &lt;div&gt;\n            {editMode &amp;&amp; editedBlog.id === item.id ? (\n                // &lt;BlogForm\n                //   initialValue={item.body}\n                //   onFinish={(values) =&gt; {\n                //     handleEditSubmit(item.id, values.editedMessage);\n                //     // toggleEditMode();\n                //   }}\n                // /&gt;\n                &lt;Form\n                    onFinish={handleEditSubmit}\n                    initialValues={{ editedMessage: editedBlog.body }}\n                &gt;\n                &lt;Form.Item\n                    name=\"editedMessage\"\n                    rules={[\n                    {\n                        required: true,\n                    },\n                    ]}\n                &gt;\n                    {/* &lt;Input */}\n                    &lt;TextArea\n                        style={{\n                            // height: \"42px\",\n                            borderBottom: \"4px solid #8e92d1\",\n                            resize: \"none\",\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Button type=\"primary\" htmlType=\"submit\"&gt;\n                    Save\n                &lt;/Button&gt;\n                &lt;Button onClick={() =&gt; setEditMode(false)}&gt;Cancel&lt;/Button&gt;\n                &lt;/Form&gt;\n            ) : (\n                &lt;&gt;\n                &lt;div\n                    style={{\n                        display: \"flex\",\n                    }}\n                &gt;\n                    &lt;span className=\"blog-username\"&gt;\n                    {item?.name?.toUpperCase()}\n                    &lt;/span&gt;\n                    &lt;span style={{ color: \"#807e7e\" }}&gt;\n                    {item?.lastmodified\n                        ? \"Modified \" + moment(item?.lastmodified).calendar()\n                        : moment(item?.creationTime).startOf(\"min\").fromNow()}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div\n                    className=\"blogBody\"\n                        style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                &gt;\n                    &lt;p&gt;{item?.body}&lt;/p&gt;\n                    &lt;span\n                    className={\n                        JSON.stringify(item?.userId) ===\n                        sessionStorage?.userId.toUpperCase()\n                        ? \"blog__content\"\n                        : \"\"\n                    }\n                    &gt;\n                    {JSON.stringify(item?.userId)?.toUpperCase() ===\n                    appUserIdUC ? (\n                        &lt;EditOutlined onClick={() =&gt; handleEditClick(item)} /&gt;\n                    ) : null}\n                    &lt;/span&gt;\n                &lt;/div&gt;\n                &lt;/&gt;\n            )}\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    ))}\n    &lt;/&gt;\n);\n};\n\nexport default BlogItem;\n</code></pre> BlogForm.js<pre><code>import { Form, Input, Button, Row, Col } from \"antd\";\nimport { SendOutlined } from \"@ant-design/icons\";\nconst { TextArea } = Input;\n\nconst BlogForm = ({ form, onFinish, loading }) =&gt; {\nreturn (\n    &lt;Form\n    name=\"blog\"\n    form={form}\n    onFinish={onFinish}\n    wrapperCol={{ span: 24 }}\n    style={{ background: \"#f9f9f9\", padding: \"2em 4em\" }}\n    &gt;\n    &lt;Row gutter={8}&gt;\n        &lt;Col span={22}&gt;\n        &lt;Form.Item\n            name=\"message\"\n            rules={[\n            {\n                required: true,\n            },\n            ]}\n        &gt;\n            &lt;TextArea\n            rows={2}\n            style={{\n                // height: \"42px\",\n                borderBottom: \"4px solid #8e92d1\",\n                resize: \"none\",\n                fontSize: \"1.1em\",\n            }}\n            /&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n        &lt;Col span={2}&gt;\n        &lt;Form.Item wrapperCol={{ span: 24 }}&gt;\n            &lt;Button\n            // type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n                height: \"100%\",\n                width: \"100%\",\n                // added\n                background: \"none\",\n                border: \"none\",\n                color: \"#67a1e4\",\n                cursor: \"pointer\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n            loading={loading}\n            &gt;\n            {/* Submit */}\n            &lt;SendOutlined style={{ fontSize: \"28px\" }} /&gt;\n            &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n        &lt;/Col&gt;\n    &lt;/Row&gt;\n    &lt;/Form&gt;\n);\n};\n\nexport default BlogForm;\n</code></pre> <pre><code>const pageSize = 40;\nconst scrollableRef = useRef();\n\nconst [blogMsg, setBlogMsg] = useState([]);\nconst [currentPage, setCurrentPage] = useState(1);\n\n{/* USEFFECT */}\nuseEffect(() =&gt; {\n    let apiBody = {\n        ReferenceCode: tenderId,\n        MaxResultCount: pageSize,\n        SkipCount: 0,\n    };\n        dispatch(getBlogPagination(apiBody, false));\n}, [tenderId]);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getBlogMsgPaginationResp?.items)) {\n        setBlogMsg(getBlogMsgPaginationResp.items);\n        let newCurrentPage = getBlogMsgPaginationResp.items.length / pageSize;\n        setCurrentPage(newCurrentPage);\n    } else {\n        setBlogMsg([]);\n    }\n}, [getBlogMsgPaginationResp, currentPage, pageSize]);\n\nconst getData = (MaxResultCount = pageSize, SkipCount, loadMore = true) =&gt; {\n    dispatch(\n        getBlogPagination(\n            {\n            ReferenceCode: tenderId,\n            MaxResultCount,\n            SkipCount,\n            },\n            loadMore\n        )\n    );\n};\n\nconst getMoreData = () =&gt; {\n    getData(pageSize, currentPage * pageSize, true);\n};\n\nreturn (\n    &lt;div className=\"blog-content\"&gt;\n        &lt;div id=\"blogDiv\" ref={scrollableRef}&gt;\n            {getBlogMsgPaginationLoading &amp;&amp; (\n                &lt;Skeleton paragraph={{ rows: 10 }} active /&gt;\n            )}\n\n            {!isEmpty(getBlogMsgPaginationResp) ? (\n                &lt;InfiniteScroll\n                    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n                    dataLength={getBlogMsgPaginationResp.items.length}\n                    inverse={true}\n                    hasMore={\n                    getBlogMsgPaginationResp.totalCount &gt;\n                    getBlogMsgPaginationResp.items.length\n                    }\n                    next={getMoreData}\n                    loader={&lt;Skeleton paragraph={{ rows: 4 }} active /&gt;}\n                    scrollableTarget=\"blogDiv\"\n                    endMessage={\n                    &lt;p style={{ textAlign: \"center\" }}&gt;\n                        {getBlogMsgPaginationResp?.items?.length &gt; 10 ? (\n                        &lt;b&gt;End of blog&lt;/b&gt;\n                        ) : null}\n                    &lt;/p&gt;\n                    }\n                &gt;\n                    &lt;BlogItem\n                        blogMsg={blogMsg}\n                        appUserIdUC={appUserIdUC}\n                        editMode={editMode}\n                        setEditMode={setEditMode}\n                        editedBlog={editedBlog}\n                        handleEditClick={handleEditClick}\n                        handleEditSubmit={handleEditSubmit}\n                        listingAllProfile={listingAllProfile}\n                    /&gt;\n                &lt;/InfiniteScroll&gt;\n                ) : (\n                &lt;p style={{ textAlign: \"center\" }}&gt;\n                    &lt;b&gt;No Data&lt;/b&gt;\n                &lt;/p&gt;\n            )}\n        &lt;/div&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/daily-dairy/","title":"Daily Dairy","text":""},{"location":"office/ispl/documentation/alldocs/daily-dairy/#daily-dairy","title":"daily Dairy","text":"todolist.js <pre><code>// added\n\n\n&lt;div className=\"flip-card-back\"&gt;\n      &lt;div\n        style={{\n          backfaceVisibility: \"hidden\",\n        }}\n      &gt;\n        &lt;div\n          className={\n            \"dashboards__tenderlist dashboards__body\"\n          }\n        &gt;\n          &lt;div className=\"dashboards__bodyWrap\"&gt;\n            &lt;h4 className=\"dashboards__body--title\"&gt;\n              Daily Dairy\n              {/* ADDED */}\n              &lt;span\n                onClick={() =&gt; {\n                  setRotate(rotate + 1);\n                }}\n                style={{\n                  marginLeft: \"10px\",\n                  height: \"30px\",\n                  marginBottom: \"10px\",\n                }}\n              &gt;\n                &lt;img\n                  src=\"./assets/svg/toggle-arrow.svg\"\n                  height={15}\n                  alt=\"complete\"\n                /&gt;\n              &lt;/span&gt;\n            &lt;/h4&gt;\n\n          &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"dashboards__body--main todolist-wrapper\"&gt;\n          &lt;ul\n            className=\"dashboards__todolists\"\n            style={{ height: heightt[1] }}\n          &gt;\n            {/* DATA */}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/","title":"Excel API Data","text":""},{"location":"office/ispl/documentation/alldocs/excel-api-data/#admin-module","title":"Admin Module","text":"Holiday Event<pre><code>// HolidayWithSampleButton.js\n</code></pre> <p>Example Usage</p> Generic BinaryExcel FilePracticalReact Package for ExcelTheory <p>Using <code>application/octet-stream</code> for a Generic Binary Download:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"file.bin\"\n\n(binary data)\n</code></pre> application/octet-stream<pre><code>const downloadFile = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'file.bin';\n    saveAs(blob, fileName);\n};\n</code></pre> <p>Using <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> for an Excel File:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\nContent-Disposition: attachment; filename=\"spreadsheet.xlsx\"\n\n(binary data of the Excel file)\n</code></pre> application/**<pre><code>const downloadExcel = async () =&gt; {\n    const response = await fetch('YOUR_API_ENDPOINT');\n    const blob = await response.blob();\n    const fileName = 'spreadsheet.xlsx';\n    saveAs(blob, fileName);\n};\n</code></pre> <pre><code>import { saveAs } from 'file-saver';\nimport xlsx from 'xlsx';\n\n\n// Parse the binary data\nconst workbook = XLSX.read(holidaySampleResponse, { type: 'array' });\n\n// Convert the workbook to a Blob object\nconst excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n\nconst blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n// Save the Blob as a file\nsaveAs(blob, 'holiday_sample.xlsx');\n\n\n// or\n\nconst fileName = 'holiday_sample.xlsx';\n\nconst rawblob = new File([holidaySampleResponse], {\n    // type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    type: 'application/octet-stream'\n});\nsaveAs(blob, fileName);\n</code></pre> Installation<pre><code>npm i xlsx\n</code></pre> Example<pre><code>import * as XLSX from 'xlsx/xlsx.mjs';\n\n/* load 'fs' for readFile and writeFile support */\nimport * as fs from 'fs';\nXLSX.set_fs(fs);\n\n/* load 'stream' for stream support */\nimport { Readable } from 'stream';\nXLSX.stream.set_readable(Readable);\n\n/* load the codepage support library for extended support with older formats  */\nimport * as cpexcel from 'xlsx/dist/cpexcel.full.mjs';\nXLSX.set_cptable(cpexcel);\n</code></pre> <pre><code>const bytesData = this.props.bytesData; // Assuming you have your bytes data\nconst workbook = XLSX.read(bytesData, { type: 'array' });\n\n// Write the workbook object to an Excel file\nXLSX.writeFile(workbook, 'example.xlsx');\n</code></pre> <p>The type parameter in <code>XLSX.read</code> specifies the type of input data being provided. Here are the available types:</p> <ul> <li>array: This is used when your data is in the form of an array of bytes.</li> <li>binary: This is used when your data is in binary format.</li> <li>buffer: This is used when your data is in the form of a <code>Node.js</code> buffer.</li> <li>file: This is used when your data is in the form of a file (e.g., when using a file input).</li> <li>base64: This is used when your data is encoded in base64 format.</li> <li>string: This is used when your data is in the form of a string.</li> </ul> <p>Choose the appropriate type based on how your data is represented. In your case, if you have the bytes data as an array, you would use 'array'.</p> <p>In summary, use <code>application/octet-stream</code> for generic binary data or when you want to force a download without specifying the file type. Use <code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code> when you are specifically serving Excel files to ensure proper handling and identification by the client.</p> what is application/octet-stream type <p>application/octet-stream is a generic binary file type. It's used when the specific type of file being transferred is either unknown or does not fit into any of the more specific categories available. Here are some key points about application/octet-stream:</p> <p>Example</p> HolidayWithSampleButton.js<pre><code>useEffect(() =&gt; {\n    if (holidaySampleResponse || !holidaySampleLoading) {\n        try {\n            if (isDownloadStatus) {\n                const blob = new Blob([holidaySampleResponse], { type: 'application/octet-stream' });\n\n                // Create a URL for the Blob\n                const url = window.URL.createObjectURL(blob);\n\n                // Create a link element and click on it to trigger the download\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'HolidaySample.xlsx'); // Specify the file name here\n                document.body.appendChild(link);\n                link.click();\n            }\n        } catch (err) {\n            console.log(\"error: \", err)\n        } finally {\n            setIsDownloadStatus(false);\n        }\n    }\n}, [holidaySampleResponse])\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#reference","title":"Reference","text":"<ul> <li>xlsx</li> <li>how to download excel in response from api react js</li> <li>How to Import Export Excel &amp; CSV In React 2022</li> <li>How to Excel Export in React JS</li> <li>online excel file viewer</li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#characteristics","title":"Characteristics:","text":"<ul> <li> <p>Binary Data: It indicates that the data being transferred is binary, meaning it's not in a human-readable format like text.</p> </li> <li> <p>No Specific Format: Unlike specific MIME types such as <code>application/json</code>, <code>text/html</code>, or <code>image/jpeg</code>, <code>application/octet-stream</code> does not specify any particular structure or format for the data. It's up to the consuming application to interpret the data correctly.</p> </li> <li> <p>Download Behavior: Browsers typically initiate a download for files with this MIME type rather than trying to display the contents directly in the browser window. This behavior makes it suitable for files like executables, images, videos, or any non-text data.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#use-cases","title":"Use Cases:","text":"<ul> <li> <p>File Downloads: Commonly used to force a file download from a web server. For example, when you click on a download link for a software installer (*.exe), the server might respond with Content-Type: application/octet-stream to ensure the file is downloaded rather than displayed in the browser.</p> </li> <li> <p>Unknown or Generic Data: It's used when the server cannot determine the specific type of data being sent, or when the data is a raw binary file without a specific MIME type.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#example-scenarios","title":"Example Scenarios:","text":"<ul> <li> <p>File Uploads: When uploading a file to a server, if the server does not know the exact MIME type of the file (due to limitations or other reasons), it might use application/octet-stream as a fallback.</p> </li> <li> <p>Custom Applications: Some custom applications may use this MIME type to handle proprietary binary data formats that are not standardized or recognized by common MIME types.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#handling-applicationoctet-stream-in-web-development","title":"Handling application/octet-stream in Web Development:","text":"<ul> <li> <p>Client-side Handling: When handling files with this MIME type in a web application, ensure proper handling of binary data. Use techniques such as Blob, FileReader, or libraries like FileSaver.js to manage and save the file on the client side.</p> </li> <li> <p>Server-side Considerations: Servers may need to set appropriate headers (Content-Type, Content-Disposition) to ensure correct behavior when serving binary files to clients.</p> </li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#example-usage","title":"Example Usage:","text":"<p>Here's an example of how a server might respond with <code>application/octet-stream</code> for a file download:</p> <p>In this response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/octet-stream\nContent-Disposition: attachment; filename=\"example.zip\"\nContent-Length: 12345\n\n... (binary data follows)\n</code></pre> <p>In this response:</p> <ul> <li>Content-Type: <code>application/octet-stream</code> indicates that the data being sent is binary.</li> <li>Content-Disposition: <code>attachment; filename=\"example.zip\"</code> suggests that the browser should prompt the user to download the file with the name example.zip.</li> </ul>"},{"location":"office/ispl/documentation/alldocs/excel-api-data/#conclusion","title":"Conclusion:","text":"<p><code>application/octet-stream</code> is a versatile MIME type used for transmitting arbitrary binary data. It's particularly useful for ensuring files are downloaded rather than displayed in the browser, and for scenarios where the specific type of data is not well-defined or known in advance.</p>"},{"location":"office/ispl/documentation/alldocs/fingerprint/","title":"Fingerprint","text":"<p>TabOne.js</p> <pre><code>const TabOne = ({\n    onFinish1,\n    startDate,\n    defaultDate,\n    setStartDate,\n    loader,\n    setLoader,\n    attendancePaginationResponse,\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    // added\n    const disabledDate = (current) =&gt; {\n        return current &amp;&amp; current &gt;= moment().startOf('day');\n    };\n\n\n    return (\n        &lt;&gt;\n            {isRoleHr ? (\n                &lt;Form form={formTest} onFinish={handleFinish} style={{ padding: \"10px 17px\"}}&gt;\n                    &lt;div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}&gt;\n                        &lt;div&gt;&lt;/div&gt;\n                        &lt;div\n                            className=\"\"\n                            style={{\n                            display: \"flex\",\n                            }}\n                        &gt;\n                            &lt;Form.Item name=\"date\"&gt;\n                                {/* added disabledDate */}\n                                &lt;RangePicker disabledDate={disabledDate} /&gt;\n                            &lt;/Form.Item&gt;\n                            &lt;Button\n                                type=\"primary\"\n                                style={{\n                                    height: \"100%\",\n                                    marginLeft: \"10px\",\n                                }}\n                                htmlType=\"submit\"\n                                loading={loadingApi}\n                            &gt;\n                                Fetch Data\n                            &lt;/Button&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/Form&gt;\n            ) : null}\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/","title":"GroupChat InternalMessage","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat","title":"groupchat","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-checkbox-in-dashboard","title":"Groupchat checkbox in dashboard","text":"index.js src/components/internalMNew/index.js<pre><code>export default function InternalM(props) {\n    ...\n    const [isGroupChat, setIsGroupChat] = useState(false);\n    ...\n\n    const handleSaveContinue = (values, formType) =&gt; {\n        let body = {\n            isGroupChat: isGroupChat,\n        }\n    }\n\n\n    return (\n        &lt;&gt;\n            &lt;Form\n                form={form}\n                className=\"drawer-form-wrapper internal_message_section_email_section\"\n            &gt;\n            &lt;div className=\"internal_message_popup_email_section\"&gt;\n                &lt;div className=\"left-chat-action-btn\" style={{ marginLeft: \"14px\" }}&gt;\n                    &lt;div className=\"chat-box-send-wrapper\"&gt;\n                    {quickEmailAddresponseLoading ? (\n                        antIcon\n                    ) : (\n                        &lt;Space\n                        // &lt;Dropdown.Button\n                        // overlay={centerTypeMenu}\n                        onClick={() =&gt; {\n                            handleSaveContinue();\n                        }}\n                        &gt;\n                        &lt;img src={sendIntM} alt=\"\" /&gt;\n\n                        {/* &lt;/Dropdown.Button&gt; */}\n                        &lt;/Space&gt;\n                    )}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n\n                &lt;div className=\"chat-action-btn\" style={{ display: \"flex\" }}&gt;\n\n                    {/* ADDED */}\n                    &lt;div&gt;\n                        &lt;Checkbox\n                            onChange={(e) =&gt; {\n                            setIsGroupChat(!isGroupChat);\n                            }}\n                        &gt;\n                            GroupChat\n                        &lt;/Checkbox&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-menu-added-in-the-mail","title":"GroupChat Menu added in the Mail","text":"Danger <pre><code>src/components/email/emailList.js\n</code></pre> <p>This file is not used, so don't change here.</p> Changes <pre><code>src/components/constants/index.js\nsrc/views/Email/EmailList.js\n</code></pre> constants/index.jsEmail/EmailList.js <pre><code>...\nexport const GROUP_CHAT = \"GroupChat\";\nexport const GROUP_CHAT_ARCHIEVE = \"GroupChatArchieve\";\n</code></pre> <pre><code>...\nconst handleEmailSharedDetails = (\n    accountHolderAppUserId,\n    msgCenterTypeName,\n    emailType\n) =&gt; {\n    setSelectedEmailType({\n        typeDisplayName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.SHAREDMAIL_INBOX\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n\n        typeSystemName:\n            msgCenterTypeName === \"all\"\n            ? CONSTANT.ALL\n            : msgCenterTypeName === CONSTANT.ALL\n            ? CONSTANT.INBOX\n            // added\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT\n            ? CONSTANT.GROUP_CHAT\n            : msgCenterTypeName === CONSTANT.GROUP_CHAT_ARCHIEVE\n            ? CONSTANT.GROUP_CHAT_ARCHIEVE\n    })\n}\n\n\n\n....\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === \"GroupChat\"\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;GroupChat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n        {mailPaginationCount?.archievedCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.archievedCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n\n&lt;Menu.Divider style={{ marginTop: 15 }} /&gt;\n</code></pre> Tip <pre><code>GroupChat.jsx\ngroupChatModal.jsx\ngroupChatPresentation.jsx\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#counter","title":"Counter","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#display-the-counter-on-the-groupchat-title-side","title":"Display the Counter on the Groupchat Title side","text":"EmailList.js<pre><code>// page-number: 3678\n? Number(\n    nullChecker(\n    mailPaginationCount?.circularInboxCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n    mailPaginationCount?.groupChatCount?.all,\n    \"all\"\n    )\n).toLocaleString()\n</code></pre> Updated<pre><code>: selectedMailTypeAndMailData?.typeSystemName === \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupChatCount?.all,\n        \"all\"\n    )\n).toLocaleString() || 0\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#counter-on-all-internal-tabpane","title":"Counter on <code>All</code> &amp; <code>Internal</code> Tabpane","text":"EmailList.js<pre><code>// All &amp; Internal Tab pane Counter:\n// pg: 4140: \n\n? Number(\n    nullChecker(\n        mailPaginationCount?.tenderBusinessCount\n        ?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n\n// ADDED\n: selectedMailTypeAndMailData?.typeSystemName ===\n    \"groupchat\"\n? Number(\n    nullChecker(\n        mailPaginationCount?.groupchat?.internal,\n        \"unread\"\n    )\n    ).toLocaleString()\n: \"\"\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#email-messagecentertype-api","title":"Email messagecenterType API","text":"<pre><code>import { emailPaginationCount } from \"services/redux/email/mailMessageCenter/action\";\n\nconst { mailPaginationCount } = useSelector(\n    (state) =&gt; state.mailMessageCenter\n);\n\n\nuseEffect(() =&gt; {\n    dispatch(emailPaginationCount({ messagecenterType: \"All\" }));\n  }, []);\n\n\n// https://cqnoval.info.com.np/api/app/mailMessageCenter/MailMessageCenterPaginationCountersByType?messagecenterType=All\n</code></pre> GroupChat.jsx<pre><code>import { getMailMessageCenterPagination } from \"services/redux/email/mailMessageCenter/action\";\n\nconst getGroupChat = (\n    MaxResultCount = 5,\n    SkipCount = 0,\n    loadMore = false,\n    MessageCenterTypeName = \"groupchat\",\n) =&gt; {\n    let appendUrl = `skipCount=${SkipCount}&amp;maxResultCount=${MaxResultCount}`;\n    if (MessageCenterTypeName) {\n        appendUrl += `&amp;messageCenterTypeName=${MessageCenterTypeName}`;\n        }\n    dispatch(getMailMessageCenterPagination(appendUrl, loadMore));\n}\n\n\nuseEffect(() =&gt; {\n    getGroupChat();\n}, [])\n\n\n// API\nexport class MailMessageCenterService {\n  async getMailMessageCenterPagination(query, source) {\n    let url = `${appBaseUrl}/mailMessageCenter/mailMessageCenterPagination?${query}`;\n    let data = await getServiceMail(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#redux-add-counter-all-in-reducer","title":"REDUX ADD Counter all in REDUCER","text":"reducer.js <p>services/redux/email/mailMessageCenter/reducer.js</p> <pre><code>const INITIAL_STATE = {\n    ...\n    allCount: null,\n    toCount: null,\n    fromCount: null,\n    ccCount: null,\n    bccCount: null,\n    pendingCount: null,\n    archievedCount: null,\n    trashCount: null,\n    junkCount: null,\n    flagCount: null,\n    drafCount: null,\n    outBoxCount: null,\n    approvalCount: null,\n    loanCount: null,\n    leaveCount: null,\n    procurementCount: null,\n    tenderBusinessCount: null,\n    circularInboxCount: null,\n    circularSentCount: null,\n    // added\n    groupChatCount: null,\n}\n\n\nlet approvalCount = \"\";\nlet allCount = \"\";\nlet toCount = \"\";\nlet fromCount = \"\";\nlet ccCount = \"\";\nlet bccCount = \"\";\nlet pendingCount = \"\";\nlet archievedCount = \"\";\nlet trashCount = \"\";\nlet junkCount = \"\";\nlet flagCount = \"\";\nlet drafCount = \"\";\nlet outBoxCount = \"\";\nlet loanCount = \"\";\nlet leaveCount = \"\";\nlet procurementCount = \"\";\nlet tenderBusinessCount = \"\";\nlet circularInboxCount = \"\";\nlet circularSentCount = \"\";\n// added\nlet groupChatCount = \"\";\n\n\nexport default function mailMessageCenterReducer(\n    state = INITIAL_STATE,\n    action\n)\n{\n    switch (action.type) {\n        case EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_INIT:\n            ...\n\n        ...\n        //pagination count\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_INIT:\n        return {\n            ...state,\n            mailPaginationCountLoading: true,\n        };\n        case EMAIL_TYPES.MAIL_PAGINATION_COUNT_SUCCESS:\n        switch (action.record) {\n            case \"All\":\n                allCount = action.payload;\n                break;\n\n            case \"From\":\n                fromCount = action.payload;\n                break;\n\n            // added\n            case \"GroupChat\":\n                groupChatCount = action.payload;\n                break;\n            default:\n            ...\n        }\n\n        return {\n            ...state,\n            mailPaginationCount: {\n                allCount: allCount,\n                toCount: toCount,\n                fromCount: fromCount,\n                ccCount: ccCount,\n                bccCount: bccCount,\n                pendingCount: pendingCount,\n                archievedCount: archievedCount,\n                trashCount: trashCount,\n                junkCount: junkCount,\n                flagCount: flagCount,\n                drafCount: drafCount,\n                outBoxCount: outBoxCount,\n                approvalCount: approvalCount,\n                loanCount: loanCount,\n                leaveCount: leaveCount,\n                procurementCount: procurementCount,\n                tenderBusinessCount: tenderBusinessCount,\n                circularInboxCount: circularInboxCount,\n                circularSentCount: circularSentCount,\n                // added\n                groupChatCount: groupChatCount\n            },\n            allCount: allCount,\n            toCount: toCount,\n            fromCount: fromCount,\n            ccCount: ccCount,\n            bccCount: bccCount,\n            pendingCount: pendingCount,\n            archievedCount: archievedCount,\n            trashCount: trashCount,\n            junkCount: junkCount,\n            flagCount: flagCount,\n            drafCount: drafCount,\n            outBoxCount: outBoxCount,\n            approvalCount: approvalCount,\n            loanCount: loanCount,\n            leaveCount: leaveCount,\n            procurementCount: procurementCount,\n            tenderBusinessCount: tenderBusinessCount,\n            circularInboxCount: circularInboxCount,\n            circularSentCount: circularSentCount,\n                // added\n            groupChatCount: groupChatCount,\n            mailPaginationCountLoading: false,\n        };\n    }\n}\n</code></pre> Changes EmailList.js<pre><code>// pagenum: 450\nuseEffect(() =&gt; {\n    if (emailType !== \"Business\") {\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.ALL }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularInbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"CircularSent\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"From\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"To\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Cc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Business\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Bcc\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Pending\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Archived\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Trash\" }));\n        dispatch(emailPaginationCount({ messagecenterType: CONSTANT.JUNK }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Specialflag1\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Draft\" }));\n        dispatch(emailPaginationCount({ messagecenterType: \"Outbox\" }));\n        // added\n        dispatch(emailPaginationCount({ messagecenterType: \"GroupChat\" }));\n       },\n    }   \n[\n// replyInstanceMessageResp,\n// changeEmailStatusTypeRespLoading,\n// selectedMailTypeAndMailData,\n]);\n\n\n//\n\n&lt;Menu.Item\n    key=\"GroupChat4\"\n    icon={&lt;Avatar src={pending} shape=\"square\" /&gt;}\n    className={`sidebars__body--item ${\n    selectedEmailType.typeDisplayName === CONSTANT.GROUP_CHAT\n        ? \"active\"\n        : \"\"\n    }`}\n    onClick={() =&gt; {\n    handleEmailSharedDetails(\"\", CONSTANT.GROUP_CHAT);\n    }}\n&gt;\n    &lt;div className=\"mailbox-child-title-wrapper\"&gt;\n    &lt;span className=\"mail-child-title\"&gt;Group Chat&lt;/span&gt;\n    &lt;span className=\"mail-child-counter\"&gt;\n\n        {console.log(\"mailPaginationCount\", mailPaginationCount)}\n\n        {mailPaginationCount?.groupChatCount?.all?.unread +\n        \"/\" +\n        Number(\n            nullChecker(\n            mailPaginationCount?.groupChatCount?.all,\n            \"all\"\n            )\n        )?.toLocaleString()}\n    &lt;/span&gt;\n    &lt;/div&gt;\n&lt;/Menu.Item&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#groupchat-isarchive-remove-item","title":"GROUPCHAT IsArchive Remove Item","text":"<p>it removes the item but need to hit the api: <code>getMailMessageCenterPagination</code></p> <pre><code>export const getMailMessageCenterPagination = (q, loadMore, data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION, data));\n    const response =\n      await mailMessageCenterService.getMailMessageCenterPagination(q, source);\n    if (response?.cancelApi === false) return;\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION,\n          response.data,\n          loadMore,\n          data\n        )\n      );\n      dispatch(finish(EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n      message.error(response.errorMessage);\n    }\n  };\n};\n</code></pre> reducer.jsx reducer.jsx<pre><code>// redux/email/mailMessageCenter/reducer.js\n// page number: 202\n\ncase EMAIL_TYPES.MAIL_MESSAGE_CENTER_PAGINATION_UPDATE:\n  let newData = state.mailMessageCenterPagination.items.map((email) =&gt; {\n    if (\n      email.applicationTypeSystemName === \"EMail\" ||\n      email.applicationTypeSystemName === \"QuickMessage\" ||\n      email.applicationTypeSystemName === \"Leave\" ||\n      email.applicationTypeSystemName == \"Loan\" ||\n      email.applicationTypeSystemName === \"Business\" ||\n      email.applicationTypeSystemName === \"Document\" ||\n      email.applicationTypeSystemName === \"TODO\" ||\n      email.applicationTypeSystemName === \"Todo\" ||\n      email.applicationTypeSystemName === \"Procurement\" ||\n      \"Loan\"\n    ) {\n      if (action.query.messageCenterId === email.id) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    } else if (email.applicationTypeSystemName === \"InstanceMessage\") {\n      if (\n        action.query.messageCenterId === email.instanceMainMessageCenterId\n      ) {\n        return {\n          changeEmailStatusTypeResp: true,\n          ...email,\n          ...action.emailStatus,\n        };\n      } else {\n        return {\n          ...email,\n        };\n      }\n    }\n  });\n\n  let filterJunk = filterNewData.filter((data) =&gt;\n    action.emailStatus.isJunk ? !data.isJunk : data.isJunk\n  );\n  {/* ADDED */}\n  let filterChatArchive = filterNewData.filter((data) =&gt;\n    action.emailStatus.isGroupChatArchive ? !data.isGroupChatArchive : data.isGroupChatArchive\n  );\n\n\n  return {\n    ...state,\n    getResponseStatus: action.query,\n    mailMessageCenterPagination: {\n      items:\n        action.query.participantStatusName === \"Trash\"\n          ? filterTrashData\n          : action.query.participantStatusName === \"doubleTrash\"\n            ? doubleTrash\n            : action.query.participantStatusName === \"Archived\"\n              ? filterArchieve\n              : action.query.participantStatusName === \"Pending\"\n                ? filterPending\n                : action.query.participantStatusName === \"Junk\"\n                  ? filterJunk\n\n                  {/* ADDED */}\n                  :action.query.participantStatusName === \"GroupChatArchive\"\n                  ? filterChatArchive\n                  {/*----*/}\n\n\n                  : action.query.participantStatusName === \"Special1\"\n                    ? filterLowPriorityMail\n                    : filterNewData,\n      totalCount: state.mailMessageCenterPagination.totalCount,\n    },\n    mailMessageCenterPaginationLoading: false,\n  };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#mailmessagecenterheaderjs","title":"MailMessageCenterHeader.js","text":"ToGroupChat Icon Added Email/Includes/MailMessageCenterHeader.js<pre><code>{\n    (selectedMailTypeAndMailData?.typeSystemName === FROM ||\n    selectedMailTypeAndMailData?.typeSystemName === INBOX) \n\n    // or \n    // selectedMailTypeAndMailData?.typeSystemName === FROM\n\n    &amp;&amp; (\n    &lt;&gt;\n        &lt;div\n        className={`emailDetails__header--icon loader--action-wrapper ${(isEmpty(currentSelectedMailMessage) ||\n            multipleSelectedEmail?.length &gt; 0) &amp;&amp;\n            \"disabled\"\n            } ${trashLoader &amp;&amp; \"disabled\"}`}\n        onClick={() =&gt; {\n            if (!isEmpty(selectedMailTypeAndMailData)) {\n                changeEmailStatus(\n                  { \n                    isGroupChatSwitch: true,\n                    isGroupChatSwitch_InstanceMessage: true,\n                    groupChatSwitch: GROUP_CHAT_SWITCH\n                  }\n                )\n            }\n        }}\n        &gt;\n        &lt;Image src={chatTransfer} shape=\"square\" preview={false} /&gt;\n        &lt;p&gt;\n            ToGroupChat\n        &lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/&gt;\n)}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-internal-message/#componentsconstants","title":"components/constants","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-module/","title":"GroupChat Module","text":""},{"location":"office/ispl/documentation/alldocs/groupchat-module/#group-chat-module","title":"Group Chat Module","text":"Navbar.js <pre><code>// pageNumber: 693\n\n{!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox &amp;&amp; (\n    &lt;Link\n    to=\"/groupchat\"\n    onClick={() =&gt; setState({ ...state, basepath: \"/groupchat\" })}\n    className={`icons__wrapper ${\n        state.basePath === \"groupchat\" ? \"active\" : \"\"\n    }`}\n    &gt;\n        &lt;img src={Calendar} alt=\"\" /&gt;\n        &lt;span className=\"icons__wrapper--name\"&gt;Group Chat&lt;/span&gt;\n    &lt;/Link&gt;\n)}\n</code></pre> Routes.js <pre><code>&lt;AuthRoute path=\"/groupchat\" exact&gt;\n    {!LimitedRoleDemo &amp;&amp; !isLimitedRoleMailBox ? \n    &lt;GroupChat /&gt; : &lt;NotFound /&gt;\n    }\n&lt;/AuthRoute&gt;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/groupchat-module/#infinite-scrolling","title":"Infinite Scrolling","text":"Settings setCurrentPage Better CodeOld Code <pre><code>useEffect(() =&gt; {\n    if (!isEmpty(groupChatTitlePaginationResp?.items)) {\n        setGroupData(groupChatTitlePaginationResp.items);\n\n        // Ensure proper calculation of the current page\n        const totalItems = groupChatTitlePaginationResp.items.length;\n        const newCurrentPage = Math.ceil(totalItems / pageSize);\n\n        console.log(\"Total Items: \", totalItems);\n        console.log(\"New Current Page: \", newCurrentPage);\n\n        setCurrentPage(newCurrentPage);\n    } else {\n        setGroupData([]);\n        setCurrentPage(1);\n    }\n}, [groupChatTitlePaginationResp, pageSize]);\n</code></pre> <pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/import-excel-file/","title":"Import Excel File","text":""},{"location":"office/ispl/documentation/alldocs/import-excel-file/#import-excel-file","title":"Import Excel File","text":"functionapiFile remanentCall.js<pre><code>// upload Contact attendence\nexport const uploadContactExcel = (resp) =&gt; {\nreturn Axios.post(appBaseUrl + '/importExcelFile');\n}\n</code></pre> <pre><code>\n</code></pre> UniversalFileUpload.js<pre><code>\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/instance-and-internal-message/","title":"Instance and Internal Message","text":"Instance <code>dashboard</code> and Internal Message Chat <pre><code>const {\n    instanceChatCenterPagination,\n    instanceChatCenterPaginationLoading,\n    replyInstanceMessageResp,\n    replyInstanceMessageRespLoading,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\nconst {\n    instanceChatAddResp,\n    instanceChatAddRespLoading\n} = useSelector((state) =&gt; state.instanceChatCenter);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/internal-message/","title":"Internal Message","text":""},{"location":"office/ispl/documentation/alldocs/internal-message/#internal-message","title":"Internal Message","text":"<p>Note</p> Companiesindex Companies.js<pre><code>// views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js\n\nimport { Modal } from \"antd\";\nimport ChatDetails from \"views/GlobalEmailChat\";\n\n// Chat State\nconst [taskId, setTaskId] = useState();\nconst [showChat, setShowChat] = useState(false);\nconst [chatHeight, setChatHeight] = useState(false);\nconst [smallChatHeight, setSmallChatHeight] = useState(false);\nconst [chatBox, setchatBox] = useState(true);\nconst [hideInternalMessage, setHideInternalMessage] = useState(false);\nconst [todoDetails, setTodoDetails] = useState([]);\n// upto here\n\nconst handleCircularModal = () =&gt; {\n  setIsCircularModalOpen(false);\n  setHideInternalMessage(true);\n};\n\nreturn (\n  &lt;&gt;\n    &lt;Button type=\"primary\" onClick={() =&gt; setIsCircularModalOpen(true)}&gt;\n      Send for Approval\n    &lt;/Button&gt;\n\n    {/* Internal Message Model for Approval */}\n    &lt;Modal\n      title=\"Circular Planning\"\n      visible={isCircularModalOpen}\n      onCancel={handleCircularModal}\n      footer={null}\n    &gt;\n      &lt;ChatDetails\n        // allToDoEvents={allToDoEvents}\n        taskId={getDetails?.referenceId}\n        setShowChat={setShowChat}\n        setSmallChatHeight={setSmallChatHeight}\n        setChatHeight={setChatHeight}\n        chatHeight={chatHeight}\n        smallChatHeight={smallChatHeight}\n        setchatBox={setchatBox}\n        chatBox={chatBox}\n        // module=\"Task\"\n        origin=\"Dashboard\"\n        module=\"CEAD_WeeklyReport\"\n        // origin=\"tender\"\n        setHideInternalMessage={setHideInternalMessage}\n        hideInternalMessage={hideInternalMessage}\n        todoDetails={todoDetails}\n        isPrivate={false}\n      /&gt;\n    &lt;/Modal&gt;\n  &lt;/&gt;\n);\n</code></pre> index.js<pre><code>// views/GlobalEmailChat/index.js\n\nconst ChatDetails = (props) =&gt; {\n  const applicationTypeListing = async () =&gt; {\n    try {\n      const resp = await messageApplicationTypeListing();\n      console.log(\"resp: \", resp);\n      if (resp &amp;&amp; resp.status == 200) {\n        resp?.data?.map((type) =&gt; {\n          if (module === \"Task\" &amp;&amp; type.displayName === \"Task\") {\n            setApplicationType(type.id);\n          } else if (module === \"Approvals\" &amp;&amp; type.displayName === \"Leave\") {\n            setApplicationType(type.id);\n          } else if (\n            module === \"CEAD_WeeklyReport\" &amp;&amp;\n            type.displayName === \"CEAD Weekly Report\"\n          ) {\n            setApplicationType(type.id);\n          }\n\n          // if your dispaly &amp; module is new add here\n        });\n      }\n    } catch (error) {\n      message.error(\"Failure\");\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/internal-message/#internal-message-components","title":"Internal Message Components","text":"<p>To send only internal message use this components</p> <p>components</p> <p>InternalMNew</p> <p>index.js</p>"},{"location":"office/ispl/documentation/alldocs/internal-message/#to-get-all-the-internal-chat-pagination","title":"To get all the Internal Chat Pagination","text":"<pre><code>// IMPORT \nimport { getInstanceChatCenterPagination } from \"services/redux/instanceChat/action\";\nimport { replyInstanceMessage } from \"services/redux/email/instanceMessageCenter/action\";\n\n// SELECTOR DASHBOARD\nconst { instanceChatCenterPagination, instanceChatCenterPaginationLoading } =\n    useSelector((state) =&gt; state.instanceChatCenter);\n\n// MAIL MESSAGE CENTER\nconst {\n  instanceMessageCenterPagination,\n  instanceMessageCenterPaginationLoading,\n  replyInstanceMessageResp,\n} = useSelector((state) =&gt; state.instanceMessageCenter);\n\n// ACTION\nexport const getInstanceChatCenterPagination = (query) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    const response =\n      await instanceMessageChatServices.getInstanceChatCenterPagination(query);\n    dispatch(finish(INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION));\n    if (response.isSuccess) {\n      dispatch(\n        success(\n          INSTANCE_CHAT_TYPES.INSTANCE_CHAT_CENTER_PAGINATION,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\n\n// API\nexport class InstanceMessageChatServices {\n  instanceChatAdd(body) {\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatAdd`;\n    let data = postService(url, body, \"post\");\n    return data;\n  }\n\n  getInstanceChatCenterPagination(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/mailMessageCenter/instanceChatPagination?${query}`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/","title":"Login","text":"<p>Note</p> late attendanceleave typeindex lateAttendence.js<pre><code>...\nimport { useEffect, useState } from \"react\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\"\nimport { validateReason } from \"utils/validateReason\";\n\n\nconst { Modal, Form, Input, Spin, Alert, Select, message } = require(\"antd\");\nconst { Option } = Select;\n\nconst LateAttendence = ({id,data,leaveReasonPopUp,leaveStartdate,leaveEndDate})=&gt;{\n\n    ...\n    const [uploaders, setUploaders] = useState();\n    const [deafultLeaveType, setDefaultLeaveType] = useState([]);\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(remainingLeaveApplicationTypesListing)) {\n            const casualLeave = remainingLeaveApplicationTypesListing.find(obj =&gt; obj.leaveApplicationTypeDto.leaveTypeName === \"Casual\");\n            if(casualLeave?.leaveApplicationTypeDto?.id) {\n                form.setFieldsValue({\n                    leaveApplicationTypeId: casualLeave?.leaveApplicationTypeDto?.id,\n                })\n            }\n        }\n    }, [remainingLeaveApplicationTypesListing])\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n\n    ...\n\n    const startDate = moment(leaveStartdate);\n    const endDate = moment(leaveEndDate);\n    const durationInDays = endDate.diff(startDate, 'days');\n\n    const handleChange = (value, option) =&gt; {\n        const selectedTitle = option ? option.title : null;\n        const selectedValue = option ? option.value : null;\n\n        setDefaultLeaveType({\n            title: selectedTitle,\n            value: selectedValue\n        });\n    }\n\n\n    return (\n        &lt;div className=\"late_login_popup\"&gt;\n            &lt;Modal visible={true} footer={null} closable ={false} wrapClassName=\"late_login_popup_modal\"&gt;\n                {data &amp;&amp; \n                &lt;div className=\"time_format_login_popup\"&gt;\n                    Login Time:{moment(data).format(\"YYYY-MM-DD,HH:mm:ss A\")}\n                &lt;/div&gt;}\n                &lt;div className=\"late_attendence_popup_header\"&gt;\n                    &lt;h3&gt;Kindly elaborate your reason for being late {leaveReasonPopUp &amp;&amp; \"and also leave reason\"} !!!&lt;/h3&gt;\n                &lt;/div&gt;\n                &lt;br/&gt;\n                &lt;Form form={form} onFinish={onFinish}&gt;\n                    &lt;div style={{fontWeight:\"600\"}}&gt;Late Reason :&lt;/div&gt;\n                    &lt;Form.Item \n                        rules={[\n                            // {\n                            //     required:true,\n                            //     message: \"Please justify the reason\",\n                            // },\n                            validateReason(10, 2)\n                        ]}\n                        name=\"attendanceLateReason\"\n                        // label=\"Late Reason\"\n                    &gt;\n                        &lt;TextArea rows={4} style={{fontSize:\"15px\"}}/&gt;\n                    &lt;/Form.Item&gt;\n                    {leaveReasonPopUp &amp;&amp; \n                    &lt;div&gt;\n                        &lt;div style={{fontWeight:\"600\",marginTop:\"10px\"}}&gt;You have taken leave from {moment(leaveStartdate).format(\"YYYY-MM-DD\")} to {moment(leaveEndDate).format(\"YYYY-MM-DD\")} &lt;/div&gt;\n                        &lt;div &gt;Leave Reason :&lt;/div&gt;\n                        &lt;Form.Item rules={[\n                                // {\n                                //     required:true,\n                                //     message: \"Please justify the reason\",\n                                // },\n                                validateReason(10, 2)\n                            ]}\n                            name=\"attendanceLeaveReason\"\n                        // label=\"Leave Reason\"\n                        // className=\"late_reason_submit\"\n                        &gt;\n                            &lt;TextArea rows={4} style={{fontSize:\"15px\"}} /&gt;\n                        &lt;/Form.Item&gt;\n                        &lt;Form.Item\n                            className=\"form__group\"\n                            label=\"Choose Leave Type\"\n                            name=\"leaveApplicationTypeId\"\n                            rules={[\n                                {\n                                required: true,\n                                },\n                            ]}\n                            style={{\n                                paddingTop: \"10px\"\n                            }}\n                        &gt;\n                            &lt;Select\n                                placeholder=\"Please select\"\n                                autoComplete=\"off\"\n                                onChange={(value, option) =&gt; handleChange(value, option)}\n                            &gt;\n                                {\n                                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                                        &lt;Option\n                                            value={leaveType.leaveApplicationTypeId}\n                                            title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                            key={i}&gt;\n                                            {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                                        &lt;/Option&gt;\n                                    ))}\n\n                            &lt;/Select&gt;\n                        &lt;/Form.Item&gt;\n\n                        {durationInDays &gt;= 3 &amp;&amp; deafultLeaveType?.title === \"Medical\"  ? (\n                            &lt;&gt;\n                            {uploaders?.map((u, i) =&gt; (\n                                &lt;Form.Item \n                                    className=\"form__group\" \n                                    name={[\"uploadedFileDtos\"]}\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: \"Please upload at least one file\",\n                                        },\n                                    ]} &gt;\n                                    &lt;ImageUploaderMultiple\n                                        name={u.name}\n                                        isMultipleFileAllowed={true}\n                                        id={u.id}\n                                        allowedExtensions={u.allowedExtensions}\n                                        index={i}\n                                        uploadedFileDtos={form.getFieldValue()}\n                                        formName=\"uploadedFileDtos\"\n                                        form={form}\n                                        callback={(e) =&gt; {\n                                            let olduploadedFileDtos = form.getFieldValue()\n                                                .uploadedFileDtos\n                                                ? [...form.getFieldValue().uploadedFileDtos]\n                                                : [];\n\n                                            let uploadedFileDtos = [...olduploadedFileDtos];\n                                            uploadedFileDtos.push(e);\n\n                                            form.setFieldsValue({\n                                                uploadedFileDtos,\n                                            });\n                                        }}\n                                    /&gt;\n                                &lt;/Form.Item&gt;\n                            ))} \n                            &lt;/&gt;\n                        ) : null}\n\n\n                    &lt;/div&gt;\n                    }\n                    &lt;Alert\n                        message=\"Informational Notes\"\n                        description=\"Give Valid Reason with 10 minimum character &amp; 2 words\"\n                        type=\"info\"\n                        showIcon\n                        style={{marginTop: '20px'}}\n                    /&gt;\n                &lt;div className=\"button_submit\"&gt;\n                    &lt;button className=\"late_Reason_Attendence_Submit\" htmlType=\"submit\"&gt;\n                    {attendenceAddNewResponseLoading ? &lt;Spin className=\"late_reason_spinner\"/&gt;: \"Submit\"}\n                    &lt;/button&gt;\n                &lt;/div&gt;\n                &lt;/Form&gt;\n            &lt;/Modal&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> leaveForm.js<pre><code>&lt;Form.Item\n    className=\"form__group\"\n    label=\"Choose Leave Type\"\n    name=\"leaveApplicationTypeId\"\n    rules={[\n        {\n            required: true,\n\n        },\n        ]}\n&gt;\n    &lt;Select\n        placeholder=\"Please select\"\n        autoComplete=\"off\"\n    &gt;\n        {\n            !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n            remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                &lt;Option\n                    value={leaveType.leaveApplicationTypeId}\n                    title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                    key={i}&gt;\n                    {leaveType?.leaveApplicationTypeDto?.leaveTypeName} {`(${leaveType?.remainingLeave &gt; 0 ? leaveType?.remainingLeave : 0} remaining out of ${leaveType?.allowedleave} days)`}\n                &lt;/Option&gt;\n            ))}\n\n    &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre> <pre><code>import { getRemainingLeaveApplicationTypesForEmployee } from \"../../../services/redux/requistions/leaveApplication/action\";\n\nconst {\n    leaveApplicationPagination,\n    leaveApplicationPaginationLoading,\n    remainingLeaveApplicationTypesListing,\n    remainingLeaveApplicationTypesListingLoading,\n    addLeaveApplicationResp,\n} = useSelector((state) =&gt; state.leaveApplication);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(addLeaveApplicationResp))\n    dispatch(getRemainingLeaveApplicationTypesForEmployee());\n}, [addLeaveApplicationResp]);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/#mail-leave-details","title":"Mail <code>leave Details</code>","text":"<p>Note</p> LeaveDetails.js<pre><code>import {\n    ...,\n    Select\n} from \"antd\";\n\nimport { getRemainingLeaveApplicationTypesForEmployee } from \"services/redux/requistions/leaveApplication/action\";\n\nconst { Option } = Select;\n\nconst LeaveDetails = ({ leaveAppId }) =&gt; {\n    ...\n\n    const {\n        remainingLeaveApplicationTypesListing,\n        remainingLeaveApplicationTypesListingLoading,\n        addLeaveApplicationResp,\n    } = useSelector((state) =&gt; state.leaveApplication);\n\n    useEffect(() =&gt; {\n        dispatch(getRemainingLeaveApplicationTypesForEmployee());\n    }, []);\n\n\n    useEffect(() =&gt; {\n        if(!isEmpty(details)) {\n        form.setFieldsValue({\n            leaveApplicationTypeIdxx: details?.leaveApplicationTypeId,\n        })\n\n        console.log(\"details: \", details)\n        }\n    }, [details])\n\n     return !isEmpty(details) ? (\n        &lt;div className=\"mail-leave-details\"&gt;\n            ...\n\n            &lt;Form.Item\n                className=\"form__group\"\n                label=\"Choose Leave Type\"\n                name=\"leaveApplicationTypeIdxx\"\n                // rules={[\n                //     {\n                //     required: true,\n                //     },\n                // ]}\n                style={{\n                    paddingTop: \"10px\"\n                }}\n            &gt;\n                &lt;Select\n                    placeholder=\"Please select\"\n                    autoComplete=\"off\"\n                &gt;\n                    {\n                    !isEmpty(remainingLeaveApplicationTypesListing) &amp;&amp;\n                    remainingLeaveApplicationTypesListing.map((leaveType, i) =&gt; (\n                        &lt;Option\n                        value={leaveType.leaveApplicationTypeId}\n                        title={leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        key={i}&gt;\n                        {leaveType?.leaveApplicationTypeDto?.leaveTypeName}\n                        &lt;/Option&gt;\n                    ))}\n                &lt;/Select&gt;\n            &lt;/Form.Item&gt;\n\n            ...\n        &lt;/div&gt;\n     )\n\n}\n\nexport default LeaveDetails;\n</code></pre> leaveForm.js<pre><code>import { message } from \"antd\";\n\nimport { dynamicFileLabelTypeUploaderDetailDtos } from \"services/remanentCalls\";\n\nimport ImageUploaderMultiple from \"components/shared/FileUploaderApproval\";\n\nconst LeaveForm = ({\n    remainingLeaveApplicationTypesListing,\n    setHideLeaveDrawer,\n}) =&gt; {\n\n    const [uploaders, setUploaders] = useState();\n\n    useEffect(() =&gt; {\n        fetchDynamicFileLabelTypeUploaderDetailDtos();\n    }, []);\n\n    const fetchDynamicFileLabelTypeUploaderDetailDtos = async () =&gt; {\n        const resp = await dynamicFileLabelTypeUploaderDetailDtos(\"Leave\").catch(\n            (err) =&gt; {\n                message.error(\"Failure\");\n            }\n        );\n\n        if (resp &amp;&amp; resp.status === 200) {\n            let uploaders = resp.data.filter(\n                (respData) =&gt; respData.code === \"LEAVEATTACHMENT\"\n            );\n            setUploaders(uploaders);\n        }\n    };\n\n    return (\n        &lt;&gt;\n            {uploaders?.map((u, i) =&gt; (\n                &lt;Form.Item className=\"form__group\" name={[\"uploadedFileDtos\"]} &gt;\n                    &lt;ImageUploaderMultiple\n                        name={u.name}\n                        isMultipleFileAllowed={true}\n                        id={u.id}\n                        allowedExtensions={u.allowedExtensions}\n                        index={i}\n                        uploadedFileDtos={form.getFieldValue()}\n                        formName=\"uploadedFileDtos\"\n                        form={form}\n                        callback={(e) =&gt; {\n                            let olduploadedFileDtos = form.getFieldValue()\n                                .uploadedFileDtos\n                                ? [...form.getFieldValue().uploadedFileDtos]\n                                : [];\n\n                            let uploadedFileDtos = [...olduploadedFileDtos];\n                            uploadedFileDtos.push(e);\n\n                            form.setFieldsValue({\n                                uploadedFileDtos,\n                            });\n                        }}\n                    /&gt;\n                &lt;/Form.Item&gt;\n            ))} \n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/login/#utils","title":"utils","text":"<p>Tip</p> validate Reason <pre><code>export const validateReason = (minChars, minWords) =&gt; ({\n    validator: (_, value) =&gt; {\n    const words = value.trim().split(/\\s+/);\n    const characterCount = value.trim().length;\n    const wordCount = words.length;\n\n    if (characterCount &lt; minChars || wordCount &lt; minWords) {\n        return Promise.reject(\n        new Error(`Please justify the reason with at least ${minChars} characters and ${minWords} words`)\n        );\n    }\n    return Promise.resolve();\n    },\n});\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/","title":"Mail","text":"<p>While searching the reference in the <code>compose mail</code>, it doesn't show all the reference items?</p> <p>ComposeEmailDrawer</p> ComposeEmailDrawer.js<pre><code>onSearch={(value) =&gt; {\n    setSearchValueReference(value);\n    setReferencevalue(value);\n    setFilterParticipantType(\"REF\");\n    handleFilter(value, \"REF\");\n}}\n&lt;Form \n    name = \"participantTos\"/&gt;\nconst displayMessages = (status) = {}\n\n// page number: 3710\nreturn (\n    &lt;Option\n        key={index}\n        // key={data.id}\n        value={data.title}\n        // className={index}\n        // id={index}\n        label={[data.code, data.title]}\n    &gt;\n        &lt;div\n        className=\"compose-reference-wrapper\"\n        // key={index}\n        key={data.id}\n        &gt;\n        &lt;div\n            className=\"compose-references-code\"\n            title={data?.code}\n        &gt;\n            &lt;span&gt;{data?.code}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-title\"\n            title={data?.title}\n        &gt;\n            &lt;span&gt; {data?.title}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;div\n            className=\"compose-references-description\"\n            title={data?.description}\n        &gt;\n            &lt;span&gt;{data?.description}&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/Option&gt;\n);\n</code></pre> <p>Solved</p> Solved BasicSolved Advanced ComposeEmailDrawer.js<pre><code>// const isSelected = mailRefDtos.includes(data.code);\n// also add this \nconst isSelected = mailRefDtos.includes(`${data.code}-${data.title}`);\n&lt;Option\n    key={index}\n    //value={data.title}\n    // add this\n    value={`${data.code}-${data.title}`}\n    label={[data.code, data.title]}\n&gt;\n&lt;/Option&gt;\n</code></pre> ComposeEmailDrawer.js<pre><code>&lt;div className=\"email-text\"&gt;Reference&lt;/div&gt;\n&lt;Form.Item\n    className=\"form__group compose-ref-select\"\n    name=\"mailMessageReferenceDtos\"\n    rules={[\n        {\n            required: closeWindow === \"newDraft\" ? false : true,\n            message: \"\",\n        },\n    ]}\n&gt;\n    &lt;Select\n        onSelect={(value) =&gt; {\n            {/* OLD CODE */}\n            const uniqueArray = Array.from(\n                new Set([...mailRefDtos, value])\n            );\n\n            {/* NEW CODE */}\n            const uniqueArray = Array.from(\n                new Set([\n                    // Extract substring before underscore\n                    ...mailRefDtos.map(dto =&gt; dto.split('_')[0]),\n\n                    // Extract substring before underscore from the new value\n                    value.split('_')[0]\n                ])\n            );\n        })}\n    /&gt;\n&lt;/Form.Item&gt;\n\n\n{/* ADDED THIS CODE */}\nconst isSelected = mailRefDtos.includes(data?.code);\n\nreturn (\n    &lt;Option\n        key={index}\n        {/* ADDED UNDERSCORE */}\n        value={`${data.code}_${data.title}`}\n        label={[data.code, data.title]}\n    &gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#dashboard-events","title":"Dashboard Events","text":"PublicEvents Home/Events/PublicEvents.js<pre><code>// added Dropdown, Menu\nimport { Form, Image, Modal, Skeleton, Tooltip, Dropdown, Menu } from \"antd\";\n\nconst PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n\n    // added\n    const [openEventModal, setOpenEventModal] = useState(false);\n\n    const menu = (\n        &lt;Menu&gt;\n        &lt;Menu.Item\n            onClick={() =&gt; {\n                setOpenEventModal(true);\n            }}\n        &gt;\n            Holiday\n        &lt;/Menu.Item&gt;\n        &lt;/Menu&gt;\n    );\n\n\n    return(\n        &lt;&gt;\n            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                &lt;h4 className=\"dashboards__body--title\"&gt;Events&lt;/h4&gt;\n                &lt;div className=\"\"&gt;\n                    &lt;WechatOutlined\n                        onClick={() =&gt; {\n                            setInternalVisible(true);\n                        }}\n                    /&gt;\n\n                    {/* added */}\n                    &lt;Dropdown.Button\n                        overlay={menu}\n                        className=\"new_menu\"\n                        style={{\n                            marginBottom: \"5px\",\n                            width: \"20px\",\n                            border: \"none\",\n                            marginLeft: \"2px\",\n                        }}\n                    /&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#dashboard-flip-card","title":"Dashboard Flip Card","text":"flip-card tender.js<pre><code>import ProjectsLists from \"./DashboardComponents/ProjectsLists\";\n\nconst TenderLists = ({ classNames }) =&gt; {\n    const [rotate, setRotate] = useState(0);\n\n\n    return (\n        &lt;div className=\"flip-card\" style={{ height: \"510px\" }}&gt;\n            &lt;div\n                class=\"flip-card-inner\"\n                style={{ transform: `rotateY(${rotate * 180}deg)` }}\n            &gt;\n\n                {/* FRONT */}\n                &lt;div className=\"flip-card-front\"&gt;\n                    &lt;div\n                        className={\"dashboards__tenderlist dashboards__body \" + classNames}\n                        style={{ height: \"495px\" }}\n                    &gt;\n                        &lt;div className=\"dashboards__bodyWrap\"&gt;\n                        &lt;h4 className=\"dashboards__body--title\"&gt;\n                            Tenders/Projects\n                            &lt;span\n                                onClick={() =&gt; {\n                                    setRotate(rotate + 1);\n                                }}\n                                style={{\n                                    marginLeft: \"10px\",\n                                    height: \"30px\",\n                                    marginBottom: \"10px\",\n                                }}\n                            &gt;\n                                &lt;img\n                                    src=\"./assets/svg/toggle-arrow.svg\"\n                                    height={15}\n                                    alt=\"complete\"\n                                /&gt;\n                            &lt;/span&gt;\n                        &lt;/h4&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                {/* BACK */}\n                &lt;div className=\"flip-card-back\"&gt;\n                    &lt;div\n                        style={{\n                        backfaceVisibility: \"hidden\",\n                        }}\n                    &gt;\n                        &lt;div\n                            className={\n                                \"dashboards__tenderlist dashboards__body \" + classNames\n                            }\n                            &gt;\n                            &lt;div className=\"dashboards__bodyWrap\"&gt;\n                                &lt;h4 className=\"dashboards__body--title\"&gt;\n                                Projects/Tenders\n                                &lt;span\n                                    onClick={() =&gt; {\n                                        setRotate(rotate + 1);\n                                    }}\n                                    style={{\n                                        marginLeft: \"10px\",\n                                        height: \"30px\",\n                                        marginBottom: \"10px\",\n                                    }}\n                                &gt;\n                                    &lt;img\n                                        src=\"./assets/svg/toggle-arrow.svg\"\n                                        height={15}\n                                        alt=\"complete\"\n                                    /&gt;\n                                &lt;/span&gt;\n                                &lt;/h4&gt;\n                            &lt;/div&gt;\n\n                            {/* Components */}\n                            &lt;ProjectsLists /&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#email-issue","title":"Email Issue","text":"<p>while <code>reply all</code>, <code>reply</code>, <code>forward</code> the application crashed</p> <ul> <li><code>/email-compose?applicationType=newEmail</code> - working</li> <li><code>/email-compose?applicationType=reply</code> - not working</li> <li><code>/email-compose?applicationType=replyall</code> - not working</li> <li><code>/email-compose?applicationType=forward</code> - not working</li> </ul> <p>Danger</p> displayMessagescontactQuickAddEmailRespsonsecurrentSelectedMessage useEffectComposeEmailDrawer <pre><code>useEffect(() =&gt; {\n    {/* DEBUG THIS WHEN NEW CONTACT ADDED THIS BECOMES EMPTY */}\n    console.log(\"participantTypeTos: \", participantTypeTos)\n\n    if (applicationTypeStatus) {\n        if (applicationTypeStatus === \"reply\") {\n\n            // IMPORTANT\n            displayMessages(applicationTypeStatus);\n\n            form.setFieldsValue({\n                participantCCs: [],\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n            });\n        } else if (applicationTypeStatus === \"replyall\") {\n            form.setFieldsValue({\n                participantCCs: newCCs?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                participantTos: participantTypeTos?.map((typeTos) =&gt; {\n                return typeTos;\n                }),\n                uploadedFileDtos: [],\n            });\n        }\n\n        // others ...\n    }\n})\n</code></pre> ComposeEmailDrawer.js<pre><code>const displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom = currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n    let participantTypeTos =\n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        });\n    let participantTypeCCs = !isEmpty(\n        currentSelectedMailMessage?.applicationTypeDetails?.cCs\n        )\n        ? currentSelectedMailMessage?.applicationTypeDetails?.cCs.map(\n            (typeTos) =&gt; {\n                return { emailAddress: typeTos.emailAddress };\n            }\n        )\n    : [];\n\n    const participantTos = getParticipantsInfo(participantTypeTos);\n    const partipantsCCs = getParticipantsInfo(participantTypeCCs);\n\n    if (status !== \"reSend\") {\n\n        if (status === \"composeDraft\") {\n            form.setFieldsValue({\n                participantFrom: messageParticipantsFrom[0],\n            });\n            setEditorData(currentSelectedMailMessage.body);\n        } else {\n            let data = `From:${\n                participantTypeFrom?.emailAddress\n            }  &lt;br&gt; To:${participantTos} ${\n                partipantsCCs &amp;&amp; `CC:${partipantsCCs}`\n            } &lt;br&gt;  Date:${\n                currentSelectedMailMessage?.creationTime &amp;&amp;\n                moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")\n                },${moment(currentSelectedMailMessage?.creationTime).format(\n                \"LT\"\n            )} &lt;br&gt; ${currentSelectedMailMessage.body} &lt;br&gt;`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n        if (status === \"emailForwardSend\") {\n            let data = `On: ${moment(currentSelectedMailMessage?.creationTime).format(\"MM/DD/YYYY\")},${moment(\n            currentSelectedMailMessage?.creationTime,\"HH:mm:ss\"\n            ).format(\"LT\")} ${\n            (currentSelectedMailMessage?.companyName\n                ? currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                    .companyName\n                : \"\",\n            currentSelectedMailMessage?.applicationTypeDetails.from[0]\n                .emailAddress)\n            }  wrote: &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n            setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n        }\n\n    } else if (status === \"reSend\") {\n        let data = `${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    } else {\n        let data = `Date:${\n            currentSelectedMailMessage?.creationTime &amp;&amp;\n            moment(currentSelectedMailMessage?.creationTime).format(\"LLLL\")\n        } &lt;br&gt; ${currentSelectedMailMessage?.body}`;\n        setEditorData(\"&lt;br/&gt;&lt;br/&gt;&lt;hr&gt;\" + data);\n    }\n};\n</code></pre> <pre><code>  const { contactQuickAddEmailRespsonse } = useSelector((state) =&gt; state.contactCompanyPerson);\n\n  useEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n        let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n        setAddNewEmailModalVisible(false);\n        if (filterParticipantType == \"To\") {\n            form.setFieldsValue({\n            participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n                ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n                : [emailAddressResp],\n            });\n        } else if (filterParticipantType == \"CC\") {\n            form.setFieldsValue({\n            participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n                ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n                : [emailAddressResp],\n            });\n        }\n    }\n}, [contactQuickAddEmailRespsonse]);\n</code></pre> <pre><code>useEffect(() =&gt; {\n    // ...\n    if (!isEmpty(currentSelectedMailMessage)) {}\n}, [\n    applicationTypeStatus,\n    currentSelectedMailMessage,\n    messageParticipantsFrom,\n]);\n</code></pre> <ul> <li>file-saver <code>npm</code></li> </ul>"},{"location":"office/ispl/documentation/alldocs/mail/#bug-pin-pointed","title":"Bug pin-pointed","text":"<p>Bug</p> ComposeEmailDrawer.js<pre><code>{/* page number: 1222 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        // displayMessages(applicationTypeStatus);\\\n        console.log(\"participantTypeTos: \", participantTypeTos)\n        form.setFieldsValue({\n            participantCCs: [],\n            // participantTos: participantTypeTos?.map((typeTos) =&gt; {\n            //   return typeTos;\n            // }),\n        });\n    }\n}\n</code></pre> <p>Success</p> Solved Tos <code>Reply</code>git file changes ComposeEmailDrawer.js<pre><code>const[contactTos, setContactTos] = useState([])\n\n\n{/* pagenumber: 572 */}\nconst displayMessages = (status) =&gt; {\n    let signatureBody = !isEmpty(signatureList) ? signatureList?.body : \"\";\n    let participantTypeFrom =\n    currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* ADDDED !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos)\n    ?\n    currentSelectedMailMessage?.applicationTypeDetails?.tos.map((typeTos) =&gt; {\n        return { emailAddress: typeTos.emailAddress };\n    })\n    : [];\n}\n\n---\n\n{/* pagenumber: 1225 */}\nif (applicationTypeStatus) {\n    if (applicationTypeStatus === \"reply\") {\n        displayMessages(applicationTypeStatus);\n        form.setFieldsValue({\n        participantCCs: [],\n\n        {/* ADD !isEmpty */}\n        participantTos: !isEmpty(participantTypeTos) ?\n            participantTypeTos?.map((typeTos) =&gt; {\n            return typeTos;\n        })\n        //: [],\n        : contactTos\n        })\n    }\n}\n\n{/* page num: 1469  */}\nuseEffect(() =&gt; {\n    if (activeEmailSignatureDetailsResponse) {\n\n    let signatureData = activeEmailSignatureDetailsResponse?.body\n        ? `&lt;div id=\"signatureData\" ref={${ref}}&gt;&lt;br/&gt;${activeEmailSignatureDetailsResponse?.body}&lt;/div&gt;`\n        : \"\";\n    const sign = localStorage.getItem(\"signatureData\");\n\n    let participantTypeFrom = \n        currentSelectedMailMessage?.applicationTypeDetails?.from[0];\n\n    {/* aded !isEmpty */}\n    let participantTypeTos = !isEmpty(currentSelectedMailMessage?.applicationTypeDetails?.tos) ? \n        currentSelectedMailMessage?.applicationTypeDetails?.tos.map(\n        (typeTos) =&gt; {\n            return { emailAddress: typeTos.emailAddress };\n        }\n        ) : [];\n    }\n})\n\n{/* pagenumber: 1409 */}\nuseEffect(() =&gt; {\n    if (!isEmpty(contactQuickAddEmailRespsonse)) {\n    let emailAddressResp = contactQuickAddEmailRespsonse?.email;\n    setAddNewEmailModalVisible(false);\n    if (filterParticipantType == \"To\") {\n        form.setFieldsValue({\n        participantTos: !isEmpty(form.getFieldsValue()?.participantTos)\n            ? [...form.getFieldsValue()?.participantTos, emailAddressResp]\n            : [emailAddressResp],\n        });\n\n        {/* ADDED */}\n        const uniqueMail = new Set([...form.getFieldsValue()?.participantTos, emailAddressResp])\n        setContactTos([...uniqueMail])\n\n    } else if (filterParticipantType == \"CC\") {\n        form.setFieldsValue({\n        participantCCs: !isEmpty(form.getFieldsValue()?.participantCCs)\n            ? [...form.getFieldsValue()?.participantCCs, emailAddressResp]\n            : [emailAddressResp],\n        });\n    }\n    }\n}, [contactQuickAddEmailRespsonse]);\n\n\n{/* pagenumber: 1649 */}\nconst autoDraft = (e, participant) =&gt; {\n    {/* UPDATE THIS */}\n    let newParticipantArrTo = form.getFieldsValue().participantTos \n    ? [...form.getFieldsValue().participantTos]\n    : [];\n}\n</code></pre> <pre><code>git diff --stat\nsrc/views/Email/Includes/ComposeEmailDrawer.js | 42 ++++++++++++++++++++++++++++++------------\n1 file changed, 30 insertions(+), 12 deletions(-)\n</code></pre> <p>Abstract</p> <pre><code>const [currentSelectedMailMessage, setCurrentSelectedMailMessage] = useState({});\n\n{/* ADD THIS STATE */}\nconst [currentSelectedMailTos, setCurrentSelectedMailTos] = useState([]);\n\n\nconsole.log(\"currentSelectedMailTos: \", currentSelectedMailTos)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/mail/#api","title":"API","text":"<p>api</p> <pre><code>HOLIDAY  EXCEL in admin\nhttps://localhost:44386/api/app/adminModule/downloadSampleHolidayUploadExcel\nhttps://localhost:44386/api/app/adminModule/importHoliday\n\nHOLIDAY YEAR GET LISTING\nhttps://localhost:44386/api/app/organizerEvent/holidayEventsPagination?SearchByNepaliYear=2080&amp;MaxResultCount=50&amp;SkipCount=0\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/","title":"Permission Based Access Control","text":""},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/#permission-based-access-control-in-react","title":"Permission-Based Access Control in react","text":"<p>In <code>permission-based</code> control, users are granted individual permissions directly (e.g., \"canViewDashboard\", \"canEditProfile\"). Permissions are more granular and allow for fine-tuning access control.</p> <pre><code>import { isEmpty } from \"lodash\";\n\nconst [grantedPolices, setGrantedPolices] = useState({});\n\nconst { applicationConfiguration } = useSelector(\n    (state) =&gt; state.applicationConfig\n);\n\nuseEffect(() =&gt; {\n    if (!isEmpty(applicationConfiguration?.auth?.grantedPolicies)) {\n        setGrantedPolices(applicationConfiguration?.auth?.grantedPolicies);\n        console.log(\"applicationConfiguration?.auth?.grantedPolicies: \", applicationConfiguration?.auth?.grantedPolicies);\n    }\n}, [applicationConfiguration]);\n\n\n\n\nreturn (\n\n    &lt;&gt;\n        {!isEmpty(grantedPolices) &amp;&amp;  \n        grantedPolices[\"CQNovalFramework.DashboardMenu.DailyDiary.UserListing\"] &amp;&amp; (\n            &lt;div className=\"global-form-group calc\"&gt;\n                &lt;div className=\"global-form-label\"&gt;\n                    &lt;label&gt;Users&lt;/label&gt;\n                &lt;/div&gt;\n                &lt;div className=\"global-form-input\"&gt;\n                    &lt;Form.Item\n                        className=\"form__group\"\n                        name=\"UserId\"\n                    &gt;\n                        &lt;Select\n                            placeholder=\"Select a User\"\n                            showSearch={true}\n                            allowClear\n                            filterOption={(input, option) =&gt;\n                            option.children[0] &amp;&amp;\n                            option.children[0]\n                                .toLowerCase()\n                                .indexOf(input.toLowerCase()) &gt;= 0\n                            }\n                            onChange={(id, value) =&gt; {\n                                setSelectedUserId(id);\n                                if (id === null || id === undefined) {\n                                setSelectedUserName(null);\n                                } else {\n                                    const selectedUser = user.find(u =&gt; u.appUserId === id);\n                                    if (selectedUser) {\n                                    setSelectedUserName(selectedUser.userName);\n                                    }\n                                }\n                            }}\n                        &gt;\n                            {user.map((user) =&gt; (\n                                &lt;Option key={user.appUserId} &gt;\n                                    {user.fullName} {`[${user.userName}]`}\n                                &lt;/Option&gt;\n                            ))}\n                        &lt;/Select&gt;\n                    &lt;/Form.Item&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        )}\n    &lt;/&gt;\n)\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/permisison-based-access-control/#api-action-reducer","title":"API, Action &amp; Reducer","text":"APIActionReducer <pre><code>import { rootBaseUrl } from \"utils/config\";\nimport { getService } from \"../../../commonServices\";\n\nexport class ApplicationConfigurationService {\n    getApplicationConfiguration() {\n        let url = `${rootBaseUrl}/abp/application-configuration`;\n        let data = getService(url);\n        return data;\n    }\n}\n</code></pre> <pre><code>import { APPLICATION_CONFIGURATION } from \"../../../types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { ApplicationConfigurationService } from \"./api\";\n\nconst applicationConfigurationService = new ApplicationConfigurationService();\n\nexport const getApplicationConfiguration = () =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n        const response = await applicationConfigurationService.getApplicationConfiguration();\n        dispatch(finish(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION));\n\n        if (response.isSuccess) {\n            dispatch(success(APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION, { auth: response?.data?.auth || {}, currentUser: response?.data?.currentUser || {} }));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>import { jsonParser } from \"utils/misc\";\nimport { APPLICATION_CONFIGURATION } from \"../../../types\";\n\nconst INITIAL_STATE = {\n    applicationConfiguration: jsonParser(jsonParser(sessionStorage.getItem(\"persist:root\"))?.applicationConfig)\n    ?.applicationConfiguration || [],\n    applicationConfigurationLoading: false,\n};\n\nexport default function applicationConfigurationReducer(state = INITIAL_STATE, action) {\n    switch (action.type) {\n\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_INIT:\n            return {\n                ...state,\n                applicationConfiguration: [],\n                applicationConfigurationLoading: true,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_SUCCESS:\n            return {\n                ...state,\n                applicationConfiguration: action.payload,\n                applicationConfigurationLoading: false,\n            };\n        case APPLICATION_CONFIGURATION.GET_APPLICATION_CONFIGURATION_FINISH:\n            return {\n                ...state,\n                applicationConfigurationLoading: false,\n            };\n        default:\n            return { ...state };\n    }\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/public-events/","title":"Dashboard Events","text":"<p>Example</p> <p><code>views/Home/Events/PublicEvents.js</code></p> Code PublicEvents.js<pre><code>const PublicEvents = ({\n    allCalenderData,\n    textRef,\n    type,\n    setBirthdayModal,\n    setPerson,\n    calendarEventsLoading,\n    birthdayModal,\n    person,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    const [internalVisible, setInternalVisible] = useState(false);\n    // important\n\n\n    const [data, setData] = useState([]);\n\n    useEffect(() =&gt; {\n        const sortedData = [...allCalenderData];\n        sortedData.sort((a, b) =&gt; moment(a.start).diff(b.start));\n        // setData(sortedData);\n\n        // filtering out events that have ended\n        const currentDate = moment();\n        const filteredData = sortedData.filter((event) =&gt;\n        // moment(event.end).isAfter(currentDate) ||\n        moment(event.start).isSameOrAfter(currentDate, \"day\")\n        );\n        setData(filteredData);\n    }, [allCalenderData]);\n\n\n    return(\n        &lt;&gt;\n        {/* ............. */}\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/","title":"Tender Communication Redux","text":""},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#redux","title":"Redux","text":"<p>Adding and updating with two api at once.</p>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#api","title":"API","text":"<p>Example</p> <p><code>services/redux/Reference/api.js</code></p> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nreferencePartyRemarksHistoryAdd(apiData) {\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryAdd`;\n    let data = postService(url, apiData);\n    return data;\n}\n</code></pre> <pre><code>// Reference remarks history listing\n\nreferencePartyRemarksHistoryListing(body) {\n    let query = queryString.stringify(body);\n    let url = `${appBaseUrl}/referenceManagement/referencePartyRemarksHistoryListing?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre> <pre><code>// reference company manual add\n\nReferenceCompanyManualAdd(q) {\n    let query = queryString.stringify(q);\n    let url = `${appBaseUrl}/referenceManagement/referenceCompanyManualAdd?${query}`;\n    let data = getService(url);\n    return data;\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#action","title":"ACTION","text":"<p>Example</p> <p><code>services/redux/Reference/action.js</code></p> <pre><code>// add company and remarks both\n\nexport const ReferenceRemarksCompanyAdd = (data1, data2) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    const response = await referencesService.ReferenceCompanyManualAdd(data1);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully updated company\");\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_COMPANY_MANUAL_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referencePartyRemarksHistoryAdd(data2));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// ReferencePartyRemarksHistoryAdd\n\nexport const referencePartyRemarksHistoryAdd = (apiData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      apiData\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_ADD,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>export const actionForReferenceCircularPlanningAdd = (data, data1) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    const response =\n      await referencesService.referenceCompanyCircularPlanningAdd(data);\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD));\n    if (response.isSuccess) {\n      dispatch(\n        success(REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD, response.data)\n      );\n\n      // hitting another ACTION\n\n      await dispatch(referenceCircularPlanningRemarksAdd(data1));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <pre><code>// circular remkarks add\n\nexport const referenceCircularPlanningRemarksAdd = (data) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    const response = await referencesService.referencePartyRemarksHistoryAdd(\n      data\n    );\n    dispatch(finish(REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING));\n    if (response.isSuccess) {\n      message.success(\"Successfully added Remarks\");\n      dispatch(\n        success(\n          REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING,\n          response.data\n        )\n      );\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/redux-action-advanced/#reducer","title":"REDUCER","text":"<p>Example</p> <p><code>services/redux/Reference/reducer.js</code></p> <pre><code>// POST circular planning\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_INIT:\n    return {\n        ...state,\n        referenceCircularPlanningAddResponse: null,\n        referenceCircularPlanningAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_SUCCESS:\n    const updateItems = state?.referencePartyListingCircularResponse;\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n        referenceCircularPlanningAddResponse: action.payload,\n        referencePartyListingCircularResponse: [...updateItems, action.payload],\n    };\n\ncase REFERENCE__TYPES.REFERENCE_CIRCULAR_PLANNING_ADD_FINISH:\n    return {\n        ...state,\n        referenceCircularPlanningAddLoading: false,\n    };\n</code></pre> <pre><code>// CIRCULAR PLANNIG REMARKS\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_INIT:\n    return {\n        ...state,\n        circularPlanningRemarksResp: null,\n        circularPlanningRemarksLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_SUCCESS:\n    const lastPartyCircular =\n    state.referencePartyListingCircularResponse[\n        state.referencePartyListingCircularResponse.length - 1\n    ];\n\n    const updatedLastPartyCircular = {\n        ...lastPartyCircular,\n        remarks: action.payload?.remarks,\n    };\n\n    const updatedPartyListingCircularResponse = [\n        ...state.referencePartyListingCircularResponse.slice(0, -1),\n        updatedLastPartyCircular,\n    ];\n    return {\n        ...state,\n        circularPlanningRemarksResp: action.payload,\n        circularPlanningRemarksLoading: false,\n        referencePartyListingCircularResponse:\n            updatedPartyListingCircularResponse,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_REMARKS_CIRCULAR_PLANNING_FINISH:\n    return {\n        ...state,\n        circularPlanningRemarksLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/reference-project-circular/","title":"Project Circular","text":"<p>project circular tab</p> reducer.js<pre><code>case REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_INIT:\n    return {\n    ...state,\n    soloRemarksAddResp: [],\n    soloRemarksAddLoading: true,\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_SUCCESS:\n    const updatedDataSource =\n    action.payload?.isDefaultOrCircular === 1\n        ? \"referencePartyListingCircularResponse\"\n        : \"referencePartyListingResponse\";\n    return {\n    ...state,\n    soloRemarksAddResp: action.payload,\n    soloRemarksAddLoading: false,\n    [updatedDataSource]: state?.[updatedDataSource]?.map((item) =&gt; {\n        if (item?.contactCompanyId === action.payload?.contactCompanyId) {\n        return {\n            ...item,\n            remarks: action.payload.remarks,\n        };\n        } else {\n        return {\n            ...item,\n        };\n        }\n    }),\n    };\n\ncase REFERENCE__TYPES.REFERENCE_PARTY_REMARKS_HISTORY_SOLO_FINISH:\n    return {\n    ...state,\n    soloRemarksAddLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/reference-tender-circular/","title":"Tender Circular","text":"<p>Tender</p> <p><code>src/views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</code></p> Companies.js<pre><code>// for manual Company Add\nconst api1 = {\n  ReferenceId: emailReferenceId,\n  CompanyId: selectedCompanyId,\n};\n\n// for remarks\nconst api2 = {\n  tenderBasicId: getDetails.id,\n  contactCompanyId: selectedCompanyId,\n  ModeofCommunication: remarksData?.remarks,\n  remarks: values?.remarks,\n  attentionTo: JSON.stringify(selectedAttendees),\n};\n\ntry {\n  if (isCircular &amp;&amp; showProjectTab) {\n    // dispatch(actionForReferenceCircularPlanningAdd(\"tender\",api1, api2));\n    console.log(\"PROJETC AND CIRCULAR\");\n  } else if (isCircular) {\n    // dispatch(actionForReferenceCircularPlanningAdd(api1, api2))\n    console.log(\"CIRCULAR PLANNING\");\n  } else {\n    // dispatch(ReferenceRemarksCompanyAdd(api1, api2));\n    console.log(\"NOT CIRCULAR AND OTHER\");\n  }\n} catch (err) {\n  console.log(\"error\", err);\n} finally {\n  setIsAddCompanyModelOpen(false);\n  addCompanyModelForm.resetFields();\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/sending-im/","title":"Sending Internal Message","text":"<p>Sending Internal Message</p> <p><code>views/Email/EmailDetails.js</code></p> CODELoan ComponentAction EmailDetails.js<pre><code>    const EmailDetails = ({\n        // ...\n    }) =&gt; {\n        const dispatch = useDispatch();\n        // line number: 220\n        const [instanceMessageCenterListing, setInstanceMessageCenterListing] =\n        useState({ totalCount: 0, items: [] });\n\n        useEffect(() =&gt; {\n            if (\n                !isEmpty(currentSelectedMailMessage) &amp;&amp;\n                !isEmpty(instanceMessageCenterPagination?.items)\n            ) {\n                setHideInternalMessage(true);\n                setInstanceMessageCenterListing(instanceMessageCenterPagination);\n            } else {\n                setInstanceMessageCenterListing([]);\n                if (!chatBox) {\n                    setHideInternalMessage(false);\n                }\n            }\n        }, [instanceMessageCenterPagination, currentSelectedMailMessage]);\n\n        return(\n            &lt;&gt;\n\n                {/* line number: 2000 */}\n                {currentSelectedMailMessage?.applicationTypeSystemName ===\n                    \"Leave\" ? (\n                    &lt;LeaveDetails\n                        leaveAppId={\n                        currentSelectedMailMessage?.applicationId\n                        }\n                    /&gt;\n                    ) : currentSelectedMailMessage?.applicationTypeSystemName ===\n                                \"Loan\" ? (\n                                &lt;LoanDetailss\n                                loanApplicationId={\n                                    currentSelectedMailMessage?.applicationId\n                                }\n                                setInstanceMessageCenterListing={\n                                    setInstanceMessageCenterListing\n                                }\n                                /&gt;\n                            )\n                    : currentSelectedMailMessage?.applicationTypeSystemName ===\n                        \"EmployeeEvaluation\" ? (\n                        &lt;&gt;\n                            &lt;EmployeeEvaluationDetails\n                            id={currentSelectedMailMessage?.applicationId}\n                            setInstanceMessageCenterListing={\n                                setInstanceMessageCenterListing\n                            }\n                            showButton={true}\n                            currentStep={null}\n                            /&gt;\n                        &lt;/&gt;\n                    )\n                }\n            &lt;/&gt;\n        )}\n</code></pre> LoanDetailss.js<pre><code>    const LoanDetailss = ({\n        loanApplicationId,\n        setInstanceMessageCenterListing,\n    }) =&gt; {\n        const onFinish = (values) =&gt; {\n            let body = { ...values, isApproval: isApproval };\n            if (supervisorStatus === \"Pending\") {\n                dispatch(\n                    loanApplicationUpdateSupervisor(\n                    body,\n                    loanApplicationId,\n                    isApproval,\n                    setInstanceMessageCenterListing\n                    )\n                );\n            }\n        }\n    }\n</code></pre> action.js<pre><code>    export const loanApplicationUpdateSupervisor = (\n        body,\n        id,\n        isApproval,\n        setInstanceMessageCenterListing\n    ) =&gt; {\n        return async (dispatch) =&gt; {\n            dispatch(init(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            const response = await loanApplicationService.updateLoanSupervisor(body, id);\n            dispatch(finish(LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR));\n            if (response?.isSuccess) {\n                dispatch(\n                    success(\n                    LOAN_APPLICATION_TYPES.LOAN_APPLICATION_UPDATE_SUPERVISOR,\n                    response?.data\n                    )\n            );\n\n            if (isApproval) {\n                message.success(\"Loan approved from Supervisor \");\n            } else {\n                message.success(\"Rejected from Supervisor \");\n            }\n\n            // INTERNAL MESSAGE CODE\n            setInstanceMessageCenterListing?.((prevData) =&gt; {\n                if (!isEmpty(prevData.items)) {\n                    return {\n                        items: [response?.data?.internalMessage, ...prevData.items],\n                        totalCount: prevData.totalCount + 1,\n                    };\n                } else {\n                    return {\n                        items: [response?.internalMessage],\n                        totalCount: 1,\n                    };\n                }\n            });\n\n            dispatch(getProcurementSummary(\"loan\"));\n            dispatch(getProcurementCounter());\n\n            } else {\n                dispatch(error(response?.errorMessage));\n                message.error(\"There is error here\");\n            }\n        };\n    };\n</code></pre> <p>NEW Tutorial</p> CodeApiActionRequest payloadResponse json EmployeeEvaluationDetails.js<pre><code>// views/Email/EmployeeEvaluationDetails.js\n\nconst EmployeeEvaluationDetails = ({\n    id,\n    setInstanceMessageCenterListing,\n    showButton,\n    currentStep,\n}) =&gt; {\n    const onSubmitEvaluation = (values) =&gt; {\n        let value = {};\n        const date =\n            moment(employeeReviewResponse?.date).format(\"YYYY-MM-DD\") || null;\n        values = {\n            participantUserId: currentLoginUserId,\n            id: id,\n            employeeId: id,\n            name: employeeReviewResponse?.name || null,\n            job: employeeReviewResponse?.jobTitle || null,\n            department: employeeReviewResponse?.department || null,\n            supervisor: employeeReviewResponse?.immidiateSuperior || null,\n            username: employeeReviewResponse?.employeeInitials || null,\n            date: date || null,\n            review: employeeReviewResponse?.reviewPeriod || null,\n\n            jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n            },\n            workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n            },\n            punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n            },\n            initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n            },\n            communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n            },\n            dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n            },\n            additionalComments: values?.additionalcomment || null,\n            newGoal: values?.goalcomment || null,\n            isApproved: true,\n            isResponed: true,\n            isactive: true,\n            ApprovedRejectRemarks: `Reviewed`,\n        };\n\n        dispatch(\n        supervisorEmployeeMail(id, values, setInstanceMessageCenterListing)\n        );\n    };\n}\n</code></pre> profile.api.js<pre><code>// src/services/redux/profile/profile.api.js\n\nemployeeEvaluationMail = (id, body) =&gt; {\n    let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationSupervisorAction/${id}`;\n    let data = putService(url, body);\n    return data;\n};\n</code></pre> profile.action.js<pre><code>// Mail\nexport const supervisorEmployeeMail = (\n    id,\n    body,\n    setInstanceMessageCenterListing\n) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n            const response = await profileService.employeeEvaluationMail(id, body);\n        if (response.isSuccess) {\n            dispatch(success(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL, response.data));\n            dispatch(finish(PROFILE_TYPES.EMPLOYEE_SUPERVISOR_MAIL));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n        console.log(\"response log\", response);\n        setInstanceMessageCenterListing?.((prevData) =&gt; {\n            if (!isEmpty(prevData.items)) {\n                return {\n                    items: [response?.data?.internalMessage, ...prevData.items],\n                    totalCount: prevData.totalCount + 1,\n                };\n            } else {\n                return {\n                    items: [response?.internalMessage],\n                    totalCount: 1,\n                };\n            }\n        });\n    };\n};\n</code></pre> <pre><code>{\n    \"participantUserId\": \"6c38da20-5aec-47c7-a5ac-3a0c5fb8136c\",\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"name\": \"Bishow Thapa\",\n    \"job\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"supervisor\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"username\": \"bishow\",\n    \"date\": \"2024-01-16\",\n    \"review\": \"3\",\n    \"jobKnowledge\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"workQuality\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"punctuality\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"initiative\": {\n        \"number\":5,\n        \"comments\":null\n    },\n    \"communication\": {\n        \"number\":4,\n        \"comments\":null\n    },\n    \"dependability\": {\n        \"number\":3,\n        \"comments\":null\n    },\n    \"additionalComments\": \"Yes good Additional Comments\",\n    \"newGoal\": \"I agreed new new goals\",\n    \"isApproved\": true,\n    \"isResponed\": true,\n    \"isactive\": true,\n    \"ApprovedRejectRemarks\": \"Reviewed\"\n}\n</code></pre> <pre><code>{\n    \"id\": \"34e1004e-c75c-45a7-8bda-8db8f026b471\",\n    \"employeeId\": \"f396ad8d-8781-4655-ac22-5c3a7ba80194\",\n    \"name\": \"Bishow Thapa\",\n    \"jobTitle\": \"Chief Executive Officer / CEO\",\n    \"department\": null,\n    \"employeeInitials\": \"bishow\",\n    \"date\": \"2024-01-16T00:00:00\",\n    \"immidiateSuperior\": [\n        \"admin_bbask\",\n        \"Aakash\",\n        \"sajal\"\n    ],\n    \"immidiateSuperiorId\": null,\n    \"reviewPeriod\": \"3\",\n    \"isactive\": true,\n    \"isapproved\": true,\n    \"approvedRejectRemarks\": null,\n\n    \"internalMessage\":{\n        \"id\":\"268f5468-905a-4447-b6a7-3b0b3e0fad25\",\n        \"messageText\":\"Reviewed\",\n        \"mailMessageCenterId\":\"260401a0-dd46-4257-a5be-1ca306fd12bd\",\n        \"mailMessageParticipantTableId\":\"3736f715-f914-4df1-baca-47b2fa356c72\",\n        \"applicationId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeId\":\"00000000-0000-0000-0000-000000000000\",\n        \"applicationTypeName\":\"EmployeeEvaluation\",\n        \"orderNumber\":2,\n        \"replyOfInstanceMessageId\":null,\n        \"isActive\":true,\n        \"externalMessagType\":\"\",\n        \"remainderCount\":0,\n        \"replyDateTime\":null,\n        \"isOwner\":true,\n        \"isAttachOwnerParticipaint\":false,\n        \"instanceMessageAttachmentDtos\":[\n        ],\n        \"creationTime\":\"2024-01-16T14:45:11.3146454+05:45\",\n        \"replyOfInstanceMessageOrderNumber\":null\n    },\n\n    \"employeeEvaluationStatus\":{\n        \"systemName\":\"HRApproved\",\n        \"displayName\":\"HRApproved\",\n        \"id\":3\n    },\n\n    // ....\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/sending-mail/","title":"Sending Mail","text":"<p>Example</p> CodeACTIONAPIRequest PayloadResponse json EmployeeEvaluationForm.js<pre><code>import { addEmployeeEvaluationApplication } from \"../../../../services/redux/requistions/EmployeeEvaluation/action\";\n\nconst EmployeeEvaluationForm = ({ onCloseDrawer, selectedLoanApp }) =&gt; {\n    const dispatch = useDispatch();\n\n    const onSubmitEmployeeEvaluation = (values) =&gt; {\n        let value = {};\n\n        if (values) {\n            value = {\n                employeeId: employeeId,\n                employeeInitials: username,\n                name: fullname,\n                jobTitle: jobTitle,\n                department: department,\n                immidiateSuperior: supervisor,\n                date: todayDate,\n                jobKnowledge: {\n                number: values?.jobrating || null,\n                comments: values?.jobcomment || null,\n                },\n                workQuality: {\n                number: values?.workrating || null,\n                comments: values?.workcomment || null,\n                },\n                punctuality: {\n                number: values?.attendancerating || null,\n                comments: values?.attendancecomment || null,\n                },\n                initiative: {\n                number: values?.initiativerating || null,\n                comments: values?.initiativecomment || null,\n                },\n                communication: {\n                number: values?.communicationrating || null,\n                comments: values?.communicationcomment || null,\n                },\n                dependability: {\n                number: values?.dependrating || null,\n                comments: values?.dependcomment || null,\n                },\n                additionalComments: values?.additionalcomment || null,\n                newGoal: values?.goalcomment || null,\n            };\n        }\n\n        dispatch(addEmployeeEvaluationApplication(value));\n        // console.log(\"values\", value);\n    };\n}\n</code></pre> action.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/action.js\n\nimport { message } from \"antd\";\nimport { EmployeeEvaluationService } from \"./api\";\nimport { init, success, finish, error } from \"services/common\";\nimport { EMPLOYEE_EVALUATION_TYPES } from \"../../../types\";\n\nconst employeeEvaluationService = new EmployeeEvaluationService();\n\nexport const addEmployeeEvaluationApplication = (body, actionType) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n\n        if (actionType === \"add\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n            if (response.isSuccess) {\n                dispatch(\n                    success(\n                        EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                        response.data\n                    )\n                );\n                message.success(\"Employee Evaluation Added Successfully\");\n            }\n        } else if (actionType === \"delete\") {\n            const response = await employeeEvaluationService.addEvaluationForm(body);\n                if (response.isSuccess) {\n                    dispatch(\n                        success(\n                            EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD,\n                            response.data\n                        )\n                    );\n                    message.success(\"Deleted Successfully\");\n                }\n        }\n        dispatch(finish(EMPLOYEE_EVALUATION_TYPES.EMPLOYEE_EVALUATION_ADD));\n    };\n};\n</code></pre> api.js<pre><code>// src/services/redux/requistions/EmployeeEvaluation/api.js\n\nimport { appBaseUrl } from \"utils/config\";\nimport queryString from \"query-string\";\nimport { getService, postService, putService } from \"../../../commonServices\";\n\nexport class EmployeeEvaluationService {\n    addEvaluationForm(body) {\n        let url = `${appBaseUrl}/requisitionManagement/employeeEvaluationRating`;\n        let data = postService(url, body);\n        return data;\n    }\n}\n</code></pre> <pre><code>// https://cqnoval.info.com.np/api/app/requisitionManagement/employeeEvaluationRating\n\n{\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"date\":\"2024-01-16\",\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"approvedRejectRemarks\":\"This is remarks\"\n}\n</code></pre> <pre><code>{\n    \"id\":\"46a7d028-822d-4d66-a23a-f7d98f063079\",\n    \"employeeId\":\"b3b972b8-2312-4c97-b04c-55e96c7ed83e\",\n    \"name\":\"Ashish Dulal\",\n    \"jobTitle\":\"Board of Director\",\n    \"department\":\"123\",\n    \"employeeInitials\":\"ad\",\n    \"date\":\"2024-01-16T00:00:00\",\n    \"immidiateSuperior\":[\n\n    ],\n    \"immidiateSuperiorId\":null,\n    \"reviewPeriod\":null,\n    \"isactive\":true,\n    \"isapproved\":false,\n    \"approvedRejectRemarks\":\"This is remarks\",\n    \"internalMessage\":null,\n    \"employeeEvaluationStatus\":null,\n    \"employeeEvaluationParticipantDetailsDTOs\":null\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/","title":"Setting Value in Select","text":"GroupChatDrawer.jsx<pre><code>const [filterReference, setFilterReference] = useState([]);\n\n\nuseEffect(() =&gt; {\n    if (!isEmpty(referenceListing) &amp;&amp; filterParticipantType == \"REF\") {\n        setFilterReference(referenceListing.items);\n    }\n}, [referenceListing]);\n\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        console.log(\"groupChatTitleDetailsResp: \", groupChatTitleDetailsResp)\n\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        form.setFieldsValue({\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n    }\n}, [groupChatTitleDetailsResp, form])\n\n\n\nreturn(\n    &lt;&gt;\n    &lt;div className=\"drawer-form-group\"&gt;\n        &lt;Form.Item\n            className=\"form__group\"\n            name=\"referenceId\"\n            label=\"Reference ID\"\n            rules={[\n                {\n                    required: true,\n                    message: 'Please select reference',\n                },\n            ]}\n        &gt;\n            &lt;Select\n                getPopupContainer={(trigger) =&gt; trigger.parentNode}\n                showSearch\n                placeholder=\"Select reference\"\n                optionFilterProp=\"label\"\n                allowClear={true}\n                onSearch={(value) =&gt; {\n                    setSearchValueReference(value);\n                    setFilterParticipantType(\"REF\");\n                }}\n                autoComplete=\"off\"\n            &gt;\n\n            {console.log(\"XXXX filterReference: \", filterReference)}\n\n            {/********************************************* EXAMPLE *********************************************/}\n\n            {filterReference.map((reference, index) =&gt; {\n                return (\n                    &lt;Option\n                        value={reference.id}\n                        key={index}\n                        label={[reference.code, reference.title]}\n                    &gt;\n                        &lt;div className=\"demo-option-label-item\"&gt;\n                            &lt;div&gt;\n                                {reference.code} {\"\"}\n                            &lt;/div&gt;\n                            &lt;div&gt;{reference.title}&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Option&gt;\n                );\n            })}\n            &lt;/Select&gt;\n        &lt;/Form.Item&gt;\n    &lt;/div&gt;\n    &lt;/&gt;\n)\n</code></pre> Tips <pre><code>import { getAllUsers } from 'services/remanentCalls';\n\n\nconst [user, setUsers] = useState([]);\n\nuseEffect(() =&gt; {\n    fetchAllUsers();\n}, []);\n\n// func\nconst fetchAllUsers = async () =&gt; {\n    const resp = await getAllUsers().catch((err) =&gt; {\n        message.error(\"Failure\");\n    });\n\n    if (resp &amp;&amp; resp.status === 200) {\n        setUsers(resp.data);\n    }\n};\n\nuseEffect(() =&gt; {\n    if(!isEmpty(groupChatTitleDetailsResp)) {\n        // we are setting the recently used tags because it doesnt fetch all listing of reference tags.\n        // and we set the previous selected tags only.\n        let recentlyUsedTags= [{\n            code: groupChatTitleDetailsResp?.referenceCode,\n            id: groupChatTitleDetailsResp?.referenceId,\n        }]\n        setFilterReference(recentlyUsedTags);\n\n        // we only selected the previous selected users, and add its id to UserListIds because \n        // the listing of users is already fetch.\n        let selectedUserId = groupChatTitleDetailsResp.userList?.map((item, index) =&gt; item?.userId);\n\n        form.setFieldsValue({\n            chatGroupName: groupChatTitleDetailsResp?.chatGroupName,\n            description: groupChatTitleDetailsResp?.description,\n            userListIds: selectedUserId,\n            referenceId: groupChatTitleDetailsResp?.referenceId,\n        });\n\n        /*********************************************************************/\n        // BEGIN: BUG =&gt; Don't do this\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setUsers(updatedData)\n        // END\n        /*********************************************************************/\n    }\n}, [groupChatTitleDetailsResp, form])\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#data-transformation-to-rename-a-property-and-replacing-with-new-names","title":"Data Transformation: To rename a property and replacing with new names","text":"<p>To rename a property (e.g., <code>userIds</code> to <code>AppuserId</code>) in each object of an array, you can use the <code>map</code> function to create a new array with the updated property names. Here\u2019s how you can achieve this:</p> Example <pre><code>const data = [\n    { userIds: '123', name: 'Alice' },\n    { userIds: '456', name: 'Bob' },\n    // More objects\n];\n\nconst updatedData = data.map(item =&gt; {\n    const { userIds, ...rest } = item; // Destructure to separate userIds from the rest of the properties\n    return { AppuserId: userIds, ...rest }; // Create a new object with AppuserId and the rest of the properties\n});\n\nconsole.log(updatedData);\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#explanation","title":"Explanation","text":"<ul> <li>Destructuring: We destructure <code>item</code> to separate <code>userIds</code> from the rest of the properties.</li> <li>Returning a New Object: We create and return a new object with <code>AppuserId</code> and the rest of the properties using the spread operator.</li> </ul>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#example-in-a-react-component","title":"Example in a React Component","text":"<p>If you need to perform this transformation in a React component, you can do it inside a useEffect or a function that processes your data:</p> <pre><code>import React, { useEffect, useState } from 'react';\n\nconst MyComponent = () =&gt; {\n    const [data, setData] = useState([\n        { userIds: '123', name: 'Alice' },\n        { userIds: '456', name: 'Bob' },\n        // More objects\n    ]);\n\n    useEffect(() =&gt; {\n        const updatedData = data.map(item =&gt; {\n            const { userIds, ...rest } = item;\n            return { AppuserId: userIds, ...rest };\n        });\n\n        setData(updatedData);\n    }, []); // Empty dependency array means this runs once after initial render\n\n    return (\n        &lt;div&gt;\n            {data.map(item =&gt; (\n                &lt;div key={item.AppuserId}&gt;\n                    &lt;p&gt;AppuserId: {item.AppuserId}&lt;/p&gt;\n                    &lt;p&gt;Name: {item.name}&lt;/p&gt;\n                &lt;/div&gt;\n            ))}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/setting-setValue-in-select/#explanation_1","title":"Explanation","text":"<ul> <li>State Initialization: <code>data</code> is initialized with the original array of objects.</li> <li>useEffect: The <code>useEffect</code> hook runs after the initial render and transforms the <code>data</code> array to rename <code>userIds</code> to <code>AppuserId</code>.</li> <li>Rendering: The component renders the updated data, displaying each <code>AppuserId</code> and <code>name</code>.</li> </ul> <p>This approach ensures that the data transformation is handled efficiently and the component state is updated accordingly.</p>"},{"location":"office/ispl/documentation/alldocs/sisco-view/","title":"Hr Module","text":"<p>HR Module</p> SicoViewindexAddUpdateSisterCompanyDrawer <p>To view the data in the <code>Basic</code>.</p> SiscoView.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/SiscoView.js\n\nconst SiscoView = ({\n    isUpdateSiscoCredentials,\n    showAddUpdateSisterCompanyDrawer,\n}) =&gt; {\n    return (\n        &lt;div className=\"profile__info profile__wrap--sister\"&gt;\n            &lt;div className=\"profile__info--wrapper\"&gt;\n                &lt;div className=\"profile__info--body\"&gt;\n                    &lt;div className=\"contactsDetails__info mb-3 sisco-header-wapper\"&gt;\n                        &lt;span className=\"contactsDetails--title bold w-100\"&gt;Basic&lt;/span&gt;\n                        &lt;div className=\"sisco-action-button\"&gt;\n                            &lt;div\n                                onClick={() =&gt; {\n                                showAddUpdateSisterCompanyDrawer(isUpdateSiscoCredentials);\n                                }}\n                            &gt;\n                                &lt;img src={editIcon} /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n\n                    {/* *********** IMPORTANT **************** */}\n\n                    {!isUpdateSiscoCredentials?.creationTime ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row sister\"&gt;\n                            &lt;div className=\"profile__row--label sister--label\"&gt;\n                                &lt;span className=\"profile__bodyTitle\"&gt;Creation Time&lt;/span&gt;\n                            &lt;/div&gt;\n                            &lt;div className=\"profile__row--data sister--data\"&gt;\n                                &lt;span className=\"profile__bodyInfo\"&gt;\n                                {moment(isUpdateSiscoCredentials?.creationTime).format(\n                                    \"YYYY/MM/DD\"\n                                )}\n                                &lt;/span&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                    {/* Added */}\n                    {!isUpdateSiscoCredentials?.address ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.address}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.website ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.website}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.linkedin ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.linkedin}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationNumber ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationNumber}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n                    {!isUpdateSiscoCredentials?.companyRegistrationDate ? (\n                        \"\"\n                    ) : (\n                        &lt;div className=\"profile__row\"&gt;\n                        &lt;div className=\"profile__row--label\"&gt;\n                            &lt;span className=\"profile__bodyTitle\"&gt;Port &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;div className=\"profile__row--data\"&gt;\n                            &lt;span className=\"profile__bodyInfo\"&gt;\n                            {isUpdateSiscoCredentials?.companyRegistrationDate}\n                            &lt;/span&gt;\n                        &lt;/div&gt;\n                        &lt;/div&gt;\n                    )}\n\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre> index.js<pre><code>// views/Admin/index.js\n\nfunction Admin() {\n    const [isUpdateSiscoCredentials, setIsUpdateSiscoCredentials] = useState();\n\n    useEffect(() =&gt; {\n        if (addUpdatesisterCompanyResponse) {\n            console.log(\"addUpdatesisterCompanyResponse: \",addUpdatesisterCompanyResponse)\n            setIsUpdateSiscoCredentials(addUpdatesisterCompanyResponse);\n        }\n    }, [addUpdatesisterCompanyResponse]);\n\n    const rowEventhandlersSisco = (record) =&gt; {\n        return {\n            onClick: () =&gt; {\n                setIsUpdateSiscoCredentials(record);\n                setSiscoCompanyId(record.id);\n                setHidden(false);\n                setEmployeeId();\n                setEmployeeUserId();\n                setDepartment({ id: \"\", type: \"\" });\n                setSiscoId(record.id);\n            },\n        };\n    };\n\n\n    const showAddUpdateSisterCompanyDrawer = (record) =&gt; {\n        form.resetFields();\n        if (record) {\n            setIsUpdateSisterCompany(record);\n        }\n        setAddUpdateSisterCompanyDrawerVisibility(true);\n    };\n\n    return (\n        &lt;div className=\"sidebars\"&gt;\n            {/* ... */}\n            &lt;div className=\"profiledetails\"&gt;\n                &lt;Collapse\n                    expandIconPosition=\"right\"\n                    accordion={true}\n                    defaultActiveKey={[\"1\"]}\n                &gt;\n                    &lt;Panel key=\"1\" header=\"Sisco User list\"&gt;\n                        &lt;div&gt;\n                            &lt;div style={{ height: \"43%\" }}&gt;\n                                &lt;SiscoUserList\n                                    setSiscoClassName={setSiscoClassName}\n                                    grantedPolices={grantedPolices}\n                                    rowEventhandlersSisco={rowEventhandlersSisco}\n                                    inputSearchValue={inputSearchValue}\n                                    sisterCompanyPagination={sisterCompanyPagination}\n                                    sisterCompanyPaginationLoading={\n                                    sisterCompanyPaginationLoading\n                                    }\n                                /&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/Panel&gt;\n                &lt;/Collapse&gt;\n            &lt;/div&gt;\n            {/* ... */}\n        &lt;/div&gt;\n    )\n}\n\nexport default Admin;\n</code></pre> AddUpdateSisterCompanyDrawer.js<pre><code>// views/AdminSettings/AddUpdateSistorCompany/AddUpdateSisterCompanyDrawer.js\n\nconst AddUpdateSisterCompanyDrawer = ({\n    onAddUpdateSisterCompanyClose,\n    drawerVisibility,\n    isUpdateSisterCompany,\n    sisterCompanyListing,\n}) =&gt; {\n    const [form] = Form.useForm();\n\n    return (\n        &lt;Drawer\n            visible={drawerVisibility}\n            width={472}\n            maskClosable={false}\n            className=\"drawer main-drawer-wrapper\"\n            onClose={onAddUpdateSisterCompanyClose}\n            closable={false}\n        &gt;\n            &lt;Header className=\"drawer__header\"&gt;\n                &lt;h4 className=\"drawer__header--title\"&gt;\n                {`${isUpdateSisterCompany ? \"Update\" : \"Create\"} Sister Company`}\n                &lt;/h4&gt;\n            &lt;/Header&gt;\n            &lt;div className=\"drawer__content\"&gt;\n                &lt;div className=\"drawer__content--wrapper\"&gt;\n                    &lt;div className=\"contact__content__wrapper\"&gt;\n                        &lt;Form\n                            layout=\"vertical\"\n                            form={form}\n                            name=\"control-hooks\"\n                            validateMessages={validateMessages}\n                            className=\"drawer-form-wrapper\"\n                        &gt;\n                        &lt;div className=\"drawer-form-row\"&gt;\n                            &lt;div className=\"drawer-form-group\"&gt;\n                                &lt;Form.Item\n                                    name=\"name\"\n                                    className=\"form__group\"\n                                    label=\"Sister Company Name\"\n                                    rules={[{ required: true }]}\n                                &gt;\n                                    &lt;Input autoComplete=\"off\" /&gt;\n                                &lt;/Form.Item&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/Drawer&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/documentation/alldocs/tutorial-listing/","title":"Tutorial Listing Redux","text":""},{"location":"office/ispl/documentation/alldocs/tutorial-listing/#tutorial-lisitng","title":"Tutorial Lisitng","text":"<p>Example</p> apiactionreducer <p><code>services/redux/admin/Tutorial/api.js</code></p> api.js<pre><code>export class TutorialService {\n  getTutorialListing(q) {\n    let url = `${appBaseUrl}/adminModule/tutorialListing`;\n    switch (true) {\n      case !isEmpty(q?.search) &amp;&amp; !isEmpty(q?.type):\n        url += `?title=${encodeURIComponent(\n          q.search\n        )}&amp;category=${encodeURIComponent(q.type)}`;\n        break;\n\n      case !isEmpty(q?.search):\n        url += `?title=${encodeURIComponent(q.search)}`;\n        break;\n\n      case !isEmpty(q?.type):\n        url += `?category=${encodeURIComponent(q.type)}`;\n        break;\n\n      default:\n        break;\n    }\n\n    try {\n      const data = getService(url);\n      return data;\n    } catch (error) {\n      console.error(\"Error fetching tutorial listing:\", error);\n      throw error;\n    }\n  }\n\n  createTutorial(body) {\n    let url = `${appBaseUrl}/adminModule/tutorialAdd`;\n    let data = postService(url, body);\n    return data;\n  }\n\n  updateTutorial(tutorialId, body) {\n    let url = `${appBaseUrl}/adminModule/tutorialUpdate/${tutorialId}`;\n    let data = putService(url, body);\n    return data;\n  }\n\n  // category\n  getTutorialCategoryListing() {\n    let url = `${appBaseUrl}/adminModule/tutorialTypeListing`;\n    let data = getService(url);\n    return data;\n  }\n}\n</code></pre> <p><code>services/redux/admin/Tutorial/action.js</code></p> action.js<pre><code>import { ADMIN_TYPES } from \"services/types\";\nimport { init, success, finish, error } from \"services/common\";\nimport { message } from \"antd\";\nimport { TutorialService } from \"./api\";\n\nconst tutorialService = new TutorialService();\n\nexport const actionForGetTutorialListing = (q) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    const response = await tutorialService.getTutorialListing(q);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_LISTING));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_LISTING, response.data));\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n\nexport const actionForAddTutorial = (body) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch(init(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    const response = await tutorialService.createTutorial(body);\n    dispatch(finish(ADMIN_TYPES.TUTORIAL_TYPE_ADD));\n    if (response.isSuccess) {\n      dispatch(success(ADMIN_TYPES.TUTORIAL_TYPE_ADD, response.data));\n      console.log(\"ACTION add: \", response.data);\n      message.success(\"Added Tutorial Video\");\n    } else if (!response.isSuccess) {\n      dispatch(error(response.errorMessage));\n    }\n  };\n};\n</code></pre> <p><code>services/redux/admin/Tutorial/reducer.js</code></p> <pre><code>// add\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_INIT:\n    return {\n        ...state,\n        addTutorialResp: [],\n        addTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_SUCCESS:\n    const updatedListAfterAdd = [\n        ...state?.getTutorialListingResp,\n        action.payload,\n    ].sort((a, b) =&gt; a.title.localeCompare(b.title));\n\n    return {\n        ...state,\n        addTutorialLoading: false,\n        getTutorialListingResp: updatedListAfterAdd,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_ADD_FINISH:\n    return {\n        ...state,\n        addTutorialLoading: false,\n    };\n</code></pre> <pre><code>// update\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_INIT:\n    return {\n    ...state,\n    updateTutorialLoading: true,\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_SUCCESS:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    updateTutorialResp: action?.payload,\n    getTutorialListingResp: state?.getTutorialListingResp\n        ?.map((item) =&gt; {\n        if (item.id === action.payload?.id) {\n            return action.payload.isActive ? { ...action.payload } : null;\n        } else {\n            return {\n            ...item,\n            };\n        }\n        })\n        .filter((item) =&gt; item !== null)\n        .sort((a, b) =&gt; a.title.localeCompare(b.title)),\n    };\n\ncase ADMIN_TYPES.TUTORIAL_TYPE_UPDATE_FINISH:\n    return {\n    ...state,\n    updateTutorialLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/HTMLRenderer/","title":"HTMLRenderer","text":"<p>Example</p>"},{"location":"office/ispl/documentation/commonModule/HTMLRenderer/#display-the-html-tag-in-the-react-using-dangerouslysetinnerhtml","title":"Display the HTML Tag in the react using dangerouslySetInnerHTML","text":"<p>src/components/HTMLRenderer/HTMLRenderer.js</p> IndexHTMLRenderer index.js<pre><code>import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs } from \"antd\";\nimport { getApplicationTemplate } from \"services/redux/organizer/ApplicationTemplate/action\";\nimport HTMLRenderer from \"./HTMLRenderer\";\n\nconst HTMLRendererComponent = (props) =&gt; {\nconst { id, code, title } = props;\nconst { TabPane } = Tabs;\n\nconst dispatch = useDispatch();\n\nconst {\n    getApplicationTemplateResponse,\n    getApplicationTemplateResponseLoading,\n} = useSelector((state) =&gt; state.application);\n\nuseEffect(() =&gt; {\n    dispatch(getApplicationTemplate());\n}, []);\n\n// Find the template with a matching title\nconst matchingTemplate =\n    getApplicationTemplateResponse.items &amp;&amp;\n    getApplicationTemplateResponse?.items.find(\n    (template) =&gt; template.title === title\n    );\n\n// Render HTML only if a matching template is found\n// const htmlContent = \"&lt;p&gt;This is some &lt;strong&gt;HTML&lt;/strong&gt; content.&lt;/p&gt;\";\nconst htmlContent = matchingTemplate ? matchingTemplate.body : \"\";\n\n// If title is not provided, render all bodies in different tabs\nif (!title) {\n    return (\n    &lt;Tabs defaultActiveKey=\"1\" tabPosition=\"left\"&gt;\n        {getApplicationTemplateResponse?.items?.map((template, index) =&gt; (\n        &lt;TabPane tab={template.title} key={String(index + 1)}&gt;\n            &lt;HTMLRenderer htmlContent={template.body} /&gt;\n        &lt;/TabPane&gt;\n        ))}\n    &lt;/Tabs&gt;\n    );\n}\n\nreturn &lt;HTMLRenderer htmlContent={htmlContent} /&gt;;\n};\n\nexport default HTMLRendererComponent;\n</code></pre> HTMLRenderer.js<pre><code>import React from \"react\";\n\nconst HTMLRenderer = ({ htmlContent }) =&gt; (\n&lt;div dangerouslySetInnerHTML={{ __html: htmlContent }} /&gt;\n);\n\nexport default HTMLRenderer;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/JSON-stringify/","title":"Using JSON.stringify","text":"<p>Example</p> <p>views/OfficeResource/Reference/Tabs/TenderTabs/companies/Companies.js</p> Companies Companies.js<pre><code>const col = [\n    {\n        title: \"Attention to\",\n        key: \"attentionTo\",\n        render: (record) =&gt; {\n            try {\n                return JSON.parse(record?.attentionTo &amp;&amp; record?.attentionTo)\n                    ?.map((x) =&gt; x.AttentionTo)\n                    ?.join(\", \");\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n        },\n        width: 50,\n    },\n]\n\nconst api2 = {\n...\nattentionTo: JSON.stringify(selectedAttendees),\n};\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/internalMNew/","title":"internalMNew","text":"<p>components/internalMNew/index.js</p> <p>Internal Attachments</p> internalMNew<pre><code>// line number: 447\n&lt;div&gt;\n  &lt;Upload\n    name=\"uploadedFiles\"\n    multiple={true}\n    itemRender={(files) =&gt; {\n      &lt;div style={{ display: \"none\" }}&gt;{files}&lt;/div&gt;;\n    }}\n    action={`${appBaseUrl}/file/uploadFile/`}\n    customRequest={uploadPhotos}\n  &gt;\n    &lt;img src={attachment} alt=\"\" /&gt;\n  &lt;/Upload&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/","title":"resuable component tooltip","text":""},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#basic-resuable-component","title":"Basic Resuable Component","text":"ComponentUsage <pre><code>import React from 'react';\nimport { Tooltip, Button } from 'antd';\nconst IconButtonWithTooltip = ({ tooltipText, buttonType = 'dashed', shape = 'circle', onClick, children }) =&gt; {\n    return (\n        &lt;Tooltip title={tooltipText}&gt;\n            &lt;Button\n                type={buttonType}\n                shape={shape}\n                onClick={onClick}\n            &gt;\n                {children}\n            &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    );\n};\n\nexport default IconButtonWithTooltip;\n</code></pre> <pre><code>const [isAddCompanyEmailModalOpen, setIsAddCompanyEmailModalOpen] = useState(false);\nconst [isAddCompanyEmailModalLoading, setIsAddCompanyEmailModalLoading] = useState(false);\n\n&lt;IconButtonWithTooltip\n    tooltipText=\"Add Company Email\"\n    onClick={() =&gt; setIsAddCompanyEmailModalOpen(true)}\n&gt;+&lt;/IconButtonWithTooltip&gt;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#advanced-resuable-component","title":"Advanced Resuable Component","text":"<pre><code>// IconButtonWithTooltip.js\nimport React from \"react\";\nimport { Tooltip, Button, Spin } from \"antd\"; // Import additional components if needed\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nconst IconButtonWithTooltip = ({\n  tooltipText,\n  buttonType = \"dashed\",\n  shape = \"circle\",\n  onClick,\n  isLoading = false,\n  className,\n  icon: Icon,\n  ariaLabel,\n  ...props\n}) =&gt; {\n  const buttonClass = classNames(\"icon-button\", className);\n\n  return (\n    &lt;Tooltip title={tooltipText}&gt;\n      &lt;Button\n        type={buttonType}\n        shape={shape}\n        onClick={onClick}\n        className={buttonClass}\n        aria-label={ariaLabel}\n        {...props}\n      &gt;\n        {isLoading ? &lt;Spin size=\"small\" /&gt; : Icon ? &lt;Icon /&gt; : props.children}\n      &lt;/Button&gt;\n    &lt;/Tooltip&gt;\n  );\n};\n\nIconButtonWithTooltip.propTypes = {\n  tooltipText: PropTypes.string.isRequired,\n  buttonType: PropTypes.oneOf([\"default\", \"primary\", \"dashed\", \"link\", \"text\"]),\n  shape: PropTypes.oneOf([\"circle\", \"round\"]),\n  onClick: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool,\n  className: PropTypes.string,\n  icon: PropTypes.elementType,\n  ariaLabel: PropTypes.string,\n};\n\nexport default IconButtonWithTooltip;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/reusable-component-tooltip/#reusable-component","title":"Reusable Component","text":"<p>To create a reusable component for your modal that adds a company email, you can encapsulate the modal logic into a separate component. This way, you can reuse it throughout your application while maintaining flexibility for different use cases.</p> <p>Below is an example of how you can implement this:</p> ComponentUsing ComponentSummary of the Reusable Component QuickAddCompanyEmailModal.jsx<pre><code>import React from \"react\";\nimport { Modal, Form, Input, Button } from \"antd\";\nimport { useDispatch } from \"react-redux\";\n\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst QuickAddCompanyEmailModal = ({ visible, onClose, onSubmit, loading }) =&gt; {\n    const [form] = Form.useForm();\n\n    const handleFinish = async (values) =&gt; {\n        await onSubmit(values.newEmail);\n        form.resetFields();\n    };\n\n    return (\n        &lt;Modal\n            title=\"Add Company Email\"\n            visible={visible}\n            footer={null}\n            onCancel={onClose}\n        &gt;\n            &lt;Form form={form} onFinish={handleFinish}&gt;\n                &lt;Form.Item\n                    label=\"Email Address\"\n                    name=\"newEmail\"\n                    rules={[\n                        { required: true, message: \"Please enter the company email!\" },\n                        {\n                            pattern: emailRegex,\n                            message: \"Please enter a valid email address!\",\n                        },\n                    ]}\n                &gt;\n                    &lt;Input placeholder=\"Enter company email\" /&gt;\n                &lt;/Form.Item&gt;\n                &lt;Form.Item&gt;\n                    &lt;Button\n                        className=\"company-add-save-btn\"\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        shape=\"round\"\n                        loading={loading}\n                    &gt;\n                        Add Email\n                    &lt;/Button&gt;\n                &lt;/Form.Item&gt;\n            &lt;/Form&gt;\n        &lt;/Modal&gt;\n    );\n};\n\nexport default QuickAddCompanyEmailModal;\n</code></pre> Companies.js<pre><code>const [isModalNewMailOpen, setIsModalNewMailOpen] = useState(false);\nconst [isLoadingNewMail, setIsLoadingNewMail] = useState(false);\n\nconst handleModalNewMailClose = () =&gt; {\n    setIsModalNewMailOpen(false);\n};\n\nconst handleAddEmailSubmit = async (newEmail) =&gt; {\n    setIsLoadingNewMail(true);\n\n    const body = {\n        companyId: selectedCompanyId,\n        email: newEmail,\n    };\n\n    try {\n        if (body.companyId) {\n            await dispatch(actionForAddCompanyOrContactPersonEmailAddById(body));\n            handleModalNewMailClose();\n\n            // if (selectedCompanyId) {\n            //     dispatch(getCompanyorPersonEmailAddess(null, selectedCompanyId));\n            // }\n        }\n    } catch (err) {\n        console.log(\"Error: \", err);\n    } finally {\n        setIsLoadingNewMail(false);\n    }\n};\n\n&lt;QuickAddCompanyEmailModal\n    visible={isModalNewMailOpen}\n    onClose={handleModalNewMailClose}\n    onSubmit={handleAddEmailSubmit}\n    loading={isLoadingNewMail}\n/&gt;\n</code></pre> <ul> <li>Props: The <code>AddCompanyEmailModal</code> accepts <code>visible</code>, <code>onClose</code>, <code>onSubmit</code>, and <code>loading</code> props, making it flexible for various contexts.</li> <li>Form Handling: The form is handled within the modal, with a reset after submission.</li> <li>Regex Validation: The email regex is used directly in the form rules.</li> </ul> <p>This structure allows you to keep your code organized and reusable while maintaining clarity in your components.</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/","title":"useDebouncedDispatch","text":"<p>To make your debounced dispatch function reusable, you can create a custom hook. This hook can encapsulate the debouncing logic and allow you to pass in the action creator and its parameters. Here\u2019s how to do it:</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#step-1-create-a-custom-hook","title":"Step 1: Create a Custom Hook","text":"<p>Create a file called <code>useDebouncedDispatch.js</code> (or a similar name) in a suitable folder, like <code>hooks</code> or <code>utils</code>.</p> <pre><code>// src/hooks/useDebouncedDispatch.js\n\nimport { useCallback } from \"react\";\nimport { debounce } from \"lodash\";\n\nconst useDebouncedDispatch = (actionCreator, delay = 300) =&gt; {\n  const dispatch = useDispatch(); // Ensure you have access to dispatch\n\n  return useCallback(\n    debounce((...args) =&gt; {\n      dispatch(actionCreator(...args));\n    }, delay),\n    [dispatch, actionCreator]\n  );\n};\n\nexport default useDebouncedDispatch;\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#step-2-use-the-custom-hook","title":"Step 2: Use the Custom Hook","text":"<p>Now, you can use this custom hook in your component:</p> <pre><code>import React from 'react';\nimport { getCompanyorPersonEmailAddess } from 'services/redux/contact/contact.action';\nimport useDebouncedDispatch from 'path/to/hooks/useDebouncedDispatch';\n\nconst YourComponent = () =&gt; {\n  const debounceAttentiontoDispatch = useDebouncedDispatch(getCompanyorPersonEmailAddess, 300);\n\n  const handleSelect = (selectedPersonIds, selectedCompanyId) =&gt; {\n    debounceAttentiontoDispatch(selectedPersonIds, selectedCompanyId);\n  };\n\n  return (\n    // Your component JSX\n  );\n};\n</code></pre>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#explanation","title":"Explanation:","text":"<ol> <li> <p>Custom Hook: The <code>useDebouncedDispatch</code> hook takes an action creator and a delay. It returns a debounced version of the dispatch function that can be called with any number of arguments.</p> </li> <li> <p>Usage in Component: In your component, you simply call <code>useDebouncedDispatch</code> with your action creator and use the returned function to dispatch actions. This keeps your component clean and reusable.</p> </li> <li> <p>Debounce Logic: The <code>debounce</code> function from Lodash ensures that the action is dispatched only after the specified delay since the last invocation.</p> </li> </ol>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#summary","title":"Summary","text":"<p>This approach encapsulates the debouncing logic into a reusable custom hook, making it easy to apply similar functionality across different components without duplicating code.</p>"},{"location":"office/ispl/documentation/commonModule/useDebouncedDispatch/#additional","title":"Additional","text":"Folder StructureExplanationExampleSummary <p>Here\u2019s an updated folder structure for your React project that includes a <code>hooks</code> directory for reusable hooks like <code>useDebouncedDispatch</code>:</p> <pre><code>/your-project\n\u2502\n\u251c\u2500\u2500 /src\n\u2502   \u251c\u2500\u2500 /components          // Contains your React components\n\u2502   \u251c\u2500\u2500 /redux               // Redux-related files\n\u2502   \u2502   \u251c\u2500\u2500 /actions         // Action creators\n\u2502   \u2502   \u251c\u2500\u2500 /reducers        // Reducers\n\u2502   \u2502   \u2514\u2500\u2500 /store.js        // Store configuration\n\u2502   \u251c\u2500\u2500 /constants           // Constants\n\u2502   \u2502   \u251c\u2500\u2500 actionTypes.js   // Action types\n\u2502   \u2502   \u251c\u2500\u2500 apiEndpoints.js   // API endpoint constants\n\u2502   \u2502   \u2514\u2500\u2500 otherConstants.js // Other constants\n\u2502   \u251c\u2500\u2500 /hooks               // Custom hooks\n\u2502   \u2502   \u2514\u2500\u2500 useDebouncedDispatch.js // Your debounced dispatch hook\n\u2502   \u251c\u2500\u2500 /utils               // Utility functions\n\u2502   \u251c\u2500\u2500 /pages               // Page components (if using routing)\n\u2502   \u2514\u2500\u2500 App.js               // Main application component\n\u2502\n\u251c\u2500\u2500 package.json             // Project dependencies and scripts\n\u2514\u2500\u2500 README.md                // Project documentation\n</code></pre> <p>Explanation of the Structure</p> <ol> <li> <p><code>/src</code>: The main source folder for your React application.</p> </li> <li> <p><code>/components</code>: Contains individual React components that you use in your application.</p> </li> <li> <p><code>/redux</code>: For all Redux-related files:</p> <ul> <li><code>/actions</code>: Contains action creators.</li> <li><code>/reducers</code>: Contains reducer functions.</li> <li><code>store.js</code>: Configures the Redux store.</li> </ul> </li> <li> <p><code>/constants</code>: Holds constant values like action types and API endpoints.</p> </li> <li> <p><code>/hooks</code>: Contains custom hooks, such as <code>useDebouncedDispatch</code>, making them reusable throughout your application.</p> </li> <li> <p><code>/utils</code>: Contains utility functions that can be used across your application.</p> </li> <li> <p><code>/pages</code>: If you are structuring your application with routing, this folder can hold different page components.</p> </li> <li> <p><code>App.js</code>: The entry point for your application</p> </li> </ol> <p>Example of <code>useDebouncedDispatch.js</code>:</p> <p>You would place your <code>useDebouncedDispatch.js</code> file in the <code>/hooks</code> folder like this:</p> <pre><code>// /src/hooks/useDebouncedDispatch.js\n\nimport { useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { useDispatch } from 'react-redux';\n\nconst useDebouncedDispatch = (actionCreator, delay = 300) =&gt; {\n    const dispatch = useDispatch();\n\n    return useCallback(\n        debounce((...args) =&gt; {\n            dispatch(actionCreator(...args));\n        }, delay),\n        [dispatch, actionCreator]\n    );\n};\n\nexport default useDebouncedDispatch;\n</code></pre> <p>This folder structure keeps your project organized and makes it easier to manage your components, Redux logic, constants, and reusable hooks. You can adjust it according to your specific project needs, but this serves as a solid foundation for a React application.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/","title":"useReducer","text":"<p>explain to 5 years old. what is <code>useReducer</code> in react. when to use it. when to use <code>useState</code>.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#overview","title":"Overview","text":"<p>Sure! Let\u2019s imagine you have a big box of toy blocks and you want to build different things with them.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#usestate","title":"<code>useState</code>:","text":"<p>Think of <code>useState</code> like having a single toy box where you can keep and change one type of toy, like LEGO blocks. If you want to change what\u2019s inside the box, you can just put in new LEGO blocks or take some out. It's simple and great when you just need to manage one type of toy or one small part of your building project.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#usereducer","title":"<code>useReducer</code>:","text":"<p>Now, imagine you have a big toy set with lots of different blocks and parts. You might need a special system to keep track of all the different pieces and how they should fit together. <code>useReducer</code> is like having a smart helper who knows how to handle all these different parts. This helper listens to what you want to do (like adding a new block or moving a piece) and then figures out the best way to update your toy set based on those instructions.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#when-to-use-each","title":"When to use each:","text":"<ul> <li> <p>Use <code>useState</code> when you have just one simple thing to keep track of or change, like how many apples you have or if you want the toy car to be red or blue.</p> </li> <li> <p>Use <code>useReducer</code> when you have a more complex toy set with lots of different pieces or actions, like if you\u2019re building a big castle with many rooms and towers, and you need a clear way to manage all the different changes.</p> </li> </ul> <p>So, <code>useState</code> is for simpler situations, and <code>useReducer</code> helps when things get more complicated!</p> <p>Absolutely! Here\u2019s another real-time example where useReducer shines: managing the state of a form with multiple fields and actions.</p>"},{"location":"office/ispl/documentation/commonModule/useReducer/#example-form-with-multiple-fields","title":"Example: Form with Multiple Fields","text":"<p>Imagine you\u2019re building a form where users can enter their name, email, and password. You want to handle form submission, input changes, and possibly form validation in a way that's organized and maintainable.</p> <p>Here\u2019s how you can use <code>useReducer</code> for this:</p> <pre><code>import React, { useReducer } from 'react';\n\n// Define action types\nconst UPDATE_FIELD = 'UPDATE_FIELD';\nconst RESET_FORM = 'RESET_FORM';\n\n// Define the initial state of the form\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\n// Define the reducer function\nfunction formReducer(state, action) {\n  switch (action.type) {\n    case UPDATE_FIELD:\n      return { ...state, [action.field]: action.value };\n    case RESET_FORM:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nfunction MyForm() {\n  // Use useReducer to manage form state\n  const [state, dispatch] = useReducer(formReducer, initialState);\n\n  // Handle input changes\n  const handleChange = (event) =&gt; {\n    const { name, value } = event.target;\n    dispatch({ type: UPDATE_FIELD, field: name, value });\n  };\n\n  // Handle form submission\n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    // Perform form submission logic here\n    console.log('Form submitted:', state);\n    // Optionally reset the form\n    dispatch({ type: RESET_FORM });\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;div&gt;\n        &lt;label&gt;Name:&lt;/label&gt;\n        &lt;input\n          type=\"text\"\n          name=\"name\"\n          value={state.name}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Email:&lt;/label&gt;\n        &lt;input\n          type=\"email\"\n          name=\"email\"\n          value={state.email}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;Password:&lt;/label&gt;\n        &lt;input\n          type=\"password\"\n          name=\"password\"\n          value={state.password}\n          onChange={handleChange}\n        /&gt;\n      &lt;/div&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n\nexport default MyForm;\n</code></pre>"},{"location":"office/ispl/documentation/tenderModule/","title":"Index","text":"<p>sfs</p>"},{"location":"office/ispl/documentation/tenderModule/reusableComponents/intro/","title":"Intro","text":"<p>fsadfsfd</p>"},{"location":"office/ispl/important/appuserid/","title":"AppUserId","text":"<pre><code>import storage from \"/utils/storage\";\nlet currentUserId = storage.getItem(\"userId\");\n</code></pre> <pre><code>const appUserIdUC = sessionStorage?.userId.toUpperCase();\n</code></pre>"},{"location":"office/ispl/important/debounce/","title":"Debounce","text":"<p>debounce</p> <pre><code>import { debounce } from \"lodash\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nconst debouncedDispatch = useCallback(\n    debounce((selectedPersonIds, selectedCompanyId) =&gt; {\n        dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    }, 300),\n    [dispatch]\n);\n\nconst handleSelectChange = (values, options) =&gt; {\n    const selectedData = options.map((option) =&gt; ({\n        AttentionTo: option.props.children,\n        AttentionId: option.key,\n    }));\n\n    let selectedPersonIds = selectedData &amp;&amp; selectedData?.map((item) =&gt; ({\n        contactPersonIds: item?.AttentionId,\n    }));\n\n    setSelectedAttendees(selectedData);\n    setHasSelectedAttentionTos(!isEmpty(values));\n\n    // dispatch(getCompanyorPersonEmailAddess(selectedPersonIds, selectedCompanyId));\n    debouncedDispatch(selectedPersonIds, selectedCompanyId);\n};\n\n\n\nreturn (\n    &lt;&gt;\n    &lt;Form.Item label=\"Attention to\" name=\"attendees\"&gt;\n        &lt;Select\n            showSearch\n            mode=\"multiple\"\n            autoComplete=\"off\"\n            optionFilterProp=\"label\"\n            placeholder=\"Select Person\"\n            allowClear\n            onSearch={(value) =&gt; {\n                setSearchKeywordContactPerson(value);\n            }}\n\n            // ONCHANGE\n            onChange={handleSelectChange}\n        /&gt;\n    &lt;/Form.Item&gt;\n    &lt;/&gt;\n)\n</code></pre> Companies.js<pre><code>const debounceDispatch = useCallback(\n    debounce((selectedKeys) =&gt; {\n        console.log(\"dispatch\", selectedKeys)\n        let id = getDetails?.referenceId;\n        if (id)\n            dispatch(getCompanyPersonEmailAddress(id, selectedKeys))\n    }, 2000), [dispatch]\n)\n\nconst rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      let contactCompanyIds = selectedRows &amp;&amp; selectedRows.map(row =&gt; row.contactCompanyId);\n      setSelectedRowKeys(selectedKeys);debounceDispatch(contactCompanyIds);\n    },\n    type: 'checkbox',\n};\n</code></pre> action.jsreducer.jstypes.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        if (response.isSuccess) {\n            dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n            );\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n}\n</code></pre> <pre><code>// EMAIL ADRESS\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_INIT:\n    return {\n        ...state,\n        personMailListing: [],\n        personMailListingLoading: true,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_SUCCESS:\n    return {\n        ...state,\n        personMailListing: action.payload,\n        personMailListingLoading: false,\n    };\ncase EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING_FINISH:\n    return {\n        ...state,\n        personMailListingLoading: false,\n    };\n</code></pre> <pre><code>// LISTING\nCOMPANY_PERSON_EMAIL_LISTING: \"COMPANY_PERSON_EMAIL_LISTING\",\nCOMPANY_PERSON_EMAIL_LISTING_INIT: \"COMPANY_PERSON_EMAIL_LISTING_INIT\",\nCOMPANY_PERSON_EMAIL_LISTING_FINISH: \"COMPANY_PERSON_EMAIL_LISTING_FINISH\",\nCOMPANY_PERSON_EMAIL_LISTING_SUCCESS: \"COMPANY_PERSON_EMAIL_LISTING_SUCCESS\", \n</code></pre>"},{"location":"office/ispl/important/draft/","title":"draft","text":"<p>skhkwejd</p>"},{"location":"office/ispl/important/draft/#throwing-error","title":"THROWING ERROR","text":"Component LevelAction Level <p>If the <code>catch</code> block is not preventing the new tab from opening, it\u2019s likely due to how the error handling and asynchronous operations are managed. Here's a revised approach to ensure the new tab only opens if all operations are successful and if errors are properly handled.</p> <p>Updated Approach</p> <ul> <li>Ensure that <code>window.open</code> is inside the <code>try</code> block after all asynchronous operations and only if there are no errors.</li> <li>Check for errors in the <code>catch</code> block and make sure <code>window.open</code> is not executed in case of errors.</li> </ul> <pre><code>const handleTenderMail = async () =&gt; {\n    // console.log(\"getDetails: \", getDetails?.title)\n\n    let data = {\n        tos: referencePartyListingCircularResponse ?? '',\n        refCode: getDetails?.referenceCode ?? '',\n        subject: getDetails?.title ?? '',\n    }\n    // dispatch(actionForPersistTenderMailData(data));\n    //\n    setIsLoadingOpeningMail(true);\n    try {\n        let id = getDetails?.referenceId;\n\n        // Await the dispatch for getting company person email address\n        await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));\n\n        // Persist tender content\n        await dispatch(actionForPersisteRTenderContent(id));\n\n        // Optionally, save response data to session storage if needed\n        // const response = await someAsyncOperationToGetData();\n        // sessionStorage.setItem('key', JSON.stringify(response));\n\n        // Use a promise-based delay\n        await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n\n        // Open the new tab after operations are complete and delay\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n\n    } catch (err) {\n        // Handle any errors that occurred during the dispatches or delay\n        console.log(\"Error occurred:\", err);\n    } finally {\n        // Always stop the loading indicator regardless of success or failure\n        setIsLoadingOpeningMail(false);\n    }\n}\n</code></pre> <p>Troubleshooting Tips</p> <ol> <li> <p>Ensure <code>catch</code> Block is Executed: Add debug statements like <code>console.log(\"Error occurred:\", err);</code> in your <code>catch</code> block to verify that the errors are being logged. If you don't see the error log, the <code>catch</code> block may not be triggered correctly.</p> </li> <li> <p>Verify <code>await</code> Operation: Ensure that the <code>await</code> statements are correctly handling promises and that any error thrown by the <code>dispatch</code> calls or the <code>new Promise</code> is being caught.</p> </li> <li> <p>Check Asynchronous Code: Confirm that all your async functions (like <code>getCompanyPersonEmailAddress</code> and <code>actionForPersisteRTenderContent</code>) correctly return promises and throw errors properly.</p> </li> <li> <p>Check for Unhandled Errors: Make sure no errors are silently caught or not propagated. If errors are handled internally by some library or function and not re-thrown, they won't reach your <code>catch</code> block.</p> </li> </ol> <p>Example with Explicit Error Throwing</p> <p>Sometimes it\u2019s helpful to explicitly throw errors in asynchronous operations to ensure they are properly caught:</p> <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            const response = await participationStatusService.getCompanyPersonEmailAddress(id, body);\n            dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n            if (response.isSuccess) {\n                dispatch(success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data));\n                dispatch(actionForPersistTenderMailTos(response.data));\n            } else {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);  // Ensure error is thrown\n            }\n        } catch (err) {\n            dispatch(error(err.message || \"An error occurred\"));\n            throw err;  // Ensure error is re-thrown\n        }\n    };\n}\n</code></pre> <p>By ensuring that all errors are properly thrown and caught, and by checking if the catch block is being hit, you should be able to manage the new tab opening correctly based on the success or failure of your operations.</p>"},{"location":"office/ispl/important/draft/#promise","title":"Promise","text":"<p>What the Promise Does</p> <p>A <code>Promise</code> in JavaScript represents the completion (or failure) of an asynchronous operation and its resulting value. It provides a way to attach callbacks that handle the result or error when the operation is complete.</p> <p>In your function, the <code>Promise</code> is used to create a delay:</p> <pre><code>await new Promise((resolve) =&gt; setTimeout(resolve, 5000));\n</code></pre> <p>This <code>Promise</code> is created with a <code>setTimeout</code> function that waits for 5000 milliseconds (5 seconds) before calling the <code>resolve</code> function. This effectively causes the <code>await</code> to pause for 5 seconds.</p> What Happens in Your Scenario <ol> <li> <p>Both dispatch Calls:</p> <ul> <li><code>await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds));</code></li> <li><code>await dispatch(actionForPersisteRTenderContent(id));</code></li> </ul> <p>These <code>dispatch</code> calls are awaited sequentially. If either of these operations fails, the <code>catch</code> block will handle the error.</p> </li> <li> <p>Delay:</p> <ul> <li><code>await new Promise(resolve =&gt; setTimeout(resolve, 5000));</code></li> </ul> <p>After the <code>dispatch</code> operations succeed, the <code>await</code> for the <code>Promise</code> will cause the function to pause for 5 seconds. During this time, the function does nothing but wait.</p> </li> <li> <p>Open New Tab:</p> <ul> <li><code>window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");</code></li> </ul> <p>After the 5-second delay (if the <code>Promise</code> resolves successfully), the new tab will be opened.</p> </li> </ol> If the dispatch Calls Are Successful Before 5 Seconds <ul> <li>If the two dispatch calls complete successfully before the 5-second delay is over, the function will still wait for the full 5 seconds due to the await on the Promise. The new tab will only be opened after this 5-second delay.</li> </ul> If the dispatch Calls Fail <ul> <li>If any of the dispatch calls throw an error, the catch block will handle the error, and the setIsLoadingOpeningMail(false) will be executed to stop the loading indicator. The new tab will not be opened because the function will exit early due to the error.</li> </ul> Summary <ul> <li>The <code>Promise</code> with <code>setTimeout</code> ensures that the code execution pauses for 5 seconds, regardless of how quickly the previous asynchronous operations complete.</li> <li>If any <code>dispatch</code> operation fails, the error is caught, and the new tab is not opened.</li> <li>If all operations succeed and the 5-second delay completes, the new tab will be opened.</li> </ul> <p>This approach provides a way to control the timing of when you open the new tab, ensuring it happens after all necessary operations and any required delays.</p>"},{"location":"office/ispl/important/draft/#why-use-try-catch-in-both-actions-and-components","title":"Why Use <code>try-catch</code> in Both Actions and Components?","text":"<p>In modern JavaScript applications, especially those using frameworks like React with Redux, you often find yourself dealing with asynchronous actions and state management. It\u2019s crucial to handle errors effectively to ensure a smooth user experience and maintainable code. This involves using <code>try-catch</code> blocks both in your action creators (for managing async operations) and in your components (for managing UI and state). Here\u2019s why handling errors at both levels is important:</p> <ol> <li> <p>Error Handling in Action Creators</p> ExampleExplanation <pre><code>export const fetchData = () =&gt; async (dispatch) =&gt; {\n    try {\n        const response = await fetch('/api/data');\n        if (!response.ok) throw new Error('Network response was not ok');\n        const data = await response.json();\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\n    } catch (error) {\n        dispatch({ type: 'FETCH_FAILURE', error: error.message });\n    }\n};\n</code></pre> <p>Purpose: Action creators, especially those involving asynchronous operations (e.g., API calls), need to handle errors to ensure that they correctly manage and propagate error states.</p> <ul> <li> <p>Manage Asynchronous Operations:</p> <p>When making asynchronous requests (e.g., fetching data from an API), errors can occur due to network issues, server errors, or invalid responses. Handling these errors in the action creator ensures that the application can respond appropriately (e.g., showing an error message to the user).</p> </li> <li> <p>Dispatch Error Actions:</p> <p>If an error occurs in an action creator, it\u2019s essential to dispatch an error action to update the application state. This allows the UI to reflect the error state and provides users with feedback about what went wrong.</p> </li> <li> <p>Ensure Consistency:</p> <p>Proper error handling in actions helps maintain a consistent and predictable application state. Without it, your application might enter an inconsistent state if errors are not properly managed.</p> </li> </ul> </li> <li> <p>Error Handling in Components</p> ExampleExplanation <pre><code>const MyComponent = () =&gt; {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() =&gt; {\n        const fetchData = async () =&gt; {\n            try {\n                const response = await fetch('/api/data');\n                if (!response.ok) throw new Error('Network response was not ok');\n                const result = await response.json();\n                setData(result);\n            } catch (error) {\n                setError(error.message);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\n    if (!data) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n    return &lt;div&gt;Data: {data}&lt;/div&gt;;\n};\n</code></pre> <p>Purpose: Components are responsible for rendering UI and managing user interactions. Handling errors in components is crucial for providing a good user experience and ensuring that the application remains functional even when errors occur.</p> <ul> <li> <p>Display Error Messages:</p> <p>Components should handle and display error messages to users, allowing them to understand what went wrong and take corrective actions if possible.</p> </li> <li> <p>Manage Component State:</p> <p>Components need to manage their internal state based on the results of asynchronous operations. Proper error handling ensures that the UI remains consistent and provides feedback to users when errors occur.</p> </li> <li> <p>Prevent Application Crashes:</p> <p>By catching errors at the component level, you can prevent errors from propagating up and potentially crashing the entire application. This helps in maintaining stability and reliability.</p> </li> </ul> </li> </ol> Summary <ul> <li> <p>Error Handling in Actions: Ensures that asynchronous operations are managed properly, errors are dispatched to the state, and the application remains in a consistent state.</p> </li> <li> <p>Error Handling in Components: Provides a mechanism to handle and display errors to users, manage component state, and prevent crashes.</p> </li> </ul> <p>Using <code>try-catch</code> in both action creators and components ensures robust error handling throughout your application, providing a better user experience and easier maintenance.</p>"},{"location":"office/ispl/important/draft/#mail-next-select","title":"Mail Next Select","text":"ExampleImplementation <pre><code>const handleDelete = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"xxx: \", selectedTenderRowId);\n    console.log(\"Delete Me\", contextMenu?.id, tenderData);\n\n    const currentIndex = tenderData.findIndex(\n        (item) =&gt; item.referenceCode === selectedTenderRowId\n    );\n\n    if (currentIndex !== -1) {\n        // Set isActive to false for the current item\n        let payload = {\n            ...contextMenu.body,\n            isActive: false,\n        };\n        dispatch(tenderDelete(payload));\n\n        // Determine the next index or last index\n        const nextIndex =\n            currentIndex + 1 &lt; tenderData.length\n                ? currentIndex + 1\n                : tenderData.length - 1;\n            const nextItem = tenderData[nextIndex];\n\n        // Set the context menu to the next item if available\n        if (nextItem) {\n            setContextMenu({\n                id: nextItem.id,\n                referenceCode: nextItem.referenceCode,\n            });\n        }\n    }\n};\n</code></pre> TenderPagination.js<pre><code>const handleDelete = (e) =&gt; {\n    e.preventDefault();\n    console.log(\"xxx: \", selectedTenderRowId);\n    console.log(\"Delete Me\", contextMenu?.id, tenderData);\n    let payload = {\n        ...contextMenu.body,\n        isActive: false,\n    };\n    dispatch(tenderDelete(payload));\n\n    let currentIndex = tenderData?.findIndex(\n        (item) =&gt; item.referenceCode === selectedTenderRowId\n    );\n\n    let nextIndex =\n        currentIndex + 1 &lt; tenderData?.length\n        ? currentIndex + 1\n        : tenderData?.length - 1;\n    const nextItem = tenderData[nextIndex];\n    if (nextItem) {\n        handleRowClick(tenderData[nextIndex]);\n    }\n};\n</code></pre>"},{"location":"office/ispl/important/draft/#companies-button-tooltip","title":"Companies Button Tooltip","text":"BasicDefensiveKey Defensive Programming Techniques UsedUpdated Companies.js<pre><code>// Tooltip\nconst tooltipMessage = !getDetails?.isCircularPlanningApprovalRequestSent\n    ? \"Not Sent\"\n    : getDetails?.circularPlanningApprovedStatusDto?.isApproved\n    ? `Approved by ${\n        getDetails.circularPlanningApprovedStatusDto.approverName\n    } on ${moment(\n        getDetails.circularPlanningApprovedStatusDto.approveDate\n    ).format(\"MMMM D, YYYY\")}}`\n    : `Not yet approved, Sent By: ${\n        getDetails.circularPlanningSendForApprovalLogDto?.from\n        ?.participantName ?? \"\"\n    }, To: ${getDetails.circularPlanningSendForApprovalLogDto?.to?.map(\n        (item) =&gt; item?.participantName\n    )}, Time: ${moment(\n        getDetails.circularPlanningSendForApprovalLogDto.messageSentTime\n    ).format(\"YYYY-MM-DD HH:mm:ss\")}`;\n</code></pre> <p>Defensive programming is essential to ensure that your code can handle unexpected inputs gracefully without breaking.</p> <pre><code>const getDetailsSafe = getDetails || {}; // Fallback to an empty object\n\n// Safely access properties\nconst isRequestSent = getDetailsSafe.isCircularPlanningApprovalRequestSent;\nconst approvalStatus = getDetailsSafe.circularPlanningApprovedStatusDto || {};\nconst sendForApprovalLog =\n    getDetailsSafe.circularPlanningSendForApprovalLogDto || {};\n\n// Fallback values\nconst approverName = approvalStatus.approverName || \"Unknown\";\nconst approveDate = approvalStatus.approveDate\n    ? moment(approvalStatus.approveDate).format(\"YYYY-MM-DD\")\n    : \"N/A\";\n    const senderName = sendForApprovalLog.from?.participantName || \"Unknown\";\n    const messageSentTime = sendForApprovalLog.messageSentTime\n    ? moment(sendForApprovalLog.messageSentTime).format(\"YYYY-MM-DD HH:mm:ss\")\n    : \"N/A\";\n\nconst toList = Array.isArray(sendForApprovalLog.to)\n    ? sendForApprovalLog.to.map((item, index) =&gt; (\n        &lt;li key={item.participantId || index}&gt;\n            {item.participantName || \"Unnamed\"}\n        &lt;/li&gt;\n        ))\n    : [\"No recipients\"];\n\n// Construct the tooltip message\nconst tooltipMessage = !isRequestSent ? (\n    \"Not Sent\"\n    ) : approvalStatus.isApproved ? (\n    `Approved by ${approverName} on ${approveDate}`\n    ) : (\n    &lt;div&gt;\n        &lt;p&gt;Not yet approved&lt;/p&gt;\n        &lt;p&gt;Sent By: {senderName}&lt;/p&gt;\n        &lt;p&gt;To:&lt;/p&gt;\n        &lt;ul&gt;{toList}&lt;/ul&gt;\n        &lt;p&gt;Time: {messageSentTime}&lt;/p&gt;\n    &lt;/div&gt;\n    );\n</code></pre> <ol> <li>Fallbacks: Used <code>getDetailsSafe</code> to avoid errors when <code>getDetails</code> is <code>undefined</code>.</li> <li>Optional Chaining: Used <code>?.</code> to safely access nested properties.</li> <li>Default Values: Provided default values for names and dates to prevent displaying <code>undefined</code>.</li> <li>Array Checks: Ensured that <code>sendForApprovalLog.to</code> is an array before mapping, providing a fallback if it's not.</li> <li>Error Handling: Although not explicitly shown here, you can wrap the entire tooltip construction in a try-catch block if there\u2019s a possibility of more complex operation</li> </ol> <pre><code>const toList = Array.isArray(sendForApprovalLog.to)\n    ? sendForApprovalLog.to\n        .map((item) =&gt; item.participantName || \"Unnamed\")\n        .join(\", \")\n    : \"No recipients\";\n</code></pre>"},{"location":"office/ispl/important/error-boundary/","title":"Error Boundry","text":""},{"location":"office/ispl/important/error-boundary/#file-structure","title":"File Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 ErrorBoundary/\n\u2502   \u2502   \u251c\u2500\u2500 ErrorFallback.js\n\u2502   \u2502   \u2514\u2500\u2500 ErrorBoundaryWrapper.js\n\u2502   \u2514\u2500\u2500 ErrorSimulator.js\n\u251c\u2500\u2500 App.js\n\u2514\u2500\u2500 index.js\n</code></pre> Step 1Step 2Step 3ErrorSimulator.jsantd fallback ui <p>Create <code>ErrorFallback.js</code> (Fallback Component)</p> <pre><code>// src/components/ErrorBoundary/ErrorFallback.js\n\nimport React from 'react';\n\nconst ErrorFallback = ({ error, resetErrorBoundary }) =&gt; (\n    &lt;div style={{ padding: '20px', border: '1px solid red', backgroundColor: '#fdd' }}&gt;\n        &lt;h2&gt;Something went wrong:&lt;/h2&gt;\n        &lt;p&gt;{error.message}&lt;/p&gt;\n        &lt;button onClick={resetErrorBoundary} style={{ padding: '10px 20px', backgroundColor: '#ddd' }}&gt;\n            Try Again\n        &lt;/button&gt;\n    &lt;/div&gt;\n);\n\nexport default ErrorFallback;\n</code></pre> <p>Create <code>ErrorBoundaryWrapper.js</code> (ErrorBoundary Wrapper Component)</p> Bug <pre><code>// src/components/ErrorBoundary/ErrorBoundaryWrapper.js\n\nimport React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport ErrorFallback from './ErrorFallback';\n\n// A wrapper around the `ErrorBoundary` component to simplify usage\nconst ErrorBoundaryWrapper = ({ children }) =&gt; (\n    &lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;\n        {children}\n    &lt;/ErrorBoundary&gt;\n);\n\nexport default ErrorBoundaryWrapper;\n</code></pre> Success <p>You need to add a <code>return</code> statement to make sure that the JSX (the <code>ErrorBoundary</code> with <code>children</code> inside it) is returned.</p> <pre><code>import React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport ErrorFallback from './ErrorFallback';\n\nconst ErrorBoundaryWrapper = ({ children }) =&gt; (\n     // Ensure the return statement is present\n    return (\n        &lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;\n            {children}\n        &lt;/ErrorBoundary&gt;\n    )\n);\n\nexport default ErrorBoundaryWrapper;\n</code></pre> <p>Explanation:</p> <ul> <li>The issue: In your original code, the <code>ErrorBoundary</code> was not being returned from the ErrorBoundaryWrapper component. Without the <code>return</code>, React doesn't know what to render, which is why you're seeing the error: \"Nothing was returned from render.\"</li> <li>The fix: By adding the <code>return</code> statement, you ensure that the component correctly renders the <code>ErrorBoundary</code> component, wrapping the <code>children</code>.</li> </ul> <pre><code>// src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ErrorBoundaryWrapper from './components/ErrorBoundary/ErrorBoundaryWrapper';\n\nReactDOM.render(\n    &lt;ErrorBoundaryWrapper&gt;\n        &lt;App /&gt;\n    &lt;/ErrorBoundaryWrapper&gt;,\n    document.getElementById('root')\n);\n</code></pre> <pre><code>// src/components/ErrorSimulator.js\n\nimport React, { useState } from 'react';\n\nconst ErrorSimulator = () =&gt; {\n    const [hasError, setHasError] = useState(false);\n\n    const handleSimulateError = () =&gt; {\n        setHasError(true);\n    };\n\n    // Simulate an error by throwing it\n    if (hasError) {\n        throw new Error('This is a simulated error!');\n    }\n\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;No error yet!&lt;/h2&gt;\n            &lt;button onClick={handleSimulateError}&gt;\n                Simulate Error\n            &lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ErrorSimulator;\n</code></pre> <pre><code>// src/components/ErrorBoundary/ErrorFallback.js\n\nimport React from \"react\";\nimport { Button, Alert, Typography } from \"antd\";\n\nconst { Title, Paragraph } = Typography;\n\nconst ErrorFallback = ({ error, resetErrorBoundary }) =&gt; {\n    return (\n        &lt;div style={{ padding: \"30px\", textAlign: \"center\" }}&gt;\n            &lt;Alert\n                message=\"Something went wrong!\"\n                description={error.message}\n                type=\"error\"\n                showIcon\n                style={{ marginBottom: \"20px\" }}\n            /&gt;\n            &lt;div&gt;\n                &lt;Title level={3}&gt;Oops! An unexpected error occurred.&lt;/Title&gt;\n                &lt;Paragraph&gt;\n                    We apologize for the inconvenience. Please try again by clicking the\n                    button below.\n                &lt;/Paragraph&gt;\n                &lt;Button\n                    type=\"primary\"\n                    size=\"large\"\n                    onClick={resetErrorBoundary}\n                    style={{ marginTop: \"10px\" }}\n                &gt;\n                    Try Again\n                &lt;/Button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default ErrorFallback;\n</code></pre> <p>Explanation</p> <p>When an error is triggered, the UI will now look like this:</p> <ul> <li>A red <code>Alert</code> component with the error message.</li> <li>A heading with the text: \"Oops! An unexpected error occurred\".</li> <li>A brief explanation with a <code>Button</code> that says \"Try Again\" to reset the error boundary.</li> </ul>"},{"location":"office/ispl/important/error-boundary/#question","title":"Question","text":"<p>can we wrap error boundry at the root of the react app. is it feasible ?</p> <p>Yes, it is absolutely feasible to wrap your entire React app with an <code>ErrorBoundary</code> at the root level. In fact, this is a recommended approach in many cases because it ensures that unhandled errors anywhere in the app are caught and handled by a global fallback UI.</p> <p>Key Benefits of Wrapping the ErrorBoundary at the Root Level:</p> <ul> <li>Global Error Handling: It acts as a \"catch-all\" for unexpected errors that may occur in any component within the app.</li> <li>Graceful Degradation: You can display a generic error screen to the user without the app crashing.</li> <li>Centralized Error Management: It simplifies error handling, as you don\u2019t need to wrap every individual component with an error boundary.</li> </ul> <p>How to Wrap the ErrorBoundary at the Root Level:</p> <ol> <li>Wrap your entire app with an <code>ErrorBoundary</code> in the <code>index.js</code> or <code>App.js</code>.</li> <li>Use a fallback component to display a user-friendly error message when an error occurs.</li> </ol> <p>When Would You Use This Approach?</p> <ol> <li>Global Error Handling: This is ideal for catching unexpected errors anywhere in the app and showing a fallback UI.</li> <li>App-wide Errors: If your app is large and has many components, using a global error boundary allows you to prevent the entire app from crashing due to a single error in one component.</li> <li>User Experience: You can show a generic error page or message, preventing the user from seeing a broken UI.</li> </ol> <p>Potential Drawbacks:</p> <ol> <li>Performance: Wrapping the entire app with a single error boundary could potentially make error recovery slower if many components are nested within it. However, this is generally not an issue unless your app is extremely large.</li> <li>Granular Error Handling: If you want to handle specific errors differently (e.g., show different UIs for different sections of the app), you may still want to add additional error boundaries at specific points in the component tree.</li> </ol> <p>Conclusion:</p> <p>Wrapping the entire app with an error boundary at the root level is a feasible and recommended practice for catching and handling unhandled errors globally. It improves the app's reliability and provides a better user experience by preventing crashes and showing a fallback UI instead. You can still have additional error boundaries at specific points in your app if you need more granular control over error handling.</p>"},{"location":"office/ispl/important/error-boundary/#theory","title":"Theory","text":"<p>Is resetErrorBoundary is this a builtin function ?</p> <p>Yes, <code>resetErrorBoundary</code> is a built-in function provided by the react-error-boundary library.</p> <p>When you use the <code>ErrorBoundary</code> component from the react-error-boundary package, it automatically provides the <code>resetErrorBoundary</code> function as part of the props that are passed to the fallback component. This function allows you to reset the error boundary, effectively clearing the error state and rendering the child components again.</p> <p>How <code>resetErrorBoundary</code> Works:</p> <ul> <li>When an error occurs, the ErrorBoundary component catches it and renders the fallback component (in this case, <code>ErrorFallback</code>).</li> <li>The <code>resetErrorBoundary</code> function allows the fallback UI to reset the error state of the boundary, which causes the application to re-render the child components as if no error ever occurred.</li> </ul> <p>How to Use <code>resetErrorBoundary</code>:</p> <ul> <li>The <code>resetErrorBoundary</code> function is passed as a prop to the fallback component (in our case, <code>ErrorFallback</code>).</li> <li>You can trigger this function, typically by using a button or any other interaction, to reset the error boundary.</li> </ul> <p>Key Props Summary</p> Prop Type Description Example Usage <code>FallbackComponent</code> <code>React.Component</code> The component to display when an error occurs <code>&lt;ErrorBoundary FallbackComponent={ErrorFallback}&gt;</code> <code>onError</code> <code>(error: Error, info: object) =&gt; void</code> Callback when an error is caught <code>onError={(error, info) =&gt; console.error(error, info)}</code> <code>onReset</code> <code>() =&gt; void</code> Callback when the error boundary is reset <code>onReset={() =&gt; console.log(\"Resetting boundary\")}</code> <code>fallbackRender</code> <code>({ error, resetErrorBoundary }) =&gt; React.ReactNode</code> Function that dynamically renders the fallback UI <code>fallbackRender={({ error, resetErrorBoundary }) =&gt; &lt;div&gt;...&lt;/div&gt;}</code> <code>onResetErrorBoundary</code> <code>() =&gt; void</code> Callback when <code>resetErrorBoundary</code> is triggered in the fallback UI <code>onResetErrorBoundary={() =&gt; console.log(\"Boundary reset\")}</code> <code>isGlobalErrorBoundary</code> <code>boolean</code> Flag for setting a global error boundary across the app <code>isGlobalErrorBoundary={true}</code>"},{"location":"office/ispl/important/error-boundary/#logging-error","title":"Logging Error","text":"<p>Yes, you can log errors to a log file from a React application using the react-error-boundary package, but React itself runs in the browser and doesn't have direct access to the file system for security reasons. However, you can log errors to a server-side endpoint (such as an API or server) which can then log the errors to a file on the server.</p> 1. Installation2. Set up <code>ErrorBoundry</code> Component3. Send error to the server <pre><code>npm install react-error-boundary\n</code></pre> <p>Wrap your application or specific components in the <code>ErrorBoundary</code> from react-error-boundary to catch errors. The <code>onError</code> callback prop of <code>ErrorBoundary</code> will allow you to handle the errors and send them to an API for logging.</p> <pre><code>import React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nfunction FallbackComponent({ error, resetErrorBoundary }) {\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;Something went wrong:&lt;/h2&gt;\n            &lt;pre&gt;{error.message}&lt;/pre&gt;\n            &lt;button onClick={resetErrorBoundary}&gt;Try Again&lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\n\nfunction MyComponent() {\n    // Simulate a JavaScript error\n    throw new Error('Oops! Something went wrong');\n}\n\nfunction App() {\n    const handleError = (error, info) =&gt; {\n        // Send error and info to server\n        logErrorToServer(error, info);\n    };\n\n    return (\n        &lt;ErrorBoundary FallbackComponent={FallbackComponent} onError={handleError}&gt;\n            &lt;MyComponent /&gt;\n        &lt;/ErrorBoundary&gt;\n    );\n}\n\nexport default App;\n</code></pre> <p>In the <code>handleError</code> function, you can send the error data (and any additional information) to your backend server to log the errors into a file.</p> <pre><code>const logErrorToServer = (error, info) =&gt; {\n    const errorDetails = {\n        message: error.message,\n        stack: error.stack,\n        componentStack: info.componentStack,\n        timestamp: new Date().toISOString(),\n    };\n\n    fetch('https://your-server.com/log', {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(errorDetails),\n    })\n    .then((response) =&gt; response.json())\n    .catch((err) =&gt; console.error('Error logging to server:', err));\n};\n</code></pre>"},{"location":"office/ispl/important/error-boundary/#tips","title":"Tips","text":"<p>In JavaScript, the Error object provides a basic structure for error handling. While the core Error object itself is relatively simple, it can be extended or enhanced depending on the type of error (e.g., TypeError, SyntaxError, ReferenceError, etc.) or custom errors that you create.</p> Property/Method Description <code>message</code> A string that describes the error. It is the primary description of what went wrong. <code>name</code> A string representing the type of the error (e.g., <code>\"Error\"</code>, <code>\"TypeError\"</code>, <code>\"SyntaxError\"</code>, etc.). <code>stack</code> A string that contains the stack trace, which provides information about the sequence of function calls that led to the error (available in most environments). <code>cause</code> A property that can be used to attach an underlying cause to an error (introduced in ES2022). Useful for chaining errors or wrapping an error within another error. <code>toString()</code> Returns a string representation of the error, typically combining the <code>name</code> and <code>message</code> properties. <code>toJSON()</code> Converts the error object into a JSON-serializable format, which can be useful for logging or transmitting error data. <p>info</p> <p>The <code>info</code> object is related to the <code>Error</code> object in the context of React's error boundaries, but it is not part of the standard JavaScript <code>Error</code> object. In React, the <code>ErrorBoundary</code> component provides an error and an info parameter when an error occurs in one of its child components.</p> <p>React's ErrorBoundary info Object</p> <p>In React, when an error is caught inside an <code>ErrorBoundary</code>, the <code>componentDidCatch</code> method (or the <code>static getDerivedStateFromError</code> method) receives two parameters:</p> <ol> <li> <p><code>error</code>: The error object itself, which is the same as the standard JavaScript Error object (it contains properties like <code>message</code>, <code>name</code>, <code>stack</code>).</p> </li> <li> <p><code>info</code>: The <code>info</code> object contains additional information about the error, specifically the React component stack that can help you identify which component caused the error.</p> </li> </ol> <p>The <code>info</code> object is not part of the standard <code>Error</code> object in JavaScript. It's specific to React's error boundary system.</p> Property/Method Description <code>componentStack</code> A string containing the React component stack trace, which lists the components involved when the error occurred. This can be very useful for identifying the source of errors in React components. <code>additionalInfo</code> A custom field that might be passed along with the error info to provide extra context (not a default property but commonly used in custom error handling implementations)."},{"location":"office/ispl/important/persist-local-storage/","title":"Local Storage","text":"ComposeEmailDrawer<pre><code>if (applicationTypeStatus !== \"newEmail\" &amp;&amp; \n    applicationTypeStatus !== \"tenderModule\") \n{\n    form.setFieldsValue({\n        subject: `${currentSelectedMailMessage.subject}`,\n    });\n}\n\n\nuseEffect(() =&gt; {\n    if (applicationTypeStatus === \"tenderModule\") {\n      console.log(\"I'm Tender Module\", persistTenderMailDataResp)\n      form.setFieldsValue({\n        participantFrom: [defaultEmailAddress ?? \"\"],\n        subject: `${persistTenderMailDataResp?.subject}`,\n        mailMessageReferenceDtos: persistTenderMailDataResp?.refCode?.map(\n          (reference) =&gt; {\n            return reference.referenceCode;\n          }\n        ),\n      })\n    }\n  }, [\n    applicationTypeStatus,\n    persistTenderMailDataResp,\n    defaultEmailAddress\n])\n\n\n\n// FOr Debug value\nuseEffect(() =&gt; {\n    console.log(\"useEffect Triggered - State:\", persistTenderMailDataResp);\n}, [persistTenderMailDataResp]);\n\n// research\nuseEffect(() =&gt; {\n    if (\n      !isEmpty(idComposeEmailCead) &amp;&amp;\n      isEmpty(tenderCeadComposeEmailDetailsData)\n    ) {\n      dispatch(actionForCeadEmailCompose(idComposeEmailCead));\n    }\n    if (!isEmpty(tenderCeadComposeEmailDetailsData)) {\n      form.setFieldsValue({\n        participantTos:\n          // tenderCeadComposeEmailDetailsData?.clientEmailAddressList,\n          tenderCeadComposeEmailDetailsData?.ceaD_PRINCIPAL_EmailAddressList,\n        participantFrom: defaultEmailAddress ? defaultEmailAddress : \"\",\n        subject: tenderCeadComposeEmailDetailsData?.contract,\n        mailMessageReferenceDtos: [\n          tenderCeadComposeEmailDetailsData?.referenceDto?.referenceCode,\n        ],\n        // currentSelectedMailMessage.mailMessageReferenceDtos?.map(\n        //   (reference) =&gt; {\n        //     return reference.referenceCode;\n        //   }\n        // ),\n      });\n    }\n  }, [\n    idComposeEmailCead,\n    tenderCeadComposeEmailDetailsData,\n    applicationTypeStatus,\n  ]);\n</code></pre> <pre><code>persistTender\n- action.js\n- reducer.js\n</code></pre> dispatchActionReducerStorage Tab <pre><code>export const TenderPagination = ({\n    ...\n}) =&gt; {\n    const dispatch = useDispatch();\n\n    return (\n        &lt;&gt;\n            &lt;div\n            style={{ background: backGroundColor }}\n            className={`reference ${\n                selectedTenderRowId === data.referenceCode &amp;&amp; \"active\"\n            }`}\n            onClick={() =&gt; {\n                rowEventhandlersTender(data.id);\n                setSelectedTenderRowId(data.referenceCode);\n                setSearchEmailTender(data.referenceCode);\n                // setSearchKeyword(data.referenceCode);\n                // searchDataAtBusinessHeaderForm.setFieldsValue({\n                //   searchDataAtBusinessHeader: data.referenceCode,\n                // });\n\n                // ADDED\n                let payload = {\n                    tos: '',\n                    refCode: data?.referenceCode ?? '',\n                    subject: data?.title ?? '',\n                }\n                dispatch(actionForPersistTenderMailData(payload));\n            }}\n            key={key}\n            &gt;\n            &lt;/div&gt;\n        &lt;/&gt;\n    )\n}\n</code></pre> action.js<pre><code>import { PERSIST_DATA } from 'services/types';\nimport { persistSelectedTenderMail } from 'services/common';\n\nexport const actionForPersistTenderMailData = (data) =&gt; {\n    return async (dispatch, getState) =&gt; {\n        //  // Retrieve the updated state from Redux after the dispatch\n        // const updatedState = getState().persistTenderMailState;\n        // console.log(\"ACTION updatedState: \",updatedState)\n        console.log(\"data: \", data)\n        dispatch(persistSelectedTenderMail(PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS, data));\n    };\n};\n</code></pre> reducer.js<pre><code>import { PERSIST_DATA } from \"services/types\";\nimport { jsonParser } from \"utils/misc\";\n\nconst INITIAL_STATE = {\n    persistTenderMailDataResp: {\n        tos: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.tos || {},\n\n        refCode: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.refCode || {},\n\n        subject: jsonParser(\n        jsonParser(sessionStorage.getItem(\"persist:root\"))?.persistTenderMailState\n        )?.persistTenderMailDataResp?.subject || {},\n    },\n    loading: false,\n};\n\n\nexport default function persistTenderMailReducer (state = INITIAL_STATE, action) {\n    switch (action.type) {\n        case PERSIST_DATA.PERSIST_DATA_TENDER_INIT:\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_SUCCESS:\n            console.log(\"REDUCER: action\", action)\n            return {\n                ...state,\n                persistTenderMailDataResp: {\n                    tos: action.payload.tos,\n                    refCode: action.payload.refCode,\n                    subject: action?.payload.subject,\n                },\n                loading: false,\n            };\n\n        case PERSIST_DATA.PERSIST_DATA_TENDER_FINISH:\n            return {\n                ...state,\n                loading: false,\n            };\n\n        default:\n            return {\n                ...state,\n            }\n    }\n}\n</code></pre> <p>Session Sorage Tab</p> <ul> <li>see the <code>persistTenderMailState</code> key value.</li> </ul>"},{"location":"office/ispl/important/persist-local-storage/#tos","title":"TOs","text":"action.jsreducer.js <pre><code>export const getCompanyPersonEmailAddress = (id, body) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n        const response =\n            await participationStatusService.getCompanyPersonEmailAddress(id, body);\n\n        dispatch(finish(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING));\n\n        try {\n            if (response.isSuccess) {\n                dispatch(\n                success(EMAIL_TYPES.COMPANY_PERSON_EMAIL_LISTING, response.data)\n                );\n\n                // DISPATCHES\n                dispatch(actionForPersistTenderMailTos(response.data))\n\n            } else if (!response.isSuccess) {\n                dispatch(error(response.errorMessage));\n                throw new Error(response.errorMessage);\n            }\n        } catch(err) {\n            throw err;\n        }\n    };\n}\n</code></pre> <pre><code>case PERSIST_DATA.PERSIST_DATA_TENDER_TOS:\n    console.log(\"REDUCER action.payload: \", action)\n    return {\n        ...state,\n        persistTenderMailDataResp: {\n            ...state.persistTenderMailDataResp,\n            // tos: action.payload.tos || state.persistTenderMailDataResp.tos,\n            tos: action.payload,\n        },\n        loading: false,\n    };\n</code></pre>"},{"location":"office/ispl/important/persist-local-storage/#loading-status","title":"Loading Status","text":"<pre><code>import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'; // Import useDispatch if you are using Redux\nimport { Button } from 'antd'; // or any UI library you're using\n\nconst MyComponent = () =&gt; {\n  const [isLoadingOpeningMail, setIsLoadingOpeningMail] = useState(false);\n  const dispatch = useDispatch(); // Initialize dispatch\n  const handleTenderMail = async () =&gt; {\n    setIsLoadingOpeningMail(true); // Set loading state to true\n    try {\n      const id = getDetails?.referenceId; // Retrieve ID\n      await dispatch(getCompanyPersonEmailAddress(id, selectedCompanyIds?.companyIds)); // Dispatch the action\n\n      // Wait for 5 seconds\n      setTimeout(() =&gt; {\n        // Open the URL in a new tab\n        window.open(\"/#/email-compose?applicationType=tenderModule\", \"_blank\");\n        setIsLoadingOpeningMail(false); // Reset loading state after opening the new tab\n      }, 5000);\n    } catch (err) {\n      console.log(err); // Log the error\n      setIsLoadingOpeningMail(false); // Ensure loading state is reset even if an error occurs\n    }\n  };\n\n  return (\n    &lt;Button\n      type=\"primary\"\n      style={{ marginRight: \"8px\" }}\n      onClick={handleTenderMail}\n      loading={isLoadingOpeningMail} // Show loading indicator if true\n    &gt;\n      Circular\n    &lt;/Button&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"office/ispl/important/priority-listing-select/","title":"Priority Select Listing","text":"<pre><code>const priorityEventsState = useSelector((state) =&gt; state.priorityEvents);\nconst { organizerEventPriorityListing } = priorityEventsState;\n\n\n&lt;Form.Item\n  label=\"Priority\"\n  name=\"organizerEventPriorityId\"\n  className=\"form__group\"\n  initialValue={organizerEventPriorityListing[3]?.id}\n&gt;\n  &lt;Select\n    placeholder=\"Select Priority\"\n    autoComplete=\"off\"\n    getPopupContainer={(trigger) =&gt; trigger.parentNode}\n  &gt;\n    {!isEmpty(organizerEventPriorityListing) &amp;&amp;\n      organizerEventPriorityListing.map((status, index) =&gt; {\n        return (\n          &lt;Option value={status.id} key={index}&gt;\n            {status.name}\n          &lt;/Option&gt;\n        );\n      })}\n  &lt;/Select&gt;\n&lt;/Form.Item&gt;\n</code></pre>"},{"location":"office/ispl/important/sorting-table-antd/","title":"Sorting andt table","text":""},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming","title":"Defensive Programming","text":"<p>To handle the case where <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code> during sorting, you can modify the sorter function to check for <code>null</code> values and provide a fallback for comparison. Here's how you can write defensive programming for this case:</p> Normal CodeDefensive ProgrammingExplanation <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; a.partyName.localeCompare(b.partyName),\n}\n</code></pre> <pre><code>{\n    title: \"Name\",\n\n    sorter: (a, b) =&gt; {\n        const partyNameA = a.partyName ?? ''; // Fallback to an empty string if null or undefined\n        const partyNameB = b.partyName ?? ''; // Fallback to an empty string if null or undefined\n        return partyNameA.localeCompare(partyNameB);\n    },\n}\n</code></pre> <ul> <li>Nullish Coalescing (<code>??</code>): The <code>??</code> operator checks whether <code>partyName</code> is <code>null</code> or <code>undefined</code>. If it is, the empty string (<code>''</code>) is used as a fallback. This avoids runtime errors during the <code>localeCompare</code> operation.</li> <li>Safe Comparison: By ensuring both <code>partyNameA</code> and <code>partyNameB</code> are always strings (even if empty), we guarantee that <code>localeCompare</code> will work without throwing errors.</li> </ul> Why Use Defensive Programming Here? <ul> <li>Avoid Crashes: If <code>partyName</code> is ever <code>null</code> or <code>undefined</code>, without defensive programming, the <code>localeCompare</code> method would throw an error since it expects a string.</li> <li>Graceful Fallback: Providing a fallback value ensures that even if some data is missing, the app continues to function without issues, and the UI remains stable.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#updated-code-with-defensive-programming","title":"Updated Code with Defensive Programming:","text":"CodeExplanation <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication || ''; // Fallback to empty string if null or undefined\nconst modeB = b.modeofCommunication || ''; // Fallback to empty string if null or undefined\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ul> <li>Fallback to Empty String: When <code>modeofCommunication</code> is <code>null</code> or <code>undefined</code>, it is replaced with an empty string (''). This prevents errors during the <code>localeCompare</code> operation.</li> <li>Handling Null Safely: Since empty strings come before any real strings in lexicographical order, this ensures that <code>null</code> or <code>undefined</code> values will be treated as smaller than any valid strings and handled correctly during sorting.</li> </ul> <p>This approach ensures that the sorting logic won't fail even when some <code>modeofCommunication</code> values are missing or <code>null</code>.</p>"},{"location":"office/ispl/important/sorting-table-antd/#optimized-code-for-sorting-with-null-values","title":"Optimized Code for Sorting with <code>null</code> Values:","text":"<p>The code provided is a good solution for handling null or undefined values during sorting. It ensures that comparisons can happen without causing runtime errors when dealing with missing data. However, we can take a step further for readability and maintainability by making the code slightly more declarative and robust.</p> <p>Here's an improved version of the sorting function:</p> CodeChanges <pre><code>sorter: (a, b) =&gt; {\nconst modeA = a.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nconst modeB = b.modeofCommunication ?? ''; // Nullish coalescing operator (handles null/undefined)\nreturn modeA.localeCompare(modeB);\n},\n</code></pre> <ol> <li>Nullish Coalescing (<code>??</code>): The nullish coalescing operator (<code>??</code>) is a modern JavaScript feature that checks if a value is <code>null</code> or <code>undefined</code> and assigns a fallback (in this case, an empty string). It is more precise than the logical OR (<code>||</code>) because it only considers <code>null</code> or <code>undefined</code> as \"falsy\" while allowing values like <code>0</code> or <code>false</code> to remain unchanged.</li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#defensive-programming-in-react","title":"Defensive Programming in React:","text":"<p>Defensive programming is a practice that helps make your code more robust and fault-tolerant. It involves anticipating potential issues, such as null or undefined values, and writing code that handles these cases gracefully.</p> <p>While React itself is a library for building UI, defensive programming is valuable in certain scenarios within a React app:</p> <ol> <li> <p>Handling API Responses: When dealing with external APIs, it's common for data to be missing or incomplete. Defensive programming helps ensure your app won't break due to <code>null</code> or <code>undefined</code> values.</p> </li> <li> <p>Form Input Validation: When processing user input, defensive programming prevents issues from invalid or empty values that may cause your app to behave unexpectedly.</p> </li> <li> <p>Component Lifecycle and Props: React components may not always receive the expected props, especially in complex apps. Defensive programming ensures components can handle missing props or incorrect data types.</p> </li> </ol>"},{"location":"office/ispl/important/sorting-table-antd/#when-to-use-defensive-programming","title":"When to Use Defensive Programming:","text":"<ul> <li>Handling User Input: Always validate and sanitize user input to avoid issues such as empty fields or invalid values.</li> <li>Working with Asynchronous Data: If your app relies on fetching data from APIs or external sources, always check for null/undefined values in the data.</li> <li>Complex Component State: When components have a complex internal state, use defensive techniques to avoid bugs due to incorrect state updates or missing state values.</li> </ul>"},{"location":"office/ispl/important/sorting-table-antd/#conclusion","title":"Conclusion:","text":"<p>Defensive programming is not always necessary for every React app, but it's essential when working with dynamic data (e.g., API responses, user input) or when the app is expected to handle edge cases gracefully. It helps prevent runtime errors and ensures a smoother user experience. The above code is a good example of how to apply defensive programming in the context of sorting.</p>"},{"location":"office/ispl/important/sorting-table-antd/#reference","title":"Reference","text":"<ul> <li>Sorting</li> </ul>"},{"location":"office/ispl/important/table-row-selection-customize/","title":"Table Row Customize","text":""},{"location":"office/ispl/important/table-row-selection-customize/#example","title":"Example","text":"ExampleKey Changes: Companies.js<pre><code>import React, { useState, useEffect } from \"react\";\nimport { Table, Dropdown, Menu, Checkbox } from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\n\nconst MyTableComponent = ({\n    isCircular,\n    rowSelection,\n    columnCircular,\n    columns,\n    referencePartyListingCircularResponse,\n    referencePartyListingResponse,\n    referencePartyListingCircularLoading,\n    referencePartyListingLoading,\n    rowEventhandlers,\n    setTaskClassName,\n}) =&gt; {\n    const [selectedPriorities, setSelectedPriorities] = useState([]);\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n\n    const priorityOptions = [\"1\", \"2\", \"3\"];\n\n    const handleSelectAll = (e) =&gt; {\n        const { checked } = e.target;\n        const allPriorities = checked ? priorityOptions : [];\n        setSelectedPriorities(allPriorities);\n        setSelectedRowKeys(checked ? dataSource.map((item) =&gt; item.id) : []);\n    };\n\n    const handleSelectPriority = (priority) =&gt; {\n        setSelectedPriorities((prev) =&gt;\n        prev.includes(priority)\n            ? prev.filter((p) =&gt; p !== priority)\n            : [...prev, priority]\n        );\n    };\n\n    const filteredDataSource = (dataSource) =&gt; {\n        if (selectedPriorities.length &gt; 0) {\n        return dataSource.filter((item) =&gt;\n            selectedPriorities.includes(item.priority)\n        );\n        }\n        return dataSource;\n    };\n\n    const dataSource = isCircular\n        ? filteredDataSource(referencePartyListingCircularResponse)\n        : filteredDataSource(referencePartyListingResponse);\n\n    const menu = (\n        &lt;Menu&gt;\n            &lt;Menu.Item&gt;\n                &lt;Checkbox\n                    indeterminate={\n                        selectedPriorities.length &gt; 0 &amp;&amp;\n                        selectedPriorities.length &lt; priorityOptions.length\n                    }\n                    checked={selectedPriorities.length === priorityOptions.length}\n                    onChange={handleSelectAll}\n                &gt;\n                Select All\n                &lt;/Checkbox&gt;\n            &lt;/Menu.Item&gt;\n\n            &lt;Menu.Divider /&gt;\n\n            {priorityOptions.map((priority) =&gt; (\n                &lt;Menu.Item key={priority}&gt;\n                    &lt;Checkbox\n                        checked={selectedPriorities.includes(priority)}\n                        onChange={() =&gt; handleSelectPriority(priority)}\n                    &gt;\n                        {priority}\n                    &lt;/Checkbox&gt;\n                &lt;/Menu.Item&gt;\n            ))}\n        &lt;/Menu&gt;\n    );\n\n    useEffect(() =&gt; {\n        const newSelectedRowKeys = dataSource\n        .filter((item) =&gt; selectedPriorities.includes(item.priority))\n        .map((item) =&gt; item.id);\n        setSelectedRowKeys(newSelectedRowKeys);\n    }, [selectedPriorities, dataSource]);\n\n    const rowSelectionConfig = {\n        selectedRowKeys,\n        onChange: (newSelectedRowKeys) =&gt; {\n            setSelectedRowKeys(newSelectedRowKeys);\n            const selectedPrioritiesFromRows = newSelectedRowKeys\n                .map((key) =&gt; dataSource.find((item) =&gt; item.id === key)?.priority)\n                .filter(Boolean);\n            setSelectedPriorities(selectedPrioritiesFromRows);\n        },\n        onSelectAll: (selected, selectedRows) =&gt; {\n            const allSelectedPriorities = selected\n                ? selectedRows.map((row) =&gt; row.priority)\n                : [];\n            setSelectedPriorities(allSelectedPriorities);\n        },\n    };\n\n    return (\n        &lt;div&gt;\n            &lt;Dropdown overlay={menu} trigger={[\"click\"]}&gt;\n                &lt;a className=\"ant-dropdown-link\" onClick={(e) =&gt; e.preventDefault()}&gt;\n                Select Priority &lt;DownOutlined /&gt;\n                &lt;/a&gt;\n            &lt;/Dropdown&gt;\n            &lt;Table\n                className=\"company-table\"\n                rowKey=\"id\"\n                rowSelection={\n                    isCircular\n                        ? { ...rowSelectionConfig, ...rowSelection }\n                        : rowSelectionConfig\n                }\n                columns={isCircular ? columnCircular : columns}\n                dataSource={dataSource}\n                loading={\n                    isCircular\n                        ? referencePartyListingCircularLoading\n                        : referencePartyListingLoading\n                }\n                scroll={true}\n                pagination={false}\n                onRow={rowEventhandlers}\n                rowClassName={setTaskClassName}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default MyTableComponent;\n</code></pre> <ol> <li> <p>Synchronizing \"Select All\":</p> <ul> <li>In the <code>handleSelectAll</code> function, when the \"Select All\" checkbox is checked or unchecked, it updates both <code>selectedPriorities</code> and <code>selectedRowKeys</code>.</li> </ul> </li> <li> <p>Row Selection Changes:</p> <ul> <li>In the <code>onChange</code> event of the rowSelection, it updates <code>selectedPriorities</code> based on the priorities of the currently selected rows.</li> </ul> </li> <li> <p>Row Selection Config:</p> <ul> <li>The <code>onSelectAll</code> method updates the priorities when all rows are selected or deselected.</li> </ul> </li> </ol>"},{"location":"office/ispl/important/table-row-selection-customize/#best-simple-example-to-customize","title":"Best Simple Example to Customize","text":"ExampleHow it worksBenefits <pre><code>import React, { useState } from \"react\";\nimport { Table, Checkbox, Select } from \"antd\";\n\nconst { Option } = Select;\n\nconst App = () =&gt; {\n    const data = [\n        { key: \"1\", priority: \"1\", name: \"Item 1\" },\n        { key: \"2\", priority: \"2\", name: \"Item 2\" },\n        { key: \"3\", priority: \"3\", name: \"Item 3\" },\n        { key: \"4\", priority: \"1\", name: \"Item 4\" },\n        { key: \"5\", priority: \"2\", name: \"Item 5\" },\n    ];\n\n    const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n    const [filterPriority, setFilterPriority] = useState(\"all\");\n\n    // Function to handle row selection\n    const onSelectChange = (selectedRowKeys) =&gt; {\n        setSelectedRowKeys(selectedRowKeys);\n    };\n\n    // Function to handle filter change for priority\n    const handlePriorityChange = (value) =&gt; {\n        setFilterPriority(value);\n        // Automatically update the selected rows based on the filter\n        if (value === \"all\") {\n            // Select all rows\n            setSelectedRowKeys(data.map((item) =&gt; item.key));\n        } else {\n            // Filter by selected priority\n            setSelectedRowKeys(\n                data.filter((item) =&gt; item.priority === value).map((item) =&gt; item.key)\n        );\n        }\n    };\n\n    const rowSelection = {\n        selectedRowKeys,\n        onChange: onSelectChange,\n        getCheckboxProps: (record) =&gt; ({\n            disabled: filterPriority !== \"all\" &amp;&amp; record.priority !== filterPriority, // Disable checkboxes based on filter\n        }),\n    };\n\n    const columns = [\n        {\n            title: \"Priority\",\n            dataIndex: \"priority\",\n            key: \"priority\",\n        },\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n            key: \"name\",\n        },\n    ];\n\nreturn (\n    &lt;div&gt;\n        &lt;Select\n            defaultValue=\"all\"\n            style={{ width: 200, marginBottom: 16 }}\n            onChange={handlePriorityChange}\n        &gt;\n            &lt;Option value=\"all\"&gt;All&lt;/Option&gt;\n            &lt;Option value=\"1\"&gt;Priority 1&lt;/Option&gt;\n            &lt;Option value=\"2\"&gt;Priority 2&lt;/Option&gt;\n            &lt;Option value=\"3\"&gt;Priority 3&lt;/Option&gt;\n        &lt;/Select&gt;\n\n        &lt;Table\n            rowSelection={rowSelection}\n            columns={columns}\n            dataSource={data}\n            rowKey=\"key\"\n        /&gt;\n    &lt;/div&gt;\n);\n};\n\nexport default App;\n</code></pre> <ol> <li> <p><code>filterPriority</code> state: This state keeps track of the current filter selected in the dropdown (<code>All</code>, <code>Priority 1</code>, <code>Priority 2</code>, <code>Priority 3</code>).</p> </li> <li> <p><code>handlePriorityChange</code> function: When the user selects a priority from the dropdown, it updates the filterPriority state and updates the selectedRowKeys accordingly. If \"All\" is selected, all rows are selected; otherwise, only rows with the corresponding priority are selected.</p> </li> <li> <p>Row Selection: The <code>rowSelection</code> object manages the selection logic. The <code>getCheckboxProps</code> function checks the <code>filterPriority</code> value and disables checkboxes for rows that don't match the filter.</p> </li> <li> <p>The Select Dropdown: The <code>Select</code> dropdown allows the user to choose between \"All\", \"Priority 1\", \"Priority 2\", and \"Priority 3\". Based on the selected priority, the table selection changes.</p> </li> </ol> <ul> <li>The user can choose a specific priority or select all rows.</li> <li>The checkboxes for rows that do not match the selected priority are disabled, making the UI intuitive.</li> </ul>"},{"location":"office/ispl/important/table-rowid/","title":"rowKey","text":"<p>vdsfds</p> <pre><code>const rowSelection = {\n    selectedRowKeys,\n    onChange: (selectedKeys, selectedRows) =&gt; {\n      console.log('Selected Keys:', selectedKeys);\n      console.log('Selected Rows:', selectedRows);\n      setSelectedRowKeys(selectedKeys);\n    },\n    type: 'checkbox',\n};\n\n\n&lt;div className=\"organizer__table company-table-wrapper\"&gt;\n    &lt;Table\n        className=\"company-table\"\n        // rowSelection={isCircular ? {\n        //   type: 'checkbox',\n        //   ...rowSelection,\n        // } : null} \n\n        // VERY IMPORTARNT\n        rowKey=\"id\"\n\n\n        rowSelection={isCircular &amp;&amp; rowSelection}\n\n        columns={isCircular ? columnCircular : columns}\n        dataSource={\n        isCircular\n            ? referencePartyListingCircularResponse\n            : referencePartyListingResponse\n        }\n        loading={\n        isCircular\n            ? referencePartyListingCircularLoading\n            : referencePartyListingLoading\n        }\n        scroll={true}\n        pagination={false}\n        onRow={rowEventhandlers}\n        rowClassName={setTaskClassName}\n    /&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>  // const rowSelection = {\n  //   selectedRowKeys,\n  //   onChange: handleSelectionChange,\n  //   getCheckboxProps: (record) =&gt; ({\n  //     disabled: false, // Enable checkboxes\n  //   }),\n  // };\n  // console.log(\"referencePartyListingCircularResponse: \", JSON.stringify(referencePartyListingCircularResponse))\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#solution","title":"SOLUTION","text":""},{"location":"office/ispl/important/table-rowid/#1-verify-rowselection-setup","title":"1. Verify <code>rowSelection</code> Setup","text":"<p>Ensure your <code>rowSelection</code> object is correctly set up and that the <code>onChange</code> function is defined correctly. The <code>onChange</code> callback should receive <code>selectedRowKeys</code> and <code>selectedRows</code> as arguments.</p> <pre><code>const rowSelection = {\n  type: 'radio', // Ensure this matches your requirement ('radio' for single selection, 'checkbox' for multiple)\n  selectedRowKeys,\n  onChange: (selectedKeys, selectedRows) =&gt; {\n    console.log('Selected Keys:', selectedKeys); // Debug: Check what\u2019s being logged\n    console.log('Selected Rows:', selectedRows); // Debug: Check the selected rows\n    setSelectedRowKeys(selectedKeys);\n  },\n};\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#2-ensure-selectedrowkeys-state-is-managed-correctly","title":"2. Ensure <code>selectedRowKeys</code> State Is Managed Correctly","text":"<p>The <code>selectedRowKeys</code> state should be managed correctly in your component\u2019s state. Make sure it is initialized properly and updated through the <code>onChange</code> callback.</p> <pre><code>const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n</code></pre>"},{"location":"office/ispl/important/table-rowid/#3-check-table-configuration","title":"3. Check Table Configuration","text":"<p>Make sure your table component is configured to use <code>rowSelection</code> and that <code>rowKey</code> is set to ensure unique keys:</p> <pre><code>&lt;Table\n  columns={columnCircular}\n  dataSource={dataSource}\n  rowSelection={rowSelection}\n  rowKey=\"id\" // Ensure this key matches the key field in your data\n/&gt;\n</code></pre>"},{"location":"office/ispl/refactor/","title":"Intro","text":""},{"location":"office/ispl/refactor/#mew","title":"Mew","text":"<p>You can optimize the code by consolidating the <code>dispatch</code> calls into a single statement. By constructing the payload conditionally before the dispatch, you can reduce redundancy and improve readability. Here\u2019s a more streamlined version of your code:</p> OldRefactoredKey Changes CircularMail.js<pre><code>// bishow\ntry {\n    setIsCircularMailLoading(true);\n    form.validateFields([\"participantTosValue\"]);\n\n    if (formType !== \"newCutting\" &amp;&amp; module !== \"Circular_Planning\") {\n        await dispatch(instanceChatAdd(body, isDashbord, setInternalVisible));\n    } else if (module === \"Circular_Planning\") {\n        let circulayPayload = {\n        ...body,\n        IsCircularPlanningRequestForApproval: true,\n        };\n        await dispatch(\n        instanceChatAdd(circulayPayload, isDashbord, setInternalVisible)\n        );\n    }\n\n    form.resetFields();\n    setInternalEditorData(\"\");\n} catch (error) {\n    message.error(\"To and Cc cannot be empty\");\n    return;\n} finally {\n    setIsCircularMailLoading(false);\n}\n</code></pre> CircularMail.js<pre><code>try {\n    setIsCircularMailLoading(true);\n    await form.validateFields([\"participantTosValue\"]);\n\n    // Create the payload based on conditions\n    const isCircularPlanning = module === \"Circular_Planning\";\n    const payload = isCircularPlanning\n        ? { ...body, IsCircularPlanningRequestForApproval: true }\n        : body;\n\n    // Dispatch the action\n    await dispatch(instanceChatAdd(payload, isDashbord, setInternalVisible));\n\n    // If the API call is successful, reset the form\n    form.resetFields();\n    setInternalEditorData(\"\");\n} catch (error) {\n    // Handle errors, e.g., API errors\n    message.error(error.message || \"An error occurred. Please try again.\");\n} finally {\n    setIsCircularMailLoading(false);\n}\n</code></pre> <ol> <li> <p>Single Payload Creation: The payload is created based on the condition (<code>isCircularPlanning</code>), which simplifies the logic.</p> </li> <li> <p>Single Dispatch Call: You only call <code>dispatch(instanceChatAdd(...))</code> once, regardless of the conditions.</p> </li> <li> <p>Clearer Logic Flow: This makes it easier to read and understand the flow of the function.</p> </li> </ol> <p>By applying these changes, the code becomes cleaner and easier to maintain while preserving its functionality. Let me know if you need further adjustments!</p>"},{"location":"office/ispl/refactor/Button/","title":"Button","text":"<pre><code>const TodoLists = ({ heightt }) =&gt; {\n\n    const {\n        transferToDailyDairyResp,\n        transferToDailyDairyLoading,\n        dailyDairyPaginationResp,\n        dailyDairyPaginationLoading,\n    } = useSelector((state) =&gt; state.dailyDiaryReducer);\n\n    // Added\n    const [\n        hasTodoDiaryBeenAdvancedSearched,\n        setHasTodoDiaryBeenAdvancedSearched,\n    ] = useState(false);\n    const [isDownloadingExcel, setIsDownloadingExcel] = useState(false);\n\n\n    const exxxcelItems = dailyDairyPaginationResp?.items || [];\n    const isDownloadExcelEnabled =\n    hasTodoDiaryBeenAdvancedSearched &amp;&amp; exxxcelItems.length &gt; 0;\n\n\n    const buttonProps = {\n        // type: \"primary\",\n        disabled: !isDownloadExcelEnabled,\n        icon: &lt;DownloadOutlined /&gt;,\n        loading: isDownloadingExcel,\n        onClick: handleDownloadTodoExcel,\n    };\n\n    return(\n        &lt;&gt;\n            {\n                hasTodoDiaryBeenAdvancedSearched &amp;&amp; (\n                    &lt;Tooltip\n                    title={\n                        isDownloadExcelEnabled\n                        ? \"You can download Excel here\"\n                        : \"Opps, nothing to download...\"\n                    }\n                    &gt;\n                    &lt;Button\n                        {...buttonProps}\n                        // onClick={handleDownloadTodoExcel}\n                        // loading={isDownloadingExcel}\n                    /&gt;\n                    &lt;/Tooltip&gt;\n                );\n            }\n        &lt;/&gt;\n    )\n}\n</code></pre>"},{"location":"office/ispl/refactor/Button/#bug-overview","title":"Bug Overview","text":"<p>Smart Download Logic: Using State Flags to Control File Saving in React</p> Bug <pre><code>useEffect(() =&gt; {\nif (!isEmpty(exportDailDiary)) {\n    let { data, fileName, fileExtension } = exportDailDiary;\n\n    saveBase64({\n        base64Data: data,\n        fileName,\n        fileType: fileExtension,\n    });\n}\n}, [exportDailDiary]);\n\nconst handleDownloadTodoExcel = async () =&gt; {\n    console.log(\"Downloading ...\");\n    setIsDownloadingExcel(true);\n\n    try {\n        let props = createProps({\n            SortType: sortTypeValue,\n            UserId: selectedUserId,\n            DailyDiaryDate: selectedDate,\n            DailyDiaryDateFrom: startDate,\n            DailyDiaryDateTo: endDate,\n        });\n        await dispatch(actionForExportDairyToExcel(props));\n    } catch (err) {\n        console.log(\"err\", err);\n    } finally {\n        setIsDownloadingExcel(false);\n    }\n};\n</code></pre> <p>This issue is likely occurring because the <code>useEffect</code> is being triggered by a change in the <code>exportDailDiary</code> state, which can happen when your application recompiles in development mode (e.g., due to hot module replacement). Here are several strategies to prevent the automatic saving of the file when you're not intending to:</p>"},{"location":"office/ispl/refactor/Button/#strategies-to-prevent-automatic-saving","title":"Strategies to Prevent Automatic Saving","text":""},{"location":"office/ispl/refactor/Button/#1-conditional-logic","title":"1. Conditional Logic:","text":"<p>Introduce a state variable to control when the file should actually be saved. For example, set a flag that only allows saving when a user action (like clicking a button) has occurred.</p> <pre><code>const [isUserInitiatedSave, setIsUserInitiatedSave] = useState(false);\n\nconst handleDownloadTodoExcel = async () =&gt; {\n  setIsUserInitiatedSave(true);\n  // Your download logic...\n};\n\nuseEffect(() =&gt; {\n  if (isUserInitiatedSave &amp;&amp; !isEmpty(exportDailDiary)) {\n    const { data, fileName, fileExtension } = exportDailDiary;\n\n    saveBase64({\n      base64Data: data,\n      fileName,\n      fileType: fileExtension,\n    });\n\n    // Reset the flag after saving\n    setIsUserInitiatedSave(false);\n  }\n}, [exportDailDiary, isUserInitiatedSave]);\n</code></pre>"},{"location":"office/ispl/refactor/Button/#2-debouncing-with-a-flag","title":"2. Debouncing with a Flag:","text":"<p>If you\u2019re still using debouncing, you can combine it with the user-initiated flag to ensure that it only runs when the user triggers it.</p> <pre><code>useEffect(() =&gt; {\n  const timer = setTimeout(() =&gt; {\n    if (!isEmpty(exportDailDiary)) {\n      const { data, fileName, fileExtension } = exportDailDiary;\n      saveBase64({ base64Data: data, fileName, fileType: fileExtension });\n    }\n  }, 300); // Adjust the delay as needed\n\n  return () =&gt; clearTimeout(timer);\n}, [exportDailDiary]);\n</code></pre>"},{"location":"office/ispl/refactor/Button/#3-use-callback-in-the-action","title":"3. Use Callback in the Action:","text":"<p>Modify your action creator to return the necessary data back to the caller. This way, the file saving can be directly controlled after the action completes.</p> <pre><code>const handleDownloadTodoExcel = async () =&gt; {\n  setIsDownloadingExcel(true);\n  try {\n    const result = await dispatch(actionForExportDairyToExcel());\n    if (result) {\n      const { data, fileName, fileExtension } = result;\n      saveBase64({ base64Data: data, fileName, fileType: fileExtension });\n    }\n  } catch (err) {\n    console.error(\"Error downloading Excel:\", err);\n  } finally {\n    setIsDownloadingExcel(false);\n  }\n};\n</code></pre>"},{"location":"office/ispl/refactor/Button/#4-cleanup-on-unmount","title":"4. Cleanup on Unmount:","text":"<p>If the component that uses <code>useEffect</code> can unmount, consider cleaning up any potential ongoing effects, though this is less relevant in this specific case.</p>"},{"location":"office/ispl/refactor/Button/#summary","title":"Summary","text":"<p>The best way to resolve the issue of files being saved unintentionally during development is to control the invocation of your save function through a user action flag. By ensuring that <code>saveBase64</code> only runs when a button click or other user action occurs, you can prevent unexpected behavior during code saves or hot reloading.</p>"},{"location":"office/ispl/refactor/function-update-setState/","title":"Functional Update","text":"ComponentTender/reducer.js Companies.js<pre><code>// function\nconst [instandData, setInstandData] = useState([]);\n// log update\nconst [isRequestSent, setIsRequestSent] = useState(false);\nconst [approvalStatus, setApprovalStatus] = useState({});\nconst [sendForApprovalLog, setSendForApprovalLog] = useState({});\nconst [tooltipMessage, setTooltipMessage] = useState(\"\");\nconst [approvalfrom, setApprovalfrom] = useState(\"\");\nconst [approvalTos, setApprovalTos] = useState([]);\nconst [approvalSentTime, setApprovalSentTime] = useState(\"\");\n\nuseEffect(() =&gt; {\n    if (!isEmpty(getDetails)) {\n        setIsRequestSent(\n            (prev) =&gt; getDetails.isCircularPlanningApprovalRequestSent\n        );\n        setApprovalStatus((prev) =&gt; getDetails.circularPlanningApprovedStatusDto);\n        setSendForApprovalLog(\n            (prev) =&gt; getDetails.circularPlanningSendForApprovalLogDto\n        );\n        setApprovalfrom(\n            (prev) =&gt;\n                getDetails.circularPlanningSendForApprovalLogDto.from\n                ?.participantName || \"Unknown\"\n        );\n        setApprovalTos((prev) =&gt;\n            Array.isArray(getDetails.circularPlanningSendForApprovalLogDto?.to)\n                ? getDetails.circularPlanningSendForApprovalLogDto?.to\n                    .map((item) =&gt; item.participantName || \"Unnamed\")\n                    .join(\", \")\n                : \"No recipients\"\n        );\n        setApprovalSentTime((prev) =&gt;\n            getDetails.circularPlanningSendForApprovalLogDto?.messageSentTime\n                ? moment(\n                    getDetails.circularPlanningSendForApprovalLogDto?.messageSentTime\n                    .messageSentTime\n                ).format(\"YYYY-MM-DD HH:mm:ss\")\n                : \"N/A\"\n        );\n        console.log(\"USE EFFECT: \", getDetails);\n    }\n}, [getDetails]);\n\n\n// Tooltip\n// const getDetailsSafe = getDetails || {};\n\n// const isRequestSent = getDetailsSafe.isCircularPlanningApprovalRequestSent;\n// const approvalStatus = getDetailsSafe.circularPlanningApprovedStatusDto || {};\n// const sendForApprovalLog =\n//     getDetailsSafe.circularPlanningSendForApprovalLogDto || {};\n\n// const approverName = approvalStatus.approverName || \"Unknown\";\n// const approveDate = approvalStatus.approveDate\n//     ? moment(approvalStatus.approveDate).format(\"YYYY-MM-DD\")\n//     : \"N/A\";\n// const senderName = sendForApprovalLog.from?.participantName || \"Unknown\";\n// const messageSentTime = sendForApprovalLog.messageSentTime\n//     ? moment(sendForApprovalLog.messageSentTime).format(\"YYYY-MM-DD HH:mm:ss\")\n//     : \"N/A\";\n\n// const toList = Array.isArray(sendForApprovalLog.to)\n//     ? sendForApprovalLog.to\n//         .map((item) =&gt; item.participantName || \"Unnamed\")\n//         .join(\", \")\n//     : \"No recipients\";\n\n// const tooltipMessage = !isRequestSent ? (\n//     \"Not Sent\"\n// ) : approvalStatus.isApproved ? (\n//     `Approved by ${approverName} on ${approveDate}`\n// ) : (\n//     &lt;div&gt;\n//     &lt;p&gt;Not yet approved&lt;/p&gt;\n//     &lt;p&gt;Sent By: {senderName}&lt;/p&gt;\n//     &lt;p&gt;To: {toList}&lt;/p&gt;\n//     &lt;p&gt;Time: {messageSentTime}&lt;/p&gt;\n//     &lt;/div&gt;\n// );\n\nreturn (\n    &lt;&gt;\n\n\n        {/* &lt;Tooltip title={tooltipMessage}&gt; */}\n        &lt;Tooltip\n            title={\n                !isRequestSent ? (\n                \"Not Sent\"\n                ) : approvalStatus.isApproved ? (\n                `Approved by`\n                ) : (\n                &lt;div&gt;\n                    &lt;p&gt;Not yet approved&lt;/p&gt;\n                    &lt;p&gt;Sent By: {approvalfrom}&lt;/p&gt;\n                    &lt;p&gt;To: {approvalTos}&lt;/p&gt;\n                    &lt;p&gt;Time: {approvalSentTime}&lt;/p&gt;\n                &lt;/div&gt;\n                )\n            }\n        &gt;\n        &lt;Button\n            type=\"primary\"\n            onClick={() =&gt; setIsCircularModalOpen(true)}\n            disabled={isButtonDisabled}\n        &gt;\n            Send for Approval\n        &lt;/Button&gt;\n        &lt;/Tooltip&gt;\n    &lt;/&gt;\n);\n</code></pre> <pre><code>// case UPDATE\ncase REFERENCE__TYPES.TENDER_BASIC_GetDetails_UPDATE:\n    let id = \"c2ff5cf8-c16b-4c19-ad48-f14405fc3ea2\";\n    console.log(\"action.payload: \", action.payload);\n\n    // let { participantFrom, participantTos, ...rest } =\n    //   action.payload.mailMessageParticipantWithTypeDtos;\n    // let requirenF = {\n    //   ...rest,\n    //   from: participantFrom &amp;&amp; {\n    //     participantUserId: participantFrom?.participantUserId,\n    //     participantName: participantFrom?.participantUserDto?.fullName,\n    //   },\n    //   to:\n    //     participantTos &amp;&amp;\n    //     participantTos?.map((item) =&gt; ({\n    //       participantUserId: item?.participantUserId,\n    //       participantName: item?.participantUserDto?.fullName,\n    //     })),\n    // };\n    // console.log(\"requirenF: \", requirenF);\n\n    let updatedObject;\n    if (\n        state?.tenderBasicGetDetailsResponse?.id ===\n        action.payload.tenderBasicId\n    ) {\n        updatedObject = {\n            ...state.tenderBasicGetDetailsResponse,\n            isCircularPlanningApprovalRequestSent: true,\n            mailMessageParticipantWithTypeDtos:\n            action.payload.mailMessageParticipantWithTypeDtos ?? {},\n            // mailMessageParticipantWithTypeDtos: requirenF ?? {},\n            circularPlanningSendForApprovalLogDto:\n            action.payload.circularPlanningSendForApprovalLogDto,\n        };\n    } else {\n        updatedObject = state.tenderBasicGetDetailsResponse;\n    }\n\n    return {\n        ...state,\n        tenderBasicGetDetailsResponse: updatedObject,\n        tenderBasicGetDetailsLoading: false,\n    };\n</code></pre>"},{"location":"office/ispl/refactor/noticeboard/","title":"NoticeBoard Modal","text":""},{"location":"office/ispl/refactor/noticeboard/#notcieboardmodaljs","title":"NotcieBoardModal.js","text":"<p>In the previous example, if there is multiple items it pop up multiple multiple after closing one model,</p> <p>In the Refactor example, it only shows one model but has <code>next</code> and <code>previous</code> button.</p> PreviousRefactorChanges Made <pre><code>// NotcieBoardModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, List } from \"antd\";\nimport { isEmpty } from \"lodash\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (!isEmpty(noticeBoard)) {\n            if (currentIndex &lt; noticeBoard.items.length) {\n                setVisibleItem(noticeBoard.items[currentIndex]);\n                setIsModalVisible(true);\n            } else {\n                setVisibleItem(null);\n                setIsModalVisible(false);\n            }\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n        setCurrentIndex((prevIndex) =&gt; prevIndex + 1);\n    };\n\n    const renderItem = (item) =&gt; {\n        if (!item) return null;\n\n        return (\n        &lt;List.Item&gt;\n            &lt;span className=\"title_dashboard_notice\"&gt;{item.title}&lt;/span&gt;\n            &lt;span className=\"description_dashboard_notice\"&gt;{` : ${item.description}`}&lt;/span&gt;\n        &lt;/List.Item&gt;\n        );\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; (\n            &lt;&gt;\n            {/* &lt;List\n                size=\"small\"\n                dataSource={visibleItem ? [visibleItem] : []}\n                renderItem={renderItem}\n            /&gt; */}\n\n            &lt;Modal\n                title={visibleItem?.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem?.description}&lt;/p&gt;\n            &lt;/Modal&gt;\n            &lt;/&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <pre><code>// NotcieBoardModal.js\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, List, Button } from \"antd\";\nimport { isEmpty } from \"lodash\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() =&gt; {\n        if (\n            !isEmpty(noticeBoard.items) &amp;&amp;\n            currentIndex &lt; noticeBoard.items.length\n        ) {\n            setVisibleItem(noticeBoard.items[currentIndex]);\n            setIsModalVisible(true);\n        } else {\n            setVisibleItem(null);\n            setIsModalVisible(false);\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        setIsModalVisible(false);\n    };\n\n    const handleNext = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt;\n            Math.min(prevIndex + 1, noticeBoard.items.length - 1)\n        );\n    };\n\n    const handlePrev = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt; Math.max(prevIndex - 1, 0));\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; visibleItem &amp;&amp; (\n            &lt;Modal\n                title={visibleItem.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem.description}&lt;/p&gt;\n                &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n                    &lt;Button\n                        icon={&lt;LeftOutlined /&gt;}\n                        onClick={handlePrev}\n                        disabled={currentIndex === 0}\n                    &gt;\n                        Previous\n                    &lt;/Button&gt;\n                    &lt;Button\n                    icon={&lt;RightOutlined /&gt;}\n                        onClick={handleNext}\n                        disabled={currentIndex === noticeBoard.items.length - 1}\n                    &gt;\n                        Next\n                    &lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/Modal&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <ol> <li>Next and Previous Buttons: Added buttons for navigation with icons using Ant Design's <code>Button</code> and <code>LeftOutlined</code>/<code>RightOutlined</code> icons.</li> <li>Navigation Logic: Added <code>handleNext</code> and <code>handlePrev</code> functions to update <code>currentIndex</code> based on user actions, ensuring it stays within valid bounds.</li> <li>Button Disable Logic: Disabled the buttons when the user is at the first or last item to prevent out-of-bounds navigation</li> </ol>"},{"location":"office/ispl/refactor/noticeboard/#session-storage-to-view-only-once-modal","title":"Session Storage to view only once modal","text":"SessionExplanation of Changes <p>To ensure that the <code>NoticeBoardModal</code> only shows once per user, you can leverage the <code>sessionStorage</code> API to track whether the modal has been displayed. Below is a modified version of your component that incorporates this functionality:</p> <pre><code>import React, { useState, useEffect } from \"react\";\nimport { Modal, List, Button } from \"antd\";\nimport { isEmpty } from \"lodash\";\nimport { LeftOutlined, RightOutlined } from \"@ant-design/icons\";\n\nconst NoticeBoardModal = ({ noticeBoard }) =&gt; {\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const [visibleItem, setVisibleItem] = useState(null);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    // useEffect(() =&gt; {\n    //   if (\n    //     !isEmpty(noticeBoard.items) &amp;&amp;\n    //     currentIndex &lt; noticeBoard.items.length\n    //   ) {\n    //     setVisibleItem(noticeBoard.items[currentIndex]);\n    //     setIsModalVisible(true);\n    //   } else {\n    //     setVisibleItem(null);\n    //     setIsModalVisible(false);\n    //   }\n    // }, [noticeBoard, currentIndex]);\n\n    useEffect(() =&gt; {\n        const hasSeenModal = sessionStorage.getItem(\"hasSeenNoticeBoardModal\");\n\n        if (\n            !hasSeenModal &amp;&amp;\n            !isEmpty(noticeBoard.items) &amp;&amp;\n            currentIndex &lt; noticeBoard.items.length\n        ) {\n            setVisibleItem(noticeBoard.items[currentIndex]);\n            setIsModalVisible(true);\n        }\n    }, [noticeBoard, currentIndex]);\n\n    const handleModalCancel = () =&gt; {\n        sessionStorage.setItem(\"hasSeenNoticeBoardModal\", \"true\");\n        setIsModalVisible(false);\n    };\n\n    const handleNext = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt;\n        Math.min(prevIndex + 1, noticeBoard.items.length - 1)\n        );\n    };\n\n    const handlePrev = () =&gt; {\n        setCurrentIndex((prevIndex) =&gt; Math.max(prevIndex - 1, 0));\n    };\n\n    return (\n        &lt;&gt;\n        {isModalVisible &amp;&amp; visibleItem &amp;&amp; (\n            &lt;Modal\n                title={visibleItem.title}\n                visible={isModalVisible}\n                onCancel={handleModalCancel}\n                footer={null}\n            &gt;\n                &lt;p&gt;{visibleItem.description}&lt;/p&gt;\n                &lt;div style={{ display: \"flex\", justifyContent: \"space-between\" }}&gt;\n                    &lt;Button\n                        icon={&lt;LeftOutlined /&gt;}\n                        onClick={handlePrev}\n                        disabled={currentIndex === 0}\n                    &gt;\n                        Previous\n                    &lt;/Button&gt;\n                    &lt;Button\n                        icon={&lt;RightOutlined /&gt;}\n                        onClick={handleNext}\n                        disabled={currentIndex === noticeBoard.items.length - 1}\n                    &gt;\n                        Next\n                    &lt;/Button&gt;\n                &lt;/div&gt;\n            &lt;/Modal&gt;\n        )}\n        &lt;/&gt;\n    );\n};\n\nexport default NoticeBoardModal;\n</code></pre> <ol> <li> <p>Session Storage Check: Before showing the modal, the code checks if a flag (<code>hasSeenNoticeBoardModal</code>) exists in <code>sessionStorage</code>. If it doesn't, the modal can be shown.</p> </li> <li> <p>Setting the Flag: When the modal is closed (via <code>handleModalCancel</code>), the flag is set in <code>sessionStorage</code> to prevent the modal from being displayed again during the session.</p> </li> </ol>"},{"location":"office/primesales/intro/","title":"Intro","text":""},{"location":"office/primesales/intro/#intro","title":"Intro","text":""},{"location":"office/primesales/intro/#setup","title":"Setup","text":"<p>Success</p> <pre><code># Installing PHP\nsudo apt install php-cli\n\nsudo apt install php8.2 php8.2-cli php8.2-common php8.2-mysql php8.2-gd php8.2-mbstring php8.2-curl php8.2-xml php8.2-xmlrpc php8.2-zip\n\n\n# Installing Composer\nsudo apt install composer\n\n#\ncomposer global require laravel/installer\n</code></pre> <p>To Check PHP Version in Ubutnu</p> <pre><code>#1. Command Line Interface (CLI):\nphp --version\n\n# using the dpkg command:\ndpkg -l | grep php\n\n#2. Using Laravel Artisan Command:\nphp artisan --version\n</code></pre> <p>If you prefer not to use the command line interface, you can check the PHP version being used in your Laravel project by examining the <code>composer.json</code> file. Laravel specifies the PHP version requirement in this file.</p> <ol> <li>Navigate to the root directory of your Laravel project.</li> <li>Open the <code>composer.json</code> file in a text editor.</li> <li>Look for the <code>require</code> section. Within this section, you should find an entry for \"php\" along with a version constraint. For example:</li> </ol> composer.json<pre><code>\"require\": {\n    \"php\": \"^7.3\",\n    // other dependencies...\n}\n</code></pre> <p>In this example, Laravel requires PHP version <code>7.3</code> or higher.</p> PHP Version <code>major</code> &amp; <code>minor</code> <p>In PHP, the versioning convention is similar to many other programming languages and software systems. PHP version numbers typically consist of three numbers separated by periods, following a pattern similar to Semantic Versioning (SemVer).</p> <p>Major version:</p> <p>The first number represents the major version. When the major version number changes, it signifies significant updates that may not be backward compatible with previous versions. Major updates often introduce new features, architectural changes, or major enhancements.</p> <p>Minor version:</p> <p>The second number represents the minor version. A change in the minor version number usually indicates smaller updates or improvements compared to major updates. Minor updates may include new features or improvements while maintaining backward compatibility within the same major version.</p> <p>Patch version:</p> <p>The third number represents the patch version. Changes in the patch version number typically denote bug fixes, security patches, or minor updates that do not introduce new features and maintain backward compatibility within the same major and minor version. For example:</p> <ul> <li>In PHP version <code>7.2.0</code>, <code>7</code> is the major version, 2 is the minor version, and 0 is the patch version.</li> <li>In PHP version <code>8.0.1</code>, <code>8</code> is the major version, 0 is the minor version, and 1 is the patch version.</li> </ul> <p>When specifying version constraints in PHP projects using tools like Composer, version ranges and constraints are often defined in the composer.json file. The caret (^) symbol is commonly used to specify a range of compatible versions within the same major version, similar to other package management systems. For example, \"<code>^7.2</code>\" would include all versions from PHP <code>7.2</code> up to, but not including, PHP <code>8.0</code>.</p> <p>--</p>"},{"location":"office/primesales/intro/#url","title":"URL","text":"<p>webcrm</p> <p>username: sampurna password: primesales360##</p>"},{"location":"office/primesales/intro/#reference","title":"Reference","text":"<p>PHP Version History</p> <ul> <li>Brief Timeline of PHP Versions</li> <li>PHP Versions</li> <li>Zend PHP Versions</li> <li>educba PHP Versions</li> </ul> <p>Installation</p> <ul> <li>How to install and configure PHP</li> </ul> <p>Composer</p> <ul> <li>composer official</li> </ul> <p>Online</p> <ul> <li>Laravel Key Generator</li> </ul>"},{"location":"office/redux/intro/","title":"Intro","text":"<p>intro</p> Daily DiayMail <pre><code>services/reudx/dailyDiary/action.js\n\n// updated\nexport const updateDailyDiaryReducer = (GET_PAGINATION_DAILY_DIARY_UPDATE, data) =&gt; {\n    return {\n        type:  DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE,\n        payload: data,\n    }\n}\n\n// status\nexport const changeDailyDiaryStatus = (data) =&gt; {\n    return {\n        type: DAILY_DAIRY.GET_PAGIGATION_DAILY_DIARY_STATUS,\n        payload: data,\n    }\n}\n</code></pre> <pre><code>import { updateDailyDiaryReducer } from \"services/redux/dailyDairy/action\";\n\nexport const toDoMarkAsComplete = (id) =&gt; {\n    return async (dispatch) =&gt; {\n        dispatch(init(TODO_TYPES.TODO_COMPLETE));\n        const response = await toDoListService.toDoMarkAsComplete(id);\n        dispatch(finish(TODO_TYPES.TODO_COMPLETE));\n\n        if (response.isSuccess) {\n            dispatch(success(TODO_TYPES.TODO_COMPLETE, response.data));\n            // dispatch(getTodoEventsPagination(`maxResultCount=10&amp;skipCount=0`));\n            let status = response.data.markItOff ? \"complete\" : \"incomplete\";\n            message.success(`Todo status updated successfully`);\n\n            // added\n            // console.log(\"ACTION response: \", response.data);\n\n            // ****************************************************************\n            dispatch(updateDailyDiaryReducer(DAILY_DAIRY.GET_PAGINATION_DAILY_DIARY_UPDATE, response.data));\n        } else if (!response.isSuccess) {\n            dispatch(error(response.errorMessage));\n        }\n    };\n};\n</code></pre> <pre><code>// update in mail\ncase REFERENCE__TYPES.GET_CIRCULAR_REFERENCE_TEMPLATE_UPDATE:\n    let updatedTemplateMail = state?.singleCircularReferenceTemplateResponse &amp;&amp;\n        (state.singleCircularReferenceTemplateResponse.id === action.payload.id\n        ? { ...action.payload }\n        : state.singleCircularReferenceTemplateResponse\n        )\n\n    return {\n        ...state,\n        singleCircularReferenceTemplateLoading: false,\n        singleCircularReferenceTemplateResponse: updatedTemplateMail,\n    }\n\n\ntry {\n    if (data) {\n        dispatch(actionForAddUpdateReferenceTemplate(updateApiData));\n        if (origin === \"mail\") {\n            let apiPayload = {\n                ...updateApiData,\n                id: updateApiData?.referenceTemplateId,\n            }\n\n            delete apiData?.referenceId;\n            delete apiData?.referenceTemplateId;\n\n            dispatch(actionForUpdateTemplate(apiPayload))\n        } else {\n            dispatch(actionForGetReferenceTemplateGetDetailsById(referenceId));\n        }\n    } else {\n        dispatch(actionForAddUpdateReferenceTemplate(apiData));\n    }\n} catch(err) {\n    console.log(\"Error: \", err)\n}\n</code></pre>"},{"location":"office/redux/intro/#heres-a-breakdown-of-the-category-and-type-of-redux-pattern","title":"Here's a breakdown of the category and type of Redux pattern:","text":"<ol> <li>Asynchronous Actions (Async Actions)</li> <li>Thunk Middleware</li> <li>Action Chaining (Dispatching Multiple Actions)</li> </ol> Category Breakdown <ul> <li>Middleware-enhanced Redux: This falls under Redux with middleware enhancement because of the use of <code>redux-thunk</code>.</li> <li>Async Workflow: This approach is used when handling asynchronous workflows in your Redux actions.</li> <li>Action Chaining: It uses chained actions where you dispatch multiple actions from a single action creator, often in response to an async operation.</li> </ul>"},{"location":"office/redux/intro/#redux-tips","title":"Redux Tips","text":"<p>Here are techniques for managing adding, updating, and deleting items in Redux:</p> Adding ItemsUpdating ItemsDeleting Items <ul> <li>Check for Existence: Use <code>some</code> to determine if the item already exists before adding.</li> <li>Spread Operator: Use the spread operator to create a new array that includes the new item.</li> <li>Immutable Updates: Ensure state is updated immutably to avoid side effects.</li> </ul> <ul> <li>Map Function: Use <code>map</code> to create a new array, replacing the item when it matches the ID.</li> <li>Conditionally Update: Use conditional logic to check if the item should be updated based on the action payload.</li> <li>Preserve Other Items: Keep existing items unchanged while updating the specific item.</li> </ul> <ul> <li>Filter Function: Use <code>filter</code> to create a new array excluding the item to be deleted.</li> <li>Identify by ID: Identify the item to delete using its unique ID.</li> <li>Immutable State Update: Ensure the state is updated immutably to maintain Redux principles.</li> </ul> <p>These techniques will help you maintain a clean and efficient Redux codebase for managing items effectively.</p> Using libraries in a Redux codebase <p>Using libraries in a Redux codebase can enhance functionality and simplify certain tasks, but they aren't strictly necessary. Here are some libraries commonly used in conjunction with Redux, along with their benefits:</p> <ol> <li> <p>Redux Toolkit</p> <ul> <li>Purpose: Simplifies Redux setup and reduces boilerplate code.</li> <li> <p>Features:</p> <ul> <li>Built-in functions for creating slices (reducers and actions).</li> <li>Built-in middleware for handling asynchronous logic (like <code>createAsyncThunk</code>).</li> <li>Includes utilities for immutable updates.</li> </ul> </li> </ul> </li> <li> <p>Immer</p> <ul> <li>Purpose: Makes immutable state updates easier and more readable.</li> <li> <p>Benefits:</p> <ul> <li>Allows you to write \"mutable\" code that gets converted to immutable updates.</li> <li>Reduces the complexity of deeply nested updates.</li> </ul> </li> </ul> </li> <li> <p>Lodash</p> <ul> <li>Purpose: Provides utility functions for common tasks like sorting and filtering.</li> <li> <p>Benefits:</p> <ul> <li>Simplifies array and object manipulation (e.g., <code>_.sortBy</code>, <code>_.find</code>, <code>_.filter</code>).</li> </ul> </li> </ul> </li> <li> <p>React-Redux</p> <ul> <li>Purpose: Connects React components to the Redux store.</li> <li> <p>Benefits:</p> <ul> <li>Provides hooks like <code>useSelector</code> and <code>useDispatch</code> for accessing state and dispatching actions easily.</li> <li>Ensures efficient rendering by only re-rendering components when necessary.</li> </ul> </li> </ul> </li> <li> <p>Redux-Saga or Redux-Thunk</p> <ul> <li>Purpose: Middleware for handling side effects in Redux.</li> <li> <p>Benefits:</p> <ul> <li>Redux-Saga: Uses generator functions to handle complex asynchronous flows.</li> <li>Redux-Thunk: Allows action creators to return functions for handling asynchronous logic.</li> </ul> </li> </ul> </li> </ol> <p>Conclusion</p> <p>While you can build a Redux application without any additional libraries, using them can significantly improve development efficiency, readability, and maintainability. For most applications, Redux Toolkit is highly recommended as it encapsulates many best practices and simplifies the development process.</p>"},{"location":"office/redux/intro/#immer-redux","title":"Immer &amp; Redux","text":"<p>Using <code>Immer</code> with <code>Redux</code> in the same project is a common practice and can be very beneficial. Here's how they can complement each other, along with standard practices:</p> Using Immer with Redux <ol> <li> <p>State Management Simplification:</p> <ul> <li>Immer allows you to write \"mutable\" code when updating state, which can make your reducers much more readable.</li> <li>Instead of returning new state objects with the spread operator or using methods like <code>map</code>, <code>filter</code>, or <code>reduce</code>, you can mutate a draft state directly.</li> </ul> </li> <li> <p>Integration with Redux Toolkit:</p> <ul> <li>Redux Toolkit already uses Immer under the hood for its <code>createSlice</code> method. This means you can write reducers that look mutable, but they are actually producing immutable updates.</li> <li>This allows you to leverage both libraries seamlessly, especially when using the Toolkit.</li> </ul> </li> </ol> ExampleStandard PracticesConclusion <pre><code>import { createSlice } from \"@reduxjs/toolkit\";\n\nconst itemsSlice = createSlice({\n    name: \"items\",\n    initialState: [],\n    reducers: {\n        addItem: (state, action) =&gt; {\n            state.push(action.payload); // Mutative update, thanks to Immer\n        },\n        updateItem: (state, action) =&gt; {\n            const index = state.findIndex((item) =&gt; item.id === action.payload.id);\n            if (index !== -1) {\n                state[index] = action.payload; // Mutative update\n            }\n        },\n        deleteItem: (state, action) =&gt; {\n            return state.filter((item) =&gt; item.id !== action.payload.id); // Non-mutative, but still concise\n        },\n    },\n});\n\nexport const { addItem, updateItem, deleteItem } = itemsSlice.actions;\nexport default itemsSlice.reducer;\n</code></pre> <ol> <li> <p>Use Redux Toolkit:</p> <ul> <li>Start with Redux Toolkit for setting up Redux. It simplifies the Redux setup and integrates well with Immer.</li> </ul> </li> <li> <p>Leverage Immer for Reducers:</p> <ul> <li>Use Immer's mutability in reducers when you need more complex state updates. This can reduce boilerplate code and improve clarity.</li> </ul> </li> <li> <p>Keep State Management Concise:</p> <ul> <li>Use Immer to handle nested state updates easily without the need for deep cloning or complex logic.</li> </ul> </li> <li> <p>Evaluate Needs:</p> <ul> <li>While Immer is very useful, consider your project's complexity. For simple state updates, the standard Redux pattern may suffice without needing Immer.</li> </ul> </li> <li> <p>Documentation and Consistency:</p> <ul> <li>Document your use of these libraries in your codebase to ensure all team members understand the patterns being used.</li> </ul> </li> </ol> <p>Combining <code>Immer</code> and <code>Redux Toolkit</code> is a standard practice in modern Redux applications. It improves the developer experience by allowing clearer and more concise state management while maintaining the immutable nature of Redux.</p>"},{"location":"office/redux/react-router/","title":"React Router","text":""},{"location":"office/redux/react-router/#overview","title":"Overview","text":"<p>The main difference between <code>react-router</code> and <code>react-router-dom</code> lies in their intended use cases:</p>"},{"location":"office/redux/react-router/#1-react-router","title":"1. react-router:","text":"<ul> <li>This is the core library for routing in React applications.</li> <li>It provides the basic building blocks for routing but does not include any specific components or features for web or mobile environments.</li> </ul>"},{"location":"office/redux/react-router/#2-react-router-dom","title":"2. react-router-dom:","text":"<ul> <li>This is a package built on top of <code>react-router</code> specifically designed for web applications.</li> <li>It includes additional components and features tailored for DOM-based environments, such as <code>BrowserRouter</code>, <code>HashRouter</code>, <code>Link</code>, and <code>NavLink</code>.</li> </ul>"},{"location":"office/redux/react-router/#3-react-router-native","title":"3. react-router-native:","text":"<ul> <li>This package is for React Native applications.</li> <li>It provides components that work with React Native's navigation system.</li> </ul> <p>In summary, you use <code>react-router-dom</code> for web applications and <code>react-router-native</code> for mobile apps, both of which leverage the core functionality provided by <code>react-router</code>. If you're developing a web app, you only need to install <code>react-router-dom</code>.</p>"},{"location":"office/redux/react-router/#layout-basic","title":"Layout Basic","text":"StructureExplanation of the Structure <pre><code>/src\n\u251c\u2500\u2500 /components\n\u2502   \u251c\u2500\u2500 /Layout\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.js\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.css  (optional, for custom styles)\n\u2502   \u2502   \u2514\u2500\u2500 index.js      (for easier imports)\n\u2502   \u251c\u2500\u2500 /SomeOtherComponent\n\u2502   \u2502   \u2514\u2500\u2500 SomeOtherComponent.js\n\u2502   \u2514\u2500\u2500 /AnotherComponent\n\u2502       \u2514\u2500\u2500 AnotherComponent.js\n\u251c\u2500\u2500 /pages\n\u2502   \u251c\u2500\u2500 HomePage.js\n\u2502   \u2514\u2500\u2500 AboutPage.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 /assets\n    \u2514\u2500\u2500 /images\n</code></pre> <ul> <li>/src: This is the root of your source files.</li> <li> <p>/components: This folder contains all your reusable components.</p> <ul> <li>/Layout: A dedicated folder for your layout components.<ul> <li>MyLayout.js: The main layout component where you define your sidebar and content structure.</li> <li>MyLayout.css: (Optional) A CSS file for any custom styles related to the layout.</li> <li> <p>index.js: This file can be used to re-export the MyLayout component for easier imports. For example:</p> <pre><code>// index.js\nexport { default } from './MyLayout';\n</code></pre> </li> </ul> </li> </ul> </li> <li> <p>/pages: This folder can be used for your main application pages, where you would typically use the layout component.</p> <ul> <li><code>HomePage.js</code>: Example of a page that might use the layout.</li> <li><code>AboutPage.js</code>: Another page example.</li> </ul> </li> <li>App.js: The main application file where you set up your routes and integrate your layout.</li> <li>index.js: The entry point of your React application.</li> <li>/assets: A folder to store static assets such as images, fonts, etc.</li> </ul> <pre><code>// App.js\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport MyLayout from \"./components/Layout\"; // adjust the path based on your structure\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\n\nconst App = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;MyLayout&gt;\n        &lt;Switch&gt;\n          &lt;Route path=\"/\" exact component={HomePage} /&gt;\n          &lt;Route path=\"/about\" component={AboutPage} /&gt;\n          {/* Add more routes as needed */}\n        &lt;/Switch&gt;\n      &lt;/MyLayout&gt;\n    &lt;/Router&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"office/redux/react-router/#layout-modular-approach","title":"Layout Modular Approach","text":"Structure <pre><code>/src\n\u251c\u2500\u2500 /components\n\u2502   \u251c\u2500\u2500 /Layout\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.js\n\u2502   \u2502   \u251c\u2500\u2500 Sidebar.js\n\u2502   \u2502   \u251c\u2500\u2500 Header.js\n\u2502   \u2502   \u251c\u2500\u2500 Footer.js\n\u2502   \u2502   \u251c\u2500\u2500 MyLayout.css  (optional)\n\u2502   \u2502   \u2514\u2500\u2500 index.js\n\u2502   \u251c\u2500\u2500 /SomeOtherComponent\n\u2502   \u2502   \u2514\u2500\u2500 SomeOtherComponent.js\n\u2502   \u2514\u2500\u2500 /AnotherComponent\n\u2502       \u2514\u2500\u2500 AnotherComponent.js\n\u251c\u2500\u2500 /pages\n\u2502   \u251c\u2500\u2500 HomePage.js\n\u2502   \u2514\u2500\u2500 AboutPage.js\n\u251c\u2500\u2500 App.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 /assets\n    \u2514\u2500\u2500 /images\n</code></pre> MyLayout.jsSidebar.jsHeader.jsFooter.jsindex.jsApp.jsx <p>This component serves as the main layout, integrating the header, sidebar, and footer.</p> <pre><code>// MyLayout.js\nimport React from 'react';\nimport { Layout } from 'antd';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst { Content } = Layout;\n\nconst MyLayout = ({ children }) =&gt; {\n    return (\n        &lt;Layout style={{ minHeight: '100vh' }}&gt;\n            &lt;Sidebar /&gt;\n            &lt;Layout&gt;\n                &lt;Header /&gt;\n                &lt;Content style={{ margin: '24px 16px 0' }}&gt;\n                &lt;div style={{ padding: 24, background: '#fff', minHeight: 360 }}&gt;\n                    {children}\n                &lt;/div&gt;\n                &lt;/Content&gt;\n                &lt;Footer /&gt;\n            &lt;/Layout&gt;\n        &lt;/Layout&gt;\n    );\n};\n\nexport default MyLayout;\n</code></pre> <p>This component handles the sidebar navigation.</p> <pre><code>// Sidebar.js\nimport React from 'react';\nimport { Layout, Menu } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst { Sider } = Layout;\n\nconst Sidebar = () =&gt; {\n    return (\n        &lt;Sider width={200} style={{ background: '#fff' }}&gt;\n            &lt;Menu mode=\"inline\" defaultSelectedKeys={['1']} style={{ height: '100%', borderRight: 0 }}&gt;\n                &lt;Menu.Item key=\"1\"&gt;\n                    &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                &lt;Menu.Item key=\"2\"&gt;\n                    &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n                &lt;/Menu.Item&gt;\n                {/* Add more menu items as needed */}\n            &lt;/Menu&gt;\n        &lt;/Sider&gt;\n    );\n};\n\nexport default Sidebar;\n</code></pre> <pre><code>// Header.js\nimport React from 'react';\nimport { Layout } from 'antd';\n\nconst { Header } = Layout;\n\nconst CustomHeader = () =&gt; {\n    return (\n        &lt;Header style={{ background: '#fff', padding: 0 }}&gt;\n            &lt;h1 style={{ margin: '0', padding: '0 20px' }}&gt;My Application&lt;/h1&gt;\n            {/* Add more header content, like user info or navigation */}\n        &lt;/Header&gt;\n    );\n};\n\nexport default CustomHeader;\n</code></pre> <pre><code>// Footer.js\nimport React from 'react';\nimport { Layout } from 'antd';\n\nconst { Footer } = Layout;\n\nconst CustomFooter = () =&gt; {\n    return (\n        &lt;Footer style={{ textAlign: 'center' }}&gt;\n            My Application \u00a92024 Created by Your Name\n        &lt;/Footer&gt;\n    );\n};\n\nexport default CustomFooter;\n</code></pre> <p>This file will help simplify imports.</p> <pre><code>// index.js\nexport { default } from './MyLayout';\nexport { default as Sidebar } from './Sidebar';\nexport { default as Header } from './Header';\nexport { default as Footer } from './Footer';\n</code></pre> <p>Here's how you can integrate your modular layout in <code>App.js</code>:</p> <pre><code>// App.js\nimport React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport MyLayout from \"./components/Layout\"; // Adjust the path as necessary\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\n\nconst App = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;MyLayout&gt;\n                &lt;Routes&gt;\n                    &lt;Route path=\"/\" element={&lt;HomePage /&gt;} /&gt;\n                    &lt;Route path=\"/about\" element={&lt;AboutPage /&gt;} /&gt;\n                    {/* Add more routes as needed */}\n                &lt;/Routes&gt;\n            &lt;/MyLayout&gt;\n        &lt;/Router&gt;\n    );\n};\n\nexport default App;\n</code></pre> Benefits of This Structure <ol> <li>Modularity: Each part of the layout (header, sidebar, footer) is encapsulated in its own component, making it easier to manage and update.</li> <li>Reusability: You can reuse these components in different parts of your application as needed.</li> <li>Scalability: As your application grows, you can easily add more features or components without cluttering the main layout file.</li> <li>Customization: Each component can have its own styles and logic, allowing for easy customization.</li> </ol> <p>This modular approach will help maintain a clean codebase as your application scales, making it easier to manage and enhance features over time.</p>"},{"location":"office/redux/zustland-store/","title":"Zustland Store","text":""},{"location":"office/redux/zustland-store/#zustand-store","title":"Zustand Store","text":"<p>Sure! Let\u2019s break down a Zustand store, including the predefined functions and the initial data structure. Here\u2019s a structured view:</p>"},{"location":"office/redux/zustland-store/#breakdown-of-a-zustand-store","title":"Breakdown of a Zustand Store","text":"<ol> <li> <p>Store Structure</p> <p>A Zustand store typically consists of:</p> <ul> <li>Initial State: Defines the starting values for your state.</li> <li>Actions: Functions that modify the state.</li> <li>Selectors (optional): Functions to derive specific state values.</li> </ul> </li> <li> <p>Predefined Functions and Classes</p> <p>Zustand doesn\u2019t have predefined classes like some other libraries, but here are the key elements and functions you typically work with:</p> <ul> <li> <p><code>create</code>:</p> </li> <li> <p>Function used to create a store.     Takes a function as an argument that defines the state and actions.</p> </li> <li> <p><code>set</code>:</p> </li> <li> <p>Function provided in the store creation callback that allows you to update the state.     Can be used to set new state directly or take a function to calculate the new state based on the current state.</p> </li> <li> <p><code>get</code> (optional):</p> </li> <li> <p>Allows access to the current state directly within your actions or selectors, though it's less commonly used in simple scenarios.</p> </li> <li> <p>Selectors:</p> </li> <li> <p>While not a separate function, you can create selectors within your store for optimized state access.</p> </li> </ul> </li> </ol>"},{"location":"office/redux/zustland-store/#example-of-a-store-breakdown","title":"Example of a Store Breakdown","text":"ExampleBreakdown of the Example <pre><code>// src/store.js\nimport create from \"zustand\";\n\n// Create a store\nconst useStore = create((set) =&gt; ({\n    // Initial State\n    count: 0, // Initial data\n    user: null, // Example of another piece of state\n\n    // Actions\n    increase: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n    decrease: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n\n    // Action with parameter\n    setUser: (user) =&gt; set({ user }), // Sets the user state\n}));\n</code></pre> <ol> <li> <p>Initial State:</p> <ul> <li><code>count: 0</code>: Initializes the count to zero.</li> <li><code>user: null</code>: Initializes a user state to <code>null</code>, which can be used to store user information later.</li> </ul> </li> <li> <p>Actions:</p> <ul> <li><code>increase</code>: Increases the count by 1. Uses the <code>set</code> function to update the state.</li> <li><code>decrease</code>: Decreases the count by 1.</li> <li><code>setUser</code>: Takes a <code>user</code> parameter and sets the <code>user</code> state. This is an example of a dynamic action that accepts input.</li> </ul> </li> </ol> Summary of Key Components Component Description <code>create</code> Function to create a store. Initial State Key-value pairs defining the state variables. <code>set</code> Function to update state; accepts either a new state object or a function to compute the new state. Actions Functions that modify state (e.g., <code>increase</code>, <code>decrease</code>, <code>setUser</code>). <code>get</code> Optional function to get the current state. Selectors Functions to derive specific state values (optional)."},{"location":"office/redux/zustland-store/#conclusion","title":"Conclusion","text":"<p>Understanding the breakdown of a Zustand store helps you effectively manage state in your applications. You have an initial state, actions to modify that state, and the tools (<code>create</code>, <code>set</code>, and optionally <code>get</code>) to work with the store efficiently!</p>"},{"location":"office/redux/zustland/","title":"Zustland","text":""},{"location":"office/redux/zustland/#zustland","title":"Zustland","text":"<p>To master Zustand and effectively manage state in your React applications, it's helpful to understand several key concepts related to creating and using stores. Here\u2019s a breakdown:</p> <ol> <li> <p>Store Creation</p> <ul> <li><code>create</code> Function: This is the primary method for creating a store. It takes a function that defines the state and actions.</li> <li>State Initialization: Define the initial state directly in the store.</li> </ul> </li> <li> <p>State Management</p> <ul> <li>State Object: The state is a plain JavaScript object, which can hold various data types (numbers, strings, arrays, objects).</li> <li>Mutable vs. Immutable: Understanding how Zustand handles state updates. Zustand uses immutable patterns but allows you to work with mutable-like syntax through the <code>set</code> function.</li> </ul> </li> <li> <p>Actions</p> <ul> <li>Updating State: Actions are functions defined in your store that use the <code>set</code> method to update state. They can take parameters to allow for more dynamic updates.</li> <li>Side Effects: You can perform side effects within actions (e.g., API calls) and update the store accordingly.</li> </ul> </li> <li> <p>Selectors</p> <ul> <li>Selecting State: You can create selectors to derive specific pieces of state or to optimize performance. This reduces re-renders by only subscribing to the relevant parts of the state.</li> </ul> </li> <li> <p>Middleware</p> <ul> <li>Enhancing Stores: Zustand allows you to use middleware for logging, persisting state, or handling async actions. Familiarize yourself with built-in middleware and how to create your own.</li> </ul> </li> <li> <p>Persisting State</p> <ul> <li>Local Storage: You can persist your state across sessions using middleware that saves the state to local storage or other storage solutions.</li> </ul> </li> <li> <p>Using Multiple Stores</p> <ul> <li>Modularity: You can create multiple stores for different features or modules in your application, which helps keep your state management organized.</li> </ul> </li> <li> <p>React Integration</p> <ul> <li>Custom Hooks: Zustand is built around the concept of hooks, allowing you to easily integrate store access in functional components.   Reactivity: Understanding how Zustand triggers re-renders in components when the state changes.</li> </ul> </li> <li> <p>Typescript Support</p> <ul> <li>Type Safety: If you\u2019re using TypeScript, learn how to define types for your store\u2019s state and actions to take advantage of type safety.</li> </ul> </li> <li> <p>Debugging</p> <ul> <li>Debugging State Changes: Learn strategies to debug your Zustand store, including logging actions and state changes.</li> </ul> </li> <li> <p>Performance Optimization</p> <ul> <li>Avoiding Unnecessary Renders: Understanding how Zustand minimizes re-renders and how to structure your state and actions to optimize performance.</li> </ul> </li> </ol> Summary Table Category Concepts Store Creation <code>create</code>, State Initialization State Management State Object, Mutable vs. Immutable Actions Updating State, Side Effects Selectors Selecting State Middleware Enhancing Stores Persisting State Local Storage Using Multiple Stores Modularity React Integration Custom Hooks, Reactivity TypeScript Support Type Safety Debugging Logging Performance Optimization Avoiding Unnecessary Renders <p>By categorizing the concepts this way, you can create a mental map to recall the key ideas related to Zustand more easily!</p>"},{"location":"research/docker/","title":"Docker","text":""},{"location":"research/docker/#installation","title":"Installation","text":"<p>The core of Docker is made of the Docker engine, a single-host software daemon that allows you to create and manage containers. Before diving into using Docker, you need to install the Docker engine on a host, either your desktop, laptop, or a server.</p> <p>A <code>Dockerfile</code> is a manifest that describes how to build a container image. This is a core concept in Docker.</p> Abstract DockerfileTheoryPractical <pre><code># Use an existing image as a base\nFROM alpine:latest\n\n# Run a command in the container\nCMD [\"echo\", \"Hello, Jenkins!\"]\n</code></pre> <p><code>Docker</code>, <code>Docker Compose</code>, and <code>Docker Swarm</code> are all related tools in the Docker ecosystem, but they serve different purposes:</p> <ol> <li> <p>Docker:</p> <p>Docker is a platform and tool for building, distributing, and running <code>containers</code>. Containers allow developers to package an application with all of its dependencies into a standardized unit for software development. Docker provides the tools needed to create and manage these containers efficiently. With Docker, you can build container images, run containers from those images, and manage container lifecycles.</p> </li> <li> <p>Docker Compose:</p> <p>Docker Compose is a tool for defining and running <code>multi-container</code> Docker applications. It allows you to use a YAML file to configure the services that make up your application, including their dependencies, networking, and volumes. Docker Compose then takes care of starting, stopping, and managing all of these containers as a single application stack. It simplifies the process of managing complex applications composed of multiple interconnected containers.</p> </li> <li> <p>Docker Swarm:</p> <p>Docker Swarm is Docker's native clustering and <code>orchestration tool</code>. It allows you to create and manage a cluster of Docker nodes, turning them into a single virtual Docker engine. Docker Swarm enables you to deploy and manage multi-container applications across multiple hosts, providing features such as service scaling, rolling updates, and high availability. It simplifies the management of containerized applications at scale and provides built-in features for load balancing and service discovery.</p> </li> </ol> <p>In summary:</p> <ul> <li><code>Docker</code>: The core platform for building, distributing, and running containers.</li> <li><code>Docker Compose</code>: A tool for defining and managing multi-container applications using a YAML configuration file.</li> <li><code>Docker Swarm</code>: Docker's native clustering and orchestration tool for managing multi-container applications across multiple hosts.</li> </ul> <pre><code>$ sudo apt-get install &lt;docker.deb&gt;\n</code></pre> <p>Commands</p> bash<pre><code># List containers:\n$ docker containers ls\n\n# List only running container: (ps-process status)\n$ docker ps -a\n\n# List images:\n$ docker images\n</code></pre> <p>Restart Docker</p> bash<pre><code># To restart a Docker container based on an image\n\n# 1.Identify the Container:\n$ docker ps\n\n# 2. Restart the Container:\n$ docker restart &lt;container_id_or_name&gt;\n\n# 3. Verify Restart:\n$ docker ps\n</code></pre>"},{"location":"research/docker/#clarifying-docker-terms","title":"Clarifying Docker terms","text":"Abstract <p>Docker Registry</p> <p>A Docker Registry is a place where Docker images can be stored in order to be publicly or privately found, accessed, and used by software developers worldwide for quickly crafting fresh and composite applications without any risks. Because all the stored images will have gone through multiple validations, verifications, and refinements, the quality of those images is really high. You can dispatch your Docker image to the registry so that it is registered and deposited using the <code>docker push</code> subcommand. You can download Docker images from the registry using the <code>docker pull</code> subcommand.</p> <p>Docker Registry could be hosted by a third party as a public or private registry, like one of the following registries:</p> <ul> <li>Docker Hub</li> <li>Quay</li> <li>Google Container Registry</li> <li>AWS Container Registry</li> </ul> <p>Every institution, innovator, and individual can have their own Docker Registry to stock up their images for internal and/or external access and usage.</p> <ul> <li>Learning Docker Second Edition by Jeeva S. Chelladhurai, pg:31</li> </ul>"},{"location":"research/docker/#nginx-engine-x-web-server","title":"nginx (Engine X) <code>web server</code>","text":"Abstract TheoryPractical bash<pre><code>sudo apt update\nsudo apt install nginx\n</code></pre> <p><code>/etc/nginx/nginx.conf</code></p> <p>The server_name directive in Nginx should specify only the domain name or names without the protocol (e.g., <code>http://</code>). Therefore, you need to modify your configuration like this:</p> nginx<pre><code>http {\n    server {\n        listen 9000;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n        # Jenkins running on port 9000\n        proxy_pass http://10.114.0.175:9000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 8080;\n        server_name generic-info.ispl.com.np;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> <p>After making this change, you should test the configuration to ensure there are no syntax errors:</p> bash<pre><code>sudo nginx -t\n</code></pre> <p>If the test is successful, reload Nginx to apply the changes:</p> bash<pre><code>sudo systemctl reload nginx\n</code></pre> <p>This should resolve the issue, and Nginx should be able to start without errors.</p> Using Paths to Differentiate Services <p>If Hostnames Are Not Available</p> <p>If you cannot use different hostnames, you will need to use different ports or subpaths as described in previous responses.</p> <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location /jenkins/ {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/jenkins(.*) $1 break;\n        }\n\n        location /portainer/ {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            rewrite ^/portainer(.*) $1 break;\n        }\n    }\n}\n</code></pre> <p>Explanation</p> <ul> <li>Single Server Block: Only one server block is needed, listening on port 80.</li> <li>Path-Based Routing: Requests to /jenkins are routed to Jenkins running on port 9000, and requests to /portainer are routed to Portainer running on port 8080.</li> <li>Rewrite Directive: The rewrite directive ensures that the backend service receives the correct path.</li> </ul> <p>Access URLs</p> <ul> <li>Jenkins: <code>http://&lt;your-server-ip&gt;/jenkins</code></li> <li>Portainer: <code>http://&lt;your-server-ip&gt;/portainer</code></li> </ul> same port <p>To serve both Jenkins and Portainer on the same port (port 80) without using subpaths like /jenkins and /portainer, you need to use different hostnames. Each service will be accessible via a different domain or subdomain. This approach requires DNS configuration to resolve different hostnames to your server's IP address.</p> <pre><code>http {\n    server {\n        listen 80;\n        server_name jenkins.example.com;\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 80;\n        server_name portainer.example.com;\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre> Different Port <pre><code>http {\n    server {\n        listen 80;\n        # No server_name specified\n\n        location / {\n            # Jenkins running on port 9000\n            proxy_pass http://10.114.0.175:9000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n\n    server {\n        listen 81;\n        # No server_name specified\n\n        location / {\n            # Portainer running on port 8080\n            proxy_pass http://10.114.0.175:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}\n</code></pre>"},{"location":"research/docker/#docker-images","title":"Docker Images","text":"Abstract TheoryPracticalDangling images bash<pre><code># List Docker images\n$ docker images\n\n# Remove Docker image by ID\n$ docker rmi &lt;image_id&gt;\n\n# Remove Docker image by repository and tag\n$ docker rmi &lt;repository_name&gt;:&lt;tag&gt;\n\n# Forcefully remove images\n$ docker rmi -f &lt;image_id&gt;\n# or\n$ docker rmi --force &lt;image_id&gt;\n</code></pre> <p>Create Docker Image</p> <p>When working with Docker, you typically create an image first and then use that image to create containers.</p> <ol> <li> <p>Create Image:</p> <p>An image is like a template that contains the filesystem and configuration needed to run a container. You define an image using a <code>Dockerfile</code>, which specifies the instructions to build the image. You use the docker build command to create an image from a Dockerfile.</p> </li> <li> <p>Create Container:</p> <p>Once you have an image, you can create one or more containers from it. A container is a running instance of an image. You use the docker run command to create and start a container from an image. Each container runs in isolation from other containers but can communicate with them if configured to do so.</p> </li> </ol> <p>Here's a basic sequence of commands:</p> <ol> <li>Create the image:</li> </ol> <pre><code>$ docker build -t my-image .\n</code></pre> <ol> <li>Run a container based on that image:</li> </ol> <pre><code>$ docker run --name my-container my-image\n</code></pre> <p>So, to summarize, first, you build an image using a <code>Dockerfile</code>, then you create and run containers based on that image.</p> <p>Dangling images are layers that have no relationship to any tagged images. They no longer serve a purpose and consume disk space.</p> <p>Dangling images are created while creating new build of a image without renaming/updating the version of the image. So that the old image are converted into dangling images.</p> <pre><code># List Dangling images\n$ docker images -f dangling=true\n\n# Remove Dangling images\n$ docker rmi $(docker images -f dangling=true -q)\n\n##\n# To remove all dangling images.\n$ docker image prune\n\n# To remove all images which aren't used by existing containers, use the -a flag:\n$ docker image prune -a\n\n# To remove all stopped containers.\n$ docker container prune\n\n# To removes stopped containers older than 24 hours:\n$ docker container prune --filter \"until=24h\"\n\n# To remove all volumes not used by at least one container.\n$ docker volume prune\n\n# To remove all networks not used by at least one container.\n$ docker network prune\n\n# The docker system prune command is a shortcut that prunes images, containers, and networks.\n# Volumes aren't pruned by default, and you must specify the --volumes flag for docker system prune to prune volumes.\n\n# To prune images, containers and network\n$ docker system prune\n\n# To also prune volumes, add the --volumes flag:\n$ docker system prune --volumes\n</code></pre> <ul> <li>Remove unnecessary images</li> <li>Docker container and image prune</li> </ul>"},{"location":"research/docker/#docker-container","title":"Docker Container","text":"Abstract TheoryPracticalAdditional <p>Create Docker Container</p> <p>example of creating a new container:</p> bash<pre><code># syntax\n# 1. Run a new container with the new image:\n$ docker run --name &lt;container_name&gt; -d &lt;new_image_name&gt;\n\n# 2. Stop the existing container:\n$ docker stop &lt;container_name_or_id&gt;\n\n# 3. Remove the existing container (optional):\n$ docker rm &lt;container_name_or_id&gt;\n\n# example\n$ docker run --name my-container -d my-image\n</code></pre> <ul> <li><code>--name my-container</code> sets the name of the container to my-container.</li> <li><code>-d</code> runs the container in detached mode (in the background).</li> <li><code>my-image</code> is the name of the image from which to create the container.</li> </ul> <p>This command will create a new container using the specified image. If the image is not available locally, Docker will automatically pull it from a registry like Docker Hub before creating the container.</p> <p>After running the command, you can use <code>docker ps</code> to see the list of running containers.</p> <p>Check the IP Address of the Docker Container</p> bash<pre><code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n</code></pre> <p>Then try accessing the site using <code>curl</code> with the <code>IP address</code> and the <code>mapped port</code> (<code>8082</code> in this case).</p> <p>if you want to check if a container named my_container is using any volumes:</p> bash<pre><code>docker inspect &lt;my_container&gt; | grep Mounts\n</code></pre> bash<pre><code>docker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\njenkins/jenkins:lts\n\ndocker run -d \\\n-p 8080:8080 \\\n-p 50000:50000 \\\n--name jenkins \\\n--restart unless-stopped \\\n-v generic-volume:/var/jenkins_home/generic-volume \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\nmy-jenkins\n</code></pre>"},{"location":"research/docker/#docker-volume","title":"Docker Volume","text":"Abstract TheoryPracticalAdditional bash<pre><code># List Volumes in Use:\n$ docker volume ls\n\n# list all containers to find out which volumes are in use:\n$ docker ps -a\n\n# delete the volumes\n$ docker volume rm &lt;volume_name_or_id&gt;\n\n# delete volumes along with the containers that use them\n$ docker rm -v &lt;container_name_or_id&gt;\n</code></pre> <p>Recap Docker Volume</p> <p>In a previous chapter, we used the \"<code>-v</code>\" option to a \"<code>docker run</code>\" command to declare that we wanted to use a volume with a container. The abbreviated \"<code>-v</code>\" option is exactly the same as the \"<code>--volume</code>\" option. However, the newer and preferred way to mount volumes in a container is the \"<code>--mount</code>\" option. Docker recommends that you use \"<code>--mount</code>\" instead of \"<code>-v</code>\" or \"<code>--volume</code>\", as their research has shown \"<code>--mount</code>\" is easier to use. However, if you are an old Docker user like myself, then you're probably accustomed to using and seeing \"<code>-v</code>\". In any case, either works, but we will focus on \"<code>--mount</code>\", as it\u2019s the recommended way.</p> <pre><code>$ docker run -d --name withvolume --mount source=mydata1,destination=/root/volume nginx\n\n#\ndocker run -d --name withvolume2 --mount src=mydata1,dst=/root/volume nginx\n\n$ docker run -dit --name ephemeral --mount type=tmpfs,destination=/root/volume nginx\n</code></pre> <ul> <li>Docker: A project based learning</li> <li>Publish Docker image to Dockerhub using Jenkins Pipeline</li> <li>Build a Docker Jenkins Pipeline to Implement CI/CD Workflow</li> </ul>"},{"location":"research/docker/#portainer","title":"Portainer","text":"Abstract TheoryPracticalAdditional <p>Docker pull Command</p> bash<pre><code>$ docker pull portainer/portainer-ce\n</code></pre> <p>After installing Portainer in Docker on a Linux server, you can run it by executing the Docker run command with appropriate options. Here's how you can do it:</p> <ol> <li> <p>Open a Terminal:</p> <p>Log in to your Linux server via SSH or open a terminal window if you're working directly on the server.</p> </li> <li> <p>Run Portainer Container:</p> <p>Use the following command to start the Portainer container:</p> bash<pre><code>sudo docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer-ce\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 9000:9000</code>: Map port 9000 on the host to port 9000 inside the container. This allows you to access Portainer's web interface on port 9000 of your server.</p> </li> <li> <p><code>--name portainer</code>: Assign the name \"portainer\" to the container.</p> </li> <li> <p><code>--restart always</code>: Ensure that the container restarts automatically if it stops.</p> </li> <li> <p><code>-v /var/run/docker.sock:/var/run/docker.sock</code>: Mount the Docker socket inside the container, allowing Portainer to communicate with the Docker daemon.</p> </li> </ul> </li> <li> <p>Verify Portainer Container:</p> <p>You can verify that the Portainer container is running by executing the following command:</p> bash<pre><code>$ sudo docker ps\n</code></pre> <p>This command will list all running containers, and you should see an entry for the Portainer container.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:9000\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Set up Portainer:</p> <p>When you access the Portainer web interface for the first time, you'll be prompted to set up an admin user and password. Follow the on-screen instructions to complete the setup process.</p> </li> </ol> <p>That's it! You have now successfully run Portainer in Docker on your Linux server, and you can start managing your Docker environment through the Portainer web interface.</p> <p>Portainer with Docker</p> <p>To use Docker Swarm mode with Portainer, you need to set up a Docker Swarm cluster and then deploy Portainer as a service within the Swarm. Here's a step-by-step guide on how to do this:</p> <ol> <li> <p>Initialize Docker Swarm:</p> <p>If you haven't already initialized Docker Swarm on your Docker host, you can do so by running the following command in your terminal:</p> bash<pre><code>$ docker swarm init\n</code></pre> <p>This command initializes Docker Swarm mode on the current Docker host and creates a Swarm manager node.</p> </li> <li> <p>Deploy Portainer as a Service:</p> <p>Once Docker Swarm is initialized, you can deploy Portainer as a service within the Swarm. Run the following command to create a Portainer service:</p> bash<pre><code>docker service create \\\n--name portainer \\\n--publish 9000:9000 \\\n--constraint 'node.role == manager' \\\n--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \\\nportainer/portainer-ce\n</code></pre> <p>This command creates a new service named \"portainer\" using the Portainer Community Edition (CE) image. It publishes Portainer's web interface on port 9000 and mounts the Docker socket from the host into the Portainer container, allowing Portainer to interact with the Docker API.</p> </li> <li> <p>Access Portainer Web Interface:</p> <p>Once the Portainer service is deployed, you can access the Portainer web interface by navigating to http://:9000 in your web browser. If you're running Portainer locally, you can use http://localhost:9000.</p> </li> <li> <p>Set Up Portainer:</p> <p>Follow the on-screen instructions to complete the initial setup of Portainer. You'll be prompted to create an admin user, choose a password, and specify whether you want to manage the local Docker environment or a remote Docker Swarm cluster.</p> </li> <li> <p>Connect Portainer to Docker Swarm:</p> <p>If you're managing a remote Docker Swarm cluster, you'll need to specify the Swarm endpoint URL and optionally provide authentication credentials. This allows Portainer to communicate with the Docker Swarm API and manage services, nodes, and other resources within the cluster.</p> </li> <li> <p>Start Managing Services:</p> <p>Once connected, you can start managing Docker Swarm services, nodes, stacks, and other resources using the Portainer web interface. You can create, scale, update, and monitor services, deploy applications using stacks, and perform various administrative tasks.</p> </li> </ol> <p>By following these steps, you can set up and use Docker Swarm mode with Portainer to manage your containerized applications at scale. Make sure to consult the official Portainer documentation for more detailed instructions and best practices.</p> <pre><code>server {\n    listen 80;\n    server_name generic.com.np;\n\n    location / {\n        proxy_pass http://&lt;container-ip&gt;:&lt;container-port&gt;;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"research/docker/#jenkins","title":"Jenkins","text":"Abstract TheoryPractical <p>Docker Pull Command</p> bash<pre><code>$ docker pull jenkins/jenkins\n</code></pre> <p>After pulling the Docker Jenkins image onto your Linux server, you can start using Jenkins by running the container and accessing its web interface. Here's how you can do it:</p> <ol> <li> <p>Run Jenkins Container:</p> <p>Use the following command to start the Jenkins container:</p> title<pre><code>docker run -d -p 8080:8080 -p 50000:50000 --name jenkins jenkins/jenkins:lts\n</code></pre> <p>Explanation of options:</p> <ul> <li> <p><code>-d</code>: Run the container in detached mode (in the background).</p> </li> <li> <p><code>-p 8080:8080 -p 50000:50000</code>: Map port 8080 on the host to port 8080 inside the container for accessing Jenkins web interface, and map port 50000 for Jenkins agent communication.</p> </li> <li> <p><code>--name jenkins</code>: Assign the name \"jenkins\" to the container.</p> </li> <li> <p><code>jenkins/jenkins:lts</code>: This specifies the Jenkins Docker image to use. In this case, we're using the LTS (Long-Term Support) version.</p> </li> </ul> </li> <li> <p>Access Jenkins Web Interface:</p> <p>Once the Jenkins container is running, you can access its web interface by opening a web browser and navigating to:</p> bash<pre><code>http://your_server_ip:8080\n</code></pre> <p>Replace <code>your_server_ip</code> with the <code>IP address</code> or <code>domain name</code> of your Linux server.</p> </li> <li> <p>Unlock Jenkins:</p> <p>When you access the Jenkins web interface for the first time, you'll be prompted to unlock Jenkins. To do this, you need to retrieve the initial admin password from the Jenkins container logs. Run the following command to view the logs:</p> <pre><code>docker logs jenkins\n</code></pre> <p>Look for the line containing \"Please use the following password to proceed to installation:\", and copy the provided password.</p> </li> <li> <p>Complete Jenkins Setup:</p> <p>Paste the copied password into the Jenkins web interface and click \"Continue\". Follow the on-screen instructions to complete the setup process, including installing recommended plugins.</p> </li> <li> <p>Create Admin User:</p> <p>After plugin installation, you'll be prompted to create an admin user. Provide the required information to create the admin user.</p> </li> <li> <p>Start Using Jenkins:</p> <p>Once you've completed the setup process, you can start using Jenkins to create and manage jobs, automate tasks, and perform continuous integration and continuous delivery (CI/CD) pipelines.</p> </li> </ol> <p>That's it! You've successfully pulled and started the Jenkins Docker container on your Linux server, and you can now begin configuring Jenkins for your development and deployment needs.</p>"},{"location":"research/docker/#docker-hub","title":"Docker Hub","text":"<p><code>Docker Hub</code> is to Docker what <code>GitHub</code> is to source code.</p> <p>You can think of Docker Hub as being like GitHub.</p> <p>It allows anyone to host its image online and share it publicly or keep it private. To share an image on Docker Hub, you need to do the following:</p> <ul> <li>Create an account on Docker Hub.</li> <li>Log in to the hub on your Docker host.</li> <li>Push your image.</li> </ul> <pre><code>$ docker login\nUsername: how2dock\nPassword:\nEmail: how2dock@gmail.com\nLogin Succeeded\n</code></pre> <ul> <li>Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</li> </ul>"},{"location":"research/docker/#docker-networking","title":"Docker Networking","text":"<p>As you build your distributed application, services that compose it will need to be able to communicate with each other. These services, running in containers, might be on a single host or on multiple hosts and even across data centers. Therefore container networking is a critical enabler of any Docker-based distributed application.</p>"},{"location":"research/docker/#downloading-the-first-docker-image","title":"Downloading the first Docker image","text":"<p>The Docker Registry is an application repository that hosts various applications, ranging from basic Linux images to advanced applications. The <code>docker pull</code> subcommand is used to download any number of images from the registry.</p> <pre><code>$ sudo docker pull hello-world\n</code></pre> <p>Once the images have been downloaded, they can be verified using the <code>docker images</code> subcommand, as shown here:</p> <pre><code>$ sudo docker images\n</code></pre>"},{"location":"research/docker/#running-the-first-docker-container","title":"Running the first Docker container","text":"<pre><code>$ docker run hello-world\n</code></pre> <p>Cool, isn't it? You have set up your first Docker container in no time. In the preceding example, the <code>docker run</code> subcommand has been used to create a container from the hello-world image.</p>"},{"location":"research/docker/#troubleshooting-docker-containers-or-sudo-service","title":"Troubleshooting Docker containers <code>or</code> sudo service","text":"<p>You can <code>stop</code>, <code>start</code>, and <code>restart</code> the service. For example, to restart it:</p> <pre><code>$ sudo service docker status\n$ sudo service docker restart\n</code></pre>"},{"location":"research/docker/#certbot-in-linux","title":"certbot in linux","text":"Abstract InstallationSSL Certificate with Certbot <pre><code># There is two ways you can download certbot\n# 1. with PIP\n# 2. with snapd\n\n# step1: Install snapd:\nsudo apt install snapd\n\n# step2: Ensure you have the latest snapd version installed:\nsudo snap install core; sudo snap refresh coreCopied!\n\n# step3: Install Certbot with snapd:\nsudo snap install --classic certbot\n\n# step4: Create a symlink to ensure Certbot runs:\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n</code></pre> <p>Create an SSL Certificate with Certbot</p> <pre><code># step1: Choose the best option for your needs.\n# Create SSL certs for all domains and configure redirects in the web server:\nsudo certbot --apache\nsudo certbot --nginx\n\n# Create SSL certs for a specified domain (recommended if you\u2019re using your system hostname):\nsudo certbot --apache -d example.com -d www.example.com\n\n# Only install SSL certs:\nsudo certbot certonly --apache\nsudo certbot certonly --nginx\n\n\n# step2: Enter an email address for renewal and security notices.\n# step3: Agree to the terms of service.\n# step4: Specify whether to receive emails from EFF.\n# step5: If prompted, choose whether to redirect HTTP traffic to HTTPS \u2013 1 (no redirect, no further changes to the server) or # 2 (redirect all HTTP requests to HTTPS).\n</code></pre> <ul> <li>How to Install Let\u2019s Encrypt SSL on Ubuntu with Certbot</li> <li>Install Let\u2019s Encrypt SSL Certificates using Certbot</li> </ul> <p>Solved</p> <ul> <li>Issue using certbot with nginx: stackoverflow</li> <li>Whaaaat Are AAAA Records in DNS? youtube</li> </ul> Docker Common Issue Solved Presentation <p>Docker</p> Docker: <code>Host</code> port vs <code>Container</code> port <p>What is left side of port ant right side of port in docker</p> <p>In Docker, when you expose ports for containers, you specify the port mappings using the <code>-p</code> flag or <code>--publish</code> flag when running a container. The syntax is typically <code>hostPort</code>:<code>containerPort</code>.</p> <ul> <li> <p>Left side (<code>hostPort</code>):</p> <p>This is the port on the host machine, the system where Docker is running. It is the port to which you can connect from outside the Docker container to access the services running within the container. If you specify a port on the left side, Docker will bind that port on the host system to the container port specified on the right side.</p> </li> <li> <p>Right side (<code>containerPort</code>):</p> <p>This is the port exposed within the Docker container. It is the port on which your application or service within the container is listening. When Docker starts the container, it will forward any traffic received on the host port (left side) to this port within the container.</p> </li> </ul> <p>For example, if you run a container with <code>-p 8080:80</code>, it means that port <code>80</code> inside the container will be accessible from port <code>8080</code> on the host machine. If you were to access <code>http://localhost:8080</code> on your host machine, Docker would forward that request to port <code>80</code> inside the container.</p> <p>This port mapping mechanism allows Docker containers to communicate with the outside world and for multiple containers to run on the same host without port conflicts.</p> Listen services running on specific port <code>:8000</code> <code>:9000</code> <pre><code># You can use the following commands to find out which processes are using these ports:\nsudo lsof -i :9000\nsudo lsof -i :8080\n</code></pre> <p>Once you identify the processes using these ports, you can decide whether to stop them or reconfigure them to use different ports. After ensuring that the ports are available, you can attempt to start the Nginx service again.</p> Last things you need to remeber in Docker Dind <p>Host os:</p> <ol> <li> <p>Add <code>Jenkins</code> user to the Docker group:</p> <p>On the host machine where Docker is installed, run the following command:</p> bash<pre><code>sudo usermod -aG docker jenkins\n</code></pre> <p>This command adds the Jenkins user to the docker group, granting it permission to interact with the Docker daemon.</p> </li> <li> <p>Ensure permissions on the Docker socket:</p> <p>The Docker daemon socket (<code>/var/run/docker.sock</code>) should be readable and writable by members of the docker group. You can check and     adjust the permissions if needed with the following command:</p> bash<pre><code>sudo chmod 666 /var/run/docker.sock\n</code></pre> </li> <li> <p>Restart Jenkins:</p> <p>Restart the Jenkins service to apply the changes:</p> bash<pre><code>sudo systemctl restart jenkins\n# or\ndocker restart &lt;container_id or container_name&gt;\n</code></pre> </li> </ol> <p>With these changes, the Jenkins user should now have the necessary permissions to execute Docker commands, and <code>you should no longer encounter permission denied errors when running Docker commands from Jenkins job scripts</code>. Make sure to test your Jenkins job again after applying these changes.</p>"},{"location":"research/docker/#docker-common-issue-solved","title":"Docker Common Issue Solved","text":"Share Docker sockDocker Port Mappingstep1:Final Solution <p>Connect: To share Docker daemon from the host with jenkins nodes</p> <p>To run Docker commands inside Jenkins, especially within a Jenkins instance running inside a Docker container, you have a couple of options:</p> <ol> <li> <p>Docker Socket Binding:</p> bash<pre><code>$ docker run -v /var/run/docker.sock:/var/run/docker.sock &lt;jenkins-image:tag&gt;\n</code></pre> </li> <li> <p>Docker-in-Docker (DinD):</p> bash<pre><code>$ docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock docker:dind\n</code></pre> </li> </ol> <p>How to fix docker: Got permission denied while trying to connect to the Docker daemon socket</p> <p>After an search hour this following solution finaly worked :</p> bash<pre><code>$ sudo chmod 666 /var/run/docker.sock\n</code></pre> <ul> <li>Got permission denied while trying to connect to the Docker daemon socket</li> </ul> <p></p> <p>what is differnce between 8080:80 and 8080:8080. is there any real difference</p> <ul> <li>8080:80</li> </ul> <p>This notation maps port 80 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 80 inside the Docker container. This is useful when you want to expose a service running inside the container on a standard HTTP port (80) of the host machine.</p> <ul> <li>8080:8080</li> </ul> <p>This notation maps port 8080 of the container to port 8080 of the host. It means that any traffic directed at port 8080 on the host machine will be forwarded to port 8080 inside the Docker container. This is useful when you want to expose a service running inside the container on a non-standard port (8080) of the host machine.</p> <p>In both cases, the first port number (8080) specifies the port on the host machine, and the second port number (80 or 8080) specifies the port inside the Docker container. The port on the host machine is what you use to access the service running inside the container.</p> <p>So, the difference lies in which port on the host machine you want to use to access the service and which port inside the container the service is listening on.</p> <p>so why the jenkins not running on 8080:80 but running on 8080:8080</p> <p>If Jenkins is running inside a Docker container and you've mapped port 8080:8080 but not <code>8080:80</code>, it means that Jenkins is configured to listen for incoming connections on port 8080 inside the container.</p> <p>When you map <code>8080:8080</code>, it indicates that traffic directed to port <code>8080</code> on the host machine should be forwarded to port <code>8080</code> inside the Docker container where Jenkins is running. This setup expects Jenkins to be listening for connections on port <code>8080</code> inside the container.</p> <p>If Jenkins is running on port <code>8080</code> inside the container, mapping <code>8080:8080</code> correctly exposes Jenkins to external traffic on port <code>8080</code> of the host machine.</p> <p>On the other hand, if you were to map <code>8080:80</code>, it would expect Jenkins to be configured to listen on port <code>80</code> inside the container. By default, Jenkins typically runs on port 8080, so mapping <code>8080:80</code> wouldn't work unless you specifically configured Jenkins to listen on port 80 inside the container.</p> <p>Therefore, mapping <code>8080:8080</code> correctly exposes Jenkins running on port <code>8080</code> inside the container to external traffic on port <code>8080</code> of the host machine, which is why it works in your case.</p> <p>Issue Solved</p> <p>Step-by-step instructions to create a Docker image for Jenkins with Docker installed inside it and then run a Jenkins container with the Docker socket mounted from the host:</p> <ol> <li> <p>Create a Dockerfile:</p> <p>Create a file named <code>Dockerfile</code> with the following content:</p> <pre><code>FROM jenkins/jenkins:lts\n\nUSER root\n\n# Install Docker prerequisites\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common &amp;&amp; \\\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -\n\n# Install Docker\nRUN curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; \\\n    sh get-docker.sh\n\n# Add Jenkins user to Docker group\nRUN usermod -aG docker jenkins\n\nUSER jenkins\n</code></pre> <p>This Dockerfile installs Docker inside the Jenkins container and adds the Jenkins user to the Docker group.</p> </li> <li> <p>Build the Docker Image:</p> <p>Open a terminal and navigate to the directory containing the <code>Dockerfile</code>. Then, run the following command to build the Docker image:</p> <pre><code>docker build -t my-jenkins .\n</code></pre> <p>This command builds the Docker image using the Dockerfile and tags it with the name <code>my-jenkins</code>.</p> </li> <li> <p>Run the Jenkins Container:</p> <p>After the Docker image is built, you can run a Jenkins container with the Docker socket mounted from the host:</p> bash<pre><code>docker run -d \\\n--name jenkins \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-p 8080:8080 -p 50000:50000 \\\nmy-jenkins\n</code></pre> <p>This command starts a Jenkins container named <code>jenkins</code>. It mounts the Docker socket (<code>/var/run/docker.sock</code>) from the host into the container and exposes the Jenkins web interface on port <code>8080</code> and the Jenkins agent communication port on port <code>50000</code>.</p> </li> </ol> <p>With these steps, you have a Jenkins container running with Docker installed inside it, and the Docker socket mounted from the host. This setup allows the Jenkins container to communicate with the Docker daemon on the host and perform Docker-related tasks within Jenkins pipelines or jobs.</p> <p>Docker Socket bind with docker command</p> <pre><code>docker run -d -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker -v /var/custom_volume/jenkins/:/var/jenkins_home/ --privileged --name b_jenkins 6b7d79a0229e\n</code></pre> <ul> <li>Docker cli excutable file not found</li> <li>docker not found in jenkins pipeline</li> <li>docker not found in jenkins pipeline 2</li> <li>docker: ibm</li> <li>what is docker and why it is darn popular?</li> <li>docker introduction aws</li> </ul>"},{"location":"research/docker/#docker-presentation","title":"Docker Presentation","text":""},{"location":"research/docker/#docker-architecture","title":"Docker Architecture","text":"<p>cgroups &amp; namespaces The backbone of the Docker technology are cgroups (short for control groups) and kernel namespaces.</p> <p>With <code>cgroups</code>, the Linux operating system can easily manage and monitor resource allocation for a given process and set resource limits, like CPU, memory, and network limits.</p> <p><code>Namespaces</code> are helpful in isolating process groups from each other. There are six default namespaces in Linux: <code>mnt</code>, <code>IPC</code>, <code>net</code>, <code>usr</code>, <code>pid</code>, and <code>uts</code>. Each container will have its own namespace and processes running inside that namespace, and will not have access to anything outside its namespace.</p> <p></p>"},{"location":"research/docker/#docker-steps","title":"Docker Steps","text":""},{"location":"research/docker/#docker-images_1","title":"Docker Images","text":"<p>Where Are Docker Images Stored on the Host Machine? </p> <pre><code>$ docker info\n</code></pre> <p>Now, typically there are two categories of Docker Images</p> <ul> <li>Official Base Images</li> </ul> <p>that are pre-built and can be downloaded or pulled from registries, and</p> <ul> <li>Customized Images</li> </ul> <p>that use base images to create application-specific environments.</p> <p></p> <p></p>"},{"location":"research/docker/#docker-container_1","title":"Docker Container","text":"<p>The major difference between a <code>container</code> and an <code>image</code> is the top writable layer.</p> <p></p> <p>All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.</p> <p>When the container is stopped writable layer remains, and if container was removed writable layer is deleted. So that\u2019s why people say, containers are stateless.</p> <p></p>"},{"location":"research/docker/#docker-volume_1","title":"Docker Volume","text":"<p>How to Handle Container Storage</p> <p>To make data of any container persistent and accessible outside of the container, Docker provides two options:</p> <ul> <li>Volumes</li> <li>Bind mounts</li> </ul> <p></p>"},{"location":"research/docker/#docker-port-mapping","title":"Docker Port Mapping","text":""},{"location":"research/docker/#docker-vs-docker-compose-vs-docker-swarm","title":"Docker vs Docker Compose vs Docker Swarm","text":""},{"location":"research/docker/#docker-swarm","title":"Docker Swarm","text":""},{"location":"research/docker/#practical-guide-jenkins","title":"Practical Guide Jenkins","text":"<p>Using Statefull persistant volume </p> <p> </p> <p>Jenkins Tutorial  </p> <p> </p>"},{"location":"research/docker/#reference","title":"Reference","text":"<p>Linux (<code>Ubuntu</code>)</p> <ul> <li>Install Docker Desktop on Ubuntu</li> <li>how-to-install-docker-on-ubuntu-22-04-20-04 :UPDATED</li> <li>pass tutorial</li> <li>3 Best Ways to Run Docker in Docker Container</li> </ul> <p>Blog</p> <ul> <li>What is a Docker Swarm?</li> <li>Key Differences Between Docker and Docker Swarm </li> </ul> <p>Youtube</p> <ul> <li>Docker Swarm: Simplilearn</li> <li>Docker Swarm Step by Step: Intellipaat</li> <li>Docker vs Kubernetes vs Docker Swarm: Techworld with Nana</li> <li>The EASIEST Docker Swarm Tutorial</li> <li>Docker Compose Tutorial: Programming with Mosh</li> <li>Become a Docker Swarm Expert in just 20 minutes</li> </ul> <p>tmux</p> <ul> <li>tmux resizing pane</li> </ul> <p>Misc <code>youtube</code></p> <ul> <li>what is podman vs docker</li> </ul> <p>Book - Docker Cookbook by S\u00e9bastien Goasguen, pg: 55</p>"},{"location":"research/js-scientific-notation/","title":"JS Scientific Notation","text":""},{"location":"research/js-scientific-notation/#js-scientific-notation","title":"JS Scientific Notation","text":"<p>In JavaScript, scientific notation is typically used for numbers that are either very large or very small. However, JavaScript will use scientific notation for any number that exceeds a certain threshold in size (either too large or too small) due to the way numbers are represented in the language.</p> <p>JavaScript uses floating-point numbers (specifically IEEE 754 double-precision), which has a limit to how large or small a number can be without switching to scientific notation. The threshold depends on the value of the number. Here are some general guidelines:</p>"},{"location":"research/js-scientific-notation/#threshold-for-scientific-notation-in-javascript","title":"Threshold for Scientific Notation in JavaScript","text":"<ol> <li> <p>Large numbers:</p> <ul> <li>JavaScript will automatically use scientific notation for numbers greater than or equal to <code>1e+21</code>. Any number larger than that will be represented in scientific notation.</li> <li>For example: <code>10000000000000000000000</code> will be displayed as <code>1e+22</code>.</li> </ul> </li> <li> <p>Small numbers:</p> <ul> <li>Similarly, for very small numbers (close to zero but negative), JavaScript will use scientific notation for numbers less than or equal to <code>1e-6</code>.</li> <li>For example: <code>0.000001</code> will be represented as <code>1e-6</code>.</li> </ul> </li> </ol>"},{"location":"research/js-scientific-notation/#examples","title":"Examples:","text":"<ul> <li>Large Numbers:</li> </ul> <pre><code>let largeNumber = 1e22; // Scientific notation for 1 followed by 22 zeros\nconsole.log(largeNumber);  // Outputs: 1e+22\n</code></pre> <ul> <li>Small Numbers</li> </ul> <pre><code>  let smallNumber = 0.000001; // 1e-6 is the scientific notation for this value\n  console.log(smallNumber);  // Outputs: 1e-6\n</code></pre>"},{"location":"research/js-scientific-notation/#when-does-javascript-switch-to-scientific-notation","title":"When Does JavaScript Switch to Scientific Notation?","text":"<ol> <li> <p>For numbers greater than or equal to <code>1e21</code> or smaller than or equal to <code>1e-6</code>, JavaScript will represent the numbers in scientific notation.</p> <pre><code>let num = 10000000000000000000000; // 1e+22\nconsole.log(num); // Outputs: 1e+22\n\nlet smallNum = 0.0000001; // 1e-7\nconsole.log(smallNum); // Outputs: 1e-7\n</code></pre> </li> <li> <p>Numbers within a \"normal\" range (neither extremely large nor extremely small) will not be represented in scientific notation. For instance:</p> <pre><code>let normalNumber = 123456;\nconsole.log(normalNumber); // Outputs: 123456 (not scientific notation)\n</code></pre> </li> </ol>"},{"location":"research/js-scientific-notation/#floating-point-precision","title":"Floating-Point Precision:","text":"<p>The use of scientific notation happens because of floating-point precision. When a number gets too large or small, JavaScript can no longer represent it fully with the available precision, so it switches to scientific notation to manage the value more efficiently.</p>"},{"location":"research/js-scientific-notation/#conclusion","title":"Conclusion:","text":"<ul> <li>Large numbers (\u2265 <code>1e+21</code>) will automatically be displayed in scientific notation.</li> <li>Small numbers (\u2264 <code>1e-6</code>) will also be displayed in scientific notation.</li> </ul> <p>If you're handling numbers within typical ranges (like <code>1</code> to <code>100000</code>), they won't be converted to scientific notation. Only when you exceed those bounds (very large or very small values), JavaScript will display numbers in scientific notation.</p>"},{"location":"research/license-doc/","title":"License","text":""},{"location":"research/license-doc/#overview","title":"Overview","text":"<p>For a web application, the MIT License is generally a great choice because it\u2019s simple, permissive, and allows for easy modification and use of your code, even in commercial applications.</p> <p>In one line:</p> <ul> <li>MIT License: Allows anyone to use, modify, and distribute your code with minimal restrictions, as long as they include the original license and copyright notice.</li> </ul> <p>This makes it ideal for most web applications unless you need specific patent protection (then choose Apache 2.0) or want to enforce open-source contributions (then choose GPL).</p>"},{"location":"research/license-doc/#node-version","title":"Node Version","text":"<p>To list all the available Node.js versions online without downloading them using nvm (Node Version Manager), you can run the following command:</p> InstallationExplanation <pre><code># List all the versions\nnvm ls-remote\n\n# Only list the lts version\nnvm ls-remote --lts\n</code></pre> <ul> <li>nvm ls-remote: This command fetches and displays all the Node.js versions available for installation from the official Node.js repository. It doesn\u2019t download anything; it only shows the available versions you can install.</li> </ul> <p>This will output a long list of versions, including the latest stable version and LTS (Long Term Support) versions. You can scroll through the list or use additional filters to narrow it down (like searching for specific version ranges).</p>"},{"location":"research/license-doc/#codename-in-nodejs-is-inspired-by-periodic-table","title":"Codename in <code>Node.js</code> is inspired by periodic table","text":"<p>The process of selecting codenames for Node.js LTS (Long Term Support) versions is inspired by the periodic table of elements. The codenames are taken from elements, and they follow a <code>specific naming convention</code> in alphabetical order.</p> Success <p>The most important thing to remember is that <code>Node.js</code> LTS codenames are assigned alphabetically from elements on the periodic table, but the selection process is flexible, and sometimes elements are chosen for practical reasons rather than strict alphabetical order.</p>"},{"location":"research/license-doc/#necessay-package-for-react-for-project","title":"Necessay Package for react for project","text":"<p>When developing a React project with Redux Toolkit (RTK), you'll need to install the core libraries for both React and Redux, along with some additional utilities that help with state management and the development process.</p> <p>Here's a list of the necessary packages you should install:</p>"},{"location":"research/license-doc/#1-react-and-react-dom","title":"1. React and React DOM","text":"<p>Make sure you have React and ReactDOM installed, if you haven't already:</p> <pre><code>npm install react react-dom\n</code></pre>"},{"location":"research/license-doc/#2-redux-toolkit-rtk","title":"2. Redux Toolkit (RTK)","text":"<p>Redux Toolkit simplifies Redux usage and is the standard for Redux state management in modern React apps:</p> <pre><code>npm install @reduxjs/toolkit\n</code></pre>"},{"location":"research/license-doc/#3-react-redux","title":"3. React-Redux","text":"<p>The official bindings for React and Redux. This connects your Redux store to your React components:</p> <pre><code>npm install react-redux\n</code></pre>"},{"location":"research/license-doc/#4-optional-redux-devtools-extension-for-development","title":"4. Optional: Redux DevTools Extension (for development)","text":"<p>Redux DevTools is a powerful tool that helps with debugging Redux states. You can install it in development for better debugging:</p> <pre><code>npm install redux-devtools-extension\n</code></pre> <p>If you're using the <code>configureStore</code> method from Redux Toolkit, the Redux DevTools extension will work out-of-the-box, but you may need to adjust configurations in the development environment.</p>"},{"location":"research/license-doc/#5-additional-optional-libraries","title":"5. Additional (Optional) Libraries","text":"<p>Depending on your needs, you might want to install some additional libraries:</p> <ul> <li>@reduxjs/toolkit-query: If you're planning to use RTK Query for data fetching and caching.</li> </ul> <pre><code>npm install @reduxjs/toolkit\n</code></pre> <ul> <li>TypeScript (if you're using TypeScript in your project):</li> </ul> <pre><code>npm install typescript @types/react @types/react-dom\n</code></pre> <ul> <li>Axios or other HTTP clients (if you're using them to make API requests):</li> </ul> <pre><code>npm install axios\n</code></pre>"},{"location":"research/license-doc/#example-of-installing-all-core-packages","title":"Example of Installing All Core Packages","text":"<pre><code>npm install react react-dom @reduxjs/toolkit react-redux redux-devtools-extension\n</code></pre>"},{"location":"research/license-doc/#should-we-use-rtk-query","title":"Should we use rtk query","text":"<p>No, you don't need to use RTK Query to use Redux Toolkit, but it's highly recommended if you're working with data fetching or server-side communication.</p> Here's a breakdown:When to use each:Example comparison:Conclusion: <p>1. Redux Toolkit:</p> <ul> <li>At its core, Redux Toolkit (RTK) is a set of utilities to make Redux easier to use. It provides utilities like <code>configureStore</code>, <code>createSlice</code>, and <code>createAsyncThunk</code> to simplify Redux setup and management.</li> <li>With just Redux Toolkit, you can manually manage state, actions, and reducers. You can fetch data using <code>createAsyncThunk</code>, but you\u2019d need to write some boilerplate code for managing loading, success, and error states.</li> </ul> <p>2. RTK Query:</p> <ul> <li>RTK Query is a data fetching and caching tool built specifically into Redux Toolkit. It abstracts much of the complexity involved in fetching data, caching it, and managing server states (like loading, error, etc.).</li> <li> <p>It integrates seamlessly with Redux, and helps reduce the amount of manual code you'd need to write for API requests. It handles things like:</p> <ul> <li>Caching responses.</li> <li>Automatically refetching data.</li> <li>Normalizing the data.</li> <li>Managing loading and error states.</li> </ul> </li> </ul> <p>Use Redux Toolkit alone (with <code>createSlice</code>, <code>createAsyncThunk</code>, etc.) if:</p> <ul> <li>You want more control over your state management and don\u2019t need complex API handling.</li> <li>You\u2019re managing more custom state transitions or complex application logic.</li> </ul> <p>Use RTK Query if:</p> <ul> <li>Your app involves frequent or complex interactions with a backend API.</li> <li>You want automatic caching, refetching, and state management for API requests out of the box.</li> <li>You want to simplify the process of handling loading, success, and error states related to network requests.</li> </ul> <ul> <li> <p>Without RTK Query (using <code>createAsyncThunk</code> and <code>createSlice</code>):</p> <pre><code>// src/slices/userSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchUser = createAsyncThunk('user/fetchUser', async (userId) =&gt; {\n    const response = await fetch(`/api/users/${userId}`);\n    return response.json();\n});\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState: { user: null, status: 'idle', error: null },\n    reducers: {},\n    extraReducers: (builder) =&gt; {\n        builder\n        .addCase(fetchUser.pending, (state) =&gt; {\n            state.status = 'loading';\n        })\n        .addCase(fetchUser.fulfilled, (state, action) =&gt; {\n            state.status = 'succeeded';\n            state.user = action.payload;\n        })\n        .addCase(fetchUser.rejected, (state, action) =&gt; {\n            state.status = 'failed';\n            state.error = action.error.message;\n        });\n    },\n});\n\nexport default userSlice.reducer;\n</code></pre> </li> <li> <p>With RTK Query:</p> <pre><code>// src/services/userApi.js\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nexport const userApi = createApi({\n    reducerPath: 'userApi',\n    baseQuery: fetchBaseQuery({ baseUrl: '/api' }),\n    endpoints: (builder) =&gt; ({\n        getUser: builder.query({\n            query: (userId) =&gt; `users/${userId}`,\n        }),\n    }),\n});\n\nexport const { useGetUserQuery } = userApi;\n\n// In the store\nimport { configureStore } from '@reduxjs/toolkit';\nimport { userApi } from './services/userApi';\n\nconst store = configureStore({\n    reducer: {\n        [userApi.reducerPath]: userApi.reducer,\n    },\n    middleware: (getDefaultMiddleware) =&gt;\n        getDefaultMiddleware().concat(userApi.middleware),\n});\n</code></pre> </li> </ul> <p>With RTK Query, you get a <code>useGetUserQuery</code> hook that automatically handles loading, success, and error states for you.</p> <ul> <li>RTK Query is an optional but powerful feature in Redux Toolkit, making data fetching much easier, especially for APIs.</li> <li>If you're building an app with complex API interactions or want to save time on managing server-side data in Redux, RTK Query is a great tool to use.</li> </ul> <ul> <li>Redux Query Official</li> <li>RTK Query For Beginners</li> </ul>"},{"location":"research/nx-commands/","title":"NX Commands","text":""},{"location":"research/nx-commands/#nx-commands","title":"NX Commands","text":"<pre><code>npm install -g nx\n\nnx --version\n\nwhich nx  # macOS/Linux\nwhere nx  # Windows\n</code></pre> <p>The Nx CLI provides many commands. They are organized here into commands that:</p> <ul> <li>Modify Code</li> <li>Run Tasks</li> <li>Display Information</li> <li>Integrate with Nx Cloud</li> </ul> Modify Code <pre><code># init - Adds Nx to any type of workspace. It installs nx, creates an nx.json configuration file and optionally sets up remote caching.\nnx init\n\n# add - Install a plugin and initialize it.\nnx add my-plugin\n\n# generate - Runs a generator that creates and/or modifies files based on a generator from a plugin.\nnx generate @nx/react:component libs/my-lib/src/lib/my-component\n</code></pre>"},{"location":"research/nx-commands/#reference","title":"Reference","text":"<ul> <li>Official Commands: nx commands</li> <li>Intro</li> <li>Installation globally</li> </ul>"},{"location":"research/signalr-transport/","title":"Signalr-transport","text":""},{"location":"research/signalr-transport/#signalr-transport","title":"SignalR Transport","text":"<p>When connecting to a SignalR hub from a React application, SignalR can use various transport types, depending on what the client and server support and the network conditions. The transport type is responsible for how data is sent between the client (React app) and the SignalR server.</p> <p>SignalR supports several transport types:</p> <ol> <li> <p>WebSockets:</p> <ul> <li>This is the most preferred and efficient transport method for SignalR. WebSockets allow full-duplex communication between the client and the server over a single, persistent connection.</li> <li>It is supported in most modern browsers and provides low-latency, real-time communication.</li> </ul> </li> <li> <p>Server-Sent Events (SSE):</p> <ul> <li>If WebSockets are not available (for example, due to network restrictions or older browser support), SignalR can fall back to using Server-Sent Events.</li> <li>SSE is a one-way communication channel from the server to the client, where the server sends updates to the client.</li> </ul> </li> <li> <p>Long Polling:</p> <ul> <li>As a last resort, if neither WebSockets nor SSE is available, SignalR can use long polling.</li> <li>In long polling, the client sends an HTTP request to the server, and the server holds the request open until there is new data to send back. - Once the response is sent, the client immediately sends another request to keep the connection alive</li> </ul> </li> </ol>"},{"location":"research/signalr-transport/#in-a-react-app","title":"In a React app:","text":"<p>When you use SignalR in a React app, you typically use the SignalR JavaScript client library. By default, it automatically selects the best transport method, but you can also configure it manually if you want to specify a particular transport.</p> <p>Example of configuring transport manually in React:</p> <pre><code>import { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\n\nconst connection = new HubConnectionBuilder()\n  .withUrl(\"/your-hub-endpoint\", {\n    transport: signalR.HttpTransportType.WebSockets, // Manually setting transport type\n  })\n  .configureLogging(LogLevel.Information)\n  .build();\n\nconnection.start().catch((err) =&gt; console.error(err));\n</code></pre> <p>This code ensures that SignalR uses WebSockets specifically, but if WebSockets are unavailable, it will fallback to another transport automatically.</p> <p>transport: signalR.HttpTransportType.WebSockets do we need this or not</p> <p>No, you do not necessarily need to specify the transport type manually in most cases when using SignalR in your React app.</p> <p>By default, SignalR will automatically select the best available transport method (WebSockets, Server-Sent Events, or Long Polling) based on what the client and server support. So, if you're okay with SignalR choosing the transport for you, you don't need to specify it.</p> <p>However, if you want to force a specific transport (like WebSockets), you can explicitly set it, as shown in the example. For example:</p> <pre><code>import { HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\n\nconst connection = new HubConnectionBuilder()\n  .withUrl(\"/your-hub-endpoint\", {\n    transport: signalR.HttpTransportType.WebSockets, // force WebSockets transport\n  })\n  .configureLogging(LogLevel.Information)\n  .build();\n\nconnection.start().catch((err) =&gt; console.error(err));\n</code></pre> To Summarize <ul> <li>No, you don't need to specify the transport type if you're okay with the default behavior.</li> <li>Yes, you can specify the transport type (e.g., WebSockets) if you have specific requirements or want to enforce a particular transport.</li> </ul> <p>In general, for modern browsers and environments, WebSockets should be the default and preferred transport method, so unless you have a specific reason to control this, you can leave it out and let SignalR handle the transport selection automaticall</p>"},{"location":"research/signalr-transport/#standard-polling-time-or-interval","title":"Standard Polling Time <code>or</code> Interval","text":"<p>The standard polling time (or interval) depends on the use case, the nature of the data being fetched, and how critical it is to have real-time updates. There's no one-size-fits-all value, but here are some general guidelines for choosing a polling interval:</p>"},{"location":"research/signalr-transport/#common-polling-intervals","title":"Common Polling Intervals:","text":"<ol> <li> <p>Short Polling Interval (1\u201310 seconds):</p> <ul> <li>Use case: Real-time applications, such as live updates, chat apps, live scores, or price monitoring.</li> <li>Example: Stock prices, sports scores, chat messages.</li> <li>Recommended interval: 1\u201310 seconds.</li> <li>Consideration: More frequent polling can lead to higher server load and increased bandwidth usage, so it may not be suitable for high-traffic apps unless necessary.</li> </ul> </li> <li> <p>Medium Polling Interval (30 seconds \u2013 1 minute):</p> <ul> <li>Use case: Applications that don't need near-instant updates but still require periodic refreshes, such as news updates, social media feeds, or email inbox syncing.</li> <li>Example: Checking for new emails, syncing social media posts.</li> <li>Recommended interval: 30 seconds to 1 minute.</li> <li>Consideration: Reduces the server load compared to short intervals but still offers relatively timely updates.</li> </ul> </li> <li> <p>Long Polling Interval (5 minutes \u2013 30 minutes):</p> <ul> <li>Use case: Applications where updates are less frequent or not critical to be real-time, such as dashboard metrics, data syncs, or system health checks.</li> <li>Example: Reporting dashboards, monitoring systems, syncing non-critical data.</li> <li>Recommended interval: 5 minutes to 30 minutes.</li> <li>Consideration: Great for reducing server load, but you may not get instant updates if the data changes frequently.</li> </ul> </li> <li> <p>Very Long Polling Interval (1 hour or more):</p> <ul> <li>Use case: Background tasks or batch processing where real-time updates are unnecessary, such as syncing large datasets or periodic reports.</li> <li>Example: Syncing a large data store or nightly batch processes.</li> <li>Recommended interval: 1 hour or more.</li> <li>Consideration: Rarely needed for most applications, unless dealing with very infrequent updates or long-running processes.</li> </ul> </li> </ol>"},{"location":"research/signalr-transport/#key-factors-to-consider","title":"Key Factors to Consider:","text":"<ul> <li>Data Freshness: If you need real-time or near-real-time data, choose a shorter interval. For less time-sensitive data, longer intervals might suffice.</li> <li>Server Load: More frequent polling can put a strain on the server. For high-traffic applications, balance the need for freshness with server performance.</li> <li>Network Traffic: Frequent polling increases network traffic. Make sure your system can handle the increased load without issues.</li> <li>User Experience: Polling intervals should be chosen based on the expected user experience. Too frequent polling can lead to delays or slowdowns; too infrequent polling can lead to stale data.</li> </ul>"},{"location":"research/signalr-transport/#example-use-cases-with-suggested-polling-intervals","title":"Example Use Cases with Suggested Polling Intervals:","text":"<ul> <li>Real-time notifications (e.g., chat): 1\u201310 seconds.</li> <li>Live sports scores: 5\u201310 seconds.</li> <li>Stock price updates: 5\u201310 seconds.</li> <li>Weather updates: 30 minutes to 1 hour.</li> <li>News feeds: 30 seconds to 5 minutes.</li> <li>Health/metrics dashboards: 1\u20135 minutes.</li> <li>Email inbox sync: 5 minutes or more.</li> </ul>"},{"location":"research/signalr-transport/#final-advice","title":"Final Advice:","text":"<p>For most applications, starting with 30 seconds to 1 minute is a good middle ground. You can adjust the interval based on server capacity, network traffic, and the desired freshness of the data. If you're dealing with large volumes of traffic or users, it's worth considering server-side push mechanisms (such as WebSockets or Server-Sent Events) instead of polling to reduce unnecessary load.</p>"},{"location":"research/ideas/github-copilot/","title":"Github Co-Pilot","text":"Action Command <code>Ctrl+Alt+I</code> Show &amp; Hide Github Copilot in Vs Code"},{"location":"research/ideas/github-copilot/#enablingdisabling-github-copilot","title":"Enabling/Disabling GitHub Copilot:","text":"<ol> <li> <p>Using Command Palette: \u2705</p> <ul> <li>Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on macOS) to open the Command Palette.</li> <li>Type <code>GitHub Copilot: Enable</code> and press <code>Enter</code>. This will enable GitHub Copilot if it's not already enabled.</li> </ul> </li> <li> <p>Through Settings:</p> <ul> <li>Open the settings (<code>Ctrl+,</code> or <code>Cmd+,</code> on macOS).</li> <li>Search for <code>GitHub Copilot</code> and uncheck or disable the <code>GitHub Copilot: Enable</code> setting.</li> </ul> </li> <li> <p>GitHub Copilot Sidebar:</p> <ul> <li>Click on the GitHub Copilot icon in the activity bar and disable it through the settings menu that appears.</li> </ul> </li> </ol> <ul> <li>GitHub Copilot in VS Code cheat sheet</li> </ul>"},{"location":"research/ideas/locally-running-ai/","title":"AI","text":""},{"location":"research/ideas/locally-running-ai/#locally-running-ai","title":"Locally Running AI","text":"<ul> <li>Download Ollama</li> <li>ollama, deepseek-r1, 8b</li> </ul>"},{"location":"research/ideas/locally-running-ai/#circular-dependency-and-recursion","title":"Circular Dependency and Recursion","text":"<p>Circular Dependency:</p> <ul> <li> <p>A circular dependency occurs when two or more modules, classes, or components depend on each other directly or indirectly, creating a cycle.</p> </li> <li> <p>For example, if <code>module A</code> depends on <code>module B</code>, and <code>module B</code> depends on <code>module A</code>, you have a circular dependency. This can make it difficult for the program to resolve dependencies because it ends up in an infinite loop of dependencies.</p> </li> </ul> <p>Recursion:</p> <ul> <li>Recursion is a programming technique where a function calls itself in order to solve a problem. It's commonly used for problems that can be broken down into smaller, similar sub-problems (e.g., tree traversals, factorials, etc.).</li> </ul> <p>For example, using a <code>pub/sub</code> model or an <code>observer</code> pattern can decouple components and help avoid cycles.</p> Key Differences <ol> <li> <p>Nature:</p> <ul> <li>Circular dependency is a structural problem in code (i.e., how different parts/modules of the program depend on each other).</li> <li>Recursion is a technique for solving problems by breaking them into smaller versions of the same problem.</li> </ul> </li> <li> <p>Outcome:</p> <ul> <li>Circular dependency often leads to errors or difficulties in the program\u2019s initialization or execution because of the cyclic references.</li> <li>Recursion leads to repeated function calls that can solve complex problems but must be handled carefully to avoid infinite recursion.</li> </ul> </li> <li> <p>Resolution:</p> <ul> <li>Circular dependencies can often be resolved by restructuring code or breaking the circular reference (e.g., by using dependency injection or introducing intermediate modules).</li> <li>Recursion can be resolved by ensuring there's a base case to prevent infinite recursion, or by switching to an iterative approach if recursion depth becomes an issue.</li> </ul> </li> </ol> <p>So, they are not the same thing. Circular dependencies are a problem with how parts of your program depend on each other, while recursion is a method of problem-solving that involves functions calling themselves.</p>"},{"location":"research/ideas/locally-running-ai/#reference","title":"Reference","text":"<ul> <li>Youtube: Learn DeepSeek-R1 in 30 Minutes: Watch BEFORE It's TOO LATE!</li> </ul>"},{"location":"research/ideas/micro-frontend/","title":"Micro Frontend","text":""},{"location":"research/ideas/micro-frontend/#micro-frontend","title":"Micro Frontend","text":"<p>nx.dev</p> <pre><code># pnpm\nnpx create-nx-workspace --pm pnpm\n\n# npm\nnpx create-nx-workspace\n</code></pre> <p></p> <p></p>"},{"location":"research/ideas/micro-frontend/#questions","title":"Questions","text":"<p><code>pnpm nx serve &lt;app-name&gt;</code> what is app-name is it inside the apps folder</p>"},{"location":"research/ideas/micro-frontend/#app-name","title":"app-name","text":"<p>Yes, you're correct! The <code>&lt;app-name&gt;</code> refers to the name of the application inside the <code>apps</code> folder in your Nx workspace.</p> <p>When you create a workspace with npx create-nx-workspace@latest, it typically generates an initial application (e.g., a React app, Angular app, etc.), and this application is placed in the apps directory.</p> <p>Here's how to find the <code>&lt;app-name&gt;</code>:</p> <ol> <li> <p>Go to the <code>apps</code> folder in your workspace:</p> <pre><code>cd apps\n</code></pre> </li> <li> <p>List the contents of the apps folder. You'll see a folder corresponding to the name of the app you created when setting up the workspace. For example:</p> <pre><code>ls\n</code></pre> <p>This could list something like:</p> <pre><code>-   `my-app` (if it's a React or Angular app)\n-   `my-first-app` (if that's the name you used during setup)\n</code></pre> </li> <li> <p>Use that app name with <code>pnpm nx serve</code>: If the app name inside the <code>apps</code> folder is <code>my-app</code>, you would run:</p> <pre><code>pnpm nx serve my-app\n</code></pre> </li> </ol> Additional Tip <p>If you\u2019re unsure about the app name, you can also check the <code>angular.json</code> (for Angular apps) or <code>workspace.json</code> or <code>nx.json</code> to verify the app's name and configuration.</p>"},{"location":"research/ideas/micro-frontend/#how-to-add-another-apps","title":"how to add another apps","text":"<p>To add another app to your Nx workspace, you can use the nx CLI to generate a new application. Nx provides a set of generators that allow you to create apps (and libraries) based on the framework you're using (React, Angular, Node, etc.).</p> <p>Here's how you can add another app:</p> <p>Step 1: Add a New Application</p> <ol> <li>Run the Nx generate command for your desired app type (React, Angular, etc.). You'll need to know what kind of app you want to create.</li> </ol> Example: Adding a React app <p>To add a new React app, run:</p> <pre><code>pnpm nx generate @nrwl/react:application my-second-app\n</code></pre> Example: Adding an Angular app <p>To add a new Angular app, run:</p> <pre><code>pnpm nx generate @nrwl/angular:application my-second-app\n</code></pre> <p>Replace <code>my-second-app</code> with the name of the new app you want to create.</p> <p>Step 2: Verify the New App is Added</p> <p>After running the command, you should see a new directory inside the <code>apps</code> folder with the name of your new app (e.g., <code>apps/my-second-app</code>).</p> <p>You should also see the app's configuration in <code>workspace.json</code> or <code>angular.json</code> (depending on the app type).</p> <p>Step 3: Install Dependencies</p> <p>Ensure you have installed the dependencies for the newly added app:</p> <pre><code>pnpm install\n</code></pre> <p>Step 4: Serve the New App</p> <p>Now that the app is added, you can serve it by running:</p> <pre><code>pnpm nx serve my-second-app\n</code></pre> <p>This will start the development server for your new app.</p> Optional: Explore Other App Types <p>You can generate various types of apps, depending on the framework you're using. Here are some examples of how you can generate apps:</p> <ul> <li> <p>React app:</p> <pre><code>pnpm nx generate @nrwl/react:application my-react-app\n</code></pre> </li> <li> <p>Angular app:</p> <pre><code>pnpm nx generate @nrwl/node:application my-node-app\n</code></pre> </li> <li> <p>Node app:</p> <pre><code>pnpm nx generate @nrwl/node:application my-node-app\n</code></pre> </li> <li> <p>Next.js app:</p> <pre><code>pnpm nx generate @nrwl/next:application my-next-app\n</code></pre> </li> </ul> <p>Step 5: Verify the New App in the <code>apps</code> Directory</p> <p>After generating the app, you can confirm that it's been added to the <code>apps</code> folder. You should see something like:</p> <pre><code>apps/\n  my-app/       (your first app)\n  my-second-app/ (new app)\n</code></pre> <p>Each app will have its own folder, and you can navigate to it and manage it separately.</p> <p> </p>"},{"location":"research/ideas/micro-frontend/#versions","title":"VERSIONS","text":"<ul> <li>20 version</li> <li>17 version, nx.dev</li> </ul>"},{"location":"research/ideas/micro-frontend/#major-changes","title":"MAJOR Changes","text":""},{"location":"research/ideas/micro-frontend/#scopes-changes","title":"SCOPES CHANGES","text":"<p>You're asking about the shift from <code>@nrwl</code> to<code>@nx</code> for the package scope.</p> <p>The <code>@nrwl</code> scope changed to <code>@nx</code> starting with Nx 15 (released in late 2022). This was part of the overall rebranding and streamlining of Nx, reflecting its evolution beyond its original Nrwl branding.</p> Key Details <ul> <li>Before Nx 15: Nx used the <code>@nrwl</code> scope for its plugins, e.g., <code>@nrwl/angular</code>, <code>@nrwl/react</code>, etc.</li> <li>From Nx 15: The Nx team transitioned to the <code>@nx</code> scope for many of the plugins, e.g., <code>@nx/angular</code>, <code>@nx/react</code>, etc.</li> </ul> Example <ul> <li> <p>Before Nx 15:</p> <pre><code>nx generate @nrwl/react:application my-app\n</code></pre> </li> <li> <p>After Nx 15:</p> <pre><code>nx generate @nx/react:application my-app\n</code></pre> </li> </ul> Why the Change? <p>This shift to the <code>@nx</code> scope was part of a broader rebranding to position <code>Nx</code> as a unified tool that is no longer specifically tied to Nrwl (the company that originally developed it). Instead, Nx as a framework is now branded more independently and is meant to reflect a more community-driven, open-source project.</p> <p>Migration Process:</p> <ul> <li>If you\u2019re using Nx 15 or later, you will need to update your dependencies to use the new <code>@nx</code> scope rather than <code>@nrwl</code>.</li> <li>Nx 15 made this transition smooth by providing backwards compatibility for a period of time, but you should migrate to the <code>@nx</code> scoped versions as soon as possible to stay up to date with the latest features and improvements.</li> </ul> Summary <ul> <li>Before Nx 15: Packages were under the <code>@nrwl</code> scope.</li> <li>Starting with Nx 15: The packages moved to the <code>@nx</code> scope, including plugins for various frameworks.</li> </ul>"},{"location":"research/ideas/micro-frontend/#command-changes","title":"COMMAND CHANGES","text":"<p>The change from using <code>@nrwl</code> commands to the unified <code>nx</code> commands started around Nx 12.</p> Key Timeline <ol> <li> <p>Nx 12 (Released in 2021):</p> <p>Nx 12 introduced the shift to a more integrated experience under the <code>nx</code> CLI. Previously, <code>@nrwl</code> was the scope for many of the tools, and commands like <code>nrwl</code> were used for tasks related to Angular, React, etc. Nx 12 marked the official merging of commands under the <code>nx</code> namespace, reducing the reliance on <code>nrwl</code>.</p> </li> <li> <p>Nx 13 and Nx 14:</p> <p>These versions further solidified the changes, with the <code>nx</code> command becoming the standard for all workspace-related activities (whether you're working with Angular, React, NestJS, etc.). The focus was on improving and expanding the capabilities of the unified nx CLI, rather than maintaining separate CLI tools for each framework.</p> </li> </ol> Example Transition <ul> <li> <p>Before Nx 12:</p> <pre><code>npx create-nx-workspace my-workspace --preset=angular\n</code></pre> <p>Or using the <code>nrwl</code> CLI directly:</p> <pre><code>nrwl generate @nrwl/angular:application my-app\n</code></pre> </li> <li> <p>After Nx 12:</p> <pre><code>nx generate @nrwl/angular:application my-app\n</code></pre> </li> </ul> <p>With Nx 12 and onward, <code>nx</code> became the standard for all workspace commands, and <code>@nrwl</code> is now used more in the context of plugins for specific frameworks (Angular, React, NestJS, etc.), but the main CLI command remains <code>nx</code>.</p> <p></p>"},{"location":"research/ideas/micro-frontend/#reference","title":"Reference","text":"<ul> <li>A Deep Dive into Micro Frontend Architecture with React.js</li> <li>Build a micro-frontend application with React</li> <li>Reddit: MicroFrontend Experience</li> <li> <p>React Microfrontend Guide</p> </li> <li> <p>nrwl</p> </li> <li>nx 16</li> <li> <p>Angular project with monorepo architecture using Nx workspace</p> </li> <li> <p>Streamlining a React Monorepo</p> </li> <li> <p>Speeding up the CircleCI Pipeline for a Nx Monorepo using Nx affected</p> </li> <li> <p>Scaling a Javascript Monorepo With Nx</p> </li> </ul>"},{"location":"research/ideas/mvp/","title":"MVP","text":""},{"location":"research/ideas/mvp/#overview","title":"Overview","text":"<p>Here are five common website categories:</p> <ol> <li> <p>E-commerce Websites: These are online stores where users can browse products and make purchases. Examples include Amazon, eBay, and Etsy.</p> </li> <li> <p>Blog Websites: These websites focus on written content, often organized in posts or articles. Examples include personal blogs, news outlets, and lifestyle websites like WordPress, Medium, or Huffington Post.</p> </li> <li> <p>Portfolio Websites: These sites are used to showcase an individual's or company's work, such as graphic design, photography, or web development. Examples include personal artist portfolios or creative agencies' websites.</p> </li> <li> <p>Educational Websites: These websites provide online learning resources, courses, or academic content. Examples include platforms like Khan Academy, Coursera, and Duolingo.</p> </li> <li> <p>Social Media Websites: These are platforms for users to connect, share content, and interact with others. Examples include Facebook, Instagram, and Twitter.</p> </li> </ol>"},{"location":"research/ideas/mvp/#can-we-resell-it","title":"Can we resell it ?","text":"<p>Yes, you can sell a website that you create, but there are a few things to keep in mind:</p> <ol> <li> <p>Market Demand: Before creating a website to sell, it's important to assess the demand for the type of website you're building. For instance, websites in high-demand niches like e-commerce, blogs, or portfolios can have more resale potential. If you can identify a niche with potential buyers, your chances of selling the site increase.</p> </li> <li> <p>Monetization Strategy: You should consider how the website will make money (e.g., through ads, affiliate marketing, products for sale, or subscriptions). A website with an established revenue stream is often more attractive to potential buyers.</p> </li> <li> <p>Design and Functionality: To make your website more valuable, it should be well-designed, functional, and user-friendly. It should also have good SEO (search engine optimization) to attract traffic.</p> </li> <li> <p>Domain and Branding: The domain name and overall branding can significantly impact a website's resale value. A short, memorable domain or a recognizable brand is worth more.</p> </li> <li> <p>Selling Platforms: There are platforms like Flippa, Empire Flippers, or Website Planet, where you can list your website for sale. Alternatively, you could market the website directly to potential buyers (such as small business owners or entrepreneurs).</p> </li> <li> <p>Legal Aspects: Ensure that you have full ownership of the website, including its domain, content, and design, and that you have a clear process for transferring all assets to the buyer. You may also want to include any necessary terms and conditions or contracts for the transaction.</p> </li> </ol> <p>Creating a high-quality, revenue-generating website can indeed lead to a profitable sale if done strategically.</p>"},{"location":"research/ideas/mvp/#mvp","title":"MVP","text":"<p>Creating a Minimum Viable Product (MVP) means building a basic version of a website that includes only the essential features needed to solve the core problem or offer the primary value. Here\u2019s a breakdown of how you could approach the MVP for each of the website categories listed above:</p>"},{"location":"research/ideas/mvp/#1-e-commerce-website-mvp","title":"1. E-commerce Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Product Listings: Display basic products with images, descriptions, and prices.</li> <li>Shopping Cart: A simple system to add and remove items.</li> <li>Checkout Process: Basic form for collecting user information and processing payments (can use platforms like Stripe or PayPal for simplicity).</li> <li>Search/Filter: Basic search bar to find products.</li> <li>User Accounts (optional): Basic user registration/login for order history, though this can be omitted initially.</li> </ul> <ul> <li>Shopify, WooCommerce (for WordPress), or custom-built with platforms like Wix or Squarespace.</li> </ul>"},{"location":"research/ideas/mvp/#2-blog-website-mvp","title":"2. Blog Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Home Page: Simple layout with blog post previews.</li> <li>Blog Post Creation: Basic interface for writing and publishing posts.</li> <li>Comments Section: Allow users to comment on blog posts.</li> <li>Categories/Tags: Organize posts into categories or with tags.</li> <li>Responsive Design: Ensure it\u2019s viewable on all devices.</li> </ul> <ul> <li>WordPress, Medium, or a custom-built solution with tools like Ghost or Squarespace.</li> </ul>"},{"location":"research/ideas/mvp/#3-portfolio-website-mvp","title":"3. Portfolio Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Showcase of Work: Display a limited number of portfolio pieces (e.g., images, descriptions, or case studies).</li> <li>About Me/Contact Info: Brief introduction about the creator or company with contact information.</li> <li>Portfolio Categories: Divide work into categories (e.g., photography, design, web development).</li> <li>Responsive Design: The portfolio should work well on both desktop and mobile.</li> </ul> <ul> <li>Squarespace, Wix, or custom-built (using platforms like WordPress, Webflow, or Elementor).</li> </ul>"},{"location":"research/ideas/mvp/#4-educational-website-mvp","title":"4. Educational Website MVP","text":"Core FeaturesTools/Platforms <ul> <li>Course Listings: Display a few sample courses or educational content.</li> <li>Lesson Pages: Simple pages for each lesson with video/text content.</li> <li>User Registration: Basic registration to access the content.</li> <li>Payment System (if paid): Integrate a payment gateway for paid courses.</li> <li>Basic Progress Tracker: A simple system to track course completion.</li> </ul> <ul> <li>Teachable, Thinkific, WordPress with LearnDash, or a custom solution using tools like Moodle.</li> </ul> <ol> <li>Social Media Website MVP</li> </ol> Core FeaturesTools/Platforms <ul> <li>User Registration/Login: Simple user sign-up with email and password.</li> <li>Profile Creation: Allow users to create basic profiles with images and information.</li> <li>Post/Feed System: Users can post text, images, or videos, and others can interact (like, comment).</li> <li>Friend/Follow Feature: Simple friend request or follow system to build connections.</li> <li>Basic Notifications: Notify users about interactions (likes, comments, followers).</li> </ul> <ul> <li>Custom-built with frameworks like <code>React</code>, <code>Node.js</code>, or use no-code platforms like Bubble.</li> </ul>"},{"location":"research/ideas/mvp/#general-steps-to-build-an-mvp","title":"General Steps to Build an MVP:","text":"<ol> <li> <p>Research &amp; Define the Core Features: Prioritize the essential features for each website category. You don\u2019t need everything at the start\u2014just the key functions that allow the site to fulfill its purpose.</p> </li> <li> <p>Choose a Platform or Technology:</p> <ul> <li>For quick prototyping, use website builders or CMS (Content Management Systems) like <code>WordPress</code>, <code>Wix</code>, <code>Squarespace</code>, or <code>Shopify</code> for e-commerce.</li> <li>For more control and custom development, consider using <code>React</code>, <code>Node.js</code>, <code>Django</code>, or <code>Ruby on Rails</code>.</li> </ul> </li> <li> <p>Design a Simple UI/UX: Focus on clean, simple designs that prioritize usability. The goal is to make it easy for users to understand how to interact with the site.</p> </li> <li> <p>Launch &amp; Collect Feedback: Once your MVP is live, gather user feedback to understand what works and what needs improvement. You can enhance your website over time based on actual user needs.</p> </li> <li> <p>Iterate: Use the feedback to improve your website, adding more features or refining existing ones.</p> </li> </ol> <p>Building an MVP for each of these website categories will allow you to test the market and gather feedback quickly without spending too much time or resources. The key to a successful MVP is to focus on the core functionality that delivers value to the user while avoiding unnecessary complexity.</p>"},{"location":"research/ideas/website-package/","title":"Website Package","text":"<p>The Essential Guide to Creating Popular Websites: Top 5 Categories to Explore</p>"},{"location":"research/ideas/website-package/#overview","title":"Overview","text":""},{"location":"research/ideas/website-package/#3-overall-planning-for-building-and-selling-websitesapps","title":"3. Overall Planning for Building and Selling Websites/Apps","text":"<p>Step 1: Idea Validation</p> <ul> <li>Research Your Niche: Identify your target market and ensure there\u2019s demand for your product or service. Use tools like Google Trends, keyword research, and competitor analysis.</li> <li>MVP (Minimum Viable Product): Build a simplified version of your website or app to validate the idea and gather feedback from early users.</li> </ul> <p>Step 2: Development and Design</p> <ul> <li>Website Development: Use platforms like WordPress (for blogs or e-commerce), or custom code using frameworks like React (for apps) or Laravel (for websites).</li> <li>App Development: Use app builders (like Flutter, React Native) or develop natively for iOS/Android.</li> <li>UI/UX Design: Focus on creating an intuitive, clean design that enhances the user experience.</li> </ul> <p>Step 3: Marketing and Growth</p> <ul> <li>SEO (Search Engine Optimization): Optimize your website for search engines to attract organic traffic.</li> <li>Social Media Marketing: Leverage platforms like Instagram, TikTok, Facebook, and Twitter to attract users.</li> <li>Paid Ads: Invest in Google Ads, Facebook Ads, or influencer marketing for fast growth.</li> <li>Content Marketing: Publish valuable content that solves problems for your target audience.</li> </ul> <p>Step 4: Monetization</p> <ul> <li>Once you have a user base, implement one or more of the monetization strategies mentioned earlier (ads, affiliate marketing, subscriptions, etc.).</li> </ul> <p>Step 5: Selling the Website or App</p> <ul> <li>When to Sell: Typically, you should look to sell after achieving steady traffic, solid revenue, and a proven business model.</li> <li> <p>Where to Sell:</p> <ul> <li>Flippa: A marketplace for buying and selling websites.</li> <li>Empire Flippers: A broker that specializes in buying and selling established websites.</li> <li>MicroAcquire: A marketplace for buying and selling startups and small businesses.</li> </ul> </li> <li> <p>How to Sell:</p> <ul> <li>Prepare financials: Ensure you have clear records of revenue, user statistics, and expenses.</li> <li>Get an appraisal: Use valuation tools or consult with brokers to estimate your website's worth.</li> <li>Sell to a buyer: Negotiate the sale and transfer assets (domain, hosting, intellectual property, etc.).</li> </ul> </li> </ul>"},{"location":"research/ideas/website-package/#question","title":"Question","text":"<p>Can i sell website or app ?</p> <p>What is <code>x-www-form-urlencoded</code> format?</p> <p><code>x-www-form-urlencoded</code> is one of the most common content types used when submitting forms on the web. It is typically used for simple form submissions, such as login forms, where the form data is sent as a key-value pair string, and the pairs are URL-encoded.</p> <p>Can we use any package to handle this in React?</p> <p>Yes, there are several ways to handle the creation of <code>x-www-form-urlencoded</code> data in React. While the <code>URLSearchParams</code> API is built into JavaScript and works well for most use cases, you can also use <code>third-party</code> packages for more convenience and better support in complex scenarios.</p> <p>Here are a few packages you might consider:</p> <ul> <li>URLSearchParams (Native)</li> <li>form-data (For Node.js / Backend)</li> <li>qs (Query String)</li> <li>[query-string Package] (#)</li> </ul> Why Use query-string? <p>The query-string package is a lightweight alternative to URLSearchParams and provides the following benefits:</p> <ul> <li>Easy Handling of Arrays/Objects: While <code>URLSearchParams</code> can handle simple key-value pairs, query-string offers better support for serializing nested objects and arrays if needed (though in your case, simple key-value pairs are sufficient).</li> <li>Better Customization: <code>query-string</code> provides additional options for encoding and formatting your query strings.</li> </ul> <ul> <li>Setting up Redux Tool Kit (RTK), Redux and Redux-Persist for React.</li> </ul> <pre><code>import { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { authApi } from \"@features/auth/services/authApi\";\nimport authReducer from \"@features/auth/services/authSlice\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\n\n// Persist config for Redux persist\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  // whitelist: [\"auth\"],  // Optional: use whitelist if you want to persist specific slices\n};\n\n// Combine reducers\nconst rootReducer = combineReducers({\n  auth: authReducer, // We use authReducer here (not persistedAuthReducer directly)\n  [authApi.reducerPath]: authApi.reducer,\n});\n\n// Create persisted reducer for auth slice\nconst persistedAuthReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedAuthReducer, // Use persistedAuthReducer as the rootReducer\n  middleware: (getDefaultMiddleware) =&gt;\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(authApi.middleware), // Add API middleware for handling authApi actions\n});\n\n// Persist store\nexport const persistor = persistStore(store);\n</code></pre> <pre><code>pnpm add jwt-decode\n</code></pre> <ul> <li>Online JWT Decoder</li> </ul> <p>Steps to Integrate Token Refresh Logic with <code>axiosBaseQuery</code>:</p> <ul> <li>Extend <code>axiosBaseQuery</code> to handle re-authentication (token refresh) logic.</li> <li>Use the updated <code>axiosBaseQuery</code> in your API slice.</li> <li>Ensure token management and logout actions are handled.</li> </ul> <pre><code>import axiosInstance from \"./axiosInstance\";\nimport { tokenReceived, loggedOut } from \"./authSlice\"; // Import your actions\nimport { CONFIG } from \"@shared/utils/config\"; // Ensure your config is correct\n\n// Modify axiosBaseQuery to handle token refresh\nconst axiosBaseQuery =\n  ({ baseUrl } = { baseUrl: \"\" }) =&gt;\n  async ({ url, method, data, params }, api, extraOptions) =&gt; {\n    try {\n      const result = await axiosInstance({\n        url: baseUrl + url,\n        method,\n        data,\n        params,\n      });\n      return { data: result.data };\n    } catch (axiosError) {\n      // If we get a 401 error, try refreshing the token\n      if (axiosError.response?.status === 401) {\n        const refreshResult = await axiosInstance({\n          url: baseUrl + \"/auth/refreshToken\", // Adjust to your refresh token endpoint\n          method: \"POST\",\n        });\n\n        if (refreshResult.data) {\n          // Dispatch tokenReceived action with the new token\n          api.dispatch(tokenReceived(refreshResult.data)); // Ensure correct token structure\n\n          // Retry the original request with the new token\n          const retryResult = await axiosInstance({\n            url: baseUrl + url,\n            method,\n            data,\n            params,\n            headers: {\n              Authorization: `Bearer ${refreshResult.data.token}`, // Adjust token header if needed\n            },\n          });\n\n          return { data: retryResult.data };\n        } else {\n          // If the refresh fails, dispatch loggedOut action\n          api.dispatch(loggedOut());\n          return {\n            error: {\n              status: 401,\n              data: \"Unable to refresh token. Logged out.\",\n            },\n          };\n        }\n      }\n\n      // Return error if it's not a 401\n      const err = axiosError.response?.data || axiosError.message;\n      return { error: { status: axiosError.response?.status, data: err } };\n    }\n  };\n\nexport default axiosBaseQuery;\n</code></pre>"},{"location":"research/python/custom-django-app-structure/","title":"Django App Structure","text":""},{"location":"research/python/custom-django-app-structure/#django-app-structure","title":"Django App Structure","text":""},{"location":"research/python/custom-django-app-structure/#app-structure","title":"App Structure","text":"<ol> <li> <p>Create the app:</p> <pre><code>python manage.py startapp &lt;your-app-name&gt;\n</code></pre> </li> <li> <p>Add it to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</p> </li> <li> <p>Add the files we defined:</p> <ul> <li><code>&lt;your-app-name&gt;/models.py</code> (Message model).</li> <li><code>&lt;your-app-name&gt;/serializers.py</code> (REST API serializer).</li> <li><code>&lt;your-app-name&gt;/views.py</code> (API view).</li> <li><code>&lt;your-app-name&gt;/urls.py</code> (API URL patterns).</li> <li><code>&lt;your-app-name&gt;/consumers.py</code> (WebSocket consumer).</li> <li><code>&lt;your-app-name&gt;/routing.py</code> (WebSocket routing).</li> </ul> </li> <li> <p>Update <code>config/asgi.py</code> with import <code>&lt;your-app-name&gt;.routing</code>.</p> </li> </ol> <p>This matches the structure we used in the original guide.</p>"},{"location":"research/python/django-api-image/","title":"Django API Image DOCKER","text":""},{"location":"research/python/django-api-image/#django-api-image-dockerhub","title":"Django API Image DockerHub","text":""},{"location":"research/python/django-api-image/#approach","title":"Approach","text":"<p>To ship both Redis and your Django Channels project in a single Docker Hub image, you\u2019d typically create a multi-service setup using Docker. However, a single Docker image usually contains just one application or service (e.g., your Django app). Including Redis inside the same image as your Django app is possible but not recommended for production because:</p> <ul> <li>It violates the \"one process per container\" Docker best practice.</li> <li>It makes scaling and debugging harder.</li> </ul> <p>Instead, the standard approach is to:</p> <ol> <li>Use Docker Compose to define and run both your Django app and Redis as separate containers in a single, coordinated setup.</li> <li>Push your Django app image to Docker Hub, while relying on the official Redis image from Docker Hub (no need to ship Redis yourself).</li> </ol> <p>I\u2019ll show you how to:</p> <ul> <li>Update your project to work with Docker Compose.</li> <li>Push your Django app image to Docker Hub.</li> <li>Use the official Redis image alongside it.</li> </ul> <p>If you really want Redis inside the same image, I\u2019ll explain that too, but I\u2019ll start with the recommended approach.</p>"},{"location":"research/python/django-api-image/#recommended-approach-docker-compose-with-separate-images","title":"<code>Recommended Approach</code>: Docker Compose with Separate Images","text":"<p>Step 1: Update Your Project for Docker Compose</p> <ol> <li> <p>Create a <code>docker-compose.yml</code> File in your project root:</p> <pre><code>version: \"3.8\"\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: yourusername/django-channels-demo:latest\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - redis\n    environment:\n      - REDIS_HOST=redis # Matches the service name below\n    command: daphne -b 0.0.0.0 -p 8000 config.asgi:application\n\n  redis:\n    image: redis:latest\n    ports:\n      - \"6379:6379\"\n</code></pre> <ul> <li><code>app</code>: Your Django Channels service, built from the <code>Dockerfile</code>.</li> <li><code>redis</code>: The official Redis image from Docker Hub.</li> <li><code>depends_on</code>: Ensures Redis starts before your app.</li> <li><code>REDIS_HOST</code>: Environment variable to tell Django where Redis is.</li> </ul> </li> <li> <p>Update <code>settings.py</code> to Use Environment Variable: Modify <code>CHANNEL_LAYERS</code> to dynamically use the Redis host:</p> <pre><code>import os\n\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [(os.getenv('REDIS_HOST', 'localhost'), 6379)],\n        },\n    },\n}\n</code></pre> <ul> <li>Defaults to <code>localhost</code> if <code>REDIS_HOST</code> isn\u2019t set (useful for local dev without Docker).</li> </ul> </li> <li> <p>Ensure Your <code>Dockerfile</code> is Correct (from earlier):</p> dockerfile<pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nCMD [\"daphne\", \"-b\", \"0.0.0.0\", \"-p\", \"8000\", \"config.asgi:application\"]\n</code></pre> </li> </ol> <p>Step 2: Build and Test Locally</p> <ol> <li> <p>Build and Run with Docker Compose:</p> <pre><code>docker-compose up --build\n</code></pre> <ul> <li>This builds your Django app image and starts both services.</li> <li>Access the API at <code>http://localhost:8000/api/messages/</code> and WebSocket at <code>ws://localhost:8000/ws/messages/</code>.</li> </ul> </li> <li> <p>Verify:</p> <ul> <li> <p>Test with <code>curl</code></p> <pre><code>curl -X POST http://localhost:8000/api/messages/ -H \"Content-Type: application/json\" -d '{\"content\": \"Test\"}'\n</code></pre> </li> <li> <p>Check logs:</p> <pre><code>docker-compose logs\n</code></pre> </li> </ul> </li> </ol> <p>Step 3: Push Your Django App Image to Docker Hub</p> <ol> <li> <p>Tag the Image:</p> <ul> <li> <p>The <code>image: yourusername/django-channels-demo:latest</code> line in <code>docker-compose.yml</code> sets the name. After building, tag it explicitly (optional):</p> <pre><code>docker tag django-channels-demo_app yourusername/django-channels-demo:latest\n</code></pre> </li> <li> <p><code>django-channels-demo_app</code> is the default name Docker Compose gives the app service image.</p> </li> </ul> </li> <li> <p>Log in to Docker Hub:</p> <pre><code>docker login\n</code></pre> </li> <li> <p>Push the Image:</p> <pre><code>docker push yourusername/django-channels-demo:latest\n</code></pre> </li> <li> <p>Note: You don\u2019t need to push Redis because <code>redis:latest</code> is already on Docker Hub.</p> </li> </ol> <p>Step 4: Use the Combined Setup Elsewhere</p> <ul> <li>Share the <code>docker-compose.yml</code> file with others (e.g., via <code>Git</code>).</li> <li> <p>On another machine (e.g., your office computer):</p> <ol> <li>Save <code>docker-compose.yml</code>.</li> <li> <p>Run:</p> <pre><code>docker-compose up\n</code></pre> <ul> <li>Docker Compose pulls yourusername/django-channels-demo:latest and redis:latest from Docker Hub and starts both.</li> </ul> </li> </ol> </li> </ul>"},{"location":"research/python/django-api-image/#alternative-single-image-with-redis-and-django-not-recommended","title":"<code>Alternative</code>: Single Image with <code>Redis</code> and <code>Django</code> (Not Recommended)","text":"<p>If you insist on shipping Redis and your Django app in one Docker image:</p> <p>Step 1: Modify the Dockerfile</p> dockerfile<pre><code>FROM python:3.9-slim\n\n# Install Redis\nRUN apt-get update &amp;&amp; apt-get install -y redis-server\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n# Start Redis and Daphne in the same container\nCMD redis-server --daemonize yes &amp;&amp; daphne -b 0.0.0.0 -p 8000 config.asgi:application\n</code></pre> <ul> <li><code>redis-server --daemonize yes</code>: Runs Redis in the background.</li> <li><code>&amp;&amp;</code>: Chains the commands to start Redis, then Daphne.</li> </ul> <p>Step 2: Update <code>settings.py</code></p> <p>Ensure <code>CHANNEL_LAYERS</code>points to <code>localhost</code> since Redis runs in the same container:</p> <pre><code>CHANNEL_LAYERS = {\n  default: {\n    BACKEND: \"channels_redis.core.RedisChannelLayer\",\n    CONFIG: {\n      hosts: [(\"localhost\", 6379)],\n    },\n  },\n};\n</code></pre> <p>Step 3: Build, Push, and Run</p> <ol> <li> <p>Build:</p> <pre><code>docker build -t yourusername/django-channels-with-redis:latest .\n</code></pre> </li> <li> <p>Test:</p> <pre><code>docker run -d -p 8000:8000 yourusername/django-channels-with-redis:latest\n</code></pre> </li> <li> <p>Push:</p> <pre><code>docker push yourusername/django-channels-with-redis:latest\n</code></pre> </li> </ol> Downsides <ul> <li>Redis and Django share the same process space, making it harder to manage logs, restarts, or scaling.</li> <li>Not aligned with Docker\u2019s philosophy.</li> </ul>"},{"location":"research/python/django-api-image/#recommendation","title":"Recommendation","text":"<p>Use Docker Compose (first approach). It:</p> <ul> <li>Keeps Redis and Django separate, following best practices.</li> <li>Simplifies deployment (one <code>docker-compose.yml</code> file).</li> <li>Allows you to push only your Django app image to Docker Hub while leveraging the official Redis image.</li> </ul> <p>Final Files to Share</p> <p><code>Dockerfile</code> <code>docker-compose.yml</code> Your project code (including updated settings.py)</p> <p>Running on Office Computer</p> <ol> <li>Clone your repo or copy files.</li> <li> <p>Run:</p> <pre><code>```bash\ndocker-compose up --build\n```\n</code></pre> <p>Access at <code>http://localhost:8000</code> (or the office IP).</p> </li> </ol>"},{"location":"research/python/django-builtin-lightweight-server/","title":"Django Builtin Server","text":""},{"location":"research/python/django-builtin-lightweight-server/#djangos-built-in-server","title":"Django's built-in server","text":"<p>The Django lightweight development server doesn't have a specific name like \"Apache\" or \"Nginx.\" It is simply referred to as the Django development server or Django's built-in server.</p> <p>Internally, it's based on Python's <code>wsgiref.simple_server</code>, which is a very basic WSGI (Web Server Gateway Interface) server provided by Python. It is not intended for production use, but it\u2019s enough for development and testing purposes.</p> <p>It starts the server, which by default listens on <code>127.0.0.1:8000</code>. This server is an integral part of the Django framework for development purposes, and it is often referred to simply as Django's development server or Django's lightweight server.</p> <p>If you need the specific technical name, it\u2019s based on <code>wsgiref</code>'s simple server. Would you like to know more about how this server works behind the scenes?</p>"},{"location":"research/python/django-builtin-lightweight-server/#djangos-lightweight-development-server","title":"Django's Lightweight Development Server","text":"<p>Django comes with a lightweight development server that you can use to run your project during development. This server is not intended for use in production environments, as it\u2019s not optimized for handling the kind of traffic a production-ready web server (like Apache, Nginx, or Gunicorn) can handle. It's designed to make testing and development easier by automatically handling requests, serving static files, and interacting with your Django views and templates.</p> How the Lightweight Server Works <ul> <li> <p>When you run the command:</p> <pre><code>python manage.py runserver\n</code></pre> </li> <li> <p>Django starts its internal server and listens on a port (default is port <code>8000</code>). This allows you to view your app in a web browser, test the features, and debug easily.</p> </li> <li> <p>The server is single-threaded and runs in the context of your Python process, so it's not meant to handle heavy or concurrent requests. It works well for local development but would not perform well under heavy load or production traffic.</p> </li> <li> <p>The server also serves static files (CSS, JavaScript, images) and can reload code changes automatically while you're developing, which makes it very useful during development.</p> </li> </ul>"},{"location":"research/python/django-builtin-lightweight-server/#production-ready-server-setup","title":"Production-Ready Server Setup","text":"<p>When you're ready to move your Django app to production, you'll need to replace the lightweight server with something more robust. Here's how to do that:</p>"},{"location":"research/python/django-builtin-lightweight-server/#1-use-gunicorn-with-nginx","title":"1. Use Gunicorn with Nginx:","text":"<ul> <li> <p>Gunicorn: It's a WSGI HTTP server for Python web applications. It's a great choice for serving Django in production.</p> <ul> <li> <p>Install Gunicorn:</p> <pre><code>pip install gunicorn\n</code></pre> </li> <li> <p>Run your Django project with Gunicorn:</p> <pre><code>gunicorn myproject.wsgi:application\n</code></pre> </li> </ul> </li> <li> <p>Nginx: Nginx is a high-performance HTTP server and reverse proxy server. It is often used to handle static files and pass the dynamic content requests to Gunicorn.</p> </li> <li> <p>Setting it up: You'll configure Gunicorn to serve your Django app, while Nginx handles static file serving and reverse proxies requests to Gunicorn.</p> </li> </ul>"},{"location":"research/python/django-builtin-lightweight-server/#2-use-uwsgi-with-nginx","title":"2. Use uWSGI with Nginx:","text":"<ul> <li> <p>uWSGI: Another excellent WSGI server choice for Django in production.</p> <ul> <li> <p>Install uWSGI:</p> <pre><code>pip install uwsgi\n</code></pre> </li> <li> <p>Configure Nginx to pass requests to uWSGI, which will handle the dynamic content generation.</p> </li> </ul> </li> </ul> Summary of the Server <ul> <li> <p>Development server: It's a simple, lightweight server provided by Django for development purposes. It is located in the <code>django.core.management.commands.runserver.py</code> file and uses Python\u2019s <code>wsgiref.simple_server</code>.</p> </li> <li> <p>Production: For production, you should use a more robust server like Gunicorn or uWSGI behind a reverse proxy such as Nginx or Apache to handle performance, concurrency, and security requirements.</p> </li> </ul>"},{"location":"research/python/django-builtin-lightweight-server/#where-is-the-lightweight-server-located","title":"Where is the Lightweight Server Located?","text":"<p>Django\u2019s built-in server is a part of the Django package, so you don\u2019t have to install it separately. It's located within the <code>django.core.management module</code>.</p> <p>When you execute the <code>python manage.py runserver</code> command, it uses the <code>runserver</code> management command, which internally starts the server. Here's how it works:</p> <ol> <li> <p>Command: When you run <code>python manage.py runserver</code>, Django will look for the <code>runserver</code> management command in <code>django.core.management.commands.runserver</code>.</p> </li> <li> <p>Server Code: The actual code for the server can be found in:</p> <pre><code>django/core/management/commands/runserver.py\n</code></pre> <p>This is where the server is implemented. It\u2019s a relatively simple code that listens for incoming requests and hands them over to the Django application to handle.</p> </li> <li> <p>Server Process: Behind the scenes, Django's development server is built using Python's built-in <code>wsgiref.simple_server</code>, which is a basic WSGI server. It's lightweight and written in Python, not as optimized as production servers like Gunicorn or uWSGI, but sufficient for development.</p> </li> </ol> Code Behind the Server <p>Here's a quick look at how the server starts:</p> <pre><code># django/core/management/commands/runserver.py\n\nfrom django.utils import autoreload\nfrom django.core.servers.basehttp import run, WSGIServerException\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        try:\n            autoreload.main(self.inner_run, args, options)\n        except WSGIServerException:\n            pass\n\n    def inner_run(self, *args, **options):\n        # Start the actual server, usually running on 127.0.0.1:8000\n        run(self.get_handler())\n</code></pre> <p>So, when you run <code>python manage.py runserver</code>, it launches the server that listens on <code>127.0.0.1:8000</code> by default.</p>"},{"location":"research/python/django-builtin-lightweight-server/#question","title":"Question","text":"<p>dont we need xamp apache server to run the django project. i have not installed anything but it runs in my ubnuntu</p> <p>No, you don't need XAMPP or an Apache server to run a Django project. Django has its own lightweight development server, which is why you can run your Django project without installing XAMPP or Apache.</p> <p>When you run a Django project using the command:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Django automatically starts its built-in development server (usually running on <code>http://127.0.0.1:8000/</code> by default) to serve your application. This server is sufficient for development purposes, but for production environments, you would typically use a more robust server like Apache or Nginx, often in combination with a WSGI server like Gunicorn or uWSGI.</p> <p>In Ubuntu, you likely installed Django and its dependencies, and that's why your project is running fine without needing XAMPP or Apache.</p>"},{"location":"research/python/redis-locally-or-docker/","title":"Redis - Locally or Docker","text":""},{"location":"research/python/redis-locally-or-docker/#redis","title":"Redis","text":"<p>I\u2019ll show you how to set up Redis both locally (installed directly on your machine) and via Docker (running as a container). Redis is an in-memory data store used as a message broker in our Django Channels project (for the <code>CHANNEL_LAYERS</code> backend). You can choose either method based on your preference or environment.</p>"},{"location":"research/python/redis-locally-or-docker/#option-1-redis-locally","title":"Option 1: Redis Locally","text":""},{"location":"research/python/redis-locally-or-docker/#option-2-redis-via-docker","title":"Option 2: Redis <code>via</code> Docker","text":"<p>This runs Redis in a container, which is portable and doesn\u2019t require installing it directly on your system. This is the method we used in the earlier Dockerized Django Channels setup.</p>"},{"location":"research/python/redis-locally-or-docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on your machine (Docker Installation Guide).</li> </ul>"},{"location":"research/python/redis-locally-or-docker/#steps","title":"Steps","text":"<ol> <li> <p>Pull the Redis Image:</p> <p>Docker Hub hosts the official Redis image. Pull it (optional, as <code>docker run</code> will do this automatically):</p> <pre><code>docker pull redis:latest\n</code></pre> </li> <li> <p>Run Redis Container:</p> <ul> <li> <p>Start Redis with a single command</p> <pre><code>docker run -d --name redis -p 6379:6379 redis\n</code></pre> <pre><code>docker run --name redis -p 6379:6379 -d redis\n</code></pre> <ul> <li><code>-d</code>: Runs in detached mode (background).</li> <li><code>--name redis</code>: Names the container <code>redis</code> (used for linking).</li> <li><code>-p 6379:6379</code>: Maps port 6379 on your host to 6379 in the container.</li> </ul> </li> </ul> </li> <li> <p>Verify It\u2019s Running:</p> <ul> <li> <p>Check the container:</p> <pre><code>docker ps\n</code></pre> <ul> <li>You should see a <code>redis</code> container running.</li> </ul> </li> <li> <p>Test with <code>redis-cli</code> (if installed locally)</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379 ping\n</code></pre> <ul> <li>Expect <code>PONG</code>.</li> </ul> </li> <li> <p>Or use Docker to access the container\u2019s Redis CLI:</p> <pre><code>docker exec -it redis redis-cli ping\n</code></pre> <ul> <li>Expect <code>PONG</code>.</li> </ul> </li> </ul> </li> <li> <p>Stop or Remove (Optional):</p> <ul> <li> <p>Stop the container:</p> <pre><code>docker stop redis\n</code></pre> </li> <li> <p>Remove it:</p> <pre><code>docker rm redis\n</code></pre> </li> </ul> </li> </ol>"},{"location":"research/python/redis-locally-or-docker/#connect-in-django-with-docker","title":"Connect in Django with Docker","text":"<p>In <code>settings.py</code>, update <code>CHANNEL_LAYERS</code> to match the Docker setup:</p> <pre><code>CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [('redis', 6379)],  # Use container name 'redis' instead of localhost\n        },\n    },\n}\n</code></pre> <ul> <li>When running Django in Docker (as in our project), use <code>'redis'</code> as the hostname because Docker\u2019s internal networking links containers by name (via <code>--link redis:redis</code> or a Docker network).</li> </ul>"},{"location":"research/python/redis-locally-or-docker/#running-with-django-container","title":"Running with Django Container","text":"<p>If you\u2019re using the Dockerized Django app from earlier:</p> <pre><code>docker run -d --name redis -p 6379:6379 redis\ndocker run -d -p 8000:8000 --link redis:redis yourusername/django-channels-demo:latest\n</code></pre> <ul> <li>The <code>--link redis:redis</code> connects the Django container to the Redis container, allowing them to communicate.</li> </ul>"},{"location":"research/python/redis-locally-or-docker/#local-vs-docker-which-to-use","title":"Local vs. Docker: Which to Use?","text":""},{"location":"research/python/redis-locally-or-docker/#local-redis","title":"Local Redis:","text":"<ul> <li>Pros: No Docker required, runs directly on your system, good for development without containerization.</li> <li>Cons: Requires manual installation, less portable, potential version conflicts.</li> <li>Use Case: If you\u2019re not using Docker for Django or prefer a native setup.</li> </ul>"},{"location":"research/python/redis-locally-or-docker/#docker-redis","title":"Docker Redis:","text":"<ul> <li>Pros: Portable, easy to start/stop, matches our Dockerized Django setup, no system pollution.</li> <li>Cons: Requires Docker, slight overhead for beginners.</li> <li>Use Case: If you\u2019re already using Docker (as in our project) or want a consistent environment across machines (e.g., office computer).</li> </ul> <p>Since our project uses Docker for the Django app, Redis via Docker is the most seamless option, as it integrates naturally with the containerized workflow.</p>"},{"location":"research/python/redis-locally-or-docker/#testing-redis-with-django-channels","title":"Testing Redis with Django Channels","text":"<ol> <li> <p>Start Redis (choose your method):</p> <ul> <li>Local: <code>redis-server</code> (or service command).</li> <li>Docker: <code>docker run -d --name redis -p 6379:6379 redis</code>.</li> </ul> </li> <li> <p>Run the Django app:</p> <ul> <li>Local: <code>python manage.py runserver</code>.</li> <li>Docker: <code>docker run -d -p 8000:8000 --link redis:redis yourusername/django-channels-demo:latest</code>.</li> </ul> </li> <li> <p>Test the WebSocket:</p> <ul> <li>Connect to <code>ws://localhost:8000/ws/messages/</code> (e.g., with wscat or the React app).</li> <li>Send a message via the API (<code>curl -X POST http://localhost:8000/api/messages/ -d '{\"content\": \"Test\"}'</code>) and confirm it\u2019s broadcast.</li> </ul> </li> </ol>"},{"location":"research/python/redis-locally-or-docker/#example-output","title":"Example Output","text":"<ul> <li> <p>Local Redis:</p> <pre><code>$ redis-cli ping\nPONG\n</code></pre> </li> <li> <p>Docker Redis:</p> <pre><code>$ docker exec -it redis redis-cli ping\nPONG\n</code></pre> </li> </ul>"},{"location":"research/python/redis-locally-or-docker/#reference","title":"Reference","text":"<ul> <li>Docker Installation</li> </ul>"},{"location":"research/python/redis/intro/","title":"Intro","text":""},{"location":"research/python/redis/intro/#installation","title":"Installation","text":"<p>To run Redis locally using Docker, follow these steps:</p> <ol> <li> <p>Ensure Docker is installed on your machine. If it's not, you can download it from the official Docker website: Docker Installation.</p> </li> <li> <p>Pull the Redis Docker image from the Docker Hub (if you haven't already):</p> <pre><code>docker pull redis\n</code></pre> </li> <li> <p>Run Redis in a Docker container:</p> <p>To run a Redis container locally, use the following command:</p> <pre><code>docker run --name redis -p 6379:6379 -d redis\n</code></pre> <p>Here's what each part of the command means:</p> <ul> <li><code>--name redis</code>: Assigns the name <code>redis</code> to your container.</li> <li><code>-p 6379:6379</code>: Maps port 6379 on your local machine to port 6379 inside the container (the default Redis port).</li> <li><code>-d</code>: Runs the container in detached mode (in the background).</li> <li><code>redis</code>: This is the image name you're running, which will be pulled from Docker Hub if you don't have it locally.</li> </ul> </li> <li> <p>Verify the Redis container is running:</p> <p>You can check if the Redis container is up and running by using the following command:</p> <pre><code>docker ps\n</code></pre> <p>This will list all running containers. You should see the Redis container in the output.</p> </li> <li> <p>Access Redis locally:</p> <p>You can now connect to Redis using the default port <code>6379</code> from your local machine. You can use a Redis client or command-line tool like <code>redis-cli</code> to connect to it:</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379\n</code></pre> </li> <li> <p>Stop the Redis container (when you're done):</p> <p>If you want to stop the Redis container, run the following command:</p> <pre><code>docker stop redis\n</code></pre> </li> </ol> <p>That's it! You've now successfully run Redis locally using Docker.</p> <p>Here\u2019s how you can access the Redis CLI from inside the running Docker container:</p>"},{"location":"research/python/redis/intro/#option-1-run-redis-cli-from-the-docker-container","title":"Option 1: Run <code>redis-cli</code> from the Docker container","text":"<ol> <li> <p>Enter the Redis container: First, find the container ID or name of the Redis container:</p> <pre><code>docker ps\n</code></pre> <p>This will list all running containers, and you should see the Redis container listed. If you named it <code>redis</code>, you can enter it like this:</p> <pre><code>docker exec -it redis redis-cli\n</code></pre> <p>This will directly start the Redis CLI inside the container.</p> </li> <li> <p>Use Redis CLI: Once inside the container, you should see the Redis prompt. You can then issue commands like:</p> <pre><code>PING\n</code></pre> <p>You should receive the response:</p> <pre><code>PONG\n</code></pre> </li> </ol>"},{"location":"research/python/redis/intro/#option-2-use-redis-cli-from-your-local-machine-if-you-install-it","title":"Option 2: Use <code>redis-cli</code> from your local machine (if you install it)","text":"<p>If you'd prefer to install <code>redis-cli</code> on your local machine and not just inside the Docker container, the installation error you're facing (lock issues) might happen if another process is interacting with <code>apt</code> (such as an ongoing update or installation). You can solve it as I mentioned earlier or simply install it from inside the container, as shown in Option 1.</p>"},{"location":"research/python/redis/redis-cli/","title":"Redis Cli","text":""},{"location":"research/python/redis/redis-cli/#steps-to-install-redis-cli-on-ubuntudebian-based-systems","title":"Steps to install redis-cli on Ubuntu/Debian-based systems:","text":"<ol> <li> <p>Install Redis tools: To install <code>redis-cli</code> (which is part of the redis-tools package), run the following command:</p> <pre><code>sudo apt update\nsudo apt install redis-tools\n</code></pre> </li> <li> <p>Verify the installation: After the installation is complete, verify that <code>redis-cli</code> is available by running:</p> <pre><code>redis-cli --version\n</code></pre> <p>This should display the installed version of redis-cli.</p> </li> <li> <p>Connect to Redis: Once <code>redis-cli</code> is installed, you can run the following command to connect to Redis:</p> <pre><code>redis-cli -h 127.0.0.1 -p 6379\n</code></pre> <p>You should now be able to interact with your local Redis server.</p> </li> </ol>"},{"location":"research/python/websocket/channels-full-guide/","title":"Channels Full Guide","text":""},{"location":"research/python/websocket/channels-vs-daphene/","title":"Channel vs Daphene","text":""},{"location":"research/python/websocket/channels-vs-daphene/#channels-vs-daphene","title":"Channels <code>vs</code> Daphene","text":"In summary <ul> <li>Django Channels = Framework for adding asynchronous features to Django.</li> <li>Daphne = ASGI server that serves the application and handles the asynchronous protocols</li> </ul>"},{"location":"research/python/websocket/channels-vs-daphene/#diffrence","title":"DIFFRENCE","text":"<p>The key difference between WSGI (Web Server Gateway Interface) and ASGI (Asynchronous Server Gateway Interface) is how they handle synchronous vs. asynchronous communication in web applications.</p> <p>Example Scenarios:</p> <ul> <li>WSGI: Traditional websites like blogs, content management systems (CMS), or APIs that primarily handle HTTP requests.</li> <li>ASGI: Real-time applications like live chat systems, online multiplayer games, stock price updates, or apps with push notifications.</li> </ul> <p>In short:</p> <ul> <li>WSGI = synchronous (one request at a time).</li> <li>ASGI = asynchronous (can handle many requests concurrently, supporting WebSockets and real-time communication).</li> </ul>"},{"location":"research/python/websocket/channels-vs-daphene/#channels-and-channel_redis","title":"Channels and Channel_redis","text":"<p>In Django, <code>channels</code> and <code>channel_redis</code> are related components used for handling real-time communication and asynchronous features, like WebSockets, in Django applications. Here\u2019s the key difference between them:</p> <p>Example in Django:</p> <ul> <li><code>channels</code> handles the WebSocket connection and consumers.</li> <li><code>channels_redis</code> ensures that messages sent via WebSockets (or any asynchronous communication) can be broadcasted across different Django workers or instances via Redis.</li> </ul> Typical Setup in <code>settings.py</code>: <pre><code># settings.py for Django Channels and Redis\nASGI_APPLICATION = \"yourproject.asgi.application\"\n\n# Channels Redis configuration\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            \"hosts\": [('127.0.0.1', 6379)],  # Redis server connection\n        },\n    },\n}\n</code></pre> <p>Conclusion:</p> <ul> <li><code>channels</code> gives Django the capability to handle WebSockets and asynchronous protocols.</li> <li><code>channels_redis</code> enables inter-process communication using Redis, making it possible to scale Django applications while maintaining real-time capabilities.</li> </ul>"},{"location":"research/python/websocket/issue-solved/","title":"Issue Solved","text":""},{"location":"research/python/websocket/issue-solved/#issue-solved","title":"Issue Solved","text":"<p>raise AppRegistryNotReady(\"Apps aren't loaded yet.\") <code>django.core.exceptions.AppRegistryNotReady</code>: Apps aren't loaded yet</p> <p>Solved</p> asgi.py<pre><code>import os\n\n# Set the settings module before importing anything else\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dating_project.settings')\n\nimport django\ndjango.setup()\n\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.security.websocket import AllowedHostsOriginValidator\nfrom apps.messaging import routing  # Import your routing only after settings are configured\n\napplication = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AllowedHostsOriginValidator(\n        URLRouter(routing.websocket_urlpatterns),\n    ),\n})\n</code></pre> <pre><code>ws://localhost:8000/ws/messages/\n\n{\"message\": \"Test\"}\n</code></pre> <pre><code>pip show django\n</code></pre>"},{"location":"research/react/antd-form-synchronus/","title":"Antd Form Synchronus","text":""},{"location":"research/react/antd-form-synchronus/#antd-form-is-synchronus","title":"Antd Form is Synchronus","text":"<p>In React, Ant Design's (<code>antd</code>) Form component's methods like <code>form.setFieldsValue()</code> and <code>form.getFieldValue()</code> are synchronous because they are designed to update the internal state of the form directly and trigger a re-render of the form components. This behavior aligns with how React's state management works, which is inherently synchronous.</p> <p>Here are the key reasons for this synchronous behavior:</p>"},{"location":"research/react/antd-form-synchronus/#1-state-management-in-react-is-synchronous","title":"1. State Management in React is Synchronous:","text":"<p>React state updates (including the internal state of an Ant Design form) are typically synchronous in the sense that when a state is updated (e.g., using <code>form.setFieldsValue()</code>), React schedules a re-render, but it doesn\u2019t immediately reflect changes within the same render cycle. The updates will be applied in the next render cycle.</p> <p>Since <code>form.setFieldsValue()</code> and similar methods are built on top of React\u2019s state management, they follow this same behavior. They set the state of the form synchronously, but the changes will be reflected after React processes the next render cycle.</p>"},{"location":"research/react/antd-form-synchronus/#2-performance-considerations","title":"2. Performance Considerations:","text":"<p>Making form field updates asynchronous would mean additional complexity and potential performance issues because each update would have to be handled in a non-blocking way, which could potentially cause rendering inconsistencies or visual flickers. Ant Design's synchronous approach ensures that the form's state is consistently in sync with the UI and is easier to predict.</p>"},{"location":"research/react/antd-form-synchronus/#3-reacts-virtual-dom","title":"3. React\u2019s Virtual DOM:","text":"<p>React uses a virtual DOM to optimize rendering and ensure that UI updates are efficient. When you call <code>form.setFieldsValue()</code>, the value of the form field changes, but this change is reflected when React compares the virtual DOM with the actual DOM during its reconciliation process.</p> <p>This reconciliation process is synchronous within a render cycle, and React only re-renders components after the changes have been made. The Ant Design form system is built around this pattern and relies on React's synchronous update mechanism.</p>"},{"location":"research/react/antd-form-synchronus/#4-ant-designs-api-design","title":"4. Ant Design's API Design:","text":"<p>Ant Design\u2019s Form API, like <code>setFieldsValue()</code>, is designed to allow quick and predictable updates to form values. The form field values are set immediately, and React will re-render the form in the next cycle to reflect those changes. Making this asynchronous could complicate form state management, making it harder to track the order and timing of updates to form fields, and potentially leading to race conditions or issues with form validation.</p>"},{"location":"research/react/antd-form-synchronus/#handling-asynchronous-form-field-updates","title":"Handling Asynchronous Form Field Updates:","text":"<p>While <code>form.setFieldsValue()</code> is synchronous, if you want to perform asynchronous operations (e.g., when fetching values from an API or performing calculations), you can manage them outside of the form's state. For example, you could use a <code>useEffect</code> hook or handle async logic before setting the form fields with the calculated data.</p> <pre><code>useEffect(() =&gt; {\n  const fetchData = async () =&gt; {\n    const data = await fetchSomeData();\n    form.setFieldsValue({ fieldName: data });\n  };\n\n  fetchData();\n}, []);\n</code></pre>"},{"location":"research/react/antd-form-synchronus/#example-of-async-handling","title":"Example of Async Handling:","text":"<p>To address situations where asynchronous data needs to be set into the form, you can perform asynchronous operations separately and then call <code>form.setFieldsValue()</code> to set the form's values once the data is ready. This makes sure the form remains consistent while respecting the synchronous nature of the form's update method.</p>"},{"location":"research/react/antd-form-synchronus/#conclusion","title":"Conclusion:","text":"<p>In short, Ant Design's form methods are synchronous because they are tightly integrated with React's synchronous state management and rendering processes. This ensures predictable behavior and better performance. If you need to perform asynchronous operations (such as fetching data or performing calculations), you can handle that separately before updating the form values synchronously.</p>"},{"location":"research/react/antd-form-synchronus/#reference","title":"Reference","text":"<ul> <li>Medium, The Synchronous Nature of useState(): A Deep Dive with Code Examples</li> </ul>"},{"location":"research/react/feature-flags/","title":"Feature Flags","text":""},{"location":"research/react/feature-flags/#feature-flags","title":"Feature Flags","text":""},{"location":"research/react/feature-flags/#overview","title":"Overview","text":"<p>Feature flags are a powerful technique to control the visibility of features in your web application without deploying new code. This allows you to enable or disable features dynamically, test new functionality, and roll out changes gradually.</p> <p></p>"},{"location":"research/react/feature-flags/#1-create-a-feature-flags-file","title":"1. Create a Feature Flags File","text":"<p>First, you'll want to create a file where you define your feature flags. This can be an object or a module that you import into your components.</p> <p>For example, let's create a <code>featureFlags.js</code> file:</p> <pre><code>// featureFlags.js\nexport const featureFlags = {\n  newFeature: false, // New feature is disabled by default\n  betaFeature: true, // Beta feature is enabled by default\n};\n</code></pre>"},{"location":"research/react/feature-flags/#2-use-feature-flags-in-your-components","title":"2. Use Feature Flags in Your Components","text":"<p>Next, in your React components, you can use the feature flags to conditionally render different parts of the UI.</p> <pre><code>import React from 'react';\nimport { featureFlags } from './featureFlags';\n\nconst MyComponent = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to the App!&lt;/h1&gt;\n\n      {/* Conditionally render feature based on the flag */}\n      {featureFlags.newFeature ? (\n        &lt;div&gt;\n          &lt;h2&gt;New Feature&lt;/h2&gt;\n          &lt;p&gt;This is the new feature!&lt;/p&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;div&gt;\n          &lt;h2&gt;Old Feature&lt;/h2&gt;\n          &lt;p&gt;This is the old feature.&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n\n      {/* Another example of a feature flag */}\n      {featureFlags.betaFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;Beta Feature&lt;/h2&gt;\n          &lt;p&gt;This is the beta feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default MyComponent;\n</code></pre>"},{"location":"research/react/feature-flags/#3-managing-feature-flags-dynamically","title":"3. Managing Feature Flags Dynamically","text":"<p>For real-world applications, you may want to manage feature flags dynamically (e.g., via an API or from a config file). For this, you could fetch flags from a remote service and update the flags in your React app.</p> <p>Here\u2019s an example using React\u2019s <code>useEffect</code> hook to fetch feature flags:</p> <pre><code>import React, { useState, useEffect } from 'react';\n\nconst FeatureFlags = () =&gt; {\n  const [flags, setFlags] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    // Simulate an API call to fetch feature flags\n    setTimeout(() =&gt; {\n      setFlags({\n        newFeature: true,\n        betaFeature: false,\n      });\n      setLoading(false);\n    }, 1000);\n  }, []);\n\n  if (loading) {\n    return &lt;div&gt;Loading feature flags...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      {flags.newFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;New Feature&lt;/h2&gt;\n          &lt;p&gt;This is the new feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n      {flags.betaFeature &amp;&amp; (\n        &lt;div&gt;\n          &lt;h2&gt;Beta Feature&lt;/h2&gt;\n          &lt;p&gt;This is the beta feature!&lt;/p&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default FeatureFlags;\n</code></pre>"},{"location":"research/react/feature-flags/#4-use-a-feature-flagging-service-optional","title":"4. Use a Feature Flagging Service (Optional)","text":"<p>For a more sophisticated solution, you can use a third-party service like LaunchDarkly, Unleash, or Flagsmith. These services offer real-time management of feature flags, which is especially useful for larger teams and applications.</p> <p>Here\u2019s how you might use LaunchDarkly:</p> <ol> <li> <p>Install LaunchDarkly SDK:</p> <pre><code>npm install launchdarkly-react-client-sdk\n</code></pre> </li> <li> <p>Integrate LaunchDarkly:</p> <pre><code>import React, { useState, useEffect } from 'react';\nimport { withLDProvider, useFlags } from 'launchdarkly-react-client-sdk';\n\nconst MyComponent = () =&gt; {\n    const { newFeature, betaFeature } = useFlags(); // Get the feature flags\n\n    return (\n        &lt;div&gt;\n        {newFeature &amp;&amp; &lt;div&gt;New Feature is Enabled&lt;/div&gt;}\n        {betaFeature &amp;&amp; &lt;div&gt;Beta Feature is Enabled&lt;/div&gt;}\n        &lt;/div&gt;\n    );\n};\n\n// Wrap your app with the LaunchDarkly provider\nconst App = () =&gt; (\n    &lt;MyComponent /&gt;\n);\n\nexport default withLDProvider({\n    clientSideID: 'your-client-side-id',\n})(App);\n</code></pre> </li> </ol>"},{"location":"research/react/feature-flags/#5-environment-specific-flags","title":"5. Environment-Specific Flags","text":"<p>You may also want to have different feature flags for different environments (e.g., <code>production</code>, <code>staging</code>, or <code>development</code>). You can use environment variables to control this.</p> <p>In your <code>featureFlags.js</code>, use environment variables:</p> <pre><code>export const featureFlags = {\n  newFeature: process.env.REACT_APP_NEW_FEATURE === 'true',\n  betaFeature: process.env.REACT_APP_BETA_FEATURE === 'true',\n};\n</code></pre> <p>And set the environment variables in <code>.env</code>:</p> <pre><code>REACT_APP_NEW_FEATURE=true\nREACT_APP_BETA_FEATURE=false\n</code></pre> Summary <ul> <li>Static Feature Flags: Simple JavaScript objects for flag management.</li> <li>Dynamic Feature Flags: Fetch flags from an API or remote service.</li> <li>Third-party services: LaunchDarkly, Unleash, etc., provide more advanced features for managing flags in production.</li> <li>Environment-Specific Flags: Use environment variables to control features in different environments.</li> </ul> <p>By implementing feature flags, you can decouple code deployment from feature release, making it easier to test and deploy features with greater control.</p>"},{"location":"research/react/feature-flags/#for-beginners","title":"For Beginners","text":"<p>For a beginner, I recommend starting with static feature flags (using a simple JavaScript object or configuration file). It\u2019s easy to set up and doesn\u2019t require third-party services or complicated configurations. This approach allows you to get a feel for feature flagging without the added complexity, and it's a great way to implement feature flags in small to medium-sized projects.</p>"},{"location":"research/react/feature-flags/#why-start-with-static-feature-flags","title":"Why Start with Static Feature Flags?","text":"<ul> <li>Simple and quick to implement: You can start right away without worrying about external dependencies.</li> <li>Easy to understand: The logic is straightforward, and you get immediate feedback on how flags control your features.</li> <li>Great for small projects: If your app is still in early stages or you don\u2019t expect to scale your feature flagging system too much, this is a good starting point.</li> </ul>"},{"location":"research/react/feature-flags/#heres-a-recap-of-how-you-can-implement-it","title":"Here\u2019s a recap of how you can implement it:","text":"<ol> <li> <p>Create a <code>featureFlags.js</code> file that contains your flags:</p> <pre><code>// featureFlags.js\nexport const featureFlags = {\n    newFeature: false,  // Change this to true to enable the new feature\n    betaFeature: true,  // Change this to false to disable the beta feature\n};\n</code></pre> </li> <li> <p>Use flags in your components:</p> <pre><code>import React from 'react';\nimport { featureFlags } from './featureFlags';\n\nconst MyComponent = () =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Welcome to My App&lt;/h1&gt;\n\n            {featureFlags.newFeature &amp;&amp; (\n                &lt;div&gt;\n                    &lt;h2&gt;New Feature&lt;/h2&gt;\n                    &lt;p&gt;This is the new feature!&lt;/p&gt;\n                &lt;/div&gt;\n            )}\n\n            {featureFlags.betaFeature &amp;&amp; (\n                &lt;div&gt;\n                    &lt;h2&gt;Beta Feature&lt;/h2&gt;\n                    &lt;p&gt;This is the beta feature!&lt;/p&gt;\n                &lt;/div&gt;\n            )}\n        &lt;/div&gt;\n    );\n};\n\nexport default MyComponent;\n</code></pre> </li> <li> <p>Toggle flags based on your needs: When you need to enable/disable features, simply change the value of flags in the <code>featureFlags.js</code> file.</p> </li> </ol>"},{"location":"research/react/feature-flags/#when-should-you-move-to-a-more-advanced-solution","title":"When Should You Move to a More Advanced Solution?","text":"<p>Once you get comfortable with the basics, and if you find that your app grows larger or you need to manage feature flags across different environments (e.g., development, staging, production), then you can consider more advanced solutions like:</p> <ul> <li>Remote feature flag management (fetching flags from an API)</li> <li>Third-party services like LaunchDarkly or Unleash, which are useful for large applications or teams with more complex requirements (like A/B testing or gradual rollouts).</li> </ul> <p>But to start, static flags should be more than enough for managing features in your React app! Would you like more help with implementing this in your app?</p> <p>(Optional) Add More Features and Flags</p> <p>As your app grows, you can add more features and flags. Just remember to:</p> <ol> <li>Add new flags to the <code>featureFlags.js</code> file.</li> <li>Use the flags in the components where those features are implemented.</li> </ol> <pre><code>export const featureFlags = {\n  newFeature: false,\n  betaFeature: true,\n  darkMode: false,  // New flag for dark mode\n  specialOffer: true, // Special offer flag\n};\n</code></pre> <p>And in your components:</p> <pre><code>{featureFlags.darkMode &amp;&amp; (\n  &lt;div style={{ backgroundColor: 'black', color: 'white' }}&gt;\n    &lt;h2&gt;Dark Mode&lt;/h2&gt;\n    &lt;p&gt;This is dark mode.&lt;/p&gt;\n  &lt;/div&gt;\n)}\n\n{featureFlags.specialOffer &amp;&amp; (\n  &lt;div&gt;\n    &lt;h2&gt;Special Offer&lt;/h2&gt;\n    &lt;p&gt;Take advantage of this special offer!&lt;/p&gt;\n  &lt;/div&gt;\n)}\n</code></pre> <p>With this approach, you can easily manage which features are <code>enabled</code> or <code>disabled</code> in your app, without needing to redeploy every time you make a change to the feature availability.</p> <p></p>"},{"location":"research/react/feature-flags/#git-tricks","title":"Git Tricks","text":"<pre><code>git log --author=\"Bishow Thapa\" --since=\"midnight\" --oneline\n</code></pre>"},{"location":"research/react/feature-flags/#reference","title":"Reference","text":"<ul> <li>Youtube, What are Feature Flags? (IBM Technology)</li> <li>Github, LaunchDarkly Client-side SDK for React.js </li> <li>Feature Flagging </li> <li>Feature Flags: A Technique for Modifying Application Behavior without Altering Code</li> <li>Feature Flags and Modular Development: Ensuring Flexibility in Large Android Projects</li> <li> <p>Using Feature Flags aka Feature Toggles in Microservices</p> </li> <li> <p>JWT ROCKS</p> </li> <li>JWT Token</li> </ul>"},{"location":"research/react/hierarchical-structure/","title":"Hierarchical","text":"<p>The JSON you provided represents a hierarchical structure of employees and their reporting relationships within a company. Here's a breakdown of the data:</p> <p>Employee 11 (Dealser):</p> <ul> <li>Reporting Manager: Employee 7</li> <li>Department: UnitOne</li> <li>Email: tsering.sherpa@info.com.np</li> <li>Level Status: 1</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 7)</li> </ul> <p>Employee 7 (UnitOne Head):</p> <ul> <li>Reporting Manager: Employee 5</li> <li>Department: UnitOne</li> <li>Email: newuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 5)</li> </ul> <p>Employee 5 (Manager Head):</p> <ul> <li>Reporting Manager: Employee 3</li> <li>Department: Managers</li> <li>Email: testuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has direct reports: Yes (Employee 3)</li> </ul> <p>Employee 3 (CEO):</p> <ul> <li>No reporting manager (highest level in the organization)</li> <li>Department: Main</li> <li>Email: dummyuser@gmail.com</li> <li>Level Status: 3</li> <li>Can Approve: No</li> <li>Has no direct reports.</li> </ul> <p>This structure shows that Employee 3 (CEO) is at the top of the hierarchy, followed by Employee 5 (Manager Head), Employee 7 (UnitOne Head), and Employee 11 (Dealser). Each employee has various levels of reporting responsibilities, with no one currently authorized to approve anything (since canApprove is false for all).</p>"},{"location":"research/react/hierarchical-structure/#diagram","title":"Diagram:","text":"<p>Here\u2019s a simple process flow diagram to visualize the cascading flow:</p> <pre><code>+-----------------------------+\n|   Step 1: Initial State      |\n|   - Empty Approval Dropdown |\n|   - Empty Verifier Dropdown |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 2: API Call to Fetch |\n|   approvalPersonData        |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 3: Flatten Data      |\n|   - Approval options        |\n|   - Verifier options (empty)|\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 4: Populate Approval |\n|   Dropdown                  |\n|   - CEO, Manager Head,      |\n|     UnitOne Head, Dealser   |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 5: Select Approver   |\n|   (e.g., UnitOne Head)      |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 6: Find Direct       |\n|   Reports (e.g., Dealser)   |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 7: Populate Verifier |\n|   Dropdown (e.g., Dealser)  |\n+-----------------------------+\n               |\n               V\n+-----------------------------+\n|   Step 8: Final User Action |\n|   - User selects Verifier   |\n+-----------------------------+\n</code></pre>"},{"location":"research/react/hierarchical-structure/#visual-representation-of-the-flow","title":"Visual Representation of the Flow:","text":"<pre><code>+------------------------------------+\n|          Step 1: Approval          |\n|          Dropdown (First)          |\n|     - Select Approver (e.g., UnitOne Head) |\n+------------------------------------+\n                 |\n                 V\n+------------------------------------+\n|          Step 2: Verifier          |\n|          Dropdown (Second)        |\n|     - Populated based on selection |\n|     - (e.g., Dealser)              |\n+------------------------------------+\n</code></pre>"},{"location":"research/react/hierarchical-structure/#visual-representation-of-the-flow_1","title":"Visual Representation of the Flow:","text":"<pre><code>+------------------------------------+\n|          Step 1: Verifier          |\n|          Dropdown (First)          |\n|     - Select Verifier (e.g., Dealser) |\n+------------------------------------+\n                 |\n                 V\n+------------------------------------+\n|   Step 2: Approval Dropdown       |\n|   Populated Based on Verifier     |\n|     - Select Approver (e.g., UnitOne Head) |\n+------------------------------------+\n</code></pre> <pre><code>import React, { useState, useEffect } from \"react\";\nimport { Select, Form, Button } from \"antd\";\n\n// Helper function to flatten hierarchical data\nconst flattenEmployees = (employees) =&gt; {\n  return employees.map((emp) =&gt; ({\n    value: emp.id,\n    label: `${emp.positionName} (${emp.emailAddress})`,\n    children: emp.directReports ? flattenEmployees(emp.directReports) : [],\n  }));\n};\n\nconst App = () =&gt; {\n  const [approvalOptions, setApprovalOptions] = useState([]);\n  const [verifierOptions, setVerifierOptions] = useState([]);\n  const [selectedApproval, setSelectedApproval] = useState(null);\n  const [selectedVerifier, setSelectedVerifier] = useState(null);\n\n  // Fetch API data\n  const {\n    data: approvalPersonData,\n    isLoading: approvalPersonLoading,\n    error: approvalPersonError,\n  } = useGetForexApprovalPersonQuery(\n    {\n      sellingAmount: formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n    },\n    {\n      skip: !formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n    }\n  );\n\n  useEffect(() =&gt; {\n    if (approvalPersonData) {\n      // Flatten employees for Verifier dropdown\n      const flattenedVerifiers = flattenEmployees(\n        approvalPersonData.directReports || []\n      );\n      setVerifierOptions(flattenedVerifiers);\n    }\n  }, [approvalPersonData]);\n\n  const handleVerifierChange = (value) =&gt; {\n    setSelectedVerifier(value);\n\n    // Find the selected verifier and get their approver\n    const selectedVerifierObj = findEmployeeById(\n      value,\n      approvalPersonData.directReports || []\n    );\n    if (selectedVerifierObj &amp;&amp; selectedVerifierObj.reportingManagerId) {\n      const approver = findEmployeeById(\n        selectedVerifierObj.reportingManagerId,\n        approvalPersonData.directReports || []\n      );\n      setApprovalOptions(flattenEmployees(approver ? [approver] : []));\n    }\n  };\n\n  const handleApprovalChange = (value) =&gt; {\n    setSelectedApproval(value);\n  };\n\n  const findEmployeeById = (id, employees) =&gt; {\n    for (let emp of employees) {\n      if (emp.id === id) return emp;\n      if (emp.directReports) {\n        const found = findEmployeeById(id, emp.directReports);\n        if (found) return found;\n      }\n    }\n    return null;\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;Form&gt;\n        &lt;Form.Item label=\"Verifier\"&gt;\n          &lt;Select\n            value={selectedVerifier}\n            onChange={handleVerifierChange}\n            placeholder=\"Select Verifier\"\n            options={verifierOptions}\n            loading={approvalPersonLoading}\n            disabled={approvalPersonLoading || approvalPersonError}\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Form.Item label=\"Approval\"&gt;\n          &lt;Select\n            value={selectedApproval}\n            onChange={handleApprovalChange}\n            placeholder=\"Select Approver\"\n            options={approvalOptions}\n            disabled={!approvalOptions.length}\n          /&gt;\n        &lt;/Form.Item&gt;\n\n        &lt;Button type=\"primary\"&gt;Submit&lt;/Button&gt;\n      &lt;/Form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default App;\n</code></pre>"},{"location":"research/react/hierarchical-structure/#updated","title":"UPDATED","text":"<pre><code>{\n  \"id\": 11,\n  \"reportingManagerId\": 7,\n  \"aspNetUserId\": \"eba59683-e54e-4708-1730-08dd2e2eef11\",\n  \"departmentId\": 7,\n  \"positionName\": \"Dealser\",\n  \"approvalLimit\": 0,\n  \"outstandingLimit\": 0,\n  \"departmentName\": \"UnitOne\",\n  \"fullName\": null,\n  \"emailAddress\": \"tsering.sherpa@info.com.np\",\n  \"levelStatus\": 1,\n  \"canApprove\": false,\n  \"directReports\": [\n    {\n      \"id\": 7,\n      \"reportingManagerId\": 5,\n      \"aspNetUserId\": \"121f09ee-af3e-40ff-eeba-08dd2baa3cea\",\n      \"departmentId\": 7,\n      \"positionName\": \"UnitOne Head\",\n      \"approvalLimit\": 0,\n      \"outstandingLimit\": 0,\n      \"departmentName\": \"UnitOne\",\n      \"fullName\": null,\n      \"emailAddress\": \"newuser@gmail.com\",\n      \"levelStatus\": 3,\n      \"canApprove\": false,\n      \"directReports\": [\n        {\n          \"id\": 5,\n          \"reportingManagerId\": 3,\n          \"aspNetUserId\": \"da6d73b6-7e3a-4cea-e0bf-08dd2b23715a\",\n          \"departmentId\": 3,\n          \"positionName\": \"Manager Head\",\n          \"approvalLimit\": 0,\n          \"outstandingLimit\": 0,\n          \"departmentName\": \"Managers\",\n          \"fullName\": null,\n          \"emailAddress\": \"testuser@gmail.com\",\n          \"levelStatus\": 3,\n          \"canApprove\": false,\n          \"directReports\": [\n            {\n              \"id\": 3,\n              \"reportingManagerId\": null,\n              \"aspNetUserId\": \"cb982264-fbe7-457f-5a23-08dd28cc95d0\",\n              \"departmentId\": 1,\n              \"positionName\": \"CEO\",\n              \"approvalLimit\": 0,\n              \"outstandingLimit\": 0,\n              \"departmentName\": \"Main\",\n              \"fullName\": null,\n              \"emailAddress\": \"dummyuser@gmail.com\",\n              \"levelStatus\": 3,\n              \"canApprove\": false,\n              \"directReports\": []\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"research/react/hierarchical-structure/#hierarchical-structure-from-the-updated-data","title":"Hierarchical Structure from the Updated Data:","text":"<pre><code>- **Dealser (ID: 11)**\n  - Reports to **UnitOne Head (ID: 7)**\n  - **UnitOne Head (ID: 7)**\n    - Reports to **Manager Head (ID: 5)**\n    - **Manager Head (ID: 5)**\n      - Reports to **CEO (ID: 3)**\n      - **CEO (ID: 3)** has no reporting manager (top of the hierarchy)\n</code></pre>"},{"location":"research/react/improved-code/","title":"Improved Code","text":""},{"location":"research/react/improved-code/#improved-code","title":"Improved code","text":"Improved Code<pre><code>export function newCurrentVerifiers(data) {\n    // Ensure data is an array before proceeding\n    if (!Array.isArray(data)) return [];\n\n    const { VERIFIER } = HIERARCHY_LEVEL_STATUS || {}; // Destructure for cleaner access\n\n    // Filter only items with the correct levelStatus\n    return data.filter((item) =&gt; item?.levelStatus === VERIFIER);\n}\n</code></pre> Old Code<pre><code>export function newCurrentVerifiers(data) {\n    if (!Array.isArray(data)) return [];\n\n    let verifiersOnly = data?.filter(\n        (item) =&gt; HIERARCHY_LEVEL_STATUS?.VERIFIER === item?.levelStatus\n    );\n\n    return verifiersOnly;\n}\n</code></pre>"},{"location":"research/react/javascript-closures/","title":"JS Closure","text":""},{"location":"research/react/javascript-closures/#javascript-closures","title":"JavaScript Closures","text":""},{"location":"research/react/javascript-closures/#what-is-a-closure","title":"What is a Closure?","text":"<p>A closure is a feature in JavaScript where an inner function has access to the outer (enclosing) function's variables. A closure has three scopes:</p> <ol> <li>Local scope (Own scope)</li> <li>Outer function\u2019s scope</li> <li>Global scope</li> </ol>"},{"location":"research/react/javascript-closures/#why-use-closures","title":"Why Use Closures?","text":"<p>Closures are used in JavaScript for several reasons:</p> <ul> <li>To create private variables or methods.</li> <li>To emulate block scope in pre-ES6 JavaScript.</li> <li>To maintain a reference to variables from an outer scope.</li> </ul>"},{"location":"research/react/javascript-closures/#practical-examples","title":"Practical Examples","text":""},{"location":"research/react/javascript-closures/#example-1-basic-closure","title":"Example 1: Basic Closure","text":"<pre><code>function outerFunction() {\n  let outerVariable = \"I am from outer function\";\n\n  function innerFunction() {\n    console.log(outerVariable); // innerFunction has access to outerVariable\n  }\n\n  return innerFunction;\n}\n\nconst closureFunction = outerFunction();\nclosureFunction(); // Output: I am from outer function\n</code></pre>"},{"location":"research/react/javascript-closures/#example-2-data-privacy","title":"Example 2: Data Privacy","text":"<p>Closures can be used to create private variables.</p> <pre><code>function createCounter() {\n  let count = 0; // Private variable\n\n  return {\n    increment: function () {\n      count++;\n      return count;\n    },\n    decrement: function () {\n      count--;\n      return count;\n    },\n    getCount: function () {\n      return count;\n    },\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter.increment()); // Output: 1\nconsole.log(counter.increment()); // Output: 2\nconsole.log(counter.decrement()); // Output: 1\nconsole.log(counter.getCount()); // Output: 1\n</code></pre>"},{"location":"research/react/javascript-closures/#example-3-emulating-block-scope-pre-es6","title":"Example 3: Emulating Block Scope (pre-ES6)","text":"<p>Before ES6, JavaScript did not have block scope. Closures were used to emulate block scope.</p> <pre><code>for (var i = 1; i &lt;= 3; i++) {\n  (function (i) {\n    setTimeout(function () {\n      console.log(i); // Output: 1, 2, 3\n    }, i * 1000);\n  })(i);\n}\n</code></pre>"},{"location":"research/react/javascript-closures/#example-4-function-factory","title":"Example 4: Function Factory","text":"<p>Closures can be used to create function factories.</p> <pre><code>function createGreeter(greeting) {\n  return function (name) {\n    console.log(greeting + \", \" + name);\n  };\n}\n\nconst sayHello = createGreeter(\"Hello\");\nsayHello(\"Alice\"); // Output: Hello, Alice\n\nconst sayHi = createGreeter(\"Hi\");\nsayHi(\"Bob\"); // Output: Hi, Bob\n</code></pre>"},{"location":"research/react/javascript-closures/#conclusion","title":"Conclusion","text":"<p>Closures are a powerful feature in JavaScript that allow functions to access variables from an outer scope. They are useful for creating private variables, emulating block scope, and generating function factories. Understanding closures is essential for mastering JavaScript and writing more efficient and secure code.</p>"},{"location":"research/react/linting/","title":"Linting","text":""},{"location":"research/react/linting/#linting","title":"Linting","text":"eslint.config.js<pre><code>import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport react from \"eslint-plugin-react\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\n\nexport default [\n  { ignores: [\"dist\"] },\n  {\n    files: [\"**/*.{js,jsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: \"latest\",\n        ecmaFeatures: { jsx: true },\n        sourceType: \"module\",\n      },\n    },\n    settings: { react: { version: \"18.3\" } },\n    plugins: {\n      react,\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      ...react.configs.recommended.rules,\n      ...react.configs[\"jsx-runtime\"].rules,\n      ...reactHooks.configs.recommended.rules,\n      \"react/jsx-no-target-blank\": \"off\",\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"no-unused-vars\": [\"warn\", { argsIgnorePattern: \"^_\" }],\n      // 'react/no-unescaped-entities': ['error', { 'strings': true, 'jsx': true }],\n      \"react/no-unescaped-entities\": \"warn\",\n    },\n  },\n];\n</code></pre> package.json<pre><code>\"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint . --fix\",\n    \"format\": \"prettier --write .\",\n    \"preview\": \"vite preview\",\n    \"prepare\": \"husky\"\n},\n\"lint-staged\": {\n    \"*.{js,jsx}\": [\n        \"prettier --write\",\n        \"eslint --fix\"\n    ]\n},\n</code></pre> <pre><code>/my-app\n  \u251c\u2500\u2500 /public\n  \u251c\u2500\u2500 /src\n  \u2502   \u251c\u2500\u2500 /assets\n  \u2502   \u2502   \u2514\u2500\u2500 (Images, Icons, Fonts, etc.)\n  \u2502   \u251c\u2500\u2500 /components\n  \u2502   \u2502   \u2514\u2500\u2500 (Reusable components like Button, Input, etc.)\n  \u2502   \u251c\u2500\u2500 /features\n  \u2502   \u2502   \u251c\u2500\u2500 /auth\n  \u2502   \u2502   \u2502   \u251c\u2500\u2500 AuthContext.js (or any feature-specific logic)\n  \u2502   \u2502   \u2502   \u2514\u2500\u2500 AuthPage.js (if there is a specific page for auth)\n  \u2502   \u2502   \u2514\u2500\u2500 /todo\n  \u2502   \u2502       \u251c\u2500\u2500 TodoStore.js (zustand store)\n  \u2502   \u2502       \u251c\u2500\u2500 TodoList.js (Todo component)\n  \u2502   \u2502       \u2514\u2500\u2500 TodoInput.js (Input for adding todos)\n  \u2502   \u251c\u2500\u2500 /hooks\n  \u2502   \u2502   \u2514\u2500\u2500 (Custom hooks like useAuth, useTodo, etc.)\n  \u2502   \u251c\u2500\u2500 /pages\n  \u2502   \u2502   \u251c\u2500\u2500 HomePage.js\n  \u2502   \u2502   \u251c\u2500\u2500 LoginPage.js\n  \u2502   \u2502   \u2514\u2500\u2500 TodoPage.js\n  \u2502   \u251c\u2500\u2500 /store\n  \u2502   \u2502   \u251c\u2500\u2500 useStore.js (Central state using Zustand)\n  \u2502   \u251c\u2500\u2500 /styles\n  \u2502   \u2502   \u251c\u2500\u2500 /global.css (Tailwind imports and custom styles)\n  \u2502   \u251c\u2500\u2500 /utils\n  \u2502   \u2502   \u2514\u2500\u2500 (Helper functions, API utils, etc.)\n  \u251c\u2500\u2500 /tailwind.config.js\n  \u251c\u2500\u2500 /postcss.config.js\n  \u251c\u2500\u2500 /package.json\n  \u2514\u2500\u2500 /index.js (Entry point)\n</code></pre>"},{"location":"research/react/linting/#using-zustand-for-state-management","title":"Using Zustand for State Management","text":"<p>Zustand helps manage the global state in a simple way. Here's an example:</p> Example of a Zustand store (useStore.js)<pre><code>import create from 'zustand';\n\nconst useStore = create((set) =&gt; ({\n  todos: [],\n  addTodo: (todo) =&gt; set((state) =&gt; ({ todos: [...state.todos, todo] })),\n  removeTodo: (todoId) =&gt; set((state) =&gt; ({\n    todos: state.todos.filter((todo) =&gt; todo.id !== todoId),\n  })),\n}));\n\nexport default useStore;\n</code></pre> Using the Zustand store in a component<pre><code>import React, { useState } from 'react';\nimport useStore from '../store/useStore';\n\nconst TodoList = () =&gt; {\n  const todos = useStore((state) =&gt; state.todos);\n  const addTodo = useStore((state) =&gt; state.addTodo);\n  const [newTodo, setNewTodo] = useState('');\n\n  const handleAddTodo = () =&gt; {\n    if (newTodo.trim()) {\n      addTodo({ id: Date.now(), text: newTodo });\n      setNewTodo('');\n    }\n  };\n\n  return (\n    &lt;div className=\"space-y-4\"&gt;\n      &lt;input\n        className=\"border p-2 rounded\"\n        value={newTodo}\n        onChange={(e) =&gt; setNewTodo(e.target.value)}\n        placeholder=\"Enter a new todo\"\n      /&gt;\n      &lt;button\n        className=\"bg-blue-500 text-white p-2 rounded\"\n        onClick={handleAddTodo}\n      &gt;\n        Add Todo\n      &lt;/button&gt;\n      &lt;ul className=\"list-disc pl-6\"&gt;\n        {todos.map((todo) =&gt; (\n          &lt;li key={todo.id} className=\"flex justify-between items-center\"&gt;\n            {todo.text}\n            &lt;button\n              className=\"ml-2 text-red-500\"\n              onClick={() =&gt; useStore.getState().removeTodo(todo.id)}\n            &gt;\n              Remove\n            &lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default TodoList;\n</code></pre> <pre><code>import axios from 'axios';\n\nconst useStore = create((set) =&gt; ({\n  todos: [],\n  loading: false,\n  error: null,\n\n  setLoading: (isLoading) =&gt; set({ loading: isLoading }),\n  setError: (error) =&gt; set({ error }),\n  setTodos: (todos) =&gt; set({ todos }),\n\n  fetchTodos: async () =&gt; {\n    set({ loading: true, error: null });\n    try {\n      const response = await axios.get('https://jsonplaceholder.typicode.com/todos');\n      set({ todos: response.data });\n    } catch (error) {\n      set({ error: 'Failed to fetch todos' });\n    } finally {\n      set({ loading: false });\n    }\n  },\n}));\n</code></pre>"},{"location":"research/react/linting/#zustand-core-function","title":"Zustand Core Function","text":"<p>In Zustand, the core function for creating a store and accessing its state is <code>create()</code>. However, you might encounter different terms or functions, such as <code>createStore</code> or <code>useStore</code>, depending on the setup or how state management is structured in your app. Below is an explanation of these terms and when you should use each one:</p> <p>Summary: When to Use Each Function</p> <ul> <li><code>create()</code>: Use when creating the store (central place for your global state).</li> <li><code>set()</code>: Use when updating the state, either inside actions or components.</li> <li><code>get()</code>: Use when you need to read the current state, often inside actions or for conditional logic.</li> <li><code>subscribe()</code>: Use when you want to listen to specific state changes outside of React components.</li> <li><code>destroy()</code>: Use for cleaning up the store, particularly in non-React environments.</li> <li><code>persist()</code>: Use when you need to persist the store\u2019s state across page reloads (e.g., user preferences).</li> <li><code>devtools()</code>: Use in development to enable debugging and inspection via Redux DevTools.</li> </ul> Summary <ul> <li>Use <code>create()</code> to set up your Zustand store.</li> <li>Use <code>useStore</code> to interact with the store inside your React components.</li> <li><code>createStore()</code> is not part of the standard Zustand API, and you don\u2019t need it unless you're working with a custom implementation.</li> </ul> <p>Install Tailwind CSS, PostCSS, Autoprefixer, and Sass</p> <pre><code>pnpm add -D tailwindcss postcss autoprefixer sass\n</code></pre>"},{"location":"research/react/msw-advanced/","title":"MSW Advanced","text":""},{"location":"research/react/msw-advanced/#msw-advanced","title":"MSW Advanced","text":"<pre><code>import React, { useEffect } from \"react\";\nimport { Form } from \"antd\";\n\n// Assuming you have antd form setup\nconst YourComponent = () =&gt; {\n  const [form] = Form.useForm();\n  const [rate, setRate] = React.useState(0);\n  const [buyingAmount, setBuyingAmount] = React.useState(0);\n  const [isMultiplicationStatus, setIsMultiplicationStatus] =\n    React.useState(true);\n\n  useEffect(() =&gt; {\n    if (isMultiplicationStatus) {\n      // Multiply rate and buyingAmount (or another field like sellingAmount)\n      const calculatedValue = rate * buyingAmount;\n      form.setFieldsValue({\n        [FOREX_DEAL.SELLING_AMOUNT]: calculatedValue,\n      });\n      console.log(\"XXX MULTIPLY\");\n    } else {\n      // Divide rate by buyingAmount (or another field like sellingAmount)\n      if (buyingAmount !== 0) {\n        // Avoid division by zero\n        const calculatedValue = rate / buyingAmount;\n        form.setFieldsValue({\n          [FOREX_DEAL.SELLING_AMOUNT]: calculatedValue,\n        });\n      }\n      console.log(\"XXX DIVIDE\");\n    }\n  }, [rate, buyingAmount, isMultiplicationStatus, form]);\n\n  return (\n    &lt;Form form={form}&gt;\n      {/* Your form fields go here */}\n      &lt;Form.Item name=\"rate\" label=\"Rate\"&gt;\n        &lt;input\n          type=\"number\"\n          value={rate}\n          onChange={(e) =&gt; setRate(e.target.value)}\n        /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item name=\"buyingAmount\" label=\"Buying Amount\"&gt;\n        &lt;input\n          type=\"number\"\n          value={buyingAmount}\n          onChange={(e) =&gt; setBuyingAmount(e.target.value)}\n        /&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item name={FOREX_DEAL.SELLING_AMOUNT} label=\"Selling Amount\"&gt;\n        &lt;input type=\"number\" disabled /&gt;\n      &lt;/Form.Item&gt;\n    &lt;/Form&gt;\n  );\n};\n</code></pre> <pre><code>const [buyingAmount, setBuyingAmount] = useState(\n  form.getFieldValue(FOREX_DEAL.BUYING_AMOUNT)\n);\nconst [rate, setRate] = useState(form.getFieldValue(FOREX_DEAL.RATE));\n\nuseEffect(() =&gt; {\n  console.log(\"XXX\", rateConversionData);\n  form.setFieldsValue({\n    [FOREX_DEAL.RATE]: rateConversionData?.rate,\n  });\n\n  // This ensures that the state is updated when rate or buyingAmount changes\n  setBuyingAmount(form?.getFieldValue(FOREX_DEAL.BUYING_AMOUNT) || 0);\n  setRate(form?.getFieldValue(FOREX_DEAL.RATE) || 0);\n\n  console.log(\"YYY: \", buyingAmount, \"rate: \", rate);\n}, [rateConversionData]); // Only watch rateConversionData here\n</code></pre>"},{"location":"research/react/msw-advanced/#reference","title":"Reference","text":"<ul> <li>msw migration 1.x \u2192 2.x</li> <li>Mock APIs with Mock Service Worker in any framework.</li> </ul>"},{"location":"research/react/npm-publish/","title":"NPM Publish Package","text":""},{"location":"research/react/npm-publish/#npm-publish","title":"NPM Publish","text":""},{"location":"research/react/npm-publish/#types-of-packages-you-can-publish","title":"Types of Packages You Can Publish","text":"<p>You can publish a variety of different types of npm packages:</p> <ol> <li> <p>Utility Libraries</p> <ul> <li>A package providing utility functions, such as string manipulation, date formatting, etc.</li> <li>Example: <code>lodash</code>, <code>moment</code></li> </ul> </li> <li> <p>CLI Tools</p> <ul> <li>Command-line interface tools that are used via the terminal.</li> <li>Example: <code>create-react-app</code>, <code>eslint</code></li> </ul> <p>To create a CLI tool, use the \"bin\" field in your package.json to specify the executable file.</p> </li> <li> <p>Frameworks/Plugins</p> <ul> <li>Frameworks or plugins that integrate with other tools or libraries.</li> <li>Example: React components, Express middleware.</li> </ul> </li> <li> <p>Frontend Packages</p> <ul> <li>Packages designed for use in the browser, such as UI libraries or front-end components.</li> <li>Make sure to bundle and transpile your code properly before publishing frontend packages.</li> </ul> </li> </ol>"},{"location":"research/react/npm-publish/#1-publish-the-package-to-npm","title":"1. Publish the Package to npm","text":"<p>To create an <code>npm</code> package, you need to:</p> <p>a. Set up a new directory</p> <ul> <li> <p>Create a new folder for your project, then navigate to it in your terminal.</p> <pre><code>mkdir my-package\ncd my-package\n</code></pre> </li> </ul> <p>b. Initialize the project with <code>package.json</code></p> <ul> <li> <p>Run <code>npm init</code> or <code>npm init -y</code> to generate a <code>package.json</code> file. The <code>-y</code> flag automatically fills in the default values for you.</p> <pre><code>npm init\n# or\nnpm init -y\n</code></pre> <p>This file contains metadata about your package (name, version, description, entry point, etc.).</p> </li> </ul> <p>c. Create your package code</p> <ul> <li> <p>Write your JavaScript code in the appropriate files. For example, <code>index.js</code> can be your entry point file.</p> index.js<pre><code>// greet.js\n\n// Function to greet\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\n\n// Function to say goodbye\nfunction bye(name) {\n  return `Goodbye, ${name}!`;\n}\n\n// Export both functions\nmodule.exports = {\n  greet,\n  bye,\n};\n</code></pre> </li> </ul> <p>d. Add dependencies (if any)</p> <ul> <li> <p>If your package requires external libraries, you can add them using <code>npm install</code>:</p> bash<pre><code>npm install lodash --save\n</code></pre> </li> </ul> <p>This will add <code>lodash</code> as a dependency in your <code>package.json</code>.</p>"},{"location":"research/react/npm-publish/#2-publish-the-package-to-npm","title":"2. Publish the Package to <code>npm</code>","text":"<p>a. Create an npm account</p> <ul> <li> <p>Before publishing, you'll need an npm account. You can create one at npmjs.com. Once you've created your account, log in from the terminal:</p> <pre><code>npm login\n</code></pre> </li> </ul> <p>You\u2019ll be prompted for your username, password, and email.</p> <p>b. Add your package details to <code>package.json</code></p> <ul> <li>Make sure the <code>name</code>, <code>version</code>, and <code>main</code> fields are filled correctly in your <code>package.json</code>.</li> </ul> <p>c. Publish the package</p> <ul> <li> <p>Run the following command to publish your package to npm:</p> <pre><code>npm publish\n</code></pre> </li> </ul> Important Notes <ul> <li>Package Name: If you\u2019re publishing a public package, make sure the name is unique on npm. You can search for the name to avoid conflicts.</li> <li>Versioning: You can't publish the same version twice. Update the <code>version</code> field in <code>package.json</code> (use semantic versioning: major.minor.patch).</li> </ul> <pre><code>\"version\": \"1.0.1\"\n</code></pre> <p>d. Private packages (optional)</p> <ul> <li> <p>If you want to publish a private package, add <code>\"private\": true</code> in your <code>package.json</code>, or use a scoped package with a team account for private publishing.</p> <pre><code>npm publish --access=restricted\n</code></pre> </li> </ul>"},{"location":"research/react/npm-publish/#3-using-your-published-package","title":"3. Using Your Published Package","text":"<p>To use your published package in another project:</p> <p>a. Install the package</p> <ul> <li> <p>In the project where you want to use the package, run:</p> <pre><code>npm install &lt;package-name&gt;\n</code></pre> </li> </ul> <p>b. Import and use the package</p> <ul> <li> <p>After installation, you can require the package in your code.</p> <pre><code>const greet = require(\"&lt;package-name&gt;\");\n\nconsole.log(greet(\"World\")); // Example output: \"Hello, World!\"\n</code></pre> </li> </ul>"},{"location":"research/react/npm-publish/#conclusion","title":"Conclusion","text":"<ul> <li>Create: Use <code>npm init</code> to set up your project and create your code.</li> <li>Publish: Make sure you have an npm account, and use <code>npm publish</code> to upload your package.</li> <li>Use: Install your package with <code>npm install</code> and use it by requiring it in your code.</li> </ul> <p>The type of package you publish depends on what you're building, whether it's a utility, a CLI tool, or a framework/plugin.</p>"},{"location":"research/react/react-dev-tools/","title":"React Dev Tools","text":""},{"location":"research/react/react-dev-tools/#react-developer-tools","title":"React Developer Tools","text":"<p>React Developer Tools is a tool that allows you to inspect a React tree, including the component hierarchy, props, state, and more. To get started, just open the Firefox devtools and switch to the \"\u269b\ufe0f Components\" or \"\u269b\ufe0f Profiler\" tab.</p> <p></p>"},{"location":"research/react/react-dev-tools/#components","title":"\u269b\ufe0f Components","text":""},{"location":"research/react/react-dev-tools/#profiler","title":"\u269b\ufe0f Profiler","text":""},{"location":"research/react/redux-architecture/","title":"Redux","text":""},{"location":"research/react/redux-architecture/#redux-architecture","title":"Redux Architecture","text":""},{"location":"research/react/redux-architecture/#redux-architecture_1","title":"Redux Architecture","text":"<ul> <li> <p>Option 1: Set <code>keepUnusedDataFor: 0</code> to immediately discard data when it's no longer in use.</p> <p>This option works best when:</p> <ul> <li>Data is either very dynamic or user-specific, where you don\u2019t want the same data being reused.</li> <li>You have a lot of short-lived requests, and keeping the data in memory could lead to unnecessary overhead.</li> </ul> </li> <li> <p>Option 2: Use <code>providesTags</code> and <code>invalidatesTags</code> to have more control over when to invalidate cache and when to keep data.</p> <p>This is ideal when:</p> <ul> <li>You have more complex data relationships where invalidation or cache updates need to be handled manually.</li> <li>You need to share cached data between multiple components but also need to control when to refresh or invalidate that cache.</li> </ul> </li> </ul> <p>In general, use <code>keepUnusedDataFor: 0</code> for simple use cases where caching is unnecessary, and use <code>providesTags</code>/<code>invalidatesTags</code> when you need more control over cache updates, invalidation, and relationships between resources.</p> <p>Difference</p> <ul> <li><code>refetchOnMountOrArgChange</code> ensures that data is refetched when a component mounts or when the query arguments change.</li> <li><code>keepUserData: 0</code> is used for cache management to clear stale data after mutations or invalidations to avoid using outdated cache.</li> </ul> <p>These are both advanced features for managing data fetching and caching, but they serve different purposes in your application workflow.</p>"},{"location":"research/react/redux-architecture/#reference","title":"Reference","text":"<ul> <li>Introduction to Redux (Action, Reducers and Store)</li> <li>Fetch Data with Redux-Thunk in React Native App</li> <li>React + Redux architecture</li> <li>React - Redux Saga</li> <li>Implementing Redux Architecture Using React Hooks R Reactjs</li> </ul>"},{"location":"research/react/redux-persist-local-or-session/","title":"Redux Persist Local and Session","text":""},{"location":"research/react/redux-persist-local-or-session/#local-or-session-storage","title":"Local or Session Storage","text":"<p>In the context of Redux Toolkit (RTK), the <code>persistConfig</code> you're referring to is likely used with the redux-persist library, which helps persist Redux state to either <code>localStorage</code> or <code>sessionStorage</code> (among other storage options).</p> ExampleExplanation <pre><code>const persistConfig = {\n    key: \"root\",  // the key used to store the Redux state in the storage\n    storage,      // determines the storage method (e.g., localStorage or sessionStorage)\n    whitelist: [\"auth\"],  // specifies which part of the state to persist (in this case, \"auth\")\n};\n</code></pre> <p>Here\u2019s the breakdown of how storage works:</p> <p>Storage Type: The <code>storage</code> variable can be configured to use different types of web storage, such as <code>localStorage</code> or <code>sessionStorage</code>. These are the two most common choices.</p> <ul> <li>If you use <code>localStorage</code>, the data will persist even after the browser window is closed. It's not cleared until you manually delete it or clear your browser data.</li> <li>If you use <code>sessionStorage</code>, the data is stored for the duration of the page session. It is cleared when the browser or tab is closed.</li> </ul> <p>You can define which storage you want to use by importing either:</p> <pre><code>import storage from \"redux-persist/lib/storage\";  // for localStorage\n</code></pre> <p>or</p> <pre><code>import storageSession from \"redux-persist/lib/storage/session\";  // for sessionStorage\n</code></pre> <p>By default, when you use redux-persist, it will save the persisted state in either <code>localStorage</code> or <code>sessionStorage</code> under the key specified in <code>persistConfig.key</code>. In this case, the state for the <code>auth</code> slice will be saved under the key <code>\"root\"</code> in the selected storage type (<code>localStorage</code> or <code>sessionStorage</code>).</p>"},{"location":"research/react/rtk-lazy-query/","title":"RTK LazyQuery","text":""},{"location":"research/react/rtk-lazy-query/#lazy-query","title":"Lazy Query","text":"useDebounce Hook<pre><code>import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() =&gt; {\n    const handler = setTimeout(() =&gt; {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () =&gt; {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport default useDebounce;\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/","title":"RTK Optimistic","text":"Shallow Copy vs. Deep Copy: <ul> <li>Both <code>Object.assign()</code> and the spread operator only perform shallow copies, meaning if your object contains nested objects, the references to those nested objects are copied, not the actual values.</li> <li>If you need a deep copy of an object, neither <code>Object.assign()</code> nor the spread operator will suffice, and you would need a custom solution or use libraries like <code>lodash</code>'s <code>cloneDeep()</code>.</li> </ul>"},{"location":"research/react/rtk-optimistic-mutation/#optimistic-post-and-put","title":"Optimistic Post and Put","text":"<p>To perform an optimistic update with <code>POST</code> requests (like you are doing with <code>PUT</code>), you can follow a similar approach. Optimistic updates involve temporarily updating the state (optimistically assuming that the request will succeed) and rolling back if the request fails.</p> <p>Here's how you can modify the <code>postRoles</code> mutation to include an optimistic update:</p> <ol> <li>Optimistic Update: Update the state right after dispatching the mutation, before the server responds.</li> <li>Rollback: Undo the optimistic update in case of an error.</li> </ol> <p>You can achieve this by utilizing the same <code>onQueryStarted</code> lifecycle method as you have in <code>putRoles</code>.</p> <p>Here\u2019s how you could implement it:</p> <pre><code>export const rolesApi = createApi({\n  reducerPath: \"rolesApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"Roles\"],\n  endpoints: (builder) =&gt; ({\n    getRoles: builder.query({\n      query: () =&gt; ({\n        url: \"Roles/list\",\n        method: HTTP_METHODS.GET,\n      }),\n    }),\n\n    postRoles: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"Roles/create\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n\n      async onQueryStarted(data, { dispatch, queryFulfilled }) {\n        // Optimistic Update\n        const patchResult = dispatch(\n          rolesApi.util.updateQueryData(\"getRoles\", undefined, (draft) =&gt; {\n            draft.push(data); // Optimistically add the new role\n          })\n        );\n\n        try {\n          // Wait for the request to be fulfilled\n          await queryFulfilled;\n        } catch (error) {\n          // If the request fails, undo the optimistic update\n          patchResult.undo();\n        }\n      },\n    }),\n\n    putRoles: builder.mutation({\n      query: ({ id, data }) =&gt; ({\n        url: `Roles/edit/${id}`,\n        method: HTTP_METHODS.PUT,\n        data,\n      }),\n\n      async onQueryStarted({ id, data }, { dispatch, queryFulfilled }) {\n        const patchResult = dispatch(\n          rolesApi.util.updateQueryData(\"getRoles\", undefined, (draft) =&gt; {\n            const user = draft.find((user) =&gt; user.id === id);\n            if (user) {\n              Object.assign(user, data); // Optimistically update the role\n            }\n          })\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo(); // Rollback if the update fails\n        }\n      },\n    }),\n  }),\n});\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#key-changes","title":"Key Changes:","text":"<ol> <li> <p><code>postRoles</code> Mutation:</p> <ul> <li>In the <code>onQueryStarted</code> lifecycle, we perform an optimistic update by dispatching the <code>updateQueryData</code> for the <code>getRoles</code> query.</li> <li>We optimistically add the new role (<code>data</code>) to the <code>draft</code> array (which holds the cached roles).</li> <li>If the <code>POST</code> request fails, we call <code>patchResult.undo()</code> to roll back the optimistic update.</li> </ul> </li> </ol>"},{"location":"research/react/rtk-optimistic-mutation/#considerations","title":"Considerations:","text":"<ul> <li>Ensure that the optimistic data added or updated is aligned with the final server response (e.g., if there are any server-side modifications to the role data upon creation).</li> <li>The <code>queryFulfilled</code> is awaited to ensure that the optimistic update is not persisted unless the request succeeds.</li> </ul> <p>This approach will give you the same kind of optimistic update behavior as you have with the <code>PUT</code> mutation but for creating new roles.</p>"},{"location":"research/react/rtk-optimistic-mutation/#put-post","title":"Put &amp; Post","text":"<p>The difference between using <code>draft.push(data)</code> for the POST mutation and <code>Object.assign(user, data)</code> for the PUT mutation comes down to the nature of the operations they represent:</p>"},{"location":"research/react/rtk-optimistic-mutation/#1-post-creating-a-new-resource","title":"1. POST (Creating a New Resource):","text":"<ul> <li>When you send a <code>POST</code> request, you're creating a new resource.</li> <li>In this case, you are adding a new item (a new role, for example) to the existing list of items (e.g., <code>draft</code>).</li> <li><code>draft.push(data)</code> adds the newly created role (<code>data</code>) to the cached list of roles (<code>draft</code>).</li> <li>The idea is that you're appending the new item to the list because it didn't exist previously, and you don't have to worry about modifying an existing item in the list.</li> </ul> Example <ul> <li>Before the <code>POST</code> request: <code>draft = [{ id: 1, name: \"Admin\" }]</code></li> <li>After the optimistic update with <code>draft.push(data)</code>: <code>draft = [{ id: 1, name: \"Admin\" }, { id: 2, name: \"Manager\" }]</code></li> </ul>"},{"location":"research/react/rtk-optimistic-mutation/#2-put-updating-an-existing-resource","title":"2. PUT (Updating an Existing Resource):","text":"<ul> <li>When you send a <code>PUT</code> request, you're updating an existing resource.</li> <li>You are modifying an existing item in the list, not adding a new one.</li> <li><code>Object.assign(user, data)</code> merges the updated properties (<code>data</code>) into the existing <code>user</code> object, which represents the role you are updating.</li> <li>This is important because you're modifying an existing item (the role), not creating a new one. The goal here is to mutate the current object with the new data.</li> </ul> Example <ul> <li>Before the <code>PUT</code> request: <code>draft = [{ id: 1, name: \"Admin\" }]</code></li> <li>After the optimistic update with <code>Object.assign(user, data)</code>: <code>draft = [{ id: 1, name: \"Manager\" }]</code> (assuming <code>data = { name: \"Manager\" })</code></li> </ul>"},{"location":"research/react/rtk-optimistic-mutation/#summary-of-differences","title":"Summary of Differences:","text":"<ul> <li>POST: You are adding a new resource to the list, so you use <code>push()</code> to add the new item (data).</li> <li>PUT: You are modifying an existing resource, so you use <code>Object.assign()</code> (or other mutation techniques) to update the properties of an existing item (<code>user</code>) with the new data (<code>data</code>).</li> </ul>"},{"location":"research/react/rtk-optimistic-mutation/#in-essence","title":"In essence:","text":"<ul> <li><code>push()</code> is used for appending new items (because you're adding something that didn't exist).</li> <li><code>Object.assign()</code> is used for updating properties of an existing object (because you're modifying something that already exists).</li> </ul> Here are some of the common mutation techniques, in addition to <code>Object.assign()</code> <p>Summary of Mutation Techniques:</p> <ul> <li>Direct Assignment (<code>=</code>): Simple and direct property changes.</li> <li><code>Object.assign()</code>: Merges properties from one object to another.</li> <li>Spread Operator (...): Creates shallow copies and allows modifying objects or arrays immutably.</li> <li><code>map()</code>: Used for updating specific elements in arrays, creating a new array with the modified items.</li> <li><code>find()</code>: Locates a specific item in an array and directly modifies it (not recommended for immutability).</li> <li><code>Object.defineProperty()</code>: Provides detailed control over object properties.</li> <li><code>Set</code> and <code>Map</code> methods: Useful for collections like <code>Set</code> and <code>Map</code>.</li> </ul> <p>When to Use Which Technique:</p> <ul> <li>For shallow updates: <code>Object.assign()</code> and spread (<code>...</code>) are often the best choices.</li> <li>For deeply nested updates: You'll need to handle deeply nested structures by either using libraries like <code>immer</code> (which allows for immutable updates with a \"draft\" concept) or applying nested spread operators for deep cloning.</li> <li>For arrays: <code>map()</code> is great for creating a new modified array, while <code>push()</code> or <code>splice()</code> are useful if you want to mutate the array directly.</li> </ul> <p>Example of Immutable Update Using <code>map()</code>:</p> <p>For array mutations (like updating an item in a list), you can use <code>map()</code> combined with the spread operator to maintain immutability:</p> <pre><code>const updatedRoles = roles.map(role =&gt;\n    role.id === updatedRole.id ? { ...role, ...updatedRole } : role\n);\n</code></pre> <p>This creates a new array, ensuring immutability while updating the <code>role</code> with the new data.</p> <p>In your case, using <code>Object.assign()</code> for the <code>PUT</code> request makes sense because you're updating an existing resource. But if you wanted to use a different technique, you could use direct assignment (<code>user.name = 'Manager'</code>) or the spread operator. The <code>map()</code> technique works well for arrays, especially when updating individual items in a list.</p>"},{"location":"research/react/rtk-optimistic-mutation/#improved-code-optimisticupdateutils","title":"Improved code <code>optimisticUpdateUtils</code>","text":""},{"location":"research/react/rtk-optimistic-mutation/#level-1-optimize","title":"Level 1: <code>Optimize</code>","text":"optimisticUpdateUtils.js<pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { axiosBaseQuery } from \"./axiosBaseQuery\"; // Assuming this is defined elsewhere\n\n// Utility function for optimistic updates\nconst optimisticUpdate = (dispatch, queryName, data, modifyDraft) =&gt; {\n  return dispatch(\n    rolesApi.util.updateQueryData(queryName, undefined, (draft) =&gt; {\n      modifyDraft(draft, data);\n    })\n  );\n};\n\nexport const rolesApi = createApi({\n  reducerPath: \"rolesApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"Roles\"],\n  endpoints: (builder) =&gt; ({\n    getRoles: builder.query({\n      query: () =&gt; ({\n        url: \"Roles/list\",\n        method: HTTP_METHODS.GET,\n      }),\n    }),\n\n    postRoles: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"Roles/create\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n\n      async onQueryStarted(data, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Add a new role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          data,\n          (draft, newData) =&gt; {\n            draft.push(newData);\n          }\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          // Rollback if the request fails\n          patchResult.undo();\n          console.error(\"Failed to create role:\", error); // More informative error logging\n        }\n      },\n    }),\n\n    putRoles: builder.mutation({\n      query: ({ id, data }) =&gt; ({\n        url: `Roles/edit/${id}`,\n        method: HTTP_METHODS.PUT,\n        data,\n      }),\n\n      async onQueryStarted({ id, data }, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Update an existing role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          { id, data },\n          (draft, { id, data }) =&gt; {\n            const role = draft.find((role) =&gt; role.id === id);\n            if (role) {\n              Object.assign(role, data);\n            }\n          }\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          // Rollback if the request fails\n          patchResult.undo();\n          console.error(`Failed to update role with ID ${id}:`, error); // More informative error logging\n        }\n      },\n    }),\n  }),\n});\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#level-2-optimize","title":"Level 2: <code>Optimize</code>","text":"rolesApi.js<pre><code>// optimisticUpdateUtils.js\n\n/**\n * A helper function to perform optimistic updates for a given query.\n *\n * @param {Function} dispatch - The Redux dispatch function.\n * @param {string} queryName - The name of the query to update.\n * @param {any} data - The data to be optimistically updated.\n * @param {Function} modifyDraft - A function that modifies the draft state.\n * @returns {Object} The patch result, which can be used to undo the optimistic update if needed.\n */\nexport const optimisticUpdate = (dispatch, queryName, data, modifyDraft) =&gt; {\n  return dispatch(\n    rolesApi.util.updateQueryData(queryName, undefined, (draft) =&gt; {\n      modifyDraft(draft, data);\n    })\n  );\n};\n</code></pre> <pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { axiosBaseQuery } from \"./axiosBaseQuery\"; // Assuming this is defined elsewhere\nimport { optimisticUpdate } from \"./optimisticUpdateUtils\"; // Import the function\n\nexport const rolesApi = createApi({\n  reducerPath: \"rolesApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"Roles\"],\n  endpoints: (builder) =&gt; ({\n    getRoles: builder.query({\n      query: () =&gt; ({\n        url: \"Roles/list\",\n        method: HTTP_METHODS.GET,\n      }),\n    }),\n\n    postRoles: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"Roles/create\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n\n      async onQueryStarted(data, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Add a new role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          data,\n          (draft, newData) =&gt; {\n            draft.push(newData);\n          }\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(\"Failed to create role:\", error); // More informative error logging\n        }\n      },\n    }),\n\n    putRoles: builder.mutation({\n      query: ({ id, data }) =&gt; ({\n        url: `Roles/edit/${id}`,\n        method: HTTP_METHODS.PUT,\n        data,\n      }),\n\n      async onQueryStarted({ id, data }, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Update an existing role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          { id, data },\n          (draft, { id, data }) =&gt; {\n            const role = draft.find((role) =&gt; role.id === id);\n            if (role) {\n              Object.assign(role, data);\n            }\n          }\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(`Failed to update role with ID ${id}:`, error); // More informative error logging\n        }\n      },\n    }),\n  }),\n});\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#level-3-optimize","title":"Level 3: <code>Optimize</code>","text":"<p>If you want to reuse the <code>optimisticUpdateUtils.js</code> for other APIs, you can make a few changes to make it more general and flexible. Essentially, you'll modify it so that it can be used with any API endpoint and is not tightly coupled with the <code>rolesApi</code> specifically.</p> <p>Step 1: Update <code>optimisticUpdateUtils.js</code> to be more generic</p> <p>The main change is to pass the <code>updateQueryData</code> function dynamically, as well as the query name and the data manipulation logic.</p> <pre><code>// optimisticUpdateUtils.js\n\n/**\n * A helper function to perform optimistic updates for a given query.\n *\n * @param {Function} dispatch - The Redux dispatch function.\n * @param {string} queryName - The name of the query to update.\n * @param {any} data - The data to be optimistically updated.\n * @param {Function} modifyDraft - A function that modifies the draft state for specific data manipulation.\n * @param {Function} updateQueryDataFn - The updateQueryData function specific to the API (passed dynamically).\n * @returns {Object} The patch result, which can be used to undo the optimistic update if needed.\n */\nexport const optimisticUpdate = (\n  dispatch,\n  queryName,\n  data,\n  modifyDraft,\n  updateQueryDataFn\n) =&gt; {\n  return dispatch(\n    updateQueryDataFn(queryName, undefined, (draft) =&gt; {\n      modifyDraft(draft, data);\n    })\n  );\n};\n</code></pre> <p>Step 2: Update Your <code>rolesApi.js</code> to Use the Generic <code>optimisticUpdate</code></p> <p>Now you can pass the <code>updateQueryData</code> function dynamically from your <code>rolesApi</code> and use the generic <code>optimisticUpdate</code> in the same way.</p> <pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { axiosBaseQuery } from \"./axiosBaseQuery\"; // Assuming this is defined elsewhere\nimport { optimisticUpdate } from \"./optimisticUpdateUtils\"; // Import the function\n\nexport const rolesApi = createApi({\n  reducerPath: \"rolesApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"Roles\"],\n  endpoints: (builder) =&gt; ({\n    getRoles: builder.query({\n      query: () =&gt; ({\n        url: \"Roles/list\",\n        method: HTTP_METHODS.GET,\n      }),\n    }),\n\n    postRoles: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"Roles/create\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n\n      async onQueryStarted(data, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Add a new role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          data,\n          (draft, newData) =&gt; {\n            draft.push(newData);\n          },\n          rolesApi.util.updateQueryData // Pass the updateQueryData specific to rolesApi\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(\"Failed to create role:\", error); // More informative error logging\n        }\n      },\n    }),\n\n    putRoles: builder.mutation({\n      query: ({ id, data }) =&gt; ({\n        url: `Roles/edit/${id}`,\n        method: HTTP_METHODS.PUT,\n        data,\n      }),\n\n      async onQueryStarted({ id, data }, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Update an existing role optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getRoles\",\n          { id, data },\n          (draft, { id, data }) =&gt; {\n            const role = draft.find((role) =&gt; role.id === id);\n            if (role) {\n              Object.assign(role, data);\n            }\n          },\n          rolesApi.util.updateQueryData // Pass the updateQueryData specific to rolesApi\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(`Failed to update role with ID ${id}:`, error); // More informative error logging\n        }\n      },\n    }),\n  }),\n});\n</code></pre> <p>Step 3: Use <code>optimisticUpdate</code> in Another API</p> <p>Now that the <code>optimisticUpdate</code> function is general, you can reuse it with other APIs, passing the appropriate <code>updateQueryData</code> method and logic for that API.</p> <p>For example, if you have a <code>usersApi</code>, you can reuse the same <code>optimisticUpdate</code> function with a different set of operations:</p> <pre><code>import { createApi } from \"@reduxjs/toolkit/query/react\";\nimport { axiosBaseQuery } from \"./axiosBaseQuery\"; // Assuming this is defined elsewhere\nimport { optimisticUpdate } from \"./optimisticUpdateUtils\"; // Import the function\n\nexport const usersApi = createApi({\n  reducerPath: \"usersApi\",\n  baseQuery: axiosBaseQuery({\n    baseUrl: CONFIG.API_BASE_URL,\n  }),\n  tagTypes: [\"Users\"],\n  endpoints: (builder) =&gt; ({\n    getUsers: builder.query({\n      query: () =&gt; ({\n        url: \"Users/list\",\n        method: HTTP_METHODS.GET,\n      }),\n    }),\n\n    postUser: builder.mutation({\n      query: (data) =&gt; ({\n        url: \"Users/create\",\n        method: HTTP_METHODS.POST,\n        data,\n      }),\n\n      async onQueryStarted(data, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Add a new user optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getUsers\",\n          data,\n          (draft, newData) =&gt; {\n            draft.push(newData); // Logic to optimistically add the new user\n          },\n          usersApi.util.updateQueryData // Pass the updateQueryData specific to usersApi\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(\"Failed to create user:\", error); // More informative error logging\n        }\n      },\n    }),\n\n    putUser: builder.mutation({\n      query: ({ id, data }) =&gt; ({\n        url: `Users/edit/${id}`,\n        method: HTTP_METHODS.PUT,\n        data,\n      }),\n\n      async onQueryStarted({ id, data }, { dispatch, queryFulfilled }) {\n        // Optimistic Update: Update an existing user optimistically\n        const patchResult = optimisticUpdate(\n          dispatch,\n          \"getUsers\",\n          { id, data },\n          (draft, { id, data }) =&gt; {\n            const user = draft.find((user) =&gt; user.id === id);\n            if (user) {\n              Object.assign(user, data); // Logic to optimistically update the user\n            }\n          },\n          usersApi.util.updateQueryData // Pass the updateQueryData specific to usersApi\n        );\n\n        try {\n          await queryFulfilled;\n        } catch (error) {\n          patchResult.undo();\n          console.error(`Failed to update user with ID ${id}:`, error); // More informative error logging\n        }\n      },\n    }),\n  }),\n});\n</code></pre> <p>Step 4: Benefits of This Approach</p> <ul> <li>Reusability: The <code>optimisticUpdate</code> function is now completely decoupled from any specific API and can be used across multiple API slices (e.g., <code>rolesApi</code>, <code>usersApi</code>, etc.).</li> <li>Flexibility: You can use any query name and modify the data as required. You just need to pass the appropriate <code>updateQueryData</code> function and the data modification logic.</li> <li>Maintainability: Centralizing the optimistic update logic makes your code easier to maintain and update. If you need to change how optimistic updates work, you only need to change one function, and the changes will apply to all API slices that use it.</li> <li>Cleaner Code: Your API slices (<code>rolesApi</code>, <code>usersApi</code>, etc.) remain focused on their specific business logic, without having to repeat the optimistic update logic.</li> </ul> <p>Summary</p> <p>By making <code>optimisticUpdate</code> more general, you can reuse it across different API slices with minimal effort. All you need to do is pass the appropriate <code>updateQueryData</code> function for each API and define the specific data manipulation logic (e.g., <code>push</code>, <code>assign</code>, etc.) for each case. This results in cleaner, more maintainable, and reusable code.</p>"},{"location":"research/react/rtk-optimistic-mutation/#file-strcuture-for-optimistic-update","title":"File Strcuture for <code>Optimistic update</code>","text":"<p>If you've implemented a feature-based folder structure in your project, the <code>optimisticUpdate</code> utility file should be placed in a location that aligns with the principles of modularity and reuse. The goal is to store the optimisticUpdate file in a way that makes it accessible across different features or API slices, without unnecessarily coupling it to any one feature.</p> <p>Here are a few possible locations based on common feature-based folder structures:</p>"},{"location":"research/react/rtk-optimistic-mutation/#1-srcutils-or-srchelpers-folder","title":"1. <code>src/utils</code> or <code>src/helpers</code> Folder","text":"<p>If your project structure includes a <code>utils</code> or <code>helpers</code> folder for shared, reusable code (which is common for utility functions), this is an ideal place for the <code>optimisticUpdate</code> utility file. This allows the function to be easily imported wherever needed.</p> <pre><code>src/\n  \u251c\u2500\u2500 api/           # API-related slices (rolesApi, usersApi, etc.)\n  \u251c\u2500\u2500 components/    # UI components\n  \u251c\u2500\u2500 features/      # Feature-specific folders\n  \u251c\u2500\u2500 utils/         # Shared utility functions (for common logic)\n  \u2502   \u2514\u2500\u2500 optimisticUpdateUtils.js\n  \u2514\u2500\u2500 App.js\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#2-srcfeaturescommon-folder","title":"2. <code>src/features/common/</code> Folder","text":"<p>If you want to keep the feature-based structure and avoid a global <code>utils</code> folder, you can place the <code>optimisticUpdateUtils.js</code> file in a <code>common</code> folder within your <code>features</code> directory. The <code>common</code> folder can store reusable logic that doesn't belong to any specific feature but can be shared across multiple features.</p> <pre><code>src/\n  \u251c\u2500\u2500 api/            # API slices for different features\n  \u251c\u2500\u2500 components/     # UI components\n  \u251c\u2500\u2500 features/\n  \u2502   \u251c\u2500\u2500 roles/      # Roles feature folder\n  \u2502   \u251c\u2500\u2500 users/      # Users feature folder\n  \u2502   \u2514\u2500\u2500 common/     # Shared, reusable code\n  \u2502       \u2514\u2500\u2500 optimisticUpdateUtils.js\n  \u2514\u2500\u2500 App.js\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#3-srcshared-folder","title":"3. <code>src/shared/</code> Folder","text":"<p>Another good option for <code>shared</code> logic is a shared folder, which is a common naming convention used to house logic that is not specific to any one feature. This approach keeps everything related to shared functionality in one place.</p> <pre><code>src/\n  \u251c\u2500\u2500 api/            # API slices\n  \u251c\u2500\u2500 components/     # UI components\n  \u251c\u2500\u2500 features/       # Feature-specific logic\n  \u251c\u2500\u2500 shared/         # Shared code (for reusable logic)\n  \u2502   \u2514\u2500\u2500 optimisticUpdateUtils.js\n  \u2514\u2500\u2500 App.js\n</code></pre>"},{"location":"research/react/rtk-optimistic-mutation/#hocs-hooks","title":"HOCS &amp; Hooks","text":"<ul> <li><code>useDrawerReducer.js</code> should be placed in the <code>hooks/</code> folder since it is a custom hook responsible for state management.</li> <li><code>withDrawer.js</code> should be placed in the <code>components/</code> folder because it is a higher-order component that enhances UI components with additional functionality (like managing the drawer state and rendering the drawer).</li> </ul>"},{"location":"research/react/rtk-optimistic-mutation/#submodule-error-fix","title":"Submodule Error Fix","text":"<p>fatal: 'Bishow-Thapa.github.io' already exists in the index why git submodule</p> <p>The error message fatal: 'Bishow-Thapa.github.io' already exists in the index typically occurs when you're trying to add a submodule to a Git repository, but a path in your index (staging area) already exists as a regular file or folder. This can happen for a few reasons:</p> Common Causes: <ol> <li> <p>Directory Already Exists: If the directory <code>Bishow-Thapa.github.io</code> already exists in your repository and contains files, Git might throw this error when you're trying to add it as a submodule.</p> </li> <li> <p>Index Conflict: The path in the Git index (staging area) might already contain references to files or folders. When trying to add the submodule, it conflicts with this existing index.</p> </li> <li> <p>Previously Attempted Submodule Addition: You may have tried to add the submodule earlier, but the process didn't complete successfully, leaving files or references in the Git index.</p> </li> </ol> How to Fix It: <ol> <li> <p>Check If the Directory Exists:</p> <p>Before adding the submodule, ensure that the directory is empty or doesn't already exist in the working directory. If it's already a folder with files or a previous submodule, you may need to clean it up.</p> <p>You can check the contents of the directory with:</p> <pre><code>ls Bishow-Thapa.github.io\n</code></pre> <p>If it has files, you can either delete them or move them elsewhere. If it's a submodule from a previous attempt, you may need to remove it.</p> </li> <li> <p>Remove the Existing Directory (if applicable):</p> <p>If the directory already exists in your repository but is not a submodule, you can remove it (and its content, if needed):</p> <pre><code>rm -rf Bishow-Thapa.github.io\n</code></pre> <p>This will remove the directory and its contents. Then you can proceed with adding the submodule.</p> </li> <li> <p>Remove from the Git Index (if applicable):</p> <p>If the path exists in your Git index, but you don't want to keep it, you can remove it from the index. This will not delete the directory from the working directory but will stop Git from tracking it:</p> <pre><code>git rm --cached Bishow-Thapa.github.io\n</code></pre> <p>Then commit this change:</p> <pre><code>git rm --cached Bishow-Thapa.github.io\n</code></pre> <p>git commit -m \"Removed Bishow-Thapa.github.io from the index\"</p> <p>After this, try adding the submodule again.</p> </li> <li> <p>Add the Submodule:</p> <p>Once you've ensured the directory is either empty or cleaned up, you can try adding the submodule again using:</p> <pre><code>git submodule add &lt;repository-url&gt; Bishow-Thapa.github.io\n</code></pre> <p>Replace <code>&lt;repository-url&gt;</code> with the actual URL of the submodule repository.</p> </li> <li> <p>Check Submodule Status:</p> <p>After adding the submodule, you can check its status:</p> <pre><code>git submodule status\n</code></pre> <p>This should resolve the conflict, allowing you to successfully add the submodule. Let me know if you run into further issues!</p> </li> </ol>"},{"location":"research/react/rtk-query-hooks/","title":"RTK Query Hooks","text":""},{"location":"research/react/rtk-query-hooks/#rtk-query-hook","title":"RTK Query Hook","text":""},{"location":"research/react/rtk-query-hooks/#reference","title":"Reference","text":"<ul> <li>\ud83d\udcda RTK Query: Understanding useQuery Hook </li> <li>Official Mutations</li> <li>API Slices: React Hooks</li> </ul>"},{"location":"research/react/utils/","title":"Utils","text":""},{"location":"research/react/utils/#utils","title":"Utils","text":"ExampleExplanation <pre><code>export function findUsersWithApproval(array, data) {\n    if (!Array.isArray(data)) return [];\n\n    // Step 1: Filter based on aspNetUserId and canApprove\n    let foundUsers = data?.filter(\n        (item) =&gt; array.includes(item?.aspNetUserId) &amp;&amp; item?.canApprove === true\n    );\n\n    // Step 2: Map the filtered users to a new structure where 'id' is renamed to 'employeeId'\n    let mappedUsers = foundUsers?.map((user) =&gt; ({\n        employeeId: user.id, // Rename 'id' to 'employeeId'\n        ...user, // Keep all other properties as they are\n    }));\n\n    return mappedUsers;\n}\n</code></pre> <ol> <li> <p>Filter:</p> <p>The <code>filter()</code> method filters the <code>data</code> based on whether the <code>aspNetUserId</code> is found in the <code>array</code> and whether the <code>canApprove</code> property is <code>true</code>.</p> </li> <li> <p>Map:</p> <p>After filtering, we use <code>map()</code> to transform the structure of each object in the filtered array. Specifically, we rename <code>id</code> to <code>employeeId</code> and include the rest of the user properties using the spread operator (<code>...user</code>).</p> </li> </ol>"},{"location":"research/react/utils/#wednesday-morning-changes","title":"Wednesday Morning Changes","text":"<p><code>solves the verfier and approver issue</code></p> <pre><code>git diff --name-only\n\nsrc/features/forex/components/DealsList.jsx\nsrc/features/forex/form/VerticalStepsForm.jsx\nsrc/features/forex/utils/forexRoles.js\n</code></pre> DealsList.jsx<pre><code>// remove the console only\n</code></pre> VerticalStepsForm.jsx<pre><code>import React, { useState, useEffect } from \"react\";\nimport {\n  Steps,\n  Form,\n  Input,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  Row,\n  Col,\n  Typography,\n  Space,\n  Tag,\n  AutoComplete,\n  TimePicker,\n  DatePicker,\n} from \"antd\";\nimport moment from \"moment\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport logger from \"@shared/utils/logger\";\nimport { CONFIG } from \"@shared/utils/config\";\nimport getLabelByValue from \"@shared/utils/getLabelByValue\";\nimport useStepReducer from \"@features/forex/hooks/useStepReducer\";\nimport {\n  useGetCurrencyQuery,\n  useGetCounterPartyQuery,\n  useGetCounterPartyByIdQuery,\n  useGetCounterPartyDealerQuery,\n  useGetDealCounterPartyAccQuery,\n  useGetDealCounterPartyAccByCurrencyQuery,\n  useGetExchangeRateQuery,\n  useGetUsersQuery,\n} from \"@features/settings/services/settingApi\";\nimport {\n  usePostForexMutation,\n  useGetForexApprovalPersonQuery,\n} from \"../services/forexApi\";\nimport { getLatestObjectForToday } from \"@shared/utils/todayRate\";\nimport { curencyFormatter } from \"@shared/utils/currencyFormatter\";\nimport {\n  formateDateToISO,\n  formateDateToYMD,\n  formatForexDealAndValueDate,\n  formatForexDealTime,\n} from \"@shared/utils/dateFormatter\";\nimport {\n  FOREX_DEAL,\n  TRANSACTION_TYPE,\n  DEAL_MODE,\n} from \"@features/forex/utils/FOREX_DEAL\";\nimport \"../styles/VerticalStepsForm.scss\";\nimport { flattenEmployees } from \"../utils/flattenEmployees\";\nimport { findEmployeeById } from \"../utils/findEmployeeById\";\nimport {\n  currentApprovers,\n  currentVerifiers,\n  findUsersByIds,\n} from \"../utils/forexRoles\";\nimport { getApprovers } from \"../utils/getApprovers\";\n\nconst isDevelopmentMode = CONFIG.MODE === \"development\" ? false : true;\n// const isDevelopmentMode = CONFIG.MODE === \"development\" ? true : true;\n\nconst { Text, Paragraph } = Typography;\nconst { CheckableTag } = Tag;\nconst today = moment().format(\"YYYY-MM-DD\");\n\nconst VerticalStepsForm = () =&gt; {\n  const {\n    currentStep,\n    formValues,\n    nextStep,\n    prevStep,\n    resetSteps,\n    updateForm,\n    deleteFromItem,\n  } = useStepReducer();\n  // logger.info({ msg: \"formValues: \", formValues });\n  // Internal State\n  const [selectedIds, setSelectedIds] = useState({});\n  const [form] = Form.useForm();\n  // const sellingCurrencyId = formValues?.[FOREX_DEAL.SELLING_CURRENCY] || \"\";\n  const [buyingCurrencyIds, setBuyingCurrencyIds] = useState(null);\n  const [sellingCurrencyIds, setSellingCurrencyIds] = useState(null);\n  const [isLoadingButton, setIsLoadingButton] = useState(false);\n  // approval &amp; verifier\n  const [approvalOptions, setApprovalOptions] = useState([]);\n  const [verifierOptions, setVerifierOptions] = useState([]);\n  const [selectedApprovals, setSelectedApprovals] = useState([]);\n  const [selectedVerifier, setSelectedVerifier] = useState(null);\n\n  // const {\n  //   data: exchangeRateData,\n  //   isLoading: exchangeRateLoading,\n  //   error: exchangeRateError,\n  // } = useGetExchangeRateQuery(\n  //   {\n  //     date: today,\n  //     currencyId: formValues?.[FOREX_DEAL.SELLING_CURRENCY],\n  //     exchangeType: 1,\n  //   },\n  //   {\n  //     skip: !formValues?.[FOREX_DEAL.SELLING_CURRENCY],\n  //   }\n  // );\n  const {\n    data: currency,\n    isLoading: currencyLoading,\n    error: currencyError,\n  } = useGetCurrencyQuery();\n  const {\n    data: bank,\n    isLoading: bankLoading,\n    error: bankError,\n  } = useGetCounterPartyQuery();\n  const {\n    data: bankUser,\n    isLoading: bankUserLoading,\n    error: bankUserError,\n  } = useGetCounterPartyByIdQuery(\n    { currencyId: selectedIds?.counterPartyId },\n    {\n      skip: !selectedIds?.counterPartyId,\n    }\n  );\n  const {\n    data: approvalUser,\n    isLoading: approvalUserLoading,\n    error: approvalUserError,\n  } = useGetCounterPartyDealerQuery();\n  const {\n    data: counterPartyAccount,\n    isLoading: counterPartyAccountLoading,\n    error: counterPartyAccountError,\n  } = useGetDealCounterPartyAccQuery();\n\n  const {\n    data: payFromAccount,\n    isLoading: payFromLoading,\n    error: payFromError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    { currencyCode: selectedIds?.sellingCurrencyCode, isOwnedByUs: true },\n    {\n      skip: !selectedIds.sellingCurrencyCode,\n    }\n  );\n  const {\n    data: theyReceivedAtAccount,\n    isLoading: theyReceivedAtLoading,\n    error: theyReceivedAtError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    // { currencyCode: selectedIds?.buyingCurrencyCode, isOwnedByUs: false },\n    // { currencyCode: selectedIds?.buyingCurrencyCode },\n    { currencyCode: selectedIds?.sellingCurrencyCode },\n    {\n      // skip: !selectedIds.buyingCurrencyCode,\n      skip: !selectedIds.sellingCurrencyCode,\n    }\n  );\n  const {\n    data: weReceivedAtAccount,\n    isLoading: weReceivedAtLoading,\n    error: weReceivedAtError,\n  } = useGetDealCounterPartyAccByCurrencyQuery(\n    { currencyCode: selectedIds?.buyingCurrencyCode, isOwnedByUs: true },\n    {\n      skip: !selectedIds.buyingCurrencyCode,\n    }\n  );\n\n  const [\n    postForex,\n    { isLoading: isLoadingPost, isError: isErrorPost, error: postError },\n  ] = usePostForexMutation();\n\n  const {\n    data: approvalPersonData,\n    isLoading: approvalPersonLoading,\n    error: approvalPersonError,\n  } = useGetForexApprovalPersonQuery(\n    {\n      sellingAmount: formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n      // sellingCurrencyId: formValues?.sellingCurrency,\n    },\n    {\n      skip: !formValues?.[FOREX_DEAL.SELLING_AMOUNT],\n      // skip: !formValues?.sellingAmount || !formValues?.sellingCurrency,\n    }\n  );\n\n  const {\n    data: usersData,\n    isLoading: isUserDataLoading,\n    isError: usersError,\n  } = useGetUsersQuery();\n\n  let sellingCUR = getLabelByValue(\n    formValues?.[FOREX_DEAL.SELLING_CURRENCY],\n    currency,\n    \"code\"\n  );\n\n  // logger.info({\n  //   msg: \"FORM: \",\n  //   formValues,\n  //   selectedIds,\n  // });\n\n  // useEffect(() =&gt; {\n  //   if (!isEmpty(exchangeRateData)) {\n  //     let todayRate = getLatestObjectForToday(exchangeRateData);\n  //     form.setFieldsValue({\n  //       rate: todayRate?.rate || null,\n  //     });\n  //   } else {\n  //     form.setFieldsValue({\n  //       rate: null,\n  //     });\n  //   }\n  // }, [exchangeRateData, form, sellingCurrencyId]);\n\n  // Before\n  // useEffect(() =&gt; {\n  //   let approvalUserIds = [];\n\n  //   if (!isEmpty(approvalPersonData)) {\n  //     approvalUserIds = approvalPersonData?.map((item) =&gt; item?.id);\n  //   }\n\n  //   form.setFieldsValue({\n  //     approvalPerson: approvalUserIds,\n  //   });\n  // }, [formValues?.[FOREX_DEAL.SELLING_AMOUNT], approvalPersonData]);\n\n  useEffect(() =&gt; {\n    let buyingCurrency = form.getFieldValue(FOREX_DEAL.BUYING_CURRENCY);\n\n    if (buyingCurrency) {\n      form.setFieldsValue({\n        [FOREX_DEAL.WE_RECEIVED_AT]: null,\n        [FOREX_DEAL.THEY_RECEIVED_AT]: null,\n      });\n      deleteFromItem(FOREX_DEAL.WE_RECEIVED_AT);\n      deleteFromItem(FOREX_DEAL.THEY_RECEIVED_AT);\n    }\n  }, [form.getFieldValue(FOREX_DEAL.BUYING_CURRENCY)]);\n\n  useEffect(() =&gt; {\n    let sellingCurrency = form.getFieldValue(FOREX_DEAL.SELLING_CURRENCY);\n\n    if (sellingCurrency) {\n      form.setFieldsValue({\n        [FOREX_DEAL.WE_PAY_FORM]: null,\n      });\n\n      deleteFromItem(FOREX_DEAL.WE_PAY_FORM);\n    }\n  }, [form.getFieldValue(FOREX_DEAL.SELLING_CURRENCY)]);\n\n  useEffect(() =&gt; {\n    let counterParty = form.getFieldValue(FOREX_DEAL.COUNTERPARTY);\n\n    if (counterParty) {\n      form.setFieldsValue({\n        [FOREX_DEAL.COUNTERPARTY_DEALER]: null,\n      });\n      deleteFromItem(FOREX_DEAL.COUNTERPARTY_DEALER);\n    }\n  }, [form.getFieldValue(FOREX_DEAL.COUNTERPARTY)]);\n\n  /************************************************************/\n  // apporval &amp; verifier\n  useEffect(() =&gt; {\n    if (approvalPersonData) {\n      // const flattenedVerifiers = flattenEmployees(\n      //   approvalPersonData.directReports || []\n      // );\n      // setVerifierOptions(flattenedVerifiers);\n      let listVerifiers = currentVerifiers([approvalPersonData]);\n      setVerifierOptions(listVerifiers);\n\n      // let verfiersIdOnly = listVerifiers?.map((item) =&gt; item?.aspNetUserId);\n      // if (!isEmpty(verfiersIdOnly)) {\n      //   form.setFieldsValue({\n      //     [FOREX_DEAL.DEAL_APPROVERS]: verfiersIdOnly,\n      //   });\n      // }\n\n      const verfiersListing = currentApprovers([approvalPersonData]);\n      setApprovalOptions(verfiersListing);\n\n      // let approversIdOnly = verfiersListing.map((item) =&gt; item?.aspNetUserId);\n\n      // if (!isEmpty(approversIdOnly)) {\n      //   form.setFieldsValue({\n      //     [FOREX_DEAL.DEAL_VERIFIERS]: approversIdOnly,\n      //   });\n      // }\n    }\n  }, [approvalPersonData]);\n\n  useEffect(() =&gt; {\n    let sellingCurrency = form.getFieldValue(FOREX_DEAL.SELLING_AMOUNT);\n\n    if (sellingCurrency) {\n      form.setFieldsValue({\n        [FOREX_DEAL.DEAL_VERIFIERS]: null,\n        [FOREX_DEAL.DEAL_APPROVERS]: null,\n      });\n    }\n  }, [form.getFieldValue(FOREX_DEAL.SELLING_AMOUNT)]);\n\n  useEffect(() =&gt; {\n    let approversIdOnly = approvalOptions.map((item) =&gt; item?.aspNetUserId);\n    let approversList = findUsersByIds(approversIdOnly, approvalOptions);\n    setSelectedApprovals(approversList);\n\n    if (!isEmpty(approversIdOnly)) {\n      form.setFieldsValue({\n        [FOREX_DEAL.DEAL_VERIFIERS]: approversIdOnly,\n      });\n    }\n\n    let verfiersIdOnly = verifierOptions?.map((item) =&gt; item?.aspNetUserId);\n    let verifiersList = findUsersByIds(verfiersIdOnly, verifierOptions);\n    setSelectedVerifier(verifiersList);\n\n    if (!isEmpty(verfiersIdOnly)) {\n      form.setFieldsValue({\n        [FOREX_DEAL.DEAL_APPROVERS]: verfiersIdOnly,\n      });\n    }\n  }, [approvalOptions, verifierOptions]);\n\n  const handleVerifierChange = (value, option) =&gt; {\n    let verifiersList = findUsersByIds(value, verifierOptions);\n    setSelectedVerifier(verifiersList);\n  };\n\n  const handleApprovalChange = (value, option) =&gt; {\n    let approversList = findUsersByIds(value, approvalOptions);\n    setSelectedApprovals(approversList);\n  };\n\n  /************************************************************/\n\n  // Handle\n  const onFinishSubmit = async (values) =&gt; {\n    setIsLoadingButton(true);\n    await form.validateFields();\n    updateForm(form.getFieldsValue());\n    // logger.info({ msg: \"Form Submit: \", formValues, values });\n\n    const dealDate = formatForexDealAndValueDate(values?.dealDate);\n    const valueDate = formatForexDealAndValueDate(values?.valueDate);\n    const dealTime = formatForexDealTime(values?.dealTime);\n\n    // logger.info({\n    //   msg: \"SUBMIT: \",\n    //   dealDate,\n    //   valueDate,\n    //   dealTime,\n    // });\n\n    const submitValues = {\n      ...values,\n      isEditable: true,\n      // dealDate: moment().toISOString(),\n      // dealTime: moment.utc().format(\"HH:mm:ss\"),\n      // valueDate: moment().toISOString(),\n      dealDate: dealDate,\n      valueDate: valueDate,\n      dealTime: dealTime,\n      dealApprovers: selectedApprovals,\n      dealVerifiers: selectedVerifier,\n    };\n\n    try {\n      // logger.info({ msg: \"SUBMIT Value: \", submitValues });\n      await postForex(submitValues).unwrap();\n      message.success(\"All steps completed! Your data has been submitted.\");\n      form.resetFields();\n      resetSteps();\n    } catch (err) {\n      logger.error({ msg: \"Submit Error: \", err });\n    } finally {\n      setIsLoadingButton(false);\n    }\n  };\n\n  const handleNext = async () =&gt; {\n    try {\n      await form.validateFields();\n      updateForm(form.getFieldsValue());\n      nextStep();\n    } catch (error) {\n      logger.error({ msg: \"Error: \", error });\n    }\n  };\n\n  const handlePrev = () =&gt; {\n    prevStep();\n  };\n\n  // Hanlde Amount Change\n  const handleSellingAmtChange = () =&gt; {\n    let buyingAmount = form?.getFieldsValue().amountBought || 0;\n    let rate = form?.getFieldsValue().rate || 0;\n\n    if (buyingAmount || rate) {\n      let calculate = buyingAmount * rate;\n      // logger.info({ msg: \"form.setFieldsValue\" });\n      form.setFieldsValue({\n        amountSold: calculate,\n      });\n    }\n  };\n\n  // Handle Select\n  const handleSelect = (value, field) =&gt; {\n    setSelectedIds((prevState) =&gt; ({\n      ...prevState,\n      [field]: value,\n    }));\n  };\n\n  // Description\n  // const description1 = currentStep === 0 &amp;&amp; (\n  const description1 = currentStep &gt;= 0 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step1-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.TRANSACTION_TYPE}\n        label=\"Select Transaction Type\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Transaction Type\",\n          },\n        ]}\n      &gt;\n        &lt;Select placeholder=\"Select Buy or Sell\"&gt;\n          &lt;Select.Option value={TRANSACTION_TYPE.BUY}&gt;Buy&lt;/Select.Option&gt;\n          &lt;Select.Option value={TRANSACTION_TYPE.SELL}&gt;Sell&lt;/Select.Option&gt;\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.DEAL_MODE}\n        label=\"Select Deal Mode\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Deal Mode\",\n          },\n        ]}\n      &gt;\n        &lt;Select placeholder=\"Select Electronic or Manual\"&gt;\n          &lt;Select.Option value={DEAL_MODE.ELECTRONIC}&gt;Electronic&lt;/Select.Option&gt;\n          &lt;Select.Option value={DEAL_MODE.MANUAL}&gt;Manual&lt;/Select.Option&gt;\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.BUYING_CURRENCY}\n        label=\"Buying Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Buying Currency!\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Buying Currency\"\n          onChange={(value) =&gt; {\n            let code = getLabelByValue(value, currency, \"code\");\n            setBuyingCurrencyIds(value);\n            handleSelect(code, \"buyingCurrencyCode\");\n            updateForm(form.getFieldsValue());\n          }}\n        &gt;\n          {currency &amp;&amp;\n            currency\n              ?.filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== sellingCurrencyIds\n              )\n              ?.map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.SELLING_CURRENCY}\n        label=\"Selling Currency\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Selling Currency\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Selling Currency\"\n          onChange={(value) =&gt; {\n            let code = getLabelByValue(value, currency, \"code\");\n            setSellingCurrencyIds(value);\n            handleSelect(code, \"sellingCurrencyCode\");\n            updateForm(form.getFieldsValue());\n          }}\n        &gt;\n          {currency &amp;&amp;\n            currency\n              ?.filter(\n                (currency) =&gt;\n                  currency.isActive &amp;&amp; currency.id !== buyingCurrencyIds\n              )\n              ?.map((currency) =&gt; (\n                &lt;Select.Option key={currency.id} value={currency.id}&gt;\n                  {currency.code}\n                &lt;/Select.Option&gt;\n              ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 0 &amp;&amp; (\n        &lt;Form.Item&gt;\n          &lt;Button type=\"primary\" onClick={handleNext}&gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description2 = currentStep === 1 &amp;&amp; (\n  const description2 = currentStep &gt;= 1 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step2-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.COUNTERPARTY}\n        label=\"Counterparty\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Counterparty\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Counterparty\"\n          onChange={(value) =&gt; {\n            handleSelect(value, \"counterPartyId\");\n            updateForm(form.getFieldsValue());\n          }}\n        &gt;\n          {bank?.map((bank) =&gt; (\n            &lt;Select.Option key={bank.id} value={bank.id}&gt;\n              {bank.name}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.COUNTERPARTY_DEALER}\n        label=\"Counterparty Dealer\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Counterparty Dealer\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Counterparty Dealer\"\n          onChange={() =&gt; updateForm(form.getFieldsValue())}\n        &gt;\n          {bankUser?.map((user) =&gt; (\n            &lt;Select.Option key={user.id} value={user.id}&gt;\n              {user.name}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.OUR_DEALER}\n        label=\"Our Dealer\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select user\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select user\"\n          onChange={() =&gt; updateForm(form.getFieldsValue())}\n        &gt;\n          {usersData?.map((user) =&gt; (\n            &lt;Select.Option key={user.id} value={user.id}&gt;\n              {user.userName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 1 &amp;&amp; (\n        &lt;Form.Item&gt;\n          {/* &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt; */}\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            // style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description3 = currentStep === 2 &amp;&amp; (\n  const description3 = currentStep &gt;= 2 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step3-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.BUYING_AMOUNT}\n        label={`Buying Amount:  ${\n          getLabelByValue(\n            formValues?.[FOREX_DEAL.BUYING_CURRENCY],\n            currency,\n            \"code\"\n          ) ?? \"\"\n        }`}\n        onChange={() =&gt; {\n          handleSellingAmtChange();\n          updateForm(form.getFieldsValue());\n        }}\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please input Buying Amount\",\n          },\n        ]}\n      &gt;\n        &lt;InputNumber\n          formatter={(value) =&gt;\n            curencyFormatter(\n              value,\n              getLabelByValue(formValues.sellingCurrency, currency, \"code\") ??\n                \"\"\n            )\n          }\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.RATE}\n        label=\"Rate\"\n        rules={[{ required: false, message: \"Please input Rate\" }]}\n        onChange={() =&gt; {\n          handleSellingAmtChange();\n          updateForm(form.getFieldsValue());\n        }}\n      &gt;\n        &lt;InputNumber style={{ width: \"100%\" }} /&gt;\n        {/* &lt;AutoComplete\n          options={exchangeRateData?.map((item) =&gt; ({ value: item?.rate }))}\n          onChange={() =&gt; {\n            handleSellingAmtChange();\n            updateForm(form.getFieldsValue());\n          }}\n          notFoundContent=\"No suggestions\"\n        &gt;\n          &lt;InputNumber style={{ width: \"100%\" }} /&gt;\n        &lt;/AutoComplete&gt; */}\n\n        {/* Display today's rate suggestion below */}\n        {/* {exchangeRateData?.length &gt; 0 &amp;&amp; (\n          &lt;div style={{ marginTop: 10, fontSize: \"12px\", color: \"gray\" }}&gt;\n            &lt;p&gt;\n              Today's Suggestions:\n              {exchangeRateData?.map((item, index) =&gt; (\n                &lt;span key={item?.rate}&gt;\n                  {item?.rate}\n                  {index &lt; exchangeRateData?.length - 1 &amp;&amp; \", \"}\n                &lt;/span&gt;\n              ))}\n            &lt;/p&gt;\n          &lt;/div&gt;\n        )} */}\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.SELLING_AMOUNT}\n        label={`Selling Amount: ${\n          getLabelByValue(\n            formValues?.[FOREX_DEAL.SELLING_CURRENCY],\n            currency,\n            \"code\"\n          ) ?? \"\"\n        }`}\n        onChange={() =&gt; {\n          handleSellingAmtChange();\n          updateForm(form.getFieldsValue());\n        }}\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please input Selling Amount!\",\n          },\n        ]}\n      &gt;\n        &lt;InputNumber\n          formatter={(value) =&gt;\n            curencyFormatter(\n              value,\n              getLabelByValue(formValues.sellingCurrency, currency, \"code\") ??\n                \"\"\n            )\n          }\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n          // formatter={(value) =&gt; value}\n          // parser={(value) =&gt; value?.replace(/\\$\\s?|(,*)/g, \"\")}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 2 &amp;&amp; (\n        &lt;Form.Item&gt;\n          {/* &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt; */}\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            // style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description4 = currentStep === 3 &amp;&amp; (\n  const description4 = currentStep &gt;= 3 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step4-form\" layout=\"vertical\"&gt;\n      &lt;Form.Item\n        name={FOREX_DEAL.WE_PAY_FORM}\n        label=\"We Pay From\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select Payment\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Payment\"\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n        &gt;\n          {payFromAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.THEY_RECEIVED_AT}\n        label=\"They Received at\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Received\" },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Received\"\n          onChange={() =&gt; updateForm(form.getFieldsValue())}\n        &gt;\n          {theyReceivedAtAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.WE_RECEIVED_AT}\n        label=\"We Received at\"\n        rules={[\n          {\n            required: isDevelopmentMode,\n            message: \"Please select We Received!\",\n          },\n        ]}\n      &gt;\n        &lt;Select\n          allowClear\n          placeholder=\"Select Received\"\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n        &gt;\n          {weReceivedAtAccount?.map((item) =&gt; (\n            &lt;Select.Option key={item.id} value={item.id}&gt;\n              {item.accountName}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      {/* Added */}\n      &lt;Form.Item\n        name={FOREX_DEAL.DEAL_TIME}\n        label=\"Deal Time\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Deal Time\" },\n        ]}\n      &gt;\n        &lt;TimePicker\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.DEAL_DATE}\n        label=\"Deal Date\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Deal Date\" },\n        ]}\n        initialValue={dayjs()}\n      &gt;\n        &lt;DatePicker\n          format=\"YYYY-MM-DD\"\n          disabled\n          disabledDate={(current) =&gt; current &amp;&amp; !current.isSame(dayjs(), \"day\")}\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name={FOREX_DEAL.VALUE_DATE}\n        label=\"Value Date\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Value Date\" },\n        ]}\n      &gt;\n        &lt;DatePicker\n          // disabled\n          disabledDate={(current) =&gt;\n            current &amp;&amp; current.isBefore(dayjs(), \"day\")\n          }\n          onChange={() =&gt; {\n            updateForm(form.getFieldsValue());\n          }}\n          style={{ width: \"100%\" }}\n        /&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 3 &amp;&amp; (\n        &lt;Form.Item&gt;\n          {/* &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt; */}\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            // style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description5 = currentStep === 4 &amp;&amp; (\n  const description5 = currentStep &gt;= 4 &amp;&amp; (\n    &lt;Form form={form} className=\"form-step\" name=\"step5-form\" layout=\"vertical\"&gt;\n      &lt;Row gutter={40} style={{ marginBottom: \"2em\" }}&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Buying Currency&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.BUYING_CURRENCY],\n                currency\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Selling Currency&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.SELLING_CURRENCY],\n                currency\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Rate&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;{formValues?.[FOREX_DEAL.RATE]}&lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Selling Value (NPR)\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {formValues?.[FOREX_DEAL.SELLING_AMOUNT]}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Counterparty name&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(formValues?.[FOREX_DEAL.COUNTERPARTY], bank)}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;We Pay From&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.WE_PAY_FORM],\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Counter Party Name\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.COUNTERPARTY_DEALER],\n                bankUser\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;They Receive at&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.THEY_RECEIVED_AT],\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;\n              Buying Amount (USD)\n            &lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {formValues?.[FOREX_DEAL.BUYING_AMOUNT]}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;We Receive at&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {getLabelByValue(\n                formValues?.[FOREX_DEAL.WE_RECEIVED_AT],\n                counterPartyAccount,\n                \"accountName\"\n              )}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Deal Date&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {formValues?.dealDate?.format(\"YYYY-MM-DD\") ?? \"\"}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Value Date&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {formValues?.valueDate?.format(\"YYYY-MM-DD\") ?? \"\"}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n        &lt;Col span={12}&gt;\n          &lt;Space direction=\"vertical\" size={0} className=\"step-space\"&gt;\n            &lt;Paragraph className=\"title-paragraph\"&gt;Deal Time&lt;/Paragraph&gt;\n            &lt;Text className=\"title-text\"&gt;\n              {formValues?.dealTime?.format(\"hh:mm:ss A\") ?? \"\"}\n            &lt;/Text&gt;\n          &lt;/Space&gt;\n        &lt;/Col&gt;\n      &lt;/Row&gt;\n\n      {currentStep === 4 &amp;&amp; (\n        &lt;Form.Item&gt;\n          {/* &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt; */}\n          &lt;Button\n            type=\"primary\"\n            onClick={handleNext}\n            // style={{ marginLeft: 10 }}\n          &gt;\n            Next\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  // const description6 = currentStep === 5 &amp;&amp; (\n  const description6 = currentStep &gt;= 5 &amp;&amp; (\n    &lt;Form\n      form={form}\n      className=\"form-step\"\n      name=\"step6-form\"\n      layout=\"vertical\"\n      onFinish={onFinishSubmit}\n    &gt;\n      {/* &lt;Form.Item\n        name=\"approvalPerson\"\n        label=\"Approval Person\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please select Received\" },\n        ]}\n      &gt;\n        &lt;Select allowClear placeholder=\"Select Received\" mode=\"multiple\"&gt;\n          {approvalPersonData?.map((user, index) =&gt; (\n            &lt;Select.Option key={user.id} value={user.id}&gt;\n              {user.name ? user.name : `Unnamed User ${index + 1}`}\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt; */}\n\n      &lt;Form.Item label=\"Verifier\" name=\"verifierIds\"&gt;\n        &lt;Select\n          mode=\"multiple\"\n          // value={selectedVerifier}\n          // options={verifierOptions}\n          onChange={handleVerifierChange}\n          placeholder=\"Select Verifier\"\n          loading={approvalPersonLoading}\n          // disabled={approvalPersonLoading || approvalPersonError}\n        &gt;\n          {verifierOptions?.map((item) =&gt; (\n            &lt;Select.Option key={item?.aspNetUserId} value={item?.aspNetUserId}&gt;\n              {item.positionName} ({item.emailAddress})\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item label=\"Approval\" name=\"approvalIds\"&gt;\n        &lt;Select\n          mode=\"multiple\"\n          // value={selectedApprovals}\n          // options={approvalOptions}\n          onChange={handleApprovalChange}\n          placeholder=\"Select Approver\"\n          disabled={!approvalOptions.length}\n        &gt;\n          {approvalOptions?.map((item) =&gt; (\n            &lt;Select.Option key={item.aspNetUserId} value={item.aspNetUserId}&gt;\n              {item.positionName} ({item.emailAddress})\n            &lt;/Select.Option&gt;\n          ))}\n        &lt;/Select&gt;\n      &lt;/Form.Item&gt;\n\n      &lt;Form.Item\n        name=\"remarks\"\n        label=\"Remarks\"\n        rules={[\n          { required: isDevelopmentMode, message: \"Please give your Remarks\" },\n        ]}\n      &gt;\n        &lt;Input.TextArea showCount maxLength={50} /&gt;\n      &lt;/Form.Item&gt;\n\n      {currentStep === 5 &amp;&amp; (\n        &lt;Form.Item&gt;\n          {/* &lt;Button type=\"default\" onClick={handlePrev}&gt;\n            Back\n          &lt;/Button&gt; */}\n          &lt;Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={isLoadingButton}\n            // style={{ marginLeft: 10 }}\n          &gt;\n            Submit\n          &lt;/Button&gt;\n        &lt;/Form.Item&gt;\n      )}\n    &lt;/Form&gt;\n  );\n\n  const description7 = currentStep &gt;= 6 &amp;&amp; (\n    // const description7 = currentStep === 6 &amp;&amp; (\n    &lt;Form\n      form={form}\n      className=\"form-step\"\n      name=\"step7-form\"\n      layout=\"vertical\"\n    &gt;&lt;/Form&gt;\n  );\n\n  return (\n    &lt;&gt;\n      &lt;div className=\"currency-exchange-steps\"&gt;\n        &lt;Steps current={currentStep} direction=\"vertical\"&gt;\n          &lt;Steps.Step title=\"Step 1\" description={description1} /&gt;\n          &lt;Steps.Step title=\"Step 2\" description={description2} /&gt;\n          &lt;Steps.Step title=\"Step 3\" description={description3} /&gt;\n          &lt;Steps.Step title=\"Step 4\" description={description4} /&gt;\n          &lt;Steps.Step title=\"Step 5\" description={description5} /&gt;\n          &lt;Steps.Step title=\"Step 6\" description={description6} /&gt;\n        &lt;/Steps&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n};\n\nexport default VerticalStepsForm;\n</code></pre> forexRoles.js<pre><code>/*\n * Step 1: List all the Verifiers\n * Rules\n */\n\n// export function currentVerifiers(data) {\n//   if (!Array.isArray(data)) return [];\n\n//   let verifiers = [];\n\n//   data?.map((item) =&gt; {\n//     if (item?.canApprove) {\n//       verifiers.push(item);\n//     }\n//     if (item?.directReports &amp;&amp; item?.directReports.length &gt; 0) {\n//       verifiers = verifiers.concat(currentVerifiers(item?.directReports));\n//     }\n//   });\n\n//   return verifiers;\n// }\n\nexport function currentVerifiers(data) {\n  if (!Array.isArray(data)) return [];\n\n  let verifiers = [];\n\n  data?.map((item) =&gt; {\n    if (\n      // item?.canApprove &amp;&amp;\n      item?.directReports &amp;&amp;\n      item?.directReports.length &gt; 0\n    ) {\n      verifiers.push(item);\n    }\n\n    if (item?.directReports &amp;&amp; item?.directReports.length &gt; 0) {\n      verifiers = verifiers.concat(currentVerifiers(item?.directReports));\n    }\n  });\n\n  return verifiers;\n}\n\n/*\n * Step 2: List all the Approvers\n * Rules\n */\n\nexport function currentApprovers(data) {\n  if (!Array.isArray(data)) return [];\n\n  let approvers = [];\n\n  data?.map((item) =&gt; {\n    if (item?.canApprove) {\n      approvers.push(item);\n    }\n    if (item.directReports &amp;&amp; item.directReports.length &gt; 0) {\n      approvers = approvers.concat(currentApprovers(item.directReports));\n    }\n  });\n\n  return approvers;\n}\n\n/*\n * Finding Approvers\n */\n\n// export function findApprovers(array, data) {\nexport function findUsersByIds(array, data) {\n  if (!Array.isArray(data)) return [];\n\n  let foundUsers = data?.filter((item) =&gt; array.includes(item?.aspNetUserId));\n\n  if (!foundUsers || foundUsers.length === 0) return [];\n\n  let mappedUsers = foundUsers?.map((user) =&gt; ({\n    employeeId: user.id,\n    canApprove: user.canApprove,\n    employeeLevel: user.levelStatus,\n  }));\n\n  console.log(\"MAPPED USERS: \", mappedUsers);\n\n  return mappedUsers;\n}\n</code></pre> <p>.</p>"},{"location":"research/react/utils/#reference","title":"Reference","text":"<ul> <li>lint-staged</li> <li>Pre-commit with husky &amp; lint-staged </li> <li>Importance of using Husky Pre-Commit Hooks</li> </ul>"},{"location":"research/react/uuid-package/","title":"UUID","text":""},{"location":"research/react/uuid-package/#uuid","title":"UUID","text":"<p>Generate RFC-compliant UUIDs in JavaScript </p>"},{"location":"research/react/uuid-package/#1-install","title":"1. Install","text":"<pre><code>npm install uuid\n</code></pre>"},{"location":"research/react/uuid-package/#2-create-a-uuid","title":"2. Create a UUID","text":"<p>ESM-syntax (must use named exports):</p> <pre><code>import { v4 as uuidv4 } from 'uuid';\nuuidv4(); // \u21e8 '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n</code></pre>"},{"location":"research/react/uuid-package/#nil-uuid","title":"NIL <code>UUID</code>","text":"<p>uuid.NIL</p> <p>The nil UUID string (all zeros).</p> <pre><code>import { NIL as NIL_UUID } from 'uuid';\n\nNIL_UUID; // \u21e8 '00000000-0000-0000-0000-000000000000'\n</code></pre>"},{"location":"research/react/uuid-package/#reference","title":"Reference","text":"<ul> <li>npm: uuid</li> <li>github: uuid</li> </ul>"},{"location":"research/react/working-with-numbers-in-js/","title":"Numbers in JS","text":""},{"location":"research/react/working-with-numbers-in-js/#working-with-number-in-js","title":"Working with Number in JS","text":"<p>The JavaScript exception \"precision is out of range\" occurs when a number that's outside of the allowed range was passed into <code>toExponential</code> , <code>toFixed</code> , or <code>toPrecision</code>.</p>"},{"location":"research/react/working-with-numbers-in-js/#what-is-a-rangeerror","title":"What is a RangeError","text":"<p>A RangeError is used to convey to a user that a value was passed into a function that does not accept an input range that includes that value. For example, if a function converts centimeters to inches, then the input range might be all the non-zero positive numbers. In this instance, the number -100 would not be in the allowed input range and would cause a RangeError to be thrown.</p> <p>Understanding what a RangeError is, why one might be thrown, and when you should generate one yourself will help you write more expressive, correct code. In addition, understanding the motivation behind a RangeError will help you understand how to quickly and easily recover when one is thrown by the JavaScript standard library or external dependencies. </p> Invalid cases <pre><code>77.1234.toExponential(-1);  // RangeError\n77.1234.toExponential(101); // RangeError\n\n2.34.toFixed(-100);         // RangeError\n2.34.toFixed(1001);         // RangeError\n\n1234.5.toPrecision(-1);     // RangeError\n1234.5.toPrecision(101);    // RangeError\n</code></pre> Valid cases <pre><code>77.1234.toExponential(4); // 7.7123e+1\n77.1234.toExponential(2); // 7.71e+1\n\n2.34.toFixed(1); // 2.3\n2.35.toFixed(1); // 2.4 (note that it rounds up in this case)\n\n5.123456.toPrecision(5); // 5.1235\n5.123456.toPrecision(2); // 5.1\n5.123456.toPrecision(1); // 5\n</code></pre> <pre><code>09333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n\n\n\nInfinity\n</code></pre> <p>handling infinit and out of range in input field javascript</p>"},{"location":"research/react/working-with-numbers-in-js/#reference","title":"Reference","text":"<ul> <li>developer.mozilla.org, RangeError: precision is out of range</li> <li>JavaScript RangeErrors | How to Prevent Them, Tutorial</li> <li>RangeError, ReferenceError: Javascript Errors (Part 2)</li> <li>Which input control is recommended for a large value range?</li> </ul>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/page/2/","title":"Index","text":""},{"location":"blog/page/3/","title":"Index","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""}]}