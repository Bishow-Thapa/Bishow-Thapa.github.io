{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#deployment","title":"Deployment","text":"<pre><code>my-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n\ncd ../orgname.github.io/\nmkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n</code></pre>"},{"location":"office/01-credentials/","title":"Introduction","text":""},{"location":"office/01-credentials/#domain","title":"Domain","text":"<ul> <li>http://localhost:4200/</li> <li>cqweb.info.com.np - local</li> <li>cqweb.ictc.com.np - main</li> </ul> <p>Gitlab - gitserver.info.com.np</p>"},{"location":"office/01-credentials/#folder-structure","title":"Folder Structure","text":"<p><code>cqnovelweb-develop</code></p> <p><code>src</code></p> <p><code>assets</code> : contains the image and svg files.</p> <p><code>components</code> : list of all the resuable components.</p> <p><code>hooks</code> : contains the useRoles hooks which is used to give the permission to only limited users.</p> <p><code>json</code> : has the caleder filter data.</p> <p><code>layouts</code> : contains the base layout of cqweb.</p> <p><code>services</code> : core redux - action, reducer, store</p> <p><code>styles</code> : contains the sass styles.</p> <p><code>utils</code> : list of reusable functions.</p>"},{"location":"office/01-credentials/#installation","title":"Installation","text":"<pre><code>$ npm i --legacy-peer-deps\n\n$ npm run product\n</code></pre>"},{"location":"office/01-credentials/#reference","title":"Reference","text":""},{"location":"office/clickup/01-replychatbox/","title":"ReplyChatbox.js","text":"<p>src/views/Email/Includes/ReplyChatBox.js</p>"},{"location":"office/clickup/01-replychatbox/#to-and-cc-to-be-auto-populated-in-internal-message-section","title":"To and Cc to be auto populated in Internal Message Section","text":"<pre><code># changes: linenumber - 894\n\nconst menuGropCreate = () =&gt; (\n  &lt;Menu style={{ maxHeight: 250, overflow: \"auto\" }}&gt;\n    &lt;Menu.Item\n      key=\"Create Group\"\n      onClick={() =&gt; {\n        setCreateGroupModal(true);\n        setGroupDataToBeUpdate();\n        form4.resetFields();\n      }}\n    &gt;\n      Create Group\n    &lt;/Menu.Item&gt;\n\n    {groupData &amp;&amp;\n      groupData?.map((x) =&gt; {\n        return (\n          &lt;Menu.Item\n            key={x?.id}\n            onClick={() =&gt; {\n              let userIdsForTo = [];\n              let userIdsForCc = [];\n              x?.userList?.map((x) =&gt; {\n                if (x?.participantTypeDto?.id === 0) {\n                  userIdsForTo.push(x?.userId);\n                } else {\n                  userIdsForCc.push(x?.userId);\n                }\n              });\n              setSelectTosNewCutGroup(userIdsForTo);\n              setSelectCcsNewCutGroup(userIdsForCc);\n              // added\n              setSelectedEmails(userIdsForCc);\n            }}\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\n          &gt;\n            &lt;div&gt;{x?.groupName}&lt;/div&gt;\n\n            &lt;EditOutlined\n              style={{ paddingLeft: 15 }}\n              onClick={() =&gt; {\n                setGroupDataToBeUpdate(x);\n                setCreateGroupModal(true);\n              }}\n            /&gt;\n          &lt;/Menu.Item&gt;\n        );\n      })}\n  &lt;/Menu&gt;\n);\n\n</code></pre>"},{"location":"office/clickup/01-replychatbox/#solved","title":"Solved","text":"<p>setSelectedEmails(userIdsForCc);</p>"},{"location":"research/01-drf-functionbasedviews/","title":"DRF","text":"<p>Django has two types of views;</p> <ul> <li>function-based views (FBVs), &amp;</li> <li>class-based views (CBVs)</li> </ul> <p>Django originally started out with only FBVs, but then added CBVs as a way to templatize functionality so that you didn\u2019t have to write boilerplate (i.e. the same code) code over and over again.</p>"},{"location":"research/01-drf-functionbasedviews/#function-based-views-fbvs","title":"Function-based views (FBVs)","text":"<p>FBVs code here:</p> <p>Todo App (using FBVs)</p> <p>Let's look at how a simple todo application that allows CRUD operations would be written using only FBVs.</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\ndef task_list_view(request):\n    return render(request, 'todo/task_list.html', {\n        'tasks': Task.objects.all(),\n    })\n\n\ndef task_create_view(request):\n    if request.method == 'POST':\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_create.html', {\n        'form': TaskForm(),\n    })\n\n\ndef task_detail_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {\n        'task': task,\n    })\n\n\ndef task_update_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return HttpResponseRedirect(reverse('task-detail', args={pk: pk}))\n\n    return render(request, 'todo/task_update.html', {\n        'task': task,\n        'form': TaskForm(instance=task),\n    })\n\n\ndef task_delete_view(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n\n    if request.method == 'POST':\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return HttpResponseRedirect(reverse('task-list'))\n\n    return render(request, 'todo/task_delete.html', {\n        'task': task,\n        'form': ConfirmForm(),\n    })\n\n</code></pre> <p>You can get the full source code on GitHub.</p>"},{"location":"research/01-drf-functionbasedviews/#class-based-views-cbvs","title":"Class-based views (CBVs)","text":"<p>CBVs code here:</p> <p></p> <p>Todo App (using CBVs)</p> <p>Now, let's rewrite our todo application to only use CBVs:</p> <pre><code># todo/views.py\n\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.views import View\n\nfrom .forms import TaskForm, ConfirmForm\nfrom .models import Task\n\n\nclass TaskListView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_list.html', {\n            'tasks': Task.objects.all(),\n        })\n\n\nclass TaskCreateView(View):\n\n    def get(self, request, *args, **kwargs):\n        return render(request, 'todo/task_create.html', {\n            'form': TaskForm(),\n        })\n\n    def post(self, request, *args, **kwargs):\n        form = TaskForm(data=request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request)\n\n\nclass TaskDetailView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n\n        return render(request, 'todo/task_detail.html', {\n            'task': task,\n        })\n\n\nclass TaskUpdateView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_update.html', {\n            'task': task,\n            'form': TaskForm(instance=task),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = TaskForm(instance=task, data=request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('task-detail', pk=task.pk)\n\n        return self.get(request, pk)\n\n\nclass TaskDeleteView(View):\n\n    def get(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        return render(request, 'todo/task_confirm_delete.html', {\n            'task': task,\n            'form': ConfirmForm(),\n        })\n\n    def post(self, request, pk, *args, **kwargs):\n        task = get_object_or_404(Task, pk=pk)\n        form = ConfirmForm(data=request.POST)\n        if form.is_valid():\n            task.delete()\n            return redirect('task-list')\n\n        return self.get(request, pk)\n\n</code></pre> <p>Also, let's not forget to make our urls.py call <code>as_view()</code>:</p> <pre><code># todo/urls.py\n\nfrom django.urls import path\n\nfrom .views import TaskListView, TaskDetailView, TaskCreateView, TaskUpdateView, TaskDeleteView\n\n\nurlpatterns = [\n    path('', TaskListView.as_view(), name='task-list'),\n    path('create/', TaskCreateView.as_view(), name='task-create'),\n    path('&lt;int:pk&gt;/', TaskDetailView.as_view(), name='task-detail'),\n    path('update/&lt;int:pk&gt;/', TaskUpdateView.as_view(), name='task-update'),\n    path('delete/&lt;int:pk&gt;/', TaskDeleteView.as_view(), name='task-delete'),\n]\n\n</code></pre> <p>You can get the full source code on Github</p>"},{"location":"research/01-drf-functionbasedviews/#djangos-generic-cbvs","title":"Django's Generic CBVs","text":"<p>Django's generic CBVs are great for solving common problems like retrieving, creating, modifying, and deleting objects as well as pagination and archive views. They speed up the development process too.</p> <pre><code>from django.views.generic import CreateView\n\n\nclass TaskCreateView(CreateView):\n    model = Task\n    context_object_name = 'task'\n    fields = ('name', 'description', 'is_done')\n    template_name = 'todo/task_create.html'\n\n</code></pre>"},{"location":"research/01-drf-functionbasedviews/#djangos-built-in-cbv-types","title":"Django's Built-in CBV Types","text":""},{"location":"research/01-drf-functionbasedviews/#reference","title":"Reference","text":"<ul> <li>Django : Class Based Views vs Function Based Views</li> <li>Class Based vs Function Based Views \u2013 Which One is Better to Use in Django?</li> <li>Class-based vs Function-based Views in Django</li> <li>What Are Django\u2019s Class-Based Views and How to Use Them Effectively</li> </ul>"},{"location":"research/02-react-form/","title":"02 react form","text":"<p>form.getFieldsValue().scopeOfWork</p>"},{"location":"research/03-material-ui/","title":"03 material ui","text":""},{"location":"research/03-material-ui/#installation","title":"Installation","text":"<pre><code>$ npm install @mui/material @emotion/react @emotion/styled\n\n# Roboto font\n$ npm install @fontsource/roboto\n\n# Icons\n$ npm install @mui/icons-material\n</code></pre>"},{"location":"research/03-material-ui/#reference","title":"Reference","text":"<ul> <li>Official material documentaion</li> </ul>"},{"location":"research/04-prevent-default/","title":"e.preventDefault()","text":"<p>The <code>e.preventDefault()</code> method is a common practice in JavaScript when handling events, especially form submissions. It is used to prevent the default behavior associated with an event.</p> <p>In the context of a form submission:</p> <ul> <li> <p>Without e.preventDefault(): If you don't prevent the default behavior of a form submission, the browser will perform its default action, which usually involves sending a request to the server, causing a page reload or navigation.</p> </li> <li> <p>With e.preventDefault(): By calling <code>e.preventDefault()</code> within an event handler, you stop the default action associated with that event. In the case of a form submission, it prevents the browser from navigating away from the current page or triggering a full page reload.</p> </li> </ul> <pre><code>const handleSubmit = (e) =&gt; {\n  e.preventDefault(); // Prevent the default form submission behavior\n\n  // Your custom logic for handling the form submission goes here\n};\n</code></pre>"},{"location":"research/django-view/","title":"Views","text":"<p>As per Django Documentation,</p> <p>A view function is a Python function that takes a Web request and returns a Web response. This response can be the HTML contents of a Web page, or a redirect, or a 404 error, or an XML document, or an image, anything that a web browser can display.</p> <p></p> <p>Django views roughly correspond to controllers in MVC, and Django templates to views in MVC.</p> <p></p> <p></p>"},{"location":"research/django-view/#reference","title":"Reference","text":"<ul> <li>Django Tutorial - geeksforgeeks</li> <li>Django w3schools</li> <li>Django javatpoint</li> <li>Django crud: function based views</li> <li>Django crud: class based views</li> <li>Django project MVT structure</li> <li>Django Tutorial: realPython</li> </ul>"},{"location":"research/middleware/","title":"Middelware","text":"<p>Middleware is a framework of hooks into Django\u2019s request/response processing. It\u2019s a light, low-level \u201cplugin\u201d system for globally altering Django\u2019s input or output.</p>"},{"location":"research/middleware/#reference","title":"Reference","text":"<ul> <li>Django Middleware</li> </ul>"},{"location":"research/tricks/","title":"Tips & Tricks","text":""},{"location":"research/tricks/#on-linux","title":"On Linux","text":"<p>python3 -m venv venv &amp;&amp; source venv/bin/activate</p>"},{"location":"research/tricks/#on-windows","title":"On Windows","text":"<p>.\\venv\\Scripts\\activate</p>"},{"location":"research/tricks/#python","title":"Python","text":"<pre><code>$ python manage.py shell\n\n# create the object using the model\n\n&gt; from geeks.models import GeeksModel\n&gt; GeeksModel.objects.create(title=\"title1\",description=\"description1\").save()\n&gt; GeeksModel.objects.create(title=\"title2\",description=\"description2\").save()\n</code></pre>"}]}