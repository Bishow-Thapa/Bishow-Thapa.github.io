<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Bishow Thapa</title><link>https://bishow-thapa.github.io/</link><atom:link href="https://bishow-thapa.github.io/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/Bishow-Thapa</docs><language>en</language> <pubDate>Thu, 25 Apr 2024 10:05:35 -0000</pubDate> <lastBuildDate>Thu, 25 Apr 2024 10:05:35 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.11.0</generator> <item> <title>Ensuring Admin Access Control in Django Models</title> <author>bishow</author> <description>&lt;h1&gt;Ensuring Admin Access Control in Django Models&lt;/h1&gt;&lt;p&gt;In a Django project, managing access control to models within the admin interface is crucial for maintaining data integrity and security. While Django provides powerful tools for defining permissions, it&#39;s essential to customize these permissions to meet specific requirements.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/05/02/ensuring-admin-access-control-in-django-models/</link> <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/05/02/ensuring-admin-access-control-in-django-models/</guid> </item> <item> <title>Preventing Unintended Form Resubmission in Web Applications</title> <author>bishow</author> <description>&lt;h1&gt;Preventing Unintended Form Resubmission in Web Applications&lt;/h1&gt;&lt;p&gt;Have you ever encountered the frustrating message &#34;Contact Form Resubmission&#34; while using web forms? This message typically appears when you attempt to resubmit form data after a page refresh or navigation action. Not only is it annoying, but it can also lead to unintended consequences such as duplicate transactions or data corruption. In this blog post, we&#39;ll explore why this happens and how to prevent it in your web applications.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/</link> <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/05/01/preventing-unintended-form-resubmission-in-web-applications/</guid> </item> <item> <title>Exploring Static and Dynamic Model Choices in Django</title> <author>bishow</author> <description>&lt;h1&gt;Exploring Static and Dynamic Model Choices in Django&lt;/h1&gt;&lt;p&gt;When developing web applications with Django, one often encounters scenarios where models need to interact with predefined choices or dynamically generated options. Django provides two primary methods to handle these situations: static model choices and dynamic choices models.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/</link> <pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/29/exploring-static-and-dynamic-model-choices-in-django/</guid> </item> <item> <title>Difference between TemplateView, ListView, and View</title> <author>bishow</author> <description>&lt;h1&gt;Difference between TemplateView, ListView, and View&lt;/h1&gt;&lt;p&gt;In Django, &lt;code&gt;TemplateView&lt;/code&gt;, &lt;code&gt;ListView&lt;/code&gt;, and &lt;code&gt;View&lt;/code&gt; are all ==class-based views== used to handle HTTP requests. Here&#39;s a brief overview of when to use each:&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/27/difference-between-templateview-listview-and-view/</link> <pubDate>Sat, 27 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/27/difference-between-templateview-listview-and-view/</guid> </item> <item> <title>Understanding Django Query Methods: objects.all() vs get_object_or_404()</title> <author>bishow</author> <description>&lt;h1&gt;Understanding Django Query Methods: objects.all() vs get_object_or_404()&lt;/h1&gt;&lt;p&gt;In Django development, two commonly used methods for retrieving objects from the database are &lt;code&gt;objects.all()&lt;/code&gt; and &lt;code&gt;get_object_or_404()&lt;/code&gt;. Although they both deal with database queries, they serve different purposes and are used in different contexts.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/</link> <pubDate>Fri, 26 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/26/understanding-django-query-methods-objectsall-vs-get_object_or_404/</guid> </item> <item> <title>A peek into str method in django</title> <author>bishow</author> <description>&lt;h1&gt;A peek into str method in django&lt;/h1&gt;&lt;p&gt;In Django, &lt;code&gt;__str__&lt;/code&gt; is a special method used in Python classes to define how an instance of that class should be represented as a string. It&#39;s similar to the toString() method in other programming languages.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/25/a-peek-into-str-method-in-django/</link> <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/25/a-peek-into-str-method-in-django/</guid> </item> <item> <title>How to handle nullable &amp; non-nullable fields in django</title> <author>bishow</author> <description>&lt;h1&gt;How to handle nullable &amp;amp; non-nullable fields in django&lt;/h1&gt;&lt;p&gt;When designing databases in Django models, one common scenario is dealing with nullable fields. These fields allow for flexibility in data entry, as they can be left empty when necessary. However, managing nullable fields effectively is crucial to ensure consistency and usability within your application.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/</link> <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/24/how-to-handle-nullable--non-nullable-fields-in-django/</guid> </item> <item> <title>Strengthening Your Django Applications with Defensive Programming</title> <author>bishow</author> <description>&lt;h1&gt;Strengthening Your Django Applications with Defensive Programming&lt;/h1&gt;&lt;p&gt;Defensive programming is a ==programming paradigm== or approach aimed at writing code that anticipates and guards against potential errors or unexpected behaviors. &lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/23/strengthening-your-django-applications-with-defensive-programming/</link> <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/23/strengthening-your-django-applications-with-defensive-programming/</guid> </item> <item> <title>Enhancing Django Development with Model help_text</title> <author>bishow</author> <description>&lt;h1&gt;Enhancing Django Development with Model &lt;code&gt;help_text&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;In the bustling world of web development, Django stands out as a beacon of efficiency and clarity. Its robust features streamline the creation of dynamic web applications, but one often underestimated gem is the &lt;code&gt;help_text&lt;/code&gt; attribute of Django models. Let&#39;s uncover its power and potential impact with a closer look.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/23/enhancing-django-development-with-model-help_text/</link> <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/23/enhancing-django-development-with-model-help_text/</guid> </item> <item> <title>form.setFieldsValue vs defaultValue in react</title> <author>bishow</author> <description>&lt;h1&gt;form.setFieldsValue &lt;code&gt;vs&lt;/code&gt; defaultValue in react&lt;/h1&gt;&lt;p&gt;Whether to set the default value using form.setFieldsValue or by using the defaultValue prop in &lt;code&gt;&amp;lt;Select&amp;gt;&lt;/code&gt; depends on your specific use case and preference.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/23/formsetfieldsvalue-vs-defaultvalue-in-react/</link> <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/23/formsetfieldsvalue-vs-defaultvalue-in-react/</guid> </item> <item> <title>M is bigger than V and C in Django</title> <author>bishow</author> <description>&lt;h1&gt;M is bigger than V and C in Django&lt;/h1&gt;&lt;p&gt;In Django, models are classes that provide an object-oriented way of dealing with databases. Typically, each class refers to a database table and each attribute refers to a database column. You can make queries to these tables using an automatically generated API.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/20/m-is-bigger-than-v-and-c-in-django/</link> <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/20/m-is-bigger-than-v-and-c-in-django/</guid> </item> <item> <title>Env variable in ubuntu</title> <author>bishow</author> <description>&lt;p&gt;Understanding and manipulating environment variables is crucial for configuring your Ubuntu system to suit your needs. Environment variables are dynamic values that affect the behavior of processes running in your Linux environment. In this short guide, we&#39;ll explore how to &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;manage&lt;/code&gt; environment variables in Ubuntu.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/19/env-variable-in-ubuntu/</link> <pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/19/env-variable-in-ubuntu/</guid> </item> <item> <title>Django Images not showing in the Cpanel or Shared Hosting</title> <author>bishow</author> <description>&lt;h1&gt;Django Images not showing in the Cpanel or Shared Hosting&lt;/h1&gt;&lt;p&gt;Using the &lt;strong&gt;re_path&lt;/strong&gt; and &lt;strong&gt;serve&lt;/strong&gt; combination in a URL pattern to serve media files (&lt;code&gt;MEDIA_ROOT&lt;/code&gt;) directly in a production environment is a common approach, especially in scenarios where you might not have direct access to configure a web server like Nginx or Apache. &lt;/p&gt;&lt;p&gt;While it&#39;s not the most optimal solution for high-traffic production environments, it can work effectively in smaller-scale deployments or situations where simplicity is preferred.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/18/django-images-not-showing-in-the-cpanel-or-shared-hosting/</link> <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/18/django-images-not-showing-in-the-cpanel-or-shared-hosting/</guid> </item> <item> <title>Managing settings for multiple environments in django</title> <author>bishow</author> <description>&lt;h1&gt;Managing settings for multiple environments in django&lt;/h1&gt;&lt;p&gt;In real-world projects, you will have to deal with multiple environments. we have at least a local environment for development and a production environment for serving your application. &lt;/p&gt;&lt;p&gt;we will use a base file that defines common settings, and a settings file per environment that overrides any necessary settings and defines additional ones.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/17/managing-settings-for-multiple-environments-in-django/</link> <pubDate>Wed, 17 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/17/managing-settings-for-multiple-environments-in-django/</guid> </item> <item> <title>Unveiling Python&#39;s Hidden Gems: Exploring the Secrets Module</title> <author>bishow</author> <description>&lt;h1&gt;Unveiling Python&#39;s Hidden Gems: Exploring the Secrets Module&lt;/h1&gt;&lt;p&gt;The secrets module in Python is a powerhouse when it comes to handling sensitive data such as passwords, API keys, and cryptographic tokens. Its primary purpose? Generating cryptographically strong random numbers suitable for managing data in a secure manner.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/16/unveiling-pythons-hidden-gems-exploring-the-secrets-module/</link> <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/16/unveiling-pythons-hidden-gems-exploring-the-secrets-module/</guid> </item> <item> <title>Understanding JavaScript Array Methods: Mutating vs. Non-Mutating</title> <author>bishow</author> <description>&lt;h1&gt;Understanding JavaScript Array Methods: Mutating vs. Non-Mutating&lt;/h1&gt;&lt;p&gt;When working with arrays in JavaScript, it&#39;s crucial to understand the distinction between &lt;strong&gt;mutating&lt;/strong&gt; and &lt;strong&gt;non-mutating&lt;/strong&gt; array methods. This differentiation plays a significant role in how arrays are manipulated and can greatly impact the behavior of your code.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/04/01/understanding-javascript-array-methods-mutating-vs-non-mutating/</link> <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/04/01/understanding-javascript-array-methods-mutating-vs-non-mutating/</guid> </item> <item> <title>Understanding the Impact of the Return Statement in JavaScript&#39;s Map Function</title> <author>bishow</author> <description>&lt;h1&gt;Understanding the Impact of the Return Statement in JavaScript&#39;s Map Function&lt;/h1&gt;&lt;p&gt;In JavaScript, the &lt;code&gt;map&lt;/code&gt; function is a powerful tool for transforming arrays by applying a function to each element. However, the presence or absence of the &lt;code&gt;return&lt;/code&gt; statement within this function can significantly affect its behavior and the resulting output.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/</link> <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/01/29/understanding-the-impact-of-the-return-statement-in-javascripts-map-function/</guid> </item> <item> <title>A Guide to Secure Your Commits with GPG Keys</title> <author>bishow</author> <description>&lt;h1&gt;A Guide to Secure Your Commits with GPG Keys&lt;/h1&gt;&lt;p&gt;In the fast-paced world of software development, maintaining the integrity of your code is paramount. One powerful tool that helps ensure the authenticity of your commits is the GNU Privacy Guard (GPG). In this guide, we&#39;ll walk through the process of generating and using GPG keys to sign your commits, providing an extra layer of security for your projects.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/</link> <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/01/25/a-guide-to-secure-your-commits-with-gpg-keys/</guid> </item> <item> <title>Understanding the SSH Agent: Why It Matters in Managing SSH Keys</title> <author>bishow</author> <description>&lt;h1&gt;Understanding the SSH Agent: Why It Matters in Managing SSH Keys&lt;/h1&gt;&lt;p&gt;Secure Shell (SSH) is a widely used protocol for secure communication over a computer network. It provides a secure way to access remote servers, transfer files, and execute commands. When working with multiple SSH keys for different purposes or accounts, it becomes essential to use an SSH agent. This blog post explores the significance of the SSH agent and why it is crucial in managing SSH keys.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/</link> <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/01/23/understanding-the-ssh-agent-why-it-matters-in-managing-ssh-keys/</guid> </item> <item> <title>How to Check the React Version in Your Project</title> <author>bishow</author> <description>&lt;h1&gt;How to Check the React Version in Your Project&lt;/h1&gt;&lt;p&gt;React, a popular JavaScript library for building user interfaces, undergoes regular updates to introduce new features, improvements, and bug fixes. As a React developer, it&#39;s essential to know the version of React used in your project. In this short blog post, we&#39;ll explore how you can easily check the React version of your project.&lt;/p&gt;</description><link>https://bishow-thapa.github.io/blog/2024/01/22/how-to-check-the-react-version-in-your-project/</link> <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><source url="https://bishow-thapa.github.io/feed_rss_created.xml">Bishow Thapa</source><guid isPermaLink="true">https://bishow-thapa.github.io/blog/2024/01/22/how-to-check-the-react-version-in-your-project/</guid> </item> </channel></rss>